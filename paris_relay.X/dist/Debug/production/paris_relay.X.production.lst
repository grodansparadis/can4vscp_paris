

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Sun Sep 13 15:59:57 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	text74,global,reloc=2,class=CODE,delta=1
    86                           	psect	text75,global,reloc=2,class=CODE,delta=1
    87                           	psect	text76,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    89                           	psect	text78,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    92                           	psect	pa_nodes,global,class=CODE,delta=1
    93  0000                     tblptrh	equ	0xFF7
    94                           tblptrl	equ	0xFF6
    95                           tablat	equ	0xFF5
    96                           prodh	equ	0xFF4
    97                           prodl	equ	0xFF3
    98                           intcon	equ	0xFF2
    99                           wreg	equ	0xFE8
   100                           indf1	equ	0xFE7
   101                           fsr1h	equ	0xFE2
   102                           fsr1l	equ	0xFE1
   103                           indf2	equ	0xFDF
   104                           postinc2	equ	0xFDE
   105                           postdec2	equ	0xFDD
   106                           plusw2	equ	0xFDB
   107                           fsr2h	equ	0xFDA
   108                           fsr2l	equ	0xFD9
   109                           status	equ	0xFD8
   110                           
   111                           	psect	smallconst
   112  000600                     __psmallconst:
   113                           	opt stack 0
   114  000600                     _vscp_deviceURL:
   115                           	opt stack 0
   116  000600  77                 	db	119
   117  000601  77                 	db	119
   118  000602  77                 	db	119
   119  000603  2E                 	db	46
   120  000604  65                 	db	101
   121  000605  75                 	db	117
   122  000606  72                 	db	114
   123  000607  6F                 	db	111
   124  000608  73                 	db	115
   125  000609  6F                 	db	111
   126  00060A  75                 	db	117
   127  00060B  72                 	db	114
   128  00060C  63                 	db	99
   129  00060D  65                 	db	101
   130  00060E  2E                 	db	46
   131  00060F  73                 	db	115
   132  000610  65                 	db	101
   133  000611  2F                 	db	47
   134  000612  70                 	db	112
   135  000613  61                 	db	97
   136  000614  72                 	db	114
   137  000615  69                 	db	105
   138  000616  73                 	db	115
   139  000617  5F                 	db	95
   140  000618  30                 	db	48
   141  000619  31                 	db	49
   142  00061A  30                 	db	48
   143  00061B  2E                 	db	46
   144  00061C  78                 	db	120
   145  00061D  6D                 	db	109
   146  00061E  6C                 	db	108
   147  00061F  00                 	db	0
   148  000620                     __end_of_vscp_deviceURL:
   149                           	opt stack 0
   150  0000                     _BRGCON1	set	3952
   151  0000                     _BRGCON2	set	3953
   152  0000                     _BRGCON3	set	3954
   153  0000                     _BSEL0	set	3576
   154  0000                     _CANCON	set	3951
   155  0000                     _CIOCON	set	3955
   156  0000                     _ECANCON	set	3959
   157  0000                     _EEADR	set	4009
   158  0000                     _EECON1bits	set	4006
   159  0000                     _EECON2	set	4007
   160  0000                     _EEDATA	set	4008
   161  0000                     _INTCONbits	set	4082
   162  0000                     _LATBbits	set	3978
   163  0000                     _LATCbits	set	3979
   164  0000                     _MSEL0	set	3568
   165  0000                     _MSEL1	set	3569
   166  0000                     _MSEL2	set	3570
   167  0000                     _PORTA	set	3968
   168  0000                     _PORTB	set	3969
   169  0000                     _PORTC	set	3970
   170  0000                     _PORTCbits	set	3970
   171  0000                     _RXB1CONbits	set	3920
   172  0000                     _RXF0EIDH	set	3842
   173  0000                     _RXF0EIDL	set	3843
   174  0000                     _RXF0SIDH	set	3840
   175  0000                     _RXF0SIDL	set	3841
   176  0000                     _RXF1EIDH	set	3846
   177  0000                     _RXF1EIDL	set	3847
   178  0000                     _RXF1SIDL	set	3845
   179  0000                     _RXFBCON0	set	3552
   180  0000                     _RXFBCON1	set	3553
   181  0000                     _RXFBCON2	set	3554
   182  0000                     _RXFBCON3	set	3555
   183  0000                     _RXFBCON4	set	3556
   184  0000                     _RXFBCON5	set	3557
   185  0000                     _RXFBCON6	set	3558
   186  0000                     _RXFBCON7	set	3559
   187  0000                     _RXFCON0	set	3540
   188  0000                     _RXFCON1	set	3541
   189  0000                     _RXM0EIDH	set	3866
   190  0000                     _RXM0EIDL	set	3867
   191  0000                     _RXM0SIDH	set	3864
   192  0000                     _RXM0SIDL	set	3865
   193  0000                     _RXM1EIDH	set	3870
   194  0000                     _RXM1EIDL	set	3871
   195  0000                     _RXM1SIDL	set	3869
   196  0000                     _T0CON	set	4053
   197  0000                     _T0CONbits	set	4053
   198  0000                     _TMR0H	set	4055
   199  0000                     _TMR0L	set	4054
   200  0000                     _TRISA	set	3986
   201  0000                     _TRISB	set	3987
   202  0000                     _TRISC	set	3988
   203  0000                     _B0RXFUL	set	28935
   204  0000                     _B0TXEN	set	28610
   205  0000                     _B1RXFUL	set	29063
   206  0000                     _B1TXEN	set	28611
   207  0000                     _B2RXFUL	set	29191
   208  0000                     _B2TXEN	set	28612
   209  0000                     _B3RXFUL	set	29319
   210  0000                     _B3TXEN	set	28613
   211  0000                     _B4RXFUL	set	29447
   212  0000                     _B4TXEN	set	28614
   213  0000                     _B5RXFUL	set	29575
   214  0000                     _B5TXEN	set	28615
   215  0000                     _FIFOEMPTY	set	31655
   216  0000                     _IRXIF	set	32039
   217  0000                     _MDSEL0	set	31678
   218  0000                     _MDSEL1	set	31679
   219  0000                     _RXB0FILHIT0	set	31488
   220  0000                     _RXB0FUL	set	31495
   221  0000                     _RXB0IF	set	32032
   222  0000                     _RXB0OVFL	set	31655
   223  0000                     _RXB1IF	set	32033
   224  0000                     _RXB1OVFL	set	31654
   225  0000                     _RXF1EN	set	28321
   226  0000                     _RXM0EXIDM	set	30923
   227  0000                     _RXM1EXIDEN	set	30955
   228  0000                     _B0CON	set	3616
   229  0000                     _B1CON	set	3632
   230  0000                     _B2CON	set	3648
   231  0000                     _B3CON	set	3664
   232  0000                     _B4CON	set	3680
   233  0000                     _B5CON	set	3696
   234  0000                     _RXB0CON	set	3936
   235  0000                     _RXB1CON	set	3920
   236  0000                     _RXF1SIDH	set	3844
   237  0000                     _RXM1SIDH	set	3868
   238  0000                     _TXB0CON	set	3904
   239  0000                     _TXB1CON	set	3888
   240  0000                     _TXB2CON	set	3872
   241                           
   242                           ; #config settings
   243  000620  00                 	db	0	; dummy byte at the end
   244  0000                     tblptrh	equ	0xFF7
   245                           tblptrl	equ	0xFF6
   246                           tablat	equ	0xFF5
   247                           prodh	equ	0xFF4
   248                           prodl	equ	0xFF3
   249                           intcon	equ	0xFF2
   250                           wreg	equ	0xFE8
   251                           indf1	equ	0xFE7
   252                           fsr1h	equ	0xFE2
   253                           fsr1l	equ	0xFE1
   254                           indf2	equ	0xFDF
   255                           postinc2	equ	0xFDE
   256                           postdec2	equ	0xFDD
   257                           plusw2	equ	0xFDB
   258                           fsr2h	equ	0xFDA
   259                           fsr2l	equ	0xFD9
   260                           status	equ	0xFD8
   261                           
   262                           	psect	cinit
   263  003B3A                     __pcinit:
   264                           	opt stack 0
   265  003B3A                     start_initialization:
   266                           	opt stack 0
   267  003B3A                     __initialization:
   268                           	opt stack 0
   269                           
   270                           ; Clear objects allocated to BANK0 (80 bytes)
   271  003B3A  EE00  F060         	lfsr	0,__pbssBANK0
   272  003B3E  0E50               	movlw	80
   273  003B40                     clear_0:
   274  003B40  6AEE               	clrf	postinc0,c
   275  003B42  06E8               	decf	wreg,f,c
   276  003B44  E1FD               	bnz	clear_0
   277                           
   278                           ; Clear objects allocated to COMRAM (7 bytes)
   279  003B46  EE00  F052         	lfsr	0,__pbssCOMRAM
   280  003B4A  0E07               	movlw	7
   281  003B4C                     clear_1:
   282  003B4C  6AEE               	clrf	postinc0,c
   283  003B4E  06E8               	decf	wreg,f,c
   284  003B50  E1FD               	bnz	clear_1
   285  003B52                     end_of_initialization:
   286                           	opt stack 0
   287  003B52                     __end_of__initialization:
   288                           	opt stack 0
   289  003B52  0E00               	movlw	low (__Lmediumconst shr (0+16))
   290  003B54  6EF8               	movwf	tblptru,c
   291  003B56  0100               	movlb	0
   292  003B58  EFDE  F018         	goto	_main	;jump to C main() function
   293                           tblptru	equ	0xFF8
   294                           tblptrh	equ	0xFF7
   295                           tblptrl	equ	0xFF6
   296                           tablat	equ	0xFF5
   297                           prodh	equ	0xFF4
   298                           prodl	equ	0xFF3
   299                           intcon	equ	0xFF2
   300                           postinc0	equ	0xFEE
   301                           wreg	equ	0xFE8
   302                           indf1	equ	0xFE7
   303                           fsr1h	equ	0xFE2
   304                           fsr1l	equ	0xFE1
   305                           indf2	equ	0xFDF
   306                           postinc2	equ	0xFDE
   307                           postdec2	equ	0xFDD
   308                           plusw2	equ	0xFDB
   309                           fsr2h	equ	0xFDA
   310                           fsr2l	equ	0xFD9
   311                           status	equ	0xFD8
   312                           
   313                           	psect	bssCOMRAM
   314  000052                     __pbssCOMRAM:
   315                           	opt stack 0
   316  000052                     _vscp_page_select:
   317                           	opt stack 0
   318  000052                     	ds	2
   319  000054                     __ECANRxFilterHitInfo:
   320                           	opt stack 0
   321  000054                     	ds	1
   322  000055                     _vscp_alarmstatus:
   323                           	opt stack 0
   324  000055                     	ds	1
   325  000056                     _vscp_initledfunc:
   326                           	opt stack 0
   327  000056                     	ds	1
   328  000057                     _vscp_probe_address:
   329                           	opt stack 0
   330  000057                     	ds	1
   331  000058                     _vscp_statuscnt:
   332                           	opt stack 0
   333  000058                     	ds	1
   334                           tblptru	equ	0xFF8
   335                           tblptrh	equ	0xFF7
   336                           tblptrl	equ	0xFF6
   337                           tablat	equ	0xFF5
   338                           prodh	equ	0xFF4
   339                           prodl	equ	0xFF3
   340                           intcon	equ	0xFF2
   341                           postinc0	equ	0xFEE
   342                           wreg	equ	0xFE8
   343                           indf1	equ	0xFE7
   344                           fsr1h	equ	0xFE2
   345                           fsr1l	equ	0xFE1
   346                           indf2	equ	0xFDF
   347                           postinc2	equ	0xFDE
   348                           postdec2	equ	0xFDD
   349                           plusw2	equ	0xFDB
   350                           fsr2h	equ	0xFDA
   351                           fsr2l	equ	0xFD9
   352                           status	equ	0xFD8
   353                           
   354                           	psect	bssBANK0
   355  000060                     __pbssBANK0:
   356                           	opt stack 0
   357  000060                     _relay_protection_timer:
   358                           	opt stack 0
   359  000060                     	ds	16
   360  000070                     _relay_pulse_timer:
   361                           	opt stack 0
   362  000070                     	ds	16
   363  000080                     _measurement_clock:
   364                           	opt stack 0
   365  000080                     	ds	4
   366  000084                     _vscp_configtimer:
   367                           	opt stack 0
   368  000084                     	ds	2
   369  000086                     _vscp_timer:
   370                           	opt stack 0
   371  000086                     	ds	2
   372  000088                     _hours:
   373                           	opt stack 0
   374  000088                     	ds	1
   375  000089                     _minutes:
   376                           	opt stack 0
   377  000089                     	ds	1
   378  00008A                     _relay_pulse_flags:
   379                           	opt stack 0
   380  00008A                     	ds	1
   381  00008B                     _seconds:
   382                           	opt stack 0
   383  00008B                     	ds	1
   384  00008C                     _vscp_guid_reset:
   385                           	opt stack 0
   386  00008C                     	ds	1
   387  00008D                     _vscp_hour:
   388                           	opt stack 0
   389  00008D                     	ds	1
   390  00008E                     _vscp_initbtncnt:
   391                           	opt stack 0
   392  00008E                     	ds	1
   393  00008F                     _vscp_minute:
   394                           	opt stack 0
   395  00008F                     	ds	1
   396  000090                     _vscp_nickname:
   397                           	opt stack 0
   398  000090                     	ds	1
   399  000091                     _vscp_node_state:
   400                           	opt stack 0
   401  000091                     	ds	1
   402  000092                     _vscp_node_substate:
   403                           	opt stack 0
   404  000092                     	ds	1
   405  000093                     _vscp_probe_cnt:
   406                           	opt stack 0
   407  000093                     	ds	1
   408  000094                     _vscp_second:
   409                           	opt stack 0
   410  000094                     	ds	1
   411  000095                     _vscp_imsg:
   412                           	opt stack 0
   413  000095                     	ds	14
   414  0000A3                     _vscp_omsg:
   415                           	opt stack 0
   416  0000A3                     	ds	13
   417                           tblptru	equ	0xFF8
   418                           tblptrh	equ	0xFF7
   419                           tblptrl	equ	0xFF6
   420                           tablat	equ	0xFF5
   421                           prodh	equ	0xFF4
   422                           prodl	equ	0xFF3
   423                           intcon	equ	0xFF2
   424                           postinc0	equ	0xFEE
   425                           wreg	equ	0xFE8
   426                           indf1	equ	0xFE7
   427                           fsr1h	equ	0xFE2
   428                           fsr1l	equ	0xFE1
   429                           indf2	equ	0xFDF
   430                           postinc2	equ	0xFDE
   431                           postdec2	equ	0xFDD
   432                           plusw2	equ	0xFDB
   433                           fsr2h	equ	0xFDA
   434                           fsr2l	equ	0xFD9
   435                           status	equ	0xFD8
   436                           
   437                           	psect	cstackBANK0
   438  0000B0                     __pcstackBANK0:
   439                           	opt stack 0
   440  0000B0                     ??_sendVSCPFrame:
   441                           
   442                           ; 0 bytes @ 0x0
   443  0000B0                     	ds	20
   444  0000C4                     ?_SendInformationEvent:
   445                           	opt stack 0
   446  0000C4                     ?_vscp_sendHeartBeat:
   447                           	opt stack 0
   448  0000C4                     SendInformationEvent@eventClass:
   449                           	opt stack 0
   450  0000C4                     vscp_sendHeartBeat@subzone:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x14
   454  0000C4                     	ds	1
   455  0000C5                     SendInformationEvent@eventTypeId:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x15
   459  0000C5                     	ds	1
   460  0000C6                     ??_doActionOff:
   461  0000C6                     ??_doActionOn:
   462  0000C6                     ??_doActionStatus:
   463  0000C6                     ??_doActionToggle:
   464  0000C6                     ??_vscp_writeAppReg:
   465                           
   466                           ; 0 bytes @ 0x16
   467  0000C6                     	ds	2
   468  0000C8                     doActionOff@dmflags:
   469                           	opt stack 0
   470  0000C8                     doActionStatus@dmflags:
   471                           	opt stack 0
   472  0000C8                     doActionToggle@dmflags:
   473                           	opt stack 0
   474                           
   475                           ; 1 bytes @ 0x18
   476  0000C8                     	ds	1
   477  0000C9                     vscp_writeAppReg@bInfoEvent:
   478                           	opt stack 0
   479  0000C9                     doActionOn@dmflags:
   480                           	opt stack 0
   481  0000C9                     doActionOff@val:
   482                           	opt stack 0
   483  0000C9                     doActionStatus@bOn:
   484                           	opt stack 0
   485  0000C9                     doActionToggle@val:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x19
   489  0000C9                     	ds	1
   490  0000CA                     vscp_writeAppReg@val_682:
   491                           	opt stack 0
   492  0000CA                     doActionOn@val:
   493                           	opt stack 0
   494  0000CA                     doActionOff@i:
   495                           	opt stack 0
   496  0000CA                     doActionStatus@val:
   497                           	opt stack 0
   498  0000CA                     doActionToggle@bOn:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x1A
   502  0000CA                     	ds	1
   503  0000CB                     ??_doApplicationOneSecondWork:
   504  0000CB                     vscp_writeAppReg@rv:
   505                           	opt stack 0
   506  0000CB                     doActionOn@i:
   507                           	opt stack 0
   508  0000CB                     doActionStatus@i:
   509                           	opt stack 0
   510  0000CB                     doActionToggle@i:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x1B
   514  0000CB                     	ds	1
   515  0000CC                     ??_doDM:
   516  0000CC                     vscp_writeAppReg@bOn:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x1C
   520  0000CC                     	ds	1
   521  0000CD                     vscp_writeAppReg@reg:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x1D
   525  0000CD                     	ds	1
   526  0000CE                     ?_vscp_writeRegister:
   527                           	opt stack 0
   528  0000CE                     doApplicationOneSecondWork@bOn:
   529                           	opt stack 0
   530  0000CE                     vscp_writeRegister@value:
   531                           	opt stack 0
   532                           
   533                           ; 1 bytes @ 0x1E
   534  0000CE                     	ds	1
   535  0000CF                     doApplicationOneSecondWork@ctrlreg:
   536                           	opt stack 0
   537  0000CF                     vscp_writeRegister@reg:
   538                           	opt stack 0
   539  0000CF                     doDM@class_filter:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x1F
   543  0000CF                     	ds	1
   544  0000D0                     ??_vscp_handleProtocolEvent:
   545  0000D0                     doApplicationOneSecondWork@i:
   546                           	opt stack 0
   547                           
   548                           ; 1 bytes @ 0x20
   549  0000D0                     	ds	1
   550  0000D1                     doDM@class_mask:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0x21
   554  0000D1                     	ds	2
   555  0000D3                     doDM@type_filter:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0x23
   559  0000D3                     	ds	1
   560  0000D4                     doDM@type_mask:
   561                           	opt stack 0
   562                           
   563                           ; 1 bytes @ 0x24
   564  0000D4                     	ds	1
   565  0000D5                     _doDM$2152:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x25
   569  0000D5                     	ds	1
   570  0000D6                     _doDM$2153:
   571                           	opt stack 0
   572                           
   573                           ; 1 bytes @ 0x26
   574  0000D6                     	ds	1
   575  0000D7                     _doDM$2154:
   576                           	opt stack 0
   577  0000D7                     vscp_handleProtocolEvent@page_save:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x27
   581  0000D7                     	ds	1
   582  0000D8                     _doDM$2155:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x28
   586  0000D8                     	ds	1
   587  0000D9                     _doDM$2156:
   588                           	opt stack 0
   589  0000D9                     vscp_handleProtocolEvent@page_save_1294:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x29
   593  0000D9                     	ds	1
   594  0000DA                     _doDM$2157:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0x2A
   598  0000DA                     	ds	1
   599  0000DB                     doDM@dmflags:
   600                           	opt stack 0
   601  0000DB                     vscp_handleProtocolEvent@offset:
   602                           	opt stack 0
   603                           
   604                           ; 1 bytes @ 0x2B
   605  0000DB                     	ds	1
   606  0000DC                     doDM@i:
   607                           	opt stack 0
   608  0000DC                     vscp_handleProtocolEvent@pos:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x2C
   612  0000DC                     	ds	1
   613  0000DD                     vscp_handleProtocolEvent@bytes:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x2D
   617  0000DD                     	ds	1
   618  0000DE                     vscp_handleProtocolEvent@len:
   619                           	opt stack 0
   620                           
   621                           ; 1 bytes @ 0x2E
   622  0000DE                     	ds	1
   623  0000DF                     vscp_handleProtocolEvent@pos_1283:
   624                           	opt stack 0
   625                           
   626                           ; 1 bytes @ 0x2F
   627  0000DF                     	ds	1
   628  0000E0                     vscp_handleProtocolEvent@len_1284:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0x30
   632  0000E0                     	ds	1
   633  0000E1                     vscp_handleProtocolEvent@bytes_this_time:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0x31
   637  0000E1                     	ds	1
   638  0000E2                     vscp_handleProtocolEvent@cb:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0x32
   642  0000E2                     	ds	1
   643  0000E3                     vscp_handleProtocolEvent@i_1293:
   644                           	opt stack 0
   645                           
   646                           ; 1 bytes @ 0x33
   647  0000E3                     	ds	1
   648  0000E4                     vscp_handleProtocolEvent@k:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x34
   652  0000E4                     	ds	1
   653  0000E5                     vscp_handleProtocolEvent@i_1282:
   654                           	opt stack 0
   655                           
   656                           ; 1 bytes @ 0x35
   657  0000E5                     	ds	1
   658  0000E6                     vscp_handleProtocolEvent@byte:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x36
   662  0000E6                     	ds	1
   663  0000E7                     vscp_handleProtocolEvent@bytes_1289:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0x37
   667  0000E7                     	ds	2
   668  0000E9                     vscp_handleProtocolEvent@i_1285:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x39
   672  0000E9                     	ds	1
   673  0000EA                     vscp_handleProtocolEvent@i:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0x3A
   677  0000EA                     	ds	1
   678  0000EB                     vscp_handleProtocolEvent@j:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x3B
   682  0000EB                     	ds	1
   683                           tblptru	equ	0xFF8
   684                           tblptrh	equ	0xFF7
   685                           tblptrl	equ	0xFF6
   686                           tablat	equ	0xFF5
   687                           prodh	equ	0xFF4
   688                           prodl	equ	0xFF3
   689                           intcon	equ	0xFF2
   690                           postinc0	equ	0xFEE
   691                           wreg	equ	0xFE8
   692                           indf1	equ	0xFE7
   693                           fsr1h	equ	0xFE2
   694                           fsr1l	equ	0xFE1
   695                           indf2	equ	0xFDF
   696                           postinc2	equ	0xFDE
   697                           postdec2	equ	0xFDD
   698                           plusw2	equ	0xFDB
   699                           fsr2h	equ	0xFDA
   700                           fsr2l	equ	0xFD9
   701                           status	equ	0xFD8
   702                           
   703                           	psect	cstackCOMRAM
   704  000001                     __pcstackCOMRAM:
   705                           	opt stack 0
   706  000001                     ?i1_WriteTimer0:
   707                           	opt stack 0
   708  000001                     i1WriteTimer0@timer0:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x0
   712  000001                     	ds	2
   713  000003                     i1WriteTimer0@timer:
   714                           	opt stack 0
   715                           
   716                           ; 2 bytes @ 0x2
   717  000003                     	ds	2
   718  000005                     ??_interrupt_at_low_vector:
   719                           
   720                           ; 0 bytes @ 0x4
   721  000005                     	ds	3
   722  000008                     ?_WriteTimer0:
   723                           	opt stack 0
   724  000008                     ?_Write_b_eep:
   725                           	opt stack 0
   726  000008                     ?__CANIDToRegs:
   727                           	opt stack 0
   728  000008                     ?__RegsToCANID:
   729                           	opt stack 0
   730  000008                     ??_vscp_getMDF_URL:
   731  000008                     ?_Read_b_eep:
   732                           	opt stack 0
   733  000008                     ?___lbmod:
   734                           	opt stack 0
   735  000008                     ?__ECANPointBuffer:
   736                           	opt stack 0
   737  000008                     ?_vscp_getFamilyCode:
   738                           	opt stack 0
   739  000008                     ?_vscp_getFamilyType:
   740                           	opt stack 0
   741  000008                     vscp_getMatrixInfo@i:
   742                           	opt stack 0
   743  000008                     ECANSetOperationMode@mode:
   744                           	opt stack 0
   745  000008                     OpenTimer0@config:
   746                           	opt stack 0
   747  000008                     ___lbmod@divisor:
   748                           	opt stack 0
   749  000008                     __CANIDToRegs@ptr:
   750                           	opt stack 0
   751  000008                     __RegsToCANID@ptr:
   752                           	opt stack 0
   753  000008                     Read_b_eep@badd:
   754                           	opt stack 0
   755  000008                     Write_b_eep@badd:
   756                           	opt stack 0
   757  000008                     WriteTimer0@timer0:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x7
   761  000008                     	ds	1
   762  000009                     vscp_getMDF_URL@idx:
   763                           	opt stack 0
   764  000009                     ___lbmod@dividend:
   765                           	opt stack 0
   766                           
   767                           ; 1 bytes @ 0x8
   768  000009                     	ds	1
   769  00000A                     ??_init_app_ram:
   770  00000A                     ?_doActionPulse:
   771                           	opt stack 0
   772  00000A                     vscp_readAppReg@rv:
   773                           	opt stack 0
   774  00000A                     doActionPulse@arg:
   775                           	opt stack 0
   776  00000A                     vscp_getGUID@idx:
   777                           	opt stack 0
   778  00000A                     vscp_getUserID@idx:
   779                           	opt stack 0
   780  00000A                     vscp_getManufacturerId@idx:
   781                           	opt stack 0
   782  00000A                     __RegsToCANID@val:
   783                           	opt stack 0
   784  00000A                     Write_b_eep@bdat:
   785                           	opt stack 0
   786  00000A                     ___lbmod@counter:
   787                           	opt stack 0
   788  00000A                     WriteTimer0@timer:
   789                           	opt stack 0
   790  00000A                     __CANIDToRegs@val:
   791                           	opt stack 0
   792                           
   793                           ; 4 bytes @ 0x9
   794  00000A                     	ds	1
   795  00000B                     ??_doActionPulse:
   796  00000B                     vscp_readAppReg@reg:
   797                           	opt stack 0
   798  00000B                     __RegsToCANID@type:
   799                           	opt stack 0
   800  00000B                     __ECANPointBuffer@b:
   801                           	opt stack 0
   802  00000B                     Write_b_eep@GIE_BIT_VAL:
   803                           	opt stack 0
   804  00000B                     ___lbmod@rem:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0xA
   808  00000B                     	ds	1
   809  00000C                     ??_init_app_eeprom:
   810  00000C                     ?_doActionDisable:
   811                           	opt stack 0
   812  00000C                     ??__RegsToCANID:
   813  00000C                     ??_vscp_readStdReg:
   814  00000C                     ?_vscp_setGUID:
   815                           	opt stack 0
   816  00000C                     ?_vscp_setManufacturerId:
   817                           	opt stack 0
   818  00000C                     ?_vscp_setUserID:
   819                           	opt stack 0
   820  00000C                     init_app_ram@i:
   821                           	opt stack 0
   822  00000C                     vscp_setGUID@data:
   823                           	opt stack 0
   824  00000C                     vscp_setManufacturerId@data:
   825                           	opt stack 0
   826  00000C                     vscp_writeNicknamePermanent@nickname:
   827                           	opt stack 0
   828  00000C                     doActionDisable@arg:
   829                           	opt stack 0
   830  00000C                     vscp_setUserID@data:
   831                           	opt stack 0
   832  00000C                     vscp_setSegmentCRC@crc:
   833                           	opt stack 0
   834  00000C                     vscp_setControlByte@ctrl:
   835                           	opt stack 0
   836  00000C                     vscp_goBootloaderMode@algorithm:
   837                           	opt stack 0
   838  00000C                     __ECANPointBuffer@pt:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0xB
   842  00000C                     	ds	1
   843  00000D                     ??_doActionDisable:
   844  00000D                     vscp_setGUID@idx:
   845                           	opt stack 0
   846  00000D                     vscp_setManufacturerId@idx:
   847                           	opt stack 0
   848  00000D                     vscp_setUserID@idx:
   849                           	opt stack 0
   850  00000D                     vscp_handleDropNickname@bytes:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0xC
   854  00000D                     	ds	1
   855  00000E                     init_app_eeprom@i:
   856                           	opt stack 0
   857  00000E                     doActionPulse@val:
   858                           	opt stack 0
   859  00000E                     __CANIDToRegs@type:
   860                           	opt stack 0
   861  00000E                     __RegsToCANID@Value:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0xD
   865  00000E                     	ds	1
   866  00000F                     ??__CANIDToRegs:
   867  00000F                     ?_ECANReceiveMessage:
   868                           	opt stack 0
   869  00000F                     init_app_eeprom@j:
   870                           	opt stack 0
   871  00000F                     doActionPulse@dmflags:
   872                           	opt stack 0
   873  00000F                     doActionDisable@val:
   874                           	opt stack 0
   875  00000F                     ECANReceiveMessage@data:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0xE
   879  00000F                     	ds	1
   880  000010                     ?_vscp_writeStdReg:
   881                           	opt stack 0
   882  000010                     doActionPulse@i:
   883                           	opt stack 0
   884  000010                     doActionDisable@dmflags:
   885                           	opt stack 0
   886  000010                     ECANReceiveMessage@dataLen:
   887                           	opt stack 0
   888  000010                     vscp_writeStdReg@value:
   889                           	opt stack 0
   890                           
   891                           ; 1 bytes @ 0xF
   892  000010                     	ds	1
   893  000011                     ??_vscp_writeStdReg:
   894  000011                     doActionDisable@i:
   895                           	opt stack 0
   896  000011                     ECANReceiveMessage@msgFlags:
   897                           	opt stack 0
   898  000011                     __CANIDToRegs@Value:
   899                           	opt stack 0
   900  000011                     vscp_readStdReg@code:
   901                           	opt stack 0
   902                           
   903                           ; 4 bytes @ 0x10
   904  000011                     	ds	1
   905  000012                     ??_calculateSetFilterMask:
   906  000012                     ?_ECANSendMessage:
   907                           	opt stack 0
   908  000012                     ECANReceiveMessage@savedPtr:
   909                           	opt stack 0
   910  000012                     ECANSendMessage@id:
   911                           	opt stack 0
   912                           
   913                           ; 4 bytes @ 0x11
   914  000012                     	ds	2
   915  000014                     ECANReceiveMessage@id:
   916                           	opt stack 0
   917                           
   918                           ; 1 bytes @ 0x13
   919  000014                     	ds	1
   920  000015                     ECANReceiveMessage@i:
   921                           	opt stack 0
   922  000015                     vscp_writeStdReg@rv:
   923                           	opt stack 0
   924  000015                     vscp_readStdReg@code_1267:
   925                           	opt stack 0
   926                           
   927                           ; 4 bytes @ 0x14
   928  000015                     	ds	1
   929  000016                     ECANReceiveMessage@mode:
   930                           	opt stack 0
   931  000016                     vscp_writeStdReg@reg:
   932                           	opt stack 0
   933  000016                     ECANSendMessage@data:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x15
   937  000016                     	ds	1
   938  000017                     ECANReceiveMessage@temp:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x16
   942  000017                     	ds	1
   943  000018                     ECANSendMessage@dataLen:
   944                           	opt stack 0
   945  000018                     ECANReceiveMessage@ptr:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x17
   949  000018                     	ds	1
   950  000019                     ECANSendMessage@msgFlags:
   951                           	opt stack 0
   952  000019                     vscp_readStdReg@idx:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0x18
   956  000019                     	ds	1
   957  00001A                     ??_ECANSendMessage:
   958  00001A                     ?_getCANFrame:
   959                           	opt stack 0
   960  00001A                     getCANFrame@pdlc:
   961                           	opt stack 0
   962  00001A                     vscp_readStdReg@idx_1268:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x19
   966  00001A                     	ds	1
   967  00001B                     getCANFrame@pdata:
   968                           	opt stack 0
   969  00001B                     vscp_readStdReg@rv:
   970                           	opt stack 0
   971  00001B                     ECANSendMessage@pb:
   972                           	opt stack 0
   973                           
   974                           ; 18 bytes @ 0x1A
   975  00001B                     	ds	1
   976  00001C                     getCANFrame@pid:
   977                           	opt stack 0
   978  00001C                     vscp_readStdReg@reg:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0x1B
   982  00001C                     	ds	1
   983  00001D                     getCANFrame@flags:
   984                           	opt stack 0
   985  00001D                     vscp_readRegister@reg:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x1C
   989  00001D                     	ds	1
   990  00001E                     ?_getVSCPFrame:
   991                           	opt stack 0
   992  00001E                     getVSCPFrame@pvscptype:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x1D
   996  00001E                     	ds	1
   997  00001F                     getVSCPFrame@pNodeId:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x1E
  1001  00001F                     	ds	1
  1002  000020                     getVSCPFrame@pPriority:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x1F
  1006  000020                     	ds	1
  1007  000021                     getVSCPFrame@pSize:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x20
  1011  000021                     	ds	1
  1012  000022                     getVSCPFrame@pData:
  1013                           	opt stack 0
  1014                           
  1015                           ; 1 bytes @ 0x21
  1016  000022                     	ds	1
  1017  000023                     ??_getVSCPFrame:
  1018                           
  1019                           ; 0 bytes @ 0x22
  1020  000023                     	ds	4
  1021  000027                     getVSCPFrame@pvscpclass:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x26
  1025  000027                     	ds	1
  1026  000028                     getVSCPFrame@id:
  1027                           	opt stack 0
  1028                           
  1029                           ; 4 bytes @ 0x27
  1030  000028                     	ds	4
  1031  00002C                     vscp_getEvent@rv:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x2B
  1035  00002C                     	ds	1
  1036  00002D                     ECANSendMessage@mode:
  1037                           	opt stack 0
  1038                           
  1039                           ; 1 bytes @ 0x2C
  1040  00002D                     	ds	1
  1041  00002E                     ECANSendMessage@buffers:
  1042                           	opt stack 0
  1043                           
  1044                           ; 1 bytes @ 0x2D
  1045  00002E                     	ds	1
  1046  00002F                     ECANSendMessage@j:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x2E
  1050  00002F                     	ds	1
  1051  000030                     ECANSendMessage@tempBSEL0:
  1052                           	opt stack 0
  1053                           
  1054                           ; 1 bytes @ 0x2F
  1055  000030                     	ds	1
  1056  000031                     ECANSendMessage@tempPtr:
  1057                           	opt stack 0
  1058  000031                     calculateSetFilterMask@rowmask:
  1059                           	opt stack 0
  1060                           
  1061                           ; 4 bytes @ 0x30
  1062  000031                     	ds	2
  1063  000033                     ECANSendMessage@temp:
  1064                           	opt stack 0
  1065                           
  1066                           ; 1 bytes @ 0x32
  1067  000033                     	ds	1
  1068  000034                     ECANSendMessage@i:
  1069                           	opt stack 0
  1070                           
  1071                           ; 1 bytes @ 0x33
  1072  000034                     	ds	1
  1073  000035                     calculateSetFilterMask@lastOID:
  1074                           	opt stack 0
  1075  000035                     ECANSendMessage@ptr:
  1076                           	opt stack 0
  1077                           
  1078                           ; 2 bytes @ 0x34
  1079  000035                     	ds	1
  1080  000036                     calculateSetFilterMask@mask:
  1081                           	opt stack 0
  1082                           
  1083                           ; 4 bytes @ 0x35
  1084  000036                     	ds	1
  1085  000037                     ?_sendCANFrame:
  1086                           	opt stack 0
  1087  000037                     sendCANFrame@id:
  1088                           	opt stack 0
  1089                           
  1090                           ; 4 bytes @ 0x36
  1091  000037                     	ds	3
  1092  00003A                     calculateSetFilterMask@filter:
  1093                           	opt stack 0
  1094                           
  1095                           ; 4 bytes @ 0x39
  1096  00003A                     	ds	1
  1097  00003B                     sendCANFrame@dlc:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x3A
  1101  00003B                     	ds	1
  1102  00003C                     sendCANFrame@pdata:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0x3B
  1106  00003C                     	ds	2
  1107  00003E                     calculateSetFilterMask@rowfilter:
  1108                           	opt stack 0
  1109                           
  1110                           ; 4 bytes @ 0x3D
  1111  00003E                     	ds	1
  1112  00003F                     ?_sendVSCPFrame:
  1113                           	opt stack 0
  1114  00003F                     sendVSCPFrame@vscpclass:
  1115                           	opt stack 0
  1116                           
  1117                           ; 2 bytes @ 0x3E
  1118  00003F                     	ds	2
  1119  000041                     sendVSCPFrame@vscptype:
  1120                           	opt stack 0
  1121                           
  1122                           ; 1 bytes @ 0x40
  1123  000041                     	ds	1
  1124  000042                     sendVSCPFrame@nodeid:
  1125                           	opt stack 0
  1126  000042                     calculateSetFilterMask@j:
  1127                           	opt stack 0
  1128                           
  1129                           ; 1 bytes @ 0x41
  1130  000042                     	ds	1
  1131  000043                     sendVSCPFrame@priority:
  1132                           	opt stack 0
  1133  000043                     calculateSetFilterMask@i:
  1134                           	opt stack 0
  1135                           
  1136                           ; 1 bytes @ 0x42
  1137  000043                     	ds	1
  1138  000044                     sendVSCPFrame@size:
  1139                           	opt stack 0
  1140                           
  1141                           ; 1 bytes @ 0x43
  1142  000044                     	ds	1
  1143  000045                     sendVSCPFrame@pData:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x44
  1147  000045                     	ds	2
  1148  000047                     sendVSCPFrame@id:
  1149                           	opt stack 0
  1150                           
  1151                           ; 4 bytes @ 0x46
  1152  000047                     	ds	4
  1153  00004B                     ??_SendInformationEvent:
  1154  00004B                     
  1155                           ; 0 bytes @ 0x4A
  1156  00004B                     	ds	1
  1157  00004C                     ??_vscp_newNodeOnline:
  1158  00004C                     vscp_sendHeartBeat@zone:
  1159                           	opt stack 0
  1160                           
  1161                           ; 1 bytes @ 0x4B
  1162  00004C                     	ds	1
  1163  00004D                     ??_vscp_doOneSecondWork:
  1164  00004D                     SendInformationEvent@data:
  1165                           	opt stack 0
  1166                           
  1167                           ; 3 bytes @ 0x4C
  1168  00004D                     	ds	3
  1169  000050                     SendInformationEvent@idx:
  1170                           	opt stack 0
  1171                           
  1172                           ; 1 bytes @ 0x4F
  1173  000050                     	ds	1
  1174  000051                     ?_doActionOff:
  1175                           	opt stack 0
  1176  000051                     ?_doActionOn:
  1177                           	opt stack 0
  1178  000051                     ?_doActionStatus:
  1179                           	opt stack 0
  1180  000051                     ?_doActionToggle:
  1181                           	opt stack 0
  1182  000051                     ?_vscp_writeAppReg:
  1183                           	opt stack 0
  1184  000051                     vscp_writeAppReg@val:
  1185                           	opt stack 0
  1186  000051                     doActionOn@arg:
  1187                           	opt stack 0
  1188  000051                     doActionOff@arg:
  1189                           	opt stack 0
  1190  000051                     doActionStatus@arg:
  1191                           	opt stack 0
  1192  000051                     doActionToggle@arg:
  1193                           	opt stack 0
  1194                           
  1195                           ; 1 bytes @ 0x50
  1196  000051                     	ds	1
  1197  000052                     tblptru	equ	0xFF8
  1198                           tblptrh	equ	0xFF7
  1199                           tblptrl	equ	0xFF6
  1200                           tablat	equ	0xFF5
  1201                           prodh	equ	0xFF4
  1202                           prodl	equ	0xFF3
  1203                           intcon	equ	0xFF2
  1204                           postinc0	equ	0xFEE
  1205                           wreg	equ	0xFE8
  1206                           indf1	equ	0xFE7
  1207                           fsr1h	equ	0xFE2
  1208                           fsr1l	equ	0xFE1
  1209                           indf2	equ	0xFDF
  1210                           postinc2	equ	0xFDE
  1211                           postdec2	equ	0xFDD
  1212                           plusw2	equ	0xFDB
  1213                           fsr2h	equ	0xFDA
  1214                           fsr2l	equ	0xFD9
  1215                           status	equ	0xFD8
  1216                           
  1217                           ; 0 bytes @ 0x51
  1218 ;;
  1219 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1220 ;;
  1221 ;; *************** function _main *****************
  1222 ;; Defined at:
  1223 ;;		line 190 in file "../main.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;		None
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;		None
  1228 ;; Return value:  Size  Location     Type
  1229 ;;		None               void
  1230 ;; Registers used:
  1231 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1232 ;; Tracked objects:
  1233 ;;		On entry : 0/0
  1234 ;;		On exit  : F/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1237 ;;      Params:         0       0       0       0       0       0       0
  1238 ;;      Locals:         0       0       0       0       0       0       0
  1239 ;;      Temps:          0       0       0       0       0       0       0
  1240 ;;      Totals:         0       0       0       0       0       0       0
  1241 ;;Total ram usage:        0 bytes
  1242 ;; Hardware stack levels required when called:   10
  1243 ;; This function calls:
  1244 ;;		_init
  1245 ;;		_vscp_check_pstorage
  1246 ;;		_init_app_eeprom
  1247 ;;		_init_app_ram
  1248 ;;		_vscp_init
  1249 ;;		_Busy_eep
  1250 ;;		_Write_b_eep
  1251 ;;		_vscp_getEvent
  1252 ;;		_vscp_goActiveState
  1253 ;;		_vscp_handleProbeState
  1254 ;;		_vscp_handleProtocolEvent
  1255 ;;		_doDM
  1256 ;;		_vscp_error
  1257 ;;		_vscp_doOneSecondWork
  1258 ;;		_doApplicationOneSecondWork
  1259 ;;		_doWork
  1260 ;; This function is called by:
  1261 ;;		Startup code after reset
  1262 ;; This function uses a non-reentrant model
  1263 ;;
  1264                           
  1265                           	psect	text0
  1266  0031BC                     __ptext0:
  1267                           	opt stack 0
  1268  0031BC                     _main:
  1269                           	opt stack 21
  1270                           
  1271                           ;main.c: 191: init();
  1272                           
  1273                           ;incstack = 0
  1274                           ;incstack = 0
  1275  0031BC  EC71  F01C         	call	_init	;wreg free
  1276                           
  1277                           ;main.c: 195: if ( !vscp_check_pstorage() ) {
  1278  0031C0  EC8B  F01D         	call	_vscp_check_pstorage	;wreg free
  1279  0031C4  0900               	iorlw	0
  1280  0031C6  E104               	bnz	l9781
  1281                           
  1282                           ;main.c: 198: init_app_eeprom();
  1283  0031C8  EC7F  F00A         	call	_init_app_eeprom	;wreg free
  1284                           
  1285                           ;main.c: 199: init_app_ram();
  1286  0031CC  EC5B  F018         	call	_init_app_ram	;wreg free
  1287  0031D0                     l9781:
  1288                           
  1289                           ;main.c: 202: }
  1290                           ;main.c: 204: vscp_init();
  1291  0031D0  EC30  F01C         	call	_vscp_init	;wreg free
  1292  0031D4                     l151:
  1293                           
  1294                           ; BSR set to: 0
  1295  0031D4  0004               	clrwdt		;# 
  1296                           
  1297                           ;main.c: 210: if ( ( vscp_initbtncnt > 250 ) &&
  1298                           ;main.c: 211: ( 0x01 != vscp_node_state ) ) {
  1299  0031D6  0EFA               	movlw	250
  1300  0031D8  0100               	movlb	0	; () banked
  1301  0031DA  658E               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1302  0031DC  D00E               	goto	l9795
  1303                           
  1304                           ; BSR set to: 0
  1305  0031DE  0591               	decf	_vscp_node_state& (0+255),w,b
  1306  0031E0  E00C               	bz	l9795
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;main.c: 214: vscp_nickname = 0xff;
  1310  0031E2  6990               	setf	_vscp_nickname& (0+255),b
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;main.c: 215: (Busy_eep(), Write_b_eep(0x01,0xff));
  1314  0031E4  ECAA  F01E         	call	_Busy_eep	;wreg free
  1315  0031E8  6A09               	clrf	?_Write_b_eep+1,c
  1316  0031EA  0E01               	movlw	1
  1317  0031EC  6E08               	movwf	?_Write_b_eep,c
  1318  0031EE  0EFF               	movlw	255
  1319  0031F0  680A               	setf	?_Write_b_eep+2,c
  1320  0031F2  EC90  F01C         	call	_Write_b_eep	;wreg free
  1321                           
  1322                           ;main.c: 216: vscp_init();
  1323  0031F6  EC30  F01C         	call	_vscp_init	;wreg free
  1324  0031FA                     l9795:
  1325                           
  1326                           ; BSR set to: 0
  1327                           ;main.c: 218: }
  1328                           ;main.c: 221: vscp_imsg.flags = 0;
  1329  0031FA  6B95               	clrf	_vscp_imsg& (0+255),b
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;main.c: 222: vscp_getEvent();
  1333  0031FC  EC04  F01D         	call	_vscp_getEvent	;wreg free
  1334                           
  1335                           ;main.c: 224: switch ( vscp_node_state ) {
  1336  003200  D01C               	goto	l9819
  1337  003202                     l9799:
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;main.c: 229: if (0xff == vscp_nickname) {
  1341  003202  2990               	incf	_vscp_nickname& (0+255),w,b
  1342  003204  E103               	bnz	l9803
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;main.c: 231: vscp_node_state = 0x01;
  1346  003206  0E01               	movlw	1
  1347  003208  6F91               	movwf	_vscp_node_state& (0+255),b
  1348                           
  1349                           ;main.c: 232: } else {
  1350  00320A  D023               	goto	l9821
  1351  00320C                     l9803:
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;main.c: 234: vscp_node_state = 0x03;
  1355  00320C  0E03               	movlw	3
  1356  00320E  6F91               	movwf	_vscp_node_state& (0+255),b
  1357  003210                     l9805:
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;main.c: 235: vscp_goActiveState();
  1361  003210  ECCF  F01D         	call	_vscp_goActiveState	;wreg free
  1362  003214  D01E               	goto	l9821
  1363  003216                     l9807:
  1364                           
  1365                           ; BSR set to: 0
  1366                           ;main.c: 240: vscp_handleProbeState();
  1367  003216  ECB9  F019         	call	_vscp_handleProbeState	;wreg free
  1368                           
  1369                           ;main.c: 241: break;
  1370  00321A  D01B               	goto	l9821
  1371  00321C                     l160:
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;main.c: 250: if (vscp_imsg.flags & 0x80) {
  1375  00321C  AF95               	btfss	_vscp_imsg& (0+255),7,b
  1376  00321E  D019               	goto	l9821
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;main.c: 252: if ( 0 == vscp_imsg.vscp_class ) {
  1380  003220  5198               	movf	(_vscp_imsg+3)& (0+255),w,b
  1381  003222  1197               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1382  003224  B4D8               	btfsc	status,2,c
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;main.c: 255: vscp_handleProtocolEvent();
  1386  003226  EC73  F007         	call	_vscp_handleProtocolEvent	;wreg free
  1387                           
  1388                           ;main.c: 257: }
  1389                           ;main.c: 259: doDM();
  1390  00322A  EC12  F012         	call	_doDM	;wreg free
  1391  00322E  D011               	goto	l9821
  1392  003230                     l9815:
  1393                           
  1394                           ; BSR set to: 0
  1395                           ;main.c: 265: vscp_error();
  1396  003230  ECAD  F01E         	call	_vscp_error	;wreg free
  1397                           
  1398                           ;main.c: 266: break;
  1399  003234  D00E               	goto	l9821
  1400  003236                     l164:
  1401                           
  1402                           ; BSR set to: 0
  1403                           ;main.c: 269: vscp_node_state = 0x00;
  1404  003236  6B91               	clrf	_vscp_node_state& (0+255),b
  1405                           
  1406                           ;main.c: 270: break;
  1407  003238  D00C               	goto	l9821
  1408  00323A                     l9819:
  1409  00323A  0100               	movlb	0	; () banked
  1410  00323C  5191               	movf	_vscp_node_state& (0+255),w,b
  1411                           
  1412                           ; Switch size 1, requested type "space"
  1413                           ; Number of cases is 5, Range of values is 0 to 4
  1414                           ; switch strategies available:
  1415                           ; Name         Instructions Cycles
  1416                           ; simple_byte           16     9 (average)
  1417                           ;	Chosen strategy is simple_byte
  1418  00323E  E0E1               	bz	l9799
  1419  003240  0A01               	xorlw	1	; case 1
  1420  003242  E0E9               	bz	l9807
  1421  003244  0A03               	xorlw	3	; case 2
  1422  003246  E0E4               	bz	l9805
  1423  003248  0A01               	xorlw	1	; case 3
  1424  00324A  E0E8               	bz	l160
  1425  00324C  0A07               	xorlw	7	; case 4
  1426  00324E  E0F0               	bz	l9815
  1427  003250  D7F2               	goto	l164
  1428  003252                     l9821:
  1429                           
  1430                           ;main.c: 275: if ( measurement_clock > 1000 ) {
  1431  003252  0EE9               	movlw	233
  1432  003254  0100               	movlb	0	; () banked
  1433  003256  5D80               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1434  003258  0E03               	movlw	3
  1435  00325A  5981               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1436  00325C  0E00               	movlw	0
  1437  00325E  5982               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1438  003260  0E00               	movlw	0
  1439  003262  5983               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1440  003264  E30B               	bnc	l9831
  1441                           
  1442                           ; BSR set to: 0
  1443                           ;main.c: 277: measurement_clock = 0;
  1444  003266  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
  1445  003268  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1446  00326A  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1447  00326C  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;main.c: 280: vscp_doOneSecondWork();
  1451  00326E  EC09  F01C         	call	_vscp_doOneSecondWork	;wreg free
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;main.c: 284: if ( 0x03 == vscp_node_state ) {
  1455  003272  5191               	movf	_vscp_node_state& (0+255),w,b
  1456  003274  0A03               	xorlw	3
  1457  003276  B4D8               	btfsc	status,2,c
  1458                           
  1459                           ; BSR set to: 0
  1460                           ;main.c: 287: doApplicationOneSecondWork();
  1461  003278  EC7E  F00E         	call	_doApplicationOneSecondWork	;wreg free
  1462  00327C                     l9831:
  1463                           
  1464                           ; BSR set to: 0
  1465                           ;main.c: 289: }
  1466                           ;main.c: 291: }
  1467                           ;main.c: 294: if ( seconds > 59 ) {
  1468  00327C  0E3B               	movlw	59
  1469  00327E  658B               	cpfsgt	_seconds& (0+255),b
  1470  003280  D00B               	goto	l9847
  1471                           
  1472                           ; BSR set to: 0
  1473                           ;main.c: 296: seconds = 0;
  1474  003282  6B8B               	clrf	_seconds& (0+255),b
  1475                           
  1476                           ; BSR set to: 0
  1477                           ;main.c: 297: minutes++;
  1478  003284  2B89               	incf	_minutes& (0+255),f,b
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;main.c: 299: if ( minutes > 59 ) {
  1482  003286  0E3B               	movlw	59
  1483  003288  6589               	cpfsgt	_minutes& (0+255),b
  1484  00328A  D002               	goto	l9843
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;main.c: 300: minutes = 0;
  1488  00328C  6B89               	clrf	_minutes& (0+255),b
  1489                           
  1490                           ; BSR set to: 0
  1491                           ;main.c: 301: hours++;
  1492  00328E  2B88               	incf	_hours& (0+255),f,b
  1493  003290                     l9843:
  1494                           
  1495                           ; BSR set to: 0
  1496                           ;main.c: 302: }
  1497                           ;main.c: 304: if ( hours > 23 ) hours = 0;
  1498  003290  0E17               	movlw	23
  1499  003292  6588               	cpfsgt	_hours& (0+255),b
  1500  003294  D001               	goto	l9847
  1501                           
  1502                           ; BSR set to: 0
  1503  003296  6B88               	clrf	_hours& (0+255),b
  1504  003298                     l9847:
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;main.c: 306: }
  1508                           ;main.c: 308: doWork();
  1509  003298  ECAF  F01E         	call	_doWork	;wreg free
  1510  00329C  D79B               	goto	l151
  1511  00329E                     __end_of_main:
  1512                           	opt stack 0
  1513                           tblptru	equ	0xFF8
  1514                           tblptrh	equ	0xFF7
  1515                           tblptrl	equ	0xFF6
  1516                           tablat	equ	0xFF5
  1517                           prodh	equ	0xFF4
  1518                           prodl	equ	0xFF3
  1519                           intcon	equ	0xFF2
  1520                           postinc0	equ	0xFEE
  1521                           wreg	equ	0xFE8
  1522                           indf1	equ	0xFE7
  1523                           fsr1h	equ	0xFE2
  1524                           fsr1l	equ	0xFE1
  1525                           indf2	equ	0xFDF
  1526                           postinc2	equ	0xFDE
  1527                           postdec2	equ	0xFDD
  1528                           plusw2	equ	0xFDB
  1529                           fsr2h	equ	0xFDA
  1530                           fsr2l	equ	0xFD9
  1531                           status	equ	0xFD8
  1532                           
  1533 ;; *************** function _doWork *****************
  1534 ;; Defined at:
  1535 ;;		line 885 in file "../main.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;		None
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;		None
  1540 ;; Return value:  Size  Location     Type
  1541 ;;		None               void
  1542 ;; Registers used:
  1543 ;;		wreg, status,2, status,0
  1544 ;; Tracked objects:
  1545 ;;		On entry : F/0
  1546 ;;		On exit  : F/0
  1547 ;;		Unchanged: F/0
  1548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1549 ;;      Params:         0       0       0       0       0       0       0
  1550 ;;      Locals:         0       0       0       0       0       0       0
  1551 ;;      Temps:          0       0       0       0       0       0       0
  1552 ;;      Totals:         0       0       0       0       0       0       0
  1553 ;;Total ram usage:        0 bytes
  1554 ;; Hardware stack levels used:    1
  1555 ;; Hardware stack levels required when called:    2
  1556 ;; This function calls:
  1557 ;;		Nothing
  1558 ;; This function is called by:
  1559 ;;		_main
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563                           	psect	text1
  1564  003D5E                     __ptext1:
  1565                           	opt stack 0
  1566  003D5E                     _doWork:
  1567                           	opt stack 28
  1568                           
  1569                           ; BSR set to: 0
  1570                           
  1571                           ; BSR set to: 0
  1572                           
  1573                           ; BSR set to: 0
  1574                           ;incstack = 0
  1575                           ;incstack = 0
  1576  003D5E  0012               	return	
  1577  003D60                     __end_of_doWork:
  1578                           	opt stack 0
  1579                           tblptru	equ	0xFF8
  1580                           tblptrh	equ	0xFF7
  1581                           tblptrl	equ	0xFF6
  1582                           tablat	equ	0xFF5
  1583                           prodh	equ	0xFF4
  1584                           prodl	equ	0xFF3
  1585                           intcon	equ	0xFF2
  1586                           postinc0	equ	0xFEE
  1587                           wreg	equ	0xFE8
  1588                           indf1	equ	0xFE7
  1589                           fsr1h	equ	0xFE2
  1590                           fsr1l	equ	0xFE1
  1591                           indf2	equ	0xFDF
  1592                           postinc2	equ	0xFDE
  1593                           postdec2	equ	0xFDD
  1594                           plusw2	equ	0xFDB
  1595                           fsr2h	equ	0xFDA
  1596                           fsr2l	equ	0xFD9
  1597                           status	equ	0xFD8
  1598                           
  1599 ;; *************** function _doApplicationOneSecondWork *****************
  1600 ;; Defined at:
  1601 ;;		line 590 in file "../main.c"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;		None
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;  i               1   32[BANK0 ] unsigned char 
  1606 ;;  ctrlreg         1   31[BANK0 ] unsigned char 
  1607 ;;  bOn             1   30[BANK0 ] enum E15660
  1608 ;; Return value:  Size  Location     Type
  1609 ;;		None               void
  1610 ;; Registers used:
  1611 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1612 ;; Tracked objects:
  1613 ;;		On entry : F/0
  1614 ;;		On exit  : F/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1617 ;;      Params:         0       0       0       0       0       0       0
  1618 ;;      Locals:         0       3       0       0       0       0       0
  1619 ;;      Temps:          0       3       0       0       0       0       0
  1620 ;;      Totals:         0       6       0       0       0       0       0
  1621 ;;Total ram usage:        6 bytes
  1622 ;; Hardware stack levels used:    1
  1623 ;; Hardware stack levels required when called:    8
  1624 ;; This function calls:
  1625 ;;		_Read_b_eep
  1626 ;;		_doActionOff
  1627 ;;		_SendInformationEvent
  1628 ;; This function is called by:
  1629 ;;		_main
  1630 ;; This function uses a non-reentrant model
  1631 ;;
  1632                           
  1633                           	psect	text2
  1634  001CFC                     __ptext2:
  1635                           	opt stack 0
  1636  001CFC                     _doApplicationOneSecondWork:
  1637                           	opt stack 22
  1638                           
  1639                           ; BSR set to: 0
  1640                           ;main.c: 592: uint8_t i;
  1641                           ;main.c: 593: uint8_t ctrlreg;
  1642                           ;main.c: 594: BOOL bOn = 0;
  1643                           
  1644                           ; BSR set to: 0
  1645                           ;incstack = 0
  1646                           ;incstack = 0
  1647  001CFC  6BCE               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1648                           
  1649                           ;main.c: 596: for ( i = 0; i < 8; i++ ) {
  1650  001CFE  6BD0               	clrf	doApplicationOneSecondWork@i& (0+255),b
  1651  001D00                     l10339:
  1652                           
  1653                           ; BSR set to: 0
  1654  001D00  0E07               	movlw	7
  1655  001D02  65D0               	cpfsgt	doApplicationOneSecondWork@i& (0+255),b
  1656  001D04  D001               	goto	l10343
  1657  001D06  D11F               	goto	l236
  1658  001D08                     l10343:
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;main.c: 599: ctrlreg = Read_b_eep(0x43 + 10 + i);
  1662  001D08  D92D               	call	PL32	;call to abstracted procedure
  1663  001D0A  EC76  F01E         	call	_Read_b_eep	;wreg free
  1664  001D0E  0100               	movlb	0	; () banked
  1665  001D10  6FCF               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;main.c: 602: if ( !( ctrlreg & 0x80 ) ) continue;
  1669  001D12  AFCF               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  1670  001D14  D116               	goto	l10427
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;main.c: 606: if ( relay_protection_timer[ i ] ) {
  1674                           
  1675                           ; BSR set to: 0
  1676  001D16  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1677  001D18  0D02               	mullw	2
  1678  001D1A  50F3               	movf	prodl,w,c
  1679  001D1C  0F60               	addlw	low _relay_protection_timer
  1680  001D1E  6ED9               	movwf	fsr2l,c
  1681  001D20  6ADA               	clrf	fsr2h,c
  1682  001D22  50DE               	movf	postinc2,w,c
  1683  001D24  10DD               	iorwf	postdec2,w,c
  1684  001D26  E028               	bz	l10361
  1685                           
  1686                           ; BSR set to: 0
  1687                           ;main.c: 608: relay_protection_timer[ i ]--;
  1688  001D28  D916               	call	PL24	;call to abstracted procedure
  1689  001D2A  06DE               	decf	postinc2,f,c
  1690  001D2C  0E00               	movlw	0
  1691  001D2E  5ADD               	subwfb	postdec2,f,c
  1692                           
  1693                           ;main.c: 611: if ( !relay_protection_timer[ i ] &&
  1694                           ;main.c: 612: ( Read_b_eep(0x43 + 10 + i) &
  1695                           ;main.c: 613: 0x04 ) ) {
  1696  001D30  D912               	call	PL24	;call to abstracted procedure
  1697  001D32  50DE               	movf	postinc2,w,c
  1698  001D34  10DD               	iorwf	postdec2,w,c
  1699  001D36  E13C               	bnz	l10363
  1700                           
  1701                           ; BSR set to: 0
  1702  001D38  D915               	call	PL32	;call to abstracted procedure
  1703  001D3A  EC76  F01E         	call	_Read_b_eep	;wreg free
  1704  001D3E  0100               	movlb	0	; () banked
  1705  001D40  6FCB               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1706  001D42  A5CB               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1707  001D44  D035               	goto	l10363
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;main.c: 616: doActionOff( 0, (1 << i) );
  1711  001D46  C0D0  F0CB         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1712  001D4A  0E01               	movlw	1
  1713  001D4C  6FCC               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1714  001D4E  2BCB               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1715  001D50  D002               	goto	u12344
  1716  001D52                     u12345:
  1717  001D52  90D8               	bcf	status,0,c
  1718  001D54  37CC               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1719  001D56                     u12344:
  1720  001D56  2FCB               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1721  001D58  D7FC               	goto	u12345
  1722  001D5A  51CC               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1723  001D5C  6E51               	movwf	?_doActionOff,c
  1724  001D5E  0E00               	movlw	0
  1725  001D60  EC4F  F019         	call	_doActionOff
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;main.c: 619: if ( ctrlreg & 0x02 ) {
  1729  001D64  A3CF               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  1730  001D66  D024               	goto	l10363
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;main.c: 620: SendInformationEvent( i, 1,
  1734                           ;main.c: 621: 2 );
  1735  001D68  0E01               	movlw	1
  1736  001D6A  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  1737  001D6C  0E02               	movlw	2
  1738  001D6E  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1739  001D70  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1740  001D72  ECD3  F01B         	call	_SendInformationEvent
  1741  001D76  D01C               	goto	l10363
  1742  001D78                     l10361:
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;main.c: 626: else {
  1746                           ;main.c: 628: relay_protection_timer[ i ] =
  1747                           ;main.c: 629: Read_b_eep(0x43 + 34 + i) * 256 +
  1748                           ;main.c: 630: Read_b_eep(0x43 + 35 + i);
  1749  001D78  0E65               	movlw	101
  1750  001D7A  25D0               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1751  001D7C  6E08               	movwf	?_Read_b_eep,c
  1752  001D7E  6A09               	clrf	?_Read_b_eep+1,c
  1753  001D80  0E00               	movlw	0
  1754  001D82  2209               	addwfc	?_Read_b_eep+1,f,c
  1755  001D84  EC76  F01E         	call	_Read_b_eep	;wreg free
  1756  001D88  0100               	movlb	0	; () banked
  1757  001D8A  6FCC               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1758  001D8C  6BCB               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1759  001D8E  0E66               	movlw	102
  1760  001D90  25D0               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1761  001D92  6E08               	movwf	?_Read_b_eep,c
  1762  001D94  6A09               	clrf	?_Read_b_eep+1,c
  1763  001D96  0E00               	movlw	0
  1764  001D98  2209               	addwfc	?_Read_b_eep+1,f,c
  1765  001D9A  EC76  F01E         	call	_Read_b_eep	;wreg free
  1766  001D9E  0100               	movlb	0	; () banked
  1767  001DA0  27CB               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1768  001DA2  0E00               	movlw	0
  1769  001DA4  23CC               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1770  001DA6  D8D7               	call	PL24	;call to abstracted procedure
  1771  001DA8  C0CB  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1772  001DAC  C0CC  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1773  001DB0                     l10363:
  1774                           
  1775                           ; BSR set to: 0
  1776                           ;main.c: 631: }
  1777                           ;main.c: 634: if ( relay_pulse_flags & (1 << i) ) {
  1778  001DB0  C0D0  F0CB         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1779  001DB4  0E01               	movlw	1
  1780  001DB6  6FCC               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1781  001DB8  2BCB               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1782  001DBA  D002               	goto	u12364
  1783  001DBC                     u12365:
  1784  001DBC  90D8               	bcf	status,0,c
  1785  001DBE  37CC               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1786  001DC0                     u12364:
  1787  001DC0  2FCB               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1788  001DC2  D7FC               	goto	u12365
  1789  001DC4  51CC               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1790  001DC6  158A               	andwf	_relay_pulse_flags& (0+255),w,b
  1791  001DC8  E101 D0BB          	bz	l10427
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;main.c: 636: if ( relay_pulse_timer[ i ] ) {
  1795  001DCC  D8BD               	call	PL22	;call to abstracted procedure
  1796  001DCE  50DE               	movf	postinc2,w,c
  1797  001DD0  10DD               	iorwf	postdec2,w,c
  1798  001DD2  E101 D0A5          	bz	l10425
  1799                           
  1800                           ; BSR set to: 0
  1801                           ;main.c: 638: relay_pulse_timer[ i ]--;
  1802  001DD6  D8B8               	call	PL22	;call to abstracted procedure
  1803  001DD8  06DE               	decf	postinc2,f,c
  1804  001DDA  0E00               	movlw	0
  1805  001DDC  5ADD               	subwfb	postdec2,f,c
  1806                           
  1807                           ;main.c: 641: if ( !relay_pulse_timer[ i ] ) {
  1808  001DDE  D8B4               	call	PL22	;call to abstracted procedure
  1809  001DE0  50DE               	movf	postinc2,w,c
  1810  001DE2  10DD               	iorwf	postdec2,w,c
  1811  001DE4  E02E               	bz	l10401
  1812  001DE6  D0AD               	goto	l10427
  1813  001DE8                     l206:
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;main.c: 646: if ( LATBbits.LATB4 ) {
  1817  001DE8  A88A               	btfss	3978,4,c	;volatile
  1818  001DEA  D002               	goto	l207
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;main.c: 647: LATBbits.LATB4 = 0;
  1822  001DEC  988A               	bcf	3978,4,c	;volatile
  1823  001DEE  D025               	goto	L6
  1824  001DF0                     l207:
  1825                           
  1826                           ; BSR set to: 0
  1827                           ;main.c: 650: LATBbits.LATB4 = 1;
  1828  001DF0  888A               	bsf	3978,4,c	;volatile
  1829  001DF2                     l10373:
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;main.c: 651: bOn = 1;
  1833  001DF2  0E01               	movlw	1
  1834  001DF4  6FCE               	movwf	doApplicationOneSecondWork@bOn& (0+255),b
  1835  001DF6  D033               	goto	l10403
  1836  001DF8                     l210:
  1837                           
  1838                           ; BSR set to: 0
  1839                           ;main.c: 656: if ( LATBbits.LATB1 ) {
  1840  001DF8  A28A               	btfss	3978,1,c	;volatile
  1841  001DFA  D002               	goto	l211
  1842                           
  1843                           ; BSR set to: 0
  1844                           ;main.c: 657: LATBbits.LATB1 = 0;
  1845  001DFC  928A               	bcf	3978,1,c	;volatile
  1846  001DFE  D01D               	goto	L6
  1847  001E00                     l211:
  1848                           
  1849                           ; BSR set to: 0
  1850                           ;main.c: 660: LATBbits.LATB1 = 1;
  1851  001E00  828A               	bsf	3978,1,c	;volatile
  1852  001E02  D7F7               	goto	l10373
  1853  001E04                     l213:
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;main.c: 666: if ( LATBbits.LATB0 ) {
  1857  001E04  A08A               	btfss	3978,0,c	;volatile
  1858  001E06  D002               	goto	l214
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;main.c: 667: LATBbits.LATB0 = 0;
  1862  001E08  908A               	bcf	3978,0,c	;volatile
  1863  001E0A  D017               	goto	L6
  1864  001E0C                     l214:
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;main.c: 670: LATBbits.LATB0 = 1;
  1868  001E0C  808A               	bsf	3978,0,c	;volatile
  1869  001E0E  D7F1               	goto	l10373
  1870  001E10                     l216:
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;main.c: 676: if ( LATCbits.LATC7 ) {
  1874  001E10  AE8B               	btfss	3979,7,c	;volatile
  1875  001E12  D002               	goto	l217
  1876                           
  1877                           ; BSR set to: 0
  1878                           ;main.c: 677: LATCbits.LATC7 = 0;
  1879  001E14  9E8B               	bcf	3979,7,c	;volatile
  1880  001E16  D011               	goto	L6
  1881  001E18                     l217:
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;main.c: 680: LATCbits.LATC7 = 1;
  1885  001E18  8E8B               	bsf	3979,7,c	;volatile
  1886  001E1A  D7EB               	goto	l10373
  1887  001E1C                     l219:
  1888                           
  1889                           ; BSR set to: 0
  1890                           ;main.c: 686: if ( LATCbits.LATC6 ) {
  1891  001E1C  AC8B               	btfss	3979,6,c	;volatile
  1892  001E1E  D002               	goto	l220
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;main.c: 687: LATCbits.LATC6 = 0;
  1896  001E20  9C8B               	bcf	3979,6,c	;volatile
  1897  001E22  D00B               	goto	L6
  1898  001E24                     l220:
  1899                           
  1900                           ; BSR set to: 0
  1901                           ;main.c: 690: LATCbits.LATC6 = 1;
  1902  001E24  8C8B               	bsf	3979,6,c	;volatile
  1903  001E26  D7E5               	goto	l10373
  1904  001E28                     l222:
  1905                           
  1906                           ; BSR set to: 0
  1907                           ;main.c: 696: if ( LATCbits.LATC5 ) {
  1908  001E28  AA8B               	btfss	3979,5,c	;volatile
  1909  001E2A  D002               	goto	l223
  1910                           
  1911                           ; BSR set to: 0
  1912                           ;main.c: 697: LATCbits.LATC5 = 0;
  1913  001E2C  9A8B               	bcf	3979,5,c	;volatile
  1914  001E2E  D005               	goto	L6
  1915  001E30                     l223:
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;main.c: 700: LATCbits.LATC5 = 1;
  1919  001E30  8A8B               	bsf	3979,5,c	;volatile
  1920  001E32  D7DF               	goto	l10373
  1921  001E34                     l225:
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;main.c: 706: if ( LATCbits.LATC4 ) {
  1925  001E34  A88B               	btfss	3979,4,c	;volatile
  1926  001E36  D003               	goto	l226
  1927                           
  1928                           ; BSR set to: 0
  1929                           ;main.c: 707: LATCbits.LATC4 = 0;
  1930  001E38  988B               	bcf	3979,4,c	;volatile
  1931  001E3A                     L6:
  1932                           
  1933                           ;main.c: 708: bOn = 0;
  1934  001E3A  6BCE               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1935                           
  1936                           ;main.c: 709: } else {
  1937  001E3C  D010               	goto	l10403
  1938  001E3E                     l226:
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;main.c: 710: LATCbits.LATC4 = 1;
  1942  001E3E  888B               	bsf	3979,4,c	;volatile
  1943  001E40  D7D8               	goto	l10373
  1944  001E42                     l10401:
  1945                           
  1946                           ; BSR set to: 0
  1947  001E42  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1948                           
  1949                           ; Switch size 1, requested type "space"
  1950                           ; Number of cases is 7, Range of values is 0 to 6
  1951                           ; switch strategies available:
  1952                           ; Name         Instructions Cycles
  1953                           ; simple_byte           22    12 (average)
  1954                           ;	Chosen strategy is simple_byte
  1955  001E44  E0D1               	bz	l206
  1956  001E46  0A01               	xorlw	1	; case 1
  1957  001E48  E0D7               	bz	l210
  1958  001E4A  0A03               	xorlw	3	; case 2
  1959  001E4C  E0DB               	bz	l213
  1960  001E4E  0A01               	xorlw	1	; case 3
  1961  001E50  E0DF               	bz	l216
  1962  001E52  0A07               	xorlw	7	; case 4
  1963  001E54  E0E3               	bz	l219
  1964  001E56  0A01               	xorlw	1	; case 5
  1965  001E58  E0E7               	bz	l222
  1966  001E5A  0A03               	xorlw	3	; case 6
  1967  001E5C  E0EB               	bz	l225
  1968  001E5E                     l10403:
  1969                           
  1970                           ; BSR set to: 0
  1971                           ;main.c: 718: relay_pulse_timer[ i ] =
  1972                           ;main.c: 719: Read_b_eep(0x43 + 18 + 2*i) * 256 +
  1973                           ;main.c: 721: Read_b_eep(0x43 + 19 + 2*i);
  1974  001E5E  D889               	call	PL52	;call to abstracted procedure
  1975  001E60  EC76  F01E         	call	_Read_b_eep	;wreg free
  1976  001E64  0100               	movlb	0	; () banked
  1977  001E66  6FCC               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1978  001E68  6BCB               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1979  001E6A  D88C               	call	PL54	;call to abstracted procedure
  1980  001E6C  EC76  F01E         	call	_Read_b_eep	;wreg free
  1981  001E70  0100               	movlb	0	; () banked
  1982  001E72  27CB               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1983  001E74  0E00               	movlw	0
  1984  001E76  23CC               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1985  001E78  D867               	call	PL22	;call to abstracted procedure
  1986  001E7A  C0CB  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1987  001E7E  C0CC  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1988                           
  1989                           ; BSR set to: 0
  1990                           ;main.c: 724: if ( bOn ) {
  1991  001E82  51CE               	movf	doApplicationOneSecondWork@bOn& (0+255),w,b
  1992  001E84  E03A               	bz	l228
  1993                           
  1994                           ; BSR set to: 0
  1995                           ;main.c: 727: if ( Read_b_eep(0x43 + 10 + i) & 0x04 ) {
  1996  001E86  D86E               	call	PL32	;call to abstracted procedure
  1997  001E88  EC76  F01E         	call	_Read_b_eep	;wreg free
  1998  001E8C  0100               	movlb	0	; () banked
  1999  001E8E  6FCB               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2000  001E90  A5CB               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  2001  001E92  D020               	goto	l10411
  2002                           
  2003                           ; BSR set to: 0
  2004                           ;main.c: 728: relay_protection_timer[ i ] =
  2005                           ;main.c: 729: Read_b_eep(0x43 + 34 + 2*i) * 256 +
  2006                           ;main.c: 730: Read_b_eep(0x43 + 35 + 2*i);
  2007  001E94  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2008  001E96  0D02               	mullw	2
  2009  001E98  0E65               	movlw	101
  2010  001E9A  24F3               	addwf	prodl,w,c
  2011  001E9C  6E08               	movwf	?_Read_b_eep,c
  2012  001E9E  0E00               	movlw	0
  2013  001EA0  20F4               	addwfc	prodh,w,c
  2014  001EA2  6E09               	movwf	?_Read_b_eep+1,c
  2015  001EA4  EC76  F01E         	call	_Read_b_eep	;wreg free
  2016  001EA8  0100               	movlb	0	; () banked
  2017  001EAA  6FCC               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2018  001EAC  6BCB               	clrf	??_doApplicationOneSecondWork& (0+255),b
  2019  001EAE  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2020  001EB0  0D02               	mullw	2
  2021  001EB2  0E66               	movlw	102
  2022  001EB4  24F3               	addwf	prodl,w,c
  2023  001EB6  6E08               	movwf	?_Read_b_eep,c
  2024  001EB8  0E00               	movlw	0
  2025  001EBA  20F4               	addwfc	prodh,w,c
  2026  001EBC  6E09               	movwf	?_Read_b_eep+1,c
  2027  001EBE  EC76  F01E         	call	_Read_b_eep	;wreg free
  2028  001EC2  0100               	movlb	0	; () banked
  2029  001EC4  27CB               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  2030  001EC6  0E00               	movlw	0
  2031  001EC8  23CC               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  2032  001ECA  D845               	call	PL24	;call to abstracted procedure
  2033  001ECC  C0CB  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  2034  001ED0  C0CC  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  2035  001ED4                     l10411:
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;main.c: 731: }
  2039                           ;main.c: 733: if ( ctrlreg & 0x08 ) {
  2040  001ED4  A7CF               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  2041  001ED6  D007               	goto	l10415
  2042                           
  2043                           ; BSR set to: 0
  2044                           ;main.c: 734: SendInformationEvent( i, 20,
  2045                           ;main.c: 735: 3 );
  2046  001ED8  0E14               	movlw	20
  2047  001EDA  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  2048  001EDC  0E03               	movlw	3
  2049  001EDE  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2050  001EE0  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2051  001EE2  ECD3  F01B         	call	_SendInformationEvent
  2052  001EE6                     l10415:
  2053                           
  2054                           ; BSR set to: 0
  2055                           ;main.c: 736: }
  2056                           ;main.c: 738: if ( ctrlreg & 0x20 ) {
  2057  001EE6  ABCF               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  2058  001EE8  D02C               	goto	l10427
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;main.c: 739: SendInformationEvent( i, 20,
  2062                           ;main.c: 740: 25 );
  2063  001EEA  0E14               	movlw	20
  2064  001EEC  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  2065  001EEE  0E19               	movlw	25
  2066  001EF0  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2067  001EF2  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2068  001EF4  ECD3  F01B         	call	_SendInformationEvent
  2069  001EF8  D024               	goto	l10427
  2070  001EFA                     l228:
  2071                           
  2072                           ; BSR set to: 0
  2073                           ;main.c: 745: if ( ctrlreg & 0x10 ) {
  2074  001EFA  A9CF               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  2075  001EFC  D007               	goto	l10421
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;main.c: 746: SendInformationEvent( i, 20,
  2079                           ;main.c: 747: 4 );
  2080  001EFE  0E14               	movlw	20
  2081  001F00  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  2082  001F02  0E04               	movlw	4
  2083  001F04  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2084  001F06  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2085  001F08  ECD3  F01B         	call	_SendInformationEvent
  2086  001F0C                     l10421:
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;main.c: 748: }
  2090                           ;main.c: 750: if (ctrlreg & 0x40) {
  2091  001F0C  ADCF               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),6,b
  2092  001F0E  D019               	goto	l10427
  2093                           
  2094                           ; BSR set to: 0
  2095                           ;main.c: 751: SendInformationEvent( i, 20,
  2096                           ;main.c: 752: 24 );
  2097  001F10  0E14               	movlw	20
  2098  001F12  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  2099  001F14  0E18               	movlw	24
  2100  001F16  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2101  001F18  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2102  001F1A  ECD3  F01B         	call	_SendInformationEvent
  2103  001F1E  D011               	goto	l10427
  2104  001F20                     l10425:
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;main.c: 759: else {
  2108                           ;main.c: 761: relay_pulse_timer[ 0 ] =
  2109                           ;main.c: 762: Read_b_eep(0x43 + 18 + 2*i) * 256 +
  2110                           ;main.c: 763: Read_b_eep(0x43 + 19 + 2*i);
  2111  001F20  D831               	call	PL54	;call to abstracted procedure
  2112  001F22  EC76  F01E         	call	_Read_b_eep	;wreg free
  2113  001F26  0100               	movlb	0	; () banked
  2114  001F28  6FCB               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2115  001F2A  D823               	call	PL52	;call to abstracted procedure
  2116  001F2C  EC76  F01E         	call	_Read_b_eep	;wreg free
  2117  001F30  0100               	movlb	0	; () banked
  2118  001F32  6FCD               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  2119  001F34  6BCC               	clrf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2120  001F36  51CB               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  2121  001F38  25CC               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2122  001F3A  6F70               	movwf	_relay_pulse_timer& (0+255),b
  2123  001F3C  0E00               	movlw	0
  2124  001F3E  21CD               	addwfc	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2125  001F40  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  2126  001F42                     l10427:
  2127                           
  2128                           ; BSR set to: 0
  2129  001F42  2BD0               	incf	doApplicationOneSecondWork@i& (0+255),f,b
  2130  001F44  D6DD               	goto	l10339
  2131  001F46                     l236:
  2132                           
  2133                           ; BSR set to: 0
  2134  001F46  0012               	return	
  2135  001F48                     __end_of_doApplicationOneSecondWork:
  2136                           	opt stack 0
  2137  001F48                     PL22:
  2138                           	opt stack 22
  2139  001F48  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2140  001F4A  0D02               	mullw	2
  2141  001F4C  50F3               	movf	prodl,w,c
  2142  001F4E  0F70               	addlw	low _relay_pulse_timer
  2143  001F50  6ED9               	movwf	fsr2l,c
  2144  001F52  6ADA               	clrf	fsr2h,c
  2145  001F54  0012               	return	
  2146  001F56                     __end_ofPL22:
  2147                           	opt stack 0
  2148  001F56                     PL24:
  2149                           	opt stack 22
  2150  001F56  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2151  001F58  0D02               	mullw	2
  2152  001F5A  50F3               	movf	prodl,w,c
  2153  001F5C  0F60               	addlw	low _relay_protection_timer
  2154  001F5E  6ED9               	movwf	fsr2l,c
  2155  001F60  6ADA               	clrf	fsr2h,c
  2156  001F62  0012               	return	
  2157  001F64                     __end_ofPL24:
  2158                           	opt stack 0
  2159  001F64                     PL32:
  2160                           	opt stack 22
  2161  001F64  0E4D               	movlw	77
  2162  001F66  25D0               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  2163  001F68  6E08               	movwf	?_Read_b_eep,c
  2164  001F6A  6A09               	clrf	?_Read_b_eep+1,c
  2165  001F6C  0E00               	movlw	0
  2166  001F6E  2209               	addwfc	?_Read_b_eep+1,f,c
  2167  001F70  0C00               	retlw	0
  2168  001F72                     __end_ofPL32:
  2169                           	opt stack 0
  2170  001F72                     PL52:
  2171                           	opt stack 22
  2172  001F72  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2173  001F74  0D02               	mullw	2
  2174  001F76  0E55               	movlw	85
  2175  001F78  24F3               	addwf	prodl,w,c
  2176  001F7A  6E08               	movwf	?_Read_b_eep,c
  2177  001F7C  0E00               	movlw	0
  2178  001F7E  20F4               	addwfc	prodh,w,c
  2179  001F80  6E09               	movwf	?_Read_b_eep+1,c
  2180  001F82  0012               	return	
  2181  001F84                     __end_ofPL52:
  2182                           	opt stack 0
  2183  001F84                     PL54:
  2184                           	opt stack 22
  2185  001F84  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2186  001F86  0D02               	mullw	2
  2187  001F88  0E56               	movlw	86
  2188  001F8A  24F3               	addwf	prodl,w,c
  2189  001F8C  6E08               	movwf	?_Read_b_eep,c
  2190  001F8E  0E00               	movlw	0
  2191  001F90  20F4               	addwfc	prodh,w,c
  2192  001F92  6E09               	movwf	?_Read_b_eep+1,c
  2193  001F94  0012               	return	
  2194  001F96                     __end_ofPL54:
  2195                           	opt stack 0
  2196                           tblptru	equ	0xFF8
  2197                           tblptrh	equ	0xFF7
  2198                           tblptrl	equ	0xFF6
  2199                           tablat	equ	0xFF5
  2200                           prodh	equ	0xFF4
  2201                           prodl	equ	0xFF3
  2202                           intcon	equ	0xFF2
  2203                           postinc0	equ	0xFEE
  2204                           wreg	equ	0xFE8
  2205                           indf1	equ	0xFE7
  2206                           fsr1h	equ	0xFE2
  2207                           fsr1l	equ	0xFE1
  2208                           indf2	equ	0xFDF
  2209                           postinc2	equ	0xFDE
  2210                           postdec2	equ	0xFDD
  2211                           plusw2	equ	0xFDB
  2212                           fsr2h	equ	0xFDA
  2213                           fsr2l	equ	0xFD9
  2214                           status	equ	0xFD8
  2215                           
  2216 ;; *************** function _vscp_doOneSecondWork *****************
  2217 ;; Defined at:
  2218 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;		None
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;		None
  2223 ;; Return value:  Size  Location     Type
  2224 ;;		None               void
  2225 ;; Registers used:
  2226 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2227 ;; Tracked objects:
  2228 ;;		On entry : F/0
  2229 ;;		On exit  : F/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2232 ;;      Params:         0       0       0       0       0       0       0
  2233 ;;      Locals:         0       0       0       0       0       0       0
  2234 ;;      Temps:          1       0       0       0       0       0       0
  2235 ;;      Totals:         1       0       0       0       0       0       0
  2236 ;;Total ram usage:        1 bytes
  2237 ;; Hardware stack levels used:    1
  2238 ;; Hardware stack levels required when called:    8
  2239 ;; This function calls:
  2240 ;;		_vscp_getZone
  2241 ;;		_vscp_getSubzone
  2242 ;;		_vscp_sendHeartBeat
  2243 ;; This function is called by:
  2244 ;;		_main
  2245 ;; This function uses a non-reentrant model
  2246 ;;
  2247                           
  2248                           	psect	text3
  2249  003812                     __ptext3:
  2250                           	opt stack 0
  2251  003812                     _vscp_doOneSecondWork:
  2252                           	opt stack 22
  2253                           
  2254                           ; BSR set to: 0
  2255                           ;vscp_firmware.c: 526: ++vscp_second;
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;incstack = 0
  2259                           ;incstack = 0
  2260  003812  2B94               	incf	_vscp_second& (0+255),f,b
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  2264  003814  0E3B               	movlw	59
  2265  003816  6594               	cpfsgt	_vscp_second& (0+255),b
  2266  003818  D00D               	goto	l8341
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;vscp_firmware.c: 529: vscp_second = 0;
  2270  00381A  6B94               	clrf	_vscp_second& (0+255),b
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;vscp_firmware.c: 530: vscp_minute++;
  2274  00381C  2B8F               	incf	_vscp_minute& (0+255),f,b
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  2278  00381E  5191               	movf	_vscp_node_state& (0+255),w,b
  2279  003820  0A03               	xorlw	3
  2280  003822  E108               	bnz	l8341
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  2284                           ;vscp_firmware.c: 535: vscp_getSubzone());
  2285  003824  EC88  F01E         	call	_vscp_getSubzone	;wreg free
  2286  003828  0100               	movlb	0	; () banked
  2287  00382A  6FC4               	movwf	?_vscp_sendHeartBeat& (0+255),b
  2288  00382C  EC8D  F01E         	call	_vscp_getZone	;wreg free
  2289  003830  EC2D  F01D         	call	_vscp_sendHeartBeat
  2290  003834                     l8341:
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;vscp_firmware.c: 536: }
  2294                           ;vscp_firmware.c: 537: }
  2295                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  2296  003834  0E3B               	movlw	59
  2297  003836  658F               	cpfsgt	_vscp_minute& (0+255),b
  2298  003838  D002               	goto	l8347
  2299                           
  2300                           ; BSR set to: 0
  2301                           ;vscp_firmware.c: 540: vscp_minute = 0;
  2302  00383A  6B8F               	clrf	_vscp_minute& (0+255),b
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;vscp_firmware.c: 541: vscp_hour++;
  2306  00383C  2B8D               	incf	_vscp_hour& (0+255),f,b
  2307  00383E                     l8347:
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;vscp_firmware.c: 542: }
  2311                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  2312  00383E  0E17               	movlw	23
  2313  003840  658D               	cpfsgt	_vscp_hour& (0+255),b
  2314  003842  D001               	goto	l8351
  2315                           
  2316                           ; BSR set to: 0
  2317  003844  6B8D               	clrf	_vscp_hour& (0+255),b
  2318  003846                     l8351:
  2319                           
  2320                           ; BSR set to: 0
  2321                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  2322  003846  5191               	movf	_vscp_node_state& (0+255),w,b
  2323  003848  0A03               	xorlw	3
  2324  00384A  E109               	bnz	l1122
  2325                           
  2326                           ; BSR set to: 0
  2327                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  2328  00384C  2B8C               	incf	_vscp_guid_reset& (0+255),f,b
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  2332  00384E  C08C  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  2333  003852  0E0F               	movlw	15
  2334  003854  164D               	andwf	??_vscp_doOneSecondWork,f,c
  2335  003856  0E02               	movlw	2
  2336  003858  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  2337  00385A  B0D8               	btfsc	status,0,c
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  2341  00385C  6B8C               	clrf	_vscp_guid_reset& (0+255),b
  2342  00385E                     l1122:
  2343                           
  2344                           ; BSR set to: 0
  2345  00385E  0012               	return	
  2346  003860                     __end_of_vscp_doOneSecondWork:
  2347                           	opt stack 0
  2348                           tblptru	equ	0xFF8
  2349                           tblptrh	equ	0xFF7
  2350                           tblptrl	equ	0xFF6
  2351                           tablat	equ	0xFF5
  2352                           prodh	equ	0xFF4
  2353                           prodl	equ	0xFF3
  2354                           intcon	equ	0xFF2
  2355                           postinc0	equ	0xFEE
  2356                           wreg	equ	0xFE8
  2357                           indf1	equ	0xFE7
  2358                           fsr1h	equ	0xFE2
  2359                           fsr1l	equ	0xFE1
  2360                           indf2	equ	0xFDF
  2361                           postinc2	equ	0xFDE
  2362                           postdec2	equ	0xFDD
  2363                           plusw2	equ	0xFDB
  2364                           fsr2h	equ	0xFDA
  2365                           fsr2l	equ	0xFD9
  2366                           status	equ	0xFD8
  2367                           
  2368 ;; *************** function _vscp_sendHeartBeat *****************
  2369 ;; Defined at:
  2370 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  2371 ;; Parameters:    Size  Location     Type
  2372 ;;  zone            1    wreg     unsigned char 
  2373 ;;  subzone         1   20[BANK0 ] unsigned char 
  2374 ;; Auto vars:     Size  Location     Type
  2375 ;;  zone            1   75[COMRAM] unsigned char 
  2376 ;; Return value:  Size  Location     Type
  2377 ;;		None               void
  2378 ;; Registers used:
  2379 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2380 ;; Tracked objects:
  2381 ;;		On entry : 0/0
  2382 ;;		On exit  : F/0
  2383 ;;		Unchanged: 0/0
  2384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2385 ;;      Params:         0       1       0       0       0       0       0
  2386 ;;      Locals:         1       0       0       0       0       0       0
  2387 ;;      Temps:          0       0       0       0       0       0       0
  2388 ;;      Totals:         1       1       0       0       0       0       0
  2389 ;;Total ram usage:        2 bytes
  2390 ;; Hardware stack levels used:    1
  2391 ;; Hardware stack levels required when called:    7
  2392 ;; This function calls:
  2393 ;;		_vscp_sendEvent
  2394 ;; This function is called by:
  2395 ;;		_vscp_doOneSecondWork
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           	psect	text4
  2400  003A5A                     __ptext4:
  2401                           	opt stack 0
  2402  003A5A                     _vscp_sendHeartBeat:
  2403                           	opt stack 22
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;incstack = 0
  2407                           ;incstack = 0
  2408                           ;vscp_sendHeartBeat@zone stored from wreg
  2409  003A5A  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  2410                           
  2411                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  2412  003A5E  0E83               	movlw	131
  2413  003A60  0100               	movlb	0	; () banked
  2414  003A62  6FA3               	movwf	_vscp_omsg& (0+255),b
  2415                           
  2416                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  2417  003A64  0E07               	movlw	7
  2418  003A66  6FA4               	movwf	(_vscp_omsg+1)& (0+255),b
  2419                           
  2420                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  2421  003A68  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
  2422  003A6A  0E14               	movlw	20
  2423  003A6C  6FA5               	movwf	(_vscp_omsg+2)& (0+255),b
  2424                           
  2425                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  2426  003A6E  0E09               	movlw	9
  2427  003A70  6FA7               	movwf	(_vscp_omsg+4)& (0+255),b
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  2431  003A72  6BA8               	clrf	(_vscp_omsg+5)& (0+255),b
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  2435  003A74  C04C  F0A9         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  2439  003A78  C0C4  F0AA         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;vscp_firmware.c: 388: vscp_sendEvent();
  2443  003A7C  EF66  F01D         	goto	_vscp_sendEvent	;wreg free
  2444  003A80                     __end_of_vscp_sendHeartBeat:
  2445                           	opt stack 0
  2446                           tblptru	equ	0xFF8
  2447                           tblptrh	equ	0xFF7
  2448                           tblptrl	equ	0xFF6
  2449                           tablat	equ	0xFF5
  2450                           prodh	equ	0xFF4
  2451                           prodl	equ	0xFF3
  2452                           intcon	equ	0xFF2
  2453                           postinc0	equ	0xFEE
  2454                           wreg	equ	0xFE8
  2455                           indf1	equ	0xFE7
  2456                           fsr1h	equ	0xFE2
  2457                           fsr1l	equ	0xFE1
  2458                           indf2	equ	0xFDF
  2459                           postinc2	equ	0xFDE
  2460                           postdec2	equ	0xFDD
  2461                           plusw2	equ	0xFDB
  2462                           fsr2h	equ	0xFDA
  2463                           fsr2l	equ	0xFD9
  2464                           status	equ	0xFD8
  2465                           
  2466 ;; *************** function _vscp_getSubzone *****************
  2467 ;; Defined at:
  2468 ;;		line 874 in file "../main.c"
  2469 ;; Parameters:    Size  Location     Type
  2470 ;;		None
  2471 ;; Auto vars:     Size  Location     Type
  2472 ;;		None
  2473 ;; Return value:  Size  Location     Type
  2474 ;;                  1    wreg      unsigned char 
  2475 ;; Registers used:
  2476 ;;		wreg, status,2, cstack
  2477 ;; Tracked objects:
  2478 ;;		On entry : F/0
  2479 ;;		On exit  : 0/0
  2480 ;;		Unchanged: 0/0
  2481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2482 ;;      Params:         0       0       0       0       0       0       0
  2483 ;;      Locals:         0       0       0       0       0       0       0
  2484 ;;      Temps:          0       0       0       0       0       0       0
  2485 ;;      Totals:         0       0       0       0       0       0       0
  2486 ;;Total ram usage:        0 bytes
  2487 ;; Hardware stack levels used:    1
  2488 ;; Hardware stack levels required when called:    3
  2489 ;; This function calls:
  2490 ;;		_Read_b_eep
  2491 ;; This function is called by:
  2492 ;;		_vscp_doOneSecondWork
  2493 ;; This function uses a non-reentrant model
  2494 ;;
  2495                           
  2496                           	psect	text5
  2497  003D10                     __ptext5:
  2498                           	opt stack 0
  2499  003D10                     _vscp_getSubzone:
  2500                           	opt stack 26
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;main.c: 875: return Read_b_eep(0x43 + 1);
  2504                           
  2505                           ; BSR set to: 0
  2506                           ;incstack = 0
  2507                           ;incstack = 0
  2508  003D10  6A09               	clrf	?_Read_b_eep+1,c
  2509  003D12  0E44               	movlw	68
  2510  003D14  6E08               	movwf	?_Read_b_eep,c
  2511  003D16  EF76  F01E         	goto	_Read_b_eep	;wreg free
  2512  003D1A                     __end_of_vscp_getSubzone:
  2513                           	opt stack 0
  2514                           tblptru	equ	0xFF8
  2515                           tblptrh	equ	0xFF7
  2516                           tblptrl	equ	0xFF6
  2517                           tablat	equ	0xFF5
  2518                           prodh	equ	0xFF4
  2519                           prodl	equ	0xFF3
  2520                           intcon	equ	0xFF2
  2521                           postinc0	equ	0xFEE
  2522                           wreg	equ	0xFE8
  2523                           indf1	equ	0xFE7
  2524                           fsr1h	equ	0xFE2
  2525                           fsr1l	equ	0xFE1
  2526                           indf2	equ	0xFDF
  2527                           postinc2	equ	0xFDE
  2528                           postdec2	equ	0xFDD
  2529                           plusw2	equ	0xFDB
  2530                           fsr2h	equ	0xFDA
  2531                           fsr2l	equ	0xFD9
  2532                           status	equ	0xFD8
  2533                           
  2534 ;; *************** function _vscp_getZone *****************
  2535 ;; Defined at:
  2536 ;;		line 865 in file "../main.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;		None
  2539 ;; Auto vars:     Size  Location     Type
  2540 ;;		None
  2541 ;; Return value:  Size  Location     Type
  2542 ;;                  1    wreg      unsigned char 
  2543 ;; Registers used:
  2544 ;;		wreg, status,2, cstack
  2545 ;; Tracked objects:
  2546 ;;		On entry : F/0
  2547 ;;		On exit  : 0/0
  2548 ;;		Unchanged: 0/0
  2549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2550 ;;      Params:         0       0       0       0       0       0       0
  2551 ;;      Locals:         0       0       0       0       0       0       0
  2552 ;;      Temps:          0       0       0       0       0       0       0
  2553 ;;      Totals:         0       0       0       0       0       0       0
  2554 ;;Total ram usage:        0 bytes
  2555 ;; Hardware stack levels used:    1
  2556 ;; Hardware stack levels required when called:    3
  2557 ;; This function calls:
  2558 ;;		_Read_b_eep
  2559 ;; This function is called by:
  2560 ;;		_vscp_doOneSecondWork
  2561 ;; This function uses a non-reentrant model
  2562 ;;
  2563                           
  2564                           	psect	text6
  2565  003D1A                     __ptext6:
  2566                           	opt stack 0
  2567  003D1A                     _vscp_getZone:
  2568                           	opt stack 26
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;main.c: 866: return Read_b_eep(0x43 + 0);
  2572                           
  2573                           ;incstack = 0
  2574                           ;incstack = 0
  2575  003D1A  6A09               	clrf	?_Read_b_eep+1,c
  2576  003D1C  0E43               	movlw	67
  2577  003D1E  6E08               	movwf	?_Read_b_eep,c
  2578  003D20  EF76  F01E         	goto	_Read_b_eep	;wreg free
  2579  003D24                     __end_of_vscp_getZone:
  2580                           	opt stack 0
  2581                           tblptru	equ	0xFF8
  2582                           tblptrh	equ	0xFF7
  2583                           tblptrl	equ	0xFF6
  2584                           tablat	equ	0xFF5
  2585                           prodh	equ	0xFF4
  2586                           prodl	equ	0xFF3
  2587                           intcon	equ	0xFF2
  2588                           postinc0	equ	0xFEE
  2589                           wreg	equ	0xFE8
  2590                           indf1	equ	0xFE7
  2591                           fsr1h	equ	0xFE2
  2592                           fsr1l	equ	0xFE1
  2593                           indf2	equ	0xFDF
  2594                           postinc2	equ	0xFDE
  2595                           postdec2	equ	0xFDD
  2596                           plusw2	equ	0xFDB
  2597                           fsr2h	equ	0xFDA
  2598                           fsr2l	equ	0xFD9
  2599                           status	equ	0xFD8
  2600                           
  2601 ;; *************** function _vscp_error *****************
  2602 ;; Defined at:
  2603 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;		None
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;		None
  2608 ;; Return value:  Size  Location     Type
  2609 ;;		None               void
  2610 ;; Registers used:
  2611 ;;		None
  2612 ;; Tracked objects:
  2613 ;;		On entry : 0/0
  2614 ;;		On exit  : 0/0
  2615 ;;		Unchanged: 0/0
  2616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2617 ;;      Params:         0       0       0       0       0       0       0
  2618 ;;      Locals:         0       0       0       0       0       0       0
  2619 ;;      Temps:          0       0       0       0       0       0       0
  2620 ;;      Totals:         0       0       0       0       0       0       0
  2621 ;;Total ram usage:        0 bytes
  2622 ;; Hardware stack levels used:    1
  2623 ;; Hardware stack levels required when called:    2
  2624 ;; This function calls:
  2625 ;;		Nothing
  2626 ;; This function is called by:
  2627 ;;		_main
  2628 ;; This function uses a non-reentrant model
  2629 ;;
  2630                           
  2631                           	psect	text7
  2632  003D5A                     __ptext7:
  2633                           	opt stack 0
  2634  003D5A                     _vscp_error:
  2635                           	opt stack 28
  2636                           
  2637                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  2638                           
  2639                           ;incstack = 0
  2640                           ;incstack = 0
  2641  003D5A  6A56               	clrf	_vscp_initledfunc,c
  2642  003D5C  0012               	return	
  2643  003D5E                     __end_of_vscp_error:
  2644                           	opt stack 0
  2645                           tblptru	equ	0xFF8
  2646                           tblptrh	equ	0xFF7
  2647                           tblptrl	equ	0xFF6
  2648                           tablat	equ	0xFF5
  2649                           prodh	equ	0xFF4
  2650                           prodl	equ	0xFF3
  2651                           intcon	equ	0xFF2
  2652                           postinc0	equ	0xFEE
  2653                           wreg	equ	0xFE8
  2654                           indf1	equ	0xFE7
  2655                           fsr1h	equ	0xFE2
  2656                           fsr1l	equ	0xFE1
  2657                           indf2	equ	0xFDF
  2658                           postinc2	equ	0xFDE
  2659                           postdec2	equ	0xFDD
  2660                           plusw2	equ	0xFDB
  2661                           fsr2h	equ	0xFDA
  2662                           fsr2l	equ	0xFD9
  2663                           status	equ	0xFD8
  2664                           
  2665 ;; *************** function _doDM *****************
  2666 ;; Defined at:
  2667 ;;		line 1630 in file "../main.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;		None
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;  class_mask      2   33[BANK0 ] unsigned short 
  2672 ;;  class_filter    2   31[BANK0 ] unsigned short 
  2673 ;;  i               1   44[BANK0 ] unsigned char 
  2674 ;;  dmflags         1   43[BANK0 ] unsigned char 
  2675 ;;  type_mask       1   36[BANK0 ] unsigned char 
  2676 ;;  type_filter     1   35[BANK0 ] unsigned char 
  2677 ;; Return value:  Size  Location     Type
  2678 ;;		None               void
  2679 ;; Registers used:
  2680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : F/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2686 ;;      Params:         0       0       0       0       0       0       0
  2687 ;;      Locals:         0      14       0       0       0       0       0
  2688 ;;      Temps:          0       3       0       0       0       0       0
  2689 ;;      Totals:         0      17       0       0       0       0       0
  2690 ;;Total ram usage:       17 bytes
  2691 ;; Hardware stack levels used:    1
  2692 ;; Hardware stack levels required when called:    8
  2693 ;; This function calls:
  2694 ;;		_Read_b_eep
  2695 ;;		_doActionOff
  2696 ;;		_doActionOn
  2697 ;;		_doActionPulse
  2698 ;;		_doActionStatus
  2699 ;;		_doActionDisable
  2700 ;;		_doActionToggle
  2701 ;; This function is called by:
  2702 ;;		_main
  2703 ;; This function uses a non-reentrant model
  2704 ;;
  2705                           
  2706                           	psect	text8
  2707  002424                     __ptext8:
  2708                           	opt stack 0
  2709  002424                     _doDM:
  2710                           	opt stack 22
  2711                           
  2712                           ;main.c: 1631: unsigned char i;
  2713                           ;main.c: 1632: unsigned char dmflags;
  2714                           ;main.c: 1633: unsigned short class_filter;
  2715                           ;main.c: 1634: unsigned short class_mask;
  2716                           ;main.c: 1635: unsigned char type_filter;
  2717                           ;main.c: 1636: unsigned char type_mask;
  2718                           ;main.c: 1639: if ( 0 == vscp_imsg.vscp_class ) return;
  2719                           
  2720                           ;incstack = 0
  2721                           ;incstack = 0
  2722  002424  0100               	movlb	0	; () banked
  2723  002426  5198               	movf	(_vscp_imsg+3)& (0+255),w,b
  2724  002428  1197               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  2725  00242A  E101 D0E8          	bz	l420
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;main.c: 1641: for (i = 0; i < 7; i++) {
  2729  00242E  6BDC               	clrf	doDM@i& (0+255),b
  2730  002430                     l10287:
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;main.c: 1644: dmflags = Read_b_eep(0x43 + 72 + 1 + (8 * i));
  2734  002430  D8E7               	call	PL2	;call to abstracted procedure
  2735  002432  0E8C               	movlw	140
  2736  002434  25CC               	addwf	??_doDM& (0+255),w,b
  2737  002436  6E08               	movwf	?_Read_b_eep,c
  2738  002438  0E00               	movlw	0
  2739  00243A  21CD               	addwfc	(??_doDM+1)& (0+255),w,b
  2740  00243C  6E09               	movwf	?_Read_b_eep+1,c
  2741  00243E  EC76  F01E         	call	_Read_b_eep	;wreg free
  2742  002442  0100               	movlb	0	; () banked
  2743  002444  6FDB               	movwf	doDM@dmflags& (0+255),b
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;main.c: 1647: if ( dmflags & 0x80 ) {
  2747  002446  AFDB               	btfss	doDM@dmflags& (0+255),7,b
  2748  002448  D0D5               	goto	l10333
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;main.c: 1650: if ( ( dmflags & 0x40 ) &&
  2752                           ;main.c: 1651: ( vscp_imsg.oaddr != Read_b_eep(0x43 + 72 + (8 * i)) ) ) {
  2753  00244A  ADDB               	btfss	doDM@dmflags& (0+255),6,b
  2754  00244C  D018               	goto	l10297
  2755                           
  2756                           ; BSR set to: 0
  2757  00244E  51DC               	movf	doDM@i& (0+255),w,b
  2758  002450  6FCC               	movwf	??_doDM& (0+255),b
  2759  002452  6BCD               	clrf	(??_doDM+1)& (0+255),b
  2760  002454  90D8               	bcf	status,0,c
  2761  002456  37CC               	rlcf	??_doDM& (0+255),f,b
  2762  002458  37CD               	rlcf	(??_doDM+1)& (0+255),f,b
  2763  00245A  90D8               	bcf	status,0,c
  2764  00245C  37CC               	rlcf	??_doDM& (0+255),f,b
  2765  00245E  37CD               	rlcf	(??_doDM+1)& (0+255),f,b
  2766  002460  90D8               	bcf	status,0,c
  2767  002462  37CC               	rlcf	??_doDM& (0+255),f,b
  2768  002464  37CD               	rlcf	(??_doDM+1)& (0+255),f,b
  2769  002466  0E8B               	movlw	139
  2770  002468  25CC               	addwf	??_doDM& (0+255),w,b
  2771  00246A  6E08               	movwf	?_Read_b_eep,c
  2772  00246C  0E00               	movlw	0
  2773  00246E  21CD               	addwfc	(??_doDM+1)& (0+255),w,b
  2774  002470  6E09               	movwf	?_Read_b_eep+1,c
  2775  002472  EC76  F01E         	call	_Read_b_eep	;wreg free
  2776  002476  0100               	movlb	0	; () banked
  2777  002478  199A               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  2778  00247A  E001 D0BB          	bnz	l10333
  2779  00247E                     l10297:
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;main.c: 1653: }
  2783                           ;main.c: 1677: class_filter = ( dmflags & 0x01)*256 +
  2784                           ;main.c: 1678: Read_b_eep(0x43 + 72 + (8 * i) + 3);
  2785  00247E  51DC               	movf	doDM@i& (0+255),w,b
  2786  002480  0D08               	mullw	8
  2787  002482  0E8E               	movlw	142
  2788  002484  24F3               	addwf	prodl,w,c
  2789  002486  6E08               	movwf	?_Read_b_eep,c
  2790  002488  0E00               	movlw	0
  2791  00248A  20F4               	addwfc	prodh,w,c
  2792  00248C  6E09               	movwf	?_Read_b_eep+1,c
  2793  00248E  EC76  F01E         	call	_Read_b_eep	;wreg free
  2794  002492  0100               	movlb	0	; () banked
  2795  002494  6FCC               	movwf	??_doDM& (0+255),b
  2796  002496  51DB               	movf	doDM@dmflags& (0+255),w,b
  2797  002498  0B01               	andlw	1
  2798  00249A  6FCE               	movwf	(??_doDM+2)& (0+255),b
  2799  00249C  6BCD               	clrf	(??_doDM+1)& (0+255),b
  2800  00249E  51CC               	movf	??_doDM& (0+255),w,b
  2801  0024A0  25CD               	addwf	(??_doDM+1)& (0+255),w,b
  2802  0024A2  6FCF               	movwf	doDM@class_filter& (0+255),b
  2803  0024A4  0E00               	movlw	0
  2804  0024A6  21CE               	addwfc	(??_doDM+2)& (0+255),w,b
  2805  0024A8  6FD0               	movwf	(doDM@class_filter+1)& (0+255),b
  2806                           
  2807                           ;main.c: 1682: class_mask = ( dmflags & 0x02)*256 +
  2808                           ;main.c: 1683: Read_b_eep(0x43 + 72 + (8 * i) + 2);
  2809  0024AA  51DC               	movf	doDM@i& (0+255),w,b
  2810  0024AC  0D08               	mullw	8
  2811  0024AE  0E8D               	movlw	141
  2812  0024B0  24F3               	addwf	prodl,w,c
  2813  0024B2  6E08               	movwf	?_Read_b_eep,c
  2814  0024B4  0E00               	movlw	0
  2815  0024B6  20F4               	addwfc	prodh,w,c
  2816  0024B8  6E09               	movwf	?_Read_b_eep+1,c
  2817  0024BA  EC76  F01E         	call	_Read_b_eep	;wreg free
  2818  0024BE  0100               	movlb	0	; () banked
  2819  0024C0  6FCC               	movwf	??_doDM& (0+255),b
  2820  0024C2  51DB               	movf	doDM@dmflags& (0+255),w,b
  2821  0024C4  0B02               	andlw	2
  2822  0024C6  6FCE               	movwf	(??_doDM+2)& (0+255),b
  2823  0024C8  6BCD               	clrf	(??_doDM+1)& (0+255),b
  2824  0024CA  51CC               	movf	??_doDM& (0+255),w,b
  2825  0024CC  25CD               	addwf	(??_doDM+1)& (0+255),w,b
  2826  0024CE  6FD1               	movwf	doDM@class_mask& (0+255),b
  2827  0024D0  0E00               	movlw	0
  2828  0024D2  21CE               	addwfc	(??_doDM+2)& (0+255),w,b
  2829  0024D4  6FD2               	movwf	(doDM@class_mask+1)& (0+255),b
  2830                           
  2831                           ; BSR set to: 0
  2832                           ;main.c: 1687: type_filter = Read_b_eep(0x43 + 72 + (8 * i) + 5);
  2833  0024D6  D894               	call	PL2	;call to abstracted procedure
  2834  0024D8  0E90               	movlw	144
  2835  0024DA  25CC               	addwf	??_doDM& (0+255),w,b
  2836  0024DC  6E08               	movwf	?_Read_b_eep,c
  2837  0024DE  0E00               	movlw	0
  2838  0024E0  21CD               	addwfc	(??_doDM+1)& (0+255),w,b
  2839  0024E2  6E09               	movwf	?_Read_b_eep+1,c
  2840  0024E4  EC76  F01E         	call	_Read_b_eep	;wreg free
  2841  0024E8  0100               	movlb	0	; () banked
  2842  0024EA  6FD3               	movwf	doDM@type_filter& (0+255),b
  2843                           
  2844                           ; BSR set to: 0
  2845                           ;main.c: 1691: type_mask = Read_b_eep(0x43 + 72 + (8 * i) + 4);
  2846  0024EC  D889               	call	PL2	;call to abstracted procedure
  2847  0024EE  0E8F               	movlw	143
  2848  0024F0  25CC               	addwf	??_doDM& (0+255),w,b
  2849  0024F2  6E08               	movwf	?_Read_b_eep,c
  2850  0024F4  0E00               	movlw	0
  2851  0024F6  21CD               	addwfc	(??_doDM+1)& (0+255),w,b
  2852  0024F8  6E09               	movwf	?_Read_b_eep+1,c
  2853  0024FA  EC76  F01E         	call	_Read_b_eep	;wreg free
  2854  0024FE  0100               	movlb	0	; () banked
  2855  002500  6FD4               	movwf	doDM@type_mask& (0+255),b
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;main.c: 1696: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2859                           ;main.c: 1697: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2860  002502  EE20  F097         	lfsr	2,_vscp_imsg+2
  2861  002506  CFDE F0CC          	movff	postinc2,??_doDM
  2862  00250A  CFDD F0CD          	movff	postdec2,??_doDM+1
  2863  00250E  51CF               	movf	doDM@class_filter& (0+255),w,b
  2864  002510  1BCC               	xorwf	??_doDM& (0+255),f,b
  2865  002512  51D0               	movf	(doDM@class_filter+1)& (0+255),w,b
  2866  002514  1BCD               	xorwf	(??_doDM+1)& (0+255),f,b
  2867  002516  51D1               	movf	doDM@class_mask& (0+255),w,b
  2868  002518  17CC               	andwf	??_doDM& (0+255),f,b
  2869  00251A  51D2               	movf	(doDM@class_mask+1)& (0+255),w,b
  2870  00251C  17CD               	andwf	(??_doDM+1)& (0+255),f,b
  2871  00251E  51CD               	movf	(??_doDM+1)& (0+255),w,b
  2872  002520  11CC               	iorwf	??_doDM& (0+255),w,b
  2873  002522  E168               	bnz	l10333
  2874                           
  2875                           ; BSR set to: 0
  2876  002524  5199               	movf	(_vscp_imsg+4)& (0+255),w,b
  2877  002526  19D3               	xorwf	doDM@type_filter& (0+255),w,b
  2878  002528  15D4               	andwf	doDM@type_mask& (0+255),w,b
  2879  00252A  E04F               	bz	l10331
  2880  00252C  D063               	goto	l10333
  2881  00252E                     l10309:
  2882                           
  2883                           ;main.c: 1703: doActionOn( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2884  00252E  0100               	movlb	0	; () banked
  2885  002530  D867               	call	PL2	;call to abstracted procedure
  2886  002532  D873               	call	PL16	;call to abstracted procedure
  2887  002534  EC76  F01E         	call	_Read_b_eep	;wreg free
  2888  002538  0100               	movlb	0	; () banked
  2889  00253A  6FD5               	movwf	_doDM$2152& (0+255),b
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;main.c: 1703: doActionOn( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2893  00253C  C0D5  F051         	movff	_doDM$2152,?_doActionOn
  2894  002540  51DB               	movf	doDM@dmflags& (0+255),w,b
  2895  002542  ECCB  F00F         	call	_doActionOn
  2896                           
  2897                           ;main.c: 1704: break;
  2898  002546  D056               	goto	l10333
  2899  002548                     l10313:
  2900                           
  2901                           ;main.c: 1707: doActionOff( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2902  002548  0100               	movlb	0	; () banked
  2903  00254A  D85A               	call	PL2	;call to abstracted procedure
  2904  00254C  D866               	call	PL16	;call to abstracted procedure
  2905  00254E  EC76  F01E         	call	_Read_b_eep	;wreg free
  2906  002552  0100               	movlb	0	; () banked
  2907  002554  6FD6               	movwf	_doDM$2153& (0+255),b
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;main.c: 1707: doActionOff( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2911  002556  C0D6  F051         	movff	_doDM$2153,?_doActionOff
  2912  00255A  51DB               	movf	doDM@dmflags& (0+255),w,b
  2913  00255C  EC4F  F019         	call	_doActionOff
  2914                           
  2915                           ;main.c: 1708: break;
  2916  002560  D049               	goto	l10333
  2917  002562                     l10317:
  2918                           
  2919                           ;main.c: 1711: doActionPulse( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2920  002562  0100               	movlb	0	; () banked
  2921  002564  D84D               	call	PL2	;call to abstracted procedure
  2922  002566  D859               	call	PL16	;call to abstracted procedure
  2923  002568  EC76  F01E         	call	_Read_b_eep	;wreg free
  2924  00256C  0100               	movlb	0	; () banked
  2925  00256E  6FD7               	movwf	_doDM$2154& (0+255),b
  2926                           
  2927                           ;main.c: 1711: doActionPulse( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2928  002570  C0D7  F00A         	movff	_doDM$2154,?_doActionPulse
  2929  002574  51DB               	movf	doDM@dmflags& (0+255),w,b
  2930  002576  EC14  F013         	call	_doActionPulse
  2931                           
  2932                           ;main.c: 1712: break;
  2933  00257A  D03C               	goto	l10333
  2934  00257C                     l10319:
  2935                           
  2936                           ;main.c: 1715: doActionStatus( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2937  00257C  0100               	movlb	0	; () banked
  2938  00257E  D840               	call	PL2	;call to abstracted procedure
  2939  002580  D84C               	call	PL16	;call to abstracted procedure
  2940  002582  EC76  F01E         	call	_Read_b_eep	;wreg free
  2941  002586  0100               	movlb	0	; () banked
  2942  002588  6FD8               	movwf	_doDM$2155& (0+255),b
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;main.c: 1715: doActionStatus( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2946  00258A  C0D8  F051         	movff	_doDM$2155,?_doActionStatus
  2947  00258E  51DB               	movf	doDM@dmflags& (0+255),w,b
  2948  002590  EC2C  F016         	call	_doActionStatus
  2949                           
  2950                           ;main.c: 1716: break;
  2951  002594  D02F               	goto	l10333
  2952  002596                     l10323:
  2953                           
  2954                           ;main.c: 1719: doActionDisable( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2955  002596  0100               	movlb	0	; () banked
  2956  002598  D833               	call	PL2	;call to abstracted procedure
  2957  00259A  D83F               	call	PL16	;call to abstracted procedure
  2958  00259C  EC76  F01E         	call	_Read_b_eep	;wreg free
  2959  0025A0  0100               	movlb	0	; () banked
  2960  0025A2  6FD9               	movwf	_doDM$2156& (0+255),b
  2961                           
  2962                           ;main.c: 1719: doActionDisable( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2963  0025A4  C0D9  F00C         	movff	_doDM$2156,?_doActionDisable
  2964  0025A8  51DB               	movf	doDM@dmflags& (0+255),w,b
  2965  0025AA  EC17  F01B         	call	_doActionDisable
  2966                           
  2967                           ;main.c: 1720: break;
  2968  0025AE  D022               	goto	l10333
  2969  0025B0                     l10325:
  2970                           
  2971                           ;main.c: 1723: doActionToggle( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2972  0025B0  0100               	movlb	0	; () banked
  2973  0025B2  D826               	call	PL2	;call to abstracted procedure
  2974  0025B4  D832               	call	PL16	;call to abstracted procedure
  2975  0025B6  EC76  F01E         	call	_Read_b_eep	;wreg free
  2976  0025BA  0100               	movlb	0	; () banked
  2977  0025BC  6FDA               	movwf	_doDM$2157& (0+255),b
  2978                           
  2979                           ; BSR set to: 0
  2980                           ;main.c: 1723: doActionToggle( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2981  0025BE  C0DA  F051         	movff	_doDM$2157,?_doActionToggle
  2982  0025C2  51DB               	movf	doDM@dmflags& (0+255),w,b
  2983  0025C4  EC8E  F015         	call	_doActionToggle
  2984                           
  2985                           ;main.c: 1724: break;
  2986  0025C8  D015               	goto	l10333
  2987  0025CA                     l10331:
  2988                           
  2989                           ; BSR set to: 0
  2990  0025CA  D81A               	call	PL2	;call to abstracted procedure
  2991  0025CC  0E91               	movlw	145
  2992  0025CE  25CC               	addwf	??_doDM& (0+255),w,b
  2993  0025D0  6E08               	movwf	?_Read_b_eep,c
  2994  0025D2  0E00               	movlw	0
  2995  0025D4  21CD               	addwfc	(??_doDM+1)& (0+255),w,b
  2996  0025D6  6E09               	movwf	?_Read_b_eep+1,c
  2997  0025D8  EC76  F01E         	call	_Read_b_eep	;wreg free
  2998                           
  2999                           ; Switch size 1, requested type "space"
  3000                           ; Number of cases is 6, Range of values is 1 to 16
  3001                           ; switch strategies available:
  3002                           ; Name         Instructions Cycles
  3003                           ; simple_byte           19    10 (average)
  3004                           ;	Chosen strategy is simple_byte
  3005  0025DC  0A01               	xorlw	1	; case 1
  3006  0025DE  E0A7               	bz	l10309
  3007  0025E0  0A03               	xorlw	3	; case 2
  3008  0025E2  E0B2               	bz	l10313
  3009  0025E4  0A01               	xorlw	1	; case 3
  3010  0025E6  E0BD               	bz	l10317
  3011  0025E8  0A07               	xorlw	7	; case 4
  3012  0025EA  E0E2               	bz	l10325
  3013  0025EC  0A0E               	xorlw	14	; case 10
  3014  0025EE  E0C6               	bz	l10319
  3015  0025F0  0A1A               	xorlw	26	; case 16
  3016  0025F2  E0D1               	bz	l10323
  3017  0025F4                     l10333:
  3018  0025F4  0100               	movlb	0	; () banked
  3019  0025F6  2BDC               	incf	doDM@i& (0+255),f,b
  3020                           
  3021                           ; BSR set to: 0
  3022  0025F8  0E06               	movlw	6
  3023  0025FA  65DC               	cpfsgt	doDM@i& (0+255),b
  3024  0025FC  D719               	goto	l10287
  3025  0025FE                     l420:
  3026                           
  3027                           ; BSR set to: 0
  3028  0025FE  0012               	return	
  3029  002600                     __end_of_doDM:
  3030                           	opt stack 0
  3031  002600                     PL2:
  3032                           	opt stack 22
  3033  002600  51DC               	movf	doDM@i& (0+255),w,b
  3034  002602  6FCC               	movwf	??_doDM& (0+255),b
  3035  002604  6BCD               	clrf	(??_doDM+1)& (0+255),b
  3036  002606  90D8               	bcf	status,0,c
  3037  002608  37CC               	rlcf	??_doDM& (0+255),f,b
  3038  00260A  37CD               	rlcf	(??_doDM+1)& (0+255),f,b
  3039  00260C  90D8               	bcf	status,0,c
  3040  00260E  37CC               	rlcf	??_doDM& (0+255),f,b
  3041  002610  37CD               	rlcf	(??_doDM+1)& (0+255),f,b
  3042  002612  90D8               	bcf	status,0,c
  3043  002614  37CC               	rlcf	??_doDM& (0+255),f,b
  3044  002616  37CD               	rlcf	(??_doDM+1)& (0+255),f,b
  3045  002618  0012               	return	
  3046  00261A                     __end_ofPL2:
  3047                           	opt stack 0
  3048  00261A                     PL16:
  3049                           	opt stack 22
  3050  00261A  0E92               	movlw	146
  3051  00261C  25CC               	addwf	??_doDM& (0+255),w,b
  3052  00261E  6E08               	movwf	?_Read_b_eep,c
  3053  002620  0E00               	movlw	0
  3054  002622  21CD               	addwfc	(??_doDM+1)& (0+255),w,b
  3055  002624  6E09               	movwf	?_Read_b_eep+1,c
  3056  002626  0012               	return	
  3057  002628                     __end_ofPL16:
  3058                           	opt stack 0
  3059                           tblptru	equ	0xFF8
  3060                           tblptrh	equ	0xFF7
  3061                           tblptrl	equ	0xFF6
  3062                           tablat	equ	0xFF5
  3063                           prodh	equ	0xFF4
  3064                           prodl	equ	0xFF3
  3065                           intcon	equ	0xFF2
  3066                           postinc0	equ	0xFEE
  3067                           wreg	equ	0xFE8
  3068                           indf1	equ	0xFE7
  3069                           fsr1h	equ	0xFE2
  3070                           fsr1l	equ	0xFE1
  3071                           indf2	equ	0xFDF
  3072                           postinc2	equ	0xFDE
  3073                           postdec2	equ	0xFDD
  3074                           plusw2	equ	0xFDB
  3075                           fsr2h	equ	0xFDA
  3076                           fsr2l	equ	0xFD9
  3077                           status	equ	0xFD8
  3078                           
  3079 ;; *************** function _doActionToggle *****************
  3080 ;; Defined at:
  3081 ;;		line 2170 in file "../main.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;  dmflags         1    wreg     unsigned char 
  3084 ;;  arg             1   80[COMRAM] unsigned char 
  3085 ;; Auto vars:     Size  Location     Type
  3086 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3087 ;;  i               1   27[BANK0 ] unsigned char 
  3088 ;;  bOn             1   26[BANK0 ] enum E15660
  3089 ;;  val             1   25[BANK0 ] unsigned char 
  3090 ;; Return value:  Size  Location     Type
  3091 ;;		None               void
  3092 ;; Registers used:
  3093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3094 ;; Tracked objects:
  3095 ;;		On entry : F/0
  3096 ;;		On exit  : F/0
  3097 ;;		Unchanged: 0/0
  3098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3099 ;;      Params:         1       0       0       0       0       0       0
  3100 ;;      Locals:         0       4       0       0       0       0       0
  3101 ;;      Temps:          0       2       0       0       0       0       0
  3102 ;;      Totals:         1       6       0       0       0       0       0
  3103 ;;Total ram usage:        7 bytes
  3104 ;; Hardware stack levels used:    1
  3105 ;; Hardware stack levels required when called:    7
  3106 ;; This function calls:
  3107 ;;		_Read_b_eep
  3108 ;;		_SendInformationEvent
  3109 ;; This function is called by:
  3110 ;;		_doDM
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114                           	psect	text9
  3115  002B1C                     __ptext9:
  3116                           	opt stack 0
  3117  002B1C                     _doActionToggle:
  3118                           	opt stack 22
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;incstack = 0
  3122                           ;incstack = 0
  3123                           ;doActionToggle@dmflags stored from wreg
  3124  002B1C  CFE8 F0C8          	movff	wreg,doActionToggle@dmflags
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;main.c: 2172: unsigned char i;
  3128                           ;main.c: 2173: unsigned char val;
  3129                           ;main.c: 2174: BOOL bOn = 0;
  3130  002B20  6BCA               	clrf	doActionToggle@bOn& (0+255),b
  3131                           
  3132                           ;main.c: 2176: for ( i = 0; i < 8; i++ ) {
  3133  002B22  6BCB               	clrf	doActionToggle@i& (0+255),b
  3134  002B24                     l11055:
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;main.c: 2179: if ( !( arg & (1 << i) ) ) continue;
  3138  002B24  C0CB  F0C6         	movff	doActionToggle@i,??_doActionToggle
  3139  002B28  0E01               	movlw	1
  3140  002B2A  6FC7               	movwf	(??_doActionToggle+1)& (0+255),b
  3141  002B2C  2BC6               	incf	??_doActionToggle& (0+255),f,b
  3142  002B2E  D002               	goto	u13484
  3143  002B30                     u13485:
  3144  002B30  90D8               	bcf	status,0,c
  3145  002B32  37C7               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3146  002B34                     u13484:
  3147  002B34  2FC6               	decfsz	??_doActionToggle& (0+255),f,b
  3148  002B36  D7FC               	goto	u13485
  3149  002B38  51C7               	movf	(??_doActionToggle+1)& (0+255),w,b
  3150  002B3A  1451               	andwf	doActionToggle@arg,w,c
  3151  002B3C  E101 D087          	bz	l11117
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;main.c: 2182: if ( dmflags & 0x10 ) {
  3155  002B40  A9C8               	btfss	doActionToggle@dmflags& (0+255),4,b
  3156  002B42  D00B               	goto	l552
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;main.c: 2183: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 52 + i) ) {
  3160  002B44  0E77               	movlw	119
  3161  002B46  25CB               	addwf	doActionToggle@i& (0+255),w,b
  3162  002B48  6E08               	movwf	?_Read_b_eep,c
  3163  002B4A  6A09               	clrf	?_Read_b_eep+1,c
  3164  002B4C  0E00               	movlw	0
  3165  002B4E  2209               	addwfc	?_Read_b_eep+1,f,c
  3166  002B50  EC76  F01E         	call	_Read_b_eep	;wreg free
  3167  002B54  0100               	movlb	0	; () banked
  3168  002B56  199C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3169  002B58  E17A               	bnz	l11117
  3170  002B5A                     l552:
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;main.c: 2186: }
  3174                           ;main.c: 2187: }
  3175                           ;main.c: 2190: if ( dmflags & 0x08 ) {
  3176  002B5A  A7C8               	btfss	doActionToggle@dmflags& (0+255),3,b
  3177  002B5C  D00B               	goto	l11067
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;main.c: 2191: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 53 + i) ) {
  3181  002B5E  0E78               	movlw	120
  3182  002B60  25CB               	addwf	doActionToggle@i& (0+255),w,b
  3183  002B62  6E08               	movwf	?_Read_b_eep,c
  3184  002B64  6A09               	clrf	?_Read_b_eep+1,c
  3185  002B66  0E00               	movlw	0
  3186  002B68  2209               	addwfc	?_Read_b_eep+1,f,c
  3187  002B6A  EC76  F01E         	call	_Read_b_eep	;wreg free
  3188  002B6E  0100               	movlb	0	; () banked
  3189  002B70  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3190  002B72  E16D               	bnz	l11117
  3191  002B74                     l11067:
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;main.c: 2194: }
  3195                           ;main.c: 2195: }
  3196                           ;main.c: 2197: val = Read_b_eep(0x43 + 10 + i);
  3197  002B74  0E4D               	movlw	77
  3198  002B76  25CB               	addwf	doActionToggle@i& (0+255),w,b
  3199  002B78  6E08               	movwf	?_Read_b_eep,c
  3200  002B7A  6A09               	clrf	?_Read_b_eep+1,c
  3201  002B7C  0E00               	movlw	0
  3202  002B7E  2209               	addwfc	?_Read_b_eep+1,f,c
  3203  002B80  EC76  F01E         	call	_Read_b_eep	;wreg free
  3204  002B84  0100               	movlb	0	; () banked
  3205  002B86  6FC9               	movwf	doActionToggle@val& (0+255),b
  3206                           
  3207                           ;main.c: 2199: switch ( i ) {
  3208  002B88  D02D               	goto	l11099
  3209  002B8A                     l557:
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;main.c: 2202: if ( LATBbits.LATB4 ) {
  3213  002B8A  A88A               	btfss	3978,4,c	;volatile
  3214  002B8C  D002               	goto	l558
  3215                           
  3216                           ; BSR set to: 0
  3217                           ;main.c: 2203: LATBbits.LATB4 = 0;
  3218  002B8E  988A               	bcf	3978,4,c	;volatile
  3219  002B90  D025               	goto	L12
  3220  002B92                     l558:
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;main.c: 2206: LATBbits.LATB4 = 1;
  3224  002B92  888A               	bsf	3978,4,c	;volatile
  3225  002B94                     l11071:
  3226                           
  3227                           ; BSR set to: 0
  3228                           ;main.c: 2207: bOn = 1;
  3229  002B94  0E01               	movlw	1
  3230  002B96  6FCA               	movwf	doActionToggle@bOn& (0+255),b
  3231  002B98  D033               	goto	l11101
  3232  002B9A                     l561:
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;main.c: 2212: if ( LATBbits.LATB1 ) {
  3236  002B9A  A28A               	btfss	3978,1,c	;volatile
  3237  002B9C  D002               	goto	l562
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;main.c: 2213: LATBbits.LATB1 = 0;
  3241  002B9E  928A               	bcf	3978,1,c	;volatile
  3242  002BA0  D01D               	goto	L12
  3243  002BA2                     l562:
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;main.c: 2216: LATBbits.LATB1 = 1;
  3247  002BA2  828A               	bsf	3978,1,c	;volatile
  3248  002BA4  D7F7               	goto	l11071
  3249  002BA6                     l564:
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;main.c: 2222: if ( LATBbits.LATB0 ) {
  3253  002BA6  A08A               	btfss	3978,0,c	;volatile
  3254  002BA8  D002               	goto	l565
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;main.c: 2223: LATBbits.LATB0 = 0;
  3258  002BAA  908A               	bcf	3978,0,c	;volatile
  3259  002BAC  D017               	goto	L12
  3260  002BAE                     l565:
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;main.c: 2226: LATBbits.LATB0 = 1;
  3264  002BAE  808A               	bsf	3978,0,c	;volatile
  3265  002BB0  D7F1               	goto	l11071
  3266  002BB2                     l567:
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;main.c: 2232: if ( LATCbits.LATC7 ) {
  3270  002BB2  AE8B               	btfss	3979,7,c	;volatile
  3271  002BB4  D002               	goto	l568
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;main.c: 2233: LATCbits.LATC7 = 0;
  3275  002BB6  9E8B               	bcf	3979,7,c	;volatile
  3276  002BB8  D011               	goto	L12
  3277  002BBA                     l568:
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;main.c: 2236: LATCbits.LATC7 = 1;
  3281  002BBA  8E8B               	bsf	3979,7,c	;volatile
  3282  002BBC  D7EB               	goto	l11071
  3283  002BBE                     l570:
  3284                           
  3285                           ; BSR set to: 0
  3286                           ;main.c: 2242: if ( LATCbits.LATC6 ) {
  3287  002BBE  AC8B               	btfss	3979,6,c	;volatile
  3288  002BC0  D002               	goto	l571
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;main.c: 2243: LATCbits.LATC6 = 0;
  3292  002BC2  9C8B               	bcf	3979,6,c	;volatile
  3293  002BC4  D00B               	goto	L12
  3294  002BC6                     l571:
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;main.c: 2246: LATCbits.LATC6 = 1;
  3298  002BC6  8C8B               	bsf	3979,6,c	;volatile
  3299  002BC8  D7E5               	goto	l11071
  3300  002BCA                     l573:
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;main.c: 2252: if ( LATCbits.LATC5 ) {
  3304  002BCA  AA8B               	btfss	3979,5,c	;volatile
  3305  002BCC  D002               	goto	l574
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;main.c: 2253: LATCbits.LATC5 = 0;
  3309  002BCE  9A8B               	bcf	3979,5,c	;volatile
  3310  002BD0  D005               	goto	L12
  3311  002BD2                     l574:
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;main.c: 2256: LATCbits.LATC5 = 1;
  3315  002BD2  8A8B               	bsf	3979,5,c	;volatile
  3316  002BD4  D7DF               	goto	l11071
  3317  002BD6                     l576:
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;main.c: 2262: if ( LATCbits.LATC4 ) {
  3321  002BD6  A88B               	btfss	3979,4,c	;volatile
  3322  002BD8  D003               	goto	l577
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;main.c: 2263: LATCbits.LATC4 = 0;
  3326  002BDA  988B               	bcf	3979,4,c	;volatile
  3327  002BDC                     L12:
  3328                           
  3329                           ;main.c: 2264: bOn = 0;
  3330  002BDC  6BCA               	clrf	doActionToggle@bOn& (0+255),b
  3331                           
  3332                           ;main.c: 2265: } else {
  3333  002BDE  D010               	goto	l11101
  3334  002BE0                     l577:
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;main.c: 2266: LATCbits.LATC4 = 1;
  3338  002BE0  888B               	bsf	3979,4,c	;volatile
  3339  002BE2  D7D8               	goto	l11071
  3340  002BE4                     l11099:
  3341                           
  3342                           ; BSR set to: 0
  3343  002BE4  51CB               	movf	doActionToggle@i& (0+255),w,b
  3344                           
  3345                           ; Switch size 1, requested type "space"
  3346                           ; Number of cases is 7, Range of values is 0 to 6
  3347                           ; switch strategies available:
  3348                           ; Name         Instructions Cycles
  3349                           ; simple_byte           22    12 (average)
  3350                           ;	Chosen strategy is simple_byte
  3351  002BE6  E0D1               	bz	l557
  3352  002BE8  0A01               	xorlw	1	; case 1
  3353  002BEA  E0D7               	bz	l561
  3354  002BEC  0A03               	xorlw	3	; case 2
  3355  002BEE  E0DB               	bz	l564
  3356  002BF0  0A01               	xorlw	1	; case 3
  3357  002BF2  E0DF               	bz	l567
  3358  002BF4  0A07               	xorlw	7	; case 4
  3359  002BF6  E0E3               	bz	l570
  3360  002BF8  0A01               	xorlw	1	; case 5
  3361  002BFA  E0E7               	bz	l573
  3362  002BFC  0A03               	xorlw	3	; case 6
  3363  002BFE  E0EB               	bz	l576
  3364  002C00                     l11101:
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;main.c: 2273: if ( bOn ) {
  3368  002C00  51CA               	movf	doActionToggle@bOn& (0+255),w,b
  3369  002C02  E013               	bz	l579
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;main.c: 2276: if ( val & 0x08 ) {
  3373  002C04  A7C9               	btfss	doActionToggle@val& (0+255),3,b
  3374  002C06  D007               	goto	l11107
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;main.c: 2277: SendInformationEvent( i, 20, 3 );
  3378  002C08  0E14               	movlw	20
  3379  002C0A  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  3380  002C0C  0E03               	movlw	3
  3381  002C0E  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3382  002C10  51CB               	movf	doActionToggle@i& (0+255),w,b
  3383  002C12  ECD3  F01B         	call	_SendInformationEvent
  3384  002C16                     l11107:
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;main.c: 2278: }
  3388                           ;main.c: 2281: if ( val & 0x20 ) {
  3389  002C16  ABC9               	btfss	doActionToggle@val& (0+255),5,b
  3390  002C18  D01A               	goto	l11117
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;main.c: 2282: SendInformationEvent( i, 20, 25 );
  3394  002C1A  0E14               	movlw	20
  3395  002C1C  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  3396  002C1E  0E19               	movlw	25
  3397  002C20  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3398  002C22  51CB               	movf	doActionToggle@i& (0+255),w,b
  3399  002C24  ECD3  F01B         	call	_SendInformationEvent
  3400  002C28  D012               	goto	l11117
  3401  002C2A                     l579:
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;main.c: 2286: else {
  3405                           ;main.c: 2289: if ( val & 0x10 ) {
  3406  002C2A  A9C9               	btfss	doActionToggle@val& (0+255),4,b
  3407  002C2C  D007               	goto	l11113
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;main.c: 2290: SendInformationEvent( i, 20, 4 );
  3411  002C2E  0E14               	movlw	20
  3412  002C30  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  3413  002C32  0E04               	movlw	4
  3414  002C34  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3415  002C36  51CB               	movf	doActionToggle@i& (0+255),w,b
  3416  002C38  ECD3  F01B         	call	_SendInformationEvent
  3417  002C3C                     l11113:
  3418                           
  3419                           ; BSR set to: 0
  3420                           ;main.c: 2291: }
  3421                           ;main.c: 2294: if (val & 0x40 ) {
  3422  002C3C  ADC9               	btfss	doActionToggle@val& (0+255),6,b
  3423  002C3E  D007               	goto	l11117
  3424                           
  3425                           ; BSR set to: 0
  3426                           ;main.c: 2295: SendInformationEvent( i, 20, 24 );
  3427  002C40  0E14               	movlw	20
  3428  002C42  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  3429  002C44  0E18               	movlw	24
  3430  002C46  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3431  002C48  51CB               	movf	doActionToggle@i& (0+255),w,b
  3432  002C4A  ECD3  F01B         	call	_SendInformationEvent
  3433  002C4E                     l11117:
  3434                           
  3435                           ; BSR set to: 0
  3436  002C4E  2BCB               	incf	doActionToggle@i& (0+255),f,b
  3437                           
  3438                           ; BSR set to: 0
  3439  002C50  0E07               	movlw	7
  3440  002C52  65CB               	cpfsgt	doActionToggle@i& (0+255),b
  3441  002C54  D767               	goto	l11055
  3442                           
  3443                           ; BSR set to: 0
  3444  002C56  0C07               	retlw	7
  3445  002C58                     __end_of_doActionToggle:
  3446                           	opt stack 0
  3447                           tblptru	equ	0xFF8
  3448                           tblptrh	equ	0xFF7
  3449                           tblptrl	equ	0xFF6
  3450                           tablat	equ	0xFF5
  3451                           prodh	equ	0xFF4
  3452                           prodl	equ	0xFF3
  3453                           intcon	equ	0xFF2
  3454                           postinc0	equ	0xFEE
  3455                           wreg	equ	0xFE8
  3456                           indf1	equ	0xFE7
  3457                           fsr1h	equ	0xFE2
  3458                           fsr1l	equ	0xFE1
  3459                           indf2	equ	0xFDF
  3460                           postinc2	equ	0xFDE
  3461                           postdec2	equ	0xFDD
  3462                           plusw2	equ	0xFDB
  3463                           fsr2h	equ	0xFDA
  3464                           fsr2l	equ	0xFD9
  3465                           status	equ	0xFD8
  3466                           
  3467 ;; *************** function _doActionDisable *****************
  3468 ;; Defined at:
  3469 ;;		line 2133 in file "../main.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;  dmflags         1    wreg     unsigned char 
  3472 ;;  arg             1   11[COMRAM] unsigned char 
  3473 ;; Auto vars:     Size  Location     Type
  3474 ;;  dmflags         1   15[COMRAM] unsigned char 
  3475 ;;  i               1   16[COMRAM] unsigned char 
  3476 ;;  val             1   14[COMRAM] unsigned char 
  3477 ;; Return value:  Size  Location     Type
  3478 ;;		None               void
  3479 ;; Registers used:
  3480 ;;		wreg, status,2, status,0, cstack
  3481 ;; Tracked objects:
  3482 ;;		On entry : F/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3486 ;;      Params:         1       0       0       0       0       0       0
  3487 ;;      Locals:         3       0       0       0       0       0       0
  3488 ;;      Temps:          2       0       0       0       0       0       0
  3489 ;;      Totals:         6       0       0       0       0       0       0
  3490 ;;Total ram usage:        6 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; Hardware stack levels required when called:    3
  3493 ;; This function calls:
  3494 ;;		_Busy_eep
  3495 ;;		_Write_b_eep
  3496 ;;		_Read_b_eep
  3497 ;; This function is called by:
  3498 ;;		_doDM
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           	psect	text10
  3503  00362E                     __ptext10:
  3504                           	opt stack 0
  3505  00362E                     _doActionDisable:
  3506                           	opt stack 26
  3507                           
  3508                           ; BSR set to: 0
  3509                           ;incstack = 0
  3510                           ;incstack = 0
  3511                           ;doActionDisable@dmflags stored from wreg
  3512  00362E  CFE8 F010          	movff	wreg,doActionDisable@dmflags
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;main.c: 2135: unsigned char i;
  3516                           ;main.c: 2136: unsigned char val;
  3517                           ;main.c: 2138: for ( i = 0; i < 8; i++ ) {
  3518  003632  6A11               	clrf	doActionDisable@i,c
  3519  003634                     l9283:
  3520                           
  3521                           ;main.c: 2141: if ( !( arg & (1 << i) ) ) continue;
  3522  003634  C011  F00D         	movff	doActionDisable@i,??_doActionDisable
  3523  003638  0E01               	movlw	1
  3524  00363A  6E0E               	movwf	(??_doActionDisable+1)& (0+255),c
  3525  00363C  2A0D               	incf	??_doActionDisable,f,c
  3526  00363E  D002               	goto	u10584
  3527  003640                     u10585:
  3528  003640  90D8               	bcf	status,0,c
  3529  003642  360E               	rlcf	??_doActionDisable+1,f,c
  3530  003644                     u10584:
  3531  003644  2E0D               	decfsz	??_doActionDisable,f,c
  3532  003646  D7FC               	goto	u10585
  3533  003648  500E               	movf	??_doActionDisable+1,w,c
  3534  00364A  140C               	andwf	doActionDisable@arg,w,c
  3535  00364C  E030               	bz	l9301
  3536                           
  3537                           ;main.c: 2144: if ( dmflags & 0x10 ) {
  3538  00364E  A810               	btfss	doActionDisable@dmflags,4,c
  3539  003650  D00B               	goto	l541
  3540                           
  3541                           ;main.c: 2145: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 52 + i) ) {
  3542  003652  0E77               	movlw	119
  3543  003654  2411               	addwf	doActionDisable@i,w,c
  3544  003656  6E08               	movwf	?_Read_b_eep,c
  3545  003658  6A09               	clrf	?_Read_b_eep+1,c
  3546  00365A  0E00               	movlw	0
  3547  00365C  2209               	addwfc	?_Read_b_eep+1,f,c
  3548  00365E  EC76  F01E         	call	_Read_b_eep	;wreg free
  3549  003662  0100               	movlb	0	; () banked
  3550  003664  199C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3551  003666  E123               	bnz	l9301
  3552  003668                     l541:
  3553                           
  3554                           ;main.c: 2148: }
  3555                           ;main.c: 2149: }
  3556                           ;main.c: 2152: if ( dmflags & 0x08 ) {
  3557  003668  A610               	btfss	doActionDisable@dmflags,3,c
  3558  00366A  D00B               	goto	l9295
  3559                           
  3560                           ;main.c: 2153: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 53 + i) ) {
  3561  00366C  0E78               	movlw	120
  3562  00366E  2411               	addwf	doActionDisable@i,w,c
  3563  003670  6E08               	movwf	?_Read_b_eep,c
  3564  003672  6A09               	clrf	?_Read_b_eep+1,c
  3565  003674  0E00               	movlw	0
  3566  003676  2209               	addwfc	?_Read_b_eep+1,f,c
  3567  003678  EC76  F01E         	call	_Read_b_eep	;wreg free
  3568  00367C  0100               	movlb	0	; () banked
  3569  00367E  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3570  003680  E116               	bnz	l9301
  3571  003682                     l9295:
  3572                           
  3573                           ;main.c: 2156: }
  3574                           ;main.c: 2157: }
  3575                           ;main.c: 2159: val = Read_b_eep(0x43 + 10 + i);
  3576  003682  0E4D               	movlw	77
  3577  003684  2411               	addwf	doActionDisable@i,w,c
  3578  003686  6E08               	movwf	?_Read_b_eep,c
  3579  003688  6A09               	clrf	?_Read_b_eep+1,c
  3580  00368A  0E00               	movlw	0
  3581  00368C  2209               	addwfc	?_Read_b_eep+1,f,c
  3582  00368E  EC76  F01E         	call	_Read_b_eep	;wreg free
  3583  003692  6E0F               	movwf	doActionDisable@val,c
  3584                           
  3585                           ;main.c: 2160: (Busy_eep(), Write_b_eep(0x43 + 10 + i,val & ~0x80));
  3586  003694  ECAA  F01E         	call	_Busy_eep	;wreg free
  3587  003698  0E4D               	movlw	77
  3588  00369A  2411               	addwf	doActionDisable@i,w,c
  3589  00369C  6E08               	movwf	?_Write_b_eep,c
  3590  00369E  6A09               	clrf	?_Write_b_eep+1,c
  3591  0036A0  0E00               	movlw	0
  3592  0036A2  2209               	addwfc	?_Write_b_eep+1,f,c
  3593  0036A4  500F               	movf	doActionDisable@val,w,c
  3594  0036A6  0B7F               	andlw	127
  3595  0036A8  6E0A               	movwf	?_Write_b_eep+2,c
  3596  0036AA  EC90  F01C         	call	_Write_b_eep	;wreg free
  3597  0036AE                     l9301:
  3598  0036AE  2A11               	incf	doActionDisable@i,f,c
  3599  0036B0  0E07               	movlw	7
  3600  0036B2  6411               	cpfsgt	doActionDisable@i,c
  3601  0036B4  D7BF               	goto	l9283
  3602  0036B6  0C07               	retlw	7
  3603  0036B8                     __end_of_doActionDisable:
  3604                           	opt stack 0
  3605                           tblptru	equ	0xFF8
  3606                           tblptrh	equ	0xFF7
  3607                           tblptrl	equ	0xFF6
  3608                           tablat	equ	0xFF5
  3609                           prodh	equ	0xFF4
  3610                           prodl	equ	0xFF3
  3611                           intcon	equ	0xFF2
  3612                           postinc0	equ	0xFEE
  3613                           wreg	equ	0xFE8
  3614                           indf1	equ	0xFE7
  3615                           fsr1h	equ	0xFE2
  3616                           fsr1l	equ	0xFE1
  3617                           indf2	equ	0xFDF
  3618                           postinc2	equ	0xFDE
  3619                           postdec2	equ	0xFDD
  3620                           plusw2	equ	0xFDB
  3621                           fsr2h	equ	0xFDA
  3622                           fsr2l	equ	0xFD9
  3623                           status	equ	0xFD8
  3624                           
  3625 ;; *************** function _doActionStatus *****************
  3626 ;; Defined at:
  3627 ;;		line 2037 in file "../main.c"
  3628 ;; Parameters:    Size  Location     Type
  3629 ;;  dmflags         1    wreg     unsigned char 
  3630 ;;  arg             1   80[COMRAM] unsigned char 
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3633 ;;  i               1   27[BANK0 ] unsigned char 
  3634 ;;  val             1   26[BANK0 ] unsigned char 
  3635 ;;  bOn             1   25[BANK0 ] enum E15660
  3636 ;; Return value:  Size  Location     Type
  3637 ;;		None               void
  3638 ;; Registers used:
  3639 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3640 ;; Tracked objects:
  3641 ;;		On entry : F/0
  3642 ;;		On exit  : F/0
  3643 ;;		Unchanged: 0/0
  3644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3645 ;;      Params:         1       0       0       0       0       0       0
  3646 ;;      Locals:         0       4       0       0       0       0       0
  3647 ;;      Temps:          0       2       0       0       0       0       0
  3648 ;;      Totals:         1       6       0       0       0       0       0
  3649 ;;Total ram usage:        7 bytes
  3650 ;; Hardware stack levels used:    1
  3651 ;; Hardware stack levels required when called:    7
  3652 ;; This function calls:
  3653 ;;		_Read_b_eep
  3654 ;;		_SendInformationEvent
  3655 ;; This function is called by:
  3656 ;;		_doDM
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           	psect	text11
  3661  002C58                     __ptext11:
  3662                           	opt stack 0
  3663  002C58                     _doActionStatus:
  3664                           	opt stack 22
  3665                           
  3666                           ;incstack = 0
  3667                           ;incstack = 0
  3668                           ;doActionStatus@dmflags stored from wreg
  3669  002C58  CFE8 F0C8          	movff	wreg,doActionStatus@dmflags
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;main.c: 2039: unsigned char i;
  3673                           ;main.c: 2040: unsigned char val;
  3674                           ;main.c: 2041: BOOL bOn = 0;
  3675  002C5C  6BC9               	clrf	doActionStatus@bOn& (0+255),b
  3676                           
  3677                           ;main.c: 2043: for (i = 0; i < 8; i++) {
  3678  002C5E  6BCB               	clrf	doActionStatus@i& (0+255),b
  3679  002C60                     l10997:
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;main.c: 2046: if (!(arg & (1 << i))) continue;
  3683  002C60  C0CB  F0C6         	movff	doActionStatus@i,??_doActionStatus
  3684  002C64  0E01               	movlw	1
  3685  002C66  6FC7               	movwf	(??_doActionStatus+1)& (0+255),b
  3686  002C68  2BC6               	incf	??_doActionStatus& (0+255),f,b
  3687  002C6A  D002               	goto	u13364
  3688  002C6C                     u13365:
  3689  002C6C  90D8               	bcf	status,0,c
  3690  002C6E  37C7               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3691  002C70                     u13364:
  3692  002C70  2FC6               	decfsz	??_doActionStatus& (0+255),f,b
  3693  002C72  D7FC               	goto	u13365
  3694  002C74  51C7               	movf	(??_doActionStatus+1)& (0+255),w,b
  3695  002C76  1451               	andwf	doActionStatus@arg,w,c
  3696  002C78  E07D               	bz	l11045
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;main.c: 2049: if ( dmflags & 0x10 ) {
  3700  002C7A  A9C8               	btfss	doActionStatus@dmflags& (0+255),4,b
  3701  002C7C  D00B               	goto	l515
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;main.c: 2050: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 52 + i) ) {
  3705  002C7E  0E77               	movlw	119
  3706  002C80  25CB               	addwf	doActionStatus@i& (0+255),w,b
  3707  002C82  6E08               	movwf	?_Read_b_eep,c
  3708  002C84  6A09               	clrf	?_Read_b_eep+1,c
  3709  002C86  0E00               	movlw	0
  3710  002C88  2209               	addwfc	?_Read_b_eep+1,f,c
  3711  002C8A  EC76  F01E         	call	_Read_b_eep	;wreg free
  3712  002C8E  0100               	movlb	0	; () banked
  3713  002C90  199C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3714  002C92  E170               	bnz	l11045
  3715  002C94                     l515:
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;main.c: 2053: }
  3719                           ;main.c: 2054: }
  3720                           ;main.c: 2057: if ( dmflags & 0x08 ) {
  3721  002C94  A7C8               	btfss	doActionStatus@dmflags& (0+255),3,b
  3722  002C96  D00B               	goto	l11009
  3723                           
  3724                           ; BSR set to: 0
  3725                           ;main.c: 2058: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 53 + i) ) {
  3726  002C98  0E78               	movlw	120
  3727  002C9A  25CB               	addwf	doActionStatus@i& (0+255),w,b
  3728  002C9C  6E08               	movwf	?_Read_b_eep,c
  3729  002C9E  6A09               	clrf	?_Read_b_eep+1,c
  3730  002CA0  0E00               	movlw	0
  3731  002CA2  2209               	addwfc	?_Read_b_eep+1,f,c
  3732  002CA4  EC76  F01E         	call	_Read_b_eep	;wreg free
  3733  002CA8  0100               	movlb	0	; () banked
  3734  002CAA  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3735  002CAC  E163               	bnz	l11045
  3736  002CAE                     l11009:
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;main.c: 2061: }
  3740                           ;main.c: 2062: }
  3741                           ;main.c: 2064: val = Read_b_eep(0x43 + 10 + i);
  3742  002CAE  0E4D               	movlw	77
  3743  002CB0  25CB               	addwf	doActionStatus@i& (0+255),w,b
  3744  002CB2  6E08               	movwf	?_Read_b_eep,c
  3745  002CB4  6A09               	clrf	?_Read_b_eep+1,c
  3746  002CB6  0E00               	movlw	0
  3747  002CB8  2209               	addwfc	?_Read_b_eep+1,f,c
  3748  002CBA  EC76  F01E         	call	_Read_b_eep	;wreg free
  3749  002CBE  0100               	movlb	0	; () banked
  3750  002CC0  6FCA               	movwf	doActionStatus@val& (0+255),b
  3751                           
  3752                           ;main.c: 2066: switch (i) {
  3753  002CC2  D023               	goto	l11027
  3754  002CC4                     l11011:
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;main.c: 2069: bOn = LATBbits.LATB4;
  3758  002CC4  0E00               	movlw	0
  3759  002CC6  B88A               	btfsc	3978,4,c	;volatile
  3760  002CC8  0E01               	movlw	1
  3761  002CCA  6FC9               	movwf	doActionStatus@bOn& (0+255),b
  3762                           
  3763                           ;main.c: 2070: break;
  3764  002CCC  D02C               	goto	l11029
  3765  002CCE                     l11013:
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;main.c: 2073: bOn = LATBbits.LATB1;
  3769  002CCE  0E00               	movlw	0
  3770  002CD0  B28A               	btfsc	3978,1,c	;volatile
  3771  002CD2  0E01               	movlw	1
  3772  002CD4  6FC9               	movwf	doActionStatus@bOn& (0+255),b
  3773                           
  3774                           ;main.c: 2074: break;
  3775  002CD6  D027               	goto	l11029
  3776  002CD8                     l11015:
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;main.c: 2077: bOn = LATBbits.LATB0;
  3780  002CD8  0E00               	movlw	0
  3781  002CDA  B08A               	btfsc	3978,0,c	;volatile
  3782  002CDC  0E01               	movlw	1
  3783  002CDE  6FC9               	movwf	doActionStatus@bOn& (0+255),b
  3784                           
  3785                           ;main.c: 2078: break;
  3786  002CE0  D022               	goto	l11029
  3787  002CE2                     l11017:
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;main.c: 2081: bOn = LATCbits.LATC7;
  3791  002CE2  0E00               	movlw	0
  3792  002CE4  BE8B               	btfsc	3979,7,c	;volatile
  3793  002CE6  0E01               	movlw	1
  3794  002CE8  6FC9               	movwf	doActionStatus@bOn& (0+255),b
  3795                           
  3796                           ;main.c: 2082: break;
  3797  002CEA  D01D               	goto	l11029
  3798  002CEC                     l11019:
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;main.c: 2085: bOn = LATCbits.LATC6;
  3802  002CEC  0E00               	movlw	0
  3803  002CEE  BC8B               	btfsc	3979,6,c	;volatile
  3804  002CF0  0E01               	movlw	1
  3805  002CF2  6FC9               	movwf	doActionStatus@bOn& (0+255),b
  3806                           
  3807                           ;main.c: 2086: break;
  3808  002CF4  D018               	goto	l11029
  3809  002CF6                     l11021:
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;main.c: 2089: bOn = LATCbits.LATC5;
  3813  002CF6  0E00               	movlw	0
  3814  002CF8  BA8B               	btfsc	3979,5,c	;volatile
  3815  002CFA  0E01               	movlw	1
  3816  002CFC  6FC9               	movwf	doActionStatus@bOn& (0+255),b
  3817                           
  3818                           ;main.c: 2090: break;
  3819  002CFE  D013               	goto	l11029
  3820  002D00                     l11023:
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;main.c: 2093: bOn = LATCbits.LATC4;
  3824  002D00  0E00               	movlw	0
  3825  002D02  B88B               	btfsc	3979,4,c	;volatile
  3826  002D04  0E01               	movlw	1
  3827  002D06  6FC9               	movwf	doActionStatus@bOn& (0+255),b
  3828                           
  3829                           ;main.c: 2094: break;
  3830  002D08  D00E               	goto	l11029
  3831  002D0A                     l11027:
  3832                           
  3833                           ; BSR set to: 0
  3834  002D0A  51CB               	movf	doActionStatus@i& (0+255),w,b
  3835                           
  3836                           ; Switch size 1, requested type "space"
  3837                           ; Number of cases is 7, Range of values is 0 to 6
  3838                           ; switch strategies available:
  3839                           ; Name         Instructions Cycles
  3840                           ; simple_byte           22    12 (average)
  3841                           ;	Chosen strategy is simple_byte
  3842  002D0C  E0DB               	bz	l11011
  3843  002D0E  0A01               	xorlw	1	; case 1
  3844  002D10  E0DE               	bz	l11013
  3845  002D12  0A03               	xorlw	3	; case 2
  3846  002D14  E0E1               	bz	l11015
  3847  002D16  0A01               	xorlw	1	; case 3
  3848  002D18  E0E4               	bz	l11017
  3849  002D1A  0A07               	xorlw	7	; case 4
  3850  002D1C  E0E7               	bz	l11019
  3851  002D1E  0A01               	xorlw	1	; case 5
  3852  002D20  E0EA               	bz	l11021
  3853  002D22  0A03               	xorlw	3	; case 6
  3854  002D24  E0ED               	bz	l11023
  3855  002D26                     l11029:
  3856                           
  3857                           ; BSR set to: 0
  3858                           ;main.c: 2098: if (bOn) {
  3859  002D26  51C9               	movf	doActionStatus@bOn& (0+255),w,b
  3860  002D28  E013               	bz	l528
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;main.c: 2101: if ( val & 0x10 ) {
  3864  002D2A  A9CA               	btfss	doActionStatus@val& (0+255),4,b
  3865  002D2C  D007               	goto	l11035
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;main.c: 2102: SendInformationEvent( i, 20, 4 );
  3869  002D2E  0E14               	movlw	20
  3870  002D30  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  3871  002D32  0E04               	movlw	4
  3872  002D34  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3873  002D36  51CB               	movf	doActionStatus@i& (0+255),w,b
  3874  002D38  ECD3  F01B         	call	_SendInformationEvent
  3875  002D3C                     l11035:
  3876                           
  3877                           ; BSR set to: 0
  3878                           ;main.c: 2103: }
  3879                           ;main.c: 2106: if ( val & 0x40 ) {
  3880  002D3C  ADCA               	btfss	doActionStatus@val& (0+255),6,b
  3881  002D3E  D01A               	goto	l11045
  3882                           
  3883                           ; BSR set to: 0
  3884                           ;main.c: 2107: SendInformationEvent( i, 20, 24 );
  3885  002D40  0E14               	movlw	20
  3886  002D42  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  3887  002D44  0E18               	movlw	24
  3888  002D46  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3889  002D48  51CB               	movf	doActionStatus@i& (0+255),w,b
  3890  002D4A  ECD3  F01B         	call	_SendInformationEvent
  3891  002D4E  D012               	goto	l11045
  3892  002D50                     l528:
  3893                           
  3894                           ; BSR set to: 0
  3895                           ;main.c: 2111: else {
  3896                           ;main.c: 2114: if ( val & 0x10 ) {
  3897  002D50  A9CA               	btfss	doActionStatus@val& (0+255),4,b
  3898  002D52  D007               	goto	l11041
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;main.c: 2115: SendInformationEvent( i, 20, 4 );
  3902  002D54  0E14               	movlw	20
  3903  002D56  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  3904  002D58  0E04               	movlw	4
  3905  002D5A  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3906  002D5C  51CB               	movf	doActionStatus@i& (0+255),w,b
  3907  002D5E  ECD3  F01B         	call	_SendInformationEvent
  3908  002D62                     l11041:
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;main.c: 2116: }
  3912                           ;main.c: 2119: if ( val & 0x40 ) {
  3913  002D62  ADCA               	btfss	doActionStatus@val& (0+255),6,b
  3914  002D64  D007               	goto	l11045
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;main.c: 2120: SendInformationEvent( i, 20, 24 );
  3918  002D66  0E14               	movlw	20
  3919  002D68  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  3920  002D6A  0E18               	movlw	24
  3921  002D6C  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3922  002D6E  51CB               	movf	doActionStatus@i& (0+255),w,b
  3923  002D70  ECD3  F01B         	call	_SendInformationEvent
  3924  002D74                     l11045:
  3925                           
  3926                           ; BSR set to: 0
  3927  002D74  2BCB               	incf	doActionStatus@i& (0+255),f,b
  3928                           
  3929                           ; BSR set to: 0
  3930  002D76  0E07               	movlw	7
  3931  002D78  65CB               	cpfsgt	doActionStatus@i& (0+255),b
  3932  002D7A  D772               	goto	l10997
  3933                           
  3934                           ; BSR set to: 0
  3935  002D7C  0C07               	retlw	7
  3936  002D7E                     __end_of_doActionStatus:
  3937                           	opt stack 0
  3938                           tblptru	equ	0xFF8
  3939                           tblptrh	equ	0xFF7
  3940                           tblptrl	equ	0xFF6
  3941                           tablat	equ	0xFF5
  3942                           prodh	equ	0xFF4
  3943                           prodl	equ	0xFF3
  3944                           intcon	equ	0xFF2
  3945                           postinc0	equ	0xFEE
  3946                           wreg	equ	0xFE8
  3947                           indf1	equ	0xFE7
  3948                           fsr1h	equ	0xFE2
  3949                           fsr1l	equ	0xFE1
  3950                           indf2	equ	0xFDF
  3951                           postinc2	equ	0xFDE
  3952                           postdec2	equ	0xFDD
  3953                           plusw2	equ	0xFDB
  3954                           fsr2h	equ	0xFDA
  3955                           fsr2l	equ	0xFD9
  3956                           status	equ	0xFD8
  3957                           
  3958 ;; *************** function _doActionPulse *****************
  3959 ;; Defined at:
  3960 ;;		line 1939 in file "../main.c"
  3961 ;; Parameters:    Size  Location     Type
  3962 ;;  dmflags         1    wreg     unsigned char 
  3963 ;;  arg             1    9[COMRAM] unsigned char 
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;  dmflags         1   14[COMRAM] unsigned char 
  3966 ;;  i               1   15[COMRAM] unsigned char 
  3967 ;;  val             1   13[COMRAM] unsigned char 
  3968 ;; Return value:  Size  Location     Type
  3969 ;;		None               void
  3970 ;; Registers used:
  3971 ;;		wreg, status,2, status,0, cstack
  3972 ;; Tracked objects:
  3973 ;;		On entry : F/0
  3974 ;;		On exit  : 0/0
  3975 ;;		Unchanged: 0/0
  3976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3977 ;;      Params:         1       0       0       0       0       0       0
  3978 ;;      Locals:         3       0       0       0       0       0       0
  3979 ;;      Temps:          3       0       0       0       0       0       0
  3980 ;;      Totals:         7       0       0       0       0       0       0
  3981 ;;Total ram usage:        7 bytes
  3982 ;; Hardware stack levels used:    1
  3983 ;; Hardware stack levels required when called:    3
  3984 ;; This function calls:
  3985 ;;		_Read_b_eep
  3986 ;; This function is called by:
  3987 ;;		_doDM
  3988 ;; This function uses a non-reentrant model
  3989 ;;
  3990                           
  3991                           	psect	text12
  3992  002628                     __ptext12:
  3993                           	opt stack 0
  3994  002628                     _doActionPulse:
  3995                           	opt stack 26
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;incstack = 0
  3999                           ;incstack = 0
  4000                           ;doActionPulse@dmflags stored from wreg
  4001  002628  CFE8 F00F          	movff	wreg,doActionPulse@dmflags
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;main.c: 1941: unsigned char i;
  4005                           ;main.c: 1942: unsigned char val;
  4006                           ;main.c: 1944: for ( i = 0; i < 8; i++ ) {
  4007  00262C  6A10               	clrf	doActionPulse@i,c
  4008  00262E                     l9165:
  4009                           
  4010                           ;main.c: 1947: if ( !( arg & ( 1 << i ) ) ) continue;
  4011  00262E  C010  F00B         	movff	doActionPulse@i,??_doActionPulse
  4012  002632  0E01               	movlw	1
  4013  002634  6E0C               	movwf	(??_doActionPulse+1)& (0+255),c
  4014  002636  2A0B               	incf	??_doActionPulse,f,c
  4015  002638  D002               	goto	u10384
  4016  00263A                     u10385:
  4017  00263A  90D8               	bcf	status,0,c
  4018  00263C  360C               	rlcf	??_doActionPulse+1,f,c
  4019  00263E                     u10384:
  4020  00263E  2E0B               	decfsz	??_doActionPulse,f,c
  4021  002640  D7FC               	goto	u10385
  4022  002642  500C               	movf	??_doActionPulse+1,w,c
  4023  002644  140A               	andwf	doActionPulse@arg,w,c
  4024  002646  E101 D0E0          	bz	l9215
  4025                           
  4026                           ;main.c: 1950: if ( dmflags & 0x10 ) {
  4027  00264A  A80F               	btfss	doActionPulse@dmflags,4,c
  4028  00264C  D00C               	goto	l494
  4029                           
  4030                           ;main.c: 1951: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 52 + i) ) {
  4031  00264E  0E77               	movlw	119
  4032  002650  2410               	addwf	doActionPulse@i,w,c
  4033  002652  6E08               	movwf	?_Read_b_eep,c
  4034  002654  6A09               	clrf	?_Read_b_eep+1,c
  4035  002656  0E00               	movlw	0
  4036  002658  2209               	addwfc	?_Read_b_eep+1,f,c
  4037  00265A  EC76  F01E         	call	_Read_b_eep	;wreg free
  4038  00265E  0100               	movlb	0	; () banked
  4039  002660  199C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  4040  002662  E001 D0D2          	bnz	l9215
  4041  002666                     l494:
  4042                           
  4043                           ;main.c: 1954: }
  4044                           ;main.c: 1955: }
  4045                           ;main.c: 1958: if ( dmflags & 0x08 ) {
  4046  002666  A60F               	btfss	doActionPulse@dmflags,3,c
  4047  002668  D00C               	goto	l9177
  4048                           
  4049                           ;main.c: 1959: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 53 + i) ) {
  4050  00266A  0E78               	movlw	120
  4051  00266C  2410               	addwf	doActionPulse@i,w,c
  4052  00266E  6E08               	movwf	?_Read_b_eep,c
  4053  002670  6A09               	clrf	?_Read_b_eep+1,c
  4054  002672  0E00               	movlw	0
  4055  002674  2209               	addwfc	?_Read_b_eep+1,f,c
  4056  002676  EC76  F01E         	call	_Read_b_eep	;wreg free
  4057  00267A  0100               	movlb	0	; () banked
  4058  00267C  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4059  00267E  E001 D0C4          	bnz	l9215
  4060  002682                     l9177:
  4061                           
  4062                           ;main.c: 1962: }
  4063                           ;main.c: 1963: }
  4064                           ;main.c: 1965: val = Read_b_eep(0x43 + 10 + i);
  4065  002682  0E4D               	movlw	77
  4066  002684  2410               	addwf	doActionPulse@i,w,c
  4067  002686  6E08               	movwf	?_Read_b_eep,c
  4068  002688  6A09               	clrf	?_Read_b_eep+1,c
  4069  00268A  0E00               	movlw	0
  4070  00268C  2209               	addwfc	?_Read_b_eep+1,f,c
  4071  00268E  EC76  F01E         	call	_Read_b_eep	;wreg free
  4072  002692  6E0E               	movwf	doActionPulse@val,c
  4073                           
  4074                           ;main.c: 1968: if ( !( val & 0x80 ) ) continue;
  4075  002694  AE0E               	btfss	doActionPulse@val,7,c
  4076  002696  D0B9               	goto	l9215
  4077  002698  D0A8               	goto	l9213
  4078  00269A                     l500:
  4079                           
  4080                           ;main.c: 1973: LATBbits.LATB4 = 0;
  4081  00269A  988A               	bcf	3978,4,c	;volatile
  4082                           
  4083                           ;main.c: 1974: relay_pulse_flags |= 0x01;
  4084  00269C  0100               	movlb	0	; () banked
  4085  00269E  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  4086                           
  4087                           ; BSR set to: 0
  4088                           ;main.c: 1975: relay_pulse_timer[ 0 ] =
  4089                           ;main.c: 1976: Read_b_eep(0x43 + 18) * 256 +
  4090                           ;main.c: 1977: Read_b_eep(0x43 + 19);
  4091  0026A0  6A09               	clrf	?_Read_b_eep+1,c
  4092  0026A2  0E56               	movlw	86
  4093  0026A4  6E08               	movwf	?_Read_b_eep,c
  4094  0026A6  EC76  F01E         	call	_Read_b_eep	;wreg free
  4095  0026AA  6E0B               	movwf	??_doActionPulse& (0+255),c
  4096  0026AC  6A09               	clrf	?_Read_b_eep+1,c
  4097  0026AE  0E55               	movlw	85
  4098  0026B0  6E08               	movwf	?_Read_b_eep,c
  4099  0026B2  EC76  F01E         	call	_Read_b_eep	;wreg free
  4100  0026B6  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4101  0026B8  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4102  0026BA  500B               	movf	??_doActionPulse,w,c
  4103  0026BC  240C               	addwf	??_doActionPulse+1,w,c
  4104  0026BE  0100               	movlb	0	; () banked
  4105  0026C0  6F70               	movwf	_relay_pulse_timer& (0+255),b
  4106  0026C2  0E00               	movlw	0
  4107  0026C4  200D               	addwfc	??_doActionPulse+2,w,c
  4108  0026C6  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  4109                           
  4110                           ;main.c: 1978: break;
  4111  0026C8  D0A0               	goto	l9215
  4112  0026CA                     l502:
  4113                           
  4114                           ;main.c: 1981: LATBbits.LATB1 = 0;
  4115  0026CA  928A               	bcf	3978,1,c	;volatile
  4116                           
  4117                           ;main.c: 1982: relay_pulse_flags |= 0x02;
  4118  0026CC  0100               	movlb	0	; () banked
  4119  0026CE  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  4120                           
  4121                           ; BSR set to: 0
  4122                           ;main.c: 1983: relay_pulse_timer[ 1 ] =
  4123                           ;main.c: 1984: Read_b_eep(0x43 + 20) * 256 +
  4124                           ;main.c: 1985: Read_b_eep(0x43 + 21);
  4125  0026D0  6A09               	clrf	?_Read_b_eep+1,c
  4126  0026D2  0E58               	movlw	88
  4127  0026D4  6E08               	movwf	?_Read_b_eep,c
  4128  0026D6  EC76  F01E         	call	_Read_b_eep	;wreg free
  4129  0026DA  6E0B               	movwf	??_doActionPulse& (0+255),c
  4130  0026DC  6A09               	clrf	?_Read_b_eep+1,c
  4131  0026DE  0E57               	movlw	87
  4132  0026E0  6E08               	movwf	?_Read_b_eep,c
  4133  0026E2  EC76  F01E         	call	_Read_b_eep	;wreg free
  4134  0026E6  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4135  0026E8  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4136  0026EA  500B               	movf	??_doActionPulse,w,c
  4137  0026EC  240C               	addwf	??_doActionPulse+1,w,c
  4138  0026EE  0100               	movlb	0	; () banked
  4139  0026F0  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  4140  0026F2  0E00               	movlw	0
  4141  0026F4  200D               	addwfc	??_doActionPulse+2,w,c
  4142  0026F6  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  4143                           
  4144                           ;main.c: 1986: break;
  4145  0026F8  D088               	goto	l9215
  4146  0026FA                     l503:
  4147                           
  4148                           ;main.c: 1989: LATBbits.LATB0 = 0;
  4149  0026FA  908A               	bcf	3978,0,c	;volatile
  4150                           
  4151                           ;main.c: 1990: relay_pulse_flags |= 0x04;
  4152  0026FC  0100               	movlb	0	; () banked
  4153  0026FE  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;main.c: 1991: relay_pulse_timer[ 2 ] =
  4157                           ;main.c: 1992: Read_b_eep(0x43 + 22) * 256 +
  4158                           ;main.c: 1993: Read_b_eep(0x43 + 23);
  4159  002700  6A09               	clrf	?_Read_b_eep+1,c
  4160  002702  0E5A               	movlw	90
  4161  002704  6E08               	movwf	?_Read_b_eep,c
  4162  002706  EC76  F01E         	call	_Read_b_eep	;wreg free
  4163  00270A  6E0B               	movwf	??_doActionPulse& (0+255),c
  4164  00270C  6A09               	clrf	?_Read_b_eep+1,c
  4165  00270E  0E59               	movlw	89
  4166  002710  6E08               	movwf	?_Read_b_eep,c
  4167  002712  EC76  F01E         	call	_Read_b_eep	;wreg free
  4168  002716  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4169  002718  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4170  00271A  500B               	movf	??_doActionPulse,w,c
  4171  00271C  240C               	addwf	??_doActionPulse+1,w,c
  4172  00271E  0100               	movlb	0	; () banked
  4173  002720  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  4174  002722  0E00               	movlw	0
  4175  002724  200D               	addwfc	??_doActionPulse+2,w,c
  4176  002726  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  4177                           
  4178                           ;main.c: 1994: break;
  4179  002728  D070               	goto	l9215
  4180  00272A                     l504:
  4181                           
  4182                           ;main.c: 1997: LATCbits.LATC7 = 0;
  4183  00272A  9E8B               	bcf	3979,7,c	;volatile
  4184                           
  4185                           ;main.c: 1998: relay_pulse_flags |= 0x08;
  4186  00272C  0100               	movlb	0	; () banked
  4187  00272E  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  4188                           
  4189                           ; BSR set to: 0
  4190                           ;main.c: 1999: relay_pulse_timer[ 3 ] =
  4191                           ;main.c: 2000: Read_b_eep(0x43 + 24) * 256 +
  4192                           ;main.c: 2001: Read_b_eep(0x43 + 25);
  4193  002730  6A09               	clrf	?_Read_b_eep+1,c
  4194  002732  0E5C               	movlw	92
  4195  002734  6E08               	movwf	?_Read_b_eep,c
  4196  002736  EC76  F01E         	call	_Read_b_eep	;wreg free
  4197  00273A  6E0B               	movwf	??_doActionPulse& (0+255),c
  4198  00273C  6A09               	clrf	?_Read_b_eep+1,c
  4199  00273E  0E5B               	movlw	91
  4200  002740  6E08               	movwf	?_Read_b_eep,c
  4201  002742  EC76  F01E         	call	_Read_b_eep	;wreg free
  4202  002746  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4203  002748  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4204  00274A  500B               	movf	??_doActionPulse,w,c
  4205  00274C  240C               	addwf	??_doActionPulse+1,w,c
  4206  00274E  0100               	movlb	0	; () banked
  4207  002750  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  4208  002752  0E00               	movlw	0
  4209  002754  200D               	addwfc	??_doActionPulse+2,w,c
  4210  002756  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  4211                           
  4212                           ;main.c: 2002: break;
  4213  002758  D058               	goto	l9215
  4214  00275A                     l505:
  4215                           
  4216                           ;main.c: 2005: LATCbits.LATC6 = 0;
  4217  00275A  9C8B               	bcf	3979,6,c	;volatile
  4218                           
  4219                           ;main.c: 2006: relay_pulse_flags |= 0x10;
  4220  00275C  0100               	movlb	0	; () banked
  4221  00275E  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;main.c: 2007: relay_pulse_timer[ 4 ] =
  4225                           ;main.c: 2008: Read_b_eep(0x43 + 26) * 256 +
  4226                           ;main.c: 2009: Read_b_eep(0x43 + 27);
  4227  002760  6A09               	clrf	?_Read_b_eep+1,c
  4228  002762  0E5E               	movlw	94
  4229  002764  6E08               	movwf	?_Read_b_eep,c
  4230  002766  EC76  F01E         	call	_Read_b_eep	;wreg free
  4231  00276A  6E0B               	movwf	??_doActionPulse& (0+255),c
  4232  00276C  6A09               	clrf	?_Read_b_eep+1,c
  4233  00276E  0E5D               	movlw	93
  4234  002770  6E08               	movwf	?_Read_b_eep,c
  4235  002772  EC76  F01E         	call	_Read_b_eep	;wreg free
  4236  002776  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4237  002778  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4238  00277A  500B               	movf	??_doActionPulse,w,c
  4239  00277C  240C               	addwf	??_doActionPulse+1,w,c
  4240  00277E  0100               	movlb	0	; () banked
  4241  002780  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  4242  002782  0E00               	movlw	0
  4243  002784  200D               	addwfc	??_doActionPulse+2,w,c
  4244  002786  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  4245                           
  4246                           ;main.c: 2010: break;
  4247  002788  D040               	goto	l9215
  4248  00278A                     l506:
  4249                           
  4250                           ;main.c: 2013: LATCbits.LATC5 = 0;
  4251  00278A  9A8B               	bcf	3979,5,c	;volatile
  4252                           
  4253                           ;main.c: 2014: relay_pulse_flags |= 0x20;
  4254  00278C  0100               	movlb	0	; () banked
  4255  00278E  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  4256                           
  4257                           ; BSR set to: 0
  4258                           ;main.c: 2015: relay_pulse_timer[ 5 ] =
  4259                           ;main.c: 2016: Read_b_eep(0x43 + 28) * 256 +
  4260                           ;main.c: 2017: Read_b_eep(0x43 + 29);
  4261  002790  6A09               	clrf	?_Read_b_eep+1,c
  4262  002792  0E60               	movlw	96
  4263  002794  6E08               	movwf	?_Read_b_eep,c
  4264  002796  EC76  F01E         	call	_Read_b_eep	;wreg free
  4265  00279A  6E0B               	movwf	??_doActionPulse& (0+255),c
  4266  00279C  6A09               	clrf	?_Read_b_eep+1,c
  4267  00279E  0E5F               	movlw	95
  4268  0027A0  6E08               	movwf	?_Read_b_eep,c
  4269  0027A2  EC76  F01E         	call	_Read_b_eep	;wreg free
  4270  0027A6  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4271  0027A8  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4272  0027AA  500B               	movf	??_doActionPulse,w,c
  4273  0027AC  240C               	addwf	??_doActionPulse+1,w,c
  4274  0027AE  0100               	movlb	0	; () banked
  4275  0027B0  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  4276  0027B2  0E00               	movlw	0
  4277  0027B4  200D               	addwfc	??_doActionPulse+2,w,c
  4278  0027B6  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  4279                           
  4280                           ;main.c: 2018: break;
  4281  0027B8  D028               	goto	l9215
  4282  0027BA                     l507:
  4283                           
  4284                           ;main.c: 2021: LATCbits.LATC4 = 0;
  4285  0027BA  988B               	bcf	3979,4,c	;volatile
  4286                           
  4287                           ;main.c: 2022: relay_pulse_flags |= 0x40;
  4288  0027BC  0100               	movlb	0	; () banked
  4289  0027BE  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;main.c: 2023: relay_pulse_timer[ 6 ] =
  4293                           ;main.c: 2024: Read_b_eep(0x43 + 30) * 256 +
  4294                           ;main.c: 2025: Read_b_eep(0x43 + 31);
  4295  0027C0  6A09               	clrf	?_Read_b_eep+1,c
  4296  0027C2  0E62               	movlw	98
  4297  0027C4  6E08               	movwf	?_Read_b_eep,c
  4298  0027C6  EC76  F01E         	call	_Read_b_eep	;wreg free
  4299  0027CA  6E0B               	movwf	??_doActionPulse& (0+255),c
  4300  0027CC  6A09               	clrf	?_Read_b_eep+1,c
  4301  0027CE  0E61               	movlw	97
  4302  0027D0  6E08               	movwf	?_Read_b_eep,c
  4303  0027D2  EC76  F01E         	call	_Read_b_eep	;wreg free
  4304  0027D6  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4305  0027D8  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4306  0027DA  500B               	movf	??_doActionPulse,w,c
  4307  0027DC  240C               	addwf	??_doActionPulse+1,w,c
  4308  0027DE  0100               	movlb	0	; () banked
  4309  0027E0  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  4310  0027E2  0E00               	movlw	0
  4311  0027E4  200D               	addwfc	??_doActionPulse+2,w,c
  4312  0027E6  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  4313                           
  4314                           ;main.c: 2026: break;
  4315  0027E8  D010               	goto	l9215
  4316  0027EA                     l9213:
  4317  0027EA  5010               	movf	doActionPulse@i,w,c
  4318                           
  4319                           ; Switch size 1, requested type "space"
  4320                           ; Number of cases is 7, Range of values is 0 to 6
  4321                           ; switch strategies available:
  4322                           ; Name         Instructions Cycles
  4323                           ; simple_byte           22    12 (average)
  4324                           ;	Chosen strategy is simple_byte
  4325  0027EC  E101 D755          	bz	l500
  4326  0027F0  0A01               	xorlw	1	; case 1
  4327  0027F2  E101 D76A          	bz	l502
  4328  0027F6  0A03               	xorlw	3	; case 2
  4329  0027F8  E080               	bz	l503
  4330  0027FA  0A01               	xorlw	1	; case 3
  4331  0027FC  E096               	bz	l504
  4332  0027FE  0A07               	xorlw	7	; case 4
  4333  002800  E0AC               	bz	l505
  4334  002802  0A01               	xorlw	1	; case 5
  4335  002804  E0C2               	bz	l506
  4336  002806  0A03               	xorlw	3	; case 6
  4337  002808  E0D8               	bz	l507
  4338  00280A                     l9215:
  4339  00280A  2A10               	incf	doActionPulse@i,f,c
  4340  00280C  0E07               	movlw	7
  4341  00280E  6410               	cpfsgt	doActionPulse@i,c
  4342  002810  D70E               	goto	l9165
  4343  002812  0C07               	retlw	7
  4344  002814                     __end_of_doActionPulse:
  4345                           	opt stack 0
  4346                           tblptru	equ	0xFF8
  4347                           tblptrh	equ	0xFF7
  4348                           tblptrl	equ	0xFF6
  4349                           tablat	equ	0xFF5
  4350                           prodh	equ	0xFF4
  4351                           prodl	equ	0xFF3
  4352                           intcon	equ	0xFF2
  4353                           postinc0	equ	0xFEE
  4354                           wreg	equ	0xFE8
  4355                           indf1	equ	0xFE7
  4356                           fsr1h	equ	0xFE2
  4357                           fsr1l	equ	0xFE1
  4358                           indf2	equ	0xFDF
  4359                           postinc2	equ	0xFDE
  4360                           postdec2	equ	0xFDD
  4361                           plusw2	equ	0xFDB
  4362                           fsr2h	equ	0xFDA
  4363                           fsr2l	equ	0xFD9
  4364                           status	equ	0xFD8
  4365                           
  4366 ;; *************** function _doActionOn *****************
  4367 ;; Defined at:
  4368 ;;		line 1737 in file "../main.c"
  4369 ;; Parameters:    Size  Location     Type
  4370 ;;  dmflags         1    wreg     unsigned char 
  4371 ;;  arg             1   80[COMRAM] unsigned char 
  4372 ;; Auto vars:     Size  Location     Type
  4373 ;;  dmflags         1   25[BANK0 ] unsigned char 
  4374 ;;  i               1   27[BANK0 ] unsigned char 
  4375 ;;  val             1   26[BANK0 ] unsigned char 
  4376 ;; Return value:  Size  Location     Type
  4377 ;;		None               void
  4378 ;; Registers used:
  4379 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4380 ;; Tracked objects:
  4381 ;;		On entry : F/0
  4382 ;;		On exit  : F/0
  4383 ;;		Unchanged: 0/0
  4384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4385 ;;      Params:         1       0       0       0       0       0       0
  4386 ;;      Locals:         0       3       0       0       0       0       0
  4387 ;;      Temps:          0       3       0       0       0       0       0
  4388 ;;      Totals:         1       6       0       0       0       0       0
  4389 ;;Total ram usage:        7 bytes
  4390 ;; Hardware stack levels used:    1
  4391 ;; Hardware stack levels required when called:    7
  4392 ;; This function calls:
  4393 ;;		_Read_b_eep
  4394 ;;		_SendInformationEvent
  4395 ;; This function is called by:
  4396 ;;		_doDM
  4397 ;; This function uses a non-reentrant model
  4398 ;;
  4399                           
  4400                           	psect	text13
  4401  001F96                     __ptext13:
  4402                           	opt stack 0
  4403  001F96                     _doActionOn:
  4404                           	opt stack 22
  4405                           
  4406                           ;incstack = 0
  4407                           ;incstack = 0
  4408                           ;doActionOn@dmflags stored from wreg
  4409  001F96  CFE8 F0C9          	movff	wreg,doActionOn@dmflags
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;main.c: 1739: unsigned char i;
  4413                           ;main.c: 1740: unsigned char val;
  4414                           ;main.c: 1742: for (i = 0; i < 8; i++) {
  4415  001F9A  6BCB               	clrf	doActionOn@i& (0+255),b
  4416  001F9C                     l10931:
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;main.c: 1745: if ( !( arg & ( 1 << i ) ) ) continue;
  4420  001F9C  C0CB  F0C6         	movff	doActionOn@i,??_doActionOn
  4421  001FA0  0E01               	movlw	1
  4422  001FA2  6FC7               	movwf	(??_doActionOn+1)& (0+255),b
  4423  001FA4  2BC6               	incf	??_doActionOn& (0+255),f,b
  4424  001FA6  D002               	goto	u13194
  4425  001FA8                     u13195:
  4426  001FA8  90D8               	bcf	status,0,c
  4427  001FAA  37C7               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4428  001FAC                     u13194:
  4429  001FAC  2FC6               	decfsz	??_doActionOn& (0+255),f,b
  4430  001FAE  D7FC               	goto	u13195
  4431  001FB0  51C7               	movf	(??_doActionOn+1)& (0+255),w,b
  4432  001FB2  1451               	andwf	doActionOn@arg,w,c
  4433  001FB4  E101 D12D          	bz	l10987
  4434                           
  4435                           ; BSR set to: 0
  4436                           ;main.c: 1748: if ( dmflags & 0x10 ) {
  4437  001FB8  A9C9               	btfss	doActionOn@dmflags& (0+255),4,b
  4438  001FBA  D00C               	goto	l441
  4439                           
  4440                           ; BSR set to: 0
  4441                           ;main.c: 1749: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 52 + i) ) {
  4442  001FBC  0E77               	movlw	119
  4443  001FBE  25CB               	addwf	doActionOn@i& (0+255),w,b
  4444  001FC0  6E08               	movwf	?_Read_b_eep,c
  4445  001FC2  6A09               	clrf	?_Read_b_eep+1,c
  4446  001FC4  0E00               	movlw	0
  4447  001FC6  2209               	addwfc	?_Read_b_eep+1,f,c
  4448  001FC8  EC76  F01E         	call	_Read_b_eep	;wreg free
  4449  001FCC  0100               	movlb	0	; () banked
  4450  001FCE  199C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  4451  001FD0  E001 D11F          	bnz	l10987
  4452  001FD4                     l441:
  4453                           
  4454                           ; BSR set to: 0
  4455                           ;main.c: 1752: }
  4456                           ;main.c: 1753: }
  4457                           ;main.c: 1756: if ( dmflags & 0x08 ) {
  4458  001FD4  A7C9               	btfss	doActionOn@dmflags& (0+255),3,b
  4459  001FD6  D00C               	goto	l10943
  4460                           
  4461                           ; BSR set to: 0
  4462                           ;main.c: 1757: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 53 + i) ) {
  4463  001FD8  0E78               	movlw	120
  4464  001FDA  25CB               	addwf	doActionOn@i& (0+255),w,b
  4465  001FDC  6E08               	movwf	?_Read_b_eep,c
  4466  001FDE  6A09               	clrf	?_Read_b_eep+1,c
  4467  001FE0  0E00               	movlw	0
  4468  001FE2  2209               	addwfc	?_Read_b_eep+1,f,c
  4469  001FE4  EC76  F01E         	call	_Read_b_eep	;wreg free
  4470  001FE8  0100               	movlb	0	; () banked
  4471  001FEA  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4472  001FEC  E001 D111          	bnz	l10987
  4473  001FF0                     l10943:
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;main.c: 1760: }
  4477                           ;main.c: 1761: }
  4478                           ;main.c: 1763: val = Read_b_eep(0x43 + 10 + i);
  4479  001FF0  0E4D               	movlw	77
  4480  001FF2  25CB               	addwf	doActionOn@i& (0+255),w,b
  4481  001FF4  6E08               	movwf	?_Read_b_eep,c
  4482  001FF6  6A09               	clrf	?_Read_b_eep+1,c
  4483  001FF8  0E00               	movlw	0
  4484  001FFA  2209               	addwfc	?_Read_b_eep+1,f,c
  4485  001FFC  EC76  F01E         	call	_Read_b_eep	;wreg free
  4486  002000  0100               	movlb	0	; () banked
  4487  002002  6FCA               	movwf	doActionOn@val& (0+255),b
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;main.c: 1766: if ( !( val & 0x80 ) ) continue;
  4491  002004  AFCA               	btfss	doActionOn@val& (0+255),7,b
  4492  002006  D105               	goto	l10987
  4493  002008  D0E0               	goto	l10979
  4494  00200A                     l447:
  4495                           
  4496                           ; BSR set to: 0
  4497                           ;main.c: 1771: LATBbits.LATB4 = 1;
  4498  00200A  888A               	bsf	3978,4,c	;volatile
  4499                           
  4500                           ; BSR set to: 0
  4501                           ;main.c: 1773: if (Read_b_eep(0x43 + 10) & 0x04 ) {
  4502  00200C  6A09               	clrf	?_Read_b_eep+1,c
  4503  00200E  0E4D               	movlw	77
  4504  002010  6E08               	movwf	?_Read_b_eep,c
  4505  002012  EC76  F01E         	call	_Read_b_eep	;wreg free
  4506  002016  0100               	movlb	0	; () banked
  4507  002018  6FC6               	movwf	??_doActionOn& (0+255),b
  4508  00201A  A5C6               	btfss	??_doActionOn& (0+255),2,b
  4509  00201C  D0E8               	goto	l449
  4510                           
  4511                           ; BSR set to: 0
  4512                           ;main.c: 1774: relay_protection_timer[ 0 ] =
  4513                           ;main.c: 1775: Read_b_eep(0x43 + 34) * 256 +
  4514                           ;main.c: 1776: Read_b_eep(0x43 + 35);
  4515  00201E  6A09               	clrf	?_Read_b_eep+1,c
  4516  002020  0E66               	movlw	102
  4517  002022  6E08               	movwf	?_Read_b_eep,c
  4518  002024  EC76  F01E         	call	_Read_b_eep	;wreg free
  4519  002028  0100               	movlb	0	; () banked
  4520  00202A  6FC6               	movwf	??_doActionOn& (0+255),b
  4521  00202C  6A09               	clrf	?_Read_b_eep+1,c
  4522  00202E  0E65               	movlw	101
  4523  002030  6E08               	movwf	?_Read_b_eep,c
  4524  002032  EC76  F01E         	call	_Read_b_eep	;wreg free
  4525  002036  0100               	movlb	0	; () banked
  4526  002038  6FC8               	movwf	(??_doActionOn+2)& (0+255),b
  4527  00203A  6BC7               	clrf	(??_doActionOn+1)& (0+255),b
  4528  00203C  51C6               	movf	??_doActionOn& (0+255),w,b
  4529  00203E  25C7               	addwf	(??_doActionOn+1)& (0+255),w,b
  4530  002040  6F60               	movwf	_relay_protection_timer& (0+255),b
  4531  002042  0E00               	movlw	0
  4532  002044  21C8               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4533  002046  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  4534  002048  D0D2               	goto	l449
  4535  00204A                     l450:
  4536                           
  4537                           ; BSR set to: 0
  4538                           ;main.c: 1781: LATBbits.LATB1 = 1;
  4539  00204A  828A               	bsf	3978,1,c	;volatile
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;main.c: 1783: if (Read_b_eep(0x43 + 11) & 0x04 ) {
  4543  00204C  6A09               	clrf	?_Read_b_eep+1,c
  4544  00204E  0E4E               	movlw	78
  4545  002050  6E08               	movwf	?_Read_b_eep,c
  4546  002052  EC76  F01E         	call	_Read_b_eep	;wreg free
  4547  002056  0100               	movlb	0	; () banked
  4548  002058  6FC6               	movwf	??_doActionOn& (0+255),b
  4549  00205A  A5C6               	btfss	??_doActionOn& (0+255),2,b
  4550  00205C  D0C8               	goto	l449
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;main.c: 1784: relay_protection_timer[ 1 ] =
  4554                           ;main.c: 1785: Read_b_eep(0x43 + 36) * 256 +
  4555                           ;main.c: 1786: Read_b_eep(0x43 + 37);
  4556  00205E  6A09               	clrf	?_Read_b_eep+1,c
  4557  002060  0E68               	movlw	104
  4558  002062  6E08               	movwf	?_Read_b_eep,c
  4559  002064  EC76  F01E         	call	_Read_b_eep	;wreg free
  4560  002068  0100               	movlb	0	; () banked
  4561  00206A  6FC6               	movwf	??_doActionOn& (0+255),b
  4562  00206C  6A09               	clrf	?_Read_b_eep+1,c
  4563  00206E  0E67               	movlw	103
  4564  002070  6E08               	movwf	?_Read_b_eep,c
  4565  002072  EC76  F01E         	call	_Read_b_eep	;wreg free
  4566  002076  0100               	movlb	0	; () banked
  4567  002078  6FC8               	movwf	(??_doActionOn+2)& (0+255),b
  4568  00207A  6BC7               	clrf	(??_doActionOn+1)& (0+255),b
  4569  00207C  51C6               	movf	??_doActionOn& (0+255),w,b
  4570  00207E  25C7               	addwf	(??_doActionOn+1)& (0+255),w,b
  4571  002080  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  4572  002082  0E00               	movlw	0
  4573  002084  21C8               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4574  002086  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  4575  002088  D0B2               	goto	l449
  4576  00208A                     l452:
  4577                           
  4578                           ; BSR set to: 0
  4579                           ;main.c: 1791: LATBbits.LATB0 = 1;
  4580  00208A  808A               	bsf	3978,0,c	;volatile
  4581                           
  4582                           ; BSR set to: 0
  4583                           ;main.c: 1793: if (Read_b_eep(0x43 + 12) & 0x04 ) {
  4584  00208C  6A09               	clrf	?_Read_b_eep+1,c
  4585  00208E  0E4F               	movlw	79
  4586  002090  6E08               	movwf	?_Read_b_eep,c
  4587  002092  EC76  F01E         	call	_Read_b_eep	;wreg free
  4588  002096  0100               	movlb	0	; () banked
  4589  002098  6FC6               	movwf	??_doActionOn& (0+255),b
  4590  00209A  A5C6               	btfss	??_doActionOn& (0+255),2,b
  4591  00209C  D0A8               	goto	l449
  4592                           
  4593                           ; BSR set to: 0
  4594                           ;main.c: 1794: relay_protection_timer[ 2 ] =
  4595                           ;main.c: 1795: Read_b_eep(0x43 + 38) * 256 +
  4596                           ;main.c: 1796: Read_b_eep(0x43 + 39);
  4597  00209E  6A09               	clrf	?_Read_b_eep+1,c
  4598  0020A0  0E6A               	movlw	106
  4599  0020A2  6E08               	movwf	?_Read_b_eep,c
  4600  0020A4  EC76  F01E         	call	_Read_b_eep	;wreg free
  4601  0020A8  0100               	movlb	0	; () banked
  4602  0020AA  6FC6               	movwf	??_doActionOn& (0+255),b
  4603  0020AC  6A09               	clrf	?_Read_b_eep+1,c
  4604  0020AE  0E69               	movlw	105
  4605  0020B0  6E08               	movwf	?_Read_b_eep,c
  4606  0020B2  EC76  F01E         	call	_Read_b_eep	;wreg free
  4607  0020B6  0100               	movlb	0	; () banked
  4608  0020B8  6FC8               	movwf	(??_doActionOn+2)& (0+255),b
  4609  0020BA  6BC7               	clrf	(??_doActionOn+1)& (0+255),b
  4610  0020BC  51C6               	movf	??_doActionOn& (0+255),w,b
  4611  0020BE  25C7               	addwf	(??_doActionOn+1)& (0+255),w,b
  4612  0020C0  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  4613  0020C2  0E00               	movlw	0
  4614  0020C4  21C8               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4615  0020C6  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  4616  0020C8  D092               	goto	l449
  4617  0020CA                     l454:
  4618                           
  4619                           ; BSR set to: 0
  4620                           ;main.c: 1801: LATCbits.LATC7 = 1;
  4621  0020CA  8E8B               	bsf	3979,7,c	;volatile
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;main.c: 1803: if ( Read_b_eep(0x43 + 13) & 0x04 ) {
  4625  0020CC  6A09               	clrf	?_Read_b_eep+1,c
  4626  0020CE  0E50               	movlw	80
  4627  0020D0  6E08               	movwf	?_Read_b_eep,c
  4628  0020D2  EC76  F01E         	call	_Read_b_eep	;wreg free
  4629  0020D6  0100               	movlb	0	; () banked
  4630  0020D8  6FC6               	movwf	??_doActionOn& (0+255),b
  4631  0020DA  A5C6               	btfss	??_doActionOn& (0+255),2,b
  4632  0020DC  D088               	goto	l449
  4633                           
  4634                           ; BSR set to: 0
  4635                           ;main.c: 1804: relay_protection_timer[ 3 ] =
  4636                           ;main.c: 1805: Read_b_eep(0x43 + 40) * 256 +
  4637                           ;main.c: 1806: Read_b_eep(0x43 + 41);
  4638  0020DE  6A09               	clrf	?_Read_b_eep+1,c
  4639  0020E0  0E6C               	movlw	108
  4640  0020E2  6E08               	movwf	?_Read_b_eep,c
  4641  0020E4  EC76  F01E         	call	_Read_b_eep	;wreg free
  4642  0020E8  0100               	movlb	0	; () banked
  4643  0020EA  6FC6               	movwf	??_doActionOn& (0+255),b
  4644  0020EC  6A09               	clrf	?_Read_b_eep+1,c
  4645  0020EE  0E6B               	movlw	107
  4646  0020F0  6E08               	movwf	?_Read_b_eep,c
  4647  0020F2  EC76  F01E         	call	_Read_b_eep	;wreg free
  4648  0020F6  0100               	movlb	0	; () banked
  4649  0020F8  6FC8               	movwf	(??_doActionOn+2)& (0+255),b
  4650  0020FA  6BC7               	clrf	(??_doActionOn+1)& (0+255),b
  4651  0020FC  51C6               	movf	??_doActionOn& (0+255),w,b
  4652  0020FE  25C7               	addwf	(??_doActionOn+1)& (0+255),w,b
  4653  002100  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  4654  002102  0E00               	movlw	0
  4655  002104  21C8               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4656  002106  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  4657  002108  D072               	goto	l449
  4658  00210A                     l456:
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;main.c: 1811: LATCbits.LATC6 = 1;
  4662  00210A  8C8B               	bsf	3979,6,c	;volatile
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;main.c: 1813: if (Read_b_eep(0x43 + 14) & 0x04 ) {
  4666  00210C  6A09               	clrf	?_Read_b_eep+1,c
  4667  00210E  0E51               	movlw	81
  4668  002110  6E08               	movwf	?_Read_b_eep,c
  4669  002112  EC76  F01E         	call	_Read_b_eep	;wreg free
  4670  002116  0100               	movlb	0	; () banked
  4671  002118  6FC6               	movwf	??_doActionOn& (0+255),b
  4672  00211A  A5C6               	btfss	??_doActionOn& (0+255),2,b
  4673  00211C  D068               	goto	l449
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;main.c: 1814: relay_protection_timer[ 4 ] =
  4677                           ;main.c: 1815: Read_b_eep(0x43 + 42) * 256 +
  4678                           ;main.c: 1816: Read_b_eep(0x43 + 43);
  4679  00211E  6A09               	clrf	?_Read_b_eep+1,c
  4680  002120  0E6E               	movlw	110
  4681  002122  6E08               	movwf	?_Read_b_eep,c
  4682  002124  EC76  F01E         	call	_Read_b_eep	;wreg free
  4683  002128  0100               	movlb	0	; () banked
  4684  00212A  6FC6               	movwf	??_doActionOn& (0+255),b
  4685  00212C  6A09               	clrf	?_Read_b_eep+1,c
  4686  00212E  0E6D               	movlw	109
  4687  002130  6E08               	movwf	?_Read_b_eep,c
  4688  002132  EC76  F01E         	call	_Read_b_eep	;wreg free
  4689  002136  0100               	movlb	0	; () banked
  4690  002138  6FC8               	movwf	(??_doActionOn+2)& (0+255),b
  4691  00213A  6BC7               	clrf	(??_doActionOn+1)& (0+255),b
  4692  00213C  51C6               	movf	??_doActionOn& (0+255),w,b
  4693  00213E  25C7               	addwf	(??_doActionOn+1)& (0+255),w,b
  4694  002140  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  4695  002142  0E00               	movlw	0
  4696  002144  21C8               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4697  002146  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  4698  002148  D052               	goto	l449
  4699  00214A                     l458:
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;main.c: 1821: LATCbits.LATC5 = 1;
  4703  00214A  8A8B               	bsf	3979,5,c	;volatile
  4704                           
  4705                           ; BSR set to: 0
  4706                           ;main.c: 1823: if (Read_b_eep(0x43 + 15) & 0x04) {
  4707  00214C  6A09               	clrf	?_Read_b_eep+1,c
  4708  00214E  0E52               	movlw	82
  4709  002150  6E08               	movwf	?_Read_b_eep,c
  4710  002152  EC76  F01E         	call	_Read_b_eep	;wreg free
  4711  002156  0100               	movlb	0	; () banked
  4712  002158  6FC6               	movwf	??_doActionOn& (0+255),b
  4713  00215A  A5C6               	btfss	??_doActionOn& (0+255),2,b
  4714  00215C  D048               	goto	l449
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;main.c: 1824: relay_protection_timer[ 5 ] =
  4718                           ;main.c: 1825: Read_b_eep(0x43 + 44) * 256 +
  4719                           ;main.c: 1826: Read_b_eep(0x43 + 45);
  4720  00215E  6A09               	clrf	?_Read_b_eep+1,c
  4721  002160  0E70               	movlw	112
  4722  002162  6E08               	movwf	?_Read_b_eep,c
  4723  002164  EC76  F01E         	call	_Read_b_eep	;wreg free
  4724  002168  0100               	movlb	0	; () banked
  4725  00216A  6FC6               	movwf	??_doActionOn& (0+255),b
  4726  00216C  6A09               	clrf	?_Read_b_eep+1,c
  4727  00216E  0E6F               	movlw	111
  4728  002170  6E08               	movwf	?_Read_b_eep,c
  4729  002172  EC76  F01E         	call	_Read_b_eep	;wreg free
  4730  002176  0100               	movlb	0	; () banked
  4731  002178  6FC8               	movwf	(??_doActionOn+2)& (0+255),b
  4732  00217A  6BC7               	clrf	(??_doActionOn+1)& (0+255),b
  4733  00217C  51C6               	movf	??_doActionOn& (0+255),w,b
  4734  00217E  25C7               	addwf	(??_doActionOn+1)& (0+255),w,b
  4735  002180  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  4736  002182  0E00               	movlw	0
  4737  002184  21C8               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4738  002186  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  4739  002188  D032               	goto	l449
  4740  00218A                     l460:
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;main.c: 1831: LATCbits.LATC4 = 1;
  4744  00218A  888B               	bsf	3979,4,c	;volatile
  4745                           
  4746                           ; BSR set to: 0
  4747                           ;main.c: 1833: if ( Read_b_eep(0x43 + 16) & 0x04) {
  4748  00218C  6A09               	clrf	?_Read_b_eep+1,c
  4749  00218E  0E53               	movlw	83
  4750  002190  6E08               	movwf	?_Read_b_eep,c
  4751  002192  EC76  F01E         	call	_Read_b_eep	;wreg free
  4752  002196  0100               	movlb	0	; () banked
  4753  002198  6FC6               	movwf	??_doActionOn& (0+255),b
  4754  00219A  A5C6               	btfss	??_doActionOn& (0+255),2,b
  4755  00219C  D028               	goto	l449
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;main.c: 1834: relay_protection_timer[ 6 ] =
  4759                           ;main.c: 1835: Read_b_eep(0x43 + 46) * 256 +
  4760                           ;main.c: 1836: Read_b_eep(0x43 + 47);
  4761  00219E  6A09               	clrf	?_Read_b_eep+1,c
  4762  0021A0  0E72               	movlw	114
  4763  0021A2  6E08               	movwf	?_Read_b_eep,c
  4764  0021A4  EC76  F01E         	call	_Read_b_eep	;wreg free
  4765  0021A8  0100               	movlb	0	; () banked
  4766  0021AA  6FC6               	movwf	??_doActionOn& (0+255),b
  4767  0021AC  6A09               	clrf	?_Read_b_eep+1,c
  4768  0021AE  0E71               	movlw	113
  4769  0021B0  6E08               	movwf	?_Read_b_eep,c
  4770  0021B2  EC76  F01E         	call	_Read_b_eep	;wreg free
  4771  0021B6  0100               	movlb	0	; () banked
  4772  0021B8  6FC8               	movwf	(??_doActionOn+2)& (0+255),b
  4773  0021BA  6BC7               	clrf	(??_doActionOn+1)& (0+255),b
  4774  0021BC  51C6               	movf	??_doActionOn& (0+255),w,b
  4775  0021BE  25C7               	addwf	(??_doActionOn+1)& (0+255),w,b
  4776  0021C0  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  4777  0021C2  0E00               	movlw	0
  4778  0021C4  21C8               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4779  0021C6  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  4780  0021C8  D012               	goto	l449
  4781  0021CA                     l10979:
  4782                           
  4783                           ; BSR set to: 0
  4784  0021CA  51CB               	movf	doActionOn@i& (0+255),w,b
  4785                           
  4786                           ; Switch size 1, requested type "space"
  4787                           ; Number of cases is 7, Range of values is 0 to 6
  4788                           ; switch strategies available:
  4789                           ; Name         Instructions Cycles
  4790                           ; simple_byte           22    12 (average)
  4791                           ;	Chosen strategy is simple_byte
  4792  0021CC  E101 D71D          	bz	l447
  4793  0021D0  0A01               	xorlw	1	; case 1
  4794  0021D2  E101 D73A          	bz	l450
  4795  0021D6  0A03               	xorlw	3	; case 2
  4796  0021D8  E101 D757          	bz	l452
  4797  0021DC  0A01               	xorlw	1	; case 3
  4798  0021DE  E101 D774          	bz	l454
  4799  0021E2  0A07               	xorlw	7	; case 4
  4800  0021E4  E092               	bz	l456
  4801  0021E6  0A01               	xorlw	1	; case 5
  4802  0021E8  E0B0               	bz	l458
  4803  0021EA  0A03               	xorlw	3	; case 6
  4804  0021EC  E0CE               	bz	l460
  4805  0021EE                     l449:
  4806                           
  4807                           ; BSR set to: 0
  4808                           ;main.c: 1843: if ( val & 0x08 ) {
  4809  0021EE  A7CA               	btfss	doActionOn@val& (0+255),3,b
  4810  0021F0  D007               	goto	l10983
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;main.c: 1844: SendInformationEvent( i, 20, 3 );
  4814  0021F2  0E14               	movlw	20
  4815  0021F4  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  4816  0021F6  0E03               	movlw	3
  4817  0021F8  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4818  0021FA  51CB               	movf	doActionOn@i& (0+255),w,b
  4819  0021FC  ECD3  F01B         	call	_SendInformationEvent
  4820  002200                     l10983:
  4821                           
  4822                           ; BSR set to: 0
  4823                           ;main.c: 1845: }
  4824                           ;main.c: 1848: if ( val & 0x20 ) {
  4825  002200  ABCA               	btfss	doActionOn@val& (0+255),5,b
  4826  002202  D007               	goto	l10987
  4827                           
  4828                           ; BSR set to: 0
  4829                           ;main.c: 1849: SendInformationEvent( i, 20, 25 );
  4830  002204  0E14               	movlw	20
  4831  002206  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  4832  002208  0E19               	movlw	25
  4833  00220A  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4834  00220C  51CB               	movf	doActionOn@i& (0+255),w,b
  4835  00220E  ECD3  F01B         	call	_SendInformationEvent
  4836  002212                     l10987:
  4837                           
  4838                           ; BSR set to: 0
  4839  002212  2BCB               	incf	doActionOn@i& (0+255),f,b
  4840                           
  4841                           ; BSR set to: 0
  4842  002214  0E07               	movlw	7
  4843  002216  65CB               	cpfsgt	doActionOn@i& (0+255),b
  4844  002218  D6C1               	goto	l10931
  4845                           
  4846                           ; BSR set to: 0
  4847  00221A  0C07               	retlw	7
  4848  00221C                     __end_of_doActionOn:
  4849                           	opt stack 0
  4850                           tblptru	equ	0xFF8
  4851                           tblptrh	equ	0xFF7
  4852                           tblptrl	equ	0xFF6
  4853                           tablat	equ	0xFF5
  4854                           prodh	equ	0xFF4
  4855                           prodl	equ	0xFF3
  4856                           intcon	equ	0xFF2
  4857                           postinc0	equ	0xFEE
  4858                           wreg	equ	0xFE8
  4859                           indf1	equ	0xFE7
  4860                           fsr1h	equ	0xFE2
  4861                           fsr1l	equ	0xFE1
  4862                           indf2	equ	0xFDF
  4863                           postinc2	equ	0xFDE
  4864                           postdec2	equ	0xFDD
  4865                           plusw2	equ	0xFDB
  4866                           fsr2h	equ	0xFDA
  4867                           fsr2l	equ	0xFD9
  4868                           status	equ	0xFD8
  4869                           
  4870 ;; *************** function _doActionOff *****************
  4871 ;; Defined at:
  4872 ;;		line 1859 in file "../main.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;  dmflags         1    wreg     unsigned char 
  4875 ;;  arg             1   80[COMRAM] unsigned char 
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;  dmflags         1   24[BANK0 ] unsigned char 
  4878 ;;  i               1   26[BANK0 ] unsigned char 
  4879 ;;  val             1   25[BANK0 ] unsigned char 
  4880 ;; Return value:  Size  Location     Type
  4881 ;;		None               void
  4882 ;; Registers used:
  4883 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4884 ;; Tracked objects:
  4885 ;;		On entry : F/0
  4886 ;;		On exit  : F/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4889 ;;      Params:         1       0       0       0       0       0       0
  4890 ;;      Locals:         0       3       0       0       0       0       0
  4891 ;;      Temps:          0       2       0       0       0       0       0
  4892 ;;      Totals:         1       5       0       0       0       0       0
  4893 ;;Total ram usage:        6 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; Hardware stack levels required when called:    7
  4896 ;; This function calls:
  4897 ;;		_Read_b_eep
  4898 ;;		_SendInformationEvent
  4899 ;; This function is called by:
  4900 ;;		_doApplicationOneSecondWork
  4901 ;;		_doDM
  4902 ;; This function uses a non-reentrant model
  4903 ;;
  4904                           
  4905                           	psect	text14
  4906  00329E                     __ptext14:
  4907                           	opt stack 0
  4908  00329E                     _doActionOff:
  4909                           	opt stack 22
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;incstack = 0
  4913                           ;incstack = 0
  4914                           ;doActionOff@dmflags stored from wreg
  4915  00329E  CFE8 F0C8          	movff	wreg,doActionOff@dmflags
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;main.c: 1861: unsigned char i;
  4919                           ;main.c: 1862: unsigned char val;
  4920                           ;main.c: 1864: for ( i = 0; i < 8; i++ ) {
  4921  0032A2  6BCA               	clrf	doActionOff@i& (0+255),b
  4922  0032A4                     l10437:
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;main.c: 1867: if ( !( arg & ( 1 << i ) ) ) continue;
  4926  0032A4  C0CA  F0C6         	movff	doActionOff@i,??_doActionOff
  4927  0032A8  0E01               	movlw	1
  4928  0032AA  6FC7               	movwf	(??_doActionOff+1)& (0+255),b
  4929  0032AC  2BC6               	incf	??_doActionOff& (0+255),f,b
  4930  0032AE  D002               	goto	u12534
  4931  0032B0                     u12535:
  4932  0032B0  90D8               	bcf	status,0,c
  4933  0032B2  37C7               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4934  0032B4                     u12534:
  4935  0032B4  2FC6               	decfsz	??_doActionOff& (0+255),f,b
  4936  0032B6  D7FC               	goto	u12535
  4937  0032B8  51C7               	movf	(??_doActionOff+1)& (0+255),w,b
  4938  0032BA  1451               	andwf	doActionOff@arg,w,c
  4939  0032BC  E055               	bz	l10465
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;main.c: 1870: if ( dmflags & 0x10 ) {
  4943  0032BE  A9C8               	btfss	doActionOff@dmflags& (0+255),4,b
  4944  0032C0  D00B               	goto	l471
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;main.c: 1871: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 52 + i) ) {
  4948  0032C2  0E77               	movlw	119
  4949  0032C4  25CA               	addwf	doActionOff@i& (0+255),w,b
  4950  0032C6  6E08               	movwf	?_Read_b_eep,c
  4951  0032C8  6A09               	clrf	?_Read_b_eep+1,c
  4952  0032CA  0E00               	movlw	0
  4953  0032CC  2209               	addwfc	?_Read_b_eep+1,f,c
  4954  0032CE  EC76  F01E         	call	_Read_b_eep	;wreg free
  4955  0032D2  0100               	movlb	0	; () banked
  4956  0032D4  199C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  4957  0032D6  E148               	bnz	l10465
  4958  0032D8                     l471:
  4959                           
  4960                           ; BSR set to: 0
  4961                           ;main.c: 1874: }
  4962                           ;main.c: 1875: }
  4963                           ;main.c: 1878: if ( dmflags & 0x08 ) {
  4964  0032D8  A7C8               	btfss	doActionOff@dmflags& (0+255),3,b
  4965  0032DA  D00B               	goto	l10449
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;main.c: 1879: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 53 + i) ) {
  4969  0032DC  0E78               	movlw	120
  4970  0032DE  25CA               	addwf	doActionOff@i& (0+255),w,b
  4971  0032E0  6E08               	movwf	?_Read_b_eep,c
  4972  0032E2  6A09               	clrf	?_Read_b_eep+1,c
  4973  0032E4  0E00               	movlw	0
  4974  0032E6  2209               	addwfc	?_Read_b_eep+1,f,c
  4975  0032E8  EC76  F01E         	call	_Read_b_eep	;wreg free
  4976  0032EC  0100               	movlb	0	; () banked
  4977  0032EE  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4978  0032F0  E13B               	bnz	l10465
  4979  0032F2                     l10449:
  4980                           
  4981                           ; BSR set to: 0
  4982                           ;main.c: 1882: }
  4983                           ;main.c: 1883: }
  4984                           ;main.c: 1885: val = Read_b_eep(0x43 + 10 + i);
  4985  0032F2  0E4D               	movlw	77
  4986  0032F4  25CA               	addwf	doActionOff@i& (0+255),w,b
  4987  0032F6  6E08               	movwf	?_Read_b_eep,c
  4988  0032F8  6A09               	clrf	?_Read_b_eep+1,c
  4989  0032FA  0E00               	movlw	0
  4990  0032FC  2209               	addwfc	?_Read_b_eep+1,f,c
  4991  0032FE  EC76  F01E         	call	_Read_b_eep	;wreg free
  4992  003302  0100               	movlb	0	; () banked
  4993  003304  6FC9               	movwf	doActionOff@val& (0+255),b
  4994                           
  4995                           ; BSR set to: 0
  4996                           ;main.c: 1888: if ( !( val & 0x80 ) ) continue;
  4997  003306  AFC9               	btfss	doActionOff@val& (0+255),7,b
  4998  003308  D02F               	goto	l10465
  4999  00330A  D00E               	goto	l10457
  5000  00330C                     l477:
  5001                           
  5002                           ; BSR set to: 0
  5003                           ;main.c: 1893: LATBbits.LATB4 = 0;
  5004  00330C  988A               	bcf	3978,4,c	;volatile
  5005                           
  5006                           ;main.c: 1894: break;
  5007  00330E  D01A               	goto	l478
  5008  003310                     l479:
  5009                           
  5010                           ; BSR set to: 0
  5011                           ;main.c: 1897: LATBbits.LATB1 = 0;
  5012  003310  928A               	bcf	3978,1,c	;volatile
  5013                           
  5014                           ;main.c: 1898: break;
  5015  003312  D018               	goto	l478
  5016  003314                     l480:
  5017                           
  5018                           ; BSR set to: 0
  5019                           ;main.c: 1901: LATBbits.LATB0 = 0;
  5020  003314  908A               	bcf	3978,0,c	;volatile
  5021                           
  5022                           ;main.c: 1902: break;
  5023  003316  D016               	goto	l478
  5024  003318                     l481:
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;main.c: 1905: LATCbits.LATC7 = 0;
  5028  003318  9E8B               	bcf	3979,7,c	;volatile
  5029                           
  5030                           ;main.c: 1906: break;
  5031  00331A  D014               	goto	l478
  5032  00331C                     l482:
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;main.c: 1909: LATCbits.LATC6 = 0;
  5036  00331C  9C8B               	bcf	3979,6,c	;volatile
  5037                           
  5038                           ;main.c: 1910: break;
  5039  00331E  D012               	goto	l478
  5040  003320                     l483:
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;main.c: 1913: LATCbits.LATC5 = 0;
  5044  003320  9A8B               	bcf	3979,5,c	;volatile
  5045                           
  5046                           ;main.c: 1914: break;
  5047  003322  D010               	goto	l478
  5048  003324                     l484:
  5049                           
  5050                           ; BSR set to: 0
  5051                           ;main.c: 1917: LATCbits.LATC4 = 0;
  5052  003324  988B               	bcf	3979,4,c	;volatile
  5053                           
  5054                           ;main.c: 1918: break;
  5055  003326  D00E               	goto	l478
  5056  003328                     l10457:
  5057                           
  5058                           ; BSR set to: 0
  5059  003328  51CA               	movf	doActionOff@i& (0+255),w,b
  5060                           
  5061                           ; Switch size 1, requested type "space"
  5062                           ; Number of cases is 7, Range of values is 0 to 6
  5063                           ; switch strategies available:
  5064                           ; Name         Instructions Cycles
  5065                           ; simple_byte           22    12 (average)
  5066                           ;	Chosen strategy is simple_byte
  5067  00332A  E0F0               	bz	l477
  5068  00332C  0A01               	xorlw	1	; case 1
  5069  00332E  E0F0               	bz	l479
  5070  003330  0A03               	xorlw	3	; case 2
  5071  003332  E0F0               	bz	l480
  5072  003334  0A01               	xorlw	1	; case 3
  5073  003336  E0F0               	bz	l481
  5074  003338  0A07               	xorlw	7	; case 4
  5075  00333A  E0F0               	bz	l482
  5076  00333C  0A01               	xorlw	1	; case 5
  5077  00333E  E0F0               	bz	l483
  5078  003340  0A03               	xorlw	3	; case 6
  5079  003342  E0F0               	bz	l484
  5080  003344                     l478:
  5081                           
  5082                           ; BSR set to: 0
  5083                           ;main.c: 1923: if ( val & 0x10 ) {
  5084  003344  A9C9               	btfss	doActionOff@val& (0+255),4,b
  5085  003346  D007               	goto	l10461
  5086                           
  5087                           ; BSR set to: 0
  5088                           ;main.c: 1924: SendInformationEvent( i, 20, 4 );
  5089  003348  0E14               	movlw	20
  5090  00334A  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  5091  00334C  0E04               	movlw	4
  5092  00334E  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5093  003350  51CA               	movf	doActionOff@i& (0+255),w,b
  5094  003352  ECD3  F01B         	call	_SendInformationEvent
  5095  003356                     l10461:
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;main.c: 1925: }
  5099                           ;main.c: 1928: if ( val & 0x40 ) {
  5100  003356  ADC9               	btfss	doActionOff@val& (0+255),6,b
  5101  003358  D007               	goto	l10465
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;main.c: 1929: SendInformationEvent( i, 20, 24 );
  5105  00335A  0E14               	movlw	20
  5106  00335C  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  5107  00335E  0E18               	movlw	24
  5108  003360  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5109  003362  51CA               	movf	doActionOff@i& (0+255),w,b
  5110  003364  ECD3  F01B         	call	_SendInformationEvent
  5111  003368                     l10465:
  5112                           
  5113                           ; BSR set to: 0
  5114  003368  2BCA               	incf	doActionOff@i& (0+255),f,b
  5115                           
  5116                           ; BSR set to: 0
  5117  00336A  0E07               	movlw	7
  5118  00336C  65CA               	cpfsgt	doActionOff@i& (0+255),b
  5119  00336E  D79A               	goto	l10437
  5120                           
  5121                           ; BSR set to: 0
  5122  003370  0C07               	retlw	7
  5123  003372                     __end_of_doActionOff:
  5124                           	opt stack 0
  5125                           tblptru	equ	0xFF8
  5126                           tblptrh	equ	0xFF7
  5127                           tblptrl	equ	0xFF6
  5128                           tablat	equ	0xFF5
  5129                           prodh	equ	0xFF4
  5130                           prodl	equ	0xFF3
  5131                           intcon	equ	0xFF2
  5132                           postinc0	equ	0xFEE
  5133                           wreg	equ	0xFE8
  5134                           indf1	equ	0xFE7
  5135                           fsr1h	equ	0xFE2
  5136                           fsr1l	equ	0xFE1
  5137                           indf2	equ	0xFDF
  5138                           postinc2	equ	0xFDE
  5139                           postdec2	equ	0xFDD
  5140                           plusw2	equ	0xFDB
  5141                           fsr2h	equ	0xFDA
  5142                           fsr2l	equ	0xFD9
  5143                           status	equ	0xFD8
  5144                           
  5145 ;; *************** function _vscp_handleProtocolEvent *****************
  5146 ;; Defined at:
  5147 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  5148 ;; Parameters:    Size  Location     Type
  5149 ;;		None
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;  bytes           1   45[BANK0 ] unsigned char 
  5152 ;;  page_save       2   41[BANK0 ] unsigned short 
  5153 ;;  i               1   51[BANK0 ] unsigned char 
  5154 ;;  bytes           2   55[BANK0 ] unsigned short 
  5155 ;;  page_save       2   39[BANK0 ] unsigned short 
  5156 ;;  byte            1   54[BANK0 ] unsigned char 
  5157 ;;  cb              1   50[BANK0 ] unsigned char 
  5158 ;;  bytes_this_t    1   49[BANK0 ] unsigned char 
  5159 ;;  j               1   59[BANK0 ] unsigned char 
  5160 ;;  i               1   57[BANK0 ] unsigned char 
  5161 ;;  k               1   52[BANK0 ] unsigned char 
  5162 ;;  i               1   53[BANK0 ] unsigned char 
  5163 ;;  len             1   48[BANK0 ] unsigned char 
  5164 ;;  pos             1   47[BANK0 ] unsigned char 
  5165 ;;  i               1   58[BANK0 ] unsigned char 
  5166 ;;  len             1   46[BANK0 ] unsigned char 
  5167 ;;  pos             1   44[BANK0 ] unsigned char 
  5168 ;;  offset          1   43[BANK0 ] unsigned char 
  5169 ;; Return value:  Size  Location     Type
  5170 ;;		None               void
  5171 ;; Registers used:
  5172 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5173 ;; Tracked objects:
  5174 ;;		On entry : F/0
  5175 ;;		On exit  : 0/0
  5176 ;;		Unchanged: 0/0
  5177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5178 ;;      Params:         0       0       0       0       0       0       0
  5179 ;;      Locals:         0      21       0       0       0       0       0
  5180 ;;      Temps:          0       7       0       0       0       0       0
  5181 ;;      Totals:         0      28       0       0       0       0       0
  5182 ;;Total ram usage:       28 bytes
  5183 ;; Hardware stack levels used:    1
  5184 ;; Hardware stack levels required when called:    9
  5185 ;; This function calls:
  5186 ;;		_vscp_init
  5187 ;;		_vscp_readAppReg
  5188 ;;		_vscp_writeAppReg
  5189 ;;		_vscp_sendEvent
  5190 ;;		_vscp_getGUID
  5191 ;;		_vscp_getMDF_URL
  5192 ;;		_vscp_goBootloaderMode
  5193 ;;		_vscp_getMatrixInfo
  5194 ;;		_vscp_handleHeartbeat
  5195 ;;		_vscp_handleSetNickname
  5196 ;;		_vscp_handleDropNickname
  5197 ;;		_vscp_newNodeOnline
  5198 ;;		_vscp_readRegister
  5199 ;;		_vscp_readStdReg
  5200 ;;		_vscp_writeRegister
  5201 ;;		_vscp_writeStdReg
  5202 ;;		___lbmod
  5203 ;; This function is called by:
  5204 ;;		_main
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           	psect	text15
  5209  000EE6                     __ptext15:
  5210                           	opt stack 0
  5211  000EE6                     _vscp_handleProtocolEvent:
  5212                           	opt stack 21
  5213                           
  5214                           ; BSR set to: 0
  5215                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  5216                           
  5217                           ; BSR set to: 0
  5218                           ;incstack = 0
  5219                           ;incstack = 0
  5220  000EE6  5198               	movf	(_vscp_imsg+3)& (0+255),w,b
  5221  000EE8  1197               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  5222  000EEA  E101 D2B5          	bz	l10271
  5223  000EEE  D2E4               	goto	l1291
  5224  000EF0                     l9853:
  5225                           
  5226                           ; BSR set to: 0
  5227                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  5228  000EF0  EC52  F01C         	call	_vscp_handleHeartbeat	;wreg free
  5229                           
  5230                           ;vscp_firmware.c: 807: break;
  5231  000EF4  D2E1               	goto	l1291
  5232  000EF6                     l9855:
  5233                           
  5234                           ; BSR set to: 0
  5235                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  5236  000EF6  ECEF  F01C         	call	_vscp_newNodeOnline	;wreg free
  5237                           
  5238                           ;vscp_firmware.c: 812: break;
  5239  000EFA  D2DE               	goto	l1291
  5240  000EFC                     l9857:
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  5244  000EFC  EC79  F01D         	call	_vscp_handleSetNickname	;wreg free
  5245                           
  5246                           ;vscp_firmware.c: 817: break;
  5247  000F00  D2DB               	goto	l1291
  5248  000F02                     l9859:
  5249                           
  5250                           ; BSR set to: 0
  5251                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  5252  000F02  ECAA  F01C         	call	_vscp_handleDropNickname	;wreg free
  5253                           
  5254                           ;vscp_firmware.c: 822: break;
  5255  000F06  D2D8               	goto	l1291
  5256  000F08                     l9861:
  5257                           
  5258                           ; BSR set to: 0
  5259                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  5260                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5261  000F08  5195               	movf	_vscp_imsg& (0+255),w,b
  5262  000F0A  0B0F               	andlw	15
  5263  000F0C  0A02               	xorlw	2
  5264  000F0E  E001 D2D3          	bnz	l1291
  5265                           
  5266                           ; BSR set to: 0
  5267  000F12  5190               	movf	_vscp_nickname& (0+255),w,b
  5268  000F14  EE20  F09B         	lfsr	2,_vscp_imsg+6
  5269  000F18  62DF               	cpfseq	indf2,c
  5270  000F1A  D2CE               	goto	l1291
  5271                           
  5272                           ; BSR set to: 0
  5273                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  5274  000F1C  0E80               	movlw	128
  5275  000F1E  619C               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5276  000F20  D012               	goto	l9881
  5277                           
  5278                           ; BSR set to: 0
  5279                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  5280  000F22  519C               	movf	(_vscp_imsg+7)& (0+255),w,b
  5281  000F24  EC71  F01A         	call	_vscp_readAppReg
  5282  000F28                     L13:
  5283  000F28  0100               	movlb	0	; () banked
  5284  000F2A                     L14:
  5285  000F2A  6FA9               	movwf	(_vscp_omsg+6)& (0+255),b
  5286                           
  5287                           ; BSR set to: 0
  5288                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  5289  000F2C  C09C  F0A8         	movff	_vscp_imsg+7,_vscp_omsg+5
  5290                           
  5291                           ; BSR set to: 0
  5292                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  5293  000F30  0E03               	movlw	3
  5294  000F32  6FA4               	movwf	(_vscp_omsg+1)& (0+255),b
  5295                           
  5296                           ; BSR set to: 0
  5297                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  5298  000F34  0E82               	movlw	130
  5299  000F36  6FA3               	movwf	_vscp_omsg& (0+255),b
  5300                           
  5301                           ; BSR set to: 0
  5302                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  5303  000F38  6BA5               	clrf	(_vscp_omsg+2)& (0+255),b
  5304  000F3A  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
  5305                           
  5306                           ; BSR set to: 0
  5307                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  5308  000F3C  0E0A               	movlw	10
  5309  000F3E  6FA7               	movwf	(_vscp_omsg+4)& (0+255),b
  5310  000F40                     l9879:
  5311                           
  5312                           ; BSR set to: 0
  5313                           ;vscp_firmware.c: 843: vscp_sendEvent();
  5314  000F40  EC66  F01D         	call	_vscp_sendEvent	;wreg free
  5315                           
  5316                           ;vscp_firmware.c: 844: }
  5317  000F44  D2B9               	goto	l1291
  5318  000F46                     l9881:
  5319                           
  5320                           ; BSR set to: 0
  5321                           ;vscp_firmware.c: 845: else {
  5322                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  5323                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  5324  000F46  519C               	movf	(_vscp_imsg+7)& (0+255),w,b
  5325  000F48  EC0A  F014         	call	_vscp_readStdReg
  5326  000F4C  D7ED               	goto	L13
  5327  000F4E                     l9895:
  5328                           
  5329                           ; BSR set to: 0
  5330                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  5331                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5332  000F4E  5195               	movf	_vscp_imsg& (0+255),w,b
  5333  000F50  0B0F               	andlw	15
  5334  000F52  0A03               	xorlw	3
  5335  000F54  E001 D2B0          	bnz	l1291
  5336                           
  5337                           ; BSR set to: 0
  5338  000F58  5190               	movf	_vscp_nickname& (0+255),w,b
  5339  000F5A  EE20  F09B         	lfsr	2,_vscp_imsg+6
  5340  000F5E  62DF               	cpfseq	indf2,c
  5341  000F60  D2AB               	goto	l1291
  5342                           
  5343                           ; BSR set to: 0
  5344                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  5345  000F62  0E80               	movlw	128
  5346  000F64  619C               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5347  000F66  D006               	goto	l9915
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  5351                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5352  000F68  C09D  F051         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  5353  000F6C  519C               	movf	(_vscp_imsg+7)& (0+255),w,b
  5354  000F6E  EC11  F003         	call	_vscp_writeAppReg
  5355  000F72  D7DB               	goto	L14
  5356  000F74                     l9915:
  5357                           
  5358                           ; BSR set to: 0
  5359                           ;vscp_firmware.c: 888: else {
  5360                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  5361                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5362  000F74  C09D  F010         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  5363  000F78  519C               	movf	(_vscp_imsg+7)& (0+255),w,b
  5364  000F7A  ECD8  F017         	call	_vscp_writeStdReg
  5365  000F7E  D7D4               	goto	L13
  5366  000F80                     l9929:
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  5370                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  5371                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  5372                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  5373                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  5374                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  5375                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  5376  000F80  5190               	movf	_vscp_nickname& (0+255),w,b
  5377  000F82  EE20  F09B         	lfsr	2,_vscp_imsg+6
  5378  000F86  62DF               	cpfseq	indf2,c
  5379  000F88  D297               	goto	l1291
  5380                           
  5381                           ; BSR set to: 0
  5382  000F8A  0E00               	movlw	0
  5383  000F8C  EC63  F01E         	call	_vscp_getGUID
  5384  000F90  0100               	movlb	0	; () banked
  5385  000F92  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5386  000F94  E001 D290          	bnz	l1291
  5387                           
  5388                           ; BSR set to: 0
  5389  000F98  0E03               	movlw	3
  5390  000F9A  EC63  F01E         	call	_vscp_getGUID
  5391  000F9E  0100               	movlb	0	; () banked
  5392  000FA0  199E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5393  000FA2  E001 D289          	bnz	l1291
  5394                           
  5395                           ; BSR set to: 0
  5396  000FA6  0E05               	movlw	5
  5397  000FA8  EC63  F01E         	call	_vscp_getGUID
  5398  000FAC  0100               	movlb	0	; () banked
  5399  000FAE  199F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5400  000FB0  E001 D282          	bnz	l1291
  5401                           
  5402                           ; BSR set to: 0
  5403  000FB4  0E07               	movlw	7
  5404  000FB6  EC63  F01E         	call	_vscp_getGUID
  5405  000FBA  0100               	movlb	0	; () banked
  5406  000FBC  19A0               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  5407  000FBE  E001 D27B          	bnz	l1291
  5408                           
  5409                           ; BSR set to: 0
  5410  000FC2  5053               	movf	_vscp_page_select+1,w,c
  5411  000FC4  19A1               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  5412  000FC6  E001 D277          	bnz	l1291
  5413                           
  5414                           ; BSR set to: 0
  5415  000FCA  5052               	movf	_vscp_page_select,w,c
  5416  000FCC  EE20  F0A2         	lfsr	2,_vscp_imsg+13
  5417  000FD0  62DF               	cpfseq	indf2,c
  5418  000FD2  D272               	goto	l1291
  5419                           
  5420                           ; BSR set to: 0
  5421                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  5422  000FD4  519C               	movf	(_vscp_imsg+7)& (0+255),w,b
  5423  000FD6  ECFB  F01D         	call	_vscp_goBootloaderMode
  5424  000FDA  D26E               	goto	l1291
  5425  000FDC                     l9945:
  5426                           
  5427                           ; BSR set to: 0
  5428                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  5429                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  5430                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  5431                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  5432  000FDC  0E00               	movlw	0
  5433  000FDE  EC63  F01E         	call	_vscp_getGUID
  5434  000FE2  0100               	movlb	0	; () banked
  5435  000FE4  199C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5436  000FE6  E173               	bnz	l9989
  5437                           
  5438                           ; BSR set to: 0
  5439  000FE8  0E01               	movlw	1
  5440  000FEA  EC63  F01E         	call	_vscp_getGUID
  5441  000FEE  0100               	movlb	0	; () banked
  5442  000FF0  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5443  000FF2  E16D               	bnz	l9989
  5444                           
  5445                           ; BSR set to: 0
  5446  000FF4  0E02               	movlw	2
  5447  000FF6  EC63  F01E         	call	_vscp_getGUID
  5448  000FFA  0100               	movlb	0	; () banked
  5449  000FFC  199E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5450  000FFE  E167               	bnz	l9989
  5451                           
  5452                           ; BSR set to: 0
  5453  001000  0E03               	movlw	3
  5454  001002  EC63  F01E         	call	_vscp_getGUID
  5455  001006  0100               	movlb	0	; () banked
  5456  001008  199F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5457  00100A  E161               	bnz	l9989
  5458                           
  5459                           ; BSR set to: 0
  5460                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  5461  00100C  898C               	bsf	_vscp_guid_reset& (0+255),4,b
  5462  00100E  D05F               	goto	l9989
  5463  001010                     l9955:
  5464                           
  5465                           ; BSR set to: 0
  5466                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  5467                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  5468                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  5469                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  5470  001010  0E04               	movlw	4
  5471  001012  EC63  F01E         	call	_vscp_getGUID
  5472  001016  0100               	movlb	0	; () banked
  5473  001018  199C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5474  00101A  E159               	bnz	l9989
  5475                           
  5476                           ; BSR set to: 0
  5477  00101C  0E05               	movlw	5
  5478  00101E  EC63  F01E         	call	_vscp_getGUID
  5479  001022  0100               	movlb	0	; () banked
  5480  001024  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5481  001026  E153               	bnz	l9989
  5482                           
  5483                           ; BSR set to: 0
  5484  001028  0E06               	movlw	6
  5485  00102A  EC63  F01E         	call	_vscp_getGUID
  5486  00102E  0100               	movlb	0	; () banked
  5487  001030  199E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5488  001032  E14D               	bnz	l9989
  5489                           
  5490                           ; BSR set to: 0
  5491  001034  0E07               	movlw	7
  5492  001036  EC63  F01E         	call	_vscp_getGUID
  5493  00103A  0100               	movlb	0	; () banked
  5494  00103C  199F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5495  00103E  E147               	bnz	l9989
  5496                           
  5497                           ; BSR set to: 0
  5498                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  5499  001040  8B8C               	bsf	_vscp_guid_reset& (0+255),5,b
  5500  001042  D045               	goto	l9989
  5501  001044                     l9965:
  5502                           
  5503                           ; BSR set to: 0
  5504                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  5505                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  5506                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  5507                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  5508  001044  0E08               	movlw	8
  5509  001046  EC63  F01E         	call	_vscp_getGUID
  5510  00104A  0100               	movlb	0	; () banked
  5511  00104C  199C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5512  00104E  E13F               	bnz	l9989
  5513                           
  5514                           ; BSR set to: 0
  5515  001050  0E09               	movlw	9
  5516  001052  EC63  F01E         	call	_vscp_getGUID
  5517  001056  0100               	movlb	0	; () banked
  5518  001058  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5519  00105A  E139               	bnz	l9989
  5520                           
  5521                           ; BSR set to: 0
  5522  00105C  0E0A               	movlw	10
  5523  00105E  EC63  F01E         	call	_vscp_getGUID
  5524  001062  0100               	movlb	0	; () banked
  5525  001064  199E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5526  001066  E133               	bnz	l9989
  5527                           
  5528                           ; BSR set to: 0
  5529  001068  0E0B               	movlw	11
  5530  00106A  EC63  F01E         	call	_vscp_getGUID
  5531  00106E  0100               	movlb	0	; () banked
  5532  001070  199F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5533  001072  E12D               	bnz	l9989
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  5537  001074  8D8C               	bsf	_vscp_guid_reset& (0+255),6,b
  5538  001076  D02B               	goto	l9989
  5539  001078                     l9975:
  5540                           
  5541                           ; BSR set to: 0
  5542                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  5543                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  5544                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  5545                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  5546  001078  0E0C               	movlw	12
  5547  00107A  EC63  F01E         	call	_vscp_getGUID
  5548  00107E  0100               	movlb	0	; () banked
  5549  001080  199C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5550  001082  E125               	bnz	l9989
  5551                           
  5552                           ; BSR set to: 0
  5553  001084  0E0D               	movlw	13
  5554  001086  EC63  F01E         	call	_vscp_getGUID
  5555  00108A  0100               	movlb	0	; () banked
  5556  00108C  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5557  00108E  E11F               	bnz	l9989
  5558                           
  5559                           ; BSR set to: 0
  5560  001090  0E0E               	movlw	14
  5561  001092  EC63  F01E         	call	_vscp_getGUID
  5562  001096  0100               	movlb	0	; () banked
  5563  001098  199E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5564  00109A  E119               	bnz	l9989
  5565                           
  5566                           ; BSR set to: 0
  5567  00109C  0E0F               	movlw	15
  5568  00109E  EC63  F01E         	call	_vscp_getGUID
  5569  0010A2  0100               	movlb	0	; () banked
  5570  0010A4  199F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5571  0010A6  E113               	bnz	l9989
  5572                           
  5573                           ; BSR set to: 0
  5574                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  5575  0010A8  8F8C               	bsf	_vscp_guid_reset& (0+255),7,b
  5576  0010AA  D011               	goto	l9989
  5577  0010AC                     l1231:
  5578                           
  5579                           ; BSR set to: 0
  5580                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  5581  0010AC  6B8C               	clrf	_vscp_guid_reset& (0+255),b
  5582                           
  5583                           ;vscp_firmware.c: 965: break;
  5584  0010AE  D00F               	goto	l9989
  5585  0010B0                     l9987:
  5586                           
  5587                           ; BSR set to: 0
  5588  0010B0  399B               	swapf	(_vscp_imsg+6)& (0+255),w,b
  5589  0010B2  0B0F               	andlw	15
  5590  0010B4  6FD0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5591  0010B6  6BD1               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5592                           
  5593                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5594                           ; Switch size 1, requested type "space"
  5595                           ; Number of cases is 1, Range of values is 0 to 0
  5596                           ; switch strategies available:
  5597                           ; Name         Instructions Cycles
  5598                           ; simple_byte            4     3 (average)
  5599                           ;	Chosen strategy is simple_byte
  5600  0010B8  51D1               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5601  0010BA  E1F8               	bnz	l1231
  5602                           
  5603                           ; BSR set to: 0
  5604                           ; Switch size 1, requested type "space"
  5605                           ; Number of cases is 4, Range of values is 0 to 3
  5606                           ; switch strategies available:
  5607                           ; Name         Instructions Cycles
  5608                           ; simple_byte           13     7 (average)
  5609                           ;	Chosen strategy is simple_byte
  5610  0010BC  51D0               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5611  0010BE  E08E               	bz	l9945
  5612  0010C0  0A01               	xorlw	1	; case 1
  5613  0010C2  E0A6               	bz	l9955
  5614  0010C4  0A03               	xorlw	3	; case 2
  5615  0010C6  E0BE               	bz	l9965
  5616  0010C8  0A01               	xorlw	1	; case 3
  5617  0010CA  E0D6               	bz	l9975
  5618  0010CC  D7EF               	goto	l1231
  5619  0010CE                     l9989:
  5620                           
  5621                           ; BSR set to: 0
  5622                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  5623  0010CE  518C               	movf	_vscp_guid_reset& (0+255),w,b
  5624  0010D0  0BF0               	andlw	240
  5625  0010D2  0AF0               	xorlw	240
  5626  0010D4  E001 D1F0          	bnz	l1291
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;vscp_firmware.c: 970: vscp_init();
  5630  0010D8  EC30  F01C         	call	_vscp_init	;wreg free
  5631  0010DC  D1ED               	goto	l1291
  5632  0010DE                     l9993:
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5636  0010DE  5190               	movf	_vscp_nickname& (0+255),w,b
  5637  0010E0  EE20  F09B         	lfsr	2,_vscp_imsg+6
  5638  0010E4  62DF               	cpfseq	indf2,c
  5639  0010E6  D1E8               	goto	l1291
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;vscp_firmware.c: 978: uint8_t i;
  5643                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  5644  0010E8  6BDC               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  5645                           
  5646                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  5647  0010EA  C09C  F0DB         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  5648                           
  5649                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  5650  0010EE  C09D  F0DE         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  5651                           
  5652                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  5653  0010F2  6BEA               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  5654  0010F4  D042               	goto	l10025
  5655  0010F6                     l9997:
  5656                           
  5657                           ; BSR set to: 0
  5658                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  5659  0010F6  0E07               	movlw	7
  5660  0010F8  6E08               	movwf	?___lbmod,c
  5661  0010FA  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5662  0010FC  EC19  F01D         	call	___lbmod
  5663  001100  0100               	movlb	0	; () banked
  5664  001102  6FD0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5665  001104  51D0               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5666  001106  0FA9               	addlw	low (_vscp_omsg+6)
  5667  001108  6ED9               	movwf	fsr2l,c
  5668  00110A  6ADA               	clrf	fsr2h,c
  5669  00110C  51DB               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  5670  00110E  25EA               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5671  001110  EC09  F01E         	call	_vscp_readRegister
  5672  001114  6EDF               	movwf	indf2,c
  5673                           
  5674                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  5675  001116  0E07               	movlw	7
  5676  001118  6E08               	movwf	?___lbmod,c
  5677  00111A  0100               	movlb	0	; () banked
  5678  00111C  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5679  00111E  EC19  F01D         	call	___lbmod
  5680  001122  0A06               	xorlw	6
  5681  001124  E00B               	bz	l10003
  5682  001126  0EFF               	movlw	255
  5683  001128  0100               	movlb	0	; () banked
  5684  00112A  25DE               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  5685  00112C  6FD0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5686  00112E  6BD1               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5687  001130  0EFF               	movlw	255
  5688  001132  23D1               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  5689  001134  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5690  001136  19D0               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5691  001138  11D1               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5692  00113A  E11E               	bnz	l10023
  5693  00113C                     l10003:
  5694                           
  5695                           ;vscp_firmware.c: 988: uint8_t bytes;
  5696                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  5697  00113C  0E07               	movlw	7
  5698  00113E  6E08               	movwf	?___lbmod,c
  5699  001140  0100               	movlb	0	; () banked
  5700  001142  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5701  001144  EC19  F01D         	call	___lbmod
  5702  001148  0A06               	xorlw	6
  5703  00114A  E103               	bnz	l10007
  5704                           
  5705                           ;vscp_firmware.c: 991: bytes = 7;
  5706  00114C  0E07               	movlw	7
  5707  00114E  0100               	movlb	0	; () banked
  5708  001150  D009               	goto	L15
  5709  001152                     l10007:
  5710                           
  5711                           ;vscp_firmware.c: 993: else {
  5712                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  5713  001152  0E07               	movlw	7
  5714  001154  6E08               	movwf	?___lbmod,c
  5715  001156  0100               	movlb	0	; () banked
  5716  001158  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5717  00115A  EC19  F01D         	call	___lbmod
  5718  00115E  0100               	movlb	0	; () banked
  5719  001160  6FD0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5720  001162  29D0               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5721  001164                     L15:
  5722  001164  6FDD               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;vscp_firmware.c: 995: }
  5726                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  5727  001166  51DD               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  5728  001168  0F81               	addlw	129
  5729  00116A  6FA3               	movwf	_vscp_omsg& (0+255),b
  5730                           
  5731                           ; BSR set to: 0
  5732                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  5733                           
  5734                           ; BSR set to: 0
  5735                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  5736                           
  5737                           ; BSR set to: 0
  5738                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  5739  00116C  D9BC               	call	PL70	;call to abstracted procedure
  5740                           
  5741                           ; BSR set to: 0
  5742                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  5743  00116E  C0DC  F0A8         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  5747  001172  EC66  F01D         	call	_vscp_sendEvent	;wreg free
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;vscp_firmware.c: 1005: pos++;
  5751  001176  2BDC               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  5752  001178                     l10023:
  5753                           
  5754                           ; BSR set to: 0
  5755  001178  2BEA               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  5756  00117A                     l10025:
  5757                           
  5758                           ; BSR set to: 0
  5759  00117A  51DE               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  5760  00117C  5DEA               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5761  00117E  E301 D19B          	bc	l1291
  5762  001182  D7B9               	goto	l9997
  5763  001184                     l10027:
  5764                           
  5765                           ; BSR set to: 0
  5766                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5767  001184  5190               	movf	_vscp_nickname& (0+255),w,b
  5768  001186  EE20  F09B         	lfsr	2,_vscp_imsg+6
  5769  00118A  62DF               	cpfseq	indf2,c
  5770  00118C  D195               	goto	l1291
  5771                           
  5772                           ; BSR set to: 0
  5773                           ;vscp_firmware.c: 1014: uint8_t i;
  5774                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  5775  00118E  C09C  F0DF         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1283
  5776                           
  5777                           ; BSR set to: 0
  5778                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  5779  001192  5195               	movf	_vscp_imsg& (0+255),w,b
  5780  001194  0FFE               	addlw	254
  5781  001196  0B07               	andlw	7
  5782  001198  6FE0               	movwf	vscp_handleProtocolEvent@len_1284& (0+255),b
  5783                           
  5784                           ; BSR set to: 0
  5785                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  5786  00119A  6BE5               	clrf	vscp_handleProtocolEvent@i_1282& (0+255),b
  5787  00119C  D016               	goto	l10041
  5788  00119E                     l10035:
  5789                           
  5790                           ; BSR set to: 0
  5791                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  5792  00119E  51E5               	movf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5793  0011A0  0F9D               	addlw	low (_vscp_imsg+8)
  5794  0011A2  6ED9               	movwf	fsr2l,c
  5795  0011A4  6ADA               	clrf	fsr2h,c
  5796  0011A6  50DF               	movf	indf2,w,c
  5797  0011A8  6FCE               	movwf	?_vscp_writeRegister& (0+255),b
  5798  0011AA  51DF               	movf	vscp_handleProtocolEvent@pos_1283& (0+255),w,b
  5799  0011AC  25E5               	addwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5800  0011AE  ECAE  F01D         	call	_vscp_writeRegister
  5801                           
  5802                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  5803  0011B2  0100               	movlb	0	; () banked
  5804  0011B4  51E5               	movf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5805  0011B6  0FA9               	addlw	low (_vscp_omsg+6)
  5806  0011B8  6ED9               	movwf	fsr2l,c
  5807  0011BA  6ADA               	clrf	fsr2h,c
  5808  0011BC  51DF               	movf	vscp_handleProtocolEvent@pos_1283& (0+255),w,b
  5809  0011BE  25E5               	addwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5810  0011C0  EC09  F01E         	call	_vscp_readRegister
  5811  0011C4  6EDF               	movwf	indf2,c
  5812  0011C6  0100               	movlb	0	; () banked
  5813  0011C8  2BE5               	incf	vscp_handleProtocolEvent@i_1282& (0+255),f,b
  5814  0011CA                     l10041:
  5815                           
  5816                           ; BSR set to: 0
  5817  0011CA  51E0               	movf	vscp_handleProtocolEvent@len_1284& (0+255),w,b
  5818  0011CC  5DE5               	subwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5819  0011CE  E3E7               	bnc	l10035
  5820                           
  5821                           ; BSR set to: 0
  5822                           ;vscp_firmware.c: 1022: }
  5823                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  5827                           
  5828                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  5829  0011D0  D98A               	call	PL70	;call to abstracted procedure
  5830                           
  5831                           ; BSR set to: 0
  5832                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  5833  0011D2  6BA8               	clrf	(_vscp_omsg+5)& (0+255),b
  5834                           
  5835                           ; BSR set to: 0
  5836                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  5837  0011D4  51E0               	movf	vscp_handleProtocolEvent@len_1284& (0+255),w,b
  5838  0011D6  0F81               	addlw	129
  5839  0011D8  6FA3               	movwf	_vscp_omsg& (0+255),b
  5840  0011DA  D6B2               	goto	l9879
  5841  0011DC                     l10053:
  5842                           
  5843                           ; BSR set to: 0
  5844                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5845  0011DC  5190               	movf	_vscp_nickname& (0+255),w,b
  5846  0011DE  EE20  F09B         	lfsr	2,_vscp_imsg+6
  5847  0011E2  62DF               	cpfseq	indf2,c
  5848  0011E4  D169               	goto	l1291
  5849                           
  5850                           ; BSR set to: 0
  5851                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5852                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  5853                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  5854  0011E6  519C               	movf	(_vscp_imsg+7)& (0+255),w,b
  5855  0011E8  EC71  F01A         	call	_vscp_readAppReg
  5856  0011EC  0100               	movlb	0	; () banked
  5857  0011EE  6FD0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5858  0011F0  29D0               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5859  0011F2  6E51               	movwf	?_vscp_writeAppReg,c
  5860  0011F4  519C               	movf	(_vscp_imsg+7)& (0+255),w,b
  5861  0011F6  EC11  F003         	call	_vscp_writeAppReg
  5862  0011FA  D697               	goto	L14
  5863  0011FC                     l10069:
  5864                           
  5865                           ; BSR set to: 0
  5866                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5867  0011FC  5190               	movf	_vscp_nickname& (0+255),w,b
  5868  0011FE  EE20  F09B         	lfsr	2,_vscp_imsg+6
  5869  001202  62DF               	cpfseq	indf2,c
  5870  001204  D159               	goto	l1291
  5871                           
  5872                           ; BSR set to: 0
  5873                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5874                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  5875                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  5876  001206  519C               	movf	(_vscp_imsg+7)& (0+255),w,b
  5877  001208  EC71  F01A         	call	_vscp_readAppReg
  5878  00120C  0100               	movlb	0	; () banked
  5879  00120E  6FD0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5880  001210  05D0               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  5881  001212  6E51               	movwf	?_vscp_writeAppReg,c
  5882  001214  519C               	movf	(_vscp_imsg+7)& (0+255),w,b
  5883  001216  EC11  F003         	call	_vscp_writeAppReg
  5884  00121A  D687               	goto	L14
  5885  00121C                     l10085:
  5886                           
  5887                           ; BSR set to: 0
  5888                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  5889                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  5890  00121C  519B               	movf	(_vscp_imsg+6)& (0+255),w,b
  5891  00121E  1990               	xorwf	_vscp_nickname& (0+255),w,b
  5892  001220  E003               	bz	l1255
  5893                           
  5894                           ; BSR set to: 0
  5895  001222  299B               	incf	(_vscp_imsg+6)& (0+255),w,b
  5896  001224  E001 D148          	bnz	l1291
  5897  001228                     l1255:
  5898                           
  5899                           ; BSR set to: 0
  5900                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  5901  001228  6BE4               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  5902                           
  5903                           ; BSR set to: 0
  5904                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  5905  00122A  0E03               	movlw	3
  5906  00122C  6FA4               	movwf	(_vscp_omsg+1)& (0+255),b
  5907                           
  5908                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  5909  00122E  0E88               	movlw	136
  5910  001230  6FA3               	movwf	_vscp_omsg& (0+255),b
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  5914  001232  6BA5               	clrf	(_vscp_omsg+2)& (0+255),b
  5915  001234  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
  5916                           
  5917                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  5918  001236  0E20               	movlw	32
  5919  001238  6FA7               	movwf	(_vscp_omsg+4)& (0+255),b
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  5923  00123A  6BE9               	clrf	vscp_handleProtocolEvent@i_1285& (0+255),b
  5924  00123C                     l1256:
  5925                           
  5926                           ; BSR set to: 0
  5927                           ;vscp_firmware.c: 1091: {
  5928                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  5929                           
  5930                           ; BSR set to: 0
  5931                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  5932  00123C  D95B               	call	PL80	;call to abstracted procedure
  5933  00123E                     l10105:
  5934                           
  5935                           ; BSR set to: 0
  5936                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  5937  00123E  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5938  001240  0FA8               	addlw	low (_vscp_omsg+5)
  5939  001242  6ED9               	movwf	fsr2l,c
  5940  001244  6ADA               	clrf	fsr2h,c
  5941  001246  51E4               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5942  001248  080F               	sublw	15
  5943  00124A  EC63  F01E         	call	_vscp_getGUID
  5944  00124E  6EDF               	movwf	indf2,c
  5945  001250  0100               	movlb	0	; () banked
  5946  001252  2BE4               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5947                           
  5948                           ; BSR set to: 0
  5949                           ;vscp_firmware.c: 1096: if (k > 16)
  5950  001254  0E10               	movlw	16
  5951  001256  65E4               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5952  001258  D001               	goto	l10113
  5953  00125A  D004               	goto	l10117
  5954  00125C                     l10113:
  5955                           
  5956                           ; BSR set to: 0
  5957  00125C  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5958                           
  5959                           ; BSR set to: 0
  5960  00125E  0E07               	movlw	7
  5961  001260  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5962  001262  D7ED               	goto	l10105
  5963  001264                     l10117:
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;vscp_firmware.c: 1098: }
  5967                           ;vscp_firmware.c: 1100: if (k > 16)
  5968  001264  0E10               	movlw	16
  5969  001266  65E4               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5970  001268  D001               	goto	l10121
  5971  00126A  D006               	goto	l1257
  5972  00126C                     l10121:
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  5976  00126C  EC66  F01D         	call	_vscp_sendEvent	;wreg free
  5977                           
  5978                           ; BSR set to: 0
  5979  001270  2BE9               	incf	vscp_handleProtocolEvent@i_1285& (0+255),f,b
  5980                           
  5981                           ; BSR set to: 0
  5982  001272  0E02               	movlw	2
  5983  001274  65E9               	cpfsgt	vscp_handleProtocolEvent@i_1285& (0+255),b
  5984  001276  D7E2               	goto	l1256
  5985  001278                     l1257:
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;vscp_firmware.c: 1104: }
  5989                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  5990  001278  6BEB               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  5991  00127A                     l10131:
  5992                           
  5993                           ; BSR set to: 0
  5994                           ;vscp_firmware.c: 1107: {
  5995                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  5996  00127A  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5997  00127C  EC16  F01E         	call	_vscp_getMDF_URL
  5998  001280  0900               	iorlw	0
  5999  001282  E008               	bz	l10135
  6000                           
  6001                           ; BSR set to: 0
  6002                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  6003  001284  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  6004  001286  0FAB               	addlw	low (_vscp_omsg+8)
  6005  001288  6ED9               	movwf	fsr2l,c
  6006  00128A  6ADA               	clrf	fsr2h,c
  6007  00128C  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  6008  00128E  EC16  F01E         	call	_vscp_getMDF_URL
  6009  001292  D005               	goto	L16
  6010  001294                     l10135:
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;vscp_firmware.c: 1110: else
  6014                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  6015  001294  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  6016  001296  0FAB               	addlw	low (_vscp_omsg+8)
  6017  001298  6ED9               	movwf	fsr2l,c
  6018  00129A  6ADA               	clrf	fsr2h,c
  6019  00129C  0E00               	movlw	0
  6020  00129E                     L16:
  6021  00129E  6EDF               	movwf	indf2,c
  6022                           
  6023                           ; BSR set to: 0
  6024  0012A0  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  6025                           
  6026                           ; BSR set to: 0
  6027  0012A2  0E04               	movlw	4
  6028  0012A4  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  6029  0012A6  D7E9               	goto	l10131
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;vscp_firmware.c: 1112: }
  6033                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  6034  0012A8  EC66  F01D         	call	_vscp_sendEvent	;wreg free
  6035                           
  6036                           ; BSR set to: 0
  6037                           ;vscp_firmware.c: 1116: k = 5;
  6038  0012AC  0E05               	movlw	5
  6039  0012AE  6FE4               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  6040                           
  6041                           ; BSR set to: 0
  6042                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  6043  0012B0  0E03               	movlw	3
  6044  0012B2  6FE9               	movwf	vscp_handleProtocolEvent@i_1285& (0+255),b
  6045  0012B4                     l1266:
  6046                           
  6047                           ; BSR set to: 0
  6048                           ;vscp_firmware.c: 1118: {
  6049                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  6050                           
  6051                           ; BSR set to: 0
  6052                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  6053  0012B4  D91F               	call	PL80	;call to abstracted procedure
  6054  0012B6                     l10157:
  6055                           
  6056                           ; BSR set to: 0
  6057                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  6058  0012B6  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  6059  0012B8  0FA8               	addlw	low (_vscp_omsg+5)
  6060  0012BA  6ED9               	movwf	fsr2l,c
  6061  0012BC  6ADA               	clrf	fsr2h,c
  6062  0012BE  51E4               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  6063  0012C0  EC16  F01E         	call	_vscp_getMDF_URL
  6064  0012C4  6EDF               	movwf	indf2,c
  6065                           
  6066                           ; BSR set to: 0
  6067  0012C6  2BE4               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  6068                           
  6069                           ; BSR set to: 0
  6070  0012C8  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  6071                           
  6072                           ; BSR set to: 0
  6073  0012CA  0E07               	movlw	7
  6074  0012CC  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  6075  0012CE  D7F3               	goto	l10157
  6076                           
  6077                           ; BSR set to: 0
  6078                           ;vscp_firmware.c: 1123: }
  6079                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  6080  0012D0  EC66  F01D         	call	_vscp_sendEvent	;wreg free
  6081                           
  6082                           ; BSR set to: 0
  6083  0012D4  2BE9               	incf	vscp_handleProtocolEvent@i_1285& (0+255),f,b
  6084                           
  6085                           ; BSR set to: 0
  6086  0012D6  0E06               	movlw	6
  6087  0012D8  65E9               	cpfsgt	vscp_handleProtocolEvent@i_1285& (0+255),b
  6088  0012DA  D7EC               	goto	l1266
  6089  0012DC  D0ED               	goto	l1291
  6090  0012DE                     l10171:
  6091                           
  6092                           ; BSR set to: 0
  6093                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  6094  0012DE  5190               	movf	_vscp_nickname& (0+255),w,b
  6095  0012E0  EE20  F09B         	lfsr	2,_vscp_imsg+6
  6096  0012E4  62DF               	cpfseq	indf2,c
  6097  0012E6  D0E8               	goto	l1291
  6098                           
  6099                           ; BSR set to: 0
  6100                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  6101  0012E8  0E03               	movlw	3
  6102  0012EA  6FA4               	movwf	(_vscp_omsg+1)& (0+255),b
  6103                           
  6104                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  6105  0012EC  0E87               	movlw	135
  6106  0012EE  6FA3               	movwf	_vscp_omsg& (0+255),b
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  6110  0012F0  6BA5               	clrf	(_vscp_omsg+2)& (0+255),b
  6111  0012F2  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
  6112                           
  6113                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  6114  0012F4  0E22               	movlw	34
  6115  0012F6  6FA7               	movwf	(_vscp_omsg+4)& (0+255),b
  6116                           
  6117                           ; BSR set to: 0
  6118                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  6119  0012F8  0EA8               	movlw	(_vscp_omsg+5)& (0+255)
  6120  0012FA  ECBF  F01D         	call	_vscp_getMatrixInfo
  6121  0012FE  D620               	goto	l9879
  6122  001300                     l10181:
  6123                           
  6124                           ; BSR set to: 0
  6125                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  6126  001300  5190               	movf	_vscp_nickname& (0+255),w,b
  6127  001302  EE20  F09B         	lfsr	2,_vscp_imsg+6
  6128  001306  62DF               	cpfseq	indf2,c
  6129  001308  D0D7               	goto	l1291
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  6133  00130A  6BE6               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  6134                           
  6135                           ; BSR set to: 0
  6136                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  6137                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  6138  00130C  C095  F0D0         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  6139  001310  0E0F               	movlw	15
  6140  001312  17D0               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6141  001314  0E04               	movlw	4
  6142  001316  5DD0               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6143  001318  E312               	bnc	l10197
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  6147  00131A  C09F  F0E7         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1289
  6148  00131E  6BE8               	clrf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6149                           
  6150                           ; BSR set to: 0
  6151                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  6152  001320  51E8               	movf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6153  001322  11E7               	iorwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6154  001324  E103               	bnz	l10193
  6155                           
  6156                           ; BSR set to: 0
  6157  001326  0E01               	movlw	1
  6158  001328  6FE8               	movwf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6159  00132A  6BE7               	clrf	vscp_handleProtocolEvent@bytes_1289& (0+255),b
  6160  00132C                     l10193:
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  6164  00132C  0E01               	movlw	1
  6165  00132E  5DE7               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6166  001330  0E01               	movlw	1
  6167  001332  59E8               	subwfb	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6168  001334  E307               	bnc	l10199
  6169                           
  6170                           ; BSR set to: 0
  6171  001336  0E01               	movlw	1
  6172  001338  6FE8               	movwf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6173  00133A  0E00               	movlw	0
  6174  00133C  D002               	goto	L18
  6175  00133E                     l10197:
  6176                           
  6177                           ; BSR set to: 0
  6178                           ;vscp_firmware.c: 1173: else {
  6179                           ;vscp_firmware.c: 1174: bytes = 1;
  6180  00133E  6BE8               	clrf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6181  001340  0E01               	movlw	1
  6182  001342                     L18:
  6183  001342  6FE7               	movwf	vscp_handleProtocolEvent@bytes_1289& (0+255),b
  6184  001344                     l10199:
  6185                           
  6186                           ; BSR set to: 0
  6187                           ;vscp_firmware.c: 1175: }
  6188                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  6189  001344  C052  F0D7         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  6190  001348  C053  F0D8         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  6194  00134C  D8B6               	call	PL28	;call to abstracted procedure
  6195                           
  6196                           ; BSR set to: 0
  6197                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  6198  00134E  0E07               	movlw	7
  6199  001350  6FA4               	movwf	(_vscp_omsg+1)& (0+255),b
  6200                           
  6201                           ; BSR set to: 0
  6202                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  6203                           
  6204                           ; BSR set to: 0
  6205                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  6206                           
  6207                           ; BSR set to: 0
  6208                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  6212                           
  6213                           ; BSR set to: 0
  6214                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  6215  001352  D8BF               	call	PL46	;call to abstracted procedure
  6216  001354                     l10215:
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  6220  001354  51E6               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6221  001356  5DE7               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6222  001358  6FD0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6223  00135A  0E00               	movlw	0
  6224  00135C  59E8               	subwfb	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6225  00135E  6FD1               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6226  001360  0E04               	movlw	4
  6227  001362  5DD0               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6228  001364  0E00               	movlw	0
  6229  001366  59D1               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6230  001368  E302               	bnc	l10219
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  6234  00136A  0E04               	movlw	4
  6235  00136C  D002               	goto	L19
  6236  00136E                     l10219:
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;vscp_firmware.c: 1198: else {
  6240                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  6241  00136E  51E6               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6242  001370  5DE7               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6243  001372                     L19:
  6244  001372  6FE1               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;vscp_firmware.c: 1200: }
  6248                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  6249  001374  51E1               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6250  001376  0F84               	addlw	132
  6251  001378  6FA3               	movwf	_vscp_omsg& (0+255),b
  6252                           
  6253                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  6254                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  6255  00137A  519E               	movf	(_vscp_imsg+9)& (0+255),w,b
  6256  00137C  25E6               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6257  00137E  6FAB               	movwf	(_vscp_omsg+8)& (0+255),b
  6258                           
  6259                           ; BSR set to: 0
  6260                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  6261  001380  6BE2               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  6262  001382  D00C               	goto	l10227
  6263  001384                     l10223:
  6264                           
  6265                           ; BSR set to: 0
  6266                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  6267                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  6268  001384  51E2               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6269  001386  0FAC               	addlw	low (_vscp_omsg+9)
  6270  001388  6ED9               	movwf	fsr2l,c
  6271  00138A  6ADA               	clrf	fsr2h,c
  6272  00138C  519E               	movf	(_vscp_imsg+9)& (0+255),w,b
  6273  00138E  25E6               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6274  001390  25E2               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6275  001392  EC09  F01E         	call	_vscp_readRegister
  6276  001396  6EDF               	movwf	indf2,c
  6277  001398  0100               	movlb	0	; () banked
  6278  00139A  2BE2               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  6279  00139C                     l10227:
  6280                           
  6281                           ; BSR set to: 0
  6282  00139C  51E1               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6283  00139E  5DE2               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6284  0013A0  E3F1               	bnc	l10223
  6285                           
  6286                           ; BSR set to: 0
  6287                           ;vscp_firmware.c: 1211: }
  6288                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  6289  0013A2  EC66  F01D         	call	_vscp_sendEvent	;wreg free
  6290                           
  6291                           ; BSR set to: 0
  6292                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  6293  0013A6  51E1               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6294  0013A8  27E6               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  6295                           
  6296                           ; BSR set to: 0
  6297                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  6298  0013AA  2BA8               	incf	(_vscp_omsg+5)& (0+255),f,b
  6299                           
  6300                           ; BSR set to: 0
  6301                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  6302  0013AC  51E6               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6303  0013AE  6FD0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6304  0013B0  6BD1               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6305  0013B2  51E7               	movf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6306  0013B4  5DD0               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6307  0013B6  51E8               	movf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6308  0013B8  59D1               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6309  0013BA  E3CC               	bnc	l10215
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  6313  0013BC  C0D7  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  6314  0013C0  C0D8  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  6315  0013C4  D079               	goto	l1291
  6316  0013C6                     l10237:
  6317                           
  6318                           ; BSR set to: 0
  6319                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  6320  0013C6  5190               	movf	_vscp_nickname& (0+255),w,b
  6321  0013C8  EE20  F09B         	lfsr	2,_vscp_imsg+6
  6322  0013CC  62DF               	cpfseq	indf2,c
  6323  0013CE  D074               	goto	l1291
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;vscp_firmware.c: 1234: uint8_t i;
  6327                           ;vscp_firmware.c: 1235: uint16_t page_save;
  6328                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  6329  0013D0  C052  F0D9         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1294
  6330  0013D4  C053  F0DA         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1294+1
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  6334  0013D8  D870               	call	PL28	;call to abstracted procedure
  6335                           
  6336                           ; BSR set to: 0
  6337                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  6338  0013DA  C09E  F0E3         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1293
  6339                           
  6340                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  6341                           ;vscp_firmware.c: 1248: i++) {
  6342  0013DE  D014               	goto	l10249
  6343  0013E0                     l10245:
  6344                           
  6345                           ; BSR set to: 0
  6346                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  6347                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  6348  0013E0  519E               	movf	(_vscp_imsg+9)& (0+255),w,b
  6349  0013E2  089F               	sublw	low (_vscp_imsg+10)
  6350  0013E4  25E3               	addwf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6351  0013E6  6ED9               	movwf	fsr2l,c
  6352  0013E8  6ADA               	clrf	fsr2h,c
  6353  0013EA  50DF               	movf	indf2,w,c
  6354  0013EC  6FCE               	movwf	?_vscp_writeRegister& (0+255),b
  6355  0013EE  51E3               	movf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6356  0013F0  ECAE  F01D         	call	_vscp_writeRegister
  6357  0013F4  0100               	movlb	0	; () banked
  6358  0013F6  6FD0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6359  0013F8  519E               	movf	(_vscp_imsg+9)& (0+255),w,b
  6360  0013FA  08AC               	sublw	low (_vscp_omsg+9)
  6361  0013FC  25E3               	addwf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6362  0013FE  6ED9               	movwf	fsr2l,c
  6363  001400  6ADA               	clrf	fsr2h,c
  6364  001402  C0D0  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  6365                           
  6366                           ; BSR set to: 0
  6367  001406  2BE3               	incf	vscp_handleProtocolEvent@i_1293& (0+255),f,b
  6368  001408                     l10249:
  6369                           
  6370                           ; BSR set to: 0
  6371  001408  5195               	movf	_vscp_imsg& (0+255),w,b
  6372  00140A  0B0F               	andlw	15
  6373  00140C  6FD0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6374  00140E  6BD1               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6375  001410  519E               	movf	(_vscp_imsg+9)& (0+255),w,b
  6376  001412  27D0               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6377  001414  0E00               	movlw	0
  6378  001416  23D1               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6379  001418  0EFC               	movlw	252
  6380  00141A  25D0               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6381  00141C  6FD2               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  6382  00141E  0EFF               	movlw	255
  6383  001420  21D1               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6384  001422  6FD3               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  6385  001424  51E3               	movf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6386  001426  6FD4               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  6387  001428  6BD5               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  6388  00142A  51D5               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  6389  00142C  0A80               	xorlw	128
  6390  00142E  6FD6               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  6391  001430  51D2               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  6392  001432  5DD4               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  6393  001434  51D3               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  6394  001436  0A80               	xorlw	128
  6395  001438  59D6               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  6396  00143A  E3D2               	bnc	l10245
  6397                           
  6398                           ; BSR set to: 0
  6399                           ;vscp_firmware.c: 1251: }
  6400                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  6401  00143C  C0D9  F052         	movff	vscp_handleProtocolEvent@page_save_1294,_vscp_page_select
  6402  001440  C0DA  F053         	movff	vscp_handleProtocolEvent@page_save_1294+1,_vscp_page_select+1
  6403                           
  6404                           ; BSR set to: 0
  6405                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  6406  001444  0E07               	movlw	7
  6407  001446  6FA4               	movwf	(_vscp_omsg+1)& (0+255),b
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  6411  001448  5195               	movf	_vscp_imsg& (0+255),w,b
  6412  00144A  0B0F               	andlw	15
  6413  00144C  0F80               	addlw	128
  6414  00144E  6FA3               	movwf	_vscp_omsg& (0+255),b
  6415                           
  6416                           ; BSR set to: 0
  6417                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  6418                           
  6419                           ; BSR set to: 0
  6420                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  6424                           
  6425                           ; BSR set to: 0
  6426                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  6427                           
  6428                           ; BSR set to: 0
  6429                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  6430  001450  D840               	call	PL46	;call to abstracted procedure
  6431                           
  6432                           ; BSR set to: 0
  6433                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  6434  001452  C09E  F0AB         	movff	_vscp_imsg+9,_vscp_omsg+8
  6435  001456  D574               	goto	l9879
  6436  001458                     l10271:
  6437                           
  6438                           ; BSR set to: 0
  6439  001458  5199               	movf	(_vscp_imsg+4)& (0+255),w,b
  6440                           
  6441                           ; Switch size 1, requested type "space"
  6442                           ; Number of cases is 16, Range of values is 1 to 38
  6443                           ; switch strategies available:
  6444                           ; Name         Instructions Cycles
  6445                           ; simple_byte           49    25 (average)
  6446                           ;	Chosen strategy is simple_byte
  6447  00145A  0A01               	xorlw	1	; case 1
  6448  00145C  E101 D548          	bz	l9853
  6449  001460  0A03               	xorlw	3	; case 2
  6450  001462  E101 D548          	bz	l9855
  6451  001466  0A04               	xorlw	4	; case 6
  6452  001468  E101 D548          	bz	l9857
  6453  00146C  0A0E               	xorlw	14	; case 8
  6454  00146E  E101 D548          	bz	l9859
  6455  001472  0A01               	xorlw	1	; case 9
  6456  001474  E101 D548          	bz	l9861
  6457  001478  0A02               	xorlw	2	; case 11
  6458  00147A  E101 D568          	bz	l9895
  6459  00147E  0A07               	xorlw	7	; case 12
  6460  001480  E101 D57E          	bz	l9929
  6461  001484  0A1B               	xorlw	27	; case 23
  6462  001486  E101 D613          	bz	l9987
  6463  00148A  0A0F               	xorlw	15	; case 24
  6464  00148C  E101 D627          	bz	l9993
  6465  001490  0A01               	xorlw	1	; case 25
  6466  001492  E101 D677          	bz	l10027
  6467  001496  0A04               	xorlw	4	; case 29
  6468  001498  E101 D6A0          	bz	l10053
  6469  00149C  0A03               	xorlw	3	; case 30
  6470  00149E  E101 D6AD          	bz	l10069
  6471  0014A2  0A01               	xorlw	1	; case 31
  6472  0014A4  E101 D6BA          	bz	l10085
  6473  0014A8  0A3E               	xorlw	62	; case 33
  6474  0014AA  E101 D718          	bz	l10171
  6475  0014AE  0A04               	xorlw	4	; case 37
  6476  0014B0  E101 D726          	bz	l10181
  6477  0014B4  0A03               	xorlw	3	; case 38
  6478  0014B6  E087               	bz	l10237
  6479  0014B8                     l1291:
  6480  0014B8  0012               	return	
  6481  0014BA                     __end_of_vscp_handleProtocolEvent:
  6482                           	opt stack 0
  6483  0014BA                     PL28:
  6484                           	opt stack 21
  6485  0014BA  519D               	movf	(_vscp_imsg+8)& (0+255),w,b
  6486  0014BC  C09C  F0D0         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6487  0014C0  6BD1               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6488  0014C2  C0D0  F0D1         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6489  0014C6  6BD0               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6490  0014C8  11D0               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6491  0014CA  6E52               	movwf	_vscp_page_select,c
  6492  0014CC  51D1               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6493  0014CE  6E53               	movwf	_vscp_page_select+1,c
  6494  0014D0  0012               	return	
  6495  0014D2                     __end_ofPL28:
  6496                           	opt stack 0
  6497  0014D2                     PL46:
  6498                           	opt stack 21
  6499  0014D2  6BA5               	clrf	(_vscp_omsg+2)& (0+255),b
  6500  0014D4  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
  6501  0014D6  0E27               	movlw	39
  6502  0014D8  6FA7               	movwf	(_vscp_omsg+4)& (0+255),b
  6503  0014DA  6BA8               	clrf	(_vscp_omsg+5)& (0+255),b
  6504  0014DC  C09C  F0A9         	movff	_vscp_imsg+7,_vscp_omsg+6
  6505  0014E0  C09D  F0AA         	movff	_vscp_imsg+8,_vscp_omsg+7
  6506  0014E4  0012               	return	
  6507  0014E6                     __end_ofPL46:
  6508                           	opt stack 0
  6509  0014E6                     PL70:
  6510                           	opt stack 21
  6511  0014E6  0E07               	movlw	7
  6512  0014E8  6FA4               	movwf	(_vscp_omsg+1)& (0+255),b
  6513  0014EA  6BA5               	clrf	(_vscp_omsg+2)& (0+255),b
  6514  0014EC  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
  6515  0014EE  0E1A               	movlw	26
  6516  0014F0  6FA7               	movwf	(_vscp_omsg+4)& (0+255),b
  6517  0014F2  0C1A               	retlw	26
  6518  0014F4                     __end_ofPL70:
  6519                           	opt stack 0
  6520  0014F4                     PL80:
  6521                           	opt stack 21
  6522  0014F4  C0E9  F0A8         	movff	vscp_handleProtocolEvent@i_1285,_vscp_omsg+5
  6523  0014F8  0E01               	movlw	1
  6524  0014FA  6FEB               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  6525  0014FC  0C01               	retlw	1
  6526  0014FE                     __end_ofPL80:
  6527                           	opt stack 0
  6528                           tblptru	equ	0xFF8
  6529                           tblptrh	equ	0xFF7
  6530                           tblptrl	equ	0xFF6
  6531                           tablat	equ	0xFF5
  6532                           prodh	equ	0xFF4
  6533                           prodl	equ	0xFF3
  6534                           intcon	equ	0xFF2
  6535                           postinc0	equ	0xFEE
  6536                           wreg	equ	0xFE8
  6537                           indf1	equ	0xFE7
  6538                           fsr1h	equ	0xFE2
  6539                           fsr1l	equ	0xFE1
  6540                           indf2	equ	0xFDF
  6541                           postinc2	equ	0xFDE
  6542                           postdec2	equ	0xFDD
  6543                           plusw2	equ	0xFDB
  6544                           fsr2h	equ	0xFDA
  6545                           fsr2l	equ	0xFD9
  6546                           status	equ	0xFD8
  6547                           
  6548 ;; *************** function ___lbmod *****************
  6549 ;; Defined at:
  6550 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  6551 ;; Parameters:    Size  Location     Type
  6552 ;;  dividend        1    wreg     unsigned char 
  6553 ;;  divisor         1    7[COMRAM] unsigned char 
  6554 ;; Auto vars:     Size  Location     Type
  6555 ;;  dividend        1    8[COMRAM] unsigned char 
  6556 ;;  rem             1   10[COMRAM] unsigned char 
  6557 ;;  counter         1    9[COMRAM] unsigned char 
  6558 ;; Return value:  Size  Location     Type
  6559 ;;                  1    wreg      unsigned char 
  6560 ;; Registers used:
  6561 ;;		wreg, status,2, status,0
  6562 ;; Tracked objects:
  6563 ;;		On entry : F/0
  6564 ;;		On exit  : 0/0
  6565 ;;		Unchanged: 0/0
  6566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6567 ;;      Params:         1       0       0       0       0       0       0
  6568 ;;      Locals:         3       0       0       0       0       0       0
  6569 ;;      Temps:          0       0       0       0       0       0       0
  6570 ;;      Totals:         4       0       0       0       0       0       0
  6571 ;;Total ram usage:        4 bytes
  6572 ;; Hardware stack levels used:    1
  6573 ;; Hardware stack levels required when called:    2
  6574 ;; This function calls:
  6575 ;;		Nothing
  6576 ;; This function is called by:
  6577 ;;		_vscp_handleProtocolEvent
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581                           	psect	text16
  6582  003A32                     __ptext16:
  6583                           	opt stack 0
  6584  003A32                     ___lbmod:
  6585                           	opt stack 27
  6586                           
  6587                           ;incstack = 0
  6588                           ;incstack = 0
  6589                           ;___lbmod@dividend stored from wreg
  6590  003A32  CFE8 F009          	movff	wreg,___lbmod@dividend
  6591                           
  6592                           ; BSR set to: 0
  6593  003A36  0E08               	movlw	8
  6594  003A38  6E0A               	movwf	___lbmod@counter,c
  6595                           
  6596                           ; BSR set to: 0
  6597  003A3A  6A0B               	clrf	___lbmod@rem,c
  6598  003A3C                     l7515:
  6599  003A3C  90D8               	bcf	status,0,c
  6600  003A3E  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  6601  003A40  340B               	rlcf	___lbmod@rem& (0+255),w,c
  6602  003A42  6E0B               	movwf	___lbmod@rem,c
  6603  003A44  90D8               	bcf	status,0,c
  6604  003A46  3609               	rlcf	___lbmod@dividend,f,c
  6605  003A48  5008               	movf	___lbmod@divisor,w,c
  6606  003A4A  5C0B               	subwf	___lbmod@rem,w,c
  6607  003A4C  E302               	bnc	l7523
  6608  003A4E  5008               	movf	___lbmod@divisor,w,c
  6609  003A50  5E0B               	subwf	___lbmod@rem,f,c
  6610  003A52                     l7523:
  6611  003A52  2E0A               	decfsz	___lbmod@counter,f,c
  6612  003A54  D7F3               	goto	l7515
  6613  003A56  500B               	movf	___lbmod@rem,w,c
  6614  003A58  0012               	return	
  6615  003A5A                     __end_of___lbmod:
  6616                           	opt stack 0
  6617                           tblptru	equ	0xFF8
  6618                           tblptrh	equ	0xFF7
  6619                           tblptrl	equ	0xFF6
  6620                           tablat	equ	0xFF5
  6621                           prodh	equ	0xFF4
  6622                           prodl	equ	0xFF3
  6623                           intcon	equ	0xFF2
  6624                           postinc0	equ	0xFEE
  6625                           wreg	equ	0xFE8
  6626                           indf1	equ	0xFE7
  6627                           fsr1h	equ	0xFE2
  6628                           fsr1l	equ	0xFE1
  6629                           indf2	equ	0xFDF
  6630                           postinc2	equ	0xFDE
  6631                           postdec2	equ	0xFDD
  6632                           plusw2	equ	0xFDB
  6633                           fsr2h	equ	0xFDA
  6634                           fsr2l	equ	0xFD9
  6635                           status	equ	0xFD8
  6636                           
  6637 ;; *************** function _vscp_writeRegister *****************
  6638 ;; Defined at:
  6639 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  6640 ;; Parameters:    Size  Location     Type
  6641 ;;  reg             1    wreg     unsigned char 
  6642 ;;  value           1   30[BANK0 ] unsigned char 
  6643 ;; Auto vars:     Size  Location     Type
  6644 ;;  reg             1   31[BANK0 ] unsigned char 
  6645 ;; Return value:  Size  Location     Type
  6646 ;;                  1    wreg      unsigned char 
  6647 ;; Registers used:
  6648 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6649 ;; Tracked objects:
  6650 ;;		On entry : F/0
  6651 ;;		On exit  : 0/0
  6652 ;;		Unchanged: 0/0
  6653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6654 ;;      Params:         0       1       0       0       0       0       0
  6655 ;;      Locals:         0       1       0       0       0       0       0
  6656 ;;      Temps:          0       0       0       0       0       0       0
  6657 ;;      Totals:         0       2       0       0       0       0       0
  6658 ;;Total ram usage:        2 bytes
  6659 ;; Hardware stack levels used:    1
  6660 ;; Hardware stack levels required when called:    8
  6661 ;; This function calls:
  6662 ;;		_vscp_writeAppReg
  6663 ;;		_vscp_writeStdReg
  6664 ;; This function is called by:
  6665 ;;		_vscp_handleProtocolEvent
  6666 ;; This function uses a non-reentrant model
  6667 ;;
  6668                           
  6669                           	psect	text17
  6670  003B5C                     __ptext17:
  6671                           	opt stack 0
  6672  003B5C                     _vscp_writeRegister:
  6673                           	opt stack 21
  6674                           
  6675                           ;incstack = 0
  6676                           ;incstack = 0
  6677                           ;vscp_writeRegister@reg stored from wreg
  6678  003B5C  CFE8 F0CF          	movff	wreg,vscp_writeRegister@reg
  6679                           
  6680                           ; BSR set to: 0
  6681                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  6682  003B60  0E7F               	movlw	127
  6683  003B62  65CF               	cpfsgt	vscp_writeRegister@reg& (0+255),b
  6684  003B64  D006               	goto	l11129
  6685                           
  6686                           ; BSR set to: 0
  6687                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  6688  003B66  C0CE  F010         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  6689  003B6A  51CF               	movf	vscp_writeRegister@reg& (0+255),w,b
  6690  003B6C  ECD8  F017         	call	_vscp_writeStdReg
  6691  003B70  D005               	goto	l1171
  6692  003B72                     l11129:
  6693                           
  6694                           ; BSR set to: 0
  6695                           ;vscp_firmware.c: 705: else {
  6696                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  6697  003B72  C0CE  F051         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  6698  003B76  51CF               	movf	vscp_writeRegister@reg& (0+255),w,b
  6699  003B78  EC11  F003         	call	_vscp_writeAppReg
  6700  003B7C                     l1171:
  6701  003B7C  0012               	return	
  6702  003B7E                     __end_of_vscp_writeRegister:
  6703                           	opt stack 0
  6704                           tblptru	equ	0xFF8
  6705                           tblptrh	equ	0xFF7
  6706                           tblptrl	equ	0xFF6
  6707                           tablat	equ	0xFF5
  6708                           prodh	equ	0xFF4
  6709                           prodl	equ	0xFF3
  6710                           intcon	equ	0xFF2
  6711                           postinc0	equ	0xFEE
  6712                           wreg	equ	0xFE8
  6713                           indf1	equ	0xFE7
  6714                           fsr1h	equ	0xFE2
  6715                           fsr1l	equ	0xFE1
  6716                           indf2	equ	0xFDF
  6717                           postinc2	equ	0xFDE
  6718                           postdec2	equ	0xFDD
  6719                           plusw2	equ	0xFDB
  6720                           fsr2h	equ	0xFDA
  6721                           fsr2l	equ	0xFD9
  6722                           status	equ	0xFD8
  6723                           
  6724 ;; *************** function _vscp_writeStdReg *****************
  6725 ;; Defined at:
  6726 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;  reg             1    wreg     unsigned char 
  6729 ;;  value           1   15[COMRAM] unsigned char 
  6730 ;; Auto vars:     Size  Location     Type
  6731 ;;  reg             1   21[COMRAM] unsigned char 
  6732 ;;  rv              1   20[COMRAM] unsigned char 
  6733 ;; Return value:  Size  Location     Type
  6734 ;;                  1    wreg      unsigned char 
  6735 ;; Registers used:
  6736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6737 ;; Tracked objects:
  6738 ;;		On entry : F/0
  6739 ;;		On exit  : 0/0
  6740 ;;		Unchanged: 0/0
  6741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6742 ;;      Params:         1       0       0       0       0       0       0
  6743 ;;      Locals:         2       0       0       0       0       0       0
  6744 ;;      Temps:          4       0       0       0       0       0       0
  6745 ;;      Totals:         7       0       0       0       0       0       0
  6746 ;;Total ram usage:        7 bytes
  6747 ;; Hardware stack levels used:    1
  6748 ;; Hardware stack levels required when called:    5
  6749 ;; This function calls:
  6750 ;;		_vscp_setGUID
  6751 ;;		_vscp_setManufacturerId
  6752 ;;		_vscp_getGUID
  6753 ;;		_vscp_getUserID
  6754 ;;		_vscp_setUserID
  6755 ;;		_vscp_getManufacturerId
  6756 ;;		_vscp_restoreDefaults
  6757 ;; This function is called by:
  6758 ;;		_vscp_writeRegister
  6759 ;;		_vscp_handleProtocolEvent
  6760 ;; This function uses a non-reentrant model
  6761 ;;
  6762                           
  6763                           	psect	text18
  6764  002FB0                     __ptext18:
  6765                           	opt stack 0
  6766  002FB0                     _vscp_writeStdReg:
  6767                           	opt stack 24
  6768                           
  6769                           ;incstack = 0
  6770                           ;incstack = 0
  6771                           ;vscp_writeStdReg@reg stored from wreg
  6772  002FB0  CFE8 F016          	movff	wreg,vscp_writeStdReg@reg
  6773                           
  6774                           ; BSR set to: 0
  6775                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  6776  002FB4  1C10               	comf	vscp_writeStdReg@value,w,c
  6777  002FB6  6E15               	movwf	vscp_writeStdReg@rv,c
  6778                           
  6779                           ; BSR set to: 0
  6780                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  6781                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  6782  002FB8  0E83               	movlw	131
  6783  002FBA  6416               	cpfsgt	vscp_writeStdReg@reg,c
  6784  002FBC  D00E               	goto	l9687
  6785                           
  6786                           ; BSR set to: 0
  6787  002FBE  0E89               	movlw	137
  6788  002FC0  6016               	cpfslt	vscp_writeStdReg@reg,c
  6789  002FC2  D00B               	goto	l9687
  6790                           
  6791                           ; BSR set to: 0
  6792                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  6793  002FC4  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  6794  002FC8  5016               	movf	vscp_writeStdReg@reg,w,c
  6795  002FCA  0F7C               	addlw	124
  6796  002FCC  ECED  F01D         	call	_vscp_setUserID
  6797                           
  6798                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  6799  002FD0  5016               	movf	vscp_writeStdReg@reg,w,c
  6800  002FD2  0F7C               	addlw	124
  6801  002FD4  EC59  F01E         	call	_vscp_getUserID
  6802  002FD8  D069               	goto	L25
  6803  002FDA                     l9687:
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  6807  002FDA  5016               	movf	vscp_writeStdReg@reg,w,c
  6808  002FDC  0A92               	xorlw	146
  6809  002FDE  E10D               	bnz	l9693
  6810                           
  6811                           ; BSR set to: 0
  6812                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  6813  002FE0  5010               	movf	vscp_writeStdReg@value,w,c
  6814  002FE2  6E12               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6815  002FE4  6A11               	clrf	??_vscp_writeStdReg& (0+255),c
  6816  002FE6  5052               	movf	_vscp_page_select,w,c
  6817  002FE8  6E13               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  6818  002FEA  6A14               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  6819  002FEC  1011               	iorwf	??_vscp_writeStdReg,w,c
  6820  002FEE  6E52               	movwf	_vscp_page_select,c
  6821  002FF0  5012               	movf	??_vscp_writeStdReg+1,w,c
  6822  002FF2  1014               	iorwf	??_vscp_writeStdReg+3,w,c
  6823  002FF4  6E53               	movwf	_vscp_page_select+1,c
  6824                           
  6825                           ; BSR set to: 0
  6826                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  6827  002FF6  5053               	movf	_vscp_page_select+1,w,c
  6828  002FF8  D059               	goto	L25
  6829  002FFA                     l9693:
  6830                           
  6831                           ; BSR set to: 0
  6832                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  6833  002FFA  5016               	movf	vscp_writeStdReg@reg,w,c
  6834  002FFC  0A93               	xorlw	147
  6835  002FFE  E10B               	bnz	l9699
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  6839  003000  6A11               	clrf	??_vscp_writeStdReg& (0+255),c
  6840  003002  5053               	movf	_vscp_page_select+1,w,c
  6841  003004  6E12               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6842  003006  5010               	movf	vscp_writeStdReg@value,w,c
  6843  003008  1011               	iorwf	??_vscp_writeStdReg,w,c
  6844  00300A  6E52               	movwf	_vscp_page_select,c
  6845  00300C  5012               	movf	??_vscp_writeStdReg+1,w,c
  6846  00300E  6E53               	movwf	_vscp_page_select+1,c
  6847                           
  6848                           ; BSR set to: 0
  6849                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  6850  003010  C052  F015         	movff	_vscp_page_select,vscp_writeStdReg@rv
  6851                           
  6852                           ;vscp_firmware.c: 737: }
  6853  003014  D04E               	goto	l9741
  6854  003016                     l9699:
  6855                           
  6856                           ; BSR set to: 0
  6857                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  6858  003016  0E88               	movlw	136
  6859  003018  6416               	cpfsgt	vscp_writeStdReg@reg,c
  6860  00301A  D019               	goto	l9711
  6861                           
  6862                           ; BSR set to: 0
  6863  00301C  0E91               	movlw	145
  6864  00301E  6016               	cpfslt	vscp_writeStdReg@reg,c
  6865  003020  D016               	goto	l9711
  6866                           
  6867                           ; BSR set to: 0
  6868                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6869                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  6870  003022  C053  F011         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6871  003026  C011  F012         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6872  00302A  6A13               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6873  00302C  2812               	incf	??_vscp_writeStdReg+1,w,c
  6874  00302E  E102               	bnz	l9707
  6875                           
  6876                           ; BSR set to: 0
  6877  003030  2852               	incf	_vscp_page_select,w,c
  6878  003032  E002               	bz	l9709
  6879  003034                     l9707:
  6880                           
  6881                           ; BSR set to: 0
  6882                           ;vscp_firmware.c: 747: rv = ~value;
  6883  003034  1C10               	comf	vscp_writeStdReg@value,w,c
  6884  003036  D03A               	goto	L25
  6885  003038                     l9709:
  6886                           
  6887                           ; BSR set to: 0
  6888                           ;vscp_firmware.c: 749: else {
  6889                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  6890  003038  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  6891  00303C  5016               	movf	vscp_writeStdReg@reg,w,c
  6892  00303E  0F77               	addlw	119
  6893  003040  EC40  F01D         	call	_vscp_setManufacturerId
  6894                           
  6895                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  6896  003044  5016               	movf	vscp_writeStdReg@reg,w,c
  6897  003046  0F77               	addlw	119
  6898  003048  EC4F  F01E         	call	_vscp_getManufacturerId
  6899  00304C  D02F               	goto	L25
  6900  00304E                     l9711:
  6901                           
  6902                           ; BSR set to: 0
  6903                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  6904  00304E  0ECF               	movlw	207
  6905  003050  6416               	cpfsgt	vscp_writeStdReg@reg,c
  6906  003052  D017               	goto	l9723
  6907                           
  6908                           ; BSR set to: 0
  6909  003054  0EE0               	movlw	224
  6910  003056  6016               	cpfslt	vscp_writeStdReg@reg,c
  6911  003058  D014               	goto	l9723
  6912                           
  6913                           ; BSR set to: 0
  6914                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6915                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  6916  00305A  C053  F011         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6917  00305E  C011  F012         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6918  003062  6A13               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6919  003064  2812               	incf	??_vscp_writeStdReg+1,w,c
  6920  003066  E1E6               	bnz	l9707
  6921                           
  6922                           ; BSR set to: 0
  6923  003068  2852               	incf	_vscp_page_select,w,c
  6924  00306A  E1E4               	bnz	l9707
  6925                           
  6926                           ; BSR set to: 0
  6927                           ;vscp_firmware.c: 762: else {
  6928                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  6929  00306C  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  6930  003070  5016               	movf	vscp_writeStdReg@reg,w,c
  6931  003072  0F30               	addlw	48
  6932  003074  EC53  F01D         	call	_vscp_setGUID
  6933                           
  6934                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  6935  003078  5016               	movf	vscp_writeStdReg@reg,w,c
  6936  00307A  0F30               	addlw	48
  6937  00307C  EC63  F01E         	call	_vscp_getGUID
  6938  003080  D015               	goto	L25
  6939  003082                     l9723:
  6940                           
  6941                           ; BSR set to: 0
  6942                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  6943  003082  5016               	movf	vscp_writeStdReg@reg,w,c
  6944  003084  0AA2               	xorlw	162
  6945  003086  E1D6               	bnz	l9707
  6946                           
  6947                           ; BSR set to: 0
  6948                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  6949  003088  5010               	movf	vscp_writeStdReg@value,w,c
  6950  00308A  0A55               	xorlw	85
  6951  00308C  E104               	bnz	l9731
  6952                           
  6953                           ; BSR set to: 0
  6954                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  6955  00308E  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
  6956  003090  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;vscp_firmware.c: 771: rv = 0x55;
  6960  003092  0E55               	movlw	85
  6961  003094  D00B               	goto	L25
  6962  003096                     l9731:
  6963                           
  6964                           ; BSR set to: 0
  6965                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  6966  003096  5010               	movf	vscp_writeStdReg@value,w,c
  6967  003098  0AAA               	xorlw	170
  6968  00309A  E10B               	bnz	l9741
  6969                           
  6970                           ; BSR set to: 0
  6971                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  6972  00309C  0EE8               	movlw	232
  6973  00309E  5D84               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  6974  0030A0  0E03               	movlw	3
  6975  0030A2  5985               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  6976  0030A4  E205               	bc	l1197
  6977                           
  6978                           ; BSR set to: 0
  6979                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  6980  0030A6  ECA6  F01E         	call	_vscp_restoreDefaults	;wreg free
  6981                           
  6982                           ;vscp_firmware.c: 776: rv = 0xaa;
  6983  0030AA  0EAA               	movlw	170
  6984  0030AC                     L25:
  6985  0030AC  6E15               	movwf	vscp_writeStdReg@rv,c
  6986                           
  6987                           ;vscp_firmware.c: 777: }
  6988  0030AE  D001               	goto	l9741
  6989  0030B0                     l1197:
  6990                           
  6991                           ; BSR set to: 0
  6992                           ;vscp_firmware.c: 778: else {
  6993                           ;vscp_firmware.c: 779: rv = 0;
  6994  0030B0  6A15               	clrf	vscp_writeStdReg@rv,c
  6995  0030B2                     l9741:
  6996                           
  6997                           ;vscp_firmware.c: 787: }
  6998                           ;vscp_firmware.c: 789: return rv;
  6999  0030B2  5015               	movf	vscp_writeStdReg@rv,w,c
  7000  0030B4  0012               	return	
  7001  0030B6                     __end_of_vscp_writeStdReg:
  7002                           	opt stack 0
  7003                           tblptru	equ	0xFF8
  7004                           tblptrh	equ	0xFF7
  7005                           tblptrl	equ	0xFF6
  7006                           tablat	equ	0xFF5
  7007                           prodh	equ	0xFF4
  7008                           prodl	equ	0xFF3
  7009                           intcon	equ	0xFF2
  7010                           postinc0	equ	0xFEE
  7011                           wreg	equ	0xFE8
  7012                           indf1	equ	0xFE7
  7013                           fsr1h	equ	0xFE2
  7014                           fsr1l	equ	0xFE1
  7015                           indf2	equ	0xFDF
  7016                           postinc2	equ	0xFDE
  7017                           postdec2	equ	0xFDD
  7018                           plusw2	equ	0xFDB
  7019                           fsr2h	equ	0xFDA
  7020                           fsr2l	equ	0xFD9
  7021                           status	equ	0xFD8
  7022                           
  7023 ;; *************** function _vscp_restoreDefaults *****************
  7024 ;; Defined at:
  7025 ;;		line 2560 in file "../main.c"
  7026 ;; Parameters:    Size  Location     Type
  7027 ;;		None
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;		None
  7030 ;; Return value:  Size  Location     Type
  7031 ;;		None               void
  7032 ;; Registers used:
  7033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7034 ;; Tracked objects:
  7035 ;;		On entry : F/0
  7036 ;;		On exit  : 0/0
  7037 ;;		Unchanged: 0/0
  7038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7039 ;;      Params:         0       0       0       0       0       0       0
  7040 ;;      Locals:         0       0       0       0       0       0       0
  7041 ;;      Temps:          0       0       0       0       0       0       0
  7042 ;;      Totals:         0       0       0       0       0       0       0
  7043 ;;Total ram usage:        0 bytes
  7044 ;; Hardware stack levels used:    1
  7045 ;; Hardware stack levels required when called:    4
  7046 ;; This function calls:
  7047 ;;		_init_app_eeprom
  7048 ;;		_init_app_ram
  7049 ;; This function is called by:
  7050 ;;		_vscp_writeStdReg
  7051 ;; This function uses a non-reentrant model
  7052 ;;
  7053                           
  7054                           	psect	text19
  7055  003D4C                     __ptext19:
  7056                           	opt stack 0
  7057  003D4C                     _vscp_restoreDefaults:
  7058                           	opt stack 24
  7059                           
  7060                           ; BSR set to: 0
  7061                           ;main.c: 2561: init_app_eeprom();
  7062                           
  7063                           ;incstack = 0
  7064                           ;incstack = 0
  7065  003D4C  EC7F  F00A         	call	_init_app_eeprom	;wreg free
  7066                           
  7067                           ;main.c: 2562: init_app_ram();
  7068  003D50  EF5B  F018         	goto	_init_app_ram	;wreg free
  7069  003D54                     __end_of_vscp_restoreDefaults:
  7070                           	opt stack 0
  7071                           tblptru	equ	0xFF8
  7072                           tblptrh	equ	0xFF7
  7073                           tblptrl	equ	0xFF6
  7074                           tablat	equ	0xFF5
  7075                           prodh	equ	0xFF4
  7076                           prodl	equ	0xFF3
  7077                           intcon	equ	0xFF2
  7078                           postinc0	equ	0xFEE
  7079                           wreg	equ	0xFE8
  7080                           indf1	equ	0xFE7
  7081                           fsr1h	equ	0xFE2
  7082                           fsr1l	equ	0xFE1
  7083                           indf2	equ	0xFDF
  7084                           postinc2	equ	0xFDE
  7085                           postdec2	equ	0xFDD
  7086                           plusw2	equ	0xFDB
  7087                           fsr2h	equ	0xFDA
  7088                           fsr2l	equ	0xFD9
  7089                           status	equ	0xFD8
  7090                           
  7091 ;; *************** function _init_app_eeprom *****************
  7092 ;; Defined at:
  7093 ;;		line 478 in file "../main.c"
  7094 ;; Parameters:    Size  Location     Type
  7095 ;;		None
  7096 ;; Auto vars:     Size  Location     Type
  7097 ;;  j               1   14[COMRAM] unsigned char 
  7098 ;;  i               1   13[COMRAM] unsigned char 
  7099 ;; Return value:  Size  Location     Type
  7100 ;;		None               void
  7101 ;; Registers used:
  7102 ;;		wreg, status,2, status,0, cstack
  7103 ;; Tracked objects:
  7104 ;;		On entry : 0/0
  7105 ;;		On exit  : 0/0
  7106 ;;		Unchanged: 0/0
  7107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7108 ;;      Params:         0       0       0       0       0       0       0
  7109 ;;      Locals:         2       0       0       0       0       0       0
  7110 ;;      Temps:          2       0       0       0       0       0       0
  7111 ;;      Totals:         4       0       0       0       0       0       0
  7112 ;;Total ram usage:        4 bytes
  7113 ;; Hardware stack levels used:    1
  7114 ;; Hardware stack levels required when called:    3
  7115 ;; This function calls:
  7116 ;;		_Busy_eep
  7117 ;;		_Write_b_eep
  7118 ;; This function is called by:
  7119 ;;		_main
  7120 ;;		_vscp_restoreDefaults
  7121 ;; This function uses a non-reentrant model
  7122 ;;
  7123                           
  7124                           	psect	text20
  7125  0014FE                     __ptext20:
  7126                           	opt stack 0
  7127  0014FE                     _init_app_eeprom:
  7128                           	opt stack 24
  7129                           
  7130                           ;main.c: 479: unsigned char i, j;
  7131                           ;main.c: 481: (Busy_eep(), Write_b_eep(0x43 + 0,0));
  7132                           
  7133                           ;incstack = 0
  7134                           ;incstack = 0
  7135  0014FE  ECAA  F01E         	call	_Busy_eep	;wreg free
  7136  001502  6A09               	clrf	?_Write_b_eep+1,c
  7137  001504  0E43               	movlw	67
  7138  001506  6E08               	movwf	?_Write_b_eep,c
  7139  001508  0E00               	movlw	0
  7140  00150A  6A0A               	clrf	?_Write_b_eep+2,c
  7141  00150C  EC90  F01C         	call	_Write_b_eep	;wreg free
  7142                           
  7143                           ;main.c: 482: (Busy_eep(), Write_b_eep(0x43 + 1,0));
  7144  001510  ECAA  F01E         	call	_Busy_eep	;wreg free
  7145  001514  6A09               	clrf	?_Write_b_eep+1,c
  7146  001516  0E44               	movlw	68
  7147  001518  6E08               	movwf	?_Write_b_eep,c
  7148  00151A  0E00               	movlw	0
  7149  00151C  6A0A               	clrf	?_Write_b_eep+2,c
  7150  00151E  EC90  F01C         	call	_Write_b_eep	;wreg free
  7151                           
  7152                           ;main.c: 484: (Busy_eep(), Write_b_eep(0x43 + 10,0x08 | 0x10 | 0x80));
  7153  001522  ECAA  F01E         	call	_Busy_eep	;wreg free
  7154  001526  6A09               	clrf	?_Write_b_eep+1,c
  7155  001528  0E4D               	movlw	77
  7156  00152A  6E08               	movwf	?_Write_b_eep,c
  7157  00152C  0E98               	movlw	152
  7158  00152E  6E0A               	movwf	?_Write_b_eep+2,c
  7159  001530  EC90  F01C         	call	_Write_b_eep	;wreg free
  7160                           
  7161                           ;main.c: 489: (Busy_eep(), Write_b_eep(0x43 + 11,0x08 | 0x10 | 0x80));
  7162  001534  ECAA  F01E         	call	_Busy_eep	;wreg free
  7163  001538  6A09               	clrf	?_Write_b_eep+1,c
  7164  00153A  0E4E               	movlw	78
  7165  00153C  6E08               	movwf	?_Write_b_eep,c
  7166  00153E  0E98               	movlw	152
  7167  001540  6E0A               	movwf	?_Write_b_eep+2,c
  7168  001542  EC90  F01C         	call	_Write_b_eep	;wreg free
  7169                           
  7170                           ;main.c: 494: (Busy_eep(), Write_b_eep(0x43 + 12,0x08 | 0x10 | 0x80));
  7171  001546  ECAA  F01E         	call	_Busy_eep	;wreg free
  7172  00154A  6A09               	clrf	?_Write_b_eep+1,c
  7173  00154C  0E4F               	movlw	79
  7174  00154E  6E08               	movwf	?_Write_b_eep,c
  7175  001550  0E98               	movlw	152
  7176  001552  6E0A               	movwf	?_Write_b_eep+2,c
  7177  001554  EC90  F01C         	call	_Write_b_eep	;wreg free
  7178                           
  7179                           ;main.c: 499: (Busy_eep(), Write_b_eep(0x43 + 13,0x08 | 0x10 | 0x80));
  7180  001558  ECAA  F01E         	call	_Busy_eep	;wreg free
  7181  00155C  6A09               	clrf	?_Write_b_eep+1,c
  7182  00155E  0E50               	movlw	80
  7183  001560  6E08               	movwf	?_Write_b_eep,c
  7184  001562  0E98               	movlw	152
  7185  001564  6E0A               	movwf	?_Write_b_eep+2,c
  7186  001566  EC90  F01C         	call	_Write_b_eep	;wreg free
  7187                           
  7188                           ;main.c: 504: (Busy_eep(), Write_b_eep(0x43 + 14,0x08 | 0x10 | 0x80));
  7189  00156A  ECAA  F01E         	call	_Busy_eep	;wreg free
  7190  00156E  6A09               	clrf	?_Write_b_eep+1,c
  7191  001570  0E51               	movlw	81
  7192  001572  6E08               	movwf	?_Write_b_eep,c
  7193  001574  0E98               	movlw	152
  7194  001576  6E0A               	movwf	?_Write_b_eep+2,c
  7195  001578  EC90  F01C         	call	_Write_b_eep	;wreg free
  7196                           
  7197                           ;main.c: 509: (Busy_eep(), Write_b_eep(0x43 + 15,0x08 | 0x10 | 0x80));
  7198  00157C  ECAA  F01E         	call	_Busy_eep	;wreg free
  7199  001580  6A09               	clrf	?_Write_b_eep+1,c
  7200  001582  0E52               	movlw	82
  7201  001584  6E08               	movwf	?_Write_b_eep,c
  7202  001586  0E98               	movlw	152
  7203  001588  6E0A               	movwf	?_Write_b_eep+2,c
  7204  00158A  EC90  F01C         	call	_Write_b_eep	;wreg free
  7205                           
  7206                           ;main.c: 514: (Busy_eep(), Write_b_eep(0x43 + 16,0x08 | 0x10 | 0x80));
  7207  00158E  ECAA  F01E         	call	_Busy_eep	;wreg free
  7208  001592  6A09               	clrf	?_Write_b_eep+1,c
  7209  001594  0E53               	movlw	83
  7210  001596  6E08               	movwf	?_Write_b_eep,c
  7211  001598  0E98               	movlw	152
  7212  00159A  6E0A               	movwf	?_Write_b_eep+2,c
  7213  00159C  EC90  F01C         	call	_Write_b_eep	;wreg free
  7214                           
  7215                           ;main.c: 519: (Busy_eep(), Write_b_eep(0x43 + 17,0x08 | 0x10 | 0x80));
  7216  0015A0  ECAA  F01E         	call	_Busy_eep	;wreg free
  7217  0015A4  6A09               	clrf	?_Write_b_eep+1,c
  7218  0015A6  0E54               	movlw	84
  7219  0015A8  6E08               	movwf	?_Write_b_eep,c
  7220  0015AA  0E98               	movlw	152
  7221  0015AC  6E0A               	movwf	?_Write_b_eep+2,c
  7222  0015AE  EC90  F01C         	call	_Write_b_eep	;wreg free
  7223                           
  7224                           ;main.c: 524: (Busy_eep(), Write_b_eep(0x43 + 18,0));
  7225  0015B2  ECAA  F01E         	call	_Busy_eep	;wreg free
  7226  0015B6  6A09               	clrf	?_Write_b_eep+1,c
  7227  0015B8  0E55               	movlw	85
  7228  0015BA  6E08               	movwf	?_Write_b_eep,c
  7229  0015BC  0E00               	movlw	0
  7230  0015BE  6A0A               	clrf	?_Write_b_eep+2,c
  7231  0015C0  EC90  F01C         	call	_Write_b_eep	;wreg free
  7232                           
  7233                           ;main.c: 525: (Busy_eep(), Write_b_eep(0x43 + 19,0));
  7234  0015C4  ECAA  F01E         	call	_Busy_eep	;wreg free
  7235  0015C8  6A09               	clrf	?_Write_b_eep+1,c
  7236  0015CA  0E56               	movlw	86
  7237  0015CC  6E08               	movwf	?_Write_b_eep,c
  7238  0015CE  0E00               	movlw	0
  7239  0015D0  6A0A               	clrf	?_Write_b_eep+2,c
  7240  0015D2  EC90  F01C         	call	_Write_b_eep	;wreg free
  7241                           
  7242                           ;main.c: 526: (Busy_eep(), Write_b_eep(0x43 + 20,0));
  7243  0015D6  ECAA  F01E         	call	_Busy_eep	;wreg free
  7244  0015DA  6A09               	clrf	?_Write_b_eep+1,c
  7245  0015DC  0E57               	movlw	87
  7246  0015DE  6E08               	movwf	?_Write_b_eep,c
  7247  0015E0  0E00               	movlw	0
  7248  0015E2  6A0A               	clrf	?_Write_b_eep+2,c
  7249  0015E4  EC90  F01C         	call	_Write_b_eep	;wreg free
  7250                           
  7251                           ;main.c: 527: (Busy_eep(), Write_b_eep(0x43 + 21,0));
  7252  0015E8  ECAA  F01E         	call	_Busy_eep	;wreg free
  7253  0015EC  6A09               	clrf	?_Write_b_eep+1,c
  7254  0015EE  0E58               	movlw	88
  7255  0015F0  6E08               	movwf	?_Write_b_eep,c
  7256  0015F2  0E00               	movlw	0
  7257  0015F4  6A0A               	clrf	?_Write_b_eep+2,c
  7258  0015F6  EC90  F01C         	call	_Write_b_eep	;wreg free
  7259                           
  7260                           ;main.c: 528: (Busy_eep(), Write_b_eep(0x43 + 22,0));
  7261  0015FA  ECAA  F01E         	call	_Busy_eep	;wreg free
  7262  0015FE  6A09               	clrf	?_Write_b_eep+1,c
  7263  001600  0E59               	movlw	89
  7264  001602  6E08               	movwf	?_Write_b_eep,c
  7265  001604  0E00               	movlw	0
  7266  001606  6A0A               	clrf	?_Write_b_eep+2,c
  7267  001608  EC90  F01C         	call	_Write_b_eep	;wreg free
  7268                           
  7269                           ;main.c: 529: (Busy_eep(), Write_b_eep(0x43 + 23,0));
  7270  00160C  ECAA  F01E         	call	_Busy_eep	;wreg free
  7271  001610  6A09               	clrf	?_Write_b_eep+1,c
  7272  001612  0E5A               	movlw	90
  7273  001614  6E08               	movwf	?_Write_b_eep,c
  7274  001616  0E00               	movlw	0
  7275  001618  6A0A               	clrf	?_Write_b_eep+2,c
  7276  00161A  EC90  F01C         	call	_Write_b_eep	;wreg free
  7277                           
  7278                           ;main.c: 530: (Busy_eep(), Write_b_eep(0x43 + 24,0));
  7279  00161E  ECAA  F01E         	call	_Busy_eep	;wreg free
  7280  001622  6A09               	clrf	?_Write_b_eep+1,c
  7281  001624  0E5B               	movlw	91
  7282  001626  6E08               	movwf	?_Write_b_eep,c
  7283  001628  0E00               	movlw	0
  7284  00162A  6A0A               	clrf	?_Write_b_eep+2,c
  7285  00162C  EC90  F01C         	call	_Write_b_eep	;wreg free
  7286                           
  7287                           ;main.c: 531: (Busy_eep(), Write_b_eep(0x43 + 25,0));
  7288  001630  ECAA  F01E         	call	_Busy_eep	;wreg free
  7289  001634  6A09               	clrf	?_Write_b_eep+1,c
  7290  001636  0E5C               	movlw	92
  7291  001638  6E08               	movwf	?_Write_b_eep,c
  7292  00163A  0E00               	movlw	0
  7293  00163C  6A0A               	clrf	?_Write_b_eep+2,c
  7294  00163E  EC90  F01C         	call	_Write_b_eep	;wreg free
  7295                           
  7296                           ;main.c: 532: (Busy_eep(), Write_b_eep(0x43 + 26,0));
  7297  001642  ECAA  F01E         	call	_Busy_eep	;wreg free
  7298  001646  6A09               	clrf	?_Write_b_eep+1,c
  7299  001648  0E5D               	movlw	93
  7300  00164A  6E08               	movwf	?_Write_b_eep,c
  7301  00164C  0E00               	movlw	0
  7302  00164E  6A0A               	clrf	?_Write_b_eep+2,c
  7303  001650  EC90  F01C         	call	_Write_b_eep	;wreg free
  7304                           
  7305                           ;main.c: 533: (Busy_eep(), Write_b_eep(0x43 + 27,0));
  7306  001654  ECAA  F01E         	call	_Busy_eep	;wreg free
  7307  001658  6A09               	clrf	?_Write_b_eep+1,c
  7308  00165A  0E5E               	movlw	94
  7309  00165C  6E08               	movwf	?_Write_b_eep,c
  7310  00165E  0E00               	movlw	0
  7311  001660  6A0A               	clrf	?_Write_b_eep+2,c
  7312  001662  EC90  F01C         	call	_Write_b_eep	;wreg free
  7313                           
  7314                           ;main.c: 534: (Busy_eep(), Write_b_eep(0x43 + 28,0));
  7315  001666  ECAA  F01E         	call	_Busy_eep	;wreg free
  7316  00166A  6A09               	clrf	?_Write_b_eep+1,c
  7317  00166C  0E5F               	movlw	95
  7318  00166E  6E08               	movwf	?_Write_b_eep,c
  7319  001670  0E00               	movlw	0
  7320  001672  6A0A               	clrf	?_Write_b_eep+2,c
  7321  001674  EC90  F01C         	call	_Write_b_eep	;wreg free
  7322                           
  7323                           ;main.c: 535: (Busy_eep(), Write_b_eep(0x43 + 29,0));
  7324  001678  ECAA  F01E         	call	_Busy_eep	;wreg free
  7325  00167C  6A09               	clrf	?_Write_b_eep+1,c
  7326  00167E  0E60               	movlw	96
  7327  001680  6E08               	movwf	?_Write_b_eep,c
  7328  001682  0E00               	movlw	0
  7329  001684  6A0A               	clrf	?_Write_b_eep+2,c
  7330  001686  EC90  F01C         	call	_Write_b_eep	;wreg free
  7331                           
  7332                           ;main.c: 536: (Busy_eep(), Write_b_eep(0x43 + 30,0));
  7333  00168A  ECAA  F01E         	call	_Busy_eep	;wreg free
  7334  00168E  6A09               	clrf	?_Write_b_eep+1,c
  7335  001690  0E61               	movlw	97
  7336  001692  6E08               	movwf	?_Write_b_eep,c
  7337  001694  0E00               	movlw	0
  7338  001696  6A0A               	clrf	?_Write_b_eep+2,c
  7339  001698  EC90  F01C         	call	_Write_b_eep	;wreg free
  7340                           
  7341                           ;main.c: 537: (Busy_eep(), Write_b_eep(0x43 + 31,0));
  7342  00169C  ECAA  F01E         	call	_Busy_eep	;wreg free
  7343  0016A0  6A09               	clrf	?_Write_b_eep+1,c
  7344  0016A2  0E62               	movlw	98
  7345  0016A4  6E08               	movwf	?_Write_b_eep,c
  7346  0016A6  0E00               	movlw	0
  7347  0016A8  6A0A               	clrf	?_Write_b_eep+2,c
  7348  0016AA  EC90  F01C         	call	_Write_b_eep	;wreg free
  7349                           
  7350                           ;main.c: 538: (Busy_eep(), Write_b_eep(0x43 + 32,0));
  7351  0016AE  ECAA  F01E         	call	_Busy_eep	;wreg free
  7352  0016B2  6A09               	clrf	?_Write_b_eep+1,c
  7353  0016B4  0E63               	movlw	99
  7354  0016B6  6E08               	movwf	?_Write_b_eep,c
  7355  0016B8  0E00               	movlw	0
  7356  0016BA  6A0A               	clrf	?_Write_b_eep+2,c
  7357  0016BC  EC90  F01C         	call	_Write_b_eep	;wreg free
  7358                           
  7359                           ;main.c: 539: (Busy_eep(), Write_b_eep(0x43 + 33,0));
  7360  0016C0  ECAA  F01E         	call	_Busy_eep	;wreg free
  7361  0016C4  6A09               	clrf	?_Write_b_eep+1,c
  7362  0016C6  0E64               	movlw	100
  7363  0016C8  6E08               	movwf	?_Write_b_eep,c
  7364  0016CA  0E00               	movlw	0
  7365  0016CC  6A0A               	clrf	?_Write_b_eep+2,c
  7366  0016CE  EC90  F01C         	call	_Write_b_eep	;wreg free
  7367                           
  7368                           ;main.c: 541: (Busy_eep(), Write_b_eep(0x43 + 34,0));
  7369  0016D2  ECAA  F01E         	call	_Busy_eep	;wreg free
  7370  0016D6  6A09               	clrf	?_Write_b_eep+1,c
  7371  0016D8  0E65               	movlw	101
  7372  0016DA  6E08               	movwf	?_Write_b_eep,c
  7373  0016DC  0E00               	movlw	0
  7374  0016DE  6A0A               	clrf	?_Write_b_eep+2,c
  7375  0016E0  EC90  F01C         	call	_Write_b_eep	;wreg free
  7376                           
  7377                           ;main.c: 542: (Busy_eep(), Write_b_eep(0x43 + 35,0));
  7378  0016E4  ECAA  F01E         	call	_Busy_eep	;wreg free
  7379  0016E8  6A09               	clrf	?_Write_b_eep+1,c
  7380  0016EA  0E66               	movlw	102
  7381  0016EC  6E08               	movwf	?_Write_b_eep,c
  7382  0016EE  0E00               	movlw	0
  7383  0016F0  6A0A               	clrf	?_Write_b_eep+2,c
  7384  0016F2  EC90  F01C         	call	_Write_b_eep	;wreg free
  7385                           
  7386                           ;main.c: 543: (Busy_eep(), Write_b_eep(0x43 + 36,0));
  7387  0016F6  ECAA  F01E         	call	_Busy_eep	;wreg free
  7388  0016FA  6A09               	clrf	?_Write_b_eep+1,c
  7389  0016FC  0E67               	movlw	103
  7390  0016FE  6E08               	movwf	?_Write_b_eep,c
  7391  001700  0E00               	movlw	0
  7392  001702  6A0A               	clrf	?_Write_b_eep+2,c
  7393  001704  EC90  F01C         	call	_Write_b_eep	;wreg free
  7394                           
  7395                           ;main.c: 544: (Busy_eep(), Write_b_eep(0x43 + 37,0));
  7396  001708  ECAA  F01E         	call	_Busy_eep	;wreg free
  7397  00170C  6A09               	clrf	?_Write_b_eep+1,c
  7398  00170E  0E68               	movlw	104
  7399  001710  6E08               	movwf	?_Write_b_eep,c
  7400  001712  0E00               	movlw	0
  7401  001714  6A0A               	clrf	?_Write_b_eep+2,c
  7402  001716  EC90  F01C         	call	_Write_b_eep	;wreg free
  7403                           
  7404                           ;main.c: 545: (Busy_eep(), Write_b_eep(0x43 + 38,0));
  7405  00171A  ECAA  F01E         	call	_Busy_eep	;wreg free
  7406  00171E  6A09               	clrf	?_Write_b_eep+1,c
  7407  001720  0E69               	movlw	105
  7408  001722  6E08               	movwf	?_Write_b_eep,c
  7409  001724  0E00               	movlw	0
  7410  001726  6A0A               	clrf	?_Write_b_eep+2,c
  7411  001728  EC90  F01C         	call	_Write_b_eep	;wreg free
  7412                           
  7413                           ;main.c: 546: (Busy_eep(), Write_b_eep(0x43 + 39,0));
  7414  00172C  ECAA  F01E         	call	_Busy_eep	;wreg free
  7415  001730  6A09               	clrf	?_Write_b_eep+1,c
  7416  001732  0E6A               	movlw	106
  7417  001734  6E08               	movwf	?_Write_b_eep,c
  7418  001736  0E00               	movlw	0
  7419  001738  6A0A               	clrf	?_Write_b_eep+2,c
  7420  00173A  EC90  F01C         	call	_Write_b_eep	;wreg free
  7421                           
  7422                           ;main.c: 547: (Busy_eep(), Write_b_eep(0x43 + 40,0));
  7423  00173E  ECAA  F01E         	call	_Busy_eep	;wreg free
  7424  001742  6A09               	clrf	?_Write_b_eep+1,c
  7425  001744  0E6B               	movlw	107
  7426  001746  6E08               	movwf	?_Write_b_eep,c
  7427  001748  0E00               	movlw	0
  7428  00174A  6A0A               	clrf	?_Write_b_eep+2,c
  7429  00174C  EC90  F01C         	call	_Write_b_eep	;wreg free
  7430                           
  7431                           ;main.c: 548: (Busy_eep(), Write_b_eep(0x43 + 41,0));
  7432  001750  ECAA  F01E         	call	_Busy_eep	;wreg free
  7433  001754  6A09               	clrf	?_Write_b_eep+1,c
  7434  001756  0E6C               	movlw	108
  7435  001758  6E08               	movwf	?_Write_b_eep,c
  7436  00175A  0E00               	movlw	0
  7437  00175C  6A0A               	clrf	?_Write_b_eep+2,c
  7438  00175E  EC90  F01C         	call	_Write_b_eep	;wreg free
  7439                           
  7440                           ;main.c: 549: (Busy_eep(), Write_b_eep(0x43 + 42,0));
  7441  001762  ECAA  F01E         	call	_Busy_eep	;wreg free
  7442  001766  6A09               	clrf	?_Write_b_eep+1,c
  7443  001768  0E6D               	movlw	109
  7444  00176A  6E08               	movwf	?_Write_b_eep,c
  7445  00176C  0E00               	movlw	0
  7446  00176E  6A0A               	clrf	?_Write_b_eep+2,c
  7447  001770  EC90  F01C         	call	_Write_b_eep	;wreg free
  7448                           
  7449                           ;main.c: 550: (Busy_eep(), Write_b_eep(0x43 + 43,0));
  7450  001774  ECAA  F01E         	call	_Busy_eep	;wreg free
  7451  001778  6A09               	clrf	?_Write_b_eep+1,c
  7452  00177A  0E6E               	movlw	110
  7453  00177C  6E08               	movwf	?_Write_b_eep,c
  7454  00177E  0E00               	movlw	0
  7455  001780  6A0A               	clrf	?_Write_b_eep+2,c
  7456  001782  EC90  F01C         	call	_Write_b_eep	;wreg free
  7457                           
  7458                           ;main.c: 551: (Busy_eep(), Write_b_eep(0x43 + 44,0));
  7459  001786  ECAA  F01E         	call	_Busy_eep	;wreg free
  7460  00178A  6A09               	clrf	?_Write_b_eep+1,c
  7461  00178C  0E6F               	movlw	111
  7462  00178E  6E08               	movwf	?_Write_b_eep,c
  7463  001790  0E00               	movlw	0
  7464  001792  6A0A               	clrf	?_Write_b_eep+2,c
  7465  001794  EC90  F01C         	call	_Write_b_eep	;wreg free
  7466                           
  7467                           ;main.c: 552: (Busy_eep(), Write_b_eep(0x43 + 45,0));
  7468  001798  ECAA  F01E         	call	_Busy_eep	;wreg free
  7469  00179C  6A09               	clrf	?_Write_b_eep+1,c
  7470  00179E  0E70               	movlw	112
  7471  0017A0  6E08               	movwf	?_Write_b_eep,c
  7472  0017A2  0E00               	movlw	0
  7473  0017A4  6A0A               	clrf	?_Write_b_eep+2,c
  7474  0017A6  EC90  F01C         	call	_Write_b_eep	;wreg free
  7475                           
  7476                           ;main.c: 553: (Busy_eep(), Write_b_eep(0x43 + 46,0));
  7477  0017AA  ECAA  F01E         	call	_Busy_eep	;wreg free
  7478  0017AE  6A09               	clrf	?_Write_b_eep+1,c
  7479  0017B0  0E71               	movlw	113
  7480  0017B2  6E08               	movwf	?_Write_b_eep,c
  7481  0017B4  0E00               	movlw	0
  7482  0017B6  6A0A               	clrf	?_Write_b_eep+2,c
  7483  0017B8  EC90  F01C         	call	_Write_b_eep	;wreg free
  7484                           
  7485                           ;main.c: 554: (Busy_eep(), Write_b_eep(0x43 + 47,0));
  7486  0017BC  ECAA  F01E         	call	_Busy_eep	;wreg free
  7487  0017C0  6A09               	clrf	?_Write_b_eep+1,c
  7488  0017C2  0E72               	movlw	114
  7489  0017C4  6E08               	movwf	?_Write_b_eep,c
  7490  0017C6  0E00               	movlw	0
  7491  0017C8  6A0A               	clrf	?_Write_b_eep+2,c
  7492  0017CA  EC90  F01C         	call	_Write_b_eep	;wreg free
  7493                           
  7494                           ;main.c: 555: (Busy_eep(), Write_b_eep(0x43 + 48,0));
  7495  0017CE  ECAA  F01E         	call	_Busy_eep	;wreg free
  7496  0017D2  6A09               	clrf	?_Write_b_eep+1,c
  7497  0017D4  0E73               	movlw	115
  7498  0017D6  6E08               	movwf	?_Write_b_eep,c
  7499  0017D8  0E00               	movlw	0
  7500  0017DA  6A0A               	clrf	?_Write_b_eep+2,c
  7501  0017DC  EC90  F01C         	call	_Write_b_eep	;wreg free
  7502                           
  7503                           ;main.c: 556: (Busy_eep(), Write_b_eep(0x43 + 49,0));
  7504  0017E0  ECAA  F01E         	call	_Busy_eep	;wreg free
  7505  0017E4  6A09               	clrf	?_Write_b_eep+1,c
  7506  0017E6  0E74               	movlw	116
  7507  0017E8  6E08               	movwf	?_Write_b_eep,c
  7508  0017EA  0E00               	movlw	0
  7509  0017EC  6A0A               	clrf	?_Write_b_eep+2,c
  7510  0017EE  EC90  F01C         	call	_Write_b_eep	;wreg free
  7511                           
  7512                           ;main.c: 558: (Busy_eep(), Write_b_eep(0x43 + 50,0));
  7513  0017F2  ECAA  F01E         	call	_Busy_eep	;wreg free
  7514  0017F6  6A09               	clrf	?_Write_b_eep+1,c
  7515  0017F8  0E75               	movlw	117
  7516  0017FA  6E08               	movwf	?_Write_b_eep,c
  7517  0017FC  0E00               	movlw	0
  7518  0017FE  6A0A               	clrf	?_Write_b_eep+2,c
  7519  001800  EC90  F01C         	call	_Write_b_eep	;wreg free
  7520                           
  7521                           ;main.c: 559: (Busy_eep(), Write_b_eep(0x43 + 51,0));
  7522  001804  ECAA  F01E         	call	_Busy_eep	;wreg free
  7523  001808  6A09               	clrf	?_Write_b_eep+1,c
  7524  00180A  0E76               	movlw	118
  7525  00180C  6E08               	movwf	?_Write_b_eep,c
  7526  00180E  0E00               	movlw	0
  7527  001810  6A0A               	clrf	?_Write_b_eep+2,c
  7528  001812  EC90  F01C         	call	_Write_b_eep	;wreg free
  7529                           
  7530                           ;main.c: 560: (Busy_eep(), Write_b_eep(0x43 + 52,0));
  7531  001816  ECAA  F01E         	call	_Busy_eep	;wreg free
  7532  00181A  6A09               	clrf	?_Write_b_eep+1,c
  7533  00181C  0E77               	movlw	119
  7534  00181E  6E08               	movwf	?_Write_b_eep,c
  7535  001820  0E00               	movlw	0
  7536  001822  6A0A               	clrf	?_Write_b_eep+2,c
  7537  001824  EC90  F01C         	call	_Write_b_eep	;wreg free
  7538                           
  7539                           ;main.c: 561: (Busy_eep(), Write_b_eep(0x43 + 53,0));
  7540  001828  ECAA  F01E         	call	_Busy_eep	;wreg free
  7541  00182C  6A09               	clrf	?_Write_b_eep+1,c
  7542  00182E  0E78               	movlw	120
  7543  001830  6E08               	movwf	?_Write_b_eep,c
  7544  001832  0E00               	movlw	0
  7545  001834  6A0A               	clrf	?_Write_b_eep+2,c
  7546  001836  EC90  F01C         	call	_Write_b_eep	;wreg free
  7547                           
  7548                           ;main.c: 562: (Busy_eep(), Write_b_eep(0x43 + 54,0));
  7549  00183A  ECAA  F01E         	call	_Busy_eep	;wreg free
  7550  00183E  6A09               	clrf	?_Write_b_eep+1,c
  7551  001840  0E79               	movlw	121
  7552  001842  6E08               	movwf	?_Write_b_eep,c
  7553  001844  0E00               	movlw	0
  7554  001846  6A0A               	clrf	?_Write_b_eep+2,c
  7555  001848  EC90  F01C         	call	_Write_b_eep	;wreg free
  7556                           
  7557                           ;main.c: 563: (Busy_eep(), Write_b_eep(0x43 + 55,0));
  7558  00184C  ECAA  F01E         	call	_Busy_eep	;wreg free
  7559  001850  6A09               	clrf	?_Write_b_eep+1,c
  7560  001852  0E7A               	movlw	122
  7561  001854  6E08               	movwf	?_Write_b_eep,c
  7562  001856  0E00               	movlw	0
  7563  001858  6A0A               	clrf	?_Write_b_eep+2,c
  7564  00185A  EC90  F01C         	call	_Write_b_eep	;wreg free
  7565                           
  7566                           ;main.c: 564: (Busy_eep(), Write_b_eep(0x43 + 56,0));
  7567  00185E  ECAA  F01E         	call	_Busy_eep	;wreg free
  7568  001862  6A09               	clrf	?_Write_b_eep+1,c
  7569  001864  0E7B               	movlw	123
  7570  001866  6E08               	movwf	?_Write_b_eep,c
  7571  001868  0E00               	movlw	0
  7572  00186A  6A0A               	clrf	?_Write_b_eep+2,c
  7573  00186C  EC90  F01C         	call	_Write_b_eep	;wreg free
  7574                           
  7575                           ;main.c: 565: (Busy_eep(), Write_b_eep(0x43 + 57,0));
  7576  001870  ECAA  F01E         	call	_Busy_eep	;wreg free
  7577  001874  6A09               	clrf	?_Write_b_eep+1,c
  7578  001876  0E7C               	movlw	124
  7579  001878  6E08               	movwf	?_Write_b_eep,c
  7580  00187A  0E00               	movlw	0
  7581  00187C  6A0A               	clrf	?_Write_b_eep+2,c
  7582  00187E  EC90  F01C         	call	_Write_b_eep	;wreg free
  7583                           
  7584                           ;main.c: 566: (Busy_eep(), Write_b_eep(0x43 + 58,0));
  7585  001882  ECAA  F01E         	call	_Busy_eep	;wreg free
  7586  001886  6A09               	clrf	?_Write_b_eep+1,c
  7587  001888  0E7D               	movlw	125
  7588  00188A  6E08               	movwf	?_Write_b_eep,c
  7589  00188C  0E00               	movlw	0
  7590  00188E  6A0A               	clrf	?_Write_b_eep+2,c
  7591  001890  EC90  F01C         	call	_Write_b_eep	;wreg free
  7592                           
  7593                           ;main.c: 567: (Busy_eep(), Write_b_eep(0x43 + 59,0));
  7594  001894  ECAA  F01E         	call	_Busy_eep	;wreg free
  7595  001898  6A09               	clrf	?_Write_b_eep+1,c
  7596  00189A  0E7E               	movlw	126
  7597  00189C  6E08               	movwf	?_Write_b_eep,c
  7598  00189E  0E00               	movlw	0
  7599  0018A0  6A0A               	clrf	?_Write_b_eep+2,c
  7600  0018A2  EC90  F01C         	call	_Write_b_eep	;wreg free
  7601                           
  7602                           ;main.c: 568: (Busy_eep(), Write_b_eep(0x43 + 60,0));
  7603  0018A6  ECAA  F01E         	call	_Busy_eep	;wreg free
  7604  0018AA  6A09               	clrf	?_Write_b_eep+1,c
  7605  0018AC  0E7F               	movlw	127
  7606  0018AE  6E08               	movwf	?_Write_b_eep,c
  7607  0018B0  0E00               	movlw	0
  7608  0018B2  6A0A               	clrf	?_Write_b_eep+2,c
  7609  0018B4  EC90  F01C         	call	_Write_b_eep	;wreg free
  7610                           
  7611                           ;main.c: 569: (Busy_eep(), Write_b_eep(0x43 + 61,0));
  7612  0018B8  ECAA  F01E         	call	_Busy_eep	;wreg free
  7613  0018BC  6A09               	clrf	?_Write_b_eep+1,c
  7614  0018BE  0E80               	movlw	128
  7615  0018C0  6E08               	movwf	?_Write_b_eep,c
  7616  0018C2  0E00               	movlw	0
  7617  0018C4  6A0A               	clrf	?_Write_b_eep+2,c
  7618  0018C6  EC90  F01C         	call	_Write_b_eep	;wreg free
  7619                           
  7620                           ;main.c: 570: (Busy_eep(), Write_b_eep(0x43 + 62,0));
  7621  0018CA  ECAA  F01E         	call	_Busy_eep	;wreg free
  7622  0018CE  6A09               	clrf	?_Write_b_eep+1,c
  7623  0018D0  0E81               	movlw	129
  7624  0018D2  6E08               	movwf	?_Write_b_eep,c
  7625  0018D4  0E00               	movlw	0
  7626  0018D6  6A0A               	clrf	?_Write_b_eep+2,c
  7627  0018D8  EC90  F01C         	call	_Write_b_eep	;wreg free
  7628                           
  7629                           ;main.c: 571: (Busy_eep(), Write_b_eep(0x43 + 63,0));
  7630  0018DC  ECAA  F01E         	call	_Busy_eep	;wreg free
  7631  0018E0  6A09               	clrf	?_Write_b_eep+1,c
  7632  0018E2  0E82               	movlw	130
  7633  0018E4  6E08               	movwf	?_Write_b_eep,c
  7634  0018E6  0E00               	movlw	0
  7635  0018E8  6A0A               	clrf	?_Write_b_eep+2,c
  7636  0018EA  EC90  F01C         	call	_Write_b_eep	;wreg free
  7637                           
  7638                           ;main.c: 572: (Busy_eep(), Write_b_eep(0x43 + 64,0));
  7639  0018EE  ECAA  F01E         	call	_Busy_eep	;wreg free
  7640  0018F2  6A09               	clrf	?_Write_b_eep+1,c
  7641  0018F4  0E83               	movlw	131
  7642  0018F6  6E08               	movwf	?_Write_b_eep,c
  7643  0018F8  0E00               	movlw	0
  7644  0018FA  6A0A               	clrf	?_Write_b_eep+2,c
  7645  0018FC  EC90  F01C         	call	_Write_b_eep	;wreg free
  7646                           
  7647                           ;main.c: 573: (Busy_eep(), Write_b_eep(0x43 + 65,0));
  7648  001900  ECAA  F01E         	call	_Busy_eep	;wreg free
  7649  001904  6A09               	clrf	?_Write_b_eep+1,c
  7650  001906  0E84               	movlw	132
  7651  001908  6E08               	movwf	?_Write_b_eep,c
  7652  00190A  0E00               	movlw	0
  7653  00190C  6A0A               	clrf	?_Write_b_eep+2,c
  7654  00190E  EC90  F01C         	call	_Write_b_eep	;wreg free
  7655                           
  7656                           ;main.c: 577: for ( i = 0; i < 7; i++ ) {
  7657  001912  6A0E               	clrf	init_app_eeprom@i,c
  7658  001914                     l187:
  7659                           
  7660                           ;main.c: 578: for ( j = 0; j < 8; j++ ) {
  7661  001914  6A0F               	clrf	init_app_eeprom@j,c
  7662  001916                     l5009:
  7663                           
  7664                           ;main.c: 579: (Busy_eep(), Write_b_eep(0x43 + 72 + i * 8 + j,0));
  7665  001916  ECAA  F01E         	call	_Busy_eep	;wreg free
  7666  00191A  500F               	movf	init_app_eeprom@j,w,c
  7667  00191C  C00E  F00C         	movff	init_app_eeprom@i,??_init_app_eeprom
  7668  001920  6A0D               	clrf	(??_init_app_eeprom+1)& (0+255),c
  7669  001922  90D8               	bcf	status,0,c
  7670  001924  360C               	rlcf	??_init_app_eeprom,f,c
  7671  001926  360D               	rlcf	??_init_app_eeprom+1,f,c
  7672  001928  90D8               	bcf	status,0,c
  7673  00192A  360C               	rlcf	??_init_app_eeprom,f,c
  7674  00192C  360D               	rlcf	??_init_app_eeprom+1,f,c
  7675  00192E  90D8               	bcf	status,0,c
  7676  001930  360C               	rlcf	??_init_app_eeprom,f,c
  7677  001932  360D               	rlcf	??_init_app_eeprom+1,f,c
  7678  001934  260C               	addwf	??_init_app_eeprom,f,c
  7679  001936  0E00               	movlw	0
  7680  001938  220D               	addwfc	??_init_app_eeprom+1,f,c
  7681  00193A  0E8B               	movlw	139
  7682  00193C  240C               	addwf	??_init_app_eeprom,w,c
  7683  00193E  6E08               	movwf	?_Write_b_eep,c
  7684  001940  0E00               	movlw	0
  7685  001942  200D               	addwfc	??_init_app_eeprom+1,w,c
  7686  001944  6E09               	movwf	?_Write_b_eep+1,c
  7687  001946  0E00               	movlw	0
  7688  001948  6A0A               	clrf	?_Write_b_eep+2,c
  7689  00194A  EC90  F01C         	call	_Write_b_eep	;wreg free
  7690  00194E  2A0F               	incf	init_app_eeprom@j,f,c
  7691  001950  0E07               	movlw	7
  7692  001952  640F               	cpfsgt	init_app_eeprom@j,c
  7693  001954  D7E0               	goto	l5009
  7694  001956  2A0E               	incf	init_app_eeprom@i,f,c
  7695  001958  0E06               	movlw	6
  7696  00195A  640E               	cpfsgt	init_app_eeprom@i,c
  7697  00195C  D7DB               	goto	l187
  7698  00195E  0C06               	retlw	6
  7699  001960                     __end_of_init_app_eeprom:
  7700                           	opt stack 0
  7701                           tblptru	equ	0xFF8
  7702                           tblptrh	equ	0xFF7
  7703                           tblptrl	equ	0xFF6
  7704                           tablat	equ	0xFF5
  7705                           prodh	equ	0xFF4
  7706                           prodl	equ	0xFF3
  7707                           intcon	equ	0xFF2
  7708                           postinc0	equ	0xFEE
  7709                           wreg	equ	0xFE8
  7710                           indf1	equ	0xFE7
  7711                           fsr1h	equ	0xFE2
  7712                           fsr1l	equ	0xFE1
  7713                           indf2	equ	0xFDF
  7714                           postinc2	equ	0xFDE
  7715                           postdec2	equ	0xFDD
  7716                           plusw2	equ	0xFDB
  7717                           fsr2h	equ	0xFDA
  7718                           fsr2l	equ	0xFD9
  7719                           status	equ	0xFD8
  7720                           
  7721 ;; *************** function _vscp_setUserID *****************
  7722 ;; Defined at:
  7723 ;;		line 2375 in file "../main.c"
  7724 ;; Parameters:    Size  Location     Type
  7725 ;;  idx             1    wreg     unsigned char 
  7726 ;;  data            1   11[COMRAM] unsigned char 
  7727 ;; Auto vars:     Size  Location     Type
  7728 ;;  idx             1   12[COMRAM] unsigned char 
  7729 ;; Return value:  Size  Location     Type
  7730 ;;		None               void
  7731 ;; Registers used:
  7732 ;;		wreg, status,2, status,0, cstack
  7733 ;; Tracked objects:
  7734 ;;		On entry : F/0
  7735 ;;		On exit  : 0/0
  7736 ;;		Unchanged: 0/0
  7737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7738 ;;      Params:         1       0       0       0       0       0       0
  7739 ;;      Locals:         1       0       0       0       0       0       0
  7740 ;;      Temps:          0       0       0       0       0       0       0
  7741 ;;      Totals:         2       0       0       0       0       0       0
  7742 ;;Total ram usage:        2 bytes
  7743 ;; Hardware stack levels used:    1
  7744 ;; Hardware stack levels required when called:    3
  7745 ;; This function calls:
  7746 ;;		_Busy_eep
  7747 ;;		_Write_b_eep
  7748 ;; This function is called by:
  7749 ;;		_vscp_writeStdReg
  7750 ;; This function uses a non-reentrant model
  7751 ;;
  7752                           
  7753                           	psect	text21
  7754  003BDA                     __ptext21:
  7755                           	opt stack 0
  7756  003BDA                     _vscp_setUserID:
  7757                           	opt stack 25
  7758                           
  7759                           ;incstack = 0
  7760                           ;incstack = 0
  7761                           ;vscp_setUserID@idx stored from wreg
  7762  003BDA  CFE8 F00D          	movff	wreg,vscp_setUserID@idx
  7763                           
  7764                           ; BSR set to: 0
  7765                           ;main.c: 2376: (Busy_eep(), Write_b_eep(idx + 0x06,data));
  7766  003BDE  ECAA  F01E         	call	_Busy_eep	;wreg free
  7767  003BE2  0E06               	movlw	6
  7768  003BE4  240D               	addwf	vscp_setUserID@idx,w,c
  7769  003BE6  6E08               	movwf	?_Write_b_eep,c
  7770  003BE8  6A09               	clrf	?_Write_b_eep+1,c
  7771  003BEA  0E00               	movlw	0
  7772  003BEC  2209               	addwfc	?_Write_b_eep+1,f,c
  7773  003BEE  C00C  F00A         	movff	vscp_setUserID@data,?_Write_b_eep+2
  7774  003BF2  EF90  F01C         	goto	_Write_b_eep	;wreg free
  7775  003BF6                     __end_of_vscp_setUserID:
  7776                           	opt stack 0
  7777                           tblptru	equ	0xFF8
  7778                           tblptrh	equ	0xFF7
  7779                           tblptrl	equ	0xFF6
  7780                           tablat	equ	0xFF5
  7781                           prodh	equ	0xFF4
  7782                           prodl	equ	0xFF3
  7783                           intcon	equ	0xFF2
  7784                           postinc0	equ	0xFEE
  7785                           wreg	equ	0xFE8
  7786                           indf1	equ	0xFE7
  7787                           fsr1h	equ	0xFE2
  7788                           fsr1l	equ	0xFE1
  7789                           indf2	equ	0xFDF
  7790                           postinc2	equ	0xFDE
  7791                           postdec2	equ	0xFDD
  7792                           plusw2	equ	0xFDB
  7793                           fsr2h	equ	0xFDA
  7794                           fsr2l	equ	0xFD9
  7795                           status	equ	0xFD8
  7796                           
  7797 ;; *************** function _vscp_setManufacturerId *****************
  7798 ;; Defined at:
  7799 ;;		line 818 in file "../main.c"
  7800 ;; Parameters:    Size  Location     Type
  7801 ;;  idx             1    wreg     unsigned char 
  7802 ;;  data            1   11[COMRAM] unsigned char 
  7803 ;; Auto vars:     Size  Location     Type
  7804 ;;  idx             1   12[COMRAM] unsigned char 
  7805 ;; Return value:  Size  Location     Type
  7806 ;;		None               void
  7807 ;; Registers used:
  7808 ;;		wreg, status,2, status,0, cstack
  7809 ;; Tracked objects:
  7810 ;;		On entry : F/0
  7811 ;;		On exit  : 0/0
  7812 ;;		Unchanged: 0/0
  7813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7814 ;;      Params:         1       0       0       0       0       0       0
  7815 ;;      Locals:         1       0       0       0       0       0       0
  7816 ;;      Temps:          0       0       0       0       0       0       0
  7817 ;;      Totals:         2       0       0       0       0       0       0
  7818 ;;Total ram usage:        2 bytes
  7819 ;; Hardware stack levels used:    1
  7820 ;; Hardware stack levels required when called:    3
  7821 ;; This function calls:
  7822 ;;		_Busy_eep
  7823 ;;		_Write_b_eep
  7824 ;; This function is called by:
  7825 ;;		_vscp_writeStdReg
  7826 ;; This function uses a non-reentrant model
  7827 ;;
  7828                           
  7829                           	psect	text22
  7830  003A80                     __ptext22:
  7831                           	opt stack 0
  7832  003A80                     _vscp_setManufacturerId:
  7833                           	opt stack 25
  7834                           
  7835                           ;incstack = 0
  7836                           ;incstack = 0
  7837                           ;vscp_setManufacturerId@idx stored from wreg
  7838  003A80  CFE8 F00D          	movff	wreg,vscp_setManufacturerId@idx
  7839                           
  7840                           ; BSR set to: 0
  7841                           ;main.c: 819: if ( idx>7 ) return;
  7842  003A84  0E07               	movlw	7
  7843  003A86  640D               	cpfsgt	vscp_setManufacturerId@idx,c
  7844  003A88  D001               	goto	l5955
  7845  003A8A  D00C               	goto	l253
  7846  003A8C                     l5955:
  7847                           
  7848                           ; BSR set to: 0
  7849                           ;main.c: 820: (Busy_eep(), Write_b_eep(0x0B + idx,data));
  7850  003A8C  ECAA  F01E         	call	_Busy_eep	;wreg free
  7851  003A90  0E0B               	movlw	11
  7852  003A92  240D               	addwf	vscp_setManufacturerId@idx,w,c
  7853  003A94  6E08               	movwf	?_Write_b_eep,c
  7854  003A96  6A09               	clrf	?_Write_b_eep+1,c
  7855  003A98  0E00               	movlw	0
  7856  003A9A  2209               	addwfc	?_Write_b_eep+1,f,c
  7857  003A9C  C00C  F00A         	movff	vscp_setManufacturerId@data,?_Write_b_eep+2
  7858  003AA0  EC90  F01C         	call	_Write_b_eep	;wreg free
  7859  003AA4                     l253:
  7860  003AA4  0012               	return	
  7861  003AA6                     __end_of_vscp_setManufacturerId:
  7862                           	opt stack 0
  7863                           tblptru	equ	0xFF8
  7864                           tblptrh	equ	0xFF7
  7865                           tblptrl	equ	0xFF6
  7866                           tablat	equ	0xFF5
  7867                           prodh	equ	0xFF4
  7868                           prodl	equ	0xFF3
  7869                           intcon	equ	0xFF2
  7870                           postinc0	equ	0xFEE
  7871                           wreg	equ	0xFE8
  7872                           indf1	equ	0xFE7
  7873                           fsr1h	equ	0xFE2
  7874                           fsr1l	equ	0xFE1
  7875                           indf2	equ	0xFDF
  7876                           postinc2	equ	0xFDE
  7877                           postdec2	equ	0xFDD
  7878                           plusw2	equ	0xFDB
  7879                           fsr2h	equ	0xFDA
  7880                           fsr2l	equ	0xFD9
  7881                           status	equ	0xFD8
  7882                           
  7883 ;; *************** function _vscp_setGUID *****************
  7884 ;; Defined at:
  7885 ;;		line 806 in file "../main.c"
  7886 ;; Parameters:    Size  Location     Type
  7887 ;;  idx             1    wreg     unsigned char 
  7888 ;;  data            1   11[COMRAM] unsigned char 
  7889 ;; Auto vars:     Size  Location     Type
  7890 ;;  idx             1   12[COMRAM] unsigned char 
  7891 ;; Return value:  Size  Location     Type
  7892 ;;		None               void
  7893 ;; Registers used:
  7894 ;;		wreg, status,2, status,0, cstack
  7895 ;; Tracked objects:
  7896 ;;		On entry : F/0
  7897 ;;		On exit  : 0/0
  7898 ;;		Unchanged: 0/0
  7899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7900 ;;      Params:         1       0       0       0       0       0       0
  7901 ;;      Locals:         1       0       0       0       0       0       0
  7902 ;;      Temps:          0       0       0       0       0       0       0
  7903 ;;      Totals:         2       0       0       0       0       0       0
  7904 ;;Total ram usage:        2 bytes
  7905 ;; Hardware stack levels used:    1
  7906 ;; Hardware stack levels required when called:    3
  7907 ;; This function calls:
  7908 ;;		_Busy_eep
  7909 ;;		_Write_b_eep
  7910 ;; This function is called by:
  7911 ;;		_vscp_writeStdReg
  7912 ;; This function uses a non-reentrant model
  7913 ;;
  7914                           
  7915                           	psect	text23
  7916  003AA6                     __ptext23:
  7917                           	opt stack 0
  7918  003AA6                     _vscp_setGUID:
  7919                           	opt stack 25
  7920                           
  7921                           ;incstack = 0
  7922                           ;incstack = 0
  7923                           ;vscp_setGUID@idx stored from wreg
  7924  003AA6  CFE8 F00D          	movff	wreg,vscp_setGUID@idx
  7925                           
  7926                           ; BSR set to: 0
  7927                           ;main.c: 807: if ( idx>15 ) return;
  7928  003AAA  0E0F               	movlw	15
  7929  003AAC  640D               	cpfsgt	vscp_setGUID@idx,c
  7930  003AAE  D001               	goto	l5947
  7931  003AB0  D00C               	goto	l249
  7932  003AB2                     l5947:
  7933                           
  7934                           ; BSR set to: 0
  7935                           ;main.c: 808: (Busy_eep(), Write_b_eep(0x13 + idx,data));
  7936  003AB2  ECAA  F01E         	call	_Busy_eep	;wreg free
  7937  003AB6  0E13               	movlw	19
  7938  003AB8  240D               	addwf	vscp_setGUID@idx,w,c
  7939  003ABA  6E08               	movwf	?_Write_b_eep,c
  7940  003ABC  6A09               	clrf	?_Write_b_eep+1,c
  7941  003ABE  0E00               	movlw	0
  7942  003AC0  2209               	addwfc	?_Write_b_eep+1,f,c
  7943  003AC2  C00C  F00A         	movff	vscp_setGUID@data,?_Write_b_eep+2
  7944  003AC6  EC90  F01C         	call	_Write_b_eep	;wreg free
  7945  003ACA                     l249:
  7946  003ACA  0012               	return	
  7947  003ACC                     __end_of_vscp_setGUID:
  7948                           	opt stack 0
  7949                           tblptru	equ	0xFF8
  7950                           tblptrh	equ	0xFF7
  7951                           tblptrl	equ	0xFF6
  7952                           tablat	equ	0xFF5
  7953                           prodh	equ	0xFF4
  7954                           prodl	equ	0xFF3
  7955                           intcon	equ	0xFF2
  7956                           postinc0	equ	0xFEE
  7957                           wreg	equ	0xFE8
  7958                           indf1	equ	0xFE7
  7959                           fsr1h	equ	0xFE2
  7960                           fsr1l	equ	0xFE1
  7961                           indf2	equ	0xFDF
  7962                           postinc2	equ	0xFDE
  7963                           postdec2	equ	0xFDD
  7964                           plusw2	equ	0xFDB
  7965                           fsr2h	equ	0xFDA
  7966                           fsr2l	equ	0xFD9
  7967                           status	equ	0xFD8
  7968                           
  7969 ;; *************** function _vscp_writeAppReg *****************
  7970 ;; Defined at:
  7971 ;;		line 970 in file "../main.c"
  7972 ;; Parameters:    Size  Location     Type
  7973 ;;  reg             1    wreg     unsigned char 
  7974 ;;  val             1   80[COMRAM] unsigned char 
  7975 ;; Auto vars:     Size  Location     Type
  7976 ;;  reg             1   29[BANK0 ] unsigned char 
  7977 ;;  val             1   26[BANK0 ] unsigned char 
  7978 ;;  bOn             1   28[BANK0 ] enum E15660
  7979 ;;  rv              1   27[BANK0 ] unsigned char 
  7980 ;;  bInfoEvent      1   25[BANK0 ] enum E15660
  7981 ;; Return value:  Size  Location     Type
  7982 ;;                  1    wreg      unsigned char 
  7983 ;; Registers used:
  7984 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7985 ;; Tracked objects:
  7986 ;;		On entry : F/0
  7987 ;;		On exit  : F/0
  7988 ;;		Unchanged: 0/0
  7989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7990 ;;      Params:         1       0       0       0       0       0       0
  7991 ;;      Locals:         0       5       0       0       0       0       0
  7992 ;;      Temps:          0       3       0       0       0       0       0
  7993 ;;      Totals:         1       8       0       0       0       0       0
  7994 ;;Total ram usage:        9 bytes
  7995 ;; Hardware stack levels used:    1
  7996 ;; Hardware stack levels required when called:    7
  7997 ;; This function calls:
  7998 ;;		_Busy_eep
  7999 ;;		_Write_b_eep
  8000 ;;		_Read_b_eep
  8001 ;;		_SendInformationEvent
  8002 ;;		_calculateSetFilterMask
  8003 ;; This function is called by:
  8004 ;;		_vscp_writeRegister
  8005 ;;		_vscp_handleProtocolEvent
  8006 ;; This function uses a non-reentrant model
  8007 ;;
  8008                           
  8009                           	psect	text24
  8010  000622                     __ptext24:
  8011                           	opt stack 0
  8012  000622                     _vscp_writeAppReg:
  8013                           	opt stack 21
  8014                           
  8015                           ;incstack = 0
  8016                           ;incstack = 0
  8017                           ;vscp_writeAppReg@reg stored from wreg
  8018  000622  CFE8 F0CD          	movff	wreg,vscp_writeAppReg@reg
  8019                           
  8020                           ; BSR set to: 0
  8021                           ;main.c: 971: uint8_t rv;
  8022                           ;main.c: 972: BOOL bInfoEvent = 0;
  8023  000626  6BC9               	clrf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8024                           
  8025                           ;main.c: 973: BOOL bOn = 0;
  8026  000628  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8027                           
  8028                           ; BSR set to: 0
  8029                           ;main.c: 975: rv = ~val;
  8030  00062A  1C51               	comf	vscp_writeAppReg@val,w,c
  8031  00062C  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8032                           
  8033                           ; BSR set to: 0
  8034                           ;main.c: 978: if ( reg == 0 ) {
  8035  00062E  67CD               	tstfsz	vscp_writeAppReg@reg& (0+255),b
  8036  000630  D00F               	goto	l10481
  8037                           
  8038                           ; BSR set to: 0
  8039                           ;main.c: 979: (Busy_eep(), Write_b_eep(0x43 + 0,val));
  8040  000632  ECAA  F01E         	call	_Busy_eep	;wreg free
  8041  000636  6A09               	clrf	?_Write_b_eep+1,c
  8042  000638  0E43               	movlw	67
  8043  00063A  6E08               	movwf	?_Write_b_eep,c
  8044  00063C  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8045  000640  EC90  F01C         	call	_Write_b_eep	;wreg free
  8046                           
  8047                           ;main.c: 980: rv = Read_b_eep(0x43 + 0);
  8048  000644  6A09               	clrf	?_Read_b_eep+1,c
  8049  000646  0E43               	movlw	67
  8050  000648  6E08               	movwf	?_Read_b_eep,c
  8051  00064A  EC76  F01E         	call	_Read_b_eep	;wreg free
  8052  00064E  D3B4               	goto	L27
  8053  000650                     l10481:
  8054                           
  8055                           ; BSR set to: 0
  8056                           ;main.c: 982: else if ( reg == 1 ) {
  8057  000650  05CD               	decf	vscp_writeAppReg@reg& (0+255),w,b
  8058  000652  E10F               	bnz	l10489
  8059                           
  8060                           ; BSR set to: 0
  8061                           ;main.c: 984: (Busy_eep(), Write_b_eep(0x43 + 1,val));
  8062  000654  ECAA  F01E         	call	_Busy_eep	;wreg free
  8063  000658  6A09               	clrf	?_Write_b_eep+1,c
  8064  00065A  0E44               	movlw	68
  8065  00065C  6E08               	movwf	?_Write_b_eep,c
  8066  00065E  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8067  000662  EC90  F01C         	call	_Write_b_eep	;wreg free
  8068                           
  8069                           ;main.c: 985: rv = Read_b_eep(0x43 + 1);
  8070  000666  6A09               	clrf	?_Read_b_eep+1,c
  8071  000668  0E44               	movlw	68
  8072  00066A  6E08               	movwf	?_Read_b_eep,c
  8073  00066C  EC76  F01E         	call	_Read_b_eep	;wreg free
  8074  000670  D3A3               	goto	L27
  8075  000672                     l10489:
  8076                           
  8077                           ; BSR set to: 0
  8078                           ;main.c: 988: else if ( (reg >= 2) && (reg <= 9) ) {
  8079  000672  0E01               	movlw	1
  8080  000674  65CD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8081  000676  D17B               	goto	l10641
  8082                           
  8083                           ; BSR set to: 0
  8084  000678  0E0A               	movlw	10
  8085  00067A  61CD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8086  00067C  D178               	goto	l10641
  8087                           
  8088                           ; BSR set to: 0
  8089                           ;main.c: 990: if ( Read_b_eep(0x43 + 10 + reg - 2) &
  8090                           ;main.c: 992: 0x80 ) {
  8091  00067E  0E4B               	movlw	75
  8092  000680  25CD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8093  000682  6E08               	movwf	?_Read_b_eep,c
  8094  000684  6A09               	clrf	?_Read_b_eep+1,c
  8095  000686  0E00               	movlw	0
  8096  000688  2209               	addwfc	?_Read_b_eep+1,f,c
  8097  00068A  EC76  F01E         	call	_Read_b_eep	;wreg free
  8098  00068E  0100               	movlb	0	; () banked
  8099  000690  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8100  000692  BFC6               	btfsc	??_vscp_writeAppReg& (0+255),7,b
  8101  000694  D157               	goto	l10639
  8102  000696  D3A1               	goto	l10901
  8103  000698                     l10497:
  8104                           
  8105                           ; BSR set to: 0
  8106                           ;main.c: 999: bInfoEvent = 1;
  8107  000698  0E01               	movlw	1
  8108  00069A  6FC9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8109                           
  8110                           ; BSR set to: 0
  8111                           ;main.c: 1001: if ( 1 == val ) {
  8112  00069C  0451               	decf	vscp_writeAppReg@val,w,c
  8113  00069E  E126               	bnz	l306
  8114                           
  8115                           ; BSR set to: 0
  8116                           ;main.c: 1003: LATBbits.LATB4 = 1;
  8117  0006A0  888A               	bsf	3978,4,c	;volatile
  8118                           
  8119                           ; BSR set to: 0
  8120                           ;main.c: 1004: rv = LATBbits.LATB4;
  8121  0006A2  0E00               	movlw	0
  8122  0006A4  B88A               	btfsc	3978,4,c	;volatile
  8123  0006A6  0E01               	movlw	1
  8124  0006A8  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8125                           
  8126                           ; BSR set to: 0
  8127                           ;main.c: 1005: bOn = 1;
  8128  0006AA  0E01               	movlw	1
  8129  0006AC  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8130                           
  8131                           ; BSR set to: 0
  8132                           ;main.c: 1008: if ( Read_b_eep(0x43 + 10) & 0x04 ) {
  8133  0006AE  6A09               	clrf	?_Read_b_eep+1,c
  8134  0006B0  0E4D               	movlw	77
  8135  0006B2  6E08               	movwf	?_Read_b_eep,c
  8136  0006B4  EC76  F01E         	call	_Read_b_eep	;wreg free
  8137  0006B8  0100               	movlb	0	; () banked
  8138  0006BA  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8139  0006BC  A5C6               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8140  0006BE  D38D               	goto	l10901
  8141  0006C0                     l10509:
  8142                           
  8143                           ; BSR set to: 0
  8144                           ;main.c: 1009: relay_protection_timer[ 0 ] =
  8145                           ;main.c: 1010: Read_b_eep(0x43 + 34) * 256 +
  8146                           ;main.c: 1011: Read_b_eep(0x43 + 35);
  8147  0006C0  6A09               	clrf	?_Read_b_eep+1,c
  8148  0006C2  0E66               	movlw	102
  8149  0006C4  6E08               	movwf	?_Read_b_eep,c
  8150  0006C6  EC76  F01E         	call	_Read_b_eep	;wreg free
  8151  0006CA  0100               	movlb	0	; () banked
  8152  0006CC  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8153  0006CE  6A09               	clrf	?_Read_b_eep+1,c
  8154  0006D0  0E65               	movlw	101
  8155  0006D2  6E08               	movwf	?_Read_b_eep,c
  8156  0006D4  EC76  F01E         	call	_Read_b_eep	;wreg free
  8157  0006D8  0100               	movlb	0	; () banked
  8158  0006DA  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8159  0006DC  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8160  0006DE  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  8161  0006E0  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8162  0006E2  6F60               	movwf	_relay_protection_timer& (0+255),b
  8163  0006E4  0E00               	movlw	0
  8164  0006E6  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8165  0006E8  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  8166  0006EA  D377               	goto	l10901
  8167  0006EC                     l306:
  8168                           
  8169                           ; BSR set to: 0
  8170                           ;main.c: 1015: else if (0 == val) {
  8171  0006EC  6651               	tstfsz	vscp_writeAppReg@val,c
  8172  0006EE  D375               	goto	l10901
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;main.c: 1016: LATBbits.LATB4 = 0;
  8176  0006F0  988A               	bcf	3978,4,c	;volatile
  8177                           
  8178                           ; BSR set to: 0
  8179                           ;main.c: 1017: rv = LATBbits.LATB4;
  8180  0006F2  0E00               	movlw	0
  8181  0006F4  B88A               	btfsc	3978,4,c	;volatile
  8182  0006F6  0E01               	movlw	1
  8183  0006F8  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8184  0006FA                     l10515:
  8185                           
  8186                           ; BSR set to: 0
  8187                           ;main.c: 1018: bOn = 0;
  8188  0006FA  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8189  0006FC  D36E               	goto	l10901
  8190  0006FE                     l10517:
  8191                           
  8192                           ; BSR set to: 0
  8193                           ;main.c: 1025: bInfoEvent = 1;
  8194  0006FE  0E01               	movlw	1
  8195  000700  6FC9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8196                           
  8197                           ; BSR set to: 0
  8198                           ;main.c: 1027: if (1 == val) {
  8199  000702  0451               	decf	vscp_writeAppReg@val,w,c
  8200  000704  E11D               	bnz	l312
  8201                           
  8202                           ; BSR set to: 0
  8203                           ;main.c: 1029: LATBbits.LATB1 = 1;
  8204  000706  828A               	bsf	3978,1,c	;volatile
  8205                           
  8206                           ; BSR set to: 0
  8207                           ;main.c: 1030: rv = LATBbits.LATB1;
  8208  000708  0E00               	movlw	0
  8209  00070A  B28A               	btfsc	3978,1,c	;volatile
  8210  00070C  0E01               	movlw	1
  8211  00070E  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8212                           
  8213                           ; BSR set to: 0
  8214                           ;main.c: 1031: bOn = 1;
  8215  000710  0E01               	movlw	1
  8216  000712  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8217                           
  8218                           ; BSR set to: 0
  8219                           ;main.c: 1033: if (Read_b_eep(0x43 + 11) & 0x04) {
  8220  000714  6A09               	clrf	?_Read_b_eep+1,c
  8221  000716  0E4E               	movlw	78
  8222  000718  6E08               	movwf	?_Read_b_eep,c
  8223  00071A  EC76  F01E         	call	_Read_b_eep	;wreg free
  8224  00071E  0100               	movlb	0	; () banked
  8225  000720  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8226  000722  A5C6               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8227  000724  D35A               	goto	l10901
  8228  000726                     l10529:
  8229                           
  8230                           ; BSR set to: 0
  8231                           ;main.c: 1034: relay_protection_timer[ 1 ] =
  8232                           ;main.c: 1035: Read_b_eep(0x43 + 36) * 256 +
  8233                           ;main.c: 1036: Read_b_eep(0x43 + 37);
  8234  000726  6A09               	clrf	?_Read_b_eep+1,c
  8235  000728  0E68               	movlw	104
  8236  00072A  6E08               	movwf	?_Read_b_eep,c
  8237  00072C  EC76  F01E         	call	_Read_b_eep	;wreg free
  8238  000730  0100               	movlb	0	; () banked
  8239  000732  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8240  000734  6A09               	clrf	?_Read_b_eep+1,c
  8241  000736  0E67               	movlw	103
  8242  000738  6E08               	movwf	?_Read_b_eep,c
  8243  00073A  EC76  F01E         	call	_Read_b_eep	;wreg free
  8244  00073E  D170               	goto	L28
  8245  000740                     l312:
  8246                           
  8247                           ; BSR set to: 0
  8248                           ;main.c: 1040: else if (0 == val) {
  8249  000740  6651               	tstfsz	vscp_writeAppReg@val,c
  8250  000742  D34B               	goto	l10901
  8251                           
  8252                           ; BSR set to: 0
  8253                           ;main.c: 1041: LATBbits.LATB1 = 0;
  8254  000744  928A               	bcf	3978,1,c	;volatile
  8255                           
  8256                           ; BSR set to: 0
  8257                           ;main.c: 1042: rv = LATBbits.LATB1;
  8258  000746  0E00               	movlw	0
  8259  000748  B28A               	btfsc	3978,1,c	;volatile
  8260  00074A  0E01               	movlw	1
  8261  00074C  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8262  00074E  D7D5               	goto	l10515
  8263  000750                     l10537:
  8264                           
  8265                           ; BSR set to: 0
  8266                           ;main.c: 1050: bInfoEvent = 1;
  8267  000750  0E01               	movlw	1
  8268  000752  6FC9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;main.c: 1052: if (1 == val) {
  8272  000754  0451               	decf	vscp_writeAppReg@val,w,c
  8273  000756  E126               	bnz	l317
  8274                           
  8275                           ; BSR set to: 0
  8276                           ;main.c: 1054: LATBbits.LATB0 = 1;
  8277  000758  808A               	bsf	3978,0,c	;volatile
  8278                           
  8279                           ; BSR set to: 0
  8280                           ;main.c: 1055: rv = LATBbits.LATB0;
  8281  00075A  0E00               	movlw	0
  8282  00075C  B08A               	btfsc	3978,0,c	;volatile
  8283  00075E  0E01               	movlw	1
  8284  000760  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8285                           
  8286                           ; BSR set to: 0
  8287                           ;main.c: 1056: bOn = 1;
  8288  000762  0E01               	movlw	1
  8289  000764  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8290                           
  8291                           ; BSR set to: 0
  8292                           ;main.c: 1058: if ( Read_b_eep(0x43 + 12) & 0x04) {
  8293  000766  6A09               	clrf	?_Read_b_eep+1,c
  8294  000768  0E4F               	movlw	79
  8295  00076A  6E08               	movwf	?_Read_b_eep,c
  8296  00076C  EC76  F01E         	call	_Read_b_eep	;wreg free
  8297  000770  0100               	movlb	0	; () banked
  8298  000772  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8299  000774  A5C6               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8300  000776  D331               	goto	l10901
  8301  000778                     l10549:
  8302                           
  8303                           ; BSR set to: 0
  8304                           ;main.c: 1059: relay_protection_timer[ 2 ] =
  8305                           ;main.c: 1060: Read_b_eep(0x43 + 38) * 256 +
  8306                           ;main.c: 1061: Read_b_eep(0x43 + 39);
  8307  000778  6A09               	clrf	?_Read_b_eep+1,c
  8308  00077A  0E6A               	movlw	106
  8309  00077C  6E08               	movwf	?_Read_b_eep,c
  8310  00077E  EC76  F01E         	call	_Read_b_eep	;wreg free
  8311  000782  0100               	movlb	0	; () banked
  8312  000784  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8313  000786  6A09               	clrf	?_Read_b_eep+1,c
  8314  000788  0E69               	movlw	105
  8315  00078A  6E08               	movwf	?_Read_b_eep,c
  8316  00078C  EC76  F01E         	call	_Read_b_eep	;wreg free
  8317  000790  0100               	movlb	0	; () banked
  8318  000792  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8319  000794  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8320  000796  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  8321  000798  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8322  00079A  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  8323  00079C  0E00               	movlw	0
  8324  00079E  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8325  0007A0  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  8326  0007A2  D31B               	goto	l10901
  8327  0007A4                     l317:
  8328                           
  8329                           ; BSR set to: 0
  8330                           ;main.c: 1065: else if (0 == val) {
  8331  0007A4  6651               	tstfsz	vscp_writeAppReg@val,c
  8332  0007A6  D319               	goto	l10901
  8333                           
  8334                           ; BSR set to: 0
  8335                           ;main.c: 1066: LATBbits.LATB0 = 0;
  8336  0007A8  908A               	bcf	3978,0,c	;volatile
  8337                           
  8338                           ; BSR set to: 0
  8339                           ;main.c: 1067: rv = LATBbits.LATB0;
  8340  0007AA  0E00               	movlw	0
  8341  0007AC  B08A               	btfsc	3978,0,c	;volatile
  8342  0007AE  0E01               	movlw	1
  8343  0007B0  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8344  0007B2  D7A3               	goto	l10515
  8345  0007B4                     l10557:
  8346                           
  8347                           ; BSR set to: 0
  8348                           ;main.c: 1076: bInfoEvent = 1;
  8349  0007B4  0E01               	movlw	1
  8350  0007B6  6FC9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8351                           
  8352                           ; BSR set to: 0
  8353                           ;main.c: 1078: if (1 == val) {
  8354  0007B8  0451               	decf	vscp_writeAppReg@val,w,c
  8355  0007BA  E126               	bnz	l322
  8356                           
  8357                           ; BSR set to: 0
  8358                           ;main.c: 1080: LATCbits.LATC7 = 1;
  8359  0007BC  8E8B               	bsf	3979,7,c	;volatile
  8360                           
  8361                           ; BSR set to: 0
  8362                           ;main.c: 1081: rv = LATCbits.LATC7;
  8363  0007BE  0E00               	movlw	0
  8364  0007C0  BE8B               	btfsc	3979,7,c	;volatile
  8365  0007C2  0E01               	movlw	1
  8366  0007C4  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8367                           
  8368                           ; BSR set to: 0
  8369                           ;main.c: 1082: bOn = 1;
  8370  0007C6  0E01               	movlw	1
  8371  0007C8  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8372                           
  8373                           ; BSR set to: 0
  8374                           ;main.c: 1084: if (Read_b_eep(0x43 + 13) & 0x04) {
  8375  0007CA  6A09               	clrf	?_Read_b_eep+1,c
  8376  0007CC  0E50               	movlw	80
  8377  0007CE  6E08               	movwf	?_Read_b_eep,c
  8378  0007D0  EC76  F01E         	call	_Read_b_eep	;wreg free
  8379  0007D4  0100               	movlb	0	; () banked
  8380  0007D6  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8381  0007D8  A5C6               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8382  0007DA  D2FF               	goto	l10901
  8383  0007DC                     l10569:
  8384                           
  8385                           ; BSR set to: 0
  8386                           ;main.c: 1085: relay_protection_timer[ 3 ] =
  8387                           ;main.c: 1086: Read_b_eep(0x43 + 40) * 256 +
  8388                           ;main.c: 1087: Read_b_eep(0x43 + 41);
  8389  0007DC  6A09               	clrf	?_Read_b_eep+1,c
  8390  0007DE  0E6C               	movlw	108
  8391  0007E0  6E08               	movwf	?_Read_b_eep,c
  8392  0007E2  EC76  F01E         	call	_Read_b_eep	;wreg free
  8393  0007E6  0100               	movlb	0	; () banked
  8394  0007E8  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8395  0007EA  6A09               	clrf	?_Read_b_eep+1,c
  8396  0007EC  0E6B               	movlw	107
  8397  0007EE  6E08               	movwf	?_Read_b_eep,c
  8398  0007F0  EC76  F01E         	call	_Read_b_eep	;wreg free
  8399  0007F4  0100               	movlb	0	; () banked
  8400  0007F6  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8401  0007F8  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8402  0007FA  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  8403  0007FC  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8404  0007FE  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  8405  000800  0E00               	movlw	0
  8406  000802  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8407  000804  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  8408  000806  D2E9               	goto	l10901
  8409  000808                     l322:
  8410                           
  8411                           ; BSR set to: 0
  8412                           ;main.c: 1091: else if (0 == val) {
  8413  000808  6651               	tstfsz	vscp_writeAppReg@val,c
  8414  00080A  D2E7               	goto	l10901
  8415                           
  8416                           ; BSR set to: 0
  8417                           ;main.c: 1092: LATCbits.LATC7 = 0;
  8418  00080C  9E8B               	bcf	3979,7,c	;volatile
  8419                           
  8420                           ; BSR set to: 0
  8421                           ;main.c: 1093: rv = LATCbits.LATC7;
  8422  00080E  0E00               	movlw	0
  8423  000810  BE8B               	btfsc	3979,7,c	;volatile
  8424  000812  0E01               	movlw	1
  8425  000814  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8426  000816  D771               	goto	l10515
  8427  000818                     l10577:
  8428                           
  8429                           ; BSR set to: 0
  8430                           ;main.c: 1102: bInfoEvent = 1;
  8431  000818  0E01               	movlw	1
  8432  00081A  6FC9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8433                           
  8434                           ; BSR set to: 0
  8435                           ;main.c: 1104: if (1 == val) {
  8436  00081C  0451               	decf	vscp_writeAppReg@val,w,c
  8437  00081E  E126               	bnz	l327
  8438                           
  8439                           ; BSR set to: 0
  8440                           ;main.c: 1106: LATCbits.LATC6 = 1;
  8441  000820  8C8B               	bsf	3979,6,c	;volatile
  8442                           
  8443                           ; BSR set to: 0
  8444                           ;main.c: 1107: rv = LATCbits.LATC6;
  8445  000822  0E00               	movlw	0
  8446  000824  BC8B               	btfsc	3979,6,c	;volatile
  8447  000826  0E01               	movlw	1
  8448  000828  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8449                           
  8450                           ; BSR set to: 0
  8451                           ;main.c: 1108: bOn = 1;
  8452  00082A  0E01               	movlw	1
  8453  00082C  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8454                           
  8455                           ; BSR set to: 0
  8456                           ;main.c: 1110: if (Read_b_eep(0x43 + 14) & 0x04) {
  8457  00082E  6A09               	clrf	?_Read_b_eep+1,c
  8458  000830  0E51               	movlw	81
  8459  000832  6E08               	movwf	?_Read_b_eep,c
  8460  000834  EC76  F01E         	call	_Read_b_eep	;wreg free
  8461  000838  0100               	movlb	0	; () banked
  8462  00083A  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8463  00083C  A5C6               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8464  00083E  D2CD               	goto	l10901
  8465  000840                     l10589:
  8466                           
  8467                           ; BSR set to: 0
  8468                           ;main.c: 1111: relay_protection_timer[ 4 ] =
  8469                           ;main.c: 1112: Read_b_eep(0x43 + 42) * 256 +
  8470                           ;main.c: 1113: Read_b_eep(0x43 + 43);
  8471  000840  6A09               	clrf	?_Read_b_eep+1,c
  8472  000842  0E6E               	movlw	110
  8473  000844  6E08               	movwf	?_Read_b_eep,c
  8474  000846  EC76  F01E         	call	_Read_b_eep	;wreg free
  8475  00084A  0100               	movlb	0	; () banked
  8476  00084C  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8477  00084E  6A09               	clrf	?_Read_b_eep+1,c
  8478  000850  0E6D               	movlw	109
  8479  000852  6E08               	movwf	?_Read_b_eep,c
  8480  000854  EC76  F01E         	call	_Read_b_eep	;wreg free
  8481  000858  0100               	movlb	0	; () banked
  8482  00085A  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8483  00085C  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8484  00085E  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  8485  000860  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8486  000862  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  8487  000864  0E00               	movlw	0
  8488  000866  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8489  000868  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  8490  00086A  D2B7               	goto	l10901
  8491  00086C                     l327:
  8492                           
  8493                           ; BSR set to: 0
  8494                           ;main.c: 1117: else if (0 == val) {
  8495  00086C  6651               	tstfsz	vscp_writeAppReg@val,c
  8496  00086E  D2B5               	goto	l10901
  8497                           
  8498                           ; BSR set to: 0
  8499                           ;main.c: 1118: LATCbits.LATC6 = 0;
  8500  000870  9C8B               	bcf	3979,6,c	;volatile
  8501                           
  8502                           ; BSR set to: 0
  8503                           ;main.c: 1119: rv = LATCbits.LATC6;
  8504  000872  0E00               	movlw	0
  8505  000874  BC8B               	btfsc	3979,6,c	;volatile
  8506  000876  0E01               	movlw	1
  8507  000878  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8508  00087A  D73F               	goto	l10515
  8509  00087C                     l10597:
  8510                           
  8511                           ; BSR set to: 0
  8512                           ;main.c: 1128: bInfoEvent = 1;
  8513  00087C  0E01               	movlw	1
  8514  00087E  6FC9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8515                           
  8516                           ; BSR set to: 0
  8517                           ;main.c: 1130: if (1 == val) {
  8518  000880  0451               	decf	vscp_writeAppReg@val,w,c
  8519  000882  E126               	bnz	l332
  8520                           
  8521                           ; BSR set to: 0
  8522                           ;main.c: 1132: LATCbits.LATC5 = 1;
  8523  000884  8A8B               	bsf	3979,5,c	;volatile
  8524                           
  8525                           ; BSR set to: 0
  8526                           ;main.c: 1133: rv = LATCbits.LATC5;
  8527  000886  0E00               	movlw	0
  8528  000888  BA8B               	btfsc	3979,5,c	;volatile
  8529  00088A  0E01               	movlw	1
  8530  00088C  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8531                           
  8532                           ; BSR set to: 0
  8533                           ;main.c: 1134: bOn = 1;
  8534  00088E  0E01               	movlw	1
  8535  000890  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8536                           
  8537                           ; BSR set to: 0
  8538                           ;main.c: 1136: if (Read_b_eep(0x43 + 15) & 0x04) {
  8539  000892  6A09               	clrf	?_Read_b_eep+1,c
  8540  000894  0E52               	movlw	82
  8541  000896  6E08               	movwf	?_Read_b_eep,c
  8542  000898  EC76  F01E         	call	_Read_b_eep	;wreg free
  8543  00089C  0100               	movlb	0	; () banked
  8544  00089E  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8545  0008A0  A5C6               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8546  0008A2  D29B               	goto	l10901
  8547  0008A4                     l10609:
  8548                           
  8549                           ; BSR set to: 0
  8550                           ;main.c: 1137: relay_protection_timer[ 5 ] =
  8551                           ;main.c: 1138: Read_b_eep(0x43 + 44) * 256 +
  8552                           ;main.c: 1139: Read_b_eep(0x43 + 45);
  8553  0008A4  6A09               	clrf	?_Read_b_eep+1,c
  8554  0008A6  0E70               	movlw	112
  8555  0008A8  6E08               	movwf	?_Read_b_eep,c
  8556  0008AA  EC76  F01E         	call	_Read_b_eep	;wreg free
  8557  0008AE  0100               	movlb	0	; () banked
  8558  0008B0  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8559  0008B2  6A09               	clrf	?_Read_b_eep+1,c
  8560  0008B4  0E6F               	movlw	111
  8561  0008B6  6E08               	movwf	?_Read_b_eep,c
  8562  0008B8  EC76  F01E         	call	_Read_b_eep	;wreg free
  8563  0008BC  0100               	movlb	0	; () banked
  8564  0008BE  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8565  0008C0  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8566  0008C2  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  8567  0008C4  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8568  0008C6  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  8569  0008C8  0E00               	movlw	0
  8570  0008CA  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8571  0008CC  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  8572  0008CE  D285               	goto	l10901
  8573  0008D0                     l332:
  8574                           
  8575                           ; BSR set to: 0
  8576                           ;main.c: 1143: else if (0 == val) {
  8577  0008D0  6651               	tstfsz	vscp_writeAppReg@val,c
  8578  0008D2  D283               	goto	l10901
  8579                           
  8580                           ; BSR set to: 0
  8581                           ;main.c: 1144: LATCbits.LATC5 = 0;
  8582  0008D4  9A8B               	bcf	3979,5,c	;volatile
  8583                           
  8584                           ; BSR set to: 0
  8585                           ;main.c: 1145: rv = LATCbits.LATC5;
  8586  0008D6  0E00               	movlw	0
  8587  0008D8  BA8B               	btfsc	3979,5,c	;volatile
  8588  0008DA  0E01               	movlw	1
  8589  0008DC  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8590  0008DE  D70D               	goto	l10515
  8591  0008E0                     l10617:
  8592                           
  8593                           ; BSR set to: 0
  8594                           ;main.c: 1153: bInfoEvent = 1;
  8595  0008E0  0E01               	movlw	1
  8596  0008E2  6FC9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8597                           
  8598                           ; BSR set to: 0
  8599                           ;main.c: 1155: if (1 == val) {
  8600  0008E4  0451               	decf	vscp_writeAppReg@val,w,c
  8601  0008E6  E126               	bnz	l337
  8602                           
  8603                           ; BSR set to: 0
  8604                           ;main.c: 1157: LATCbits.LATC4 = 1;
  8605  0008E8  888B               	bsf	3979,4,c	;volatile
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;main.c: 1158: rv = LATCbits.LATC4;
  8609  0008EA  0E00               	movlw	0
  8610  0008EC  B88B               	btfsc	3979,4,c	;volatile
  8611  0008EE  0E01               	movlw	1
  8612  0008F0  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8613                           
  8614                           ; BSR set to: 0
  8615                           ;main.c: 1159: bOn = 1;
  8616  0008F2  0E01               	movlw	1
  8617  0008F4  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8618                           
  8619                           ; BSR set to: 0
  8620                           ;main.c: 1161: if (Read_b_eep(0x43 + 16) & 0x04) {
  8621  0008F6  6A09               	clrf	?_Read_b_eep+1,c
  8622  0008F8  0E53               	movlw	83
  8623  0008FA  6E08               	movwf	?_Read_b_eep,c
  8624  0008FC  EC76  F01E         	call	_Read_b_eep	;wreg free
  8625  000900  0100               	movlb	0	; () banked
  8626  000902  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8627  000904  A5C6               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8628  000906  D269               	goto	l10901
  8629  000908                     l10629:
  8630                           
  8631                           ; BSR set to: 0
  8632                           ;main.c: 1162: relay_protection_timer[ 6 ] =
  8633                           ;main.c: 1163: Read_b_eep(0x43 + 46) * 256 +
  8634                           ;main.c: 1164: Read_b_eep(0x43 + 47);
  8635  000908  6A09               	clrf	?_Read_b_eep+1,c
  8636  00090A  0E72               	movlw	114
  8637  00090C  6E08               	movwf	?_Read_b_eep,c
  8638  00090E  EC76  F01E         	call	_Read_b_eep	;wreg free
  8639  000912  0100               	movlb	0	; () banked
  8640  000914  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8641  000916  6A09               	clrf	?_Read_b_eep+1,c
  8642  000918  0E71               	movlw	113
  8643  00091A  6E08               	movwf	?_Read_b_eep,c
  8644  00091C  EC76  F01E         	call	_Read_b_eep	;wreg free
  8645  000920  0100               	movlb	0	; () banked
  8646  000922  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8647  000924  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8648  000926  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  8649  000928  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8650  00092A  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  8651  00092C  0E00               	movlw	0
  8652  00092E  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8653  000930  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  8654  000932  D253               	goto	l10901
  8655  000934                     l337:
  8656                           
  8657                           ; BSR set to: 0
  8658                           ;main.c: 1168: else if (0 == val) {
  8659  000934  6651               	tstfsz	vscp_writeAppReg@val,c
  8660  000936  D251               	goto	l10901
  8661                           
  8662                           ; BSR set to: 0
  8663                           ;main.c: 1169: LATCbits.LATC4 = 0;
  8664  000938  988B               	bcf	3979,4,c	;volatile
  8665                           
  8666                           ; BSR set to: 0
  8667                           ;main.c: 1170: rv = LATCbits.LATC4;
  8668  00093A  0E00               	movlw	0
  8669  00093C  B88B               	btfsc	3979,4,c	;volatile
  8670  00093E  0E01               	movlw	1
  8671  000940  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8672  000942  D6DB               	goto	l10515
  8673  000944                     l10639:
  8674                           
  8675                           ; BSR set to: 0
  8676  000944  51CD               	movf	vscp_writeAppReg@reg& (0+255),w,b
  8677                           
  8678                           ; Switch size 1, requested type "space"
  8679                           ; Number of cases is 7, Range of values is 2 to 8
  8680                           ; switch strategies available:
  8681                           ; Name         Instructions Cycles
  8682                           ; simple_byte           22    12 (average)
  8683                           ;	Chosen strategy is simple_byte
  8684  000946  0A02               	xorlw	2	; case 2
  8685  000948  E101 D6A6          	bz	l10497
  8686  00094C  0A01               	xorlw	1	; case 3
  8687  00094E  E101 D6D6          	bz	l10517
  8688  000952  0A07               	xorlw	7	; case 4
  8689  000954  E101 D6FC          	bz	l10537
  8690  000958  0A01               	xorlw	1	; case 5
  8691  00095A  E101 D72B          	bz	l10557
  8692  00095E  0A03               	xorlw	3	; case 6
  8693  000960  E101 D75A          	bz	l10577
  8694  000964  0A01               	xorlw	1	; case 7
  8695  000966  E08A               	bz	l10597
  8696  000968  0A0F               	xorlw	15	; case 8
  8697  00096A  E0BA               	bz	l10617
  8698                           
  8699                           ; BSR set to: 0
  8700                           ;main.c: 1176: }
  8701                           ;main.c: 1177: }
  8702  00096C  D236               	goto	l10901
  8703  00096E                     l10641:
  8704                           
  8705                           ; BSR set to: 0
  8706                           ;main.c: 1180: else if ( (reg >= 10 ) &&
  8707                           ;main.c: 1181: (reg <= 17) ) {
  8708  00096E  0E09               	movlw	9
  8709  000970  65CD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8710  000972  D12D               	goto	l10819
  8711                           
  8712                           ; BSR set to: 0
  8713  000974  0E12               	movlw	18
  8714  000976  61CD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8715  000978  D12A               	goto	l10819
  8716  00097A  D115               	goto	l10817
  8717  00097C                     l10647:
  8718                           
  8719                           ; BSR set to: 0
  8720                           ;main.c: 1187: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8721  00097C  ECAA  F01E         	call	_Busy_eep	;wreg free
  8722  000980  DA65               	call	PL4	;call to abstracted procedure
  8723  000982  EC90  F01C         	call	_Write_b_eep	;wreg free
  8724                           
  8725                           ;main.c: 1188: rv = Read_b_eep(0x43 + reg);
  8726  000986  DA6C               	call	PL6	;call to abstracted procedure
  8727  000988  EC76  F01E         	call	_Read_b_eep	;wreg free
  8728  00098C  0100               	movlb	0	; () banked
  8729  00098E  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8730                           
  8731                           ; BSR set to: 0
  8732                           ;main.c: 1190: if ( val & 0x01 ) {
  8733  000990  A051               	btfss	vscp_writeAppReg@val,0,c
  8734  000992  D011               	goto	l10661
  8735                           
  8736                           ; BSR set to: 0
  8737                           ;main.c: 1192: LATBbits.LATB4 = 0;
  8738  000994  988A               	bcf	3978,4,c	;volatile
  8739                           
  8740                           ;main.c: 1193: bOn = 0;
  8741  000996  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8742                           
  8743                           ; BSR set to: 0
  8744                           ;main.c: 1195: relay_pulse_flags |= 0x01;
  8745  000998  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  8746                           
  8747                           ; BSR set to: 0
  8748                           ;main.c: 1196: relay_pulse_timer[ 0 ] =
  8749                           ;main.c: 1197: Read_b_eep(0x43 + 18) * 256 +
  8750                           ;main.c: 1198: Read_b_eep(0x43 + 19);
  8751  00099A  6A09               	clrf	?_Read_b_eep+1,c
  8752  00099C  0E56               	movlw	86
  8753  00099E  6E08               	movwf	?_Read_b_eep,c
  8754  0009A0  EC76  F01E         	call	_Read_b_eep	;wreg free
  8755  0009A4  0100               	movlb	0	; () banked
  8756  0009A6  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8757  0009A8  6A09               	clrf	?_Read_b_eep+1,c
  8758  0009AA  0E55               	movlw	85
  8759  0009AC  6E08               	movwf	?_Read_b_eep,c
  8760  0009AE  EC76  F01E         	call	_Read_b_eep	;wreg free
  8761  0009B2  DA5E               	call	PL48	;call to abstracted procedure
  8762                           
  8763                           ;main.c: 1199: }
  8764  0009B4  D003               	goto	l10667
  8765  0009B6                     l10661:
  8766                           
  8767                           ; BSR set to: 0
  8768                           ;main.c: 1200: else {
  8769                           ;main.c: 1201: relay_pulse_flags &= 0b11111110;
  8770  0009B6  918A               	bcf	_relay_pulse_flags& (0+255),0,b
  8771                           
  8772                           ; BSR set to: 0
  8773                           ;main.c: 1202: LATBbits.LATB4 = 0;
  8774  0009B8  988A               	bcf	3978,4,c	;volatile
  8775                           
  8776                           ; BSR set to: 0
  8777                           ;main.c: 1203: bOn = 0;
  8778  0009BA  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8779  0009BC                     l10667:
  8780                           
  8781                           ; BSR set to: 0
  8782                           ;main.c: 1204: }
  8783                           ;main.c: 1206: if ( val & 0x04 ) {
  8784  0009BC  B451               	btfsc	vscp_writeAppReg@val,2,c
  8785  0009BE  D680               	goto	l10509
  8786  0009C0  D20C               	goto	l10901
  8787  0009C2                     l10671:
  8788                           
  8789                           ; BSR set to: 0
  8790                           ;main.c: 1215: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8791  0009C2  ECAA  F01E         	call	_Busy_eep	;wreg free
  8792  0009C6  DA42               	call	PL4	;call to abstracted procedure
  8793  0009C8  EC90  F01C         	call	_Write_b_eep	;wreg free
  8794                           
  8795                           ;main.c: 1216: rv = Read_b_eep(0x43 + reg);
  8796  0009CC  DA49               	call	PL6	;call to abstracted procedure
  8797  0009CE  EC76  F01E         	call	_Read_b_eep	;wreg free
  8798  0009D2  0100               	movlb	0	; () banked
  8799  0009D4  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8800                           
  8801                           ; BSR set to: 0
  8802                           ;main.c: 1218: if ( val & 0x01 ) {
  8803  0009D6  A051               	btfss	vscp_writeAppReg@val,0,c
  8804  0009D8  D012               	goto	l10685
  8805                           
  8806                           ; BSR set to: 0
  8807                           ;main.c: 1220: LATBbits.LATB1 = 0;
  8808  0009DA  928A               	bcf	3978,1,c	;volatile
  8809                           
  8810                           ;main.c: 1221: bOn = 0;
  8811  0009DC  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8812                           
  8813                           ; BSR set to: 0
  8814                           ;main.c: 1223: relay_pulse_flags |= 0x02;
  8815  0009DE  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  8816                           
  8817                           ; BSR set to: 0
  8818                           ;main.c: 1224: relay_pulse_timer[ 1 ] =
  8819                           ;main.c: 1225: Read_b_eep(0x43 + 18) * 256 +
  8820                           ;main.c: 1226: Read_b_eep(0x43 + 19);
  8821  0009E0  6A09               	clrf	?_Read_b_eep+1,c
  8822  0009E2  0E56               	movlw	86
  8823  0009E4  6E08               	movwf	?_Read_b_eep,c
  8824  0009E6  EC76  F01E         	call	_Read_b_eep	;wreg free
  8825  0009EA  0100               	movlb	0	; () banked
  8826  0009EC  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8827  0009EE  6A09               	clrf	?_Read_b_eep+1,c
  8828  0009F0  0E55               	movlw	85
  8829  0009F2  6E08               	movwf	?_Read_b_eep,c
  8830  0009F4  EC76  F01E         	call	_Read_b_eep	;wreg free
  8831  0009F8  0100               	movlb	0	; () banked
  8832  0009FA  DA44               	call	PL56	;call to abstracted procedure
  8833                           
  8834                           ;main.c: 1227: }
  8835  0009FC  D003               	goto	l10691
  8836  0009FE                     l10685:
  8837                           
  8838                           ; BSR set to: 0
  8839                           ;main.c: 1228: else {
  8840                           ;main.c: 1229: relay_pulse_flags &= 0b11111101;
  8841  0009FE  938A               	bcf	_relay_pulse_flags& (0+255),1,b
  8842                           
  8843                           ; BSR set to: 0
  8844                           ;main.c: 1230: LATBbits.LATB1 = 0;
  8845  000A00  928A               	bcf	3978,1,c	;volatile
  8846                           
  8847                           ; BSR set to: 0
  8848                           ;main.c: 1231: bOn = 0;
  8849  000A02  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8850  000A04                     l10691:
  8851                           
  8852                           ; BSR set to: 0
  8853                           ;main.c: 1232: }
  8854                           ;main.c: 1234: if ( val & 0x04 ) {
  8855  000A04  A451               	btfss	vscp_writeAppReg@val,2,c
  8856  000A06  D1E9               	goto	l10901
  8857                           
  8858                           ; BSR set to: 0
  8859                           ;main.c: 1235: relay_protection_timer[ 1 ] =
  8860                           ;main.c: 1236: Read_b_eep(0x43 + 34) * 256 +
  8861                           ;main.c: 1237: Read_b_eep(0x43 + 35);
  8862  000A08  6A09               	clrf	?_Read_b_eep+1,c
  8863  000A0A  0E66               	movlw	102
  8864  000A0C  6E08               	movwf	?_Read_b_eep,c
  8865  000A0E  EC76  F01E         	call	_Read_b_eep	;wreg free
  8866  000A12  0100               	movlb	0	; () banked
  8867  000A14  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8868  000A16  6A09               	clrf	?_Read_b_eep+1,c
  8869  000A18  0E65               	movlw	101
  8870  000A1A  6E08               	movwf	?_Read_b_eep,c
  8871  000A1C  EC76  F01E         	call	_Read_b_eep	;wreg free
  8872  000A20                     L28:
  8873  000A20  0100               	movlb	0	; () banked
  8874  000A22  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8875  000A24  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8876  000A26  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  8877  000A28  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8878  000A2A  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  8879  000A2C  0E00               	movlw	0
  8880  000A2E  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8881  000A30  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  8882  000A32  D1D3               	goto	l10901
  8883  000A34                     l10695:
  8884                           
  8885                           ; BSR set to: 0
  8886                           ;main.c: 1243: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8887  000A34  ECAA  F01E         	call	_Busy_eep	;wreg free
  8888  000A38  DA09               	call	PL4	;call to abstracted procedure
  8889  000A3A  EC90  F01C         	call	_Write_b_eep	;wreg free
  8890                           
  8891                           ;main.c: 1244: rv = Read_b_eep(0x43 + reg);
  8892  000A3E  DA10               	call	PL6	;call to abstracted procedure
  8893  000A40  EC76  F01E         	call	_Read_b_eep	;wreg free
  8894  000A44  0100               	movlb	0	; () banked
  8895  000A46  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8896                           
  8897                           ; BSR set to: 0
  8898                           ;main.c: 1246: if ( val & 0x01 ) {
  8899  000A48  A051               	btfss	vscp_writeAppReg@val,0,c
  8900  000A4A  D013               	goto	l10709
  8901                           
  8902                           ; BSR set to: 0
  8903                           ;main.c: 1248: LATBbits.LATB0 = 0;
  8904  000A4C  908A               	bcf	3978,0,c	;volatile
  8905                           
  8906                           ;main.c: 1249: bOn = 0;
  8907  000A4E  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8908                           
  8909                           ; BSR set to: 0
  8910                           ;main.c: 1251: relay_pulse_flags |= 0x04;
  8911  000A50  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  8912                           
  8913                           ; BSR set to: 0
  8914                           ;main.c: 1252: relay_pulse_timer[ 2 ] =
  8915                           ;main.c: 1253: Read_b_eep(0x43 + 22) * 256 +
  8916                           ;main.c: 1254: Read_b_eep(0x43 + 23);
  8917  000A52  6A09               	clrf	?_Read_b_eep+1,c
  8918  000A54  0E5A               	movlw	90
  8919  000A56  6E08               	movwf	?_Read_b_eep,c
  8920  000A58  EC76  F01E         	call	_Read_b_eep	;wreg free
  8921  000A5C  0100               	movlb	0	; () banked
  8922  000A5E  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8923  000A60  6A09               	clrf	?_Read_b_eep+1,c
  8924  000A62  0E59               	movlw	89
  8925  000A64  6E08               	movwf	?_Read_b_eep,c
  8926  000A66  EC76  F01E         	call	_Read_b_eep	;wreg free
  8927  000A6A  0100               	movlb	0	; () banked
  8928  000A6C  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8929  000A6E  DA33               	call	PL68	;call to abstracted procedure
  8930                           
  8931                           ;main.c: 1255: }
  8932  000A70  D003               	goto	l10715
  8933  000A72                     l10709:
  8934                           
  8935                           ; BSR set to: 0
  8936                           ;main.c: 1256: else {
  8937                           ;main.c: 1257: relay_pulse_flags &= 0b11111011;
  8938  000A72  958A               	bcf	_relay_pulse_flags& (0+255),2,b
  8939                           
  8940                           ; BSR set to: 0
  8941                           ;main.c: 1258: LATBbits.LATB0 = 0;
  8942  000A74  908A               	bcf	3978,0,c	;volatile
  8943                           
  8944                           ; BSR set to: 0
  8945                           ;main.c: 1259: bOn = 0;
  8946  000A76  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8947  000A78                     l10715:
  8948                           
  8949                           ; BSR set to: 0
  8950                           ;main.c: 1260: }
  8951                           ;main.c: 1262: if ( val & 0x04 ) {
  8952  000A78  B451               	btfsc	vscp_writeAppReg@val,2,c
  8953  000A7A  D67E               	goto	l10549
  8954  000A7C  D1AE               	goto	l10901
  8955  000A7E                     l10719:
  8956                           
  8957                           ; BSR set to: 0
  8958                           ;main.c: 1271: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8959  000A7E  ECAA  F01E         	call	_Busy_eep	;wreg free
  8960  000A82  D9E4               	call	PL4	;call to abstracted procedure
  8961  000A84  EC90  F01C         	call	_Write_b_eep	;wreg free
  8962                           
  8963                           ;main.c: 1272: rv = Read_b_eep(0x43 + reg);
  8964  000A88  D9EB               	call	PL6	;call to abstracted procedure
  8965  000A8A  EC76  F01E         	call	_Read_b_eep	;wreg free
  8966  000A8E  0100               	movlb	0	; () banked
  8967  000A90  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8968                           
  8969                           ; BSR set to: 0
  8970                           ;main.c: 1274: if ( val & 0x01 ) {
  8971  000A92  A051               	btfss	vscp_writeAppReg@val,0,c
  8972  000A94  D013               	goto	l10733
  8973                           
  8974                           ; BSR set to: 0
  8975                           ;main.c: 1276: LATCbits.LATC7 = 0;
  8976  000A96  9E8B               	bcf	3979,7,c	;volatile
  8977                           
  8978                           ;main.c: 1277: bOn = 0;
  8979  000A98  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8980                           
  8981                           ; BSR set to: 0
  8982                           ;main.c: 1279: relay_pulse_flags |= 0x08;
  8983  000A9A  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  8984                           
  8985                           ; BSR set to: 0
  8986                           ;main.c: 1280: relay_pulse_timer[ 3 ] =
  8987                           ;main.c: 1281: Read_b_eep(0x43 + 24) * 256 +
  8988                           ;main.c: 1282: Read_b_eep(0x43 + 25);
  8989  000A9C  6A09               	clrf	?_Read_b_eep+1,c
  8990  000A9E  0E5C               	movlw	92
  8991  000AA0  6E08               	movwf	?_Read_b_eep,c
  8992  000AA2  EC76  F01E         	call	_Read_b_eep	;wreg free
  8993  000AA6  0100               	movlb	0	; () banked
  8994  000AA8  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8995  000AAA  6A09               	clrf	?_Read_b_eep+1,c
  8996  000AAC  0E5B               	movlw	91
  8997  000AAE  6E08               	movwf	?_Read_b_eep,c
  8998  000AB0  EC76  F01E         	call	_Read_b_eep	;wreg free
  8999  000AB4  0100               	movlb	0	; () banked
  9000  000AB6  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9001  000AB8  D9EE               	call	PL58	;call to abstracted procedure
  9002                           
  9003                           ;main.c: 1283: }
  9004  000ABA  D003               	goto	l10739
  9005  000ABC                     l10733:
  9006                           
  9007                           ; BSR set to: 0
  9008                           ;main.c: 1284: else {
  9009                           ;main.c: 1285: relay_pulse_flags &= 0b11110111;
  9010  000ABC  978A               	bcf	_relay_pulse_flags& (0+255),3,b
  9011                           
  9012                           ; BSR set to: 0
  9013                           ;main.c: 1286: LATCbits.LATC7 = 0;
  9014  000ABE  9E8B               	bcf	3979,7,c	;volatile
  9015                           
  9016                           ; BSR set to: 0
  9017                           ;main.c: 1287: bOn = 0;
  9018  000AC0  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9019  000AC2                     l10739:
  9020                           
  9021                           ; BSR set to: 0
  9022                           ;main.c: 1288: }
  9023                           ;main.c: 1290: if ( val & 0x04 ) {
  9024  000AC2  B451               	btfsc	vscp_writeAppReg@val,2,c
  9025  000AC4  D68B               	goto	l10569
  9026  000AC6  D189               	goto	l10901
  9027  000AC8                     l10743:
  9028                           
  9029                           ; BSR set to: 0
  9030                           ;main.c: 1299: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9031  000AC8  ECAA  F01E         	call	_Busy_eep	;wreg free
  9032  000ACC  D9BF               	call	PL4	;call to abstracted procedure
  9033  000ACE  EC90  F01C         	call	_Write_b_eep	;wreg free
  9034                           
  9035                           ;main.c: 1300: rv = Read_b_eep(0x43 + reg);
  9036  000AD2  D9C6               	call	PL6	;call to abstracted procedure
  9037  000AD4  EC76  F01E         	call	_Read_b_eep	;wreg free
  9038  000AD8  0100               	movlb	0	; () banked
  9039  000ADA  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  9040                           
  9041                           ; BSR set to: 0
  9042                           ;main.c: 1302: if ( val & 0x01 ) {
  9043  000ADC  A051               	btfss	vscp_writeAppReg@val,0,c
  9044  000ADE  D013               	goto	l10757
  9045                           
  9046                           ; BSR set to: 0
  9047                           ;main.c: 1304: LATCbits.LATC6 = 0;
  9048  000AE0  9C8B               	bcf	3979,6,c	;volatile
  9049                           
  9050                           ;main.c: 1305: bOn = 0;
  9051  000AE2  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9052                           
  9053                           ; BSR set to: 0
  9054                           ;main.c: 1307: relay_pulse_flags |= 0x10;
  9055  000AE4  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  9056                           
  9057                           ; BSR set to: 0
  9058                           ;main.c: 1308: relay_pulse_timer[ 4 ] =
  9059                           ;main.c: 1309: Read_b_eep(0x43 + 26) * 256 +
  9060                           ;main.c: 1310: Read_b_eep(0x43 + 27);
  9061  000AE6  6A09               	clrf	?_Read_b_eep+1,c
  9062  000AE8  0E5E               	movlw	94
  9063  000AEA  6E08               	movwf	?_Read_b_eep,c
  9064  000AEC  EC76  F01E         	call	_Read_b_eep	;wreg free
  9065  000AF0  0100               	movlb	0	; () banked
  9066  000AF2  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9067  000AF4  6A09               	clrf	?_Read_b_eep+1,c
  9068  000AF6  0E5D               	movlw	93
  9069  000AF8  6E08               	movwf	?_Read_b_eep,c
  9070  000AFA  EC76  F01E         	call	_Read_b_eep	;wreg free
  9071  000AFE  0100               	movlb	0	; () banked
  9072  000B00  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9073  000B02  D9E1               	call	PL66	;call to abstracted procedure
  9074                           
  9075                           ;main.c: 1311: }
  9076  000B04  D003               	goto	l10763
  9077  000B06                     l10757:
  9078                           
  9079                           ; BSR set to: 0
  9080                           ;main.c: 1312: else {
  9081                           ;main.c: 1313: relay_pulse_flags &= 0b11101111;
  9082  000B06  998A               	bcf	_relay_pulse_flags& (0+255),4,b
  9083                           
  9084                           ; BSR set to: 0
  9085                           ;main.c: 1314: LATCbits.LATC6 = 0;
  9086  000B08  9C8B               	bcf	3979,6,c	;volatile
  9087                           
  9088                           ; BSR set to: 0
  9089                           ;main.c: 1315: bOn = 0;
  9090  000B0A  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9091  000B0C                     l10763:
  9092                           
  9093                           ; BSR set to: 0
  9094                           ;main.c: 1316: }
  9095                           ;main.c: 1318: if ( val & 0x04 ) {
  9096  000B0C  B451               	btfsc	vscp_writeAppReg@val,2,c
  9097  000B0E  D698               	goto	l10589
  9098  000B10  D164               	goto	l10901
  9099  000B12                     l10767:
  9100                           
  9101                           ; BSR set to: 0
  9102                           ;main.c: 1327: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9103  000B12  ECAA  F01E         	call	_Busy_eep	;wreg free
  9104  000B16  D99A               	call	PL4	;call to abstracted procedure
  9105  000B18  EC90  F01C         	call	_Write_b_eep	;wreg free
  9106                           
  9107                           ;main.c: 1328: rv = Read_b_eep(0x43 + reg);
  9108  000B1C  D9A1               	call	PL6	;call to abstracted procedure
  9109  000B1E  EC76  F01E         	call	_Read_b_eep	;wreg free
  9110  000B22  0100               	movlb	0	; () banked
  9111  000B24  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  9112                           
  9113                           ; BSR set to: 0
  9114                           ;main.c: 1330: if ( val & 0x01 ) {
  9115  000B26  A051               	btfss	vscp_writeAppReg@val,0,c
  9116  000B28  D013               	goto	l10781
  9117                           
  9118                           ; BSR set to: 0
  9119                           ;main.c: 1332: LATCbits.LATC5 = 0;
  9120  000B2A  9A8B               	bcf	3979,5,c	;volatile
  9121                           
  9122                           ;main.c: 1333: bOn = 0;
  9123  000B2C  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9124                           
  9125                           ; BSR set to: 0
  9126                           ;main.c: 1335: relay_pulse_flags |= 0x20;
  9127  000B2E  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  9128                           
  9129                           ; BSR set to: 0
  9130                           ;main.c: 1336: relay_pulse_timer[ 5 ] =
  9131                           ;main.c: 1337: Read_b_eep(0x43 + 28) * 256 +
  9132                           ;main.c: 1338: Read_b_eep(0x43 + 29);
  9133  000B30  6A09               	clrf	?_Read_b_eep+1,c
  9134  000B32  0E60               	movlw	96
  9135  000B34  6E08               	movwf	?_Read_b_eep,c
  9136  000B36  EC76  F01E         	call	_Read_b_eep	;wreg free
  9137  000B3A  0100               	movlb	0	; () banked
  9138  000B3C  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9139  000B3E  6A09               	clrf	?_Read_b_eep+1,c
  9140  000B40  0E5F               	movlw	95
  9141  000B42  6E08               	movwf	?_Read_b_eep,c
  9142  000B44  EC76  F01E         	call	_Read_b_eep	;wreg free
  9143  000B48  0100               	movlb	0	; () banked
  9144  000B4A  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9145  000B4C  D9B4               	call	PL64	;call to abstracted procedure
  9146                           
  9147                           ;main.c: 1339: }
  9148  000B4E  D003               	goto	l10787
  9149  000B50                     l10781:
  9150                           
  9151                           ; BSR set to: 0
  9152                           ;main.c: 1340: else {
  9153                           ;main.c: 1341: relay_pulse_flags &= 0b11011111;
  9154  000B50  9B8A               	bcf	_relay_pulse_flags& (0+255),5,b
  9155                           
  9156                           ; BSR set to: 0
  9157                           ;main.c: 1342: LATCbits.LATC5 = 0;
  9158  000B52  9A8B               	bcf	3979,5,c	;volatile
  9159                           
  9160                           ; BSR set to: 0
  9161                           ;main.c: 1343: bOn = 0;
  9162  000B54  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9163  000B56                     l10787:
  9164                           
  9165                           ; BSR set to: 0
  9166                           ;main.c: 1344: }
  9167                           ;main.c: 1346: if ( val & 0x04 ) {
  9168  000B56  B451               	btfsc	vscp_writeAppReg@val,2,c
  9169  000B58  D6A5               	goto	l10609
  9170  000B5A  D13F               	goto	l10901
  9171  000B5C                     l10791:
  9172                           
  9173                           ; BSR set to: 0
  9174                           ;main.c: 1355: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9175  000B5C  ECAA  F01E         	call	_Busy_eep	;wreg free
  9176  000B60  D975               	call	PL4	;call to abstracted procedure
  9177  000B62  EC90  F01C         	call	_Write_b_eep	;wreg free
  9178                           
  9179                           ;main.c: 1356: rv = Read_b_eep(0x43 + reg);
  9180  000B66  D97C               	call	PL6	;call to abstracted procedure
  9181  000B68  EC76  F01E         	call	_Read_b_eep	;wreg free
  9182  000B6C  0100               	movlb	0	; () banked
  9183  000B6E  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  9184                           
  9185                           ; BSR set to: 0
  9186                           ;main.c: 1358: if ( val & 0x01 ) {
  9187  000B70  A051               	btfss	vscp_writeAppReg@val,0,c
  9188  000B72  D013               	goto	l10805
  9189                           
  9190                           ; BSR set to: 0
  9191                           ;main.c: 1360: LATCbits.LATC4 = 0;
  9192  000B74  988B               	bcf	3979,4,c	;volatile
  9193                           
  9194                           ;main.c: 1361: bOn = 0;
  9195  000B76  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9196                           
  9197                           ; BSR set to: 0
  9198                           ;main.c: 1363: relay_pulse_flags |= 0x40;
  9199  000B78  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  9200                           
  9201                           ; BSR set to: 0
  9202                           ;main.c: 1364: relay_pulse_timer[ 6 ] =
  9203                           ;main.c: 1365: Read_b_eep(0x43 + 30) * 256 +
  9204                           ;main.c: 1366: Read_b_eep(0x43 + 31);
  9205  000B7A  6A09               	clrf	?_Read_b_eep+1,c
  9206  000B7C  0E62               	movlw	98
  9207  000B7E  6E08               	movwf	?_Read_b_eep,c
  9208  000B80  EC76  F01E         	call	_Read_b_eep	;wreg free
  9209  000B84  0100               	movlb	0	; () banked
  9210  000B86  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9211  000B88  6A09               	clrf	?_Read_b_eep+1,c
  9212  000B8A  0E61               	movlw	97
  9213  000B8C  6E08               	movwf	?_Read_b_eep,c
  9214  000B8E  EC76  F01E         	call	_Read_b_eep	;wreg free
  9215  000B92  0100               	movlb	0	; () banked
  9216  000B94  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9217  000B96  D987               	call	PL60	;call to abstracted procedure
  9218                           
  9219                           ;main.c: 1367: }
  9220  000B98  D003               	goto	l10811
  9221  000B9A                     l10805:
  9222                           
  9223                           ; BSR set to: 0
  9224                           ;main.c: 1368: else {
  9225                           ;main.c: 1369: relay_pulse_flags &= 0b10111111;
  9226  000B9A  9D8A               	bcf	_relay_pulse_flags& (0+255),6,b
  9227                           
  9228                           ; BSR set to: 0
  9229                           ;main.c: 1370: LATCbits.LATC7 = 0;
  9230  000B9C  9E8B               	bcf	3979,7,c	;volatile
  9231                           
  9232                           ; BSR set to: 0
  9233                           ;main.c: 1371: bOn = 0;
  9234  000B9E  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9235  000BA0                     l10811:
  9236                           
  9237                           ; BSR set to: 0
  9238                           ;main.c: 1372: }
  9239                           ;main.c: 1374: if ( val & 0x04 ) {
  9240  000BA0  B451               	btfsc	vscp_writeAppReg@val,2,c
  9241  000BA2  D6B2               	goto	l10629
  9242  000BA4  D11A               	goto	l10901
  9243  000BA6                     l10817:
  9244                           
  9245                           ; BSR set to: 0
  9246  000BA6  51CD               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9247                           
  9248                           ; Switch size 1, requested type "space"
  9249                           ; Number of cases is 7, Range of values is 10 to 16
  9250                           ; switch strategies available:
  9251                           ; Name         Instructions Cycles
  9252                           ; simple_byte           22    12 (average)
  9253                           ;	Chosen strategy is simple_byte
  9254  000BA8  0A0A               	xorlw	10	; case 10
  9255  000BAA  E101 D6E7          	bz	l10647
  9256  000BAE  0A01               	xorlw	1	; case 11
  9257  000BB0  E101 D707          	bz	l10671
  9258  000BB4  0A07               	xorlw	7	; case 12
  9259  000BB6  E101 D73D          	bz	l10695
  9260  000BBA  0A01               	xorlw	1	; case 13
  9261  000BBC  E101 D75F          	bz	l10719
  9262  000BC0  0A03               	xorlw	3	; case 14
  9263  000BC2  E082               	bz	l10743
  9264  000BC4  0A01               	xorlw	1	; case 15
  9265  000BC6  E0A5               	bz	l10767
  9266  000BC8  0A1F               	xorlw	31	; case 16
  9267  000BCA  E0C8               	bz	l10791
  9268  000BCC  D106               	goto	l10901
  9269  000BCE                     l10819:
  9270                           
  9271                           ; BSR set to: 0
  9272                           ;main.c: 1385: else if ( (reg >= 18 ) &&
  9273                           ;main.c: 1386: (reg <= 33 ) ) {
  9274  000BCE  0E11               	movlw	17
  9275  000BD0  65CD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9276  000BD2  D0A4               	goto	l10849
  9277                           
  9278                           ; BSR set to: 0
  9279  000BD4  0E22               	movlw	34
  9280  000BD6  61CD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9281  000BD8  D0A1               	goto	l10849
  9282                           
  9283                           ; BSR set to: 0
  9284                           ;main.c: 1389: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9285  000BDA  ECAA  F01E         	call	_Busy_eep	;wreg free
  9286  000BDE  D936               	call	PL4	;call to abstracted procedure
  9287  000BE0  EC90  F01C         	call	_Write_b_eep	;wreg free
  9288                           
  9289                           ;main.c: 1390: rv = Read_b_eep(0x43 + reg);
  9290  000BE4  D93D               	call	PL6	;call to abstracted procedure
  9291  000BE6  EC76  F01E         	call	_Read_b_eep	;wreg free
  9292  000BEA  0100               	movlb	0	; () banked
  9293  000BEC  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  9294                           
  9295                           ;main.c: 1394: switch ( reg ) {
  9296  000BEE  D083               	goto	l10847
  9297  000BF0                     l10829:
  9298                           
  9299                           ; BSR set to: 0
  9300                           ;main.c: 1397: relay_pulse_timer[ 0 ] =
  9301                           ;main.c: 1398: Read_b_eep(0x43 + 18) * 256 +
  9302                           ;main.c: 1399: Read_b_eep(0x43 + 19);
  9303  000BF0  6A09               	clrf	?_Read_b_eep+1,c
  9304  000BF2  0E56               	movlw	86
  9305  000BF4  6E08               	movwf	?_Read_b_eep,c
  9306  000BF6  EC76  F01E         	call	_Read_b_eep	;wreg free
  9307  000BFA  0100               	movlb	0	; () banked
  9308  000BFC  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9309  000BFE  6A09               	clrf	?_Read_b_eep+1,c
  9310  000C00  0E55               	movlw	85
  9311  000C02  6E08               	movwf	?_Read_b_eep,c
  9312  000C04  EC76  F01E         	call	_Read_b_eep	;wreg free
  9313  000C08  D933               	call	PL48	;call to abstracted procedure
  9314                           
  9315                           ;main.c: 1400: break;
  9316  000C0A  D0E7               	goto	l10901
  9317  000C0C                     l10831:
  9318                           
  9319                           ; BSR set to: 0
  9320                           ;main.c: 1403: relay_pulse_timer[ 1 ] =
  9321                           ;main.c: 1404: Read_b_eep(0x43 + 20) * 256 +
  9322                           ;main.c: 1405: Read_b_eep(0x43 + 21);
  9323  000C0C  6A09               	clrf	?_Read_b_eep+1,c
  9324  000C0E  0E58               	movlw	88
  9325  000C10  6E08               	movwf	?_Read_b_eep,c
  9326  000C12  EC76  F01E         	call	_Read_b_eep	;wreg free
  9327  000C16  0100               	movlb	0	; () banked
  9328  000C18  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9329  000C1A  6A09               	clrf	?_Read_b_eep+1,c
  9330  000C1C  0E57               	movlw	87
  9331  000C1E  6E08               	movwf	?_Read_b_eep,c
  9332  000C20  EC76  F01E         	call	_Read_b_eep	;wreg free
  9333  000C24  0100               	movlb	0	; () banked
  9334  000C26  D92E               	call	PL56	;call to abstracted procedure
  9335                           
  9336                           ;main.c: 1406: break;
  9337  000C28  D0D8               	goto	l10901
  9338  000C2A                     l10833:
  9339                           
  9340                           ; BSR set to: 0
  9341                           ;main.c: 1409: relay_pulse_timer[ 2 ] =
  9342                           ;main.c: 1410: Read_b_eep(0x43 + 22) * 256 +
  9343                           ;main.c: 1411: Read_b_eep(0x43 + 23);
  9344  000C2A  6A09               	clrf	?_Read_b_eep+1,c
  9345  000C2C  0E5A               	movlw	90
  9346  000C2E  6E08               	movwf	?_Read_b_eep,c
  9347  000C30  EC76  F01E         	call	_Read_b_eep	;wreg free
  9348  000C34  0100               	movlb	0	; () banked
  9349  000C36  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9350  000C38  6A09               	clrf	?_Read_b_eep+1,c
  9351  000C3A  0E59               	movlw	89
  9352  000C3C  6E08               	movwf	?_Read_b_eep,c
  9353  000C3E  EC76  F01E         	call	_Read_b_eep	;wreg free
  9354  000C42  0100               	movlb	0	; () banked
  9355  000C44  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9356  000C46  D947               	call	PL68	;call to abstracted procedure
  9357                           
  9358                           ;main.c: 1412: break;
  9359  000C48  D0C8               	goto	l10901
  9360  000C4A                     l10835:
  9361                           
  9362                           ; BSR set to: 0
  9363                           ;main.c: 1415: relay_pulse_timer[ 3 ] =
  9364                           ;main.c: 1416: Read_b_eep(0x43 + 24) * 256 +
  9365                           ;main.c: 1417: Read_b_eep(0x43 + 25);
  9366  000C4A  6A09               	clrf	?_Read_b_eep+1,c
  9367  000C4C  0E5C               	movlw	92
  9368  000C4E  6E08               	movwf	?_Read_b_eep,c
  9369  000C50  EC76  F01E         	call	_Read_b_eep	;wreg free
  9370  000C54  0100               	movlb	0	; () banked
  9371  000C56  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9372  000C58  6A09               	clrf	?_Read_b_eep+1,c
  9373  000C5A  0E5B               	movlw	91
  9374  000C5C  6E08               	movwf	?_Read_b_eep,c
  9375  000C5E  EC76  F01E         	call	_Read_b_eep	;wreg free
  9376  000C62  0100               	movlb	0	; () banked
  9377  000C64  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9378  000C66  D917               	call	PL58	;call to abstracted procedure
  9379                           
  9380                           ;main.c: 1418: break;
  9381  000C68  D0B8               	goto	l10901
  9382  000C6A                     l10837:
  9383                           
  9384                           ; BSR set to: 0
  9385                           ;main.c: 1421: relay_pulse_timer[ 4 ] =
  9386                           ;main.c: 1422: Read_b_eep(0x43 + 26) * 256 +
  9387                           ;main.c: 1423: Read_b_eep(0x43 + 27);
  9388  000C6A  6A09               	clrf	?_Read_b_eep+1,c
  9389  000C6C  0E5E               	movlw	94
  9390  000C6E  6E08               	movwf	?_Read_b_eep,c
  9391  000C70  EC76  F01E         	call	_Read_b_eep	;wreg free
  9392  000C74  0100               	movlb	0	; () banked
  9393  000C76  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9394  000C78  6A09               	clrf	?_Read_b_eep+1,c
  9395  000C7A  0E5D               	movlw	93
  9396  000C7C  6E08               	movwf	?_Read_b_eep,c
  9397  000C7E  EC76  F01E         	call	_Read_b_eep	;wreg free
  9398  000C82  0100               	movlb	0	; () banked
  9399  000C84  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9400  000C86  D91F               	call	PL66	;call to abstracted procedure
  9401                           
  9402                           ;main.c: 1424: break;
  9403  000C88  D0A8               	goto	l10901
  9404  000C8A                     l10839:
  9405                           
  9406                           ; BSR set to: 0
  9407                           ;main.c: 1427: relay_pulse_timer[ 5 ] =
  9408                           ;main.c: 1428: Read_b_eep(0x43 + 28) * 256 +
  9409                           ;main.c: 1429: Read_b_eep(0x43 + 29);
  9410  000C8A  6A09               	clrf	?_Read_b_eep+1,c
  9411  000C8C  0E60               	movlw	96
  9412  000C8E  6E08               	movwf	?_Read_b_eep,c
  9413  000C90  EC76  F01E         	call	_Read_b_eep	;wreg free
  9414  000C94  0100               	movlb	0	; () banked
  9415  000C96  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9416  000C98  6A09               	clrf	?_Read_b_eep+1,c
  9417  000C9A  0E5F               	movlw	95
  9418  000C9C  6E08               	movwf	?_Read_b_eep,c
  9419  000C9E  EC76  F01E         	call	_Read_b_eep	;wreg free
  9420  000CA2  0100               	movlb	0	; () banked
  9421  000CA4  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9422  000CA6  D907               	call	PL64	;call to abstracted procedure
  9423                           
  9424                           ;main.c: 1430: break;
  9425  000CA8  D098               	goto	l10901
  9426  000CAA                     l10841:
  9427                           
  9428                           ; BSR set to: 0
  9429                           ;main.c: 1433: relay_pulse_timer[ 6 ] =
  9430                           ;main.c: 1434: Read_b_eep(0x43 + 30) * 256 +
  9431                           ;main.c: 1435: Read_b_eep(0x43 + 31);
  9432  000CAA  6A09               	clrf	?_Read_b_eep+1,c
  9433  000CAC  0E62               	movlw	98
  9434  000CAE  6E08               	movwf	?_Read_b_eep,c
  9435  000CB0  EC76  F01E         	call	_Read_b_eep	;wreg free
  9436  000CB4  0100               	movlb	0	; () banked
  9437  000CB6  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9438  000CB8  6A09               	clrf	?_Read_b_eep+1,c
  9439  000CBA  0E61               	movlw	97
  9440  000CBC  6E08               	movwf	?_Read_b_eep,c
  9441  000CBE  EC76  F01E         	call	_Read_b_eep	;wreg free
  9442  000CC2  0100               	movlb	0	; () banked
  9443  000CC4  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9444  000CC6  D8EF               	call	PL60	;call to abstracted procedure
  9445                           
  9446                           ;main.c: 1436: break;
  9447  000CC8  D088               	goto	l10901
  9448  000CCA                     l10843:
  9449                           
  9450                           ; BSR set to: 0
  9451                           ;main.c: 1439: relay_pulse_timer[ 7 ] =
  9452                           ;main.c: 1440: Read_b_eep(0x43 + 32) * 256 +
  9453                           ;main.c: 1441: Read_b_eep(0x43 + 33);
  9454  000CCA  6A09               	clrf	?_Read_b_eep+1,c
  9455  000CCC  0E64               	movlw	100
  9456  000CCE  6E08               	movwf	?_Read_b_eep,c
  9457  000CD0  EC76  F01E         	call	_Read_b_eep	;wreg free
  9458  000CD4  0100               	movlb	0	; () banked
  9459  000CD6  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9460  000CD8  6A09               	clrf	?_Read_b_eep+1,c
  9461  000CDA  0E63               	movlw	99
  9462  000CDC  6E08               	movwf	?_Read_b_eep,c
  9463  000CDE  EC76  F01E         	call	_Read_b_eep	;wreg free
  9464  000CE2  0100               	movlb	0	; () banked
  9465  000CE4  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9466  000CE6  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9467  000CE8  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  9468  000CEA  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9469  000CEC  6F7E               	movwf	(_relay_pulse_timer+14)& (0+255),b
  9470  000CEE  0E00               	movlw	0
  9471  000CF0  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9472  000CF2  6F7F               	movwf	(_relay_pulse_timer+15)& (0+255),b
  9473                           
  9474                           ;main.c: 1442: break;
  9475  000CF4  D072               	goto	l10901
  9476  000CF6                     l10847:
  9477                           
  9478                           ; BSR set to: 0
  9479  000CF6  51CD               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9480                           
  9481                           ; Switch size 1, requested type "space"
  9482                           ; Number of cases is 8, Range of values is 19 to 33
  9483                           ; switch strategies available:
  9484                           ; Name         Instructions Cycles
  9485                           ; simple_byte           25    13 (average)
  9486                           ;	Chosen strategy is simple_byte
  9487  000CF8  0A13               	xorlw	19	; case 19
  9488  000CFA  E101 D779          	bz	l10829
  9489  000CFE  0A06               	xorlw	6	; case 21
  9490  000D00  E085               	bz	l10831
  9491  000D02  0A02               	xorlw	2	; case 23
  9492  000D04  E092               	bz	l10833
  9493  000D06  0A0E               	xorlw	14	; case 25
  9494  000D08  E0A0               	bz	l10835
  9495  000D0A  0A02               	xorlw	2	; case 27
  9496  000D0C  E0AE               	bz	l10837
  9497  000D0E  0A06               	xorlw	6	; case 29
  9498  000D10  E0BC               	bz	l10839
  9499  000D12  0A02               	xorlw	2	; case 31
  9500  000D14  E0CA               	bz	l10841
  9501  000D16  0A3E               	xorlw	62	; case 33
  9502  000D18  E0D8               	bz	l10843
  9503  000D1A  D05F               	goto	l10901
  9504  000D1C                     l10849:
  9505                           
  9506                           ; BSR set to: 0
  9507                           ;main.c: 1450: else if ( ( reg >= 34 ) &&
  9508                           ;main.c: 1451: ( reg <= 49 ) ) {
  9509  000D1C  0E21               	movlw	33
  9510  000D1E  65CD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9511  000D20  D03D               	goto	l10879
  9512                           
  9513                           ; BSR set to: 0
  9514  000D22  0E32               	movlw	50
  9515  000D24  61CD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9516  000D26  D03A               	goto	l10879
  9517                           
  9518                           ; BSR set to: 0
  9519                           ;main.c: 1454: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9520  000D28  ECAA  F01E         	call	_Busy_eep	;wreg free
  9521  000D2C  D88F               	call	PL4	;call to abstracted procedure
  9522  000D2E  EC90  F01C         	call	_Write_b_eep	;wreg free
  9523                           
  9524                           ;main.c: 1455: rv = Read_b_eep(0x43 + reg);
  9525  000D32  D896               	call	PL6	;call to abstracted procedure
  9526  000D34  EC76  F01E         	call	_Read_b_eep	;wreg free
  9527  000D38  0100               	movlb	0	; () banked
  9528  000D3A  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  9529                           
  9530                           ;main.c: 1457: switch ( reg ) {
  9531  000D3C  D016               	goto	l10877
  9532  000D3E                     l10873:
  9533                           
  9534                           ; BSR set to: 0
  9535                           ;main.c: 1502: relay_protection_timer[ 7 ] =
  9536                           ;main.c: 1503: Read_b_eep(0x43 + 48) * 256 +
  9537                           ;main.c: 1504: Read_b_eep(0x43 + 49);
  9538  000D3E  6A09               	clrf	?_Read_b_eep+1,c
  9539  000D40  0E74               	movlw	116
  9540  000D42  6E08               	movwf	?_Read_b_eep,c
  9541  000D44  EC76  F01E         	call	_Read_b_eep	;wreg free
  9542  000D48  0100               	movlb	0	; () banked
  9543  000D4A  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9544  000D4C  6A09               	clrf	?_Read_b_eep+1,c
  9545  000D4E  0E73               	movlw	115
  9546  000D50  6E08               	movwf	?_Read_b_eep,c
  9547  000D52  EC76  F01E         	call	_Read_b_eep	;wreg free
  9548  000D56  0100               	movlb	0	; () banked
  9549  000D58  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9550  000D5A  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9551  000D5C  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  9552  000D5E  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9553  000D60  6F6E               	movwf	(_relay_protection_timer+14)& (0+255),b
  9554  000D62  0E00               	movlw	0
  9555  000D64  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9556  000D66  6F6F               	movwf	(_relay_protection_timer+15)& (0+255),b
  9557                           
  9558                           ;main.c: 1505: break;
  9559  000D68  D038               	goto	l10901
  9560  000D6A                     l10877:
  9561                           
  9562                           ; BSR set to: 0
  9563  000D6A  51CD               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9564                           
  9565                           ; Switch size 1, requested type "space"
  9566                           ; Number of cases is 8, Range of values is 35 to 49
  9567                           ; switch strategies available:
  9568                           ; Name         Instructions Cycles
  9569                           ; simple_byte           25    13 (average)
  9570                           ;	Chosen strategy is simple_byte
  9571  000D6C  0A23               	xorlw	35	; case 35
  9572  000D6E  E101 D4A7          	bz	l10509
  9573  000D72  0A06               	xorlw	6	; case 37
  9574  000D74  E101 D4D7          	bz	l10529
  9575  000D78  0A02               	xorlw	2	; case 39
  9576  000D7A  E101 D4FD          	bz	l10549
  9577  000D7E  0A0E               	xorlw	14	; case 41
  9578  000D80  E101 D52C          	bz	l10569
  9579  000D84  0A02               	xorlw	2	; case 43
  9580  000D86  E101 D55B          	bz	l10589
  9581  000D8A  0A06               	xorlw	6	; case 45
  9582  000D8C  E101 D58A          	bz	l10609
  9583  000D90  0A02               	xorlw	2	; case 47
  9584  000D92  E101 D5B9          	bz	l10629
  9585  000D96  0A1E               	xorlw	30	; case 49
  9586  000D98  E0D2               	bz	l10873
  9587  000D9A  D01F               	goto	l10901
  9588  000D9C                     l10879:
  9589                           
  9590                           ; BSR set to: 0
  9591                           ;main.c: 1513: else if ( (reg >= 50 ) && (reg <= 65) ) {
  9592  000D9C  0E31               	movlw	49
  9593  000D9E  65CD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9594  000DA0  D00E               	goto	l10889
  9595                           
  9596                           ; BSR set to: 0
  9597  000DA2  0E42               	movlw	66
  9598  000DA4  61CD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9599  000DA6  D00B               	goto	l10889
  9600                           
  9601                           ; BSR set to: 0
  9602                           ;main.c: 1516: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9603  000DA8  ECAA  F01E         	call	_Busy_eep	;wreg free
  9604  000DAC  D84F               	call	PL4	;call to abstracted procedure
  9605  000DAE  EC90  F01C         	call	_Write_b_eep	;wreg free
  9606  000DB2                     l10887:
  9607                           
  9608                           ;main.c: 1517: rv = Read_b_eep(0x43 + reg);
  9609  000DB2  D856               	call	PL6	;call to abstracted procedure
  9610  000DB4  EC76  F01E         	call	_Read_b_eep	;wreg free
  9611  000DB8                     L27:
  9612  000DB8  0100               	movlb	0	; () banked
  9613  000DBA  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  9614                           
  9615                           ;main.c: 1519: }
  9616  000DBC  D00E               	goto	l10901
  9617  000DBE                     l10889:
  9618                           
  9619                           ; BSR set to: 0
  9620                           ;main.c: 1520: else if ( (reg >= 72) &&
  9621                           ;main.c: 1521: (reg < (72 + 7 * 8)) ) {
  9622  000DBE  0E47               	movlw	71
  9623  000DC0  65CD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9624  000DC2  D00B               	goto	l10901
  9625                           
  9626                           ; BSR set to: 0
  9627  000DC4  0E80               	movlw	128
  9628  000DC6  61CD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9629  000DC8  D008               	goto	l10901
  9630                           
  9631                           ; BSR set to: 0
  9632                           ;main.c: 1522: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9633  000DCA  ECAA  F01E         	call	_Busy_eep	;wreg free
  9634  000DCE  D83E               	call	PL4	;call to abstracted procedure
  9635  000DD0  EC90  F01C         	call	_Write_b_eep	;wreg free
  9636                           
  9637                           ;main.c: 1523: calculateSetFilterMask();
  9638  000DD4  ECB0  F00C         	call	_calculateSetFilterMask	;wreg free
  9639  000DD8  D7EC               	goto	l10887
  9640  000DDA                     l10901:
  9641                           
  9642                           ; BSR set to: 0
  9643                           ;main.c: 1525: }
  9644                           ;main.c: 1531: if ( bInfoEvent ) {
  9645  000DDA  51C9               	movf	vscp_writeAppReg@bInfoEvent& (0+255),w,b
  9646  000DDC  E035               	bz	l10921
  9647                           
  9648                           ; BSR set to: 0
  9649                           ;main.c: 1533: unsigned char val;
  9650                           ;main.c: 1534: val = Read_b_eep(0x43 + 10 + (reg - 2));
  9651  000DDE  0E4B               	movlw	75
  9652  000DE0  25CD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9653  000DE2  6E08               	movwf	?_Read_b_eep,c
  9654  000DE4  6A09               	clrf	?_Read_b_eep+1,c
  9655  000DE6  0E00               	movlw	0
  9656  000DE8  2209               	addwfc	?_Read_b_eep+1,f,c
  9657  000DEA  EC76  F01E         	call	_Read_b_eep	;wreg free
  9658  000DEE  0100               	movlb	0	; () banked
  9659  000DF0  6FCA               	movwf	vscp_writeAppReg@val_682& (0+255),b
  9660                           
  9661                           ; BSR set to: 0
  9662                           ;main.c: 1537: if ( bOn ) {
  9663  000DF2  51CC               	movf	vscp_writeAppReg@bOn& (0+255),w,b
  9664  000DF4  E015               	bz	l404
  9665                           
  9666                           ; BSR set to: 0
  9667                           ;main.c: 1539: if ( val & 0x08 ) {
  9668  000DF6  A7CA               	btfss	vscp_writeAppReg@val_682& (0+255),3,b
  9669  000DF8  D008               	goto	l10911
  9670                           
  9671                           ; BSR set to: 0
  9672                           ;main.c: 1540: SendInformationEvent( reg - 2,
  9673                           ;main.c: 1541: 20,
  9674                           ;main.c: 1542: 3 );
  9675  000DFA  0E14               	movlw	20
  9676  000DFC  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  9677  000DFE  0E03               	movlw	3
  9678  000E00  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9679  000E02  51CD               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9680  000E04  0FFE               	addlw	254
  9681  000E06  ECD3  F01B         	call	_SendInformationEvent
  9682  000E0A                     l10911:
  9683                           
  9684                           ; BSR set to: 0
  9685                           ;main.c: 1543: }
  9686                           ;main.c: 1545: if ( val & 0x20 ) {
  9687  000E0A  ABCA               	btfss	vscp_writeAppReg@val_682& (0+255),5,b
  9688  000E0C  D01D               	goto	l10921
  9689                           
  9690                           ; BSR set to: 0
  9691                           ;main.c: 1546: SendInformationEvent( reg - 2,
  9692                           ;main.c: 1547: 20,
  9693                           ;main.c: 1548: 25 );
  9694  000E0E  0E14               	movlw	20
  9695  000E10  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  9696  000E12  0E19               	movlw	25
  9697  000E14  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9698  000E16  51CD               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9699  000E18  0FFE               	addlw	254
  9700  000E1A  ECD3  F01B         	call	_SendInformationEvent
  9701  000E1E  D014               	goto	l10921
  9702  000E20                     l404:
  9703                           
  9704                           ; BSR set to: 0
  9705                           ;main.c: 1552: else {
  9706                           ;main.c: 1554: if ( val & 0x10 ) {
  9707  000E20  A9CA               	btfss	vscp_writeAppReg@val_682& (0+255),4,b
  9708  000E22  D008               	goto	l10917
  9709                           
  9710                           ; BSR set to: 0
  9711                           ;main.c: 1555: SendInformationEvent( reg - 2,
  9712                           ;main.c: 1556: 20,
  9713                           ;main.c: 1557: 4 );
  9714  000E24  0E14               	movlw	20
  9715  000E26  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  9716  000E28  0E04               	movlw	4
  9717  000E2A  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9718  000E2C  51CD               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9719  000E2E  0FFE               	addlw	254
  9720  000E30  ECD3  F01B         	call	_SendInformationEvent
  9721  000E34                     l10917:
  9722                           
  9723                           ; BSR set to: 0
  9724                           ;main.c: 1558: }
  9725                           ;main.c: 1560: if ( val & 0x40 ) {
  9726  000E34  ADCA               	btfss	vscp_writeAppReg@val_682& (0+255),6,b
  9727  000E36  D008               	goto	l10921
  9728                           
  9729                           ; BSR set to: 0
  9730                           ;main.c: 1561: SendInformationEvent( reg - 2,
  9731                           ;main.c: 1562: 20,
  9732                           ;main.c: 1563: 24 );
  9733  000E38  0E14               	movlw	20
  9734  000E3A  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  9735  000E3C  0E18               	movlw	24
  9736  000E3E  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9737  000E40  51CD               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9738  000E42  0FFE               	addlw	254
  9739  000E44  ECD3  F01B         	call	_SendInformationEvent
  9740  000E48                     l10921:
  9741                           
  9742                           ; BSR set to: 0
  9743                           ;main.c: 1564: }
  9744                           ;main.c: 1565: }
  9745                           ;main.c: 1566: }
  9746                           ;main.c: 1568: return rv;
  9747  000E48  51CB               	movf	vscp_writeAppReg@rv& (0+255),w,b
  9748                           
  9749                           ; BSR set to: 0
  9750  000E4A  0012               	return	
  9751  000E4C                     __end_of_vscp_writeAppReg:
  9752                           	opt stack 0
  9753  000E4C                     PL4:
  9754                           	opt stack 21
  9755  000E4C  0E43               	movlw	67
  9756  000E4E  0100               	movlb	0	; () banked
  9757  000E50  25CD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9758  000E52  6E08               	movwf	?_Write_b_eep,c
  9759  000E54  6A09               	clrf	?_Write_b_eep+1,c
  9760  000E56  0E00               	movlw	0
  9761  000E58  2209               	addwfc	?_Write_b_eep+1,f,c
  9762  000E5A  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9763  000E5E  0C00               	retlw	0
  9764  000E60                     __end_ofPL4:
  9765                           	opt stack 0
  9766  000E60                     PL6:
  9767                           	opt stack 21
  9768  000E60  0E43               	movlw	67
  9769  000E62  0100               	movlb	0	; () banked
  9770  000E64  25CD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9771  000E66  6E08               	movwf	?_Read_b_eep,c
  9772  000E68  6A09               	clrf	?_Read_b_eep+1,c
  9773  000E6A  0E00               	movlw	0
  9774  000E6C  2209               	addwfc	?_Read_b_eep+1,f,c
  9775  000E6E  0C00               	retlw	0
  9776  000E70                     __end_ofPL6:
  9777                           	opt stack 0
  9778  000E70                     PL48:
  9779                           	opt stack 21
  9780  000E70  0100               	movlb	0	; () banked
  9781  000E72  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9782  000E74  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9783  000E76  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  9784  000E78  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9785  000E7A  6F70               	movwf	_relay_pulse_timer& (0+255),b
  9786  000E7C  0E00               	movlw	0
  9787  000E7E  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9788  000E80  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  9789  000E82  0012               	return	
  9790  000E84                     __end_ofPL48:
  9791                           	opt stack 0
  9792  000E84                     PL56:
  9793                           	opt stack 21
  9794  000E84  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9795  000E86  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9796  000E88  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  9797  000E8A  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9798  000E8C  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  9799  000E8E  0E00               	movlw	0
  9800  000E90  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9801  000E92  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  9802  000E94  0012               	return	
  9803  000E96                     __end_ofPL56:
  9804                           	opt stack 0
  9805  000E96                     PL58:
  9806                           	opt stack 21
  9807  000E96  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9808  000E98  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  9809  000E9A  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9810  000E9C  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  9811  000E9E  0E00               	movlw	0
  9812  000EA0  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9813  000EA2  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  9814  000EA4  0012               	return	
  9815  000EA6                     __end_ofPL58:
  9816                           	opt stack 0
  9817  000EA6                     PL60:
  9818                           	opt stack 21
  9819  000EA6  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9820  000EA8  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  9821  000EAA  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9822  000EAC  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9823  000EAE  0E00               	movlw	0
  9824  000EB0  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9825  000EB2  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9826  000EB4  0012               	return	
  9827  000EB6                     __end_ofPL60:
  9828                           	opt stack 0
  9829  000EB6                     PL64:
  9830                           	opt stack 21
  9831  000EB6  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9832  000EB8  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  9833  000EBA  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9834  000EBC  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9835  000EBE  0E00               	movlw	0
  9836  000EC0  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9837  000EC2  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9838  000EC4  0012               	return	
  9839  000EC6                     __end_ofPL64:
  9840                           	opt stack 0
  9841  000EC6                     PL66:
  9842                           	opt stack 21
  9843  000EC6  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9844  000EC8  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  9845  000ECA  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9846  000ECC  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9847  000ECE  0E00               	movlw	0
  9848  000ED0  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9849  000ED2  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9850  000ED4  0012               	return	
  9851  000ED6                     __end_ofPL66:
  9852                           	opt stack 0
  9853  000ED6                     PL68:
  9854                           	opt stack 21
  9855  000ED6  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9856  000ED8  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  9857  000EDA  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9858  000EDC  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  9859  000EDE  0E00               	movlw	0
  9860  000EE0  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9861  000EE2  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  9862  000EE4  0012               	return	
  9863  000EE6                     __end_ofPL68:
  9864                           	opt stack 0
  9865                           tblptru	equ	0xFF8
  9866                           tblptrh	equ	0xFF7
  9867                           tblptrl	equ	0xFF6
  9868                           tablat	equ	0xFF5
  9869                           prodh	equ	0xFF4
  9870                           prodl	equ	0xFF3
  9871                           intcon	equ	0xFF2
  9872                           postinc0	equ	0xFEE
  9873                           wreg	equ	0xFE8
  9874                           indf1	equ	0xFE7
  9875                           fsr1h	equ	0xFE2
  9876                           fsr1l	equ	0xFE1
  9877                           indf2	equ	0xFDF
  9878                           postinc2	equ	0xFDE
  9879                           postdec2	equ	0xFDD
  9880                           plusw2	equ	0xFDB
  9881                           fsr2h	equ	0xFDA
  9882                           fsr2l	equ	0xFD9
  9883                           status	equ	0xFD8
  9884                           
  9885 ;; *************** function _calculateSetFilterMask *****************
  9886 ;; Defined at:
  9887 ;;		line 2681 in file "../main.c"
  9888 ;; Parameters:    Size  Location     Type
  9889 ;;		None
  9890 ;; Auto vars:     Size  Location     Type
  9891 ;;  rowfilter       4   61[COMRAM] unsigned long 
  9892 ;;  filter          4   57[COMRAM] unsigned long 
  9893 ;;  mask            4   53[COMRAM] unsigned long 
  9894 ;;  rowmask         4   48[COMRAM] unsigned long 
  9895 ;;  i               1   66[COMRAM] unsigned char 
  9896 ;;  j               1   65[COMRAM] unsigned char 
  9897 ;;  lastOID         1   52[COMRAM] unsigned char 
  9898 ;; Return value:  Size  Location     Type
  9899 ;;		None               void
  9900 ;; Registers used:
  9901 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9902 ;; Tracked objects:
  9903 ;;		On entry : 0/0
  9904 ;;		On exit  : 0/0
  9905 ;;		Unchanged: 0/0
  9906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9907 ;;      Params:         0       0       0       0       0       0       0
  9908 ;;      Locals:        19       0       0       0       0       0       0
  9909 ;;      Temps:         31       0       0       0       0       0       0
  9910 ;;      Totals:        50       0       0       0       0       0       0
  9911 ;;Total ram usage:       50 bytes
  9912 ;; Hardware stack levels used:    1
  9913 ;; Hardware stack levels required when called:    3
  9914 ;; This function calls:
  9915 ;;		_Read_b_eep
  9916 ;;		_ECANSetOperationMode
  9917 ;;		__CANIDToRegs
  9918 ;; This function is called by:
  9919 ;;		_vscp_writeAppReg
  9920 ;; This function uses a non-reentrant model
  9921 ;;
  9922                           
  9923                           	psect	text25
  9924  001960                     __ptext25:
  9925                           	opt stack 0
  9926  001960                     _calculateSetFilterMask:
  9927                           	opt stack 24
  9928                           
  9929                           ;main.c: 2682: uint8_t i,j;
  9930                           ;main.c: 2683: uint8_t lastOID;
  9931                           ;main.c: 2684: uint32_t rowmask;
  9932                           ;main.c: 2685: uint32_t rowfilter;
  9933                           ;main.c: 2688: uint32_t mask = 0xffffffff;
  9934                           
  9935                           ; BSR set to: 0
  9936                           ;incstack = 0
  9937                           ;incstack = 0
  9938  001960  6836               	setf	calculateSetFilterMask@mask,c
  9939  001962  6837               	setf	calculateSetFilterMask@mask+1,c
  9940  001964  6838               	setf	calculateSetFilterMask@mask+2,c
  9941  001966  6839               	setf	calculateSetFilterMask@mask+3,c
  9942                           
  9943                           ;main.c: 2689: uint32_t filter = 0;
  9944  001968  6A3A               	clrf	calculateSetFilterMask@filter,c
  9945  00196A  6A3B               	clrf	calculateSetFilterMask@filter+1,c
  9946  00196C  6A3C               	clrf	calculateSetFilterMask@filter+2,c
  9947  00196E  6A3D               	clrf	calculateSetFilterMask@filter+3,c
  9948                           
  9949                           ;main.c: 2692: for ( i=0; i < 7; i++ ) {
  9950  001970  6A43               	clrf	calculateSetFilterMask@i,c
  9951  001972                     l9023:
  9952                           
  9953                           ;main.c: 2695: if ( Read_b_eep(0x43 + 8*i + 1) & 0x80 ) {
  9954  001972  5043               	movf	calculateSetFilterMask@i,w,c
  9955  001974  D972               	call	PL10	;call to abstracted procedure
  9956  001976  0E44               	movlw	68
  9957  001978  2412               	addwf	??_calculateSetFilterMask,w,c
  9958  00197A  6E08               	movwf	?_Read_b_eep,c
  9959  00197C  0E00               	movlw	0
  9960  00197E  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9961  001980  6E09               	movwf	?_Read_b_eep+1,c
  9962  001982  EC76  F01E         	call	_Read_b_eep	;wreg free
  9963  001986  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
  9964  001988  AE14               	btfss	??_calculateSetFilterMask+2,7,c
  9965  00198A  D11A               	goto	l9067
  9966                           
  9967                           ;main.c: 2704: rowmask =
  9968                           ;main.c: 2706: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 2 ) << 23 ) |
  9969                           ;main.c: 2708: ( (uint32_t)Read_b_eep(0x43 + 8*i + 2) << 16 ) |
  9970                           ;main.c: 2710: ( (uint32_t)Read_b_eep(0x43 + 8*i + 4) << 8 ) |
  9971                           ;main.c: 2712: 0xff;
  9972  00198C  5043               	movf	calculateSetFilterMask@i,w,c
  9973  00198E  D965               	call	PL10	;call to abstracted procedure
  9974  001990  0E47               	movlw	71
  9975  001992  2412               	addwf	??_calculateSetFilterMask,w,c
  9976  001994  6E08               	movwf	?_Read_b_eep,c
  9977  001996  0E00               	movlw	0
  9978  001998  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9979  00199A  6E09               	movwf	?_Read_b_eep+1,c
  9980  00199C  EC76  F01E         	call	_Read_b_eep	;wreg free
  9981  0019A0  D968               	call	PL12	;call to abstracted procedure
  9982  0019A2  0E45               	movlw	69
  9983  0019A4  2419               	addwf	??_calculateSetFilterMask+7,w,c
  9984  0019A6  6E08               	movwf	?_Read_b_eep,c
  9985  0019A8  0E00               	movlw	0
  9986  0019AA  201A               	addwfc	??_calculateSetFilterMask+8,w,c
  9987  0019AC  6E09               	movwf	?_Read_b_eep+1,c
  9988  0019AE  EC76  F01E         	call	_Read_b_eep	;wreg free
  9989  0019B2  D934               	call	PL8	;call to abstracted procedure
  9990  0019B4  EC76  F01E         	call	_Read_b_eep	;wreg free
  9991  0019B8  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
  9992  0019BA  0E02               	movlw	2
  9993  0019BC  1622               	andwf	??_calculateSetFilterMask+16,f,c
  9994  0019BE  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
  9995  0019C2  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
  9996  0019C4  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
  9997  0019C6  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
  9998  0019C8  0E17               	movlw	23
  9999  0019CA                     u10055:
 10000  0019CA  90D8               	bcf	status,0,c
 10001  0019CC  3623               	rlcf	??_calculateSetFilterMask+17,f,c
 10002  0019CE  3624               	rlcf	??_calculateSetFilterMask+18,f,c
 10003  0019D0  3625               	rlcf	??_calculateSetFilterMask+19,f,c
 10004  0019D2  3626               	rlcf	??_calculateSetFilterMask+20,f,c
 10005  0019D4  2EE8               	decfsz	wreg,f,c
 10006  0019D6  D7F9               	goto	u10055
 10007  0019D8  501C               	movf	??_calculateSetFilterMask+10,w,c
 10008  0019DA  D965               	call	PL14	;call to abstracted procedure
 10009  0019DC  0EFF               	movlw	255
 10010  0019DE  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 10011  0019E0  6E31               	movwf	calculateSetFilterMask@rowmask,c
 10012  0019E2  502C               	movf	??_calculateSetFilterMask+26,w,c
 10013  0019E4  6E32               	movwf	calculateSetFilterMask@rowmask+1,c
 10014  0019E6  502D               	movf	??_calculateSetFilterMask+27,w,c
 10015  0019E8  6E33               	movwf	calculateSetFilterMask@rowmask+2,c
 10016  0019EA  502E               	movf	??_calculateSetFilterMask+28,w,c
 10017  0019EC  6E34               	movwf	calculateSetFilterMask@rowmask+3,c
 10018                           
 10019                           ;main.c: 2713: ;
 10020                           ;main.c: 2718: rowfilter =
 10021                           ;main.c: 2720: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 1 ) << 24 ) |
 10022                           ;main.c: 2722: ( (uint32_t)Read_b_eep(0x43 + 8*i + 3) << 16 ) |
 10023                           ;main.c: 2724: ( (uint32_t)Read_b_eep(0x43 + 8*i + 5) << 8 ) |
 10024                           ;main.c: 2727: Read_b_eep(0x43 + 8*i);
 10025  0019EE  5043               	movf	calculateSetFilterMask@i,w,c
 10026  0019F0  D934               	call	PL10	;call to abstracted procedure
 10027  0019F2  0E48               	movlw	72
 10028  0019F4  2412               	addwf	??_calculateSetFilterMask,w,c
 10029  0019F6  6E08               	movwf	?_Read_b_eep,c
 10030  0019F8  0E00               	movlw	0
 10031  0019FA  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10032  0019FC  6E09               	movwf	?_Read_b_eep+1,c
 10033  0019FE  EC76  F01E         	call	_Read_b_eep	;wreg free
 10034  001A02  D937               	call	PL12	;call to abstracted procedure
 10035  001A04  0E46               	movlw	70
 10036  001A06  2419               	addwf	??_calculateSetFilterMask+7,w,c
 10037  001A08  6E08               	movwf	?_Read_b_eep,c
 10038  001A0A  0E00               	movlw	0
 10039  001A0C  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 10040  001A0E  6E09               	movwf	?_Read_b_eep+1,c
 10041  001A10  EC76  F01E         	call	_Read_b_eep	;wreg free
 10042  001A14  D903               	call	PL8	;call to abstracted procedure
 10043  001A16  EC76  F01E         	call	_Read_b_eep	;wreg free
 10044  001A1A  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 10045  001A1C  0E01               	movlw	1
 10046  001A1E  1622               	andwf	??_calculateSetFilterMask+16,f,c
 10047  001A20  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 10048  001A24  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 10049  001A26  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 10050  001A28  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 10051  001A2A  C023  F026         	movff	??_calculateSetFilterMask+17,??_calculateSetFilterMask+20
 10052  001A2E  6A25               	clrf	??_calculateSetFilterMask+19,c
 10053  001A30  6A24               	clrf	??_calculateSetFilterMask+18,c
 10054  001A32  6A23               	clrf	??_calculateSetFilterMask+17,c
 10055  001A34  501C               	movf	??_calculateSetFilterMask+10,w,c
 10056  001A36  D937               	call	PL14	;call to abstracted procedure
 10057  001A38  5043               	movf	calculateSetFilterMask@i,w,c
 10058  001A3A  6E2F               	movwf	(??_calculateSetFilterMask+29)& (0+255),c
 10059  001A3C  6A30               	clrf	(??_calculateSetFilterMask+30)& (0+255),c
 10060  001A3E  90D8               	bcf	status,0,c
 10061  001A40  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10062  001A42  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10063  001A44  90D8               	bcf	status,0,c
 10064  001A46  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10065  001A48  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10066  001A4A  90D8               	bcf	status,0,c
 10067  001A4C  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10068  001A4E  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10069  001A50  0E43               	movlw	67
 10070  001A52  242F               	addwf	??_calculateSetFilterMask+29,w,c
 10071  001A54  6E08               	movwf	?_Read_b_eep,c
 10072  001A56  0E00               	movlw	0
 10073  001A58  2030               	addwfc	??_calculateSetFilterMask+30,w,c
 10074  001A5A  6E09               	movwf	?_Read_b_eep+1,c
 10075  001A5C  EC76  F01E         	call	_Read_b_eep	;wreg free
 10076  001A60  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 10077  001A62  6E3E               	movwf	calculateSetFilterMask@rowfilter,c
 10078  001A64  502C               	movf	??_calculateSetFilterMask+26,w,c
 10079  001A66  6E3F               	movwf	calculateSetFilterMask@rowfilter+1,c
 10080  001A68  502D               	movf	??_calculateSetFilterMask+27,w,c
 10081  001A6A  6E40               	movwf	calculateSetFilterMask@rowfilter+2,c
 10082  001A6C  502E               	movf	??_calculateSetFilterMask+28,w,c
 10083  001A6E  6E41               	movwf	calculateSetFilterMask@rowfilter+3,c
 10084                           
 10085                           ;main.c: 2729: if ( 0 == i ) filter = rowfilter;
 10086  001A70  6643               	tstfsz	calculateSetFilterMask@i,c
 10087  001A72  D008               	goto	l9031
 10088  001A74  C03E  F03A         	movff	calculateSetFilterMask@rowfilter,calculateSetFilterMask@filter
 10089  001A78  C03F  F03B         	movff	calculateSetFilterMask@rowfilter+1,calculateSetFilterMask@filter+1
 10090  001A7C  C040  F03C         	movff	calculateSetFilterMask@rowfilter+2,calculateSetFilterMask@filter+2
 10091  001A80  C041  F03D         	movff	calculateSetFilterMask@rowfilter+3,calculateSetFilterMask@filter+3
 10092  001A84                     l9031:
 10093                           
 10094                           ;main.c: 2733: mask &= rowmask;
 10095  001A84  5031               	movf	calculateSetFilterMask@rowmask,w,c
 10096  001A86  1636               	andwf	calculateSetFilterMask@mask,f,c
 10097  001A88  5032               	movf	calculateSetFilterMask@rowmask+1,w,c
 10098  001A8A  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10099  001A8C  5033               	movf	calculateSetFilterMask@rowmask+2,w,c
 10100  001A8E  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10101  001A90  5034               	movf	calculateSetFilterMask@rowmask+3,w,c
 10102  001A92  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10103                           
 10104                           ;main.c: 2738: for ( j=0; j<32; j++ ) {
 10105  001A94  6A42               	clrf	calculateSetFilterMask@j,c
 10106  001A96                     l9039:
 10107                           
 10108                           ;main.c: 2740: if ( ( ( filter >> j ) & 1 ) != ( ( rowfilter >> j ) & 1 ) ) {
 10109  001A96  5042               	movf	calculateSetFilterMask@j,w,c
 10110  001A98  C03E  F012         	movff	calculateSetFilterMask@rowfilter,??_calculateSetFilterMask
 10111  001A9C  C03F  F013         	movff	calculateSetFilterMask@rowfilter+1,??_calculateSetFilterMask+1
 10112  001AA0  C040  F014         	movff	calculateSetFilterMask@rowfilter+2,??_calculateSetFilterMask+2
 10113  001AA4  C041  F015         	movff	calculateSetFilterMask@rowfilter+3,??_calculateSetFilterMask+3
 10114  001AA8  2AE8               	incf	wreg,f,c
 10115  001AAA  D005               	goto	u10070
 10116  001AAC                     u10075:
 10117  001AAC  90D8               	bcf	status,0,c
 10118  001AAE  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10119  001AB0  3214               	rrcf	??_calculateSetFilterMask+2,f,c
 10120  001AB2  3213               	rrcf	??_calculateSetFilterMask+1,f,c
 10121  001AB4  3212               	rrcf	??_calculateSetFilterMask,f,c
 10122  001AB6                     u10070:
 10123  001AB6  2EE8               	decfsz	wreg,f,c
 10124  001AB8  D7F9               	goto	u10075
 10125  001ABA  0E01               	movlw	1
 10126  001ABC  1612               	andwf	??_calculateSetFilterMask,f,c
 10127  001ABE  5042               	movf	calculateSetFilterMask@j,w,c
 10128  001AC0  C03A  F016         	movff	calculateSetFilterMask@filter,??_calculateSetFilterMask+4
 10129  001AC4  C03B  F017         	movff	calculateSetFilterMask@filter+1,??_calculateSetFilterMask+5
 10130  001AC8  C03C  F018         	movff	calculateSetFilterMask@filter+2,??_calculateSetFilterMask+6
 10131  001ACC  C03D  F019         	movff	calculateSetFilterMask@filter+3,??_calculateSetFilterMask+7
 10132  001AD0  2AE8               	incf	wreg,f,c
 10133  001AD2  D005               	goto	u10080
 10134  001AD4                     u10085:
 10135  001AD4  90D8               	bcf	status,0,c
 10136  001AD6  3219               	rrcf	??_calculateSetFilterMask+7,f,c
 10137  001AD8  3218               	rrcf	??_calculateSetFilterMask+6,f,c
 10138  001ADA  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10139  001ADC  3216               	rrcf	??_calculateSetFilterMask+4,f,c
 10140  001ADE                     u10080:
 10141  001ADE  2EE8               	decfsz	wreg,f,c
 10142  001AE0  D7F9               	goto	u10085
 10143  001AE2  5016               	movf	??_calculateSetFilterMask+4,w,c
 10144  001AE4  0B01               	andlw	1
 10145  001AE6  1812               	xorwf	??_calculateSetFilterMask,w,c
 10146  001AE8  E010               	bz	l9043
 10147                           
 10148                           ;main.c: 2741: mask &= ~(1<<j);
 10149  001AEA  C042  F012         	movff	calculateSetFilterMask@j,??_calculateSetFilterMask
 10150  001AEE  D8FD               	call	PL78	;call to abstracted procedure
 10151  001AF0  D001               	goto	u10104
 10152  001AF2                     u10105:
 10153  001AF2  D900               	call	PL82	;call to abstracted procedure
 10154  001AF4                     u10104:
 10155  001AF4  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10156  001AF6  D7FD               	goto	u10105
 10157  001AF8  1C13               	comf	??_calculateSetFilterMask+1,w,c
 10158  001AFA  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10159  001AFC  1C14               	comf	??_calculateSetFilterMask+2,w,c
 10160  001AFE  6E16               	movwf	(??_calculateSetFilterMask+4)& (0+255),c
 10161  001B00  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10162  001B02  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10163  001B04  0617               	decf	(??_calculateSetFilterMask+5)& (0+255),f,c
 10164  001B06  5017               	movf	(??_calculateSetFilterMask+5)& (0+255),w,c
 10165  001B08  D8E6               	call	PL38	;call to abstracted procedure
 10166  001B0A                     l9043:
 10167  001B0A  2A42               	incf	calculateSetFilterMask@j,f,c
 10168  001B0C  0E1F               	movlw	31
 10169  001B0E  6442               	cpfsgt	calculateSetFilterMask@j,c
 10170  001B10  D7C2               	goto	l9039
 10171                           
 10172                           ;main.c: 2742: }
 10173                           ;main.c: 2743: }
 10174                           ;main.c: 2749: filter &= rowfilter;
 10175  001B12  503E               	movf	calculateSetFilterMask@rowfilter,w,c
 10176  001B14  163A               	andwf	calculateSetFilterMask@filter,f,c
 10177  001B16  503F               	movf	calculateSetFilterMask@rowfilter+1,w,c
 10178  001B18  163B               	andwf	calculateSetFilterMask@filter+1,f,c
 10179  001B1A  5040               	movf	calculateSetFilterMask@rowfilter+2,w,c
 10180  001B1C  163C               	andwf	calculateSetFilterMask@filter+2,f,c
 10181  001B1E  5041               	movf	calculateSetFilterMask@rowfilter+3,w,c
 10182  001B20  163D               	andwf	calculateSetFilterMask@filter+3,f,c
 10183                           
 10184                           ;main.c: 2757: }
 10185                           ;main.c: 2759: if (i) {
 10186                           
 10187                           ;main.c: 2752: if ( !Read_b_eep(0x43 + 8*i + 1) & 0x40 ) {
 10188  001B22  5043               	movf	calculateSetFilterMask@i,w,c
 10189  001B24  E042               	bz	l9063
 10190                           
 10191                           ;main.c: 2762: for (j = 0; j < 8; j++) {
 10192  001B26  6A42               	clrf	calculateSetFilterMask@j,c
 10193  001B28                     l9057:
 10194                           
 10195                           ;main.c: 2763: if ((lastOID >> i & 1)
 10196                           ;main.c: 2764: != (Read_b_eep(0x43 + 8 * i) >> i & 1)) {
 10197  001B28  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10198  001B2C  5043               	movf	calculateSetFilterMask@i,w,c
 10199  001B2E  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10200  001B30  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10201  001B32  90D8               	bcf	status,0,c
 10202  001B34  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10203  001B36  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10204  001B38  90D8               	bcf	status,0,c
 10205  001B3A  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10206  001B3C  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10207  001B3E  90D8               	bcf	status,0,c
 10208  001B40  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10209  001B42  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10210  001B44  0E43               	movlw	67
 10211  001B46  2413               	addwf	??_calculateSetFilterMask+1,w,c
 10212  001B48  6E08               	movwf	?_Read_b_eep,c
 10213  001B4A  0E00               	movlw	0
 10214  001B4C  2014               	addwfc	??_calculateSetFilterMask+2,w,c
 10215  001B4E  6E09               	movwf	?_Read_b_eep+1,c
 10216  001B50  EC76  F01E         	call	_Read_b_eep	;wreg free
 10217  001B54  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10218  001B56  2A12               	incf	??_calculateSetFilterMask,f,c
 10219  001B58  D002               	goto	u10134
 10220  001B5A                     u10135:
 10221  001B5A  90D8               	bcf	status,0,c
 10222  001B5C  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10223  001B5E                     u10134:
 10224  001B5E  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10225  001B60  D7FC               	goto	u10135
 10226  001B62  0E01               	movlw	1
 10227  001B64  1615               	andwf	??_calculateSetFilterMask+3,f,c
 10228  001B66  C043  F016         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask+4
 10229  001B6A  C035  F017         	movff	calculateSetFilterMask@lastOID,??_calculateSetFilterMask+5
 10230  001B6E  2A16               	incf	??_calculateSetFilterMask+4,f,c
 10231  001B70  D002               	goto	u10144
 10232  001B72                     u10145:
 10233  001B72  90D8               	bcf	status,0,c
 10234  001B74  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10235  001B76                     u10144:
 10236  001B76  2E16               	decfsz	??_calculateSetFilterMask+4,f,c
 10237  001B78  D7FC               	goto	u10145
 10238  001B7A  5017               	movf	??_calculateSetFilterMask+5,w,c
 10239  001B7C  0B01               	andlw	1
 10240  001B7E  1815               	xorwf	??_calculateSetFilterMask+3,w,c
 10241  001B80  E010               	bz	l9061
 10242                           
 10243                           ;main.c: 2765: mask &= (1 << i);
 10244  001B82  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10245  001B86  D8B1               	call	PL78	;call to abstracted procedure
 10246  001B88  D001               	goto	u10164
 10247  001B8A                     u10165:
 10248  001B8A  D8B4               	call	PL82	;call to abstracted procedure
 10249  001B8C                     u10164:
 10250  001B8C  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10251  001B8E  D7FD               	goto	u10165
 10252  001B90  C013  F015         	movff	??_calculateSetFilterMask+1,??_calculateSetFilterMask+3
 10253  001B94  C014  F016         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+4
 10254  001B98  0E00               	movlw	0
 10255  001B9A  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10256  001B9C  0EFF               	movlw	255
 10257  001B9E  6E17               	movwf	(??_calculateSetFilterMask+5)& (0+255),c
 10258  001BA0  D89A               	call	PL38	;call to abstracted procedure
 10259  001BA2                     l9061:
 10260  001BA2  2A42               	incf	calculateSetFilterMask@j,f,c
 10261  001BA4  0E07               	movlw	7
 10262  001BA6  6442               	cpfsgt	calculateSetFilterMask@j,c
 10263  001BA8  D7BF               	goto	l9057
 10264  001BAA                     l9063:
 10265                           
 10266                           ;main.c: 2766: }
 10267                           ;main.c: 2767: }
 10268                           ;main.c: 2769: lastOID = Read_b_eep(0x43 + 8 * i);
 10269  001BAA  5043               	movf	calculateSetFilterMask@i,w,c
 10270  001BAC  D856               	call	PL10	;call to abstracted procedure
 10271  001BAE  0E43               	movlw	67
 10272  001BB0  2412               	addwf	??_calculateSetFilterMask,w,c
 10273  001BB2  6E08               	movwf	?_Read_b_eep,c
 10274  001BB4  0E00               	movlw	0
 10275  001BB6  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10276  001BB8  6E09               	movwf	?_Read_b_eep+1,c
 10277  001BBA  EC76  F01E         	call	_Read_b_eep	;wreg free
 10278  001BBE  6E35               	movwf	calculateSetFilterMask@lastOID,c
 10279  001BC0                     l9067:
 10280  001BC0  2A43               	incf	calculateSetFilterMask@i,f,c
 10281  001BC2  0E06               	movlw	6
 10282  001BC4  6443               	cpfsgt	calculateSetFilterMask@i,c
 10283  001BC6  D6D5               	goto	l9023
 10284                           
 10285                           ;main.c: 2775: }
 10286                           ;main.c: 2777: }
 10287                           ;main.c: 2778: }
 10288                           ;main.c: 2781: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 10289  001BC8  0E80               	movlw	128
 10290  001BCA  EC22  F01E         	call	_ECANSetOperationMode
 10291                           
 10292                           ;main.c: 2784: _CANIDToRegs((BYTE*)&RXM1SIDH, mask, 1);
 10293  001BCE  010F               	movlb	15	; () banked
 10294  001BD0  0E0F               	movlw	15	;volatile
 10295  001BD2  6E09               	movwf	?__CANIDToRegs+1,c
 10296  001BD4  0E1C               	movlw	28	;volatile
 10297  001BD6  6E08               	movwf	?__CANIDToRegs,c
 10298  001BD8  C036  F00A         	movff	calculateSetFilterMask@mask,?__CANIDToRegs+2
 10299  001BDC  C037  F00B         	movff	calculateSetFilterMask@mask+1,?__CANIDToRegs+3
 10300  001BE0  C038  F00C         	movff	calculateSetFilterMask@mask+2,?__CANIDToRegs+4
 10301  001BE4  C039  F00D         	movff	calculateSetFilterMask@mask+3,?__CANIDToRegs+5
 10302  001BE8  0E01               	movlw	1
 10303  001BEA  6E0E               	movwf	?__CANIDToRegs+6,c
 10304  001BEC  EC4E  F017         	call	__CANIDToRegs	;wreg free
 10305                           
 10306                           ;main.c: 2787: RXF1EN = 1; _CANIDToRegs((BYTE*)&RXF1SIDH, filter, 1);;
 10307  001BF0  010D               	movlb	13	; () banked
 10308  001BF2  83D4               	bsf	212,1,b	;volatile
 10309                           
 10310                           ; BSR set to: 13
 10311  001BF4  010F               	movlb	15	; () banked
 10312  001BF6  0E0F               	movlw	15	;volatile
 10313  001BF8  6E09               	movwf	?__CANIDToRegs+1,c
 10314  001BFA  0E04               	movlw	4	;volatile
 10315  001BFC  6E08               	movwf	?__CANIDToRegs,c
 10316  001BFE  C03A  F00A         	movff	calculateSetFilterMask@filter,?__CANIDToRegs+2
 10317  001C02  C03B  F00B         	movff	calculateSetFilterMask@filter+1,?__CANIDToRegs+3
 10318  001C06  C03C  F00C         	movff	calculateSetFilterMask@filter+2,?__CANIDToRegs+4
 10319  001C0A  C03D  F00D         	movff	calculateSetFilterMask@filter+3,?__CANIDToRegs+5
 10320  001C0E  0E01               	movlw	1
 10321  001C10  6E0E               	movwf	?__CANIDToRegs+6,c
 10322  001C12  EC4E  F017         	call	__CANIDToRegs	;wreg free
 10323                           
 10324                           ;main.c: 2790: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
 10325  001C16  0E00               	movlw	0
 10326  001C18  EF22  F01E         	goto	_ECANSetOperationMode
 10327  001C1C                     __end_of_calculateSetFilterMask:
 10328                           	opt stack 0
 10329  001C1C                     PL8:
 10330                           	opt stack 24
 10331  001C1C  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
 10332  001C1E  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 10333  001C22  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 10334  001C24  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 10335  001C26  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 10336  001C28  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 10337  001C2C  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 10338  001C30  6A1D               	clrf	??_calculateSetFilterMask+11,c
 10339  001C32  6A1C               	clrf	??_calculateSetFilterMask+10,c
 10340  001C34  5043               	movf	calculateSetFilterMask@i,w,c
 10341  001C36  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 10342  001C38  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 10343  001C3A  90D8               	bcf	status,0,c
 10344  001C3C  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10345  001C3E  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10346  001C40  90D8               	bcf	status,0,c
 10347  001C42  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10348  001C44  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10349  001C46  90D8               	bcf	status,0,c
 10350  001C48  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10351  001C4A  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10352  001C4C  0E44               	movlw	68
 10353  001C4E  2420               	addwf	??_calculateSetFilterMask+14,w,c
 10354  001C50  6E08               	movwf	?_Read_b_eep,c
 10355  001C52  0E00               	movlw	0
 10356  001C54  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 10357  001C56  6E09               	movwf	?_Read_b_eep+1,c
 10358  001C58  0012               	return	
 10359  001C5A                     __end_ofPL8:
 10360                           	opt stack 0
 10361  001C5A                     PL10:
 10362                           	opt stack 24
 10363  001C5A  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10364  001C5C  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10365  001C5E  90D8               	bcf	status,0,c
 10366  001C60  3612               	rlcf	??_calculateSetFilterMask,f,c
 10367  001C62  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10368  001C64  90D8               	bcf	status,0,c
 10369  001C66  3612               	rlcf	??_calculateSetFilterMask,f,c
 10370  001C68  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10371  001C6A  90D8               	bcf	status,0,c
 10372  001C6C  3612               	rlcf	??_calculateSetFilterMask,f,c
 10373  001C6E  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10374  001C70  0012               	return	
 10375  001C72                     __end_ofPL10:
 10376                           	opt stack 0
 10377  001C72                     PL12:
 10378                           	opt stack 24
 10379  001C72  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 10380  001C74  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
 10381  001C78  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
 10382  001C7A  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10383  001C7C  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
 10384  001C7E  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
 10385  001C82  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
 10386  001C86  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
 10387  001C8A  6A15               	clrf	??_calculateSetFilterMask+3,c
 10388  001C8C  5043               	movf	calculateSetFilterMask@i,w,c
 10389  001C8E  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
 10390  001C90  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
 10391  001C92  90D8               	bcf	status,0,c
 10392  001C94  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10393  001C96  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10394  001C98  90D8               	bcf	status,0,c
 10395  001C9A  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10396  001C9C  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10397  001C9E  90D8               	bcf	status,0,c
 10398  001CA0  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10399  001CA2  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10400  001CA4  0012               	return	
 10401  001CA6                     __end_ofPL12:
 10402                           	opt stack 0
 10403  001CA6                     PL14:
 10404                           	opt stack 24
 10405  001CA6  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 10406  001CA8  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 10407  001CAA  501D               	movf	??_calculateSetFilterMask+11,w,c
 10408  001CAC  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 10409  001CAE  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 10410  001CB0  501E               	movf	??_calculateSetFilterMask+12,w,c
 10411  001CB2  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 10412  001CB4  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 10413  001CB6  501F               	movf	??_calculateSetFilterMask+13,w,c
 10414  001CB8  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 10415  001CBA  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 10416  001CBC  5015               	movf	??_calculateSetFilterMask+3,w,c
 10417  001CBE  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 10418  001CC0  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 10419  001CC2  5016               	movf	??_calculateSetFilterMask+4,w,c
 10420  001CC4  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 10421  001CC6  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 10422  001CC8  5017               	movf	??_calculateSetFilterMask+5,w,c
 10423  001CCA  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 10424  001CCC  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 10425  001CCE  5018               	movf	??_calculateSetFilterMask+6,w,c
 10426  001CD0  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 10427  001CD2  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 10428  001CD4  0012               	return	
 10429  001CD6                     __end_ofPL14:
 10430                           	opt stack 0
 10431  001CD6                     PL38:
 10432                           	opt stack 24
 10433  001CD6  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10434  001CD8  5015               	movf	??_calculateSetFilterMask+3,w,c
 10435  001CDA  1636               	andwf	calculateSetFilterMask@mask,f,c
 10436  001CDC  5016               	movf	??_calculateSetFilterMask+4,w,c
 10437  001CDE  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10438  001CE0  5017               	movf	??_calculateSetFilterMask+5,w,c
 10439  001CE2  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10440  001CE4  5018               	movf	??_calculateSetFilterMask+6,w,c
 10441  001CE6  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10442  001CE8  0012               	return	
 10443  001CEA                     __end_ofPL38:
 10444                           	opt stack 0
 10445  001CEA                     PL78:
 10446                           	opt stack 24
 10447  001CEA  0E01               	movlw	1
 10448  001CEC  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10449  001CEE  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10450  001CF0  2A12               	incf	??_calculateSetFilterMask,f,c
 10451  001CF2  0012               	return	
 10452  001CF4                     __end_ofPL78:
 10453                           	opt stack 0
 10454  001CF4                     PL82:
 10455                           	opt stack 24
 10456  001CF4  90D8               	bcf	status,0,c
 10457  001CF6  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10458  001CF8  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10459  001CFA  0012               	return	
 10460  001CFC                     __end_ofPL82:
 10461                           	opt stack 0
 10462                           tblptru	equ	0xFF8
 10463                           tblptrh	equ	0xFF7
 10464                           tblptrl	equ	0xFF6
 10465                           tablat	equ	0xFF5
 10466                           prodh	equ	0xFF4
 10467                           prodl	equ	0xFF3
 10468                           intcon	equ	0xFF2
 10469                           postinc0	equ	0xFEE
 10470                           wreg	equ	0xFE8
 10471                           indf1	equ	0xFE7
 10472                           fsr1h	equ	0xFE2
 10473                           fsr1l	equ	0xFE1
 10474                           indf2	equ	0xFDF
 10475                           postinc2	equ	0xFDE
 10476                           postdec2	equ	0xFDD
 10477                           plusw2	equ	0xFDB
 10478                           fsr2h	equ	0xFDA
 10479                           fsr2l	equ	0xFD9
 10480                           status	equ	0xFD8
 10481                           
 10482 ;; *************** function _SendInformationEvent *****************
 10483 ;; Defined at:
 10484 ;;		line 1598 in file "../main.c"
 10485 ;; Parameters:    Size  Location     Type
 10486 ;;  idx             1    wreg     unsigned char 
 10487 ;;  eventClass      1   20[BANK0 ] unsigned char 
 10488 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
 10489 ;; Auto vars:     Size  Location     Type
 10490 ;;  idx             1   79[COMRAM] unsigned char 
 10491 ;;  data            3   76[COMRAM] unsigned char [3]
 10492 ;; Return value:  Size  Location     Type
 10493 ;;		None               void
 10494 ;; Registers used:
 10495 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 10496 ;; Tracked objects:
 10497 ;;		On entry : F/0
 10498 ;;		On exit  : F/0
 10499 ;;		Unchanged: 0/0
 10500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10501 ;;      Params:         0       2       0       0       0       0       0
 10502 ;;      Locals:         4       0       0       0       0       0       0
 10503 ;;      Temps:          2       0       0       0       0       0       0
 10504 ;;      Totals:         6       2       0       0       0       0       0
 10505 ;;Total ram usage:        8 bytes
 10506 ;; Hardware stack levels used:    1
 10507 ;; Hardware stack levels required when called:    6
 10508 ;; This function calls:
 10509 ;;		_Read_b_eep
 10510 ;;		_sendVSCPFrame
 10511 ;; This function is called by:
 10512 ;;		_doApplicationOneSecondWork
 10513 ;;		_vscp_writeAppReg
 10514 ;;		_doActionOn
 10515 ;;		_doActionOff
 10516 ;;		_doActionStatus
 10517 ;;		_doActionToggle
 10518 ;; This function uses a non-reentrant model
 10519 ;;
 10520                           
 10521                           	psect	text26
 10522  0037A6                     __ptext26:
 10523                           	opt stack 0
 10524  0037A6                     _SendInformationEvent:
 10525                           	opt stack 23
 10526                           
 10527                           ;incstack = 0
 10528                           ;incstack = 0
 10529                           ;SendInformationEvent@idx stored from wreg
 10530  0037A6  CFE8 F050          	movff	wreg,SendInformationEvent@idx
 10531                           
 10532                           ; BSR set to: 0
 10533                           ;main.c: 1599: uint8_t data[3];
 10534                           ;main.c: 1612: data[ 0 ] = idx;
 10535  0037AA  C050  F04D         	movff	SendInformationEvent@idx,SendInformationEvent@data
 10536                           
 10537                           ; BSR set to: 0
 10538                           ;main.c: 1613: data[ 1 ] = Read_b_eep(0x43 + 50 + 2*idx);
 10539  0037AE  90D8               	bcf	status,0,c
 10540  0037B0  3450               	rlcf	SendInformationEvent@idx,w,c
 10541  0037B2  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10542  0037B4  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10543  0037B6  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10544  0037B8  0E75               	movlw	117
 10545  0037BA  244B               	addwf	??_SendInformationEvent,w,c
 10546  0037BC  6E08               	movwf	?_Read_b_eep,c
 10547  0037BE  0E00               	movlw	0
 10548  0037C0  204C               	addwfc	??_SendInformationEvent+1,w,c
 10549  0037C2  6E09               	movwf	?_Read_b_eep+1,c
 10550  0037C4  EC76  F01E         	call	_Read_b_eep	;wreg free
 10551  0037C8  6E4E               	movwf	SendInformationEvent@data+1,c
 10552                           
 10553                           ;main.c: 1614: data[ 2 ] = Read_b_eep(0x43 + 51 + 2*idx);
 10554  0037CA  90D8               	bcf	status,0,c
 10555  0037CC  3450               	rlcf	SendInformationEvent@idx,w,c
 10556  0037CE  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10557  0037D0  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10558  0037D2  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10559  0037D4  0E76               	movlw	118
 10560  0037D6  244B               	addwf	??_SendInformationEvent,w,c
 10561  0037D8  6E08               	movwf	?_Read_b_eep,c
 10562  0037DA  0E00               	movlw	0
 10563  0037DC  204C               	addwfc	??_SendInformationEvent+1,w,c
 10564  0037DE  6E09               	movwf	?_Read_b_eep+1,c
 10565  0037E0  EC76  F01E         	call	_Read_b_eep	;wreg free
 10566  0037E4  6E4F               	movwf	SendInformationEvent@data+2,c
 10567                           
 10568                           ;main.c: 1615: sendVSCPFrame( eventClass,
 10569                           ;main.c: 1616: eventTypeId,
 10570                           ;main.c: 1617: vscp_nickname,
 10571                           ;main.c: 1618: 0x03,
 10572                           ;main.c: 1619: 3,
 10573                           ;main.c: 1620: data );
 10574  0037E6  0100               	movlb	0	; () banked
 10575  0037E8  C0C4  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
 10576  0037EC  6A40               	clrf	?_sendVSCPFrame+1,c
 10577  0037EE  C0C5  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
 10578  0037F2  C090  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 10579  0037F6  0E03               	movlw	3
 10580  0037F8  6E43               	movwf	?_sendVSCPFrame+4,c
 10581  0037FA  6E44               	movwf	?_sendVSCPFrame+5,c
 10582  0037FC  0E4D               	movlw	low SendInformationEvent@data
 10583  0037FE  6E45               	movwf	?_sendVSCPFrame+6,c
 10584  003800  0E00               	movlw	high SendInformationEvent@data
 10585  003802  6E46               	movwf	?_sendVSCPFrame+7,c
 10586  003804  0E0F               	movlw	15
 10587  003806  6E46               	movwf	?_sendVSCPFrame+7,c
 10588  003808  0E5F               	movlw	__accesstop+-1
 10589  00380A  6445               	cpfsgt	?_sendVSCPFrame+6,c
 10590  00380C  6A46               	clrf	?_sendVSCPFrame+7,c
 10591  00380E  EF16  F01A         	goto	_sendVSCPFrame	;wreg free
 10592  003812                     __end_of_SendInformationEvent:
 10593                           	opt stack 0
 10594                           tblptru	equ	0xFF8
 10595                           tblptrh	equ	0xFF7
 10596                           tblptrl	equ	0xFF6
 10597                           tablat	equ	0xFF5
 10598                           prodh	equ	0xFF4
 10599                           prodl	equ	0xFF3
 10600                           intcon	equ	0xFF2
 10601                           postinc0	equ	0xFEE
 10602                           wreg	equ	0xFE8
 10603                           indf1	equ	0xFE7
 10604                           fsr1h	equ	0xFE2
 10605                           fsr1l	equ	0xFE1
 10606                           indf2	equ	0xFDF
 10607                           postinc2	equ	0xFDE
 10608                           postdec2	equ	0xFDD
 10609                           plusw2	equ	0xFDB
 10610                           fsr2h	equ	0xFDA
 10611                           fsr2l	equ	0xFD9
 10612                           status	equ	0xFD8
 10613                           
 10614 ;; *************** function _vscp_readRegister *****************
 10615 ;; Defined at:
 10616 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 10617 ;; Parameters:    Size  Location     Type
 10618 ;;  reg             1    wreg     unsigned char 
 10619 ;; Auto vars:     Size  Location     Type
 10620 ;;  reg             1   28[COMRAM] unsigned char 
 10621 ;; Return value:  Size  Location     Type
 10622 ;;                  1    wreg      unsigned char 
 10623 ;; Registers used:
 10624 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10625 ;; Tracked objects:
 10626 ;;		On entry : F/0
 10627 ;;		On exit  : 0/0
 10628 ;;		Unchanged: 0/0
 10629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10630 ;;      Params:         0       0       0       0       0       0       0
 10631 ;;      Locals:         1       0       0       0       0       0       0
 10632 ;;      Temps:          0       0       0       0       0       0       0
 10633 ;;      Totals:         1       0       0       0       0       0       0
 10634 ;;Total ram usage:        1 bytes
 10635 ;; Hardware stack levels used:    1
 10636 ;; Hardware stack levels required when called:    5
 10637 ;; This function calls:
 10638 ;;		_vscp_readAppReg
 10639 ;;		_vscp_readStdReg
 10640 ;; This function is called by:
 10641 ;;		_vscp_handleProtocolEvent
 10642 ;; This function uses a non-reentrant model
 10643 ;;
 10644                           
 10645                           	psect	text27
 10646  003C12                     __ptext27:
 10647                           	opt stack 0
 10648  003C12                     _vscp_readRegister:
 10649                           	opt stack 24
 10650                           
 10651                           ; BSR set to: 0
 10652                           ;incstack = 0
 10653                           ;incstack = 0
 10654                           ;vscp_readRegister@reg stored from wreg
 10655  003C12  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
 10656                           
 10657                           ; BSR set to: 0
 10658                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 10659  003C16  0E7F               	movlw	127
 10660  003C18  641D               	cpfsgt	vscp_readRegister@reg,c
 10661  003C1A  D004               	goto	l9565
 10662                           
 10663                           ; BSR set to: 0
 10664                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 10665  003C1C  501D               	movf	vscp_readRegister@reg,w,c
 10666  003C1E  EC0A  F014         	call	_vscp_readStdReg
 10667  003C22  D003               	goto	l1126
 10668  003C24                     l9565:
 10669                           
 10670                           ; BSR set to: 0
 10671                           ;vscp_firmware.c: 565: else {
 10672                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 10673  003C24  501D               	movf	vscp_readRegister@reg,w,c
 10674  003C26  EC71  F01A         	call	_vscp_readAppReg
 10675  003C2A                     l1126:
 10676  003C2A  0012               	return	
 10677  003C2C                     __end_of_vscp_readRegister:
 10678                           	opt stack 0
 10679                           tblptru	equ	0xFF8
 10680                           tblptrh	equ	0xFF7
 10681                           tblptrl	equ	0xFF6
 10682                           tablat	equ	0xFF5
 10683                           prodh	equ	0xFF4
 10684                           prodl	equ	0xFF3
 10685                           intcon	equ	0xFF2
 10686                           postinc0	equ	0xFEE
 10687                           wreg	equ	0xFE8
 10688                           indf1	equ	0xFE7
 10689                           fsr1h	equ	0xFE2
 10690                           fsr1l	equ	0xFE1
 10691                           indf2	equ	0xFDF
 10692                           postinc2	equ	0xFDE
 10693                           postdec2	equ	0xFDD
 10694                           plusw2	equ	0xFDB
 10695                           fsr2h	equ	0xFDA
 10696                           fsr2l	equ	0xFD9
 10697                           status	equ	0xFD8
 10698                           
 10699 ;; *************** function _vscp_readStdReg *****************
 10700 ;; Defined at:
 10701 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 10702 ;; Parameters:    Size  Location     Type
 10703 ;;  reg             1    wreg     unsigned char 
 10704 ;; Auto vars:     Size  Location     Type
 10705 ;;  reg             1   27[COMRAM] unsigned char 
 10706 ;;  code            4   20[COMRAM] unsigned long 
 10707 ;;  idx             1   25[COMRAM] unsigned char 
 10708 ;;  code            4   16[COMRAM] unsigned long 
 10709 ;;  idx             1   24[COMRAM] unsigned char 
 10710 ;;  rv              1   26[COMRAM] unsigned char 
 10711 ;; Return value:  Size  Location     Type
 10712 ;;                  1    wreg      unsigned char 
 10713 ;; Registers used:
 10714 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10715 ;; Tracked objects:
 10716 ;;		On entry : F/0
 10717 ;;		On exit  : 0/0
 10718 ;;		Unchanged: 0/0
 10719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10720 ;;      Params:         0       0       0       0       0       0       0
 10721 ;;      Locals:        12       0       0       0       0       0       0
 10722 ;;      Temps:          5       0       0       0       0       0       0
 10723 ;;      Totals:        17       0       0       0       0       0       0
 10724 ;;Total ram usage:       17 bytes
 10725 ;; Hardware stack levels used:    1
 10726 ;; Hardware stack levels required when called:    4
 10727 ;; This function calls:
 10728 ;;		_vscp_getMajorVersion
 10729 ;;		_vscp_getMinorVersion
 10730 ;;		_vscp_getSubMinorVersion
 10731 ;;		_vscp_getGUID
 10732 ;;		_vscp_getMDF_URL
 10733 ;;		_vscp_getUserID
 10734 ;;		_vscp_getManufacturerId
 10735 ;;		_vscp_getBootLoaderAlgorithm
 10736 ;;		_vscp_getBufferSize
 10737 ;;		_vscp_getFamilyCode
 10738 ;;		_vscp_getFamilyType
 10739 ;;		_vscp_getRegisterPagesUsed
 10740 ;; This function is called by:
 10741 ;;		_vscp_readRegister
 10742 ;;		_vscp_handleProtocolEvent
 10743 ;; This function uses a non-reentrant model
 10744 ;;
 10745                           
 10746                           	psect	text28
 10747  002814                     __ptext28:
 10748                           	opt stack 0
 10749  002814                     _vscp_readStdReg:
 10750                           	opt stack 25
 10751                           
 10752                           ;incstack = 0
 10753                           ;incstack = 0
 10754                           ;vscp_readStdReg@reg stored from wreg
 10755  002814  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
 10756                           
 10757                           ; BSR set to: 0
 10758                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 10759  002818  6A1B               	clrf	vscp_readStdReg@rv,c
 10760                           
 10761                           ; BSR set to: 0
 10762                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 10763  00281A  501C               	movf	vscp_readStdReg@reg,w,c
 10764  00281C  0A80               	xorlw	128
 10765  00281E  E104               	bnz	l9575
 10766                           
 10767                           ; BSR set to: 0
 10768                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 10769  002820  C055  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 10770                           
 10771                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 10772  002824  6A55               	clrf	_vscp_alarmstatus,c
 10773                           
 10774                           ;vscp_firmware.c: 584: }
 10775  002826  D0B3               	goto	l9663
 10776  002828                     l9575:
 10777                           
 10778                           ; BSR set to: 0
 10779                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 10780  002828  501C               	movf	vscp_readStdReg@reg,w,c
 10781  00282A  0A81               	xorlw	129
 10782  00282C  E102               	bnz	l9579
 10783                           
 10784                           ; BSR set to: 0
 10785                           ;vscp_firmware.c: 588: rv = 1;
 10786  00282E  0E01               	movlw	1
 10787  002830  D075               	goto	L39
 10788  002832                     l9579:
 10789                           
 10790                           ; BSR set to: 0
 10791                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 10792  002832  501C               	movf	vscp_readStdReg@reg,w,c
 10793  002834  0A82               	xorlw	130
 10794  002836  E102               	bnz	l9583
 10795                           
 10796                           ; BSR set to: 0
 10797                           ;vscp_firmware.c: 594: rv = 5;
 10798  002838  0E05               	movlw	5
 10799  00283A  D070               	goto	L39
 10800  00283C                     l9583:
 10801                           
 10802                           ; BSR set to: 0
 10803                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 10804  00283C  501C               	movf	vscp_readStdReg@reg,w,c
 10805  00283E  0A83               	xorlw	131
 10806  002840  E102               	bnz	l9587
 10807                           
 10808                           ; BSR set to: 0
 10809                           ;vscp_firmware.c: 600: rv = 0;
 10810  002842  6A1B               	clrf	vscp_readStdReg@rv,c
 10811                           
 10812                           ;vscp_firmware.c: 602: }
 10813  002844  D0A4               	goto	l9663
 10814  002846                     l9587:
 10815                           
 10816                           ; BSR set to: 0
 10817                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 10818  002846  501C               	movf	vscp_readStdReg@reg,w,c
 10819  002848  0A94               	xorlw	148
 10820  00284A  E103               	bnz	l9591
 10821                           
 10822                           ; BSR set to: 0
 10823                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 10824  00284C  ECB5  F01E         	call	_vscp_getMajorVersion	;wreg free
 10825  002850  D065               	goto	L39
 10826  002852                     l9591:
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 10830  002852  501C               	movf	vscp_readStdReg@reg,w,c
 10831  002854  0A95               	xorlw	149
 10832  002856  E103               	bnz	l9595
 10833                           
 10834                           ; BSR set to: 0
 10835                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 10836  002858  ECB4  F01E         	call	_vscp_getMinorVersion	;wreg free
 10837  00285C  D05F               	goto	L39
 10838  00285E                     l9595:
 10839                           
 10840                           ; BSR set to: 0
 10841                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 10842  00285E  501C               	movf	vscp_readStdReg@reg,w,c
 10843  002860  0A96               	xorlw	150
 10844  002862  E103               	bnz	l9599
 10845                           
 10846                           ; BSR set to: 0
 10847                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 10848  002864  ECB3  F01E         	call	_vscp_getSubMinorVersion	;wreg free
 10849  002868  D059               	goto	L39
 10850  00286A                     l9599:
 10851                           
 10852                           ; BSR set to: 0
 10853                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 10854  00286A  0E89               	movlw	137
 10855  00286C  601C               	cpfslt	vscp_readStdReg@reg,c
 10856  00286E  D005               	goto	l9603
 10857                           
 10858                           ; BSR set to: 0
 10859                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 10860  002870  501C               	movf	vscp_readStdReg@reg,w,c
 10861  002872  0F7C               	addlw	124
 10862  002874  EC59  F01E         	call	_vscp_getUserID
 10863  002878  D051               	goto	L39
 10864  00287A                     l9603:
 10865                           
 10866                           ; BSR set to: 0
 10867                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 10868                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 10869  00287A  0E88               	movlw	136
 10870  00287C  641C               	cpfsgt	vscp_readStdReg@reg,c
 10871  00287E  D008               	goto	l9609
 10872                           
 10873                           ; BSR set to: 0
 10874  002880  0E91               	movlw	145
 10875  002882  601C               	cpfslt	vscp_readStdReg@reg,c
 10876  002884  D005               	goto	l9609
 10877                           
 10878                           ; BSR set to: 0
 10879                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 10880  002886  501C               	movf	vscp_readStdReg@reg,w,c
 10881  002888  0F77               	addlw	119
 10882  00288A  EC4F  F01E         	call	_vscp_getManufacturerId
 10883  00288E  D046               	goto	L39
 10884  002890                     l9609:
 10885                           
 10886                           ; BSR set to: 0
 10887                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 10888  002890  501C               	movf	vscp_readStdReg@reg,w,c
 10889  002892  0A91               	xorlw	145
 10890  002894  E103               	bnz	l9613
 10891                           
 10892                           ; BSR set to: 0
 10893                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 10894  002896  C090  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
 10895                           
 10896                           ;vscp_firmware.c: 639: }
 10897  00289A  D079               	goto	l9663
 10898  00289C                     l9613:
 10899                           
 10900                           ; BSR set to: 0
 10901                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 10902  00289C  501C               	movf	vscp_readStdReg@reg,w,c
 10903  00289E  0A93               	xorlw	147
 10904  0028A0  E103               	bnz	l9617
 10905                           
 10906                           ; BSR set to: 0
 10907                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 10908  0028A2  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
 10909                           
 10910                           ;vscp_firmware.c: 645: }
 10911  0028A6  D073               	goto	l9663
 10912  0028A8                     l9617:
 10913                           
 10914                           ; BSR set to: 0
 10915                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 10916  0028A8  501C               	movf	vscp_readStdReg@reg,w,c
 10917  0028AA  0A92               	xorlw	146
 10918  0028AC  E102               	bnz	l9621
 10919                           
 10920                           ; BSR set to: 0
 10921                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 10922  0028AE  5053               	movf	_vscp_page_select+1,w,c
 10923  0028B0  D035               	goto	L39
 10924  0028B2                     l9621:
 10925                           
 10926                           ; BSR set to: 0
 10927                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 10928  0028B2  501C               	movf	vscp_readStdReg@reg,w,c
 10929  0028B4  0A97               	xorlw	151
 10930  0028B6  E103               	bnz	l9625
 10931                           
 10932                           ; BSR set to: 0
 10933                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 10934  0028B8  ECB2  F01E         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 10935  0028BC  D02F               	goto	L39
 10936  0028BE                     l9625:
 10937                           
 10938                           ; BSR set to: 0
 10939                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 10940  0028BE  501C               	movf	vscp_readStdReg@reg,w,c
 10941  0028C0  0A98               	xorlw	152
 10942  0028C2  E103               	bnz	l9629
 10943                           
 10944                           ; BSR set to: 0
 10945                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 10946  0028C4  ECB1  F01E         	call	_vscp_getBufferSize	;wreg free
 10947  0028C8  D029               	goto	L39
 10948  0028CA                     l9629:
 10949                           
 10950                           ; BSR set to: 0
 10951                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 10952  0028CA  501C               	movf	vscp_readStdReg@reg,w,c
 10953  0028CC  0A99               	xorlw	153
 10954  0028CE  E103               	bnz	l9633
 10955                           
 10956                           ; BSR set to: 0
 10957                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 10958  0028D0  ECB0  F01E         	call	_vscp_getRegisterPagesUsed	;wreg free
 10959  0028D4  D023               	goto	L39
 10960  0028D6                     l9633:
 10961                           
 10962                           ; BSR set to: 0
 10963                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 10964                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 10965  0028D6  0E99               	movlw	153
 10966  0028D8  641C               	cpfsgt	vscp_readStdReg@reg,c
 10967  0028DA  D022               	goto	l9643
 10968                           
 10969                           ; BSR set to: 0
 10970  0028DC  0E9E               	movlw	158
 10971  0028DE  601C               	cpfslt	vscp_readStdReg@reg,c
 10972  0028E0  D01F               	goto	l9643
 10973                           
 10974                           ; BSR set to: 0
 10975                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 10976  0028E2  EC97  F01E         	call	_vscp_getFamilyCode	;wreg free
 10977  0028E6  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 10978  0028EA  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 10979  0028EE  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 10980  0028F2  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 10981                           
 10982                           ; BSR set to: 0
 10983                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 10984  0028F6  501C               	movf	vscp_readStdReg@reg,w,c
 10985  0028F8  0F66               	addlw	102
 10986  0028FA  6E19               	movwf	vscp_readStdReg@idx,c
 10987                           
 10988                           ; BSR set to: 0
 10989                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 10990  0028FC  5019               	movf	vscp_readStdReg@idx,w,c
 10991  0028FE  D849               	call	PL42	;call to abstracted procedure
 10992  002900  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 10993  002904  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 10994  002908  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 10995  00290C  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 10996  002910  2AE8               	incf	wreg,f,c
 10997  002912  D001               	goto	u11270
 10998  002914                     u11275:
 10999  002914  D848               	call	PL76	;call to abstracted procedure
 11000  002916                     u11270:
 11001  002916  2EE8               	decfsz	wreg,f,c
 11002  002918  D7FD               	goto	u11275
 11003  00291A  D024               	goto	L40
 11004  00291C                     L39:
 11005  00291C  6E1B               	movwf	vscp_readStdReg@rv,c
 11006                           
 11007                           ;vscp_firmware.c: 671: }
 11008  00291E  D037               	goto	l9663
 11009  002920                     l9643:
 11010                           
 11011                           ; BSR set to: 0
 11012                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 11013                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 11014  002920  0E9D               	movlw	157
 11015  002922  641C               	cpfsgt	vscp_readStdReg@reg,c
 11016  002924  D021               	goto	l9653
 11017                           
 11018                           ; BSR set to: 0
 11019  002926  0EA2               	movlw	162
 11020  002928  601C               	cpfslt	vscp_readStdReg@reg,c
 11021  00292A  D01E               	goto	l9653
 11022                           
 11023                           ; BSR set to: 0
 11024                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 11025  00292C  EC92  F01E         	call	_vscp_getFamilyType	;wreg free
 11026  002930  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1267+3
 11027  002934  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1267+2
 11028  002938  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1267+1
 11029  00293C  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1267
 11030                           
 11031                           ; BSR set to: 0
 11032                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 11033  002940  501C               	movf	vscp_readStdReg@reg,w,c
 11034  002942  0F62               	addlw	98
 11035  002944  6E1A               	movwf	vscp_readStdReg@idx_1268,c
 11036                           
 11037                           ; BSR set to: 0
 11038                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 11039  002946  501A               	movf	vscp_readStdReg@idx_1268,w,c
 11040  002948  D824               	call	PL42	;call to abstracted procedure
 11041  00294A  C015  F00D         	movff	vscp_readStdReg@code_1267,??_vscp_readStdReg+1
 11042  00294E  C016  F00E         	movff	vscp_readStdReg@code_1267+1,??_vscp_readStdReg+2
 11043  002952  C017  F00F         	movff	vscp_readStdReg@code_1267+2,??_vscp_readStdReg+3
 11044  002956  C018  F010         	movff	vscp_readStdReg@code_1267+3,??_vscp_readStdReg+4
 11045  00295A  2AE8               	incf	wreg,f,c
 11046  00295C  D001               	goto	u11300
 11047  00295E                     u11305:
 11048  00295E  D823               	call	PL76	;call to abstracted procedure
 11049  002960                     u11300:
 11050  002960  2EE8               	decfsz	wreg,f,c
 11051  002962  D7FD               	goto	u11305
 11052  002964                     L40:
 11053  002964  500D               	movf	??_vscp_readStdReg+1,w,c
 11054  002966  D7DA               	goto	L39
 11055  002968                     l9653:
 11056                           
 11057                           ; BSR set to: 0
 11058                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 11059                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 11060  002968  0ECF               	movlw	207
 11061  00296A  641C               	cpfsgt	vscp_readStdReg@reg,c
 11062  00296C  D008               	goto	l9659
 11063                           
 11064                           ; BSR set to: 0
 11065  00296E  0EE0               	movlw	224
 11066  002970  601C               	cpfslt	vscp_readStdReg@reg,c
 11067  002972  D005               	goto	l9659
 11068                           
 11069                           ; BSR set to: 0
 11070                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 11071  002974  501C               	movf	vscp_readStdReg@reg,w,c
 11072  002976  0F30               	addlw	48
 11073  002978  EC63  F01E         	call	_vscp_getGUID
 11074  00297C  D7CF               	goto	L39
 11075  00297E                     l9659:
 11076                           
 11077                           ; BSR set to: 0
 11078                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 11079  00297E  0EDF               	movlw	223
 11080  002980  641C               	cpfsgt	vscp_readStdReg@reg,c
 11081  002982  D005               	goto	l9663
 11082                           
 11083                           ; BSR set to: 0
 11084                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 11085  002984  501C               	movf	vscp_readStdReg@reg,w,c
 11086  002986  0F20               	addlw	32
 11087  002988  EC16  F01E         	call	_vscp_getMDF_URL
 11088  00298C  D7C7               	goto	L39
 11089  00298E                     l9663:
 11090                           
 11091                           ;vscp_firmware.c: 691: }
 11092                           ;vscp_firmware.c: 693: return rv;
 11093  00298E  501B               	movf	vscp_readStdReg@rv,w,c
 11094  002990  0012               	return	
 11095  002992                     __end_of_vscp_readStdReg:
 11096                           	opt stack 0
 11097  002992                     PL42:
 11098                           	opt stack 25
 11099  002992  0803               	sublw	3
 11100  002994  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
 11101  002996  90D8               	bcf	status,0,c
 11102  002998  360C               	rlcf	??_vscp_readStdReg,f,c
 11103  00299A  90D8               	bcf	status,0,c
 11104  00299C  360C               	rlcf	??_vscp_readStdReg,f,c
 11105  00299E  90D8               	bcf	status,0,c
 11106  0029A0  360C               	rlcf	??_vscp_readStdReg,f,c
 11107  0029A2  500C               	movf	??_vscp_readStdReg,w,c
 11108  0029A4  0012               	return	
 11109  0029A6                     __end_ofPL42:
 11110                           	opt stack 0
 11111  0029A6                     PL76:
 11112                           	opt stack 25
 11113  0029A6  90D8               	bcf	status,0,c
 11114  0029A8  3210               	rrcf	??_vscp_readStdReg+4,f,c
 11115  0029AA  320F               	rrcf	??_vscp_readStdReg+3,f,c
 11116  0029AC  320E               	rrcf	??_vscp_readStdReg+2,f,c
 11117  0029AE  320D               	rrcf	??_vscp_readStdReg+1,f,c
 11118  0029B0  0012               	return	
 11119  0029B2                     __end_ofPL76:
 11120                           	opt stack 0
 11121                           tblptru	equ	0xFF8
 11122                           tblptrh	equ	0xFF7
 11123                           tblptrl	equ	0xFF6
 11124                           tablat	equ	0xFF5
 11125                           prodh	equ	0xFF4
 11126                           prodl	equ	0xFF3
 11127                           intcon	equ	0xFF2
 11128                           postinc0	equ	0xFEE
 11129                           wreg	equ	0xFE8
 11130                           indf1	equ	0xFE7
 11131                           fsr1h	equ	0xFE2
 11132                           fsr1l	equ	0xFE1
 11133                           indf2	equ	0xFDF
 11134                           postinc2	equ	0xFDE
 11135                           postdec2	equ	0xFDD
 11136                           plusw2	equ	0xFDB
 11137                           fsr2h	equ	0xFDA
 11138                           fsr2l	equ	0xFD9
 11139                           status	equ	0xFD8
 11140                           
 11141 ;; *************** function _vscp_getRegisterPagesUsed *****************
 11142 ;; Defined at:
 11143 ;;		line 2571 in file "../main.c"
 11144 ;; Parameters:    Size  Location     Type
 11145 ;;		None
 11146 ;; Auto vars:     Size  Location     Type
 11147 ;;		None
 11148 ;; Return value:  Size  Location     Type
 11149 ;;                  1    wreg      unsigned char 
 11150 ;; Registers used:
 11151 ;;		wreg
 11152 ;; Tracked objects:
 11153 ;;		On entry : F/0
 11154 ;;		On exit  : F/0
 11155 ;;		Unchanged: F/0
 11156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11157 ;;      Params:         0       0       0       0       0       0       0
 11158 ;;      Locals:         0       0       0       0       0       0       0
 11159 ;;      Temps:          0       0       0       0       0       0       0
 11160 ;;      Totals:         0       0       0       0       0       0       0
 11161 ;;Total ram usage:        0 bytes
 11162 ;; Hardware stack levels used:    1
 11163 ;; Hardware stack levels required when called:    2
 11164 ;; This function calls:
 11165 ;;		Nothing
 11166 ;; This function is called by:
 11167 ;;		_vscp_readStdReg
 11168 ;; This function uses a non-reentrant model
 11169 ;;
 11170                           
 11171                           	psect	text29
 11172  003D60                     __ptext29:
 11173                           	opt stack 0
 11174  003D60                     _vscp_getRegisterPagesUsed:
 11175                           	opt stack 26
 11176                           
 11177                           ; BSR set to: 0
 11178                           
 11179                           ; BSR set to: 0
 11180                           ;main.c: 2572: return 1;
 11181                           
 11182                           ;incstack = 0
 11183                           ;incstack = 0
 11184  003D60  0C01               	retlw	1
 11185  003D62                     __end_of_vscp_getRegisterPagesUsed:
 11186                           	opt stack 0
 11187                           tblptru	equ	0xFF8
 11188                           tblptrh	equ	0xFF7
 11189                           tblptrl	equ	0xFF6
 11190                           tablat	equ	0xFF5
 11191                           prodh	equ	0xFF4
 11192                           prodl	equ	0xFF3
 11193                           intcon	equ	0xFF2
 11194                           postinc0	equ	0xFEE
 11195                           wreg	equ	0xFE8
 11196                           indf1	equ	0xFE7
 11197                           fsr1h	equ	0xFE2
 11198                           fsr1l	equ	0xFE1
 11199                           indf2	equ	0xFDF
 11200                           postinc2	equ	0xFDE
 11201                           postdec2	equ	0xFDD
 11202                           plusw2	equ	0xFDB
 11203                           fsr2h	equ	0xFDA
 11204                           fsr2l	equ	0xFD9
 11205                           status	equ	0xFD8
 11206                           
 11207 ;; *************** function _vscp_getFamilyType *****************
 11208 ;; Defined at:
 11209 ;;		line 2552 in file "../main.c"
 11210 ;; Parameters:    Size  Location     Type
 11211 ;;		None
 11212 ;; Auto vars:     Size  Location     Type
 11213 ;;		None
 11214 ;; Return value:  Size  Location     Type
 11215 ;;                  4    7[COMRAM] unsigned long 
 11216 ;; Registers used:
 11217 ;;		None
 11218 ;; Tracked objects:
 11219 ;;		On entry : F/0
 11220 ;;		On exit  : F/0
 11221 ;;		Unchanged: F/0
 11222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11223 ;;      Params:         4       0       0       0       0       0       0
 11224 ;;      Locals:         0       0       0       0       0       0       0
 11225 ;;      Temps:          0       0       0       0       0       0       0
 11226 ;;      Totals:         4       0       0       0       0       0       0
 11227 ;;Total ram usage:        4 bytes
 11228 ;; Hardware stack levels used:    1
 11229 ;; Hardware stack levels required when called:    2
 11230 ;; This function calls:
 11231 ;;		Nothing
 11232 ;; This function is called by:
 11233 ;;		_vscp_readStdReg
 11234 ;; This function uses a non-reentrant model
 11235 ;;
 11236                           
 11237                           	psect	text30
 11238  003D24                     __ptext30:
 11239                           	opt stack 0
 11240  003D24                     _vscp_getFamilyType:
 11241                           	opt stack 26
 11242                           
 11243                           ; BSR set to: 0
 11244                           ;main.c: 2553: return 0;
 11245                           
 11246                           ; BSR set to: 0
 11247                           ;incstack = 0
 11248                           ;incstack = 0
 11249  003D24  6A08               	clrf	?_vscp_getFamilyType,c
 11250  003D26  6A09               	clrf	?_vscp_getFamilyType+1,c
 11251  003D28  6A0A               	clrf	?_vscp_getFamilyType+2,c
 11252  003D2A  6A0B               	clrf	?_vscp_getFamilyType+3,c
 11253                           
 11254                           ; BSR set to: 0
 11255  003D2C  0012               	return	
 11256  003D2E                     __end_of_vscp_getFamilyType:
 11257                           	opt stack 0
 11258                           tblptru	equ	0xFF8
 11259                           tblptrh	equ	0xFF7
 11260                           tblptrl	equ	0xFF6
 11261                           tablat	equ	0xFF5
 11262                           prodh	equ	0xFF4
 11263                           prodl	equ	0xFF3
 11264                           intcon	equ	0xFF2
 11265                           postinc0	equ	0xFEE
 11266                           wreg	equ	0xFE8
 11267                           indf1	equ	0xFE7
 11268                           fsr1h	equ	0xFE2
 11269                           fsr1l	equ	0xFE1
 11270                           indf2	equ	0xFDF
 11271                           postinc2	equ	0xFDE
 11272                           postdec2	equ	0xFDD
 11273                           plusw2	equ	0xFDB
 11274                           fsr2h	equ	0xFDA
 11275                           fsr2l	equ	0xFD9
 11276                           status	equ	0xFD8
 11277                           
 11278 ;; *************** function _vscp_getFamilyCode *****************
 11279 ;; Defined at:
 11280 ;;		line 2543 in file "../main.c"
 11281 ;; Parameters:    Size  Location     Type
 11282 ;;		None
 11283 ;; Auto vars:     Size  Location     Type
 11284 ;;		None
 11285 ;; Return value:  Size  Location     Type
 11286 ;;                  4    7[COMRAM] unsigned long 
 11287 ;; Registers used:
 11288 ;;		None
 11289 ;; Tracked objects:
 11290 ;;		On entry : F/0
 11291 ;;		On exit  : F/0
 11292 ;;		Unchanged: F/0
 11293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11294 ;;      Params:         4       0       0       0       0       0       0
 11295 ;;      Locals:         0       0       0       0       0       0       0
 11296 ;;      Temps:          0       0       0       0       0       0       0
 11297 ;;      Totals:         4       0       0       0       0       0       0
 11298 ;;Total ram usage:        4 bytes
 11299 ;; Hardware stack levels used:    1
 11300 ;; Hardware stack levels required when called:    2
 11301 ;; This function calls:
 11302 ;;		Nothing
 11303 ;; This function is called by:
 11304 ;;		_vscp_readStdReg
 11305 ;; This function uses a non-reentrant model
 11306 ;;
 11307                           
 11308                           	psect	text31
 11309  003D2E                     __ptext31:
 11310                           	opt stack 0
 11311  003D2E                     _vscp_getFamilyCode:
 11312                           	opt stack 26
 11313                           
 11314                           ; BSR set to: 0
 11315                           ;main.c: 2544: return 0L;
 11316                           
 11317                           ; BSR set to: 0
 11318                           ;incstack = 0
 11319                           ;incstack = 0
 11320  003D2E  6A08               	clrf	?_vscp_getFamilyCode,c
 11321  003D30  6A09               	clrf	?_vscp_getFamilyCode+1,c
 11322  003D32  6A0A               	clrf	?_vscp_getFamilyCode+2,c
 11323  003D34  6A0B               	clrf	?_vscp_getFamilyCode+3,c
 11324                           
 11325                           ; BSR set to: 0
 11326  003D36  0012               	return	
 11327  003D38                     __end_of_vscp_getFamilyCode:
 11328                           	opt stack 0
 11329                           tblptru	equ	0xFF8
 11330                           tblptrh	equ	0xFF7
 11331                           tblptrl	equ	0xFF6
 11332                           tablat	equ	0xFF5
 11333                           prodh	equ	0xFF4
 11334                           prodl	equ	0xFF3
 11335                           intcon	equ	0xFF2
 11336                           postinc0	equ	0xFEE
 11337                           wreg	equ	0xFE8
 11338                           indf1	equ	0xFE7
 11339                           fsr1h	equ	0xFE2
 11340                           fsr1l	equ	0xFE1
 11341                           indf2	equ	0xFDF
 11342                           postinc2	equ	0xFDE
 11343                           postdec2	equ	0xFDD
 11344                           plusw2	equ	0xFDB
 11345                           fsr2h	equ	0xFDA
 11346                           fsr2l	equ	0xFD9
 11347                           status	equ	0xFD8
 11348                           
 11349 ;; *************** function _vscp_getBufferSize *****************
 11350 ;; Defined at:
 11351 ;;		line 2404 in file "../main.c"
 11352 ;; Parameters:    Size  Location     Type
 11353 ;;		None
 11354 ;; Auto vars:     Size  Location     Type
 11355 ;;		None
 11356 ;; Return value:  Size  Location     Type
 11357 ;;                  1    wreg      unsigned char 
 11358 ;; Registers used:
 11359 ;;		wreg
 11360 ;; Tracked objects:
 11361 ;;		On entry : F/0
 11362 ;;		On exit  : F/0
 11363 ;;		Unchanged: F/0
 11364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11365 ;;      Params:         0       0       0       0       0       0       0
 11366 ;;      Locals:         0       0       0       0       0       0       0
 11367 ;;      Temps:          0       0       0       0       0       0       0
 11368 ;;      Totals:         0       0       0       0       0       0       0
 11369 ;;Total ram usage:        0 bytes
 11370 ;; Hardware stack levels used:    1
 11371 ;; Hardware stack levels required when called:    2
 11372 ;; This function calls:
 11373 ;;		Nothing
 11374 ;; This function is called by:
 11375 ;;		_vscp_readStdReg
 11376 ;; This function uses a non-reentrant model
 11377 ;;
 11378                           
 11379                           	psect	text32
 11380  003D62                     __ptext32:
 11381                           	opt stack 0
 11382  003D62                     _vscp_getBufferSize:
 11383                           	opt stack 26
 11384                           
 11385                           ; BSR set to: 0
 11386                           
 11387                           ; BSR set to: 0
 11388                           ;main.c: 2405: return 8;
 11389                           
 11390                           ; BSR set to: 0
 11391                           ;incstack = 0
 11392                           ;incstack = 0
 11393  003D62  0C08               	retlw	8
 11394  003D64                     __end_of_vscp_getBufferSize:
 11395                           	opt stack 0
 11396                           tblptru	equ	0xFF8
 11397                           tblptrh	equ	0xFF7
 11398                           tblptrl	equ	0xFF6
 11399                           tablat	equ	0xFF5
 11400                           prodh	equ	0xFF4
 11401                           prodl	equ	0xFF3
 11402                           intcon	equ	0xFF2
 11403                           postinc0	equ	0xFEE
 11404                           wreg	equ	0xFE8
 11405                           indf1	equ	0xFE7
 11406                           fsr1h	equ	0xFE2
 11407                           fsr1l	equ	0xFE1
 11408                           indf2	equ	0xFDF
 11409                           postinc2	equ	0xFDE
 11410                           postdec2	equ	0xFDD
 11411                           plusw2	equ	0xFDB
 11412                           fsr2h	equ	0xFDA
 11413                           fsr2l	equ	0xFD9
 11414                           status	equ	0xFD8
 11415                           
 11416 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 11417 ;; Defined at:
 11418 ;;		line 2395 in file "../main.c"
 11419 ;; Parameters:    Size  Location     Type
 11420 ;;		None
 11421 ;; Auto vars:     Size  Location     Type
 11422 ;;		None
 11423 ;; Return value:  Size  Location     Type
 11424 ;;                  1    wreg      unsigned char 
 11425 ;; Registers used:
 11426 ;;		wreg
 11427 ;; Tracked objects:
 11428 ;;		On entry : F/0
 11429 ;;		On exit  : F/0
 11430 ;;		Unchanged: F/0
 11431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11432 ;;      Params:         0       0       0       0       0       0       0
 11433 ;;      Locals:         0       0       0       0       0       0       0
 11434 ;;      Temps:          0       0       0       0       0       0       0
 11435 ;;      Totals:         0       0       0       0       0       0       0
 11436 ;;Total ram usage:        0 bytes
 11437 ;; Hardware stack levels used:    1
 11438 ;; Hardware stack levels required when called:    2
 11439 ;; This function calls:
 11440 ;;		Nothing
 11441 ;; This function is called by:
 11442 ;;		_vscp_readStdReg
 11443 ;; This function uses a non-reentrant model
 11444 ;;
 11445                           
 11446                           	psect	text33
 11447  003D64                     __ptext33:
 11448                           	opt stack 0
 11449  003D64                     _vscp_getBootLoaderAlgorithm:
 11450                           	opt stack 26
 11451                           
 11452                           ; BSR set to: 0
 11453                           
 11454                           ; BSR set to: 0
 11455                           ;main.c: 2396: return 0x01;
 11456                           
 11457                           ; BSR set to: 0
 11458                           ;incstack = 0
 11459                           ;incstack = 0
 11460  003D64  0C01               	retlw	1
 11461  003D66                     __end_of_vscp_getBootLoaderAlgorithm:
 11462                           	opt stack 0
 11463                           tblptru	equ	0xFF8
 11464                           tblptrh	equ	0xFF7
 11465                           tblptrl	equ	0xFF6
 11466                           tablat	equ	0xFF5
 11467                           prodh	equ	0xFF4
 11468                           prodl	equ	0xFF3
 11469                           intcon	equ	0xFF2
 11470                           postinc0	equ	0xFEE
 11471                           wreg	equ	0xFE8
 11472                           indf1	equ	0xFE7
 11473                           fsr1h	equ	0xFE2
 11474                           fsr1l	equ	0xFE1
 11475                           indf2	equ	0xFDF
 11476                           postinc2	equ	0xFDE
 11477                           postdec2	equ	0xFDD
 11478                           plusw2	equ	0xFDB
 11479                           fsr2h	equ	0xFDA
 11480                           fsr2l	equ	0xFD9
 11481                           status	equ	0xFD8
 11482                           
 11483 ;; *************** function _vscp_getManufacturerId *****************
 11484 ;; Defined at:
 11485 ;;		line 2386 in file "../main.c"
 11486 ;; Parameters:    Size  Location     Type
 11487 ;;  idx             1    wreg     unsigned char 
 11488 ;; Auto vars:     Size  Location     Type
 11489 ;;  idx             1    9[COMRAM] unsigned char 
 11490 ;; Return value:  Size  Location     Type
 11491 ;;                  1    wreg      unsigned char 
 11492 ;; Registers used:
 11493 ;;		wreg, status,2, status,0, cstack
 11494 ;; Tracked objects:
 11495 ;;		On entry : 0/0
 11496 ;;		On exit  : 0/0
 11497 ;;		Unchanged: 0/0
 11498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11499 ;;      Params:         0       0       0       0       0       0       0
 11500 ;;      Locals:         1       0       0       0       0       0       0
 11501 ;;      Temps:          0       0       0       0       0       0       0
 11502 ;;      Totals:         1       0       0       0       0       0       0
 11503 ;;Total ram usage:        1 bytes
 11504 ;; Hardware stack levels used:    1
 11505 ;; Hardware stack levels required when called:    3
 11506 ;; This function calls:
 11507 ;;		_Read_b_eep
 11508 ;; This function is called by:
 11509 ;;		_vscp_readStdReg
 11510 ;;		_vscp_writeStdReg
 11511 ;; This function uses a non-reentrant model
 11512 ;;
 11513                           
 11514                           	psect	text34
 11515  003C9E                     __ptext34:
 11516                           	opt stack 0
 11517  003C9E                     _vscp_getManufacturerId:
 11518                           	opt stack 25
 11519                           
 11520                           ; BSR set to: 0
 11521                           ;incstack = 0
 11522                           ;incstack = 0
 11523                           ;vscp_getManufacturerId@idx stored from wreg
 11524  003C9E  CFE8 F00A          	movff	wreg,vscp_getManufacturerId@idx
 11525                           
 11526                           ;main.c: 2387: return Read_b_eep(0x0B + idx);
 11527  003CA2  0E0B               	movlw	11
 11528  003CA4  240A               	addwf	vscp_getManufacturerId@idx,w,c
 11529  003CA6  6E08               	movwf	?_Read_b_eep,c
 11530  003CA8  6A09               	clrf	?_Read_b_eep+1,c
 11531  003CAA  0E00               	movlw	0
 11532  003CAC  2209               	addwfc	?_Read_b_eep+1,f,c
 11533  003CAE  EF76  F01E         	goto	_Read_b_eep	;wreg free
 11534  003CB2                     __end_of_vscp_getManufacturerId:
 11535                           	opt stack 0
 11536                           tblptru	equ	0xFF8
 11537                           tblptrh	equ	0xFF7
 11538                           tblptrl	equ	0xFF6
 11539                           tablat	equ	0xFF5
 11540                           prodh	equ	0xFF4
 11541                           prodl	equ	0xFF3
 11542                           intcon	equ	0xFF2
 11543                           postinc0	equ	0xFEE
 11544                           wreg	equ	0xFE8
 11545                           indf1	equ	0xFE7
 11546                           fsr1h	equ	0xFE2
 11547                           fsr1l	equ	0xFE1
 11548                           indf2	equ	0xFDF
 11549                           postinc2	equ	0xFDE
 11550                           postdec2	equ	0xFDD
 11551                           plusw2	equ	0xFDB
 11552                           fsr2h	equ	0xFDA
 11553                           fsr2l	equ	0xFD9
 11554                           status	equ	0xFD8
 11555                           
 11556 ;; *************** function _vscp_getUserID *****************
 11557 ;; Defined at:
 11558 ;;		line 2366 in file "../main.c"
 11559 ;; Parameters:    Size  Location     Type
 11560 ;;  idx             1    wreg     unsigned char 
 11561 ;; Auto vars:     Size  Location     Type
 11562 ;;  idx             1    9[COMRAM] unsigned char 
 11563 ;; Return value:  Size  Location     Type
 11564 ;;                  1    wreg      unsigned char 
 11565 ;; Registers used:
 11566 ;;		wreg, status,2, status,0, cstack
 11567 ;; Tracked objects:
 11568 ;;		On entry : 0/0
 11569 ;;		On exit  : 0/0
 11570 ;;		Unchanged: 0/0
 11571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11572 ;;      Params:         0       0       0       0       0       0       0
 11573 ;;      Locals:         1       0       0       0       0       0       0
 11574 ;;      Temps:          0       0       0       0       0       0       0
 11575 ;;      Totals:         1       0       0       0       0       0       0
 11576 ;;Total ram usage:        1 bytes
 11577 ;; Hardware stack levels used:    1
 11578 ;; Hardware stack levels required when called:    3
 11579 ;; This function calls:
 11580 ;;		_Read_b_eep
 11581 ;; This function is called by:
 11582 ;;		_vscp_readStdReg
 11583 ;;		_vscp_writeStdReg
 11584 ;; This function uses a non-reentrant model
 11585 ;;
 11586                           
 11587                           	psect	text35
 11588  003CB2                     __ptext35:
 11589                           	opt stack 0
 11590  003CB2                     _vscp_getUserID:
 11591                           	opt stack 25
 11592                           
 11593                           ;incstack = 0
 11594                           ;incstack = 0
 11595                           ;vscp_getUserID@idx stored from wreg
 11596  003CB2  CFE8 F00A          	movff	wreg,vscp_getUserID@idx
 11597                           
 11598                           ;main.c: 2367: return Read_b_eep(0x06 + idx);
 11599  003CB6  0E06               	movlw	6
 11600  003CB8  240A               	addwf	vscp_getUserID@idx,w,c
 11601  003CBA  6E08               	movwf	?_Read_b_eep,c
 11602  003CBC  6A09               	clrf	?_Read_b_eep+1,c
 11603  003CBE  0E00               	movlw	0
 11604  003CC0  2209               	addwfc	?_Read_b_eep+1,f,c
 11605  003CC2  EF76  F01E         	goto	_Read_b_eep	;wreg free
 11606  003CC6                     __end_of_vscp_getUserID:
 11607                           	opt stack 0
 11608                           tblptru	equ	0xFF8
 11609                           tblptrh	equ	0xFF7
 11610                           tblptrl	equ	0xFF6
 11611                           tablat	equ	0xFF5
 11612                           prodh	equ	0xFF4
 11613                           prodl	equ	0xFF3
 11614                           intcon	equ	0xFF2
 11615                           postinc0	equ	0xFEE
 11616                           wreg	equ	0xFE8
 11617                           indf1	equ	0xFE7
 11618                           fsr1h	equ	0xFE2
 11619                           fsr1l	equ	0xFE1
 11620                           indf2	equ	0xFDF
 11621                           postinc2	equ	0xFDE
 11622                           postdec2	equ	0xFDD
 11623                           plusw2	equ	0xFDB
 11624                           fsr2h	equ	0xFDA
 11625                           fsr2l	equ	0xFD9
 11626                           status	equ	0xFD8
 11627                           
 11628 ;; *************** function _vscp_getMDF_URL *****************
 11629 ;; Defined at:
 11630 ;;		line 2357 in file "../main.c"
 11631 ;; Parameters:    Size  Location     Type
 11632 ;;  idx             1    wreg     unsigned char 
 11633 ;; Auto vars:     Size  Location     Type
 11634 ;;  idx             1    8[COMRAM] unsigned char 
 11635 ;; Return value:  Size  Location     Type
 11636 ;;                  1    wreg      unsigned char 
 11637 ;; Registers used:
 11638 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11639 ;; Tracked objects:
 11640 ;;		On entry : F/0
 11641 ;;		On exit  : F/0
 11642 ;;		Unchanged: F/0
 11643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11644 ;;      Params:         0       0       0       0       0       0       0
 11645 ;;      Locals:         1       0       0       0       0       0       0
 11646 ;;      Temps:          1       0       0       0       0       0       0
 11647 ;;      Totals:         2       0       0       0       0       0       0
 11648 ;;Total ram usage:        2 bytes
 11649 ;; Hardware stack levels used:    1
 11650 ;; Hardware stack levels required when called:    2
 11651 ;; This function calls:
 11652 ;;		Nothing
 11653 ;; This function is called by:
 11654 ;;		_vscp_readStdReg
 11655 ;;		_vscp_handleProtocolEvent
 11656 ;; This function uses a non-reentrant model
 11657 ;;
 11658                           
 11659                           	psect	text36
 11660  003C2C                     __ptext36:
 11661                           	opt stack 0
 11662  003C2C                     _vscp_getMDF_URL:
 11663                           	opt stack 26
 11664                           
 11665                           ;incstack = 0
 11666                           ;incstack = 0
 11667                           ;vscp_getMDF_URL@idx stored from wreg
 11668  003C2C  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
 11669                           
 11670                           ; BSR set to: 0
 11671                           ;main.c: 2358: return vscp_deviceURL[ idx ];
 11672  003C30  5009               	movf	vscp_getMDF_URL@idx,w,c
 11673  003C32  0F00               	addlw	low _vscp_deviceURL
 11674  003C34  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
 11675  003C36  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 11676  003C3A  0E06               	movlw	high __smallconst
 11677  003C3C  6EF7               	movwf	tblptrh,c
 11678  003C3E  0008               	tblrd		*
 11679  003C40  50F5               	movf	tablat,w,c
 11680                           
 11681                           ; BSR set to: 0
 11682  003C42  0012               	return	
 11683  003C44                     __end_of_vscp_getMDF_URL:
 11684                           	opt stack 0
 11685                           tblptru	equ	0xFF8
 11686                           tblptrh	equ	0xFF7
 11687                           tblptrl	equ	0xFF6
 11688                           tablat	equ	0xFF5
 11689                           prodh	equ	0xFF4
 11690                           prodl	equ	0xFF3
 11691                           intcon	equ	0xFF2
 11692                           postinc0	equ	0xFEE
 11693                           wreg	equ	0xFE8
 11694                           indf1	equ	0xFE7
 11695                           fsr1h	equ	0xFE2
 11696                           fsr1l	equ	0xFE1
 11697                           indf2	equ	0xFDF
 11698                           postinc2	equ	0xFDE
 11699                           postdec2	equ	0xFDD
 11700                           plusw2	equ	0xFDB
 11701                           fsr2h	equ	0xFDA
 11702                           fsr2l	equ	0xFD9
 11703                           status	equ	0xFD8
 11704                           
 11705 ;; *************** function _vscp_getGUID *****************
 11706 ;; Defined at:
 11707 ;;		line 2345 in file "../main.c"
 11708 ;; Parameters:    Size  Location     Type
 11709 ;;  idx             1    wreg     unsigned char 
 11710 ;; Auto vars:     Size  Location     Type
 11711 ;;  idx             1    9[COMRAM] unsigned char 
 11712 ;; Return value:  Size  Location     Type
 11713 ;;                  1    wreg      unsigned char 
 11714 ;; Registers used:
 11715 ;;		wreg, status,2, status,0, cstack
 11716 ;; Tracked objects:
 11717 ;;		On entry : 0/0
 11718 ;;		On exit  : 0/0
 11719 ;;		Unchanged: 0/0
 11720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11721 ;;      Params:         0       0       0       0       0       0       0
 11722 ;;      Locals:         1       0       0       0       0       0       0
 11723 ;;      Temps:          0       0       0       0       0       0       0
 11724 ;;      Totals:         1       0       0       0       0       0       0
 11725 ;;Total ram usage:        1 bytes
 11726 ;; Hardware stack levels used:    1
 11727 ;; Hardware stack levels required when called:    3
 11728 ;; This function calls:
 11729 ;;		_Read_b_eep
 11730 ;; This function is called by:
 11731 ;;		_vscp_readStdReg
 11732 ;;		_vscp_writeStdReg
 11733 ;;		_vscp_handleProtocolEvent
 11734 ;; This function uses a non-reentrant model
 11735 ;;
 11736                           
 11737                           	psect	text37
 11738  003CC6                     __ptext37:
 11739                           	opt stack 0
 11740  003CC6                     _vscp_getGUID:
 11741                           	opt stack 25
 11742                           
 11743                           ; BSR set to: 0
 11744                           ;incstack = 0
 11745                           ;incstack = 0
 11746                           ;vscp_getGUID@idx stored from wreg
 11747  003CC6  CFE8 F00A          	movff	wreg,vscp_getGUID@idx
 11748                           
 11749                           ;main.c: 2346: return Read_b_eep(0x13 + idx);
 11750  003CCA  0E13               	movlw	19
 11751  003CCC  240A               	addwf	vscp_getGUID@idx,w,c
 11752  003CCE  6E08               	movwf	?_Read_b_eep,c
 11753  003CD0  6A09               	clrf	?_Read_b_eep+1,c
 11754  003CD2  0E00               	movlw	0
 11755  003CD4  2209               	addwfc	?_Read_b_eep+1,f,c
 11756  003CD6  EF76  F01E         	goto	_Read_b_eep	;wreg free
 11757  003CDA                     __end_of_vscp_getGUID:
 11758                           	opt stack 0
 11759                           tblptru	equ	0xFF8
 11760                           tblptrh	equ	0xFF7
 11761                           tblptrl	equ	0xFF6
 11762                           tablat	equ	0xFF5
 11763                           prodh	equ	0xFF4
 11764                           prodl	equ	0xFF3
 11765                           intcon	equ	0xFF2
 11766                           postinc0	equ	0xFEE
 11767                           wreg	equ	0xFE8
 11768                           indf1	equ	0xFE7
 11769                           fsr1h	equ	0xFE2
 11770                           fsr1l	equ	0xFE1
 11771                           indf2	equ	0xFDF
 11772                           postinc2	equ	0xFDE
 11773                           postdec2	equ	0xFDD
 11774                           plusw2	equ	0xFDB
 11775                           fsr2h	equ	0xFDA
 11776                           fsr2l	equ	0xFD9
 11777                           status	equ	0xFD8
 11778                           
 11779 ;; *************** function _vscp_getSubMinorVersion *****************
 11780 ;; Defined at:
 11781 ;;		line 2334 in file "../main.c"
 11782 ;; Parameters:    Size  Location     Type
 11783 ;;		None
 11784 ;; Auto vars:     Size  Location     Type
 11785 ;;		None
 11786 ;; Return value:  Size  Location     Type
 11787 ;;                  1    wreg      unsigned char 
 11788 ;; Registers used:
 11789 ;;		wreg
 11790 ;; Tracked objects:
 11791 ;;		On entry : F/0
 11792 ;;		On exit  : F/0
 11793 ;;		Unchanged: F/0
 11794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11795 ;;      Params:         0       0       0       0       0       0       0
 11796 ;;      Locals:         0       0       0       0       0       0       0
 11797 ;;      Temps:          0       0       0       0       0       0       0
 11798 ;;      Totals:         0       0       0       0       0       0       0
 11799 ;;Total ram usage:        0 bytes
 11800 ;; Hardware stack levels used:    1
 11801 ;; Hardware stack levels required when called:    2
 11802 ;; This function calls:
 11803 ;;		Nothing
 11804 ;; This function is called by:
 11805 ;;		_vscp_readStdReg
 11806 ;; This function uses a non-reentrant model
 11807 ;;
 11808                           
 11809                           	psect	text38
 11810  003D66                     __ptext38:
 11811                           	opt stack 0
 11812  003D66                     _vscp_getSubMinorVersion:
 11813                           	opt stack 26
 11814                           
 11815                           ; BSR set to: 0
 11816                           
 11817                           ; BSR set to: 0
 11818                           ;main.c: 2335: return 0;
 11819                           
 11820                           ;incstack = 0
 11821                           ;incstack = 0
 11822  003D66  0C00               	retlw	0
 11823  003D68                     __end_of_vscp_getSubMinorVersion:
 11824                           	opt stack 0
 11825                           tblptru	equ	0xFF8
 11826                           tblptrh	equ	0xFF7
 11827                           tblptrl	equ	0xFF6
 11828                           tablat	equ	0xFF5
 11829                           prodh	equ	0xFF4
 11830                           prodl	equ	0xFF3
 11831                           intcon	equ	0xFF2
 11832                           postinc0	equ	0xFEE
 11833                           wreg	equ	0xFE8
 11834                           indf1	equ	0xFE7
 11835                           fsr1h	equ	0xFE2
 11836                           fsr1l	equ	0xFE1
 11837                           indf2	equ	0xFDF
 11838                           postinc2	equ	0xFDE
 11839                           postdec2	equ	0xFDD
 11840                           plusw2	equ	0xFDB
 11841                           fsr2h	equ	0xFDA
 11842                           fsr2l	equ	0xFD9
 11843                           status	equ	0xFD8
 11844                           
 11845 ;; *************** function _vscp_getMinorVersion *****************
 11846 ;; Defined at:
 11847 ;;		line 2325 in file "../main.c"
 11848 ;; Parameters:    Size  Location     Type
 11849 ;;		None
 11850 ;; Auto vars:     Size  Location     Type
 11851 ;;		None
 11852 ;; Return value:  Size  Location     Type
 11853 ;;                  1    wreg      unsigned char 
 11854 ;; Registers used:
 11855 ;;		wreg
 11856 ;; Tracked objects:
 11857 ;;		On entry : F/0
 11858 ;;		On exit  : F/0
 11859 ;;		Unchanged: F/0
 11860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11861 ;;      Params:         0       0       0       0       0       0       0
 11862 ;;      Locals:         0       0       0       0       0       0       0
 11863 ;;      Temps:          0       0       0       0       0       0       0
 11864 ;;      Totals:         0       0       0       0       0       0       0
 11865 ;;Total ram usage:        0 bytes
 11866 ;; Hardware stack levels used:    1
 11867 ;; Hardware stack levels required when called:    2
 11868 ;; This function calls:
 11869 ;;		Nothing
 11870 ;; This function is called by:
 11871 ;;		_vscp_readStdReg
 11872 ;; This function uses a non-reentrant model
 11873 ;;
 11874                           
 11875                           	psect	text39
 11876  003D68                     __ptext39:
 11877                           	opt stack 0
 11878  003D68                     _vscp_getMinorVersion:
 11879                           	opt stack 26
 11880                           
 11881                           ; BSR set to: 0
 11882                           
 11883                           ; BSR set to: 0
 11884                           ;main.c: 2326: return 2;
 11885                           
 11886                           ; BSR set to: 0
 11887                           ;incstack = 0
 11888                           ;incstack = 0
 11889  003D68  0C02               	retlw	2
 11890  003D6A                     __end_of_vscp_getMinorVersion:
 11891                           	opt stack 0
 11892                           tblptru	equ	0xFF8
 11893                           tblptrh	equ	0xFF7
 11894                           tblptrl	equ	0xFF6
 11895                           tablat	equ	0xFF5
 11896                           prodh	equ	0xFF4
 11897                           prodl	equ	0xFF3
 11898                           intcon	equ	0xFF2
 11899                           postinc0	equ	0xFEE
 11900                           wreg	equ	0xFE8
 11901                           indf1	equ	0xFE7
 11902                           fsr1h	equ	0xFE2
 11903                           fsr1l	equ	0xFE1
 11904                           indf2	equ	0xFDF
 11905                           postinc2	equ	0xFDE
 11906                           postdec2	equ	0xFDD
 11907                           plusw2	equ	0xFDB
 11908                           fsr2h	equ	0xFDA
 11909                           fsr2l	equ	0xFD9
 11910                           status	equ	0xFD8
 11911                           
 11912 ;; *************** function _vscp_getMajorVersion *****************
 11913 ;; Defined at:
 11914 ;;		line 2316 in file "../main.c"
 11915 ;; Parameters:    Size  Location     Type
 11916 ;;		None
 11917 ;; Auto vars:     Size  Location     Type
 11918 ;;		None
 11919 ;; Return value:  Size  Location     Type
 11920 ;;                  1    wreg      unsigned char 
 11921 ;; Registers used:
 11922 ;;		wreg
 11923 ;; Tracked objects:
 11924 ;;		On entry : F/0
 11925 ;;		On exit  : F/0
 11926 ;;		Unchanged: F/0
 11927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11928 ;;      Params:         0       0       0       0       0       0       0
 11929 ;;      Locals:         0       0       0       0       0       0       0
 11930 ;;      Temps:          0       0       0       0       0       0       0
 11931 ;;      Totals:         0       0       0       0       0       0       0
 11932 ;;Total ram usage:        0 bytes
 11933 ;; Hardware stack levels used:    1
 11934 ;; Hardware stack levels required when called:    2
 11935 ;; This function calls:
 11936 ;;		Nothing
 11937 ;; This function is called by:
 11938 ;;		_vscp_readStdReg
 11939 ;; This function uses a non-reentrant model
 11940 ;;
 11941                           
 11942                           	psect	text40
 11943  003D6A                     __ptext40:
 11944                           	opt stack 0
 11945  003D6A                     _vscp_getMajorVersion:
 11946                           	opt stack 26
 11947                           
 11948                           ; BSR set to: 0
 11949                           
 11950                           ; BSR set to: 0
 11951                           ;main.c: 2317: return 1;
 11952                           
 11953                           ; BSR set to: 0
 11954                           ;incstack = 0
 11955                           ;incstack = 0
 11956  003D6A  0C01               	retlw	1
 11957  003D6C                     __end_of_vscp_getMajorVersion:
 11958                           	opt stack 0
 11959                           tblptru	equ	0xFF8
 11960                           tblptrh	equ	0xFF7
 11961                           tblptrl	equ	0xFF6
 11962                           tablat	equ	0xFF5
 11963                           prodh	equ	0xFF4
 11964                           prodl	equ	0xFF3
 11965                           intcon	equ	0xFF2
 11966                           postinc0	equ	0xFEE
 11967                           wreg	equ	0xFE8
 11968                           indf1	equ	0xFE7
 11969                           fsr1h	equ	0xFE2
 11970                           fsr1l	equ	0xFE1
 11971                           indf2	equ	0xFDF
 11972                           postinc2	equ	0xFDE
 11973                           postdec2	equ	0xFDD
 11974                           plusw2	equ	0xFDB
 11975                           fsr2h	equ	0xFDA
 11976                           fsr2l	equ	0xFD9
 11977                           status	equ	0xFD8
 11978                           
 11979 ;; *************** function _vscp_newNodeOnline *****************
 11980 ;; Defined at:
 11981 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 11982 ;; Parameters:    Size  Location     Type
 11983 ;;		None
 11984 ;; Auto vars:     Size  Location     Type
 11985 ;;		None
 11986 ;; Return value:  Size  Location     Type
 11987 ;;		None               void
 11988 ;; Registers used:
 11989 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11990 ;; Tracked objects:
 11991 ;;		On entry : F/0
 11992 ;;		On exit  : F/0
 11993 ;;		Unchanged: 0/0
 11994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11995 ;;      Params:         0       0       0       0       0       0       0
 11996 ;;      Locals:         0       0       0       0       0       0       0
 11997 ;;      Temps:          1       0       0       0       0       0       0
 11998 ;;      Totals:         1       0       0       0       0       0       0
 11999 ;;Total ram usage:        1 bytes
 12000 ;; Hardware stack levels used:    1
 12001 ;; Hardware stack levels required when called:    7
 12002 ;; This function calls:
 12003 ;;		_vscp_sendEvent
 12004 ;; This function is called by:
 12005 ;;		_vscp_handleProtocolEvent
 12006 ;; This function uses a non-reentrant model
 12007 ;;
 12008                           
 12009                           	psect	text41
 12010  0039DE                     __ptext41:
 12011                           	opt stack 0
 12012  0039DE                     _vscp_newNodeOnline:
 12013                           	opt stack 22
 12014                           
 12015                           ; BSR set to: 0
 12016                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 12017                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12018                           
 12019                           ; BSR set to: 0
 12020                           ;incstack = 0
 12021                           ;incstack = 0
 12022  0039DE  C095  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
 12023  0039E2  0E0F               	movlw	15
 12024  0039E4  164C               	andwf	??_vscp_newNodeOnline,f,c
 12025  0039E6  044C               	decf	??_vscp_newNodeOnline,w,c
 12026  0039E8  E10E               	bnz	l1113
 12027                           
 12028                           ; BSR set to: 0
 12029  0039EA  5190               	movf	_vscp_nickname& (0+255),w,b
 12030  0039EC  EE20  F09B         	lfsr	2,_vscp_imsg+6
 12031  0039F0  62DF               	cpfseq	indf2,c
 12032  0039F2  D009               	goto	l1113
 12033                           
 12034                           ; BSR set to: 0
 12035                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 12036  0039F4  0E80               	movlw	128
 12037  0039F6  6FA3               	movwf	_vscp_omsg& (0+255),b
 12038                           
 12039                           ; BSR set to: 0
 12040                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 12041  0039F8  6BA4               	clrf	(_vscp_omsg+1)& (0+255),b
 12042                           
 12043                           ; BSR set to: 0
 12044                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 12045  0039FA  6BA5               	clrf	(_vscp_omsg+2)& (0+255),b
 12046  0039FC  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
 12047                           
 12048                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 12049  0039FE  0E03               	movlw	3
 12050  003A00  6FA7               	movwf	(_vscp_omsg+4)& (0+255),b
 12051                           
 12052                           ; BSR set to: 0
 12053                           ;vscp_firmware.c: 514: vscp_sendEvent();
 12054  003A02  EC66  F01D         	call	_vscp_sendEvent	;wreg free
 12055  003A06                     l1113:
 12056                           
 12057                           ; BSR set to: 0
 12058  003A06  0012               	return	
 12059  003A08                     __end_of_vscp_newNodeOnline:
 12060                           	opt stack 0
 12061                           tblptru	equ	0xFF8
 12062                           tblptrh	equ	0xFF7
 12063                           tblptrl	equ	0xFF6
 12064                           tablat	equ	0xFF5
 12065                           prodh	equ	0xFF4
 12066                           prodl	equ	0xFF3
 12067                           intcon	equ	0xFF2
 12068                           postinc0	equ	0xFEE
 12069                           wreg	equ	0xFE8
 12070                           indf1	equ	0xFE7
 12071                           fsr1h	equ	0xFE2
 12072                           fsr1l	equ	0xFE1
 12073                           indf2	equ	0xFDF
 12074                           postinc2	equ	0xFDE
 12075                           postdec2	equ	0xFDD
 12076                           plusw2	equ	0xFDB
 12077                           fsr2h	equ	0xFDA
 12078                           fsr2l	equ	0xFD9
 12079                           status	equ	0xFD8
 12080                           
 12081 ;; *************** function _vscp_handleDropNickname *****************
 12082 ;; Defined at:
 12083 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 12084 ;; Parameters:    Size  Location     Type
 12085 ;;		None
 12086 ;; Auto vars:     Size  Location     Type
 12087 ;;  bytes           1   12[COMRAM] unsigned char 
 12088 ;; Return value:  Size  Location     Type
 12089 ;;		None               void
 12090 ;; Registers used:
 12091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12092 ;; Tracked objects:
 12093 ;;		On entry : F/0
 12094 ;;		On exit  : F/0
 12095 ;;		Unchanged: 0/0
 12096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12097 ;;      Params:         0       0       0       0       0       0       0
 12098 ;;      Locals:         1       0       0       0       0       0       0
 12099 ;;      Temps:          0       0       0       0       0       0       0
 12100 ;;      Totals:         1       0       0       0       0       0       0
 12101 ;;Total ram usage:        1 bytes
 12102 ;; Hardware stack levels used:    1
 12103 ;; Hardware stack levels required when called:    5
 12104 ;; This function calls:
 12105 ;;		_vscp_init
 12106 ;;		_vscp_writeNicknamePermanent
 12107 ;; This function is called by:
 12108 ;;		_vscp_handleProtocolEvent
 12109 ;; This function uses a non-reentrant model
 12110 ;;
 12111                           
 12112                           	psect	text42
 12113  003954                     __ptext42:
 12114                           	opt stack 0
 12115  003954                     _vscp_handleDropNickname:
 12116                           	opt stack 24
 12117                           
 12118                           ; BSR set to: 0
 12119                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 12120                           
 12121                           ; BSR set to: 0
 12122                           ;incstack = 0
 12123                           ;incstack = 0
 12124  003954  5195               	movf	_vscp_imsg& (0+255),w,b
 12125  003956  0B0F               	andlw	15
 12126  003958  6E0D               	movwf	vscp_handleDropNickname@bytes,c
 12127                           
 12128                           ; BSR set to: 0
 12129                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12130  00395A  500D               	movf	vscp_handleDropNickname@bytes,w,c
 12131  00395C  E012               	bz	l1109
 12132                           
 12133                           ; BSR set to: 0
 12134  00395E  5190               	movf	_vscp_nickname& (0+255),w,b
 12135  003960  EE20  F09B         	lfsr	2,_vscp_imsg+6
 12136  003964  62DF               	cpfseq	indf2,c
 12137  003966  D00D               	goto	l1109
 12138                           
 12139                           ; BSR set to: 0
 12140                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 12141  003968  040D               	decf	vscp_handleDropNickname@bytes,w,c
 12142  00396A  E005               	bz	l1108
 12143                           
 12144                           ; BSR set to: 0
 12145  00396C  0E01               	movlw	1
 12146  00396E  640D               	cpfsgt	vscp_handleDropNickname@bytes,c
 12147  003970  D008               	goto	l1109
 12148                           
 12149                           ; BSR set to: 0
 12150  003972  679C               	tstfsz	(_vscp_imsg+7)& (0+255),b
 12151  003974  D006               	goto	l1109
 12152  003976                     l1108:
 12153                           
 12154                           ; BSR set to: 0
 12155                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 12156  003976  6990               	setf	_vscp_nickname& (0+255),b
 12157                           
 12158                           ; BSR set to: 0
 12159                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 12160  003978  0EFF               	movlw	255
 12161  00397A  EC44  F01E         	call	_vscp_writeNicknamePermanent
 12162                           
 12163                           ;vscp_firmware.c: 481: vscp_init();
 12164  00397E  EC30  F01C         	call	_vscp_init	;wreg free
 12165  003982                     l1109:
 12166                           
 12167                           ; BSR set to: 0
 12168  003982  0012               	return	
 12169  003984                     __end_of_vscp_handleDropNickname:
 12170                           	opt stack 0
 12171                           tblptru	equ	0xFF8
 12172                           tblptrh	equ	0xFF7
 12173                           tblptrl	equ	0xFF6
 12174                           tablat	equ	0xFF5
 12175                           prodh	equ	0xFF4
 12176                           prodl	equ	0xFF3
 12177                           intcon	equ	0xFF2
 12178                           postinc0	equ	0xFEE
 12179                           wreg	equ	0xFE8
 12180                           indf1	equ	0xFE7
 12181                           fsr1h	equ	0xFE2
 12182                           fsr1l	equ	0xFE1
 12183                           indf2	equ	0xFDF
 12184                           postinc2	equ	0xFDE
 12185                           postdec2	equ	0xFDD
 12186                           plusw2	equ	0xFDB
 12187                           fsr2h	equ	0xFDA
 12188                           fsr2l	equ	0xFD9
 12189                           status	equ	0xFD8
 12190                           
 12191 ;; *************** function _vscp_init *****************
 12192 ;; Defined at:
 12193 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 12194 ;; Parameters:    Size  Location     Type
 12195 ;;		None
 12196 ;; Auto vars:     Size  Location     Type
 12197 ;;		None
 12198 ;; Return value:  Size  Location     Type
 12199 ;;		None               void
 12200 ;; Registers used:
 12201 ;;		wreg, status,2, cstack
 12202 ;; Tracked objects:
 12203 ;;		On entry : 0/0
 12204 ;;		On exit  : F/0
 12205 ;;		Unchanged: 0/0
 12206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12207 ;;      Params:         0       0       0       0       0       0       0
 12208 ;;      Locals:         0       0       0       0       0       0       0
 12209 ;;      Temps:          0       0       0       0       0       0       0
 12210 ;;      Totals:         0       0       0       0       0       0       0
 12211 ;;Total ram usage:        0 bytes
 12212 ;; Hardware stack levels used:    1
 12213 ;; Hardware stack levels required when called:    4
 12214 ;; This function calls:
 12215 ;;		_vscp_readNicknamePermanent
 12216 ;; This function is called by:
 12217 ;;		_main
 12218 ;;		_vscp_handleDropNickname
 12219 ;;		_vscp_handleProtocolEvent
 12220 ;; This function uses a non-reentrant model
 12221 ;;
 12222                           
 12223                           	psect	text43
 12224  003860                     __ptext43:
 12225                           	opt stack 0
 12226  003860                     _vscp_init:
 12227                           	opt stack 24
 12228                           
 12229                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 12230                           
 12231                           ; BSR set to: 0
 12232                           ;incstack = 0
 12233                           ;incstack = 0
 12234  003860  0E02               	movlw	2
 12235  003862  6E56               	movwf	_vscp_initledfunc,c
 12236                           
 12237                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 12238  003864  EC9C  F01E         	call	_vscp_readNicknamePermanent	;wreg free
 12239  003868  0100               	movlb	0	; () banked
 12240  00386A  6F90               	movwf	_vscp_nickname& (0+255),b
 12241                           
 12242                           ; BSR set to: 0
 12243                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 12244  00386C  6790               	tstfsz	_vscp_nickname& (0+255),b
 12245  00386E  D001               	goto	l1050
 12246                           
 12247                           ; BSR set to: 0
 12248  003870  6990               	setf	_vscp_nickname& (0+255),b
 12249  003872                     l1050:
 12250                           
 12251                           ; BSR set to: 0
 12252                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 12253  003872  6B95               	clrf	_vscp_imsg& (0+255),b
 12254                           
 12255                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 12256  003874  6B96               	clrf	(_vscp_imsg+1)& (0+255),b
 12257                           
 12258                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 12259  003876  6B97               	clrf	(_vscp_imsg+2)& (0+255),b
 12260  003878  6B98               	clrf	(_vscp_imsg+3)& (0+255),b
 12261                           
 12262                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 12263  00387A  6B99               	clrf	(_vscp_imsg+4)& (0+255),b
 12264                           
 12265                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 12266  00387C  6BA3               	clrf	_vscp_omsg& (0+255),b
 12267                           
 12268                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 12269  00387E  6BA4               	clrf	(_vscp_omsg+1)& (0+255),b
 12270                           
 12271                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 12272  003880  6BA5               	clrf	(_vscp_omsg+2)& (0+255),b
 12273  003882  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
 12274                           
 12275                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 12276  003884  6BA7               	clrf	(_vscp_omsg+4)& (0+255),b
 12277                           
 12278                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 12279  003886  6A55               	clrf	_vscp_alarmstatus,c
 12280                           
 12281                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 12282  003888  6A57               	clrf	_vscp_probe_address,c
 12283                           
 12284                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 12285  00388A  6B91               	clrf	_vscp_node_state& (0+255),b
 12286                           
 12287                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 12288  00388C  6B92               	clrf	_vscp_node_substate& (0+255),b
 12289                           
 12290                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 12291  00388E  6B93               	clrf	_vscp_probe_cnt& (0+255),b
 12292                           
 12293                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 12294  003890  6A52               	clrf	_vscp_page_select,c
 12295  003892  6A53               	clrf	_vscp_page_select+1,c
 12296                           
 12297                           ;vscp_firmware.c: 153: vscp_timer = 0;
 12298  003894  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12299  003896  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12300                           
 12301                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 12302  003898  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
 12303  00389A  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 12304                           
 12305                           ;vscp_firmware.c: 155: vscp_second = 0;
 12306  00389C  6B94               	clrf	_vscp_second& (0+255),b
 12307                           
 12308                           ;vscp_firmware.c: 156: vscp_minute = 0;
 12309  00389E  6B8F               	clrf	_vscp_minute& (0+255),b
 12310                           
 12311                           ;vscp_firmware.c: 157: vscp_hour = 0;
 12312  0038A0  6B8D               	clrf	_vscp_hour& (0+255),b
 12313                           
 12314                           ; BSR set to: 0
 12315  0038A2  0012               	return	
 12316  0038A4                     __end_of_vscp_init:
 12317                           	opt stack 0
 12318                           tblptru	equ	0xFF8
 12319                           tblptrh	equ	0xFF7
 12320                           tblptrl	equ	0xFF6
 12321                           tablat	equ	0xFF5
 12322                           prodh	equ	0xFF4
 12323                           prodl	equ	0xFF3
 12324                           intcon	equ	0xFF2
 12325                           postinc0	equ	0xFEE
 12326                           wreg	equ	0xFE8
 12327                           indf1	equ	0xFE7
 12328                           fsr1h	equ	0xFE2
 12329                           fsr1l	equ	0xFE1
 12330                           indf2	equ	0xFDF
 12331                           postinc2	equ	0xFDE
 12332                           postdec2	equ	0xFDD
 12333                           plusw2	equ	0xFDB
 12334                           fsr2h	equ	0xFDA
 12335                           fsr2l	equ	0xFD9
 12336                           status	equ	0xFD8
 12337                           
 12338 ;; *************** function _vscp_readNicknamePermanent *****************
 12339 ;; Defined at:
 12340 ;;		line 847 in file "../main.c"
 12341 ;; Parameters:    Size  Location     Type
 12342 ;;		None
 12343 ;; Auto vars:     Size  Location     Type
 12344 ;;		None
 12345 ;; Return value:  Size  Location     Type
 12346 ;;                  1    wreg      unsigned char 
 12347 ;; Registers used:
 12348 ;;		wreg, status,2, cstack
 12349 ;; Tracked objects:
 12350 ;;		On entry : 0/0
 12351 ;;		On exit  : 0/0
 12352 ;;		Unchanged: 0/0
 12353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12354 ;;      Params:         0       0       0       0       0       0       0
 12355 ;;      Locals:         0       0       0       0       0       0       0
 12356 ;;      Temps:          0       0       0       0       0       0       0
 12357 ;;      Totals:         0       0       0       0       0       0       0
 12358 ;;Total ram usage:        0 bytes
 12359 ;; Hardware stack levels used:    1
 12360 ;; Hardware stack levels required when called:    3
 12361 ;; This function calls:
 12362 ;;		_Read_b_eep
 12363 ;; This function is called by:
 12364 ;;		_vscp_init
 12365 ;; This function uses a non-reentrant model
 12366 ;;
 12367                           
 12368                           	psect	text44
 12369  003D38                     __ptext44:
 12370                           	opt stack 0
 12371  003D38                     _vscp_readNicknamePermanent:
 12372                           	opt stack 24
 12373                           
 12374                           ;main.c: 848: return Read_b_eep(0x01);
 12375                           
 12376                           ; BSR set to: 0
 12377                           ;incstack = 0
 12378                           ;incstack = 0
 12379  003D38  6A09               	clrf	?_Read_b_eep+1,c
 12380  003D3A  0E01               	movlw	1
 12381  003D3C  6E08               	movwf	?_Read_b_eep,c
 12382  003D3E  EF76  F01E         	goto	_Read_b_eep	;wreg free
 12383  003D42                     __end_of_vscp_readNicknamePermanent:
 12384                           	opt stack 0
 12385                           tblptru	equ	0xFF8
 12386                           tblptrh	equ	0xFF7
 12387                           tblptrl	equ	0xFF6
 12388                           tablat	equ	0xFF5
 12389                           prodh	equ	0xFF4
 12390                           prodl	equ	0xFF3
 12391                           intcon	equ	0xFF2
 12392                           postinc0	equ	0xFEE
 12393                           wreg	equ	0xFE8
 12394                           indf1	equ	0xFE7
 12395                           fsr1h	equ	0xFE2
 12396                           fsr1l	equ	0xFE1
 12397                           indf2	equ	0xFDF
 12398                           postinc2	equ	0xFDE
 12399                           postdec2	equ	0xFDD
 12400                           plusw2	equ	0xFDB
 12401                           fsr2h	equ	0xFDA
 12402                           fsr2l	equ	0xFD9
 12403                           status	equ	0xFD8
 12404                           
 12405 ;; *************** function _vscp_handleSetNickname *****************
 12406 ;; Defined at:
 12407 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 12408 ;; Parameters:    Size  Location     Type
 12409 ;;		None
 12410 ;; Auto vars:     Size  Location     Type
 12411 ;;		None
 12412 ;; Return value:  Size  Location     Type
 12413 ;;		None               void
 12414 ;; Registers used:
 12415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12416 ;; Tracked objects:
 12417 ;;		On entry : F/0
 12418 ;;		On exit  : 0/0
 12419 ;;		Unchanged: 0/0
 12420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12421 ;;      Params:         0       0       0       0       0       0       0
 12422 ;;      Locals:         0       0       0       0       0       0       0
 12423 ;;      Temps:          0       0       0       0       0       0       0
 12424 ;;      Totals:         0       0       0       0       0       0       0
 12425 ;;Total ram usage:        0 bytes
 12426 ;; Hardware stack levels used:    1
 12427 ;; Hardware stack levels required when called:    4
 12428 ;; This function calls:
 12429 ;;		_vscp_writeNicknamePermanent
 12430 ;;		_vscp_setSegmentCRC
 12431 ;; This function is called by:
 12432 ;;		_vscp_handleProtocolEvent
 12433 ;; This function uses a non-reentrant model
 12434 ;;
 12435                           
 12436                           	psect	text45
 12437  003AF2                     __ptext45:
 12438                           	opt stack 0
 12439  003AF2                     _vscp_handleSetNickname:
 12440                           	opt stack 25
 12441                           
 12442                           ; BSR set to: 0
 12443                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 12444                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12445                           
 12446                           ;incstack = 0
 12447                           ;incstack = 0
 12448  003AF2  5195               	movf	_vscp_imsg& (0+255),w,b
 12449  003AF4  0B0F               	andlw	15
 12450  003AF6  0A02               	xorlw	2
 12451  003AF8  E10D               	bnz	l1102
 12452                           
 12453                           ; BSR set to: 0
 12454  003AFA  5190               	movf	_vscp_nickname& (0+255),w,b
 12455  003AFC  EE20  F09B         	lfsr	2,_vscp_imsg+6
 12456  003B00  62DF               	cpfseq	indf2,c
 12457  003B02  D008               	goto	l1102
 12458                           
 12459                           ; BSR set to: 0
 12460                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 12461  003B04  C09C  F090         	movff	_vscp_imsg+7,_vscp_nickname
 12462                           
 12463                           ; BSR set to: 0
 12464                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 12465  003B08  5190               	movf	_vscp_nickname& (0+255),w,b
 12466  003B0A  EC44  F01E         	call	_vscp_writeNicknamePermanent
 12467                           
 12468                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 12469  003B0E  0E40               	movlw	64
 12470  003B10  EC39  F01E         	call	_vscp_setSegmentCRC
 12471  003B14                     l1102:
 12472  003B14  0012               	return	
 12473  003B16                     __end_of_vscp_handleSetNickname:
 12474                           	opt stack 0
 12475                           tblptru	equ	0xFF8
 12476                           tblptrh	equ	0xFF7
 12477                           tblptrl	equ	0xFF6
 12478                           tablat	equ	0xFF5
 12479                           prodh	equ	0xFF4
 12480                           prodl	equ	0xFF3
 12481                           intcon	equ	0xFF2
 12482                           postinc0	equ	0xFEE
 12483                           wreg	equ	0xFE8
 12484                           indf1	equ	0xFE7
 12485                           fsr1h	equ	0xFE2
 12486                           fsr1l	equ	0xFE1
 12487                           indf2	equ	0xFDF
 12488                           postinc2	equ	0xFDE
 12489                           postdec2	equ	0xFDD
 12490                           plusw2	equ	0xFDB
 12491                           fsr2h	equ	0xFDA
 12492                           fsr2l	equ	0xFD9
 12493                           status	equ	0xFD8
 12494                           
 12495 ;; *************** function _vscp_handleHeartbeat *****************
 12496 ;; Defined at:
 12497 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 12498 ;; Parameters:    Size  Location     Type
 12499 ;;		None
 12500 ;; Auto vars:     Size  Location     Type
 12501 ;;		None
 12502 ;; Return value:  Size  Location     Type
 12503 ;;		None               void
 12504 ;; Registers used:
 12505 ;;		wreg, status,2, status,0, cstack
 12506 ;; Tracked objects:
 12507 ;;		On entry : F/0
 12508 ;;		On exit  : 0/0
 12509 ;;		Unchanged: 0/0
 12510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12511 ;;      Params:         0       0       0       0       0       0       0
 12512 ;;      Locals:         0       0       0       0       0       0       0
 12513 ;;      Temps:          0       0       0       0       0       0       0
 12514 ;;      Totals:         0       0       0       0       0       0       0
 12515 ;;Total ram usage:        0 bytes
 12516 ;; Hardware stack levels used:    1
 12517 ;; Hardware stack levels required when called:    4
 12518 ;; This function calls:
 12519 ;;		_vscp_writeNicknamePermanent
 12520 ;;		_vscp_getSegmentCRC
 12521 ;;		_vscp_setSegmentCRC
 12522 ;; This function is called by:
 12523 ;;		_vscp_handleProtocolEvent
 12524 ;; This function uses a non-reentrant model
 12525 ;;
 12526                           
 12527                           	psect	text46
 12528  0038A4                     __ptext46:
 12529                           	opt stack 0
 12530  0038A4                     _vscp_handleHeartbeat:
 12531                           	opt stack 25
 12532                           
 12533                           ; BSR set to: 0
 12534                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 12535                           
 12536                           ;incstack = 0
 12537                           ;incstack = 0
 12538  0038A4  ECA1  F01E         	call	_vscp_getSegmentCRC	;wreg free
 12539  0038A8  0900               	iorlw	0
 12540  0038AA  E116               	bnz	l9529
 12541                           
 12542                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 12543                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 12544  0038AC  0100               	movlb	0	; () banked
 12545  0038AE  5195               	movf	_vscp_imsg& (0+255),w,b
 12546  0038B0  0B0F               	andlw	15
 12547  0038B2  0A05               	xorlw	5
 12548  0038B4  E115               	bnz	l1098
 12549                           
 12550                           ; BSR set to: 0
 12551  0038B6  ECA1  F01E         	call	_vscp_getSegmentCRC	;wreg free
 12552  0038BA  0100               	movlb	0	; () banked
 12553  0038BC  199B               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 12554  0038BE  E010               	bz	l1098
 12555                           
 12556                           ; BSR set to: 0
 12557                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12558  0038C0  519B               	movf	(_vscp_imsg+6)& (0+255),w,b
 12559  0038C2  EC39  F01E         	call	_vscp_setSegmentCRC
 12560                           
 12561                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 12562  0038C6  0100               	movlb	0	; () banked
 12563  0038C8  6990               	setf	_vscp_nickname& (0+255),b
 12564                           
 12565                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 12566  0038CA  0EFF               	movlw	255
 12567  0038CC  EC44  F01E         	call	_vscp_writeNicknamePermanent
 12568                           
 12569                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 12570  0038D0  0E01               	movlw	1
 12571  0038D2  0100               	movlb	0	; () banked
 12572  0038D4  6F91               	movwf	_vscp_node_state& (0+255),b
 12573  0038D6  D004               	goto	l1098
 12574  0038D8                     l9529:
 12575                           
 12576                           ;vscp_firmware.c: 411: else {
 12577                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12578  0038D8  0100               	movlb	0	; () banked
 12579  0038DA  519B               	movf	(_vscp_imsg+6)& (0+255),w,b
 12580  0038DC  EC39  F01E         	call	_vscp_setSegmentCRC
 12581  0038E0                     l1098:
 12582  0038E0  0012               	return	
 12583  0038E2                     __end_of_vscp_handleHeartbeat:
 12584                           	opt stack 0
 12585                           tblptru	equ	0xFF8
 12586                           tblptrh	equ	0xFF7
 12587                           tblptrl	equ	0xFF6
 12588                           tablat	equ	0xFF5
 12589                           prodh	equ	0xFF4
 12590                           prodl	equ	0xFF3
 12591                           intcon	equ	0xFF2
 12592                           postinc0	equ	0xFEE
 12593                           wreg	equ	0xFE8
 12594                           indf1	equ	0xFE7
 12595                           fsr1h	equ	0xFE2
 12596                           fsr1l	equ	0xFE1
 12597                           indf2	equ	0xFDF
 12598                           postinc2	equ	0xFDE
 12599                           postdec2	equ	0xFDD
 12600                           plusw2	equ	0xFDB
 12601                           fsr2h	equ	0xFDA
 12602                           fsr2l	equ	0xFD9
 12603                           status	equ	0xFD8
 12604                           
 12605 ;; *************** function _vscp_getMatrixInfo *****************
 12606 ;; Defined at:
 12607 ;;		line 2526 in file "../main.c"
 12608 ;; Parameters:    Size  Location     Type
 12609 ;;  pData           1    wreg     PTR unsigned char 
 12610 ;;		 -> vscp_omsg(13), 
 12611 ;; Auto vars:     Size  Location     Type
 12612 ;;  pData           1    0[COMRAM] PTR unsigned char 
 12613 ;;		 -> vscp_omsg(13), 
 12614 ;;  i               1    7[COMRAM] unsigned char 
 12615 ;; Return value:  Size  Location     Type
 12616 ;;		None               void
 12617 ;; Registers used:
 12618 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12619 ;; Tracked objects:
 12620 ;;		On entry : F/0
 12621 ;;		On exit  : F/0
 12622 ;;		Unchanged: 0/0
 12623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12624 ;;      Params:         0       0       0       0       0       0       0
 12625 ;;      Locals:         1       0       0       0       0       0       0
 12626 ;;      Temps:          0       0       0       0       0       0       0
 12627 ;;      Totals:         1       0       0       0       0       0       0
 12628 ;;Total ram usage:        1 bytes
 12629 ;; Hardware stack levels used:    1
 12630 ;; Hardware stack levels required when called:    2
 12631 ;; This function calls:
 12632 ;;		Nothing
 12633 ;; This function is called by:
 12634 ;;		_vscp_handleProtocolEvent
 12635 ;; This function uses a non-reentrant model
 12636 ;;
 12637                           
 12638                           	psect	text47
 12639  003B7E                     __ptext47:
 12640                           	opt stack 0
 12641  003B7E                     _vscp_getMatrixInfo:
 12642                           	opt stack 27
 12643                           
 12644                           ; BSR set to: 0
 12645                           ;main.c: 2527: uint8_t i;
 12646                           ;main.c: 2529: vscp_omsg.data[ 0 ] = 7;
 12647                           
 12648                           ;incstack = 0
 12649                           ;incstack = 0
 12650  003B7E  0E07               	movlw	7
 12651  003B80  6FA8               	movwf	(_vscp_omsg+5)& (0+255),b
 12652                           
 12653                           ;main.c: 2530: vscp_omsg.data[ 1 ] = 72;
 12654  003B82  0E48               	movlw	72
 12655  003B84  6FA9               	movwf	(_vscp_omsg+6)& (0+255),b
 12656                           
 12657                           ;main.c: 2533: for ( i = 2; i < 8; i++ ) {
 12658  003B86  0E02               	movlw	2
 12659  003B88  6E08               	movwf	vscp_getMatrixInfo@i,c
 12660  003B8A                     l6901:
 12661                           
 12662                           ; BSR set to: 0
 12663                           ;main.c: 2534: vscp_omsg.data[ i ] = 0;
 12664  003B8A  5008               	movf	vscp_getMatrixInfo@i,w,c
 12665  003B8C  0FA8               	addlw	low (_vscp_omsg+5)
 12666  003B8E  6ED9               	movwf	fsr2l,c
 12667  003B90  6ADA               	clrf	fsr2h,c
 12668  003B92  6ADF               	clrf	indf2,c
 12669                           
 12670                           ; BSR set to: 0
 12671  003B94  2A08               	incf	vscp_getMatrixInfo@i,f,c
 12672                           
 12673                           ; BSR set to: 0
 12674  003B96  0E07               	movlw	7
 12675  003B98  6408               	cpfsgt	vscp_getMatrixInfo@i,c
 12676  003B9A  D7F7               	goto	l6901
 12677                           
 12678                           ; BSR set to: 0
 12679  003B9C  0C07               	retlw	7
 12680  003B9E                     __end_of_vscp_getMatrixInfo:
 12681                           	opt stack 0
 12682                           tblptru	equ	0xFF8
 12683                           tblptrh	equ	0xFF7
 12684                           tblptrl	equ	0xFF6
 12685                           tablat	equ	0xFF5
 12686                           prodh	equ	0xFF4
 12687                           prodl	equ	0xFF3
 12688                           intcon	equ	0xFF2
 12689                           postinc0	equ	0xFEE
 12690                           wreg	equ	0xFE8
 12691                           indf1	equ	0xFE7
 12692                           fsr1h	equ	0xFE2
 12693                           fsr1l	equ	0xFE1
 12694                           indf2	equ	0xFDF
 12695                           postinc2	equ	0xFDE
 12696                           postdec2	equ	0xFDD
 12697                           plusw2	equ	0xFDB
 12698                           fsr2h	equ	0xFDA
 12699                           fsr2l	equ	0xFD9
 12700                           status	equ	0xFD8
 12701                           
 12702 ;; *************** function _vscp_goBootloaderMode *****************
 12703 ;; Defined at:
 12704 ;;		line 2510 in file "../main.c"
 12705 ;; Parameters:    Size  Location     Type
 12706 ;;  algorithm       1    wreg     unsigned char 
 12707 ;; Auto vars:     Size  Location     Type
 12708 ;;  algorithm       1   11[COMRAM] unsigned char 
 12709 ;; Return value:  Size  Location     Type
 12710 ;;		None               void
 12711 ;; Registers used:
 12712 ;;		wreg, status,2, status,0, cstack
 12713 ;; Tracked objects:
 12714 ;;		On entry : F/0
 12715 ;;		On exit  : 0/0
 12716 ;;		Unchanged: 0/0
 12717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12718 ;;      Params:         0       0       0       0       0       0       0
 12719 ;;      Locals:         1       0       0       0       0       0       0
 12720 ;;      Temps:          0       0       0       0       0       0       0
 12721 ;;      Totals:         1       0       0       0       0       0       0
 12722 ;;Total ram usage:        1 bytes
 12723 ;; Hardware stack levels used:    1
 12724 ;; Hardware stack levels required when called:    3
 12725 ;; This function calls:
 12726 ;;		_Busy_eep
 12727 ;;		_Write_b_eep
 12728 ;; This function is called by:
 12729 ;;		_vscp_handleProtocolEvent
 12730 ;; This function uses a non-reentrant model
 12731 ;;
 12732                           
 12733                           	psect	text48
 12734  003BF6                     __ptext48:
 12735                           	opt stack 0
 12736  003BF6                     _vscp_goBootloaderMode:
 12737                           	opt stack 26
 12738                           
 12739                           ; BSR set to: 0
 12740                           ;incstack = 0
 12741                           ;incstack = 0
 12742                           ;vscp_goBootloaderMode@algorithm stored from wreg
 12743  003BF6  CFE8 F00C          	movff	wreg,vscp_goBootloaderMode@algorithm
 12744                           
 12745                           ; BSR set to: 0
 12746                           ;main.c: 2511: if ( 0x01 != algorithm ) return;
 12747  003BFA  040C               	decf	vscp_goBootloaderMode@algorithm,w,c
 12748  003BFC  E109               	bnz	l640
 12749                           
 12750                           ; BSR set to: 0
 12751                           ;main.c: 2515: (Busy_eep(), Write_b_eep(0x00,0xff));
 12752  003BFE  ECAA  F01E         	call	_Busy_eep	;wreg free
 12753  003C02  6A09               	clrf	?_Write_b_eep+1,c
 12754  003C04  6A08               	clrf	?_Write_b_eep,c
 12755  003C06  0EFF               	movlw	255
 12756  003C08  680A               	setf	?_Write_b_eep+2,c
 12757  003C0A  EC90  F01C         	call	_Write_b_eep	;wreg free
 12758  003C0E  00FF               	reset		;# 
 12759  003C10                     l640:
 12760  003C10  0012               	return	
 12761  003C12                     __end_of_vscp_goBootloaderMode:
 12762                           	opt stack 0
 12763                           tblptru	equ	0xFF8
 12764                           tblptrh	equ	0xFF7
 12765                           tblptrl	equ	0xFF6
 12766                           tablat	equ	0xFF5
 12767                           prodh	equ	0xFF4
 12768                           prodl	equ	0xFF3
 12769                           intcon	equ	0xFF2
 12770                           postinc0	equ	0xFEE
 12771                           wreg	equ	0xFE8
 12772                           indf1	equ	0xFE7
 12773                           fsr1h	equ	0xFE2
 12774                           fsr1l	equ	0xFE1
 12775                           indf2	equ	0xFDF
 12776                           postinc2	equ	0xFDE
 12777                           postdec2	equ	0xFDD
 12778                           plusw2	equ	0xFDB
 12779                           fsr2h	equ	0xFDA
 12780                           fsr2l	equ	0xFD9
 12781                           status	equ	0xFD8
 12782                           
 12783 ;; *************** function _vscp_handleProbeState *****************
 12784 ;; Defined at:
 12785 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 12786 ;; Parameters:    Size  Location     Type
 12787 ;;		None
 12788 ;; Auto vars:     Size  Location     Type
 12789 ;;		None
 12790 ;; Return value:  Size  Location     Type
 12791 ;;		None               void
 12792 ;; Registers used:
 12793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12794 ;; Tracked objects:
 12795 ;;		On entry : 0/0
 12796 ;;		On exit  : F/0
 12797 ;;		Unchanged: 0/0
 12798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12799 ;;      Params:         0       0       0       0       0       0       0
 12800 ;;      Locals:         0       0       0       0       0       0       0
 12801 ;;      Temps:          0       0       0       0       0       0       0
 12802 ;;      Totals:         0       0       0       0       0       0       0
 12803 ;;Total ram usage:        0 bytes
 12804 ;; Hardware stack levels used:    1
 12805 ;; Hardware stack levels required when called:    8
 12806 ;; This function calls:
 12807 ;;		_vscp_goActiveState
 12808 ;;		_vscp_writeNicknamePermanent
 12809 ;;		_vscp_sendEvent
 12810 ;;		_vscp_setSegmentCRC
 12811 ;; This function is called by:
 12812 ;;		_main
 12813 ;; This function uses a non-reentrant model
 12814 ;;
 12815                           
 12816                           	psect	text49
 12817  003372                     __ptext49:
 12818                           	opt stack 0
 12819  003372                     _vscp_handleProbeState:
 12820                           	opt stack 22
 12821                           
 12822                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 12823                           
 12824                           ;incstack = 0
 12825                           ;incstack = 0
 12826  003372  D053               	goto	l7839
 12827  003374                     l7769:
 12828                           
 12829                           ; BSR set to: 0
 12830                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 12831  003374  2857               	incf	_vscp_probe_address,w,c
 12832  003376  E010               	bz	l7785
 12833                           
 12834                           ; BSR set to: 0
 12835                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 12836  003378  0E81               	movlw	129
 12837  00337A  6FA3               	movwf	_vscp_omsg& (0+255),b
 12838                           
 12839                           ; BSR set to: 0
 12840                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 12841  00337C  6BA4               	clrf	(_vscp_omsg+1)& (0+255),b
 12842                           
 12843                           ; BSR set to: 0
 12844                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 12845  00337E  6BA5               	clrf	(_vscp_omsg+2)& (0+255),b
 12846  003380  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
 12847                           
 12848                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 12849  003382  0E02               	movlw	2
 12850  003384  6FA7               	movwf	(_vscp_omsg+4)& (0+255),b
 12851                           
 12852                           ; BSR set to: 0
 12853                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 12854  003386  C057  F0A8         	movff	_vscp_probe_address,_vscp_omsg+5
 12855                           
 12856                           ; BSR set to: 0
 12857                           ;vscp_firmware.c: 216: vscp_sendEvent();
 12858  00338A  EC66  F01D         	call	_vscp_sendEvent	;wreg free
 12859                           
 12860                           ; BSR set to: 0
 12861                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 12862  00338E  0E01               	movlw	1
 12863  003390  6F92               	movwf	_vscp_node_substate& (0+255),b
 12864  003392                     l7783:
 12865                           
 12866                           ; BSR set to: 0
 12867                           ;vscp_firmware.c: 219: vscp_timer = 0;
 12868  003392  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12869  003394  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12870                           
 12871                           ;vscp_firmware.c: 221: }
 12872  003396  D048               	goto	l1065
 12873  003398                     l7785:
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;vscp_firmware.c: 222: else {
 12877                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 12878  003398  0E04               	movlw	4
 12879  00339A  6F91               	movwf	_vscp_node_state& (0+255),b
 12880                           
 12881                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 12882  00339C  0E81               	movlw	129
 12883  00339E  6FA3               	movwf	_vscp_omsg& (0+255),b
 12884                           
 12885                           ; BSR set to: 0
 12886                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 12887  0033A0  69A8               	setf	(_vscp_omsg+5)& (0+255),b
 12888                           
 12889                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 12890  0033A2  0E07               	movlw	7
 12891  0033A4  6FA4               	movwf	(_vscp_omsg+1)& (0+255),b
 12892                           
 12893                           ; BSR set to: 0
 12894                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 12895  0033A6  6BA5               	clrf	(_vscp_omsg+2)& (0+255),b
 12896  0033A8  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
 12897                           
 12898                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 12899  0033AA  0E03               	movlw	3
 12900  0033AC  6FA7               	movwf	(_vscp_omsg+4)& (0+255),b
 12901                           
 12902                           ; BSR set to: 0
 12903                           ;vscp_firmware.c: 235: vscp_sendEvent();
 12904  0033AE  EC66  F01D         	call	_vscp_sendEvent	;wreg free
 12905  0033B2  D03A               	goto	l1065
 12906  0033B4                     l1066:
 12907                           
 12908                           ; BSR set to: 0
 12909                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 12910  0033B4  AF95               	btfss	_vscp_imsg& (0+255),7,b
 12911  0033B6  D00F               	goto	l7809
 12912                           
 12913                           ; BSR set to: 0
 12914                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 12915                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 12916  0033B8  5198               	movf	(_vscp_imsg+3)& (0+255),w,b
 12917  0033BA  1197               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 12918  0033BC  E135               	bnz	l1065
 12919                           
 12920                           ; BSR set to: 0
 12921  0033BE  5199               	movf	(_vscp_imsg+4)& (0+255),w,b
 12922  0033C0  0A03               	xorlw	3
 12923  0033C2  E132               	bnz	l1065
 12924                           
 12925                           ; BSR set to: 0
 12926                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 12927  0033C4  6657               	tstfsz	_vscp_probe_address,c
 12928  0033C6  D003               	goto	l7803
 12929                           
 12930                           ; BSR set to: 0
 12931                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 12932  0033C8  0E02               	movlw	2
 12933  0033CA  6F91               	movwf	_vscp_node_state& (0+255),b
 12934  0033CC  D7E2               	goto	l7783
 12935  0033CE                     l7803:
 12936                           
 12937                           ; BSR set to: 0
 12938                           ;vscp_firmware.c: 257: else {
 12939                           ;vscp_firmware.c: 260: vscp_probe_address++;
 12940  0033CE  2A57               	incf	_vscp_probe_address,f,c
 12941                           
 12942                           ; BSR set to: 0
 12943                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 12944  0033D0  6B92               	clrf	_vscp_node_substate& (0+255),b
 12945  0033D2                     l7807:
 12946                           
 12947                           ; BSR set to: 0
 12948                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 12949  0033D2  6B93               	clrf	_vscp_probe_cnt& (0+255),b
 12950  0033D4  D029               	goto	l1065
 12951  0033D6                     l7809:
 12952                           
 12953                           ; BSR set to: 0
 12954                           ;vscp_firmware.c: 267: else {
 12955                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 12956  0033D6  0EE9               	movlw	233
 12957  0033D8  5D86               	subwf	_vscp_timer& (0+255),w,b	;volatile
 12958  0033DA  0E03               	movlw	3
 12959  0033DC  5987               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 12960  0033DE  E324               	bnc	l1065
 12961                           
 12962                           ; BSR set to: 0
 12963                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 12964  0033E0  2B93               	incf	_vscp_probe_cnt& (0+255),f,b
 12965                           
 12966                           ; BSR set to: 0
 12967                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 12968  0033E2  0E02               	movlw	2
 12969  0033E4  6593               	cpfsgt	_vscp_probe_cnt& (0+255),b
 12970  0033E6  D017               	goto	l1073
 12971                           
 12972                           ; BSR set to: 0
 12973                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 12974  0033E8  6657               	tstfsz	_vscp_probe_address,c
 12975  0033EA  D005               	goto	l1074
 12976                           
 12977                           ; BSR set to: 0
 12978                           ;vscp_firmware.c: 279: vscp_probe_address++;
 12979  0033EC  2A57               	incf	_vscp_probe_address,f,c
 12980                           
 12981                           ; BSR set to: 0
 12982                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 12983  0033EE  6B92               	clrf	_vscp_node_substate& (0+255),b
 12984                           
 12985                           ; BSR set to: 0
 12986                           ;vscp_firmware.c: 281: vscp_timer = 0;
 12987  0033F0  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12988  0033F2  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12989  0033F4  D7EE               	goto	l7807
 12990  0033F6                     l1074:
 12991                           
 12992                           ; BSR set to: 0
 12993                           ;vscp_firmware.c: 285: else {
 12994                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 12995  0033F6  C057  F090         	movff	_vscp_probe_address,_vscp_nickname
 12996                           
 12997                           ; BSR set to: 0
 12998                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 12999  0033FA  0E03               	movlw	3
 13000  0033FC  6F91               	movwf	_vscp_node_state& (0+255),b
 13001                           
 13002                           ; BSR set to: 0
 13003                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 13004  0033FE  6B92               	clrf	_vscp_node_substate& (0+255),b
 13005                           
 13006                           ; BSR set to: 0
 13007                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 13008  003400  5190               	movf	_vscp_nickname& (0+255),w,b
 13009  003402  EC44  F01E         	call	_vscp_writeNicknamePermanent
 13010                           
 13011                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 13012  003406  0E40               	movlw	64
 13013  003408  EC39  F01E         	call	_vscp_setSegmentCRC
 13014                           
 13015                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 13016  00340C  0100               	movlb	0	; () banked
 13017  00340E  6B93               	clrf	_vscp_probe_cnt& (0+255),b
 13018                           
 13019                           ; BSR set to: 0
 13020                           ;vscp_firmware.c: 296: vscp_goActiveState();
 13021  003410  ECCF  F01D         	call	_vscp_goActiveState	;wreg free
 13022  003414  D009               	goto	l1065
 13023  003416                     l1073:
 13024                           
 13025                           ; BSR set to: 0
 13026                           ;vscp_firmware.c: 300: else {
 13027                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 13028  003416  6B92               	clrf	_vscp_node_substate& (0+255),b
 13029  003418  D007               	goto	l1065
 13030  00341A                     l7839:
 13031  00341A  0100               	movlb	0	; () banked
 13032  00341C  5192               	movf	_vscp_node_substate& (0+255),w,b
 13033                           
 13034                           ; Switch size 1, requested type "space"
 13035                           ; Number of cases is 3, Range of values is 0 to 2
 13036                           ; switch strategies available:
 13037                           ; Name         Instructions Cycles
 13038                           ; simple_byte           10     6 (average)
 13039                           ;	Chosen strategy is simple_byte
 13040  00341E  E0AA               	bz	l7769
 13041  003420  0A01               	xorlw	1	; case 1
 13042  003422  E0C8               	bz	l1066
 13043  003424  0A03               	xorlw	3	; case 2
 13044  003426  E1F7               	bnz	l1073
 13045  003428                     l1065:
 13046                           
 13047                           ; BSR set to: 0
 13048                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 13049  003428  6B95               	clrf	_vscp_imsg& (0+255),b
 13050                           
 13051                           ; BSR set to: 0
 13052  00342A  0012               	return	
 13053  00342C                     __end_of_vscp_handleProbeState:
 13054                           	opt stack 0
 13055                           tblptru	equ	0xFF8
 13056                           tblptrh	equ	0xFF7
 13057                           tblptrl	equ	0xFF6
 13058                           tablat	equ	0xFF5
 13059                           prodh	equ	0xFF4
 13060                           prodl	equ	0xFF3
 13061                           intcon	equ	0xFF2
 13062                           postinc0	equ	0xFEE
 13063                           wreg	equ	0xFE8
 13064                           indf1	equ	0xFE7
 13065                           fsr1h	equ	0xFE2
 13066                           fsr1l	equ	0xFE1
 13067                           indf2	equ	0xFDF
 13068                           postinc2	equ	0xFDE
 13069                           postdec2	equ	0xFDD
 13070                           plusw2	equ	0xFDB
 13071                           fsr2h	equ	0xFDA
 13072                           fsr2l	equ	0xFD9
 13073                           status	equ	0xFD8
 13074                           
 13075 ;; *************** function _vscp_goActiveState *****************
 13076 ;; Defined at:
 13077 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 13078 ;; Parameters:    Size  Location     Type
 13079 ;;		None
 13080 ;; Auto vars:     Size  Location     Type
 13081 ;;		None
 13082 ;; Return value:  Size  Location     Type
 13083 ;;		None               void
 13084 ;; Registers used:
 13085 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13086 ;; Tracked objects:
 13087 ;;		On entry : 0/0
 13088 ;;		On exit  : F/0
 13089 ;;		Unchanged: 0/0
 13090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13091 ;;      Params:         0       0       0       0       0       0       0
 13092 ;;      Locals:         0       0       0       0       0       0       0
 13093 ;;      Temps:          0       0       0       0       0       0       0
 13094 ;;      Totals:         0       0       0       0       0       0       0
 13095 ;;Total ram usage:        0 bytes
 13096 ;; Hardware stack levels used:    1
 13097 ;; Hardware stack levels required when called:    7
 13098 ;; This function calls:
 13099 ;;		_vscp_sendEvent
 13100 ;; This function is called by:
 13101 ;;		_main
 13102 ;;		_vscp_handleProbeState
 13103 ;; This function uses a non-reentrant model
 13104 ;;
 13105                           
 13106                           	psect	text50
 13107  003B9E                     __ptext50:
 13108                           	opt stack 0
 13109  003B9E                     _vscp_goActiveState:
 13110                           	opt stack 22
 13111                           
 13112                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 13113                           
 13114                           ; BSR set to: 0
 13115                           ;incstack = 0
 13116                           ;incstack = 0
 13117  003B9E  0E81               	movlw	129
 13118  003BA0  0100               	movlb	0	; () banked
 13119  003BA2  6FA3               	movwf	_vscp_omsg& (0+255),b
 13120                           
 13121                           ; BSR set to: 0
 13122                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 13123  003BA4  6BA4               	clrf	(_vscp_omsg+1)& (0+255),b
 13124                           
 13125                           ; BSR set to: 0
 13126                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 13127  003BA6  6BA5               	clrf	(_vscp_omsg+2)& (0+255),b
 13128  003BA8  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
 13129                           
 13130                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 13131  003BAA  0E02               	movlw	2
 13132  003BAC  6FA7               	movwf	(_vscp_omsg+4)& (0+255),b
 13133                           
 13134                           ; BSR set to: 0
 13135                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 13136  003BAE  C090  F0A8         	movff	_vscp_nickname,_vscp_omsg+5
 13137                           
 13138                           ; BSR set to: 0
 13139                           ;vscp_firmware.c: 366: vscp_sendEvent();
 13140  003BB2  EC66  F01D         	call	_vscp_sendEvent	;wreg free
 13141                           
 13142                           ; BSR set to: 0
 13143                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 13144  003BB6  0E01               	movlw	1
 13145  003BB8  6E56               	movwf	_vscp_initledfunc,c
 13146                           
 13147                           ; BSR set to: 0
 13148  003BBA  0C01               	retlw	1
 13149  003BBC                     __end_of_vscp_goActiveState:
 13150                           	opt stack 0
 13151                           tblptru	equ	0xFF8
 13152                           tblptrh	equ	0xFF7
 13153                           tblptrl	equ	0xFF6
 13154                           tablat	equ	0xFF5
 13155                           prodh	equ	0xFF4
 13156                           prodl	equ	0xFF3
 13157                           intcon	equ	0xFF2
 13158                           postinc0	equ	0xFEE
 13159                           wreg	equ	0xFE8
 13160                           indf1	equ	0xFE7
 13161                           fsr1h	equ	0xFE2
 13162                           fsr1l	equ	0xFE1
 13163                           indf2	equ	0xFDF
 13164                           postinc2	equ	0xFDE
 13165                           postdec2	equ	0xFDD
 13166                           plusw2	equ	0xFDB
 13167                           fsr2h	equ	0xFDA
 13168                           fsr2l	equ	0xFD9
 13169                           status	equ	0xFD8
 13170                           
 13171 ;; *************** function _vscp_sendEvent *****************
 13172 ;; Defined at:
 13173 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 13174 ;; Parameters:    Size  Location     Type
 13175 ;;		None
 13176 ;; Auto vars:     Size  Location     Type
 13177 ;;  rv              1    0        unsigned char 
 13178 ;; Return value:  Size  Location     Type
 13179 ;;                  1    wreg      unsigned char 
 13180 ;; Registers used:
 13181 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13182 ;; Tracked objects:
 13183 ;;		On entry : F/0
 13184 ;;		On exit  : F/0
 13185 ;;		Unchanged: 0/0
 13186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13187 ;;      Params:         0       0       0       0       0       0       0
 13188 ;;      Locals:         1       0       0       0       0       0       0
 13189 ;;      Temps:          0       0       0       0       0       0       0
 13190 ;;      Totals:         1       0       0       0       0       0       0
 13191 ;;Total ram usage:        1 bytes
 13192 ;; Hardware stack levels used:    1
 13193 ;; Hardware stack levels required when called:    6
 13194 ;; This function calls:
 13195 ;;		_sendVSCPFrame
 13196 ;; This function is called by:
 13197 ;;		_vscp_handleProbeState
 13198 ;;		_vscp_goActiveState
 13199 ;;		_vscp_sendHeartBeat
 13200 ;;		_vscp_newNodeOnline
 13201 ;;		_vscp_handleProtocolEvent
 13202 ;; This function uses a non-reentrant model
 13203 ;;
 13204                           
 13205                           	psect	text51
 13206  003ACC                     __ptext51:
 13207                           	opt stack 0
 13208  003ACC                     _vscp_sendEvent:
 13209                           	opt stack 22
 13210                           
 13211                           ; BSR set to: 0
 13212                           
 13213                           ; BSR set to: 0
 13214                           ;incstack = 0
 13215                           ;incstack = 0
 13216  003ACC  C0A5  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
 13217  003AD0  C0A6  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 13218  003AD4  C0A7  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 13219  003AD8  C090  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 13220  003ADC  C0A4  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 13221  003AE0  51A3               	movf	_vscp_omsg& (0+255),w,b
 13222  003AE2  0B0F               	andlw	15
 13223  003AE4  6E44               	movwf	?_sendVSCPFrame+5,c
 13224  003AE6  0E00               	movlw	high (_vscp_omsg+5)
 13225  003AE8  6E46               	movwf	?_sendVSCPFrame+7,c
 13226  003AEA  0EA8               	movlw	low (_vscp_omsg+5)
 13227  003AEC  6E45               	movwf	?_sendVSCPFrame+6,c
 13228  003AEE  EF16  F01A         	goto	_sendVSCPFrame	;wreg free
 13229  003AF2                     __end_of_vscp_sendEvent:
 13230                           	opt stack 0
 13231                           tblptru	equ	0xFF8
 13232                           tblptrh	equ	0xFF7
 13233                           tblptrl	equ	0xFF6
 13234                           tablat	equ	0xFF5
 13235                           prodh	equ	0xFF4
 13236                           prodl	equ	0xFF3
 13237                           intcon	equ	0xFF2
 13238                           postinc0	equ	0xFEE
 13239                           wreg	equ	0xFE8
 13240                           indf1	equ	0xFE7
 13241                           fsr1h	equ	0xFE2
 13242                           fsr1l	equ	0xFE1
 13243                           indf2	equ	0xFDF
 13244                           postinc2	equ	0xFDE
 13245                           postdec2	equ	0xFDD
 13246                           plusw2	equ	0xFDB
 13247                           fsr2h	equ	0xFDA
 13248                           fsr2l	equ	0xFD9
 13249                           status	equ	0xFD8
 13250                           
 13251 ;; *************** function _sendVSCPFrame *****************
 13252 ;; Defined at:
 13253 ;;		line 2585 in file "../main.c"
 13254 ;; Parameters:    Size  Location     Type
 13255 ;;  vscpclass       2   62[COMRAM] unsigned short 
 13256 ;;  vscptype        1   64[COMRAM] unsigned char 
 13257 ;;  nodeid          1   65[COMRAM] unsigned char 
 13258 ;;  priority        1   66[COMRAM] unsigned char 
 13259 ;;  size            1   67[COMRAM] unsigned char 
 13260 ;;  pData           2   68[COMRAM] PTR unsigned char 
 13261 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13262 ;; Auto vars:     Size  Location     Type
 13263 ;;  id              4   70[COMRAM] unsigned long 
 13264 ;; Return value:  Size  Location     Type
 13265 ;;                  1    wreg      unsigned char 
 13266 ;; Registers used:
 13267 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13268 ;; Tracked objects:
 13269 ;;		On entry : F/0
 13270 ;;		On exit  : F/0
 13271 ;;		Unchanged: 0/0
 13272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13273 ;;      Params:         8       0       0       0       0       0       0
 13274 ;;      Locals:         4       0       0       0       0       0       0
 13275 ;;      Temps:          0      20       0       0       0       0       0
 13276 ;;      Totals:        12      20       0       0       0       0       0
 13277 ;;Total ram usage:       32 bytes
 13278 ;; Hardware stack levels used:    1
 13279 ;; Hardware stack levels required when called:    5
 13280 ;; This function calls:
 13281 ;;		_sendCANFrame
 13282 ;; This function is called by:
 13283 ;;		_SendInformationEvent
 13284 ;;		_vscp_sendEvent
 13285 ;; This function uses a non-reentrant model
 13286 ;;
 13287                           
 13288                           	psect	text52
 13289  00342C                     __ptext52:
 13290                           	opt stack 0
 13291  00342C                     _sendVSCPFrame:
 13292                           	opt stack 23
 13293                           
 13294                           ; BSR set to: 0
 13295                           ;main.c: 2586: uint32_t id = ( (uint32_t)priority << 26 ) |
 13296                           ;main.c: 2587: ( (uint32_t)vscpclass << 16 ) |
 13297                           ;main.c: 2588: ( (uint32_t)vscptype << 8 ) |
 13298                           ;main.c: 2589: nodeid;
 13299                           
 13300                           ; BSR set to: 0
 13301                           ;incstack = 0
 13302                           ;incstack = 0
 13303  00342C  C041  F0B0         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 13304  003430  6BB1               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 13305  003432  6BB2               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 13306  003434  6BB3               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 13307  003436  C0B2  F0B3         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 13308  00343A  C0B1  F0B2         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 13309  00343E  C0B0  F0B1         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 13310  003442  6BB0               	clrf	??_sendVSCPFrame& (0+255),b
 13311  003444  503F               	movf	sendVSCPFrame@vscpclass,w,c
 13312  003446  6FB4               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 13313  003448  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
 13314  00344A  6FB5               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 13315  00344C  6BB6               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 13316  00344E  6BB7               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 13317  003450  C0B5  F0B7         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 13318  003454  C0B4  F0B6         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 13319  003458  6BB5               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 13320  00345A  6BB4               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 13321  00345C  C043  F0B8         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 13322  003460  6BB9               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 13323  003462  6BBA               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 13324  003464  6BBB               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 13325  003466  0E1A               	movlw	26
 13326  003468                     u10195:
 13327  003468  90D8               	bcf	status,0,c
 13328  00346A  37B8               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 13329  00346C  37B9               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 13330  00346E  37BA               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 13331  003470  37BB               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 13332  003472  2EE8               	decfsz	wreg,f,c
 13333  003474  D7F9               	goto	u10195
 13334  003476  51B4               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 13335  003478  11B8               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 13336  00347A  6FBC               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 13337  00347C  51B5               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 13338  00347E  11B9               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 13339  003480  6FBD               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 13340  003482  51B6               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 13341  003484  11BA               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 13342  003486  6FBE               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 13343  003488  51B7               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 13344  00348A  11BB               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 13345  00348C  6FBF               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 13346  00348E  51B0               	movf	??_sendVSCPFrame& (0+255),w,b
 13347  003490  11BC               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 13348  003492  6FC0               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 13349  003494  51B1               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 13350  003496  11BD               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 13351  003498  6FC1               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 13352  00349A  51B2               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 13353  00349C  11BE               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 13354  00349E  6FC2               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 13355  0034A0  51B3               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 13356  0034A2  11BF               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 13357  0034A4  6FC3               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 13358  0034A6  5042               	movf	sendVSCPFrame@nodeid,w,c
 13359  0034A8  11C0               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 13360  0034AA  6E47               	movwf	sendVSCPFrame@id,c
 13361  0034AC  51C1               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 13362  0034AE  6E48               	movwf	sendVSCPFrame@id+1,c
 13363  0034B0  51C2               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 13364  0034B2  6E49               	movwf	sendVSCPFrame@id+2,c
 13365  0034B4  51C3               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 13366  0034B6  6E4A               	movwf	sendVSCPFrame@id+3,c
 13367                           
 13368                           ; BSR set to: 0
 13369                           ;main.c: 2591: if ( !sendCANFrame( id, size, pData ) ) {
 13370  0034B8  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
 13371  0034BC  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 13372  0034C0  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 13373  0034C4  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 13374  0034C8  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 13375  0034CC  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 13376  0034D0  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 13377  0034D4  ECC2  F01C         	call	_sendCANFrame	;wreg free
 13378  0034D8  0900               	iorlw	0
 13379                           
 13380                           ; BSR set to: 0
 13381                           ;main.c: 2592: return 0;
 13382  0034DA  0E00               	movlw	0
 13383  0034DC  A4D8               	btfss	status,2,c
 13384                           
 13385                           ; BSR set to: 0
 13386                           ;main.c: 2593: }
 13387                           ;main.c: 2595: return 1;
 13388  0034DE  0E01               	movlw	1
 13389                           
 13390                           ; BSR set to: 0
 13391  0034E0  0012               	return	
 13392  0034E2                     __end_of_sendVSCPFrame:
 13393                           	opt stack 0
 13394                           tblptru	equ	0xFF8
 13395                           tblptrh	equ	0xFF7
 13396                           tblptrl	equ	0xFF6
 13397                           tablat	equ	0xFF5
 13398                           prodh	equ	0xFF4
 13399                           prodl	equ	0xFF3
 13400                           intcon	equ	0xFF2
 13401                           postinc0	equ	0xFEE
 13402                           wreg	equ	0xFE8
 13403                           indf1	equ	0xFE7
 13404                           fsr1h	equ	0xFE2
 13405                           fsr1l	equ	0xFE1
 13406                           indf2	equ	0xFDF
 13407                           postinc2	equ	0xFDE
 13408                           postdec2	equ	0xFDD
 13409                           plusw2	equ	0xFDB
 13410                           fsr2h	equ	0xFDA
 13411                           fsr2l	equ	0xFD9
 13412                           status	equ	0xFD8
 13413                           
 13414 ;; *************** function _sendCANFrame *****************
 13415 ;; Defined at:
 13416 ;;		line 2630 in file "../main.c"
 13417 ;; Parameters:    Size  Location     Type
 13418 ;;  id              4   54[COMRAM] unsigned long 
 13419 ;;  dlc             1   58[COMRAM] unsigned char 
 13420 ;;  pdata           2   59[COMRAM] PTR unsigned char 
 13421 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13422 ;; Auto vars:     Size  Location     Type
 13423 ;;  rv              1    0        unsigned char 
 13424 ;; Return value:  Size  Location     Type
 13425 ;;                  1    wreg      unsigned char 
 13426 ;; Registers used:
 13427 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13428 ;; Tracked objects:
 13429 ;;		On entry : F/0
 13430 ;;		On exit  : F/0
 13431 ;;		Unchanged: 0/0
 13432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13433 ;;      Params:         7       0       0       0       0       0       0
 13434 ;;      Locals:         1       0       0       0       0       0       0
 13435 ;;      Temps:          0       0       0       0       0       0       0
 13436 ;;      Totals:         8       0       0       0       0       0       0
 13437 ;;Total ram usage:        8 bytes
 13438 ;; Hardware stack levels used:    1
 13439 ;; Hardware stack levels required when called:    4
 13440 ;; This function calls:
 13441 ;;		_ECANSendMessage
 13442 ;; This function is called by:
 13443 ;;		_sendVSCPFrame
 13444 ;; This function uses a non-reentrant model
 13445 ;;
 13446                           
 13447                           	psect	text53
 13448  003984                     __ptext53:
 13449                           	opt stack 0
 13450  003984                     _sendCANFrame:
 13451                           	opt stack 23
 13452  003984                     l9399:
 13453                           
 13454                           ;main.c: 2635: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 13455  003984  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
 13456  003988  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 13457  00398C  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 13458  003990  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 13459  003994  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 13460  003998  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 13461  00399C  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 13462  0039A0  0E20               	movlw	32
 13463  0039A2  6E19               	movwf	?_ECANSendMessage+7,c
 13464  0039A4  ECD9  F014         	call	_ECANSendMessage	;wreg free
 13465  0039A8  0900               	iorlw	0
 13466  0039AA  E0EC               	bz	l9399
 13467                           
 13468                           ;main.c: 2638: }
 13469                           ;main.c: 2639: }
 13470                           ;main.c: 2641: vscp_omsg.flags = 0;
 13471                           
 13472                           ;main.c: 2637: break;
 13473  0039AC  0100               	movlb	0	; () banked
 13474  0039AE  6BA3               	clrf	_vscp_omsg& (0+255),b
 13475                           
 13476                           ; BSR set to: 0
 13477                           
 13478                           ; BSR set to: 0
 13479                           ;main.c: 2643: return rv;
 13480  0039B0  0C01               	retlw	1
 13481  0039B2                     __end_of_sendCANFrame:
 13482                           	opt stack 0
 13483                           tblptru	equ	0xFF8
 13484                           tblptrh	equ	0xFF7
 13485                           tblptrl	equ	0xFF6
 13486                           tablat	equ	0xFF5
 13487                           prodh	equ	0xFF4
 13488                           prodl	equ	0xFF3
 13489                           intcon	equ	0xFF2
 13490                           postinc0	equ	0xFEE
 13491                           wreg	equ	0xFE8
 13492                           indf1	equ	0xFE7
 13493                           fsr1h	equ	0xFE2
 13494                           fsr1l	equ	0xFE1
 13495                           indf2	equ	0xFDF
 13496                           postinc2	equ	0xFDE
 13497                           postdec2	equ	0xFDD
 13498                           plusw2	equ	0xFDB
 13499                           fsr2h	equ	0xFDA
 13500                           fsr2l	equ	0xFD9
 13501                           status	equ	0xFD8
 13502                           
 13503 ;; *************** function _ECANSendMessage *****************
 13504 ;; Defined at:
 13505 ;;		line 617 in file "../ECAN.c"
 13506 ;; Parameters:    Size  Location     Type
 13507 ;;  id              4   17[COMRAM] unsigned long 
 13508 ;;  data            2   21[COMRAM] PTR unsigned char 
 13509 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13510 ;;  dataLen         1   23[COMRAM] unsigned char 
 13511 ;;  msgFlags        1   24[COMRAM] enum E16306
 13512 ;; Auto vars:     Size  Location     Type
 13513 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
 13514 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13515 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13516 ;;		 -> B0CON(1), 
 13517 ;;  ptr             2   52[COMRAM] PTR unsigned char 
 13518 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13519 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13520 ;;		 -> B0CON(1), 
 13521 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
 13522 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13523 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13524 ;;		 -> B0CON(1), 
 13525 ;;  i               1   51[COMRAM] unsigned char 
 13526 ;;  temp            1   50[COMRAM] unsigned char 
 13527 ;;  tempBSEL0       1   47[COMRAM] struct .
 13528 ;;  j               1   46[COMRAM] unsigned char 
 13529 ;;  buffers         1   45[COMRAM] unsigned char 
 13530 ;;  mode            1   44[COMRAM] unsigned char 
 13531 ;; Return value:  Size  Location     Type
 13532 ;;                  1    wreg      enum E15660
 13533 ;; Registers used:
 13534 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13535 ;; Tracked objects:
 13536 ;;		On entry : 0/0
 13537 ;;		On exit  : 0/0
 13538 ;;		Unchanged: 0/0
 13539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13540 ;;      Params:         8       0       0       0       0       0       0
 13541 ;;      Locals:        28       0       0       0       0       0       0
 13542 ;;      Temps:          1       0       0       0       0       0       0
 13543 ;;      Totals:        37       0       0       0       0       0       0
 13544 ;;Total ram usage:       37 bytes
 13545 ;; Hardware stack levels used:    1
 13546 ;; Hardware stack levels required when called:    3
 13547 ;; This function calls:
 13548 ;;		__CANIDToRegs
 13549 ;; This function is called by:
 13550 ;;		_sendCANFrame
 13551 ;; This function uses a non-reentrant model
 13552 ;;
 13553                           
 13554                           	psect	text54
 13555  0029B2                     __ptext54:
 13556                           	opt stack 0
 13557  0029B2                     _ECANSendMessage:
 13558                           	opt stack 23
 13559                           
 13560                           ;ECAN.c: 619: BYTE mode;
 13561                           ;ECAN.c: 620: BYTE buffers;
 13562                           ;ECAN.c: 628: BYTE i,j;
 13563                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 13564                           ;ECAN.c: 630: BYTE* pb[9];
 13565                           ;ECAN.c: 631: BYTE temp;
 13566                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 13567                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 13568                           
 13569                           ; BSR set to: 0
 13570                           ;incstack = 0
 13571                           ;incstack = 0
 13572  0029B2  0E0F               	movlw	15	;volatile
 13573  0029B4  6E1C               	movwf	ECANSendMessage@pb+1,c
 13574  0029B6  0E40               	movlw	64	;volatile
 13575  0029B8  6E1B               	movwf	ECANSendMessage@pb,c
 13576                           
 13577                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 13578  0029BA  0E0F               	movlw	15	;volatile
 13579  0029BC  6E1E               	movwf	ECANSendMessage@pb+3,c
 13580  0029BE  0E30               	movlw	48	;volatile
 13581  0029C0  6E1D               	movwf	ECANSendMessage@pb+2,c
 13582                           
 13583                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 13584  0029C2  0E0F               	movlw	15	;volatile
 13585  0029C4  6E20               	movwf	ECANSendMessage@pb+5,c
 13586  0029C6  0E20               	movlw	32	;volatile
 13587  0029C8  6E1F               	movwf	ECANSendMessage@pb+4,c
 13588                           
 13589                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 13590  0029CA  0E0E               	movlw	14	;volatile
 13591  0029CC  6E22               	movwf	ECANSendMessage@pb+7,c
 13592  0029CE  0E20               	movlw	32	;volatile
 13593  0029D0  6E21               	movwf	ECANSendMessage@pb+6,c
 13594                           
 13595                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 13596  0029D2  0E0E               	movlw	14	;volatile
 13597  0029D4  6E24               	movwf	ECANSendMessage@pb+9,c
 13598  0029D6  0E30               	movlw	48	;volatile
 13599  0029D8  6E23               	movwf	ECANSendMessage@pb+8,c
 13600                           
 13601                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 13602  0029DA  0E0E               	movlw	14	;volatile
 13603  0029DC  6E26               	movwf	ECANSendMessage@pb+11,c
 13604  0029DE  0E40               	movlw	64	;volatile
 13605  0029E0  6E25               	movwf	ECANSendMessage@pb+10,c
 13606                           
 13607                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 13608  0029E2  0E0E               	movlw	14	;volatile
 13609  0029E4  6E28               	movwf	ECANSendMessage@pb+13,c
 13610  0029E6  0E50               	movlw	80	;volatile
 13611  0029E8  6E27               	movwf	ECANSendMessage@pb+12,c
 13612                           
 13613                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 13614  0029EA  0E0E               	movlw	14	;volatile
 13615  0029EC  6E2A               	movwf	ECANSendMessage@pb+15,c
 13616  0029EE  0E60               	movlw	96	;volatile
 13617  0029F0  6E29               	movwf	ECANSendMessage@pb+14,c
 13618                           
 13619                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 13620  0029F2  0E0E               	movlw	14	;volatile
 13621  0029F4  6E2C               	movwf	ECANSendMessage@pb+17,c
 13622  0029F6  0E70               	movlw	112	;volatile
 13623  0029F8  6E2B               	movwf	ECANSendMessage@pb+16,c
 13624                           
 13625                           ; BSR set to: 14
 13626                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 13627  0029FA  5077               	movf	3959,w,c	;volatile
 13628  0029FC  0BC0               	andlw	192
 13629  0029FE  6E2D               	movwf	ECANSendMessage@mode,c
 13630                           
 13631                           ; BSR set to: 14
 13632                           ;ECAN.c: 660: if ( mode == 0x00 )
 13633  002A00  662D               	tstfsz	ECANSendMessage@mode,c
 13634  002A02  D002               	goto	l9415
 13635                           
 13636                           ; BSR set to: 14
 13637                           ;ECAN.c: 661: buffers = 2;
 13638  002A04  0E02               	movlw	2
 13639  002A06  D001               	goto	L41
 13640  002A08                     l9415:
 13641                           
 13642                           ; BSR set to: 14
 13643                           ;ECAN.c: 662: else
 13644                           ;ECAN.c: 663: buffers = 8;
 13645  002A08  0E08               	movlw	8
 13646  002A0A                     L41:
 13647  002A0A  6E2E               	movwf	ECANSendMessage@buffers,c
 13648                           
 13649                           ; BSR set to: 14
 13650                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 13651  002A0C  010D               	movlb	13	; () banked
 13652  002A0E  90D8               	bcf	status,0,c
 13653  002A10  31F8               	rrcf	248,w,b	;volatile
 13654  002A12  6E30               	movwf	ECANSendMessage@tempBSEL0,c
 13655                           
 13656                           ; BSR set to: 13
 13657                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 13658  002A14  6A34               	clrf	ECANSendMessage@i,c
 13659  002A16  D07D               	goto	l9475
 13660  002A18                     l9421:
 13661                           
 13662                           ;ECAN.c: 688: {
 13663                           ;ECAN.c: 693: ptr = pb[i];
 13664  002A18  5034               	movf	ECANSendMessage@i,w,c
 13665  002A1A  0D02               	mullw	2
 13666  002A1C  50F3               	movf	prodl,w,c
 13667  002A1E  0F1B               	addlw	low ECANSendMessage@pb
 13668  002A20  6ED9               	movwf	fsr2l,c
 13669  002A22  6ADA               	clrf	fsr2h,c
 13670  002A24  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
 13671  002A28  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
 13672                           
 13673                           ;ECAN.c: 694: tempPtr = ptr;
 13674  002A2C  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 13675  002A30  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 13676                           
 13677                           ;ECAN.c: 702: if ( i > 2 )
 13678  002A34  0E02               	movlw	2
 13679  002A36  6434               	cpfsgt	ECANSendMessage@i,c
 13680  002A38  D004               	goto	l9433
 13681                           
 13682                           ;ECAN.c: 703: {
 13683                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 13684  002A3A  90D8               	bcf	status,0,c
 13685  002A3C  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
 13686                           
 13687                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 13688  002A3E  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
 13689  002A40  D067               	goto	l9473
 13690  002A42                     l9433:
 13691                           
 13692                           ;ECAN.c: 714: }
 13693                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 13694  002A42  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13695  002A46  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13696  002A4A  50DF               	movf	indf2,w,c
 13697  002A4C  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13698  002A4E  B61A               	btfsc	??_ECANSendMessage,3,c
 13699  002A50  D05F               	goto	l9473
 13700                           
 13701                           ;ECAN.c: 721: {
 13702                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 13703  002A52  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13704  002A56  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13705  002A5A  0EFC               	movlw	252
 13706  002A5C  16DF               	andwf	indf2,f,c
 13707                           
 13708                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 13709  002A5E  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 13710  002A62  0E03               	movlw	3
 13711  002A64  161A               	andwf	??_ECANSendMessage,f,c
 13712  002A66  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13713  002A6A  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13714  002A6E  501A               	movf	??_ECANSendMessage,w,c
 13715  002A70  12DF               	iorwf	indf2,f,c
 13716                           
 13717                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 13718  002A72  AC19               	btfss	ECANSendMessage@msgFlags,6,c
 13719  002A74  D004               	goto	l863
 13720                           
 13721                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 13722  002A76  5018               	movf	ECANSendMessage@dataLen,w,c
 13723  002A78  0940               	iorlw	64
 13724  002A7A  6E33               	movwf	ECANSendMessage@temp,c
 13725  002A7C  D002               	goto	l9443
 13726  002A7E                     l863:
 13727                           
 13728                           ;ECAN.c: 729: else
 13729                           ;ECAN.c: 730: temp = dataLen;
 13730  002A7E  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 13731  002A82                     l9443:
 13732                           
 13733                           ;ECAN.c: 732: *(ptr+5) = temp;
 13734  002A82  EE20 F005          	lfsr	2,5
 13735  002A86  5035               	movf	ECANSendMessage@ptr,w,c
 13736  002A88  26D9               	addwf	fsr2l,f,c
 13737  002A8A  5036               	movf	ECANSendMessage@ptr+1,w,c
 13738  002A8C  22DA               	addwfc	fsr2h,f,c
 13739  002A8E  C033  FFDF         	movff	ECANSendMessage@temp,indf2
 13740                           
 13741                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 13742  002A92  AA19               	btfss	ECANSendMessage@msgFlags,5,c
 13743  002A94  D003               	goto	l865
 13744                           
 13745                           ;ECAN.c: 736: temp = 1;
 13746  002A96  0E01               	movlw	1
 13747  002A98  6E33               	movwf	ECANSendMessage@temp,c
 13748  002A9A  D001               	goto	l9449
 13749  002A9C                     l865:
 13750                           
 13751                           ;ECAN.c: 738: else
 13752                           ;ECAN.c: 739: temp = 0;
 13753  002A9C  6A33               	clrf	ECANSendMessage@temp,c
 13754  002A9E                     l9449:
 13755                           
 13756                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 13757  002A9E  2835               	incf	ECANSendMessage@ptr,w,c
 13758  002AA0  6E08               	movwf	?__CANIDToRegs,c
 13759  002AA2  0E00               	movlw	0
 13760  002AA4  2036               	addwfc	ECANSendMessage@ptr+1,w,c
 13761  002AA6  6E09               	movwf	?__CANIDToRegs+1,c
 13762  002AA8  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 13763  002AAC  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 13764  002AB0  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 13765  002AB4  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 13766  002AB8  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 13767  002ABC  EC4E  F017         	call	__CANIDToRegs	;wreg free
 13768                           
 13769                           ;ECAN.c: 745: ptr += 6;
 13770  002AC0  0E06               	movlw	6
 13771  002AC2  2635               	addwf	ECANSendMessage@ptr,f,c
 13772  002AC4  0E00               	movlw	0
 13773  002AC6  2236               	addwfc	ECANSendMessage@ptr+1,f,c
 13774                           
 13775                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 13776  002AC8  6A2F               	clrf	ECANSendMessage@j,c
 13777  002ACA  D00F               	goto	l9463
 13778  002ACC                     l9455:
 13779                           
 13780                           ;ECAN.c: 748: *ptr++ = *data++;
 13781  002ACC  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
 13782  002AD0  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 13783  002AD4  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 13784  002AD8  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 13785  002ADC  CFDF FFE7          	movff	indf2,indf1
 13786  002AE0  4A16               	infsnz	ECANSendMessage@data,f,c
 13787  002AE2  2A17               	incf	ECANSendMessage@data+1,f,c
 13788  002AE4  4A35               	infsnz	ECANSendMessage@ptr,f,c
 13789  002AE6  2A36               	incf	ECANSendMessage@ptr+1,f,c
 13790  002AE8  2A2F               	incf	ECANSendMessage@j,f,c
 13791  002AEA                     l9463:
 13792  002AEA  5018               	movf	ECANSendMessage@dataLen,w,c
 13793  002AEC  5C2F               	subwf	ECANSendMessage@j,w,c
 13794  002AEE  E3EE               	bnc	l9455
 13795                           
 13796                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 13797  002AF0  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13798  002AF4  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13799  002AF8  50DF               	movf	indf2,w,c
 13800  002AFA  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13801  002AFC  B41A               	btfsc	??_ECANSendMessage,2,c
 13802  002AFE  D006               	goto	l9469
 13803                           
 13804                           ;ECAN.c: 753: *tempPtr |= 0x08;
 13805  002B00  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13806  002B04  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13807  002B08  0E00               	movlw	0
 13808  002B0A  86DB               	bsf	plusw2,3,c
 13809  002B0C                     l9469:
 13810                           
 13811                           ;ECAN.c: 755: return TRUE;
 13812  002B0C  0E01               	movlw	1
 13813  002B0E  D005               	goto	l871
 13814  002B10                     l9473:
 13815  002B10  2A34               	incf	ECANSendMessage@i,f,c
 13816  002B12                     l9475:
 13817  002B12  502E               	movf	ECANSendMessage@buffers,w,c
 13818  002B14  5C34               	subwf	ECANSendMessage@i,w,c
 13819  002B16  E380               	bnc	l9421
 13820                           
 13821                           ;ECAN.c: 756: }
 13822                           ;ECAN.c: 757: }
 13823                           ;ECAN.c: 760: return FALSE;
 13824  002B18  0E00               	movlw	0
 13825  002B1A                     l871:
 13826  002B1A  0012               	return	
 13827  002B1C                     __end_of_ECANSendMessage:
 13828                           	opt stack 0
 13829                           tblptru	equ	0xFF8
 13830                           tblptrh	equ	0xFF7
 13831                           tblptrl	equ	0xFF6
 13832                           tablat	equ	0xFF5
 13833                           prodh	equ	0xFF4
 13834                           prodl	equ	0xFF3
 13835                           intcon	equ	0xFF2
 13836                           postinc0	equ	0xFEE
 13837                           wreg	equ	0xFE8
 13838                           indf1	equ	0xFE7
 13839                           fsr1h	equ	0xFE2
 13840                           fsr1l	equ	0xFE1
 13841                           indf2	equ	0xFDF
 13842                           postinc2	equ	0xFDE
 13843                           postdec2	equ	0xFDD
 13844                           plusw2	equ	0xFDB
 13845                           fsr2h	equ	0xFDA
 13846                           fsr2l	equ	0xFD9
 13847                           status	equ	0xFD8
 13848                           
 13849 ;; *************** function __CANIDToRegs *****************
 13850 ;; Defined at:
 13851 ;;		line 1099 in file "../ECAN.c"
 13852 ;; Parameters:    Size  Location     Type
 13853 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 13854 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13855 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13856 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
 13857 ;;  val             4    9[COMRAM] unsigned long 
 13858 ;;  type            1   13[COMRAM] unsigned char 
 13859 ;; Auto vars:     Size  Location     Type
 13860 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
 13861 ;;		 -> _CANIDToRegs@val(4), 
 13862 ;; Return value:  Size  Location     Type
 13863 ;;		None               void
 13864 ;; Registers used:
 13865 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13866 ;; Tracked objects:
 13867 ;;		On entry : 0/F
 13868 ;;		On exit  : 0/0
 13869 ;;		Unchanged: 0/0
 13870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13871 ;;      Params:         7       0       0       0       0       0       0
 13872 ;;      Locals:         1       0       0       0       0       0       0
 13873 ;;      Temps:          2       0       0       0       0       0       0
 13874 ;;      Totals:        10       0       0       0       0       0       0
 13875 ;;Total ram usage:       10 bytes
 13876 ;; Hardware stack levels used:    1
 13877 ;; Hardware stack levels required when called:    2
 13878 ;; This function calls:
 13879 ;;		Nothing
 13880 ;; This function is called by:
 13881 ;;		_calculateSetFilterMask
 13882 ;;		_ECANSendMessage
 13883 ;; This function uses a non-reentrant model
 13884 ;;
 13885                           
 13886                           	psect	text55
 13887  002E9C                     __ptext55:
 13888                           	opt stack 0
 13889  002E9C                     __CANIDToRegs:
 13890                           	opt stack 23
 13891                           
 13892                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 13893                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 13894                           
 13895                           ;incstack = 0
 13896                           ;incstack = 0
 13897  002E9C  0E0A               	movlw	low __CANIDToRegs@val
 13898  002E9E  6E11               	movwf	__CANIDToRegs@Value,c
 13899                           
 13900                           ;ECAN.c: 1104: if ( type == 0 )
 13901  002EA0  660E               	tstfsz	__CANIDToRegs@type,c
 13902  002EA2  D022               	goto	l9491
 13903                           
 13904                           ;ECAN.c: 1105: {
 13905                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 13906  002EA4  5011               	movf	__CANIDToRegs@Value,w,c
 13907  002EA6  6ED9               	movwf	fsr2l,c
 13908  002EA8  6ADA               	clrf	fsr2h,c
 13909  002EAA  50DF               	movf	indf2,w,c
 13910  002EAC  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13911  002EAE  90D8               	bcf	status,0,c
 13912  002EB0  320F               	rrcf	??__CANIDToRegs,f,c
 13913  002EB2  90D8               	bcf	status,0,c
 13914  002EB4  320F               	rrcf	??__CANIDToRegs,f,c
 13915  002EB6  90D8               	bcf	status,0,c
 13916  002EB8  300F               	rrcf	??__CANIDToRegs,w,c
 13917                           
 13918                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 13919  002EBA  D862               	call	PL30	;call to abstracted procedure
 13920  002EBC  2AD9               	incf	fsr2l,f,c
 13921  002EBE  6ADA               	clrf	fsr2h,c
 13922  002EC0  D872               	call	PL74	;call to abstracted procedure
 13923  002EC2                     u10955:
 13924  002EC2  90D8               	bcf	status,0,c
 13925  002EC4  360F               	rlcf	??__CANIDToRegs,f,c
 13926  002EC6  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13927  002EC8  D7FC               	goto	u10955
 13928  002ECA  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13929                           
 13930                           ;ECAN.c: 1109: ptr++;
 13931                           
 13932                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 13933  002ECE  D846               	call	PL18	;call to abstracted procedure
 13934  002ED0  D86A               	call	PL74	;call to abstracted procedure
 13935  002ED2                     u10965:
 13936  002ED2  90D8               	bcf	status,0,c
 13937  002ED4  360F               	rlcf	??__CANIDToRegs,f,c
 13938  002ED6  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13939  002ED8  D7FC               	goto	u10965
 13940  002EDA  500F               	movf	??__CANIDToRegs,w,c
 13941  002EDC  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13942  002EE0  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13943  002EE4  6EDF               	movwf	indf2,c
 13944                           
 13945                           ;ECAN.c: 1111: }
 13946  002EE6  D039               	goto	l925
 13947  002EE8                     l9491:
 13948                           
 13949                           ;ECAN.c: 1112: else
 13950                           ;ECAN.c: 1113: {
 13951                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 13952  002EE8  5011               	movf	__CANIDToRegs@Value,w,c
 13953  002EEA  D842               	call	PL26	;call to abstracted procedure
 13954  002EEC  0E05               	movlw	5
 13955  002EEE  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13956  002EF0                     u10975:
 13957  002EF0  90D8               	bcf	status,0,c
 13958  002EF2  320F               	rrcf	??__CANIDToRegs,f,c
 13959  002EF4  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13960  002EF6  D7FC               	goto	u10975
 13961  002EF8  500F               	movf	??__CANIDToRegs,w,c
 13962                           
 13963                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 13964  002EFA  D842               	call	PL30	;call to abstracted procedure
 13965  002EFC  0E03               	movlw	3
 13966  002EFE  D849               	call	PL40	;call to abstracted procedure
 13967  002F00  360F               	rlcf	??__CANIDToRegs,f,c
 13968  002F02  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13969                           
 13970                           ;ECAN.c: 1117: ptr++;
 13971                           
 13972                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 13973  002F06  D82A               	call	PL18	;call to abstracted procedure
 13974  002F08  0E02               	movlw	2
 13975  002F0A  D843               	call	PL40	;call to abstracted procedure
 13976  002F0C  340F               	rlcf	??__CANIDToRegs,w,c
 13977  002F0E  0BE0               	andlw	224
 13978  002F10  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13979  002F14  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13980  002F18  6EDF               	movwf	indf2,c
 13981                           
 13982                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 13983  002F1A  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13984  002F1E  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13985  002F22  0E00               	movlw	0
 13986  002F24  86DB               	bsf	plusw2,3,c
 13987                           
 13988                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 13989  002F26  5011               	movf	__CANIDToRegs@Value,w,c
 13990  002F28  D823               	call	PL26	;call to abstracted procedure
 13991  002F2A  0E03               	movlw	3
 13992  002F2C  160F               	andwf	??__CANIDToRegs,f,c
 13993  002F2E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13994                           
 13995                           ;ECAN.c: 1122: ptr++;
 13996                           
 13997                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 13998  002F32  D814               	call	PL18	;call to abstracted procedure
 13999  002F34  2AD9               	incf	fsr2l,f,c
 14000  002F36  6ADA               	clrf	fsr2h,c
 14001  002F38  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 14002  002F3C  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 14003  002F40  CFDF FFE7          	movff	indf2,indf1
 14004                           
 14005                           ;ECAN.c: 1124: ptr++;
 14006  002F44  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 14007  002F46  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 14008                           
 14009                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 14010  002F48  5011               	movf	__CANIDToRegs@Value,w,c
 14011  002F4A  6ED9               	movwf	fsr2l,c
 14012  002F4C  6ADA               	clrf	fsr2h,c
 14013  002F4E  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 14014  002F52  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 14015  002F56  CFDF FFE7          	movff	indf2,indf1
 14016  002F5A                     l925:
 14017  002F5A  0012               	return	
 14018  002F5C                     __end_of__CANIDToRegs:
 14019                           	opt stack 0
 14020  002F5C                     PL18:
 14021                           	opt stack 23
 14022  002F5C  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 14023  002F60  500F               	movf	??__CANIDToRegs,w,c
 14024  002F62  12DF               	iorwf	indf2,f,c
 14025  002F64  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 14026  002F66  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 14027  002F68  5011               	movf	__CANIDToRegs@Value,w,c
 14028  002F6A  6ED9               	movwf	fsr2l,c
 14029  002F6C  6ADA               	clrf	fsr2h,c
 14030  002F6E  0012               	return	
 14031  002F70                     __end_ofPL18:
 14032                           	opt stack 0
 14033  002F70                     PL26:
 14034                           	opt stack 23
 14035  002F70  6ED9               	movwf	fsr2l,c
 14036  002F72  6ADA               	clrf	fsr2h,c
 14037  002F74  0E02               	movlw	2
 14038  002F76  26D9               	addwf	fsr2l,f,c
 14039  002F78  6ADA               	clrf	fsr2h,c
 14040  002F7A  50DF               	movf	indf2,w,c
 14041  002F7C  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 14042  002F7E  0012               	return	
 14043  002F80                     __end_ofPL26:
 14044                           	opt stack 0
 14045  002F80                     PL30:
 14046                           	opt stack 23
 14047  002F80  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 14048  002F84  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 14049  002F88  6EDF               	movwf	indf2,c
 14050  002F8A  5011               	movf	__CANIDToRegs@Value,w,c
 14051  002F8C  6ED9               	movwf	fsr2l,c
 14052  002F8E  6ADA               	clrf	fsr2h,c
 14053  002F90  0012               	return	
 14054  002F92                     __end_ofPL30:
 14055                           	opt stack 0
 14056  002F92                     PL40:
 14057                           	opt stack 23
 14058  002F92  26D9               	addwf	fsr2l,f,c
 14059  002F94  6ADA               	clrf	fsr2h,c
 14060  002F96  50DF               	movf	indf2,w,c
 14061  002F98  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 14062  002F9A  90D8               	bcf	status,0,c
 14063  002F9C  360F               	rlcf	??__CANIDToRegs,f,c
 14064  002F9E  90D8               	bcf	status,0,c
 14065  002FA0  360F               	rlcf	??__CANIDToRegs,f,c
 14066  002FA2  90D8               	bcf	status,0,c
 14067  002FA4  0012               	return	
 14068  002FA6                     __end_ofPL40:
 14069                           	opt stack 0
 14070  002FA6                     PL74:
 14071                           	opt stack 23
 14072  002FA6  50DF               	movf	indf2,w,c
 14073  002FA8  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 14074  002FAA  0E05               	movlw	5
 14075  002FAC  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 14076  002FAE  0C05               	retlw	5
 14077  002FB0                     __end_ofPL74:
 14078                           	opt stack 0
 14079                           tblptru	equ	0xFF8
 14080                           tblptrh	equ	0xFF7
 14081                           tblptrl	equ	0xFF6
 14082                           tablat	equ	0xFF5
 14083                           prodh	equ	0xFF4
 14084                           prodl	equ	0xFF3
 14085                           intcon	equ	0xFF2
 14086                           postinc0	equ	0xFEE
 14087                           wreg	equ	0xFE8
 14088                           indf1	equ	0xFE7
 14089                           fsr1h	equ	0xFE2
 14090                           fsr1l	equ	0xFE1
 14091                           indf2	equ	0xFDF
 14092                           postinc2	equ	0xFDE
 14093                           postdec2	equ	0xFDD
 14094                           plusw2	equ	0xFDB
 14095                           fsr2h	equ	0xFDA
 14096                           fsr2l	equ	0xFD9
 14097                           status	equ	0xFD8
 14098                           
 14099 ;; *************** function _vscp_getEvent *****************
 14100 ;; Defined at:
 14101 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 14102 ;; Parameters:    Size  Location     Type
 14103 ;;		None
 14104 ;; Auto vars:     Size  Location     Type
 14105 ;;  rv              1   43[COMRAM] unsigned char 
 14106 ;; Return value:  Size  Location     Type
 14107 ;;                  1    wreg      unsigned char 
 14108 ;; Registers used:
 14109 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14110 ;; Tracked objects:
 14111 ;;		On entry : F/0
 14112 ;;		On exit  : 0/0
 14113 ;;		Unchanged: 0/0
 14114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14115 ;;      Params:         0       0       0       0       0       0       0
 14116 ;;      Locals:         1       0       0       0       0       0       0
 14117 ;;      Temps:          0       0       0       0       0       0       0
 14118 ;;      Totals:         1       0       0       0       0       0       0
 14119 ;;Total ram usage:        1 bytes
 14120 ;; Hardware stack levels used:    1
 14121 ;; Hardware stack levels required when called:    6
 14122 ;; This function calls:
 14123 ;;		_getVSCPFrame
 14124 ;; This function is called by:
 14125 ;;		_main
 14126 ;; This function uses a non-reentrant model
 14127 ;;
 14128                           
 14129                           	psect	text56
 14130  003A08                     __ptext56:
 14131                           	opt stack 0
 14132  003A08                     _vscp_getEvent:
 14133                           	opt stack 24
 14134                           
 14135                           ; BSR set to: 0
 14136                           ;vscp_firmware.c: 1309: int8_t rv;
 14137                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 14138                           
 14139                           ;incstack = 0
 14140                           ;incstack = 0
 14141  003A08  BF95               	btfsc	_vscp_imsg& (0+255),7,b
 14142  003A0A  D012               	goto	l1299
 14143                           
 14144                           ; BSR set to: 0
 14145                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 14146                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 14147                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 14148                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 14149                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 14150                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
 14151  003A0C  0E99               	movlw	low (_vscp_imsg+4)
 14152  003A0E  6E1E               	movwf	?_getVSCPFrame,c
 14153  003A10  0E9A               	movlw	low (_vscp_imsg+5)
 14154  003A12  6E1F               	movwf	?_getVSCPFrame+1,c
 14155  003A14  0E96               	movlw	low (_vscp_imsg+1)
 14156  003A16  6E20               	movwf	?_getVSCPFrame+2,c
 14157  003A18  0E95               	movlw	low _vscp_imsg
 14158  003A1A  6E21               	movwf	?_getVSCPFrame+3,c
 14159  003A1C  0E9B               	movlw	low (_vscp_imsg+6)
 14160  003A1E  6E22               	movwf	?_getVSCPFrame+4,c
 14161  003A20  0E97               	movlw	(_vscp_imsg+2)& (0+255)
 14162  003A22  EC5C  F01B         	call	_getVSCPFrame
 14163  003A26  6E2C               	movwf	vscp_getEvent@rv,c
 14164  003A28  502C               	movf	vscp_getEvent@rv& (0+255),w,c
 14165  003A2A  E002               	bz	l1299
 14166                           
 14167                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 14168  003A2C  0100               	movlb	0	; () banked
 14169  003A2E  8F95               	bsf	_vscp_imsg& (0+255),7,b
 14170  003A30                     l1299:
 14171  003A30  0012               	return	
 14172  003A32                     __end_of_vscp_getEvent:
 14173                           	opt stack 0
 14174                           tblptru	equ	0xFF8
 14175                           tblptrh	equ	0xFF7
 14176                           tblptrl	equ	0xFF6
 14177                           tablat	equ	0xFF5
 14178                           prodh	equ	0xFF4
 14179                           prodl	equ	0xFF3
 14180                           intcon	equ	0xFF2
 14181                           postinc0	equ	0xFEE
 14182                           wreg	equ	0xFE8
 14183                           indf1	equ	0xFE7
 14184                           fsr1h	equ	0xFE2
 14185                           fsr1l	equ	0xFE1
 14186                           indf2	equ	0xFDF
 14187                           postinc2	equ	0xFDE
 14188                           postdec2	equ	0xFDD
 14189                           plusw2	equ	0xFDB
 14190                           fsr2h	equ	0xFDA
 14191                           fsr2l	equ	0xFD9
 14192                           status	equ	0xFD8
 14193                           
 14194 ;; *************** function _getVSCPFrame *****************
 14195 ;; Defined at:
 14196 ;;		line 2609 in file "../main.c"
 14197 ;; Parameters:    Size  Location     Type
 14198 ;;  pvscpclass      1    wreg     PTR unsigned short 
 14199 ;;		 -> vscp_imsg(14), 
 14200 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
 14201 ;;		 -> vscp_imsg(14), 
 14202 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
 14203 ;;		 -> vscp_imsg(14), 
 14204 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
 14205 ;;		 -> vscp_imsg(14), 
 14206 ;;  pSize           1   32[COMRAM] PTR unsigned char 
 14207 ;;		 -> vscp_imsg(14), 
 14208 ;;  pData           1   33[COMRAM] PTR unsigned char 
 14209 ;;		 -> vscp_imsg(14), 
 14210 ;; Auto vars:     Size  Location     Type
 14211 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
 14212 ;;		 -> vscp_imsg(14), 
 14213 ;;  id              4   39[COMRAM] unsigned long 
 14214 ;; Return value:  Size  Location     Type
 14215 ;;                  1    wreg      unsigned char 
 14216 ;; Registers used:
 14217 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14218 ;; Tracked objects:
 14219 ;;		On entry : F/0
 14220 ;;		On exit  : 0/0
 14221 ;;		Unchanged: 0/0
 14222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14223 ;;      Params:         5       0       0       0       0       0       0
 14224 ;;      Locals:         5       0       0       0       0       0       0
 14225 ;;      Temps:          4       0       0       0       0       0       0
 14226 ;;      Totals:        14       0       0       0       0       0       0
 14227 ;;Total ram usage:       14 bytes
 14228 ;; Hardware stack levels used:    1
 14229 ;; Hardware stack levels required when called:    5
 14230 ;; This function calls:
 14231 ;;		_getCANFrame
 14232 ;; This function is called by:
 14233 ;;		_vscp_getEvent
 14234 ;; This function uses a non-reentrant model
 14235 ;;
 14236                           
 14237                           	psect	text57
 14238  0036B8                     __ptext57:
 14239                           	opt stack 0
 14240  0036B8                     _getVSCPFrame:
 14241                           	opt stack 24
 14242                           
 14243                           ;incstack = 0
 14244                           ;incstack = 0
 14245                           ;getVSCPFrame@pvscpclass stored from wreg
 14246  0036B8  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
 14247                           
 14248                           ; BSR set to: 0
 14249                           ;main.c: 2610: uint32_t id;
 14250                           ;main.c: 2612: if ( !getCANFrame(&id, pSize, pData) ) {
 14251  0036BC  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
 14252  0036C0  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
 14253  0036C4  0E28               	movlw	getVSCPFrame@id& (0+255)
 14254  0036C6  ECD9  F01C         	call	_getCANFrame
 14255  0036CA  0900               	iorlw	0
 14256  0036CC  E102               	bnz	l6935
 14257                           
 14258                           ;main.c: 2613: return 0;
 14259  0036CE  0E00               	movlw	0
 14260  0036D0  D02E               	goto	l665
 14261  0036D2                     l6935:
 14262                           
 14263                           ;main.c: 2614: }
 14264                           ;main.c: 2616: *pNodeId = id & 0x0ff;
 14265  0036D2  501F               	movf	getVSCPFrame@pNodeId,w,c
 14266  0036D4  6ED9               	movwf	fsr2l,c
 14267  0036D6  6ADA               	clrf	fsr2h,c
 14268  0036D8  C028  FFDF         	movff	getVSCPFrame@id,indf2
 14269                           
 14270                           ;main.c: 2617: *pvscptype = (id >> 8) & 0xff;
 14271  0036DC  501E               	movf	getVSCPFrame@pvscptype,w,c
 14272  0036DE  6ED9               	movwf	fsr2l,c
 14273  0036E0  6ADA               	clrf	fsr2h,c
 14274  0036E2  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
 14275                           
 14276                           ;main.c: 2618: *pvscpclass = (id >> 16) & 0x1ff;
 14277  0036E6  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 14278  0036E8  6E23               	movwf	??_getVSCPFrame& (0+255),c
 14279  0036EA  0E01               	movlw	1
 14280  0036EC  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 14281  0036EE  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
 14282  0036F0  5027               	movf	getVSCPFrame@pvscpclass,w,c
 14283  0036F2  6ED9               	movwf	fsr2l,c
 14284  0036F4  6ADA               	clrf	fsr2h,c
 14285  0036F6  C023  FFDE         	movff	??_getVSCPFrame,postinc2
 14286  0036FA  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 14287                           
 14288                           ;main.c: 2619: *pPriority = (uint16_t) (0x07 & (id >> 26));
 14289  0036FE  5020               	movf	getVSCPFrame@pPriority,w,c
 14290  003700  6ED9               	movwf	fsr2l,c
 14291  003702  6ADA               	clrf	fsr2h,c
 14292  003704  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 14293  003708  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 14294  00370C  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 14295  003710  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 14296  003714  0E1B               	movlw	27
 14297  003716  D005               	goto	u6940
 14298  003718                     u6945:
 14299  003718  90D8               	bcf	status,0,c
 14300  00371A  3226               	rrcf	??_getVSCPFrame+3,f,c
 14301  00371C  3225               	rrcf	??_getVSCPFrame+2,f,c
 14302  00371E  3224               	rrcf	??_getVSCPFrame+1,f,c
 14303  003720  3223               	rrcf	??_getVSCPFrame,f,c
 14304  003722                     u6940:
 14305  003722  2EE8               	decfsz	wreg,f,c
 14306  003724  D7F9               	goto	u6945
 14307  003726  5023               	movf	??_getVSCPFrame,w,c
 14308  003728  0B07               	andlw	7
 14309  00372A  6EDF               	movwf	indf2,c
 14310                           
 14311                           ;main.c: 2621: return 1;
 14312  00372C  0E01               	movlw	1
 14313  00372E                     l665:
 14314  00372E  0012               	return	
 14315  003730                     __end_of_getVSCPFrame:
 14316                           	opt stack 0
 14317                           tblptru	equ	0xFF8
 14318                           tblptrh	equ	0xFF7
 14319                           tblptrl	equ	0xFF6
 14320                           tablat	equ	0xFF5
 14321                           prodh	equ	0xFF4
 14322                           prodl	equ	0xFF3
 14323                           intcon	equ	0xFF2
 14324                           postinc0	equ	0xFEE
 14325                           wreg	equ	0xFE8
 14326                           indf1	equ	0xFE7
 14327                           fsr1h	equ	0xFE2
 14328                           fsr1l	equ	0xFE1
 14329                           indf2	equ	0xFDF
 14330                           postinc2	equ	0xFDE
 14331                           postdec2	equ	0xFDD
 14332                           plusw2	equ	0xFDB
 14333                           fsr2h	equ	0xFDA
 14334                           fsr2l	equ	0xFD9
 14335                           status	equ	0xFD8
 14336                           
 14337 ;; *************** function _getCANFrame *****************
 14338 ;; Defined at:
 14339 ;;		line 2651 in file "../main.c"
 14340 ;; Parameters:    Size  Location     Type
 14341 ;;  pid             1    wreg     PTR unsigned long 
 14342 ;;		 -> getVSCPFrame@id(4), 
 14343 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 14344 ;;		 -> vscp_imsg(14), 
 14345 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 14346 ;;		 -> vscp_imsg(14), 
 14347 ;; Auto vars:     Size  Location     Type
 14348 ;;  pid             1   27[COMRAM] PTR unsigned long 
 14349 ;;		 -> getVSCPFrame@id(4), 
 14350 ;;  flags           1   28[COMRAM] enum E16332
 14351 ;; Return value:  Size  Location     Type
 14352 ;;                  1    wreg      unsigned char 
 14353 ;; Registers used:
 14354 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14355 ;; Tracked objects:
 14356 ;;		On entry : F/0
 14357 ;;		On exit  : 0/0
 14358 ;;		Unchanged: 0/0
 14359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14360 ;;      Params:         2       0       0       0       0       0       0
 14361 ;;      Locals:         2       0       0       0       0       0       0
 14362 ;;      Temps:          0       0       0       0       0       0       0
 14363 ;;      Totals:         4       0       0       0       0       0       0
 14364 ;;Total ram usage:        4 bytes
 14365 ;; Hardware stack levels used:    1
 14366 ;; Hardware stack levels required when called:    4
 14367 ;; This function calls:
 14368 ;;		_ECANReceiveMessage
 14369 ;; This function is called by:
 14370 ;;		_getVSCPFrame
 14371 ;; This function uses a non-reentrant model
 14372 ;;
 14373                           
 14374                           	psect	text58
 14375  0039B2                     __ptext58:
 14376                           	opt stack 0
 14377  0039B2                     _getCANFrame:
 14378                           	opt stack 24
 14379                           
 14380                           ;incstack = 0
 14381                           ;incstack = 0
 14382                           ;getCANFrame@pid stored from wreg
 14383  0039B2  CFE8 F01C          	movff	wreg,getCANFrame@pid
 14384                           
 14385                           ; BSR set to: 0
 14386                           ;main.c: 2652: ECAN_RX_MSG_FLAGS flags;
 14387                           ;main.c: 2656: if (vscp_imsg.flags & 0x80) return 0;
 14388  0039B6  AF95               	btfss	_vscp_imsg& (0+255),7,b
 14389  0039B8  D002               	goto	l6951
 14390  0039BA                     l6947:
 14391  0039BA  0E00               	movlw	0
 14392  0039BC  D00F               	goto	l676
 14393  0039BE                     l6951:
 14394                           
 14395                           ; BSR set to: 0
 14396                           ;main.c: 2658: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 14397  0039BE  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 14398  0039C2  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 14399  0039C6  0E1D               	movlw	low getCANFrame@flags
 14400  0039C8  6E11               	movwf	?_ECANReceiveMessage+2,c
 14401  0039CA  501C               	movf	getCANFrame@pid,w,c
 14402  0039CC  EC0E  F011         	call	_ECANReceiveMessage
 14403  0039D0  0900               	iorlw	0
 14404  0039D2  E0F3               	bz	l6947
 14405                           
 14406                           ;main.c: 2661: if (flags & ECAN_RX_RTR_FRAME) return 0;
 14407  0039D4  AC1D               	btfss	getCANFrame@flags,6,c
 14408                           
 14409                           ;main.c: 2664: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 14410  0039D6  AA1D               	btfss	getCANFrame@flags,5,c
 14411  0039D8  D7F0               	goto	l6947
 14412                           
 14413                           ;main.c: 2666: return 1;
 14414  0039DA  0E01               	movlw	1
 14415  0039DC                     l676:
 14416  0039DC  0012               	return	
 14417  0039DE                     __end_of_getCANFrame:
 14418                           	opt stack 0
 14419                           tblptru	equ	0xFF8
 14420                           tblptrh	equ	0xFF7
 14421                           tblptrl	equ	0xFF6
 14422                           tablat	equ	0xFF5
 14423                           prodh	equ	0xFF4
 14424                           prodl	equ	0xFF3
 14425                           intcon	equ	0xFF2
 14426                           postinc0	equ	0xFEE
 14427                           wreg	equ	0xFE8
 14428                           indf1	equ	0xFE7
 14429                           fsr1h	equ	0xFE2
 14430                           fsr1l	equ	0xFE1
 14431                           indf2	equ	0xFDF
 14432                           postinc2	equ	0xFDE
 14433                           postdec2	equ	0xFDD
 14434                           plusw2	equ	0xFDB
 14435                           fsr2h	equ	0xFDA
 14436                           fsr2l	equ	0xFD9
 14437                           status	equ	0xFD8
 14438                           
 14439 ;; *************** function _ECANReceiveMessage *****************
 14440 ;; Defined at:
 14441 ;;		line 803 in file "../ECAN.c"
 14442 ;; Parameters:    Size  Location     Type
 14443 ;;  id              1    wreg     PTR unsigned long 
 14444 ;;		 -> getVSCPFrame@id(4), 
 14445 ;;  data            1   14[COMRAM] PTR unsigned char 
 14446 ;;		 -> vscp_imsg(14), 
 14447 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 14448 ;;		 -> vscp_imsg(14), 
 14449 ;;  msgFlags        1   16[COMRAM] PTR enum E16324
 14450 ;;		 -> getCANFrame@flags(1), 
 14451 ;; Auto vars:     Size  Location     Type
 14452 ;;  id              1   19[COMRAM] PTR unsigned long 
 14453 ;;		 -> getVSCPFrame@id(4), 
 14454 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 14455 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14456 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14457 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
 14458 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14459 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14460 ;;  temp            1   22[COMRAM] struct .
 14461 ;;  mode            1   21[COMRAM] unsigned char 
 14462 ;;  i               1   20[COMRAM] unsigned char 
 14463 ;; Return value:  Size  Location     Type
 14464 ;;                  1    wreg      enum E15660
 14465 ;; Registers used:
 14466 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14467 ;; Tracked objects:
 14468 ;;		On entry : F/0
 14469 ;;		On exit  : 0/0
 14470 ;;		Unchanged: 0/0
 14471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14472 ;;      Params:         3       0       0       0       0       0       0
 14473 ;;      Locals:         8       0       0       0       0       0       0
 14474 ;;      Temps:          0       0       0       0       0       0       0
 14475 ;;      Totals:        11       0       0       0       0       0       0
 14476 ;;Total ram usage:       11 bytes
 14477 ;; Hardware stack levels used:    1
 14478 ;; Hardware stack levels required when called:    3
 14479 ;; This function calls:
 14480 ;;		__ECANPointBuffer
 14481 ;;		__RegsToCANID
 14482 ;; This function is called by:
 14483 ;;		_getCANFrame
 14484 ;; This function uses a non-reentrant model
 14485 ;;
 14486                           
 14487                           	psect	text59
 14488  00221C                     __ptext59:
 14489                           	opt stack 0
 14490  00221C                     _ECANReceiveMessage:
 14491                           	opt stack 24
 14492                           
 14493                           ;incstack = 0
 14494                           ;incstack = 0
 14495                           ;ECANReceiveMessage@id stored from wreg
 14496  00221C  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
 14497                           
 14498                           ; BSR set to: 0
 14499                           ;ECAN.c: 805: BYTE mode;
 14500                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 14501                           ;ECAN.c: 809: char i;
 14502                           ;ECAN.c: 810: BYTE_VAL temp;
 14503                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 14504  002220  6A54               	clrf	__ECANRxFilterHitInfo,c
 14505                           
 14506                           ; BSR set to: 0
 14507                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 14508  002222  5077               	movf	3959,w,c	;volatile
 14509  002224  0BC0               	andlw	192
 14510  002226  6E16               	movwf	ECANReceiveMessage@mode,c
 14511                           
 14512                           ; BSR set to: 0
 14513                           ;ECAN.c: 816: if ( mode == 0x00 )
 14514  002228  6616               	tstfsz	ECANReceiveMessage@mode,c
 14515  00222A  D032               	goto	l7083
 14516                           
 14517                           ; BSR set to: 0
 14518                           ;ECAN.c: 822: {
 14519                           ;ECAN.c: 824: if ( RXB0FUL )
 14520  00222C  AE60               	btfss	3936,7,c	;volatile
 14521  00222E  D012               	goto	l876
 14522                           
 14523                           ; BSR set to: 0
 14524                           ;ECAN.c: 825: {
 14525                           ;ECAN.c: 827: RXB0IF = 0;
 14526  002230  90A4               	bcf	4004,0,c	;volatile
 14527                           
 14528                           ;ECAN.c: 830: if ( RXB0OVFL )
 14529  002232  AE74               	btfss	3956,7,c	;volatile
 14530  002234  D006               	goto	l7059
 14531                           
 14532                           ; BSR set to: 0
 14533                           ;ECAN.c: 831: {
 14534                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 14535  002236  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14536  002238  6ED9               	movwf	fsr2l,c
 14537  00223A  6ADA               	clrf	fsr2h,c
 14538  00223C  0E00               	movlw	0
 14539  00223E  86DB               	bsf	plusw2,3,c
 14540                           
 14541                           ; BSR set to: 0
 14542                           ;ECAN.c: 833: RXB0OVFL = 0;
 14543  002240  9E74               	bcf	3956,7,c	;volatile
 14544  002242                     l7059:
 14545                           
 14546                           ; BSR set to: 0
 14547                           ;ECAN.c: 834: }
 14548                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 14549  002242  A060               	btfss	3936,0,c	;volatile
 14550  002244  D002               	bra	u7115
 14551  002246  8054               	bsf	__ECANRxFilterHitInfo,0,c
 14552  002248  D001               	bra	u7117
 14553  00224A                     u7115:
 14554  00224A  9054               	bcf	__ECANRxFilterHitInfo,0,c
 14555  00224C                     u7117:
 14556                           
 14557                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 14558  00224C  0E0F               	movlw	15	;volatile
 14559  00224E  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14560  002250  0E60               	movlw	96	;volatile
 14561  002252  D01A               	goto	L42
 14562  002254                     l876:
 14563                           
 14564                           ; BSR set to: 0
 14565                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 14566  002254  010F               	movlb	15	; () banked
 14567  002256  AF50               	btfss	80,7,b	;volatile
 14568  002258  D019               	goto	l7077
 14569                           
 14570                           ; BSR set to: 15
 14571                           ;ECAN.c: 842: {
 14572                           ;ECAN.c: 844: RXB1IF = 0;
 14573  00225A  92A4               	bcf	4004,1,c	;volatile
 14574                           
 14575                           ;ECAN.c: 847: if ( RXB1OVFL )
 14576  00225C  AC74               	btfss	3956,6,c	;volatile
 14577  00225E  D006               	goto	l7069
 14578                           
 14579                           ; BSR set to: 15
 14580                           ;ECAN.c: 848: {
 14581                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 14582  002260  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14583  002262  6ED9               	movwf	fsr2l,c
 14584  002264  6ADA               	clrf	fsr2h,c
 14585  002266  0E00               	movlw	0
 14586  002268  86DB               	bsf	plusw2,3,c
 14587                           
 14588                           ; BSR set to: 15
 14589                           ;ECAN.c: 850: RXB1OVFL = 0;
 14590  00226A  9C74               	bcf	3956,6,c	;volatile
 14591  00226C                     l7069:
 14592                           
 14593                           ; BSR set to: 15
 14594                           ;ECAN.c: 851: }
 14595                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 14596  00226C  5150               	movf	80,w,b	;volatile
 14597  00226E  0B07               	andlw	7
 14598  002270  6E54               	movwf	__ECANRxFilterHitInfo,c
 14599                           
 14600                           ; BSR set to: 15
 14601                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 14602  002272  0E02               	movlw	2
 14603  002274  6054               	cpfslt	__ECANRxFilterHitInfo,c
 14604  002276  D005               	goto	l7075
 14605                           
 14606                           ; BSR set to: 15
 14607                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 14608  002278  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14609  00227A  6ED9               	movwf	fsr2l,c
 14610  00227C  6ADA               	clrf	fsr2h,c
 14611  00227E  0E00               	movlw	0
 14612  002280  8EDB               	bsf	plusw2,7,c
 14613  002282                     l7075:
 14614                           
 14615                           ; BSR set to: 15
 14616                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 14617  002282  0E0F               	movlw	15	;volatile
 14618  002284  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14619  002286  0E50               	movlw	80	;volatile
 14620  002288                     L42:
 14621  002288  6E18               	movwf	ECANReceiveMessage@ptr,c
 14622                           
 14623                           ;ECAN.c: 860: }
 14624  00228A  D065               	goto	l7137
 14625  00228C                     l7077:
 14626                           
 14627                           ;ECAN.c: 861: else
 14628                           ;ECAN.c: 862: return FALSE;
 14629  00228C  0E00               	movlw	0
 14630  00228E  D0C2               	goto	l883
 14631  002290                     l7083:
 14632                           
 14633                           ; BSR set to: 0
 14634                           ;ECAN.c: 869: else if ( mode == 0x40 )
 14635  002290  5016               	movf	ECANReceiveMessage@mode,w,c
 14636  002292  0A40               	xorlw	64
 14637  002294  E146               	bnz	l886
 14638                           
 14639                           ; BSR set to: 0
 14640                           ;ECAN.c: 875: {
 14641                           ;ECAN.c: 876: if ( RXB0FUL )
 14642  002296  AE60               	btfss	3936,7,c	;volatile
 14643  002298  D004               	goto	l887
 14644                           
 14645                           ; BSR set to: 0
 14646                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 14647  00229A  0E0F               	movlw	15	;volatile
 14648  00229C  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14649  00229E  0E60               	movlw	96	;volatile
 14650  0022A0  D03E               	goto	L49
 14651  0022A2                     l887:
 14652                           
 14653                           ; BSR set to: 0
 14654                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 14655  0022A2  010F               	movlb	15	; () banked
 14656  0022A4  AF50               	btfss	80,7,b	;volatile
 14657  0022A6  D004               	goto	l889
 14658                           
 14659                           ; BSR set to: 15
 14660                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 14661  0022A8  0E0F               	movlw	15	;volatile
 14662  0022AA  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14663  0022AC  0E50               	movlw	80	;volatile
 14664  0022AE  D037               	goto	L49
 14665  0022B0                     l889:
 14666                           
 14667                           ; BSR set to: 15
 14668                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 14669  0022B0  010D               	movlb	13
 14670  0022B2  B5F8               	btfsc	248,2,b	;volatile
 14671  0022B4  D007               	goto	l891
 14672  0022B6  010E               	movlb	14
 14673  0022B8  AF20               	btfss	32,7,b	;volatile
 14674  0022BA  D004               	goto	l891
 14675                           
 14676                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 14677  0022BC  0E0E               	movlw	14	;volatile
 14678  0022BE  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14679  0022C0  0E20               	movlw	32	;volatile
 14680  0022C2  D02D               	goto	L49
 14681  0022C4                     l891:
 14682                           
 14683                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 14684  0022C4  010D               	movlb	13
 14685  0022C6  B7F8               	btfsc	248,3,b	;volatile
 14686  0022C8  D007               	goto	l893
 14687  0022CA  010E               	movlb	14
 14688  0022CC  AF30               	btfss	48,7,b	;volatile
 14689  0022CE  D004               	goto	l893
 14690                           
 14691                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 14692  0022D0  0E0E               	movlw	14	;volatile
 14693  0022D2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14694  0022D4  0E30               	movlw	48	;volatile
 14695  0022D6  D023               	goto	L49
 14696  0022D8                     l893:
 14697                           
 14698                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 14699  0022D8  010D               	movlb	13
 14700  0022DA  B9F8               	btfsc	248,4,b	;volatile
 14701  0022DC  D007               	goto	l895
 14702  0022DE  010E               	movlb	14
 14703  0022E0  AF40               	btfss	64,7,b	;volatile
 14704  0022E2  D004               	goto	l895
 14705                           
 14706                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 14707  0022E4  0E0E               	movlw	14	;volatile
 14708  0022E6  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14709  0022E8  0E40               	movlw	64	;volatile
 14710  0022EA  D019               	goto	L49
 14711  0022EC                     l895:
 14712                           
 14713                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 14714  0022EC  010D               	movlb	13
 14715  0022EE  BBF8               	btfsc	248,5,b	;volatile
 14716  0022F0  D005               	goto	l897
 14717  0022F2  010E               	movlb	14
 14718  0022F4  AF50               	btfss	80,7,b	;volatile
 14719  0022F6  D002               	goto	l897
 14720                           
 14721                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 14722  0022F8  0E0E               	movlw	14	;volatile
 14723  0022FA  D7D7               	goto	L50
 14724  0022FC                     l897:
 14725                           
 14726                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 14727  0022FC  010D               	movlb	13
 14728  0022FE  BDF8               	btfsc	248,6,b	;volatile
 14729  002300  D005               	goto	l899
 14730  002302  010E               	movlb	14
 14731  002304  AF60               	btfss	96,7,b	;volatile
 14732  002306  D002               	goto	l899
 14733                           
 14734                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 14735  002308  0E0E               	movlw	14	;volatile
 14736  00230A  D7C8               	goto	L51
 14737  00230C                     l899:
 14738                           
 14739                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 14740  00230C  010D               	movlb	13
 14741  00230E  BFF8               	btfsc	248,7,b	;volatile
 14742  002310  D7BD               	goto	l7077
 14743  002312  010E               	movlb	14
 14744  002314  AF70               	btfss	112,7,b	;volatile
 14745  002316  D7BA               	goto	l7077
 14746                           
 14747                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 14748  002318  0E0E               	movlw	14	;volatile
 14749  00231A  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14750  00231C  0E70               	movlw	112	;volatile
 14751  00231E                     L49:
 14752  00231E  6E18               	movwf	ECANReceiveMessage@ptr,c
 14753  002320  D00A               	goto	l7127
 14754  002322                     l886:
 14755                           
 14756                           ; BSR set to: 0
 14757                           ;ECAN.c: 910: else
 14758                           ;ECAN.c: 915: {
 14759                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 14760  002322  AE74               	btfss	3956,7,c	;volatile
 14761  002324  D7B3               	goto	l7077
 14762                           
 14763                           ; BSR set to: 0
 14764                           ;ECAN.c: 917: {
 14765                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 14766  002326  506F               	movf	3951,w,c	;volatile
 14767  002328  0B07               	andlw	7
 14768  00232A  EC98  F01B         	call	__ECANPointBuffer
 14769  00232E  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 14770  002332  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 14771  002336                     l7127:
 14772                           
 14773                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 14774  002336  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14775  00233A  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14776  00233E  50DF               	movf	indf2,w,c
 14777  002340  0B1F               	andlw	31
 14778  002342  6E54               	movwf	__ECANRxFilterHitInfo,c
 14779                           
 14780                           ;ECAN.c: 932: RXB1IF = 0;
 14781  002344  92A4               	bcf	4004,1,c	;volatile
 14782                           
 14783                           ;ECAN.c: 934: if ( RXB1OVFL )
 14784  002346  AC74               	btfss	3956,6,c	;volatile
 14785  002348  D006               	goto	l7137
 14786                           
 14787                           ;ECAN.c: 935: {
 14788                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 14789  00234A  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14790  00234C  6ED9               	movwf	fsr2l,c
 14791  00234E  6ADA               	clrf	fsr2h,c
 14792  002350  0E00               	movlw	0
 14793  002352  86DB               	bsf	plusw2,3,c
 14794                           
 14795                           ;ECAN.c: 937: RXB1OVFL = 0;
 14796  002354  9C74               	bcf	3956,6,c	;volatile
 14797  002356                     l7137:
 14798                           
 14799                           ;ECAN.c: 942: savedPtr = ptr;
 14800  002356  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 14801  00235A  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 14802                           
 14803                           ;ECAN.c: 943: *msgFlags = 0;
 14804  00235E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14805  002360  6ED9               	movwf	fsr2l,c
 14806  002362  6ADA               	clrf	fsr2h,c
 14807  002364  6ADF               	clrf	indf2,c
 14808                           
 14809                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 14810  002366  EE20 F005          	lfsr	2,5
 14811  00236A  D855               	call	PL72	;call to abstracted procedure
 14812                           
 14813                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 14814  00236C  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14815  00236E  6ED9               	movwf	fsr2l,c
 14816  002370  6ADA               	clrf	fsr2h,c
 14817  002372  5017               	movf	ECANReceiveMessage@temp,w,c
 14818  002374  0B0F               	andlw	15
 14819  002376  6EDF               	movwf	indf2,c
 14820                           
 14821                           ;ECAN.c: 950: if ( temp.bits.b6 )
 14822  002378  AC17               	btfss	ECANReceiveMessage@temp,6,c
 14823  00237A  D005               	goto	l907
 14824                           
 14825                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 14826  00237C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14827  00237E  6ED9               	movwf	fsr2l,c
 14828  002380  6ADA               	clrf	fsr2h,c
 14829  002382  0E00               	movlw	0
 14830  002384  8CDB               	bsf	plusw2,6,c
 14831  002386                     l907:
 14832                           
 14833                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 14834  002386  EE20 F002          	lfsr	2,2
 14835  00238A  D845               	call	PL72	;call to abstracted procedure
 14836                           
 14837                           ;ECAN.c: 955: if ( temp.bits.b3 )
 14838  00238C  A617               	btfss	ECANReceiveMessage@temp,3,c
 14839  00238E  D008               	goto	l908
 14840                           
 14841                           ;ECAN.c: 956: {
 14842                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 14843  002390  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14844  002392  6ED9               	movwf	fsr2l,c
 14845  002394  6ADA               	clrf	fsr2h,c
 14846  002396  0E00               	movlw	0
 14847  002398  8ADB               	bsf	plusw2,5,c
 14848                           
 14849                           ;ECAN.c: 958: temp.Val = 1;
 14850  00239A  0E01               	movlw	1
 14851  00239C  6E17               	movwf	ECANReceiveMessage@temp,c
 14852                           
 14853                           ;ECAN.c: 959: }
 14854  00239E  D001               	goto	l7155
 14855  0023A0                     l908:
 14856                           
 14857                           ;ECAN.c: 960: else
 14858                           ;ECAN.c: 961: temp.Val = 0;
 14859  0023A0  6A17               	clrf	ECANReceiveMessage@temp,c
 14860  0023A2                     l7155:
 14861                           
 14862                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 14863  0023A2  2818               	incf	ECANReceiveMessage@ptr,w,c
 14864  0023A4  6E08               	movwf	?__RegsToCANID,c
 14865  0023A6  0E00               	movlw	0
 14866  0023A8  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 14867  0023AA  6E09               	movwf	?__RegsToCANID+1,c
 14868  0023AC  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 14869  0023B0  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 14870  0023B4  ECBF  F016         	call	__RegsToCANID	;wreg free
 14871                           
 14872                           ;ECAN.c: 966: ptr += 6;
 14873  0023B8  0E06               	movlw	6
 14874  0023BA  2618               	addwf	ECANReceiveMessage@ptr,f,c
 14875  0023BC  0E00               	movlw	0
 14876  0023BE  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 14877                           
 14878                           ;ECAN.c: 967: temp.Val = *dataLen;
 14879  0023C0  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14880  0023C2  6ED9               	movwf	fsr2l,c
 14881  0023C4  6ADA               	clrf	fsr2h,c
 14882  0023C6  50DF               	movf	indf2,w,c
 14883  0023C8  6E17               	movwf	ECANReceiveMessage@temp,c
 14884                           
 14885                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 14886  0023CA  6A15               	clrf	ECANReceiveMessage@i,c
 14887  0023CC  D00D               	goto	l7171
 14888  0023CE                     l7163:
 14889                           
 14890                           ;ECAN.c: 969: *data++ = *ptr++;
 14891  0023CE  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14892  0023D2  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14893  0023D6  500F               	movf	ECANReceiveMessage@data,w,c
 14894  0023D8  6EE1               	movwf	fsr1l,c
 14895  0023DA  6AE2               	clrf	fsr1h,c
 14896  0023DC  CFDF FFE7          	movff	indf2,indf1
 14897  0023E0  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 14898  0023E2  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 14899  0023E4  2A0F               	incf	ECANReceiveMessage@data,f,c
 14900  0023E6  2A15               	incf	ECANReceiveMessage@i,f,c
 14901  0023E8                     l7171:
 14902  0023E8  5017               	movf	ECANReceiveMessage@temp,w,c
 14903  0023EA  5C15               	subwf	ECANReceiveMessage@i,w,c
 14904  0023EC  E3F0               	bnc	l7163
 14905                           
 14906                           ;ECAN.c: 972: if ( IRXIF )
 14907  0023EE  AEA4               	btfss	4004,7,c	;volatile
 14908  0023F0  D006               	goto	l7177
 14909                           
 14910                           ;ECAN.c: 973: {
 14911                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 14912  0023F2  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14913  0023F4  6ED9               	movwf	fsr2l,c
 14914  0023F6  6ADA               	clrf	fsr2h,c
 14915  0023F8  0E00               	movlw	0
 14916  0023FA  88DB               	bsf	plusw2,4,c
 14917                           
 14918                           ;ECAN.c: 975: IRXIF = 0;
 14919  0023FC  9EA4               	bcf	4004,7,c	;volatile
 14920  0023FE                     l7177:
 14921                           
 14922                           ;ECAN.c: 976: }
 14923                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 14924  0023FE  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 14925  002402  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 14926  002406  0E7F               	movlw	127
 14927  002408  16DF               	andwf	indf2,f,c
 14928                           
 14929                           ;ECAN.c: 983: if ( mode == 0x80 )
 14930  00240A  5016               	movf	ECANReceiveMessage@mode,w,c
 14931  00240C  0A80               	xorlw	128
 14932  00240E  B4D8               	btfsc	status,2,c
 14933                           
 14934                           ;ECAN.c: 984: FIFOEMPTY = 0;
 14935  002410  9E74               	bcf	3956,7,c	;volatile
 14936                           
 14937                           ;ECAN.c: 990: return TRUE;
 14938  002412  0E01               	movlw	1
 14939  002414                     l883:
 14940  002414  0012               	return	
 14941  002416                     __end_of_ECANReceiveMessage:
 14942                           	opt stack 0
 14943  002416                     PL72:
 14944                           	opt stack 24
 14945  002416  5018               	movf	ECANReceiveMessage@ptr,w,c
 14946  002418  26D9               	addwf	fsr2l,f,c
 14947  00241A  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14948  00241C  22DA               	addwfc	fsr2h,f,c
 14949  00241E  50DF               	movf	indf2,w,c
 14950  002420  6E17               	movwf	ECANReceiveMessage@temp,c
 14951  002422  0012               	return	
 14952  002424                     __end_ofPL72:
 14953                           	opt stack 0
 14954                           tblptru	equ	0xFF8
 14955                           tblptrh	equ	0xFF7
 14956                           tblptrl	equ	0xFF6
 14957                           tablat	equ	0xFF5
 14958                           prodh	equ	0xFF4
 14959                           prodl	equ	0xFF3
 14960                           intcon	equ	0xFF2
 14961                           postinc0	equ	0xFEE
 14962                           wreg	equ	0xFE8
 14963                           indf1	equ	0xFE7
 14964                           fsr1h	equ	0xFE2
 14965                           fsr1l	equ	0xFE1
 14966                           indf2	equ	0xFDF
 14967                           postinc2	equ	0xFDE
 14968                           postdec2	equ	0xFDD
 14969                           plusw2	equ	0xFDB
 14970                           fsr2h	equ	0xFDA
 14971                           fsr2l	equ	0xFD9
 14972                           status	equ	0xFD8
 14973                           
 14974 ;; *************** function __RegsToCANID *****************
 14975 ;; Defined at:
 14976 ;;		line 1156 in file "../ECAN.c"
 14977 ;; Parameters:    Size  Location     Type
 14978 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 14979 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14980 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14981 ;;  val             1    9[COMRAM] PTR unsigned long 
 14982 ;;		 -> getVSCPFrame@id(4), 
 14983 ;;  type            1   10[COMRAM] unsigned char 
 14984 ;; Auto vars:     Size  Location     Type
 14985 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 14986 ;;		 -> getVSCPFrame@id(4), 
 14987 ;; Return value:  Size  Location     Type
 14988 ;;		None               void
 14989 ;; Registers used:
 14990 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14991 ;; Tracked objects:
 14992 ;;		On entry : 0/0
 14993 ;;		On exit  : 0/0
 14994 ;;		Unchanged: 0/0
 14995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14996 ;;      Params:         4       0       0       0       0       0       0
 14997 ;;      Locals:         1       0       0       0       0       0       0
 14998 ;;      Temps:          2       0       0       0       0       0       0
 14999 ;;      Totals:         7       0       0       0       0       0       0
 15000 ;;Total ram usage:        7 bytes
 15001 ;; Hardware stack levels used:    1
 15002 ;; Hardware stack levels required when called:    2
 15003 ;; This function calls:
 15004 ;;		Nothing
 15005 ;; This function is called by:
 15006 ;;		_ECANReceiveMessage
 15007 ;; This function uses a non-reentrant model
 15008 ;;
 15009                           
 15010                           	psect	text60
 15011  002D7E                     __ptext60:
 15012                           	opt stack 0
 15013  002D7E                     __RegsToCANID:
 15014                           	opt stack 24
 15015                           
 15016                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 15017                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 15018                           
 15019                           ;incstack = 0
 15020                           ;incstack = 0
 15021  002D7E  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 15022                           
 15023                           ;ECAN.c: 1161: if ( type == 0 )
 15024  002D82  660B               	tstfsz	__RegsToCANID@type,c
 15025  002D84  D02B               	goto	l7251
 15026                           
 15027                           ;ECAN.c: 1162: {
 15028                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 15029  002D86  500E               	movf	__RegsToCANID@Value,w,c
 15030  002D88  6ED9               	movwf	fsr2l,c
 15031  002D8A  D862               	call	PL34	;call to abstracted procedure
 15032  002D8C  360C               	rlcf	??__RegsToCANID,f,c
 15033  002D8E  90D8               	bcf	status,0,c
 15034  002D90  360C               	rlcf	??__RegsToCANID,f,c
 15035  002D92  90D8               	bcf	status,0,c
 15036  002D94  340C               	rlcf	??__RegsToCANID,w,c
 15037  002D96  6EDF               	movwf	indf2,c
 15038                           
 15039                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 15040  002D98  500E               	movf	__RegsToCANID@Value,w,c
 15041  002D9A  6ED9               	movwf	fsr2l,c
 15042  002D9C  6ADA               	clrf	fsr2h,c
 15043  002D9E  2AD9               	incf	fsr2l,f,c
 15044  002DA0  6ADA               	clrf	fsr2h,c
 15045  002DA2  D873               	call	PL50	;call to abstracted procedure
 15046  002DA4                     u7435:
 15047  002DA4  90D8               	bcf	status,0,c
 15048  002DA6  320C               	rrcf	??__RegsToCANID,f,c
 15049  002DA8  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 15050  002DAA  D7FC               	goto	u7435
 15051  002DAC  500C               	movf	??__RegsToCANID,w,c
 15052                           
 15053                           ;ECAN.c: 1166: ptr++;
 15054                           
 15055                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 15056  002DAE  D859               	call	PL36	;call to abstracted procedure
 15057  002DB0  0E05               	movlw	5
 15058  002DB2  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 15059  002DB4                     u7445:
 15060  002DB4  90D8               	bcf	status,0,c
 15061  002DB6  320C               	rrcf	??__RegsToCANID,f,c
 15062  002DB8  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 15063  002DBA  D7FC               	goto	u7445
 15064  002DBC  500E               	movf	__RegsToCANID@Value,w,c
 15065  002DBE  6ED9               	movwf	fsr2l,c
 15066  002DC0  6ADA               	clrf	fsr2h,c
 15067  002DC2  500C               	movf	??__RegsToCANID,w,c
 15068  002DC4  12DF               	iorwf	indf2,f,c
 15069                           
 15070                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 15071  002DC6  D83D               	call	PL20	;call to abstracted procedure
 15072  002DC8  6ADF               	clrf	indf2,c
 15073                           
 15074                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 15075  002DCA  500E               	movf	__RegsToCANID@Value,w,c
 15076  002DCC  6ED9               	movwf	fsr2l,c
 15077  002DCE  6ADA               	clrf	fsr2h,c
 15078  002DD0  0E03               	movlw	3
 15079  002DD2  26D9               	addwf	fsr2l,f,c
 15080  002DD4  6ADA               	clrf	fsr2h,c
 15081  002DD6  0E00               	movlw	0
 15082  002DD8  6EDF               	movwf	indf2,c
 15083                           
 15084                           ;ECAN.c: 1170: }
 15085  002DDA  D032               	goto	l930
 15086  002DDC                     l7251:
 15087                           
 15088                           ;ECAN.c: 1171: else
 15089                           ;ECAN.c: 1172: {
 15090                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 15091  002DDC  D832               	call	PL20	;call to abstracted procedure
 15092  002DDE  D855               	call	PL50	;call to abstracted procedure
 15093  002DE0                     u7455:
 15094  002DE0  90D8               	bcf	status,0,c
 15095  002DE2  360C               	rlcf	??__RegsToCANID,f,c
 15096  002DE4  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 15097  002DE6  D7FC               	goto	u7455
 15098  002DE8  500C               	movf	??__RegsToCANID,w,c
 15099  002DEA  6EDF               	movwf	indf2,c
 15100                           
 15101                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 15102  002DEC  500E               	movf	__RegsToCANID@Value,w,c
 15103  002DEE  6ED9               	movwf	fsr2l,c
 15104  002DF0  6ADA               	clrf	fsr2h,c
 15105  002DF2  0E03               	movlw	3
 15106  002DF4  26D9               	addwf	fsr2l,f,c
 15107  002DF6  D82C               	call	PL34	;call to abstracted procedure
 15108  002DF8  320C               	rrcf	??__RegsToCANID,f,c
 15109  002DFA  90D8               	bcf	status,0,c
 15110  002DFC  320C               	rrcf	??__RegsToCANID,f,c
 15111  002DFE  90D8               	bcf	status,0,c
 15112  002E00  300C               	rrcf	??__RegsToCANID,w,c
 15113                           
 15114                           ;ECAN.c: 1176: ptr++;
 15115                           
 15116                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 15117  002E02  D82F               	call	PL36	;call to abstracted procedure
 15118  002E04  0E03               	movlw	3
 15119  002E06  160C               	andwf	??__RegsToCANID,f,c
 15120  002E08  D81C               	call	PL20	;call to abstracted procedure
 15121  002E0A  500C               	movf	??__RegsToCANID,w,c
 15122  002E0C  12DF               	iorwf	indf2,f,c
 15123                           
 15124                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 15125  002E0E  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15126  002E12  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15127  002E16  50DF               	movf	indf2,w,c
 15128  002E18  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15129  002E1A  90D8               	bcf	status,0,c
 15130  002E1C  320C               	rrcf	??__RegsToCANID,f,c
 15131  002E1E  90D8               	bcf	status,0,c
 15132  002E20  320C               	rrcf	??__RegsToCANID,f,c
 15133  002E22  90D8               	bcf	status,0,c
 15134  002E24  320C               	rrcf	??__RegsToCANID,f,c
 15135  002E26  0E1C               	movlw	28
 15136  002E28  160C               	andwf	??__RegsToCANID,f,c
 15137  002E2A  D80B               	call	PL20	;call to abstracted procedure
 15138  002E2C  500C               	movf	??__RegsToCANID,w,c
 15139  002E2E  12DF               	iorwf	indf2,f,c
 15140                           
 15141                           ;ECAN.c: 1180: ptr++;
 15142                           
 15143                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 15144  002E30  D822               	call	PL44	;call to abstracted procedure
 15145  002E32  2AE1               	incf	fsr1l,f,c
 15146  002E34  6AE2               	clrf	fsr1h,c
 15147  002E36  CFDF FFE7          	movff	indf2,indf1
 15148                           
 15149                           ;ECAN.c: 1182: ptr++;
 15150                           
 15151                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 15152  002E3A  D81D               	call	PL44	;call to abstracted procedure
 15153  002E3C  CFDF FFE7          	movff	indf2,indf1
 15154  002E40                     l930:
 15155  002E40  0012               	return	
 15156  002E42                     __end_of__RegsToCANID:
 15157                           	opt stack 0
 15158  002E42                     PL20:
 15159                           	opt stack 24
 15160  002E42  500E               	movf	__RegsToCANID@Value,w,c
 15161  002E44  6ED9               	movwf	fsr2l,c
 15162  002E46  6ADA               	clrf	fsr2h,c
 15163  002E48  0E02               	movlw	2
 15164  002E4A  26D9               	addwf	fsr2l,f,c
 15165  002E4C  6ADA               	clrf	fsr2h,c
 15166  002E4E  0012               	return	
 15167  002E50                     __end_ofPL20:
 15168                           	opt stack 0
 15169  002E50                     PL34:
 15170                           	opt stack 24
 15171  002E50  6ADA               	clrf	fsr2h,c
 15172  002E52  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 15173  002E56  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 15174  002E5A  50E7               	movf	indf1,w,c
 15175  002E5C  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15176  002E5E  90D8               	bcf	status,0,c
 15177  002E60  0012               	return	
 15178  002E62                     __end_ofPL34:
 15179                           	opt stack 0
 15180  002E62                     PL36:
 15181                           	opt stack 24
 15182  002E62  6EDF               	movwf	indf2,c
 15183  002E64  4A08               	infsnz	__RegsToCANID@ptr,f,c
 15184  002E66  2A09               	incf	__RegsToCANID@ptr+1,f,c
 15185  002E68  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15186  002E6C  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15187  002E70  50DF               	movf	indf2,w,c
 15188  002E72  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15189  002E74  0012               	return	
 15190  002E76                     __end_ofPL36:
 15191                           	opt stack 0
 15192  002E76                     PL44:
 15193                           	opt stack 24
 15194  002E76  4A08               	infsnz	__RegsToCANID@ptr,f,c
 15195  002E78  2A09               	incf	__RegsToCANID@ptr+1,f,c
 15196  002E7A  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15197  002E7E  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15198  002E82  500E               	movf	__RegsToCANID@Value,w,c
 15199  002E84  6EE1               	movwf	fsr1l,c
 15200  002E86  6AE2               	clrf	fsr1h,c
 15201  002E88  0012               	return	
 15202  002E8A                     __end_ofPL44:
 15203                           	opt stack 0
 15204  002E8A                     PL50:
 15205                           	opt stack 24
 15206  002E8A  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 15207  002E8E  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 15208  002E92  50E7               	movf	indf1,w,c
 15209  002E94  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15210  002E96  0E05               	movlw	5
 15211  002E98  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 15212  002E9A  0C05               	retlw	5
 15213  002E9C                     __end_ofPL50:
 15214                           	opt stack 0
 15215                           tblptru	equ	0xFF8
 15216                           tblptrh	equ	0xFF7
 15217                           tblptrl	equ	0xFF6
 15218                           tablat	equ	0xFF5
 15219                           prodh	equ	0xFF4
 15220                           prodl	equ	0xFF3
 15221                           intcon	equ	0xFF2
 15222                           postinc0	equ	0xFEE
 15223                           wreg	equ	0xFE8
 15224                           indf1	equ	0xFE7
 15225                           fsr1h	equ	0xFE2
 15226                           fsr1l	equ	0xFE1
 15227                           indf2	equ	0xFDF
 15228                           postinc2	equ	0xFDE
 15229                           postdec2	equ	0xFDD
 15230                           plusw2	equ	0xFDB
 15231                           fsr2h	equ	0xFDA
 15232                           fsr2l	equ	0xFD9
 15233                           status	equ	0xFD8
 15234                           
 15235 ;; *************** function __ECANPointBuffer *****************
 15236 ;; Defined at:
 15237 ;;		line 1207 in file "../ECAN.c"
 15238 ;; Parameters:    Size  Location     Type
 15239 ;;  b               1    wreg     unsigned char 
 15240 ;; Auto vars:     Size  Location     Type
 15241 ;;  b               1   10[COMRAM] unsigned char 
 15242 ;;  pt              2   11[COMRAM] PTR unsigned char 
 15243 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 15244 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 15245 ;; Return value:  Size  Location     Type
 15246 ;;                  2    7[COMRAM] PTR unsigned char 
 15247 ;; Registers used:
 15248 ;;		wreg, status,2, status,0
 15249 ;; Tracked objects:
 15250 ;;		On entry : F/0
 15251 ;;		On exit  : 0/0
 15252 ;;		Unchanged: 0/0
 15253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15254 ;;      Params:         3       0       0       0       0       0       0
 15255 ;;      Locals:         3       0       0       0       0       0       0
 15256 ;;      Temps:          0       0       0       0       0       0       0
 15257 ;;      Totals:         6       0       0       0       0       0       0
 15258 ;;Total ram usage:        6 bytes
 15259 ;; Hardware stack levels used:    1
 15260 ;; Hardware stack levels required when called:    2
 15261 ;; This function calls:
 15262 ;;		Nothing
 15263 ;; This function is called by:
 15264 ;;		_ECANReceiveMessage
 15265 ;; This function uses a non-reentrant model
 15266 ;;
 15267                           
 15268                           	psect	text61
 15269  003730                     __ptext61:
 15270                           	opt stack 0
 15271  003730                     __ECANPointBuffer:
 15272                           	opt stack 24
 15273                           
 15274                           ;incstack = 0
 15275                           ;incstack = 0
 15276                           ;__ECANPointBuffer@b stored from wreg
 15277  003730  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 15278                           
 15279                           ; BSR set to: 0
 15280                           ;ECAN.c: 1208: BYTE* pt;
 15281                           ;ECAN.c: 1210: switch(b)
 15282  003734  D024               	goto	l7237
 15283  003736                     l7219:
 15284                           
 15285                           ; BSR set to: 0
 15286                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 15287  003736  0E0F               	movlw	15	;volatile
 15288  003738  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15289  00373A  0E60               	movlw	96	;volatile
 15290  00373C  D01E               	goto	L58
 15291  00373E                     l7221:
 15292                           
 15293                           ; BSR set to: 0
 15294                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 15295  00373E  010F               	movlb	15	; () banked
 15296  003740  0E0F               	movlw	15	;volatile
 15297  003742  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15298  003744  0E50               	movlw	80	;volatile
 15299  003746  D019               	goto	L58
 15300  003748                     l7223:
 15301                           
 15302                           ; BSR set to: 0
 15303                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 15304  003748  010E               	movlb	14	; () banked
 15305  00374A  0E0E               	movlw	14	;volatile
 15306  00374C  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15307  00374E  0E20               	movlw	32	;volatile
 15308  003750  D014               	goto	L58
 15309  003752                     l7225:
 15310                           
 15311                           ; BSR set to: 0
 15312                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 15313  003752  010E               	movlb	14	; () banked
 15314  003754  0E0E               	movlw	14	;volatile
 15315  003756  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15316  003758  0E30               	movlw	48	;volatile
 15317  00375A  D00F               	goto	L58
 15318  00375C                     l7227:
 15319                           
 15320                           ; BSR set to: 0
 15321                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 15322  00375C  010E               	movlb	14	; () banked
 15323  00375E  0E0E               	movlw	14	;volatile
 15324  003760  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15325  003762  0E40               	movlw	64	;volatile
 15326  003764  D00A               	goto	L58
 15327  003766                     l7229:
 15328                           
 15329                           ; BSR set to: 0
 15330                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 15331  003766  010E               	movlb	14	; () banked
 15332  003768  0E0E               	movlw	14	;volatile
 15333  00376A  D7EB               	goto	L59
 15334  00376C                     l7231:
 15335                           
 15336                           ; BSR set to: 0
 15337                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 15338  00376C  010E               	movlb	14	; () banked
 15339  00376E  0E0E               	movlw	14	;volatile
 15340  003770  D7E3               	goto	L60
 15341  003772                     l7233:
 15342                           
 15343                           ; BSR set to: 0
 15344                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 15345  003772  010E               	movlb	14	; () banked
 15346  003774  0E0E               	movlw	14	;volatile
 15347  003776  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15348  003778  0E70               	movlw	112	;volatile
 15349  00377A                     L58:
 15350  00377A  6E0C               	movwf	__ECANPointBuffer@pt,c
 15351                           
 15352                           ;ECAN.c: 1235: break;
 15353  00377C  D00F               	goto	l935
 15354  00377E                     l7237:
 15355                           
 15356                           ; BSR set to: 0
 15357  00377E  500B               	movf	__ECANPointBuffer@b,w,c
 15358                           
 15359                           ; Switch size 1, requested type "space"
 15360                           ; Number of cases is 7, Range of values is 0 to 6
 15361                           ; switch strategies available:
 15362                           ; Name         Instructions Cycles
 15363                           ; simple_byte           22    12 (average)
 15364                           ;	Chosen strategy is simple_byte
 15365  003780  E0DA               	bz	l7219
 15366  003782  0A01               	xorlw	1	; case 1
 15367  003784  E0DC               	bz	l7221
 15368  003786  0A03               	xorlw	3	; case 2
 15369  003788  E0DF               	bz	l7223
 15370  00378A  0A01               	xorlw	1	; case 3
 15371  00378C  E0E2               	bz	l7225
 15372  00378E  0A07               	xorlw	7	; case 4
 15373  003790  E0E5               	bz	l7227
 15374  003792  0A01               	xorlw	1	; case 5
 15375  003794  E0E8               	bz	l7229
 15376  003796  0A03               	xorlw	3	; case 6
 15377  003798  E0E9               	bz	l7231
 15378  00379A  D7EB               	goto	l7233
 15379  00379C                     l935:
 15380                           
 15381                           ;ECAN.c: 1237: return (pt);
 15382  00379C  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 15383  0037A0  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 15384  0037A4  0012               	return	
 15385  0037A6                     __end_of__ECANPointBuffer:
 15386                           	opt stack 0
 15387                           tblptru	equ	0xFF8
 15388                           tblptrh	equ	0xFF7
 15389                           tblptrl	equ	0xFF6
 15390                           tablat	equ	0xFF5
 15391                           prodh	equ	0xFF4
 15392                           prodl	equ	0xFF3
 15393                           intcon	equ	0xFF2
 15394                           postinc0	equ	0xFEE
 15395                           wreg	equ	0xFE8
 15396                           indf1	equ	0xFE7
 15397                           fsr1h	equ	0xFE2
 15398                           fsr1l	equ	0xFE1
 15399                           indf2	equ	0xFDF
 15400                           postinc2	equ	0xFDE
 15401                           postdec2	equ	0xFDD
 15402                           plusw2	equ	0xFDB
 15403                           fsr2h	equ	0xFDA
 15404                           fsr2l	equ	0xFD9
 15405                           status	equ	0xFD8
 15406                           
 15407 ;; *************** function _vscp_check_pstorage *****************
 15408 ;; Defined at:
 15409 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 15410 ;; Parameters:    Size  Location     Type
 15411 ;;		None
 15412 ;; Auto vars:     Size  Location     Type
 15413 ;;		None
 15414 ;; Return value:  Size  Location     Type
 15415 ;;                  1    wreg      unsigned char 
 15416 ;; Registers used:
 15417 ;;		wreg, status,2, status,0, cstack
 15418 ;; Tracked objects:
 15419 ;;		On entry : 0/0
 15420 ;;		On exit  : 0/0
 15421 ;;		Unchanged: 0/0
 15422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15423 ;;      Params:         0       0       0       0       0       0       0
 15424 ;;      Locals:         0       0       0       0       0       0       0
 15425 ;;      Temps:          0       0       0       0       0       0       0
 15426 ;;      Totals:         0       0       0       0       0       0       0
 15427 ;;Total ram usage:        0 bytes
 15428 ;; Hardware stack levels used:    1
 15429 ;; Hardware stack levels required when called:    4
 15430 ;; This function calls:
 15431 ;;		_vscp_writeNicknamePermanent
 15432 ;;		_vscp_getSegmentCRC
 15433 ;;		_vscp_setSegmentCRC
 15434 ;;		_vscp_setControlByte
 15435 ;; This function is called by:
 15436 ;;		_main
 15437 ;; This function uses a non-reentrant model
 15438 ;;
 15439                           
 15440                           	psect	text62
 15441  003B16                     __ptext62:
 15442                           	opt stack 0
 15443  003B16                     _vscp_check_pstorage:
 15444                           	opt stack 26
 15445                           
 15446                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 15447                           
 15448                           ;incstack = 0
 15449                           ;incstack = 0
 15450  003B16  ECA1  F01E         	call	_vscp_getSegmentCRC	;wreg free
 15451  003B1A  0BC0               	andlw	192
 15452  003B1C  0A40               	xorlw	64
 15453  003B1E  E102               	bnz	l7711
 15454                           
 15455                           ;vscp_firmware.c: 172: return !0;
 15456  003B20  0E01               	movlw	1
 15457  003B22  D00A               	goto	l1055
 15458  003B24                     l7711:
 15459                           
 15460                           ;vscp_firmware.c: 173: }
 15461                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 15462  003B24  0EFF               	movlw	255
 15463  003B26  EC44  F01E         	call	_vscp_writeNicknamePermanent
 15464                           
 15465                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 15466  003B2A  0E00               	movlw	0
 15467  003B2C  EC39  F01E         	call	_vscp_setSegmentCRC
 15468                           
 15469                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 15470  003B30  0EA0               	movlw	160
 15471  003B32  EC2E  F01E         	call	_vscp_setControlByte
 15472                           
 15473                           ;vscp_firmware.c: 185: return 0;
 15474  003B36  0E00               	movlw	0
 15475  003B38                     l1055:
 15476  003B38  0012               	return	
 15477  003B3A                     __end_of_vscp_check_pstorage:
 15478                           	opt stack 0
 15479                           tblptru	equ	0xFF8
 15480                           tblptrh	equ	0xFF7
 15481                           tblptrl	equ	0xFF6
 15482                           tablat	equ	0xFF5
 15483                           prodh	equ	0xFF4
 15484                           prodl	equ	0xFF3
 15485                           intcon	equ	0xFF2
 15486                           postinc0	equ	0xFEE
 15487                           wreg	equ	0xFE8
 15488                           indf1	equ	0xFE7
 15489                           fsr1h	equ	0xFE2
 15490                           fsr1l	equ	0xFE1
 15491                           indf2	equ	0xFDF
 15492                           postinc2	equ	0xFDE
 15493                           postdec2	equ	0xFDD
 15494                           plusw2	equ	0xFDB
 15495                           fsr2h	equ	0xFDA
 15496                           fsr2l	equ	0xFD9
 15497                           status	equ	0xFD8
 15498                           
 15499 ;; *************** function _vscp_setControlByte *****************
 15500 ;; Defined at:
 15501 ;;		line 2450 in file "../main.c"
 15502 ;; Parameters:    Size  Location     Type
 15503 ;;  ctrl            1    wreg     unsigned char 
 15504 ;; Auto vars:     Size  Location     Type
 15505 ;;  ctrl            1   11[COMRAM] unsigned char 
 15506 ;; Return value:  Size  Location     Type
 15507 ;;		None               void
 15508 ;; Registers used:
 15509 ;;		wreg, status,2, cstack
 15510 ;; Tracked objects:
 15511 ;;		On entry : 0/0
 15512 ;;		On exit  : 0/0
 15513 ;;		Unchanged: 0/0
 15514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15515 ;;      Params:         0       0       0       0       0       0       0
 15516 ;;      Locals:         1       0       0       0       0       0       0
 15517 ;;      Temps:          0       0       0       0       0       0       0
 15518 ;;      Totals:         1       0       0       0       0       0       0
 15519 ;;Total ram usage:        1 bytes
 15520 ;; Hardware stack levels used:    1
 15521 ;; Hardware stack levels required when called:    3
 15522 ;; This function calls:
 15523 ;;		_Busy_eep
 15524 ;;		_Write_b_eep
 15525 ;; This function is called by:
 15526 ;;		_vscp_check_pstorage
 15527 ;; This function uses a non-reentrant model
 15528 ;;
 15529                           
 15530                           	psect	text63
 15531  003C5C                     __ptext63:
 15532                           	opt stack 0
 15533  003C5C                     _vscp_setControlByte:
 15534                           	opt stack 26
 15535                           
 15536                           ;incstack = 0
 15537                           ;incstack = 0
 15538                           ;vscp_setControlByte@ctrl stored from wreg
 15539  003C5C  CFE8 F00C          	movff	wreg,vscp_setControlByte@ctrl
 15540                           
 15541                           ;main.c: 2451: (Busy_eep(), Write_b_eep(0x03,ctrl));
 15542  003C60  ECAA  F01E         	call	_Busy_eep	;wreg free
 15543  003C64  6A09               	clrf	?_Write_b_eep+1,c
 15544  003C66  0E03               	movlw	3
 15545  003C68  6E08               	movwf	?_Write_b_eep,c
 15546  003C6A  C00C  F00A         	movff	vscp_setControlByte@ctrl,?_Write_b_eep+2
 15547  003C6E  EF90  F01C         	goto	_Write_b_eep	;wreg free
 15548  003C72                     __end_of_vscp_setControlByte:
 15549                           	opt stack 0
 15550                           tblptru	equ	0xFF8
 15551                           tblptrh	equ	0xFF7
 15552                           tblptrl	equ	0xFF6
 15553                           tablat	equ	0xFF5
 15554                           prodh	equ	0xFF4
 15555                           prodl	equ	0xFF3
 15556                           intcon	equ	0xFF2
 15557                           postinc0	equ	0xFEE
 15558                           wreg	equ	0xFE8
 15559                           indf1	equ	0xFE7
 15560                           fsr1h	equ	0xFE2
 15561                           fsr1l	equ	0xFE1
 15562                           indf2	equ	0xFDF
 15563                           postinc2	equ	0xFDE
 15564                           postdec2	equ	0xFDD
 15565                           plusw2	equ	0xFDB
 15566                           fsr2h	equ	0xFDA
 15567                           fsr2l	equ	0xFD9
 15568                           status	equ	0xFD8
 15569                           
 15570 ;; *************** function _vscp_setSegmentCRC *****************
 15571 ;; Defined at:
 15572 ;;		line 2441 in file "../main.c"
 15573 ;; Parameters:    Size  Location     Type
 15574 ;;  crc             1    wreg     unsigned char 
 15575 ;; Auto vars:     Size  Location     Type
 15576 ;;  crc             1   11[COMRAM] unsigned char 
 15577 ;; Return value:  Size  Location     Type
 15578 ;;		None               void
 15579 ;; Registers used:
 15580 ;;		wreg, status,2, cstack
 15581 ;; Tracked objects:
 15582 ;;		On entry : 0/0
 15583 ;;		On exit  : 0/0
 15584 ;;		Unchanged: 0/0
 15585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15586 ;;      Params:         0       0       0       0       0       0       0
 15587 ;;      Locals:         1       0       0       0       0       0       0
 15588 ;;      Temps:          0       0       0       0       0       0       0
 15589 ;;      Totals:         1       0       0       0       0       0       0
 15590 ;;Total ram usage:        1 bytes
 15591 ;; Hardware stack levels used:    1
 15592 ;; Hardware stack levels required when called:    3
 15593 ;; This function calls:
 15594 ;;		_Busy_eep
 15595 ;;		_Write_b_eep
 15596 ;; This function is called by:
 15597 ;;		_vscp_check_pstorage
 15598 ;;		_vscp_handleProbeState
 15599 ;;		_vscp_handleHeartbeat
 15600 ;;		_vscp_handleSetNickname
 15601 ;; This function uses a non-reentrant model
 15602 ;;
 15603                           
 15604                           	psect	text64
 15605  003C72                     __ptext64:
 15606                           	opt stack 0
 15607  003C72                     _vscp_setSegmentCRC:
 15608                           	opt stack 25
 15609                           
 15610                           ;incstack = 0
 15611                           ;incstack = 0
 15612                           ;vscp_setSegmentCRC@crc stored from wreg
 15613  003C72  CFE8 F00C          	movff	wreg,vscp_setSegmentCRC@crc
 15614                           
 15615                           ;main.c: 2442: (Busy_eep(), Write_b_eep(0x02,crc));
 15616  003C76  ECAA  F01E         	call	_Busy_eep	;wreg free
 15617  003C7A  6A09               	clrf	?_Write_b_eep+1,c
 15618  003C7C  0E02               	movlw	2
 15619  003C7E  6E08               	movwf	?_Write_b_eep,c
 15620  003C80  C00C  F00A         	movff	vscp_setSegmentCRC@crc,?_Write_b_eep+2
 15621  003C84  EF90  F01C         	goto	_Write_b_eep	;wreg free
 15622  003C88                     __end_of_vscp_setSegmentCRC:
 15623                           	opt stack 0
 15624                           tblptru	equ	0xFF8
 15625                           tblptrh	equ	0xFF7
 15626                           tblptrl	equ	0xFF6
 15627                           tablat	equ	0xFF5
 15628                           prodh	equ	0xFF4
 15629                           prodl	equ	0xFF3
 15630                           intcon	equ	0xFF2
 15631                           postinc0	equ	0xFEE
 15632                           wreg	equ	0xFE8
 15633                           indf1	equ	0xFE7
 15634                           fsr1h	equ	0xFE2
 15635                           fsr1l	equ	0xFE1
 15636                           indf2	equ	0xFDF
 15637                           postinc2	equ	0xFDE
 15638                           postdec2	equ	0xFDD
 15639                           plusw2	equ	0xFDB
 15640                           fsr2h	equ	0xFDA
 15641                           fsr2l	equ	0xFD9
 15642                           status	equ	0xFD8
 15643                           
 15644 ;; *************** function _vscp_getSegmentCRC *****************
 15645 ;; Defined at:
 15646 ;;		line 2432 in file "../main.c"
 15647 ;; Parameters:    Size  Location     Type
 15648 ;;		None
 15649 ;; Auto vars:     Size  Location     Type
 15650 ;;		None
 15651 ;; Return value:  Size  Location     Type
 15652 ;;                  1    wreg      unsigned char 
 15653 ;; Registers used:
 15654 ;;		wreg, status,2, cstack
 15655 ;; Tracked objects:
 15656 ;;		On entry : 0/0
 15657 ;;		On exit  : 0/0
 15658 ;;		Unchanged: 0/0
 15659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15660 ;;      Params:         0       0       0       0       0       0       0
 15661 ;;      Locals:         0       0       0       0       0       0       0
 15662 ;;      Temps:          0       0       0       0       0       0       0
 15663 ;;      Totals:         0       0       0       0       0       0       0
 15664 ;;Total ram usage:        0 bytes
 15665 ;; Hardware stack levels used:    1
 15666 ;; Hardware stack levels required when called:    3
 15667 ;; This function calls:
 15668 ;;		_Read_b_eep
 15669 ;; This function is called by:
 15670 ;;		_vscp_check_pstorage
 15671 ;;		_vscp_handleHeartbeat
 15672 ;; This function uses a non-reentrant model
 15673 ;;
 15674                           
 15675                           	psect	text65
 15676  003D42                     __ptext65:
 15677                           	opt stack 0
 15678  003D42                     _vscp_getSegmentCRC:
 15679                           	opt stack 25
 15680                           
 15681                           ;main.c: 2433: return Read_b_eep(0x02);
 15682                           
 15683                           ;incstack = 0
 15684                           ;incstack = 0
 15685  003D42  6A09               	clrf	?_Read_b_eep+1,c
 15686  003D44  0E02               	movlw	2
 15687  003D46  6E08               	movwf	?_Read_b_eep,c
 15688  003D48  EF76  F01E         	goto	_Read_b_eep	;wreg free
 15689  003D4C                     __end_of_vscp_getSegmentCRC:
 15690                           	opt stack 0
 15691                           tblptru	equ	0xFF8
 15692                           tblptrh	equ	0xFF7
 15693                           tblptrl	equ	0xFF6
 15694                           tablat	equ	0xFF5
 15695                           prodh	equ	0xFF4
 15696                           prodl	equ	0xFF3
 15697                           intcon	equ	0xFF2
 15698                           postinc0	equ	0xFEE
 15699                           wreg	equ	0xFE8
 15700                           indf1	equ	0xFE7
 15701                           fsr1h	equ	0xFE2
 15702                           fsr1l	equ	0xFE1
 15703                           indf2	equ	0xFDF
 15704                           postinc2	equ	0xFDE
 15705                           postdec2	equ	0xFDD
 15706                           plusw2	equ	0xFDB
 15707                           fsr2h	equ	0xFDA
 15708                           fsr2l	equ	0xFD9
 15709                           status	equ	0xFD8
 15710                           
 15711 ;; *************** function _vscp_writeNicknamePermanent *****************
 15712 ;; Defined at:
 15713 ;;		line 856 in file "../main.c"
 15714 ;; Parameters:    Size  Location     Type
 15715 ;;  nickname        1    wreg     unsigned char 
 15716 ;; Auto vars:     Size  Location     Type
 15717 ;;  nickname        1   11[COMRAM] unsigned char 
 15718 ;; Return value:  Size  Location     Type
 15719 ;;		None               void
 15720 ;; Registers used:
 15721 ;;		wreg, status,2, cstack
 15722 ;; Tracked objects:
 15723 ;;		On entry : 0/0
 15724 ;;		On exit  : 0/0
 15725 ;;		Unchanged: 0/0
 15726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15727 ;;      Params:         0       0       0       0       0       0       0
 15728 ;;      Locals:         1       0       0       0       0       0       0
 15729 ;;      Temps:          0       0       0       0       0       0       0
 15730 ;;      Totals:         1       0       0       0       0       0       0
 15731 ;;Total ram usage:        1 bytes
 15732 ;; Hardware stack levels used:    1
 15733 ;; Hardware stack levels required when called:    3
 15734 ;; This function calls:
 15735 ;;		_Busy_eep
 15736 ;;		_Write_b_eep
 15737 ;; This function is called by:
 15738 ;;		_vscp_check_pstorage
 15739 ;;		_vscp_handleProbeState
 15740 ;;		_vscp_handleHeartbeat
 15741 ;;		_vscp_handleSetNickname
 15742 ;;		_vscp_handleDropNickname
 15743 ;; This function uses a non-reentrant model
 15744 ;;
 15745                           
 15746                           	psect	text66
 15747  003C88                     __ptext66:
 15748                           	opt stack 0
 15749  003C88                     _vscp_writeNicknamePermanent:
 15750                           	opt stack 25
 15751                           
 15752                           ;incstack = 0
 15753                           ;incstack = 0
 15754                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 15755  003C88  CFE8 F00C          	movff	wreg,vscp_writeNicknamePermanent@nickname
 15756                           
 15757                           ;main.c: 857: (Busy_eep(), Write_b_eep(0x01,nickname));
 15758  003C8C  ECAA  F01E         	call	_Busy_eep	;wreg free
 15759  003C90  6A09               	clrf	?_Write_b_eep+1,c
 15760  003C92  0E01               	movlw	1
 15761  003C94  6E08               	movwf	?_Write_b_eep,c
 15762  003C96  C00C  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_Write_b_eep+2
 15763  003C9A  EF90  F01C         	goto	_Write_b_eep	;wreg free
 15764  003C9E                     __end_of_vscp_writeNicknamePermanent:
 15765                           	opt stack 0
 15766                           tblptru	equ	0xFF8
 15767                           tblptrh	equ	0xFF7
 15768                           tblptrl	equ	0xFF6
 15769                           tablat	equ	0xFF5
 15770                           prodh	equ	0xFF4
 15771                           prodl	equ	0xFF3
 15772                           intcon	equ	0xFF2
 15773                           postinc0	equ	0xFEE
 15774                           wreg	equ	0xFE8
 15775                           indf1	equ	0xFE7
 15776                           fsr1h	equ	0xFE2
 15777                           fsr1l	equ	0xFE1
 15778                           indf2	equ	0xFDF
 15779                           postinc2	equ	0xFDE
 15780                           postdec2	equ	0xFDD
 15781                           plusw2	equ	0xFDB
 15782                           fsr2h	equ	0xFDA
 15783                           fsr2l	equ	0xFD9
 15784                           status	equ	0xFD8
 15785                           
 15786 ;; *************** function _Write_b_eep *****************
 15787 ;; Defined at:
 15788 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 15789 ;; Parameters:    Size  Location     Type
 15790 ;;  badd            2    7[COMRAM] unsigned int 
 15791 ;;  bdat            1    9[COMRAM] unsigned char 
 15792 ;; Auto vars:     Size  Location     Type
 15793 ;;  GIE_BIT_VAL     1   10[COMRAM] unsigned char 
 15794 ;; Return value:  Size  Location     Type
 15795 ;;		None               void
 15796 ;; Registers used:
 15797 ;;		wreg, status,2
 15798 ;; Tracked objects:
 15799 ;;		On entry : 0/0
 15800 ;;		On exit  : 0/0
 15801 ;;		Unchanged: 0/0
 15802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15803 ;;      Params:         3       0       0       0       0       0       0
 15804 ;;      Locals:         1       0       0       0       0       0       0
 15805 ;;      Temps:          0       0       0       0       0       0       0
 15806 ;;      Totals:         4       0       0       0       0       0       0
 15807 ;;Total ram usage:        4 bytes
 15808 ;; Hardware stack levels used:    1
 15809 ;; Hardware stack levels required when called:    2
 15810 ;; This function calls:
 15811 ;;		Nothing
 15812 ;; This function is called by:
 15813 ;;		_main
 15814 ;;		_init_app_eeprom
 15815 ;;		_vscp_setGUID
 15816 ;;		_vscp_setManufacturerId
 15817 ;;		_vscp_writeNicknamePermanent
 15818 ;;		_vscp_writeAppReg
 15819 ;;		_doActionDisable
 15820 ;;		_vscp_setUserID
 15821 ;;		_vscp_setSegmentCRC
 15822 ;;		_vscp_setControlByte
 15823 ;;		_vscp_goBootloaderMode
 15824 ;; This function uses a non-reentrant model
 15825 ;;
 15826                           
 15827                           	psect	text67
 15828  003920                     __ptext67:
 15829                           	opt stack 0
 15830  003920                     _Write_b_eep:
 15831                           	opt stack 26
 15832                           
 15833                           ;incstack = 0
 15834                           ;incstack = 0
 15835  003920  C008  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 15836  003924  C00A  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 15837  003928  9EA6               	bcf	4006,7,c	;volatile
 15838  00392A  9CA6               	bcf	4006,6,c	;volatile
 15839  00392C  84A6               	bsf	4006,2,c	;volatile
 15840  00392E  0E00               	movlw	0
 15841  003930  BEF2               	btfsc	intcon,7,c	;volatile
 15842  003932  0E01               	movlw	1
 15843  003934  6E0B               	movwf	Write_b_eep@GIE_BIT_VAL,c
 15844  003936  9EF2               	bcf	intcon,7,c	;volatile
 15845  003938  0E55               	movlw	85
 15846  00393A  6EA7               	movwf	4007,c	;volatile
 15847  00393C  0EAA               	movlw	170
 15848  00393E  6EA7               	movwf	4007,c	;volatile
 15849  003940  82A6               	bsf	4006,1,c	;volatile
 15850  003942                     l1330:
 15851  003942  B2A6               	btfsc	4006,1,c	;volatile
 15852  003944  D7FE               	goto	l1330
 15853  003946  B00B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 15854  003948  D002               	bra	u4275
 15855  00394A  9EF2               	bcf	intcon,7,c	;volatile
 15856  00394C  D001               	bra	u4276
 15857  00394E                     u4275:
 15858  00394E  8EF2               	bsf	intcon,7,c	;volatile
 15859  003950                     u4276:
 15860  003950  94A6               	bcf	4006,2,c	;volatile
 15861  003952  0012               	return	
 15862  003954                     __end_of_Write_b_eep:
 15863                           	opt stack 0
 15864                           tblptru	equ	0xFF8
 15865                           tblptrh	equ	0xFF7
 15866                           tblptrl	equ	0xFF6
 15867                           tablat	equ	0xFF5
 15868                           prodh	equ	0xFF4
 15869                           prodl	equ	0xFF3
 15870                           intcon	equ	0xFF2
 15871                           postinc0	equ	0xFEE
 15872                           wreg	equ	0xFE8
 15873                           indf1	equ	0xFE7
 15874                           fsr1h	equ	0xFE2
 15875                           fsr1l	equ	0xFE1
 15876                           indf2	equ	0xFDF
 15877                           postinc2	equ	0xFDE
 15878                           postdec2	equ	0xFDD
 15879                           plusw2	equ	0xFDB
 15880                           fsr2h	equ	0xFDA
 15881                           fsr2l	equ	0xFD9
 15882                           status	equ	0xFD8
 15883                           
 15884 ;; *************** function _Busy_eep *****************
 15885 ;; Defined at:
 15886 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 15887 ;; Parameters:    Size  Location     Type
 15888 ;;		None
 15889 ;; Auto vars:     Size  Location     Type
 15890 ;;		None
 15891 ;; Return value:  Size  Location     Type
 15892 ;;		None               void
 15893 ;; Registers used:
 15894 ;;		None
 15895 ;; Tracked objects:
 15896 ;;		On entry : 0/0
 15897 ;;		On exit  : 0/0
 15898 ;;		Unchanged: 0/0
 15899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15900 ;;      Params:         0       0       0       0       0       0       0
 15901 ;;      Locals:         0       0       0       0       0       0       0
 15902 ;;      Temps:          0       0       0       0       0       0       0
 15903 ;;      Totals:         0       0       0       0       0       0       0
 15904 ;;Total ram usage:        0 bytes
 15905 ;; Hardware stack levels used:    1
 15906 ;; Hardware stack levels required when called:    2
 15907 ;; This function calls:
 15908 ;;		Nothing
 15909 ;; This function is called by:
 15910 ;;		_main
 15911 ;;		_init_app_eeprom
 15912 ;;		_vscp_setGUID
 15913 ;;		_vscp_setManufacturerId
 15914 ;;		_vscp_writeNicknamePermanent
 15915 ;;		_vscp_writeAppReg
 15916 ;;		_doActionDisable
 15917 ;;		_vscp_setUserID
 15918 ;;		_vscp_setSegmentCRC
 15919 ;;		_vscp_setControlByte
 15920 ;;		_vscp_goBootloaderMode
 15921 ;; This function uses a non-reentrant model
 15922 ;;
 15923                           
 15924                           	psect	text68
 15925  003D54                     __ptext68:
 15926                           	opt stack 0
 15927  003D54                     _Busy_eep:
 15928                           	opt stack 26
 15929  003D54                     l1305:
 15930  003D54  A2A6               	btfss	4006,1,c	;volatile
 15931  003D56  0012               	return	
 15932  003D58  D7FD               	goto	l1305
 15933  003D5A                     __end_of_Busy_eep:
 15934                           	opt stack 0
 15935                           tblptru	equ	0xFF8
 15936                           tblptrh	equ	0xFF7
 15937                           tblptrl	equ	0xFF6
 15938                           tablat	equ	0xFF5
 15939                           prodh	equ	0xFF4
 15940                           prodl	equ	0xFF3
 15941                           intcon	equ	0xFF2
 15942                           postinc0	equ	0xFEE
 15943                           wreg	equ	0xFE8
 15944                           indf1	equ	0xFE7
 15945                           fsr1h	equ	0xFE2
 15946                           fsr1l	equ	0xFE1
 15947                           indf2	equ	0xFDF
 15948                           postinc2	equ	0xFDE
 15949                           postdec2	equ	0xFDD
 15950                           plusw2	equ	0xFDB
 15951                           fsr2h	equ	0xFDA
 15952                           fsr2l	equ	0xFD9
 15953                           status	equ	0xFD8
 15954                           
 15955 ;; *************** function _init *****************
 15956 ;; Defined at:
 15957 ;;		line 318 in file "../main.c"
 15958 ;; Parameters:    Size  Location     Type
 15959 ;;		None
 15960 ;; Auto vars:     Size  Location     Type
 15961 ;;		None
 15962 ;; Return value:  Size  Location     Type
 15963 ;;		None               void
 15964 ;; Registers used:
 15965 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15966 ;; Tracked objects:
 15967 ;;		On entry : 0/0
 15968 ;;		On exit  : 0/0
 15969 ;;		Unchanged: 0/0
 15970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15971 ;;      Params:         0       0       0       0       0       0       0
 15972 ;;      Locals:         0       0       0       0       0       0       0
 15973 ;;      Temps:          0       0       0       0       0       0       0
 15974 ;;      Totals:         0       0       0       0       0       0       0
 15975 ;;Total ram usage:        0 bytes
 15976 ;; Hardware stack levels used:    1
 15977 ;; Hardware stack levels required when called:    4
 15978 ;; This function calls:
 15979 ;;		_WriteTimer0
 15980 ;;		_init_app_ram
 15981 ;;		_OpenTimer0
 15982 ;;		_ECANInitialize
 15983 ;; This function is called by:
 15984 ;;		_main
 15985 ;; This function uses a non-reentrant model
 15986 ;;
 15987                           
 15988                           	psect	text69
 15989  0038E2                     __ptext69:
 15990                           	opt stack 0
 15991  0038E2                     _init:
 15992                           	opt stack 26
 15993                           
 15994                           ;main.c: 323: init_app_ram();
 15995                           
 15996                           ;incstack = 0
 15997                           ;incstack = 0
 15998  0038E2  EC5B  F018         	call	_init_app_ram	;wreg free
 15999                           
 16000                           ;main.c: 334: TRISA = 0x00;
 16001  0038E6  6A92               	clrf	3986,c	;volatile
 16002                           
 16003                           ;main.c: 335: PORTA = 0x00;
 16004  0038E8  6A80               	clrf	3968,c	;volatile
 16005                           
 16006                           ;main.c: 347: TRISB = 0b00001000;
 16007  0038EA  0E08               	movlw	8
 16008  0038EC  6E93               	movwf	3987,c	;volatile
 16009                           
 16010                           ;main.c: 348: PORTB = 0x00;
 16011  0038EE  6A81               	clrf	3969,c	;volatile
 16012                           
 16013                           ;main.c: 358: TRISC = 0b00000001;
 16014  0038F0  0E01               	movlw	1
 16015  0038F2  6E94               	movwf	3988,c	;volatile
 16016                           
 16017                           ;main.c: 359: PORTC = 0x00;
 16018  0038F4  6A82               	clrf	3970,c	;volatile
 16019                           
 16020                           ;main.c: 385: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 16021  0038F6  0E92               	movlw	146
 16022  0038F8  ECDE  F01D         	call	_OpenTimer0
 16023                           
 16024                           ;main.c: 386: WriteTimer0( 0xfb1d );
 16025  0038FC  0EFB               	movlw	251
 16026  0038FE  6E09               	movwf	?_WriteTimer0+1,c
 16027  003900  0E1D               	movlw	29
 16028  003902  6E08               	movwf	?_WriteTimer0,c
 16029  003904  EC6D  F01E         	call	_WriteTimer0	;wreg free
 16030                           
 16031                           ;main.c: 389: LATBbits.LATB4 = 0;
 16032  003908  988A               	bcf	3978,4,c	;volatile
 16033                           
 16034                           ;main.c: 390: LATBbits.LATB1 = 0;
 16035  00390A  928A               	bcf	3978,1,c	;volatile
 16036                           
 16037                           ;main.c: 391: LATBbits.LATB0 = 0;
 16038  00390C  908A               	bcf	3978,0,c	;volatile
 16039                           
 16040                           ;main.c: 392: LATCbits.LATC7 = 0;
 16041  00390E  9E8B               	bcf	3979,7,c	;volatile
 16042                           
 16043                           ;main.c: 393: LATCbits.LATC6 = 0;
 16044  003910  9C8B               	bcf	3979,6,c	;volatile
 16045                           
 16046                           ;main.c: 394: LATCbits.LATC5 = 0;
 16047  003912  9A8B               	bcf	3979,5,c	;volatile
 16048                           
 16049                           ;main.c: 395: LATCbits.LATC4 = 0;
 16050  003914  988B               	bcf	3979,4,c	;volatile
 16051                           
 16052                           ;main.c: 398: ECANInitialize();
 16053  003916  ECCC  F01A         	call	_ECANInitialize	;wreg free
 16054                           
 16055                           ;main.c: 419: INTCONbits.PEIE = 1;
 16056  00391A  8CF2               	bsf	intcon,6,c	;volatile
 16057                           
 16058                           ;main.c: 422: INTCONbits.GIE = 1;
 16059  00391C  8EF2               	bsf	intcon,7,c	;volatile
 16060  00391E  0012               	return	
 16061  003920                     __end_of_init:
 16062                           	opt stack 0
 16063                           tblptru	equ	0xFF8
 16064                           tblptrh	equ	0xFF7
 16065                           tblptrl	equ	0xFF6
 16066                           tablat	equ	0xFF5
 16067                           prodh	equ	0xFF4
 16068                           prodl	equ	0xFF3
 16069                           intcon	equ	0xFF2
 16070                           postinc0	equ	0xFEE
 16071                           wreg	equ	0xFE8
 16072                           indf1	equ	0xFE7
 16073                           fsr1h	equ	0xFE2
 16074                           fsr1l	equ	0xFE1
 16075                           indf2	equ	0xFDF
 16076                           postinc2	equ	0xFDE
 16077                           postdec2	equ	0xFDD
 16078                           plusw2	equ	0xFDB
 16079                           fsr2h	equ	0xFDA
 16080                           fsr2l	equ	0xFD9
 16081                           status	equ	0xFD8
 16082                           
 16083 ;; *************** function _ECANInitialize *****************
 16084 ;; Defined at:
 16085 ;;		line 168 in file "../ECAN.c"
 16086 ;; Parameters:    Size  Location     Type
 16087 ;;		None
 16088 ;; Auto vars:     Size  Location     Type
 16089 ;;		None
 16090 ;; Return value:  Size  Location     Type
 16091 ;;		None               void
 16092 ;; Registers used:
 16093 ;;		wreg, status,2, status,0, cstack
 16094 ;; Tracked objects:
 16095 ;;		On entry : 0/0
 16096 ;;		On exit  : 0/0
 16097 ;;		Unchanged: 0/0
 16098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16099 ;;      Params:         0       0       0       0       0       0       0
 16100 ;;      Locals:         0       0       0       0       0       0       0
 16101 ;;      Temps:          0       0       0       0       0       0       0
 16102 ;;      Totals:         0       0       0       0       0       0       0
 16103 ;;Total ram usage:        0 bytes
 16104 ;; Hardware stack levels used:    1
 16105 ;; Hardware stack levels required when called:    3
 16106 ;; This function calls:
 16107 ;;		_ECANSetOperationMode
 16108 ;; This function is called by:
 16109 ;;		_init
 16110 ;; This function uses a non-reentrant model
 16111 ;;
 16112                           
 16113                           	psect	text70
 16114  003598                     __ptext70:
 16115                           	opt stack 0
 16116  003598                     _ECANInitialize:
 16117                           	opt stack 26
 16118                           
 16119                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 16120                           
 16121                           ;incstack = 0
 16122                           ;incstack = 0
 16123  003598  0E80               	movlw	128
 16124  00359A  EC22  F01E         	call	_ECANSetOperationMode
 16125                           
 16126                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 16127  00359E  0E09               	movlw	9
 16128  0035A0  6E70               	movwf	3952,c	;volatile
 16129                           
 16130                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 16131  0035A2  0EFC               	movlw	252
 16132  0035A4  6E71               	movwf	3953,c	;volatile
 16133                           
 16134                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 16135                           ;ECAN.c: 181: (0 << 6) |
 16136                           ;ECAN.c: 182: (2-1);
 16137  0035A6  0E01               	movlw	1
 16138  0035A8  6E72               	movwf	3954,c	;volatile
 16139                           
 16140                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 16141  0035AA  0E20               	movlw	32
 16142  0035AC  6E73               	movwf	3955,c	;volatile
 16143                           
 16144                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 16145  0035AE  8E77               	bsf	3959,7,c	;volatile
 16146                           
 16147                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 16148  0035B0  9C77               	bcf	3959,6,c	;volatile
 16149                           
 16150                           ;ECAN.c: 205: RXB0CON = 0;
 16151  0035B2  6A60               	clrf	3936,c	;volatile
 16152                           
 16153                           ;ECAN.c: 211: RXB1CON = 0;
 16154  0035B4  010F               	movlb	15	; () banked
 16155  0035B6  6B50               	clrf	80,b	;volatile
 16156                           
 16157                           ; BSR set to: 15
 16158                           ;ECAN.c: 221: B0CON = 0;
 16159  0035B8  010E               	movlb	14	; () banked
 16160  0035BA  6B20               	clrf	32,b	;volatile
 16161                           
 16162                           ; BSR set to: 14
 16163                           ;ECAN.c: 231: B1CON = 0;
 16164  0035BC  6B30               	clrf	48,b	;volatile
 16165                           
 16166                           ; BSR set to: 14
 16167                           ;ECAN.c: 241: B2CON = 0;
 16168  0035BE  6B40               	clrf	64,b	;volatile
 16169                           
 16170                           ; BSR set to: 14
 16171                           ;ECAN.c: 254: B3CON = 0 << 2;
 16172  0035C0  6B50               	clrf	80,b	;volatile
 16173                           
 16174                           ; BSR set to: 14
 16175                           ;ECAN.c: 264: B4CON = 0 << 2;
 16176  0035C2  6B60               	clrf	96,b	;volatile
 16177                           
 16178                           ; BSR set to: 14
 16179                           ;ECAN.c: 274: B5CON = 0 << 2;
 16180  0035C4  6B70               	clrf	112,b	;volatile
 16181                           
 16182                           ; BSR set to: 14
 16183                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 16184  0035C6  0EE0               	movlw	224
 16185  0035C8  010D               	movlb	13	; () banked
 16186  0035CA  6FF8               	movwf	248,b	;volatile
 16187                           
 16188                           ; BSR set to: 13
 16189                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 16190  0035CC  010F               	movlb	15	; () banked
 16191  0035CE  6B00               	clrf	0,b	;volatile
 16192                           
 16193                           ; BSR set to: 15
 16194  0035D0  0E08               	movlw	8
 16195  0035D2  6F01               	movwf	1,b	;volatile
 16196                           
 16197                           ; BSR set to: 15
 16198  0035D4  6B02               	clrf	2,b	;volatile
 16199                           
 16200                           ; BSR set to: 15
 16201  0035D6  6B03               	clrf	3,b	;volatile
 16202                           
 16203                           ; BSR set to: 15
 16204                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 16205  0035D8  6B04               	clrf	4,b	;volatile
 16206                           
 16207                           ; BSR set to: 15
 16208  0035DA  0EE8               	movlw	232
 16209  0035DC  6F05               	movwf	5,b	;volatile
 16210                           
 16211                           ; BSR set to: 15
 16212  0035DE  0E1A               	movlw	26
 16213  0035E0  6F06               	movwf	6,b	;volatile
 16214                           
 16215                           ; BSR set to: 15
 16216  0035E2  6B07               	clrf	7,b	;volatile
 16217                           
 16218                           ; BSR set to: 15
 16219                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 16220  0035E4  0E03               	movlw	3
 16221  0035E6  010D               	movlb	13	; () banked
 16222  0035E8  6FD4               	movwf	212,b	;volatile
 16223                           
 16224                           ; BSR set to: 13
 16225                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 16226  0035EA  6BD5               	clrf	213,b	;volatile
 16227                           
 16228                           ; BSR set to: 13
 16229                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 16230  0035EC  6BE0               	clrf	224,b	;volatile
 16231                           
 16232                           ; BSR set to: 13
 16233                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 16234  0035EE  0E11               	movlw	17
 16235  0035F0  6FE1               	movwf	225,b	;volatile
 16236                           
 16237                           ; BSR set to: 13
 16238                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 16239  0035F2  6FE2               	movwf	226,b	;volatile
 16240                           
 16241                           ; BSR set to: 13
 16242                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 16243  0035F4  6BE3               	clrf	227,b	;volatile
 16244                           
 16245                           ; BSR set to: 13
 16246                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 16247  0035F6  6BE4               	clrf	228,b	;volatile
 16248                           
 16249                           ; BSR set to: 13
 16250                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 16251  0035F8  6BE5               	clrf	229,b	;volatile
 16252                           
 16253                           ; BSR set to: 13
 16254                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 16255  0035FA  6BE6               	clrf	230,b	;volatile
 16256                           
 16257                           ; BSR set to: 13
 16258                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 16259  0035FC  6BE7               	clrf	231,b	;volatile
 16260                           
 16261                           ; BSR set to: 13
 16262                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 16263  0035FE  0E54               	movlw	84
 16264  003600  6FF0               	movwf	240,b	;volatile
 16265                           
 16266                           ; BSR set to: 13
 16267                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 16268  003602  0E05               	movlw	5
 16269  003604  6FF1               	movwf	241,b	;volatile
 16270                           
 16271                           ; BSR set to: 13
 16272                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 16273  003606  6BF2               	clrf	242,b	;volatile
 16274                           
 16275                           ; BSR set to: 13
 16276                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 16277  003608  6BF2               	clrf	242,b	;volatile
 16278                           
 16279                           ; BSR set to: 13
 16280                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 16281  00360A  0E0F               	movlw	15
 16282  00360C  010F               	movlb	15	; () banked
 16283  00360E  6F18               	movwf	24,b	;volatile
 16284                           
 16285                           ; BSR set to: 15
 16286  003610  0EE0               	movlw	224
 16287  003612  6F19               	movwf	25,b	;volatile
 16288                           
 16289                           ; BSR set to: 15
 16290  003614  6B1A               	clrf	26,b	;volatile
 16291                           
 16292                           ; BSR set to: 15
 16293  003616  6B1B               	clrf	27,b	;volatile
 16294                           
 16295                           ; BSR set to: 15
 16296                           ;ECAN.c: 482: RXM0EXIDM = 1;
 16297  003618  8719               	bsf	25,3,b	;volatile
 16298                           
 16299                           ; BSR set to: 15
 16300                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 16301  00361A  0E0F               	movlw	15
 16302  00361C  6F1C               	movwf	28,b	;volatile
 16303                           
 16304                           ; BSR set to: 15
 16305  00361E  0EE0               	movlw	224
 16306  003620  6F1D               	movwf	29,b	;volatile
 16307                           
 16308                           ; BSR set to: 15
 16309  003622  691E               	setf	30,b	;volatile
 16310                           
 16311                           ; BSR set to: 15
 16312  003624  6B1F               	clrf	31,b	;volatile
 16313                           
 16314                           ; BSR set to: 15
 16315                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 16316  003626  871D               	bsf	29,3,b	;volatile
 16317                           
 16318                           ; BSR set to: 15
 16319                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 16320  003628  0E00               	movlw	0
 16321  00362A  EF22  F01E         	goto	_ECANSetOperationMode
 16322  00362E                     __end_of_ECANInitialize:
 16323                           	opt stack 0
 16324                           tblptru	equ	0xFF8
 16325                           tblptrh	equ	0xFF7
 16326                           tblptrl	equ	0xFF6
 16327                           tablat	equ	0xFF5
 16328                           prodh	equ	0xFF4
 16329                           prodl	equ	0xFF3
 16330                           intcon	equ	0xFF2
 16331                           postinc0	equ	0xFEE
 16332                           wreg	equ	0xFE8
 16333                           indf1	equ	0xFE7
 16334                           fsr1h	equ	0xFE2
 16335                           fsr1l	equ	0xFE1
 16336                           indf2	equ	0xFDF
 16337                           postinc2	equ	0xFDE
 16338                           postdec2	equ	0xFDD
 16339                           plusw2	equ	0xFDB
 16340                           fsr2h	equ	0xFDA
 16341                           fsr2l	equ	0xFD9
 16342                           status	equ	0xFD8
 16343                           
 16344 ;; *************** function _ECANSetOperationMode *****************
 16345 ;; Defined at:
 16346 ;;		line 1012 in file "../ECAN.c"
 16347 ;; Parameters:    Size  Location     Type
 16348 ;;  mode            1    wreg     enum E16337
 16349 ;; Auto vars:     Size  Location     Type
 16350 ;;  mode            1    7[COMRAM] enum E16337
 16351 ;; Return value:  Size  Location     Type
 16352 ;;		None               void
 16353 ;; Registers used:
 16354 ;;		wreg, status,2, status,0
 16355 ;; Tracked objects:
 16356 ;;		On entry : 0/0
 16357 ;;		On exit  : 0/0
 16358 ;;		Unchanged: 0/0
 16359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16360 ;;      Params:         0       0       0       0       0       0       0
 16361 ;;      Locals:         1       0       0       0       0       0       0
 16362 ;;      Temps:          0       0       0       0       0       0       0
 16363 ;;      Totals:         1       0       0       0       0       0       0
 16364 ;;Total ram usage:        1 bytes
 16365 ;; Hardware stack levels used:    1
 16366 ;; Hardware stack levels required when called:    2
 16367 ;; This function calls:
 16368 ;;		Nothing
 16369 ;; This function is called by:
 16370 ;;		_calculateSetFilterMask
 16371 ;;		_ECANInitialize
 16372 ;; This function uses a non-reentrant model
 16373 ;;
 16374                           
 16375                           	psect	text71
 16376  003C44                     __ptext71:
 16377                           	opt stack 0
 16378  003C44                     _ECANSetOperationMode:
 16379                           	opt stack 24
 16380                           
 16381                           ;incstack = 0
 16382                           ;incstack = 0
 16383                           ;ECANSetOperationMode@mode stored from wreg
 16384  003C44  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 16385                           
 16386                           ;ECAN.c: 1013: CANCON &= 0x1F;
 16387  003C48  0E1F               	movlw	31
 16388  003C4A  166F               	andwf	3951,f,c	;volatile
 16389                           
 16390                           ;ECAN.c: 1014: CANCON |= mode;
 16391  003C4C  5008               	movf	ECANSetOperationMode@mode,w,c
 16392  003C4E  126F               	iorwf	3951,f,c	;volatile
 16393  003C50                     l7189:
 16394  003C50  506F               	movf	3951,w,c	;volatile
 16395  003C52  0BE0               	andlw	224
 16396  003C54  1808               	xorwf	ECANSetOperationMode@mode,w,c
 16397  003C56  B4D8               	btfsc	status,2,c
 16398  003C58  0012               	return	
 16399  003C5A  D7FA               	goto	l7189
 16400  003C5C                     __end_of_ECANSetOperationMode:
 16401                           	opt stack 0
 16402                           tblptru	equ	0xFF8
 16403                           tblptrh	equ	0xFF7
 16404                           tblptrl	equ	0xFF6
 16405                           tablat	equ	0xFF5
 16406                           prodh	equ	0xFF4
 16407                           prodl	equ	0xFF3
 16408                           intcon	equ	0xFF2
 16409                           postinc0	equ	0xFEE
 16410                           wreg	equ	0xFE8
 16411                           indf1	equ	0xFE7
 16412                           fsr1h	equ	0xFE2
 16413                           fsr1l	equ	0xFE1
 16414                           indf2	equ	0xFDF
 16415                           postinc2	equ	0xFDE
 16416                           postdec2	equ	0xFDD
 16417                           plusw2	equ	0xFDB
 16418                           fsr2h	equ	0xFDA
 16419                           fsr2l	equ	0xFD9
 16420                           status	equ	0xFD8
 16421                           
 16422 ;; *************** function _OpenTimer0 *****************
 16423 ;; Defined at:
 16424 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 16425 ;; Parameters:    Size  Location     Type
 16426 ;;  config          1    wreg     unsigned char 
 16427 ;; Auto vars:     Size  Location     Type
 16428 ;;  config          1    7[COMRAM] unsigned char 
 16429 ;; Return value:  Size  Location     Type
 16430 ;;		None               void
 16431 ;; Registers used:
 16432 ;;		wreg, status,2, status,0
 16433 ;; Tracked objects:
 16434 ;;		On entry : 0/0
 16435 ;;		On exit  : 0/0
 16436 ;;		Unchanged: 0/0
 16437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16438 ;;      Params:         0       0       0       0       0       0       0
 16439 ;;      Locals:         1       0       0       0       0       0       0
 16440 ;;      Temps:          0       0       0       0       0       0       0
 16441 ;;      Totals:         1       0       0       0       0       0       0
 16442 ;;Total ram usage:        1 bytes
 16443 ;; Hardware stack levels used:    1
 16444 ;; Hardware stack levels required when called:    2
 16445 ;; This function calls:
 16446 ;;		Nothing
 16447 ;; This function is called by:
 16448 ;;		_init
 16449 ;; This function uses a non-reentrant model
 16450 ;;
 16451                           
 16452                           	psect	text72
 16453  003BBC                     __ptext72:
 16454                           	opt stack 0
 16455  003BBC                     _OpenTimer0:
 16456                           	opt stack 27
 16457                           
 16458                           ;incstack = 0
 16459                           ;incstack = 0
 16460                           ;OpenTimer0@config stored from wreg
 16461  003BBC  CFE8 F008          	movff	wreg,OpenTimer0@config
 16462  003BC0  5008               	movf	OpenTimer0@config,w,c
 16463  003BC2  0B7F               	andlw	127
 16464  003BC4  6ED5               	movwf	4053,c	;volatile
 16465  003BC6  6AD7               	clrf	4055,c	;volatile
 16466  003BC8  6AD6               	clrf	4054,c	;volatile
 16467  003BCA  94F2               	bcf	intcon,2,c	;volatile
 16468  003BCC  AE08               	btfss	OpenTimer0@config,7,c
 16469  003BCE  D002               	goto	l1346
 16470  003BD0  8AF2               	bsf	intcon,5,c	;volatile
 16471  003BD2  D001               	goto	l1347
 16472  003BD4                     l1346:
 16473  003BD4  9AF2               	bcf	intcon,5,c	;volatile
 16474  003BD6                     l1347:
 16475  003BD6  8ED5               	bsf	4053,7,c	;volatile
 16476  003BD8  0012               	return	
 16477  003BDA                     __end_of_OpenTimer0:
 16478                           	opt stack 0
 16479                           tblptru	equ	0xFF8
 16480                           tblptrh	equ	0xFF7
 16481                           tblptrl	equ	0xFF6
 16482                           tablat	equ	0xFF5
 16483                           prodh	equ	0xFF4
 16484                           prodl	equ	0xFF3
 16485                           intcon	equ	0xFF2
 16486                           postinc0	equ	0xFEE
 16487                           wreg	equ	0xFE8
 16488                           indf1	equ	0xFE7
 16489                           fsr1h	equ	0xFE2
 16490                           fsr1l	equ	0xFE1
 16491                           indf2	equ	0xFDF
 16492                           postinc2	equ	0xFDE
 16493                           postdec2	equ	0xFDD
 16494                           plusw2	equ	0xFDB
 16495                           fsr2h	equ	0xFDA
 16496                           fsr2l	equ	0xFD9
 16497                           status	equ	0xFD8
 16498                           
 16499 ;; *************** function _init_app_ram *****************
 16500 ;; Defined at:
 16501 ;;		line 432 in file "../main.c"
 16502 ;; Parameters:    Size  Location     Type
 16503 ;;		None
 16504 ;; Auto vars:     Size  Location     Type
 16505 ;;  i               1   11[COMRAM] unsigned char 
 16506 ;; Return value:  Size  Location     Type
 16507 ;;		None               void
 16508 ;; Registers used:
 16509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16510 ;; Tracked objects:
 16511 ;;		On entry : 0/0
 16512 ;;		On exit  : 0/0
 16513 ;;		Unchanged: 0/0
 16514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16515 ;;      Params:         0       0       0       0       0       0       0
 16516 ;;      Locals:         1       0       0       0       0       0       0
 16517 ;;      Temps:          2       0       0       0       0       0       0
 16518 ;;      Totals:         3       0       0       0       0       0       0
 16519 ;;Total ram usage:        3 bytes
 16520 ;; Hardware stack levels used:    1
 16521 ;; Hardware stack levels required when called:    3
 16522 ;; This function calls:
 16523 ;;		_Read_b_eep
 16524 ;; This function is called by:
 16525 ;;		_main
 16526 ;;		_init
 16527 ;;		_vscp_restoreDefaults
 16528 ;; This function uses a non-reentrant model
 16529 ;;
 16530                           
 16531                           	psect	text73
 16532  0030B6                     __ptext73:
 16533                           	opt stack 0
 16534  0030B6                     _init_app_ram:
 16535                           	opt stack 24
 16536                           
 16537                           ;main.c: 433: uint8_t i;
 16538                           ;main.c: 435: measurement_clock = 0;
 16539                           
 16540                           ;incstack = 0
 16541                           ;incstack = 0
 16542  0030B6  0100               	movlb	0	; () banked
 16543  0030B8  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
 16544  0030BA  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 16545  0030BC  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 16546  0030BE  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 16547                           
 16548                           ;main.c: 437: seconds = 0;
 16549  0030C0  6B8B               	clrf	_seconds& (0+255),b
 16550                           
 16551                           ;main.c: 438: minutes = 0;
 16552  0030C2  6B89               	clrf	_minutes& (0+255),b
 16553                           
 16554                           ;main.c: 439: hours = 0;
 16555  0030C4  6B88               	clrf	_hours& (0+255),b
 16556                           
 16557                           ;main.c: 441: relay_pulse_flags = 0;
 16558  0030C6  6B8A               	clrf	_relay_pulse_flags& (0+255),b
 16559                           
 16560                           ;main.c: 444: for ( i = 0; i < 8; i++ ) {
 16561  0030C8  6A0C               	clrf	init_app_ram@i,c
 16562  0030CA                     l7723:
 16563                           
 16564                           ; BSR set to: 0
 16565                           ;main.c: 445: relay_pulse_timer[ i ] = 0;
 16566  0030CA  500C               	movf	init_app_ram@i,w,c
 16567  0030CC  0D02               	mullw	2
 16568  0030CE  50F3               	movf	prodl,w,c
 16569  0030D0  0F70               	addlw	low _relay_pulse_timer
 16570  0030D2  6ED9               	movwf	fsr2l,c
 16571  0030D4  6ADA               	clrf	fsr2h,c
 16572  0030D6  6ADE               	clrf	postinc2,c
 16573  0030D8  6ADD               	clrf	postdec2,c
 16574                           
 16575                           ;main.c: 446: relay_protection_timer[ i ] = 0;
 16576  0030DA  500C               	movf	init_app_ram@i,w,c
 16577  0030DC  0D02               	mullw	2
 16578  0030DE  50F3               	movf	prodl,w,c
 16579  0030E0  0F60               	addlw	low _relay_protection_timer
 16580  0030E2  6ED9               	movwf	fsr2l,c
 16581  0030E4  6ADA               	clrf	fsr2h,c
 16582  0030E6  6ADE               	clrf	postinc2,c
 16583  0030E8  6ADD               	clrf	postdec2,c
 16584                           
 16585                           ; BSR set to: 0
 16586  0030EA  2A0C               	incf	init_app_ram@i,f,c
 16587                           
 16588                           ; BSR set to: 0
 16589  0030EC  0E07               	movlw	7
 16590  0030EE  640C               	cpfsgt	init_app_ram@i,c
 16591  0030F0  D7EC               	goto	l7723
 16592                           
 16593                           ; BSR set to: 0
 16594                           ;main.c: 447: }
 16595                           ;main.c: 449: for ( i=0; i<7; i++ ) {
 16596  0030F2  6A0C               	clrf	init_app_ram@i,c
 16597  0030F4                     l7733:
 16598                           
 16599                           ;main.c: 452: if ( Read_b_eep(0x43 + 10 + i) &
 16600                           ;main.c: 453: 0x01 ) {
 16601  0030F4  0E4D               	movlw	77
 16602  0030F6  240C               	addwf	init_app_ram@i,w,c
 16603  0030F8  6E08               	movwf	?_Read_b_eep,c
 16604  0030FA  6A09               	clrf	?_Read_b_eep+1,c
 16605  0030FC  0E00               	movlw	0
 16606  0030FE  2209               	addwfc	?_Read_b_eep+1,f,c
 16607  003100  EC76  F01E         	call	_Read_b_eep	;wreg free
 16608  003104  6E0A               	movwf	??_init_app_ram& (0+255),c
 16609  003106  A00A               	btfss	??_init_app_ram,0,c
 16610  003108  D027               	goto	l7739
 16611                           
 16612                           ;main.c: 455: relay_pulse_flags |= (1<<i);
 16613  00310A  C00C  F00A         	movff	init_app_ram@i,??_init_app_ram
 16614  00310E  0E01               	movlw	1
 16615  003110  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16616  003112  2A0A               	incf	??_init_app_ram,f,c
 16617  003114  D002               	goto	u8234
 16618  003116                     u8235:
 16619  003116  90D8               	bcf	status,0,c
 16620  003118  360B               	rlcf	??_init_app_ram+1,f,c
 16621  00311A                     u8234:
 16622  00311A  2E0A               	decfsz	??_init_app_ram,f,c
 16623  00311C  D7FC               	goto	u8235
 16624  00311E  500B               	movf	??_init_app_ram+1,w,c
 16625  003120  0100               	movlb	0	; () banked
 16626  003122  138A               	iorwf	_relay_pulse_flags& (0+255),f,b
 16627                           
 16628                           ; BSR set to: 0
 16629                           ;main.c: 456: relay_pulse_timer[ i ] =
 16630                           ;main.c: 457: Read_b_eep(0x43 + 18 + i) * 256 +
 16631                           ;main.c: 458: Read_b_eep(0x43 + 19 + i);
 16632  003124  0E55               	movlw	85
 16633  003126  240C               	addwf	init_app_ram@i,w,c
 16634  003128  6E08               	movwf	?_Read_b_eep,c
 16635  00312A  6A09               	clrf	?_Read_b_eep+1,c
 16636  00312C  0E00               	movlw	0
 16637  00312E  2209               	addwfc	?_Read_b_eep+1,f,c
 16638  003130  EC76  F01E         	call	_Read_b_eep	;wreg free
 16639  003134  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16640  003136  6A0A               	clrf	??_init_app_ram& (0+255),c
 16641  003138  0E56               	movlw	86
 16642  00313A  240C               	addwf	init_app_ram@i,w,c
 16643  00313C  6E08               	movwf	?_Read_b_eep,c
 16644  00313E  6A09               	clrf	?_Read_b_eep+1,c
 16645  003140  0E00               	movlw	0
 16646  003142  2209               	addwfc	?_Read_b_eep+1,f,c
 16647  003144  EC76  F01E         	call	_Read_b_eep	;wreg free
 16648  003148  D831               	call	PL62	;call to abstracted procedure
 16649  00314A  0F70               	addlw	low _relay_pulse_timer
 16650  00314C  6ED9               	movwf	fsr2l,c
 16651  00314E  6ADA               	clrf	fsr2h,c
 16652  003150  C00A  FFDE         	movff	??_init_app_ram,postinc2
 16653  003154  C00B  FFDD         	movff	??_init_app_ram+1,postdec2
 16654  003158                     l7739:
 16655                           
 16656                           ;main.c: 459: }
 16657                           ;main.c: 462: if ( Read_b_eep(0x43 + 15 + i) & 0x04) {
 16658  003158  0E52               	movlw	82
 16659  00315A  240C               	addwf	init_app_ram@i,w,c
 16660  00315C  6E08               	movwf	?_Read_b_eep,c
 16661  00315E  6A09               	clrf	?_Read_b_eep+1,c
 16662  003160  0E00               	movlw	0
 16663  003162  2209               	addwfc	?_Read_b_eep+1,f,c
 16664  003164  EC76  F01E         	call	_Read_b_eep	;wreg free
 16665  003168  6E0A               	movwf	??_init_app_ram& (0+255),c
 16666  00316A  A40A               	btfss	??_init_app_ram,2,c
 16667  00316C  D01A               	goto	l7743
 16668                           
 16669                           ;main.c: 463: relay_protection_timer[ i ] =
 16670                           ;main.c: 464: Read_b_eep(0x43 + 44 + i) * 256 +
 16671                           ;main.c: 465: Read_b_eep(0x43 + 45 + i);
 16672  00316E  0E6F               	movlw	111
 16673  003170  240C               	addwf	init_app_ram@i,w,c
 16674  003172  6E08               	movwf	?_Read_b_eep,c
 16675  003174  6A09               	clrf	?_Read_b_eep+1,c
 16676  003176  0E00               	movlw	0
 16677  003178  2209               	addwfc	?_Read_b_eep+1,f,c
 16678  00317A  EC76  F01E         	call	_Read_b_eep	;wreg free
 16679  00317E  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16680  003180  6A0A               	clrf	??_init_app_ram& (0+255),c
 16681  003182  0E70               	movlw	112
 16682  003184  240C               	addwf	init_app_ram@i,w,c
 16683  003186  6E08               	movwf	?_Read_b_eep,c
 16684  003188  6A09               	clrf	?_Read_b_eep+1,c
 16685  00318A  0E00               	movlw	0
 16686  00318C  2209               	addwfc	?_Read_b_eep+1,f,c
 16687  00318E  EC76  F01E         	call	_Read_b_eep	;wreg free
 16688  003192  D80C               	call	PL62	;call to abstracted procedure
 16689  003194  0F60               	addlw	low _relay_protection_timer
 16690  003196  6ED9               	movwf	fsr2l,c
 16691  003198  6ADA               	clrf	fsr2h,c
 16692  00319A  C00A  FFDE         	movff	??_init_app_ram,postinc2
 16693  00319E  C00B  FFDD         	movff	??_init_app_ram+1,postdec2
 16694  0031A2                     l7743:
 16695  0031A2  2A0C               	incf	init_app_ram@i,f,c
 16696  0031A4  0E06               	movlw	6
 16697  0031A6  640C               	cpfsgt	init_app_ram@i,c
 16698  0031A8  D7A5               	goto	l7733
 16699  0031AA  0C06               	retlw	6
 16700  0031AC                     __end_of_init_app_ram:
 16701                           	opt stack 0
 16702  0031AC                     PL62:
 16703                           	opt stack 24
 16704  0031AC  260A               	addwf	??_init_app_ram,f,c
 16705  0031AE  0E00               	movlw	0
 16706  0031B0  220B               	addwfc	??_init_app_ram+1,f,c
 16707  0031B2  500C               	movf	init_app_ram@i,w,c
 16708  0031B4  0D02               	mullw	2
 16709  0031B6  50F3               	movf	prodl,w,c
 16710  0031B8  0100               	movlb	0	; () banked
 16711  0031BA  0012               	return	
 16712  0031BC                     __end_ofPL62:
 16713                           	opt stack 0
 16714                           tblptru	equ	0xFF8
 16715                           tblptrh	equ	0xFF7
 16716                           tblptrl	equ	0xFF6
 16717                           tablat	equ	0xFF5
 16718                           prodh	equ	0xFF4
 16719                           prodl	equ	0xFF3
 16720                           intcon	equ	0xFF2
 16721                           postinc0	equ	0xFEE
 16722                           wreg	equ	0xFE8
 16723                           indf1	equ	0xFE7
 16724                           fsr1h	equ	0xFE2
 16725                           fsr1l	equ	0xFE1
 16726                           indf2	equ	0xFDF
 16727                           postinc2	equ	0xFDE
 16728                           postdec2	equ	0xFDD
 16729                           plusw2	equ	0xFDB
 16730                           fsr2h	equ	0xFDA
 16731                           fsr2l	equ	0xFD9
 16732                           status	equ	0xFD8
 16733                           
 16734 ;; *************** function _WriteTimer0 *****************
 16735 ;; Defined at:
 16736 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16737 ;; Parameters:    Size  Location     Type
 16738 ;;  timer0          2    7[COMRAM] unsigned int 
 16739 ;; Auto vars:     Size  Location     Type
 16740 ;;  timer           2    9[COMRAM] struct Timers
 16741 ;; Return value:  Size  Location     Type
 16742 ;;		None               void
 16743 ;; Registers used:
 16744 ;;		None
 16745 ;; Tracked objects:
 16746 ;;		On entry : 0/0
 16747 ;;		On exit  : 0/0
 16748 ;;		Unchanged: 0/0
 16749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16750 ;;      Params:         2       0       0       0       0       0       0
 16751 ;;      Locals:         2       0       0       0       0       0       0
 16752 ;;      Temps:          0       0       0       0       0       0       0
 16753 ;;      Totals:         4       0       0       0       0       0       0
 16754 ;;Total ram usage:        4 bytes
 16755 ;; Hardware stack levels used:    1
 16756 ;; Hardware stack levels required when called:    2
 16757 ;; This function calls:
 16758 ;;		Nothing
 16759 ;; This function is called by:
 16760 ;;		_init
 16761 ;; This function uses a non-reentrant model
 16762 ;;
 16763                           
 16764                           	psect	text74
 16765  003CDA                     __ptext74:
 16766                           	opt stack 0
 16767  003CDA                     _WriteTimer0:
 16768                           	opt stack 27
 16769                           
 16770                           ;incstack = 0
 16771                           ;incstack = 0
 16772  003CDA  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 16773  003CDE  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 16774  003CE2  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 16775  003CE6  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 16776  003CEA  0012               	return	
 16777  003CEC                     __end_of_WriteTimer0:
 16778                           	opt stack 0
 16779                           tblptru	equ	0xFF8
 16780                           tblptrh	equ	0xFF7
 16781                           tblptrl	equ	0xFF6
 16782                           tablat	equ	0xFF5
 16783                           prodh	equ	0xFF4
 16784                           prodl	equ	0xFF3
 16785                           intcon	equ	0xFF2
 16786                           postinc0	equ	0xFEE
 16787                           wreg	equ	0xFE8
 16788                           indf1	equ	0xFE7
 16789                           fsr1h	equ	0xFE2
 16790                           fsr1l	equ	0xFE1
 16791                           indf2	equ	0xFDF
 16792                           postinc2	equ	0xFDE
 16793                           postdec2	equ	0xFDD
 16794                           plusw2	equ	0xFDB
 16795                           fsr2h	equ	0xFDA
 16796                           fsr2l	equ	0xFD9
 16797                           status	equ	0xFD8
 16798                           
 16799 ;; *************** function _Read_b_eep *****************
 16800 ;; Defined at:
 16801 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 16802 ;; Parameters:    Size  Location     Type
 16803 ;;  badd            2    7[COMRAM] unsigned int 
 16804 ;; Auto vars:     Size  Location     Type
 16805 ;;		None
 16806 ;; Return value:  Size  Location     Type
 16807 ;;                  1    wreg      unsigned char 
 16808 ;; Registers used:
 16809 ;;		wreg, status,2
 16810 ;; Tracked objects:
 16811 ;;		On entry : 0/0
 16812 ;;		On exit  : 0/0
 16813 ;;		Unchanged: 0/0
 16814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16815 ;;      Params:         2       0       0       0       0       0       0
 16816 ;;      Locals:         0       0       0       0       0       0       0
 16817 ;;      Temps:          0       0       0       0       0       0       0
 16818 ;;      Totals:         2       0       0       0       0       0       0
 16819 ;;Total ram usage:        2 bytes
 16820 ;; Hardware stack levels used:    1
 16821 ;; Hardware stack levels required when called:    2
 16822 ;; This function calls:
 16823 ;;		Nothing
 16824 ;; This function is called by:
 16825 ;;		_init_app_ram
 16826 ;;		_doApplicationOneSecondWork
 16827 ;;		_vscp_readNicknamePermanent
 16828 ;;		_vscp_getZone
 16829 ;;		_vscp_getSubzone
 16830 ;;		_vscp_readAppReg
 16831 ;;		_vscp_writeAppReg
 16832 ;;		_SendInformationEvent
 16833 ;;		_doDM
 16834 ;;		_doActionOn
 16835 ;;		_doActionOff
 16836 ;;		_doActionPulse
 16837 ;;		_doActionStatus
 16838 ;;		_doActionDisable
 16839 ;;		_doActionToggle
 16840 ;;		_vscp_getGUID
 16841 ;;		_vscp_getUserID
 16842 ;;		_vscp_getManufacturerId
 16843 ;;		_vscp_getSegmentCRC
 16844 ;;		_calculateSetFilterMask
 16845 ;; This function uses a non-reentrant model
 16846 ;;
 16847                           
 16848                           	psect	text75
 16849  003CEC                     __ptext75:
 16850                           	opt stack 0
 16851  003CEC                     _Read_b_eep:
 16852                           	opt stack 26
 16853                           
 16854                           ;incstack = 0
 16855                           ;incstack = 0
 16856  003CEC  C008  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 16857  003CF0  9CA6               	bcf	4006,6,c	;volatile
 16858  003CF2  9EA6               	bcf	4006,7,c	;volatile
 16859  003CF4  80A6               	bsf	4006,0,c	;volatile
 16860  003CF6  F000               	nop		;# 
 16861  003CF8  F000               	nop		;# 
 16862  003CFA  50A8               	movf	4008,w,c	;volatile
 16863  003CFC  0012               	return	
 16864  003CFE                     __end_of_Read_b_eep:
 16865                           	opt stack 0
 16866                           tblptru	equ	0xFF8
 16867                           tblptrh	equ	0xFF7
 16868                           tblptrl	equ	0xFF6
 16869                           tablat	equ	0xFF5
 16870                           prodh	equ	0xFF4
 16871                           prodl	equ	0xFF3
 16872                           intcon	equ	0xFF2
 16873                           postinc0	equ	0xFEE
 16874                           wreg	equ	0xFE8
 16875                           indf1	equ	0xFE7
 16876                           fsr1h	equ	0xFE2
 16877                           fsr1l	equ	0xFE1
 16878                           indf2	equ	0xFDF
 16879                           postinc2	equ	0xFDE
 16880                           postdec2	equ	0xFDD
 16881                           plusw2	equ	0xFDB
 16882                           fsr2h	equ	0xFDA
 16883                           fsr2l	equ	0xFD9
 16884                           status	equ	0xFD8
 16885                           
 16886 ;; *************** function _vscp_readAppReg *****************
 16887 ;; Defined at:
 16888 ;;		line 896 in file "../main.c"
 16889 ;; Parameters:    Size  Location     Type
 16890 ;;  reg             1    wreg     unsigned char 
 16891 ;; Auto vars:     Size  Location     Type
 16892 ;;  reg             1   10[COMRAM] unsigned char 
 16893 ;;  rv              1    9[COMRAM] unsigned char 
 16894 ;; Return value:  Size  Location     Type
 16895 ;;                  1    wreg      unsigned char 
 16896 ;; Registers used:
 16897 ;;		wreg, status,2, status,0, cstack
 16898 ;; Tracked objects:
 16899 ;;		On entry : F/0
 16900 ;;		On exit  : 0/0
 16901 ;;		Unchanged: 0/0
 16902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16903 ;;      Params:         0       0       0       0       0       0       0
 16904 ;;      Locals:         2       0       0       0       0       0       0
 16905 ;;      Temps:          0       0       0       0       0       0       0
 16906 ;;      Totals:         2       0       0       0       0       0       0
 16907 ;;Total ram usage:        2 bytes
 16908 ;; Hardware stack levels used:    1
 16909 ;; Hardware stack levels required when called:    3
 16910 ;; This function calls:
 16911 ;;		_Read_b_eep
 16912 ;; This function is called by:
 16913 ;;		_vscp_readRegister
 16914 ;;		_vscp_handleProtocolEvent
 16915 ;; This function uses a non-reentrant model
 16916 ;;
 16917                           
 16918                           	psect	text76
 16919  0034E2                     __ptext76:
 16920                           	opt stack 0
 16921  0034E2                     _vscp_readAppReg:
 16922                           	opt stack 25
 16923                           
 16924                           ;incstack = 0
 16925                           ;incstack = 0
 16926                           ;vscp_readAppReg@reg stored from wreg
 16927  0034E2  CFE8 F00B          	movff	wreg,vscp_readAppReg@reg
 16928                           
 16929                           ; BSR set to: 0
 16930                           ;main.c: 897: uint8_t rv;
 16931                           ;main.c: 899: rv = 0x00;
 16932  0034E6  6A0A               	clrf	vscp_readAppReg@rv,c
 16933                           
 16934                           ; BSR set to: 0
 16935                           ;main.c: 902: if ( reg == 0x00 ) {
 16936  0034E8  660B               	tstfsz	vscp_readAppReg@reg,c
 16937  0034EA  D006               	goto	l8523
 16938                           
 16939                           ; BSR set to: 0
 16940                           ;main.c: 903: rv = Read_b_eep(0x43 + 0);
 16941  0034EC  6A09               	clrf	?_Read_b_eep+1,c
 16942  0034EE  0E43               	movlw	67
 16943  0034F0  6E08               	movwf	?_Read_b_eep,c
 16944  0034F2  EC76  F01E         	call	_Read_b_eep	;wreg free
 16945  0034F6  D04D               	goto	L63
 16946  0034F8                     l8523:
 16947                           
 16948                           ; BSR set to: 0
 16949                           ;main.c: 906: else if ( reg == 0x01 ) {
 16950  0034F8  040B               	decf	vscp_readAppReg@reg,w,c
 16951  0034FA  E106               	bnz	l8527
 16952                           
 16953                           ; BSR set to: 0
 16954                           ;main.c: 907: rv = Read_b_eep(0x43 + 1);
 16955  0034FC  6A09               	clrf	?_Read_b_eep+1,c
 16956  0034FE  0E44               	movlw	68
 16957  003500  6E08               	movwf	?_Read_b_eep,c
 16958  003502  EC76  F01E         	call	_Read_b_eep	;wreg free
 16959  003506  D045               	goto	L63
 16960  003508                     l8527:
 16961                           
 16962                           ; BSR set to: 0
 16963                           ;main.c: 909: else if ( (reg >= 2) && (reg < 10) ) {
 16964  003508  0E01               	movlw	1
 16965  00350A  640B               	cpfsgt	vscp_readAppReg@reg,c
 16966  00350C  D034               	goto	l8551
 16967                           
 16968                           ; BSR set to: 0
 16969  00350E  0E0A               	movlw	10
 16970  003510  600B               	cpfslt	vscp_readAppReg@reg,c
 16971  003512  D031               	goto	l8551
 16972  003514  D01E               	goto	l8549
 16973  003516                     l8533:
 16974                           
 16975                           ; BSR set to: 0
 16976                           ;main.c: 915: rv = LATBbits.LATB4;
 16977  003516  0E00               	movlw	0
 16978  003518  B88A               	btfsc	3978,4,c	;volatile
 16979  00351A  0E01               	movlw	1
 16980  00351C  D03A               	goto	L63
 16981  00351E                     l8535:
 16982                           
 16983                           ; BSR set to: 0
 16984                           ;main.c: 920: rv = LATBbits.LATB1;
 16985  00351E  0E00               	movlw	0
 16986  003520  B28A               	btfsc	3978,1,c	;volatile
 16987  003522  0E01               	movlw	1
 16988  003524  D036               	goto	L63
 16989  003526                     l8537:
 16990                           
 16991                           ; BSR set to: 0
 16992                           ;main.c: 925: rv = LATBbits.LATB0;
 16993  003526  0E00               	movlw	0
 16994  003528  B08A               	btfsc	3978,0,c	;volatile
 16995  00352A  0E01               	movlw	1
 16996  00352C  D032               	goto	L63
 16997  00352E                     l8539:
 16998                           
 16999                           ; BSR set to: 0
 17000                           ;main.c: 930: rv = LATCbits.LATC7;
 17001  00352E  0E00               	movlw	0
 17002  003530  BE8B               	btfsc	3979,7,c	;volatile
 17003  003532  0E01               	movlw	1
 17004  003534  D02E               	goto	L63
 17005  003536                     l8541:
 17006                           
 17007                           ; BSR set to: 0
 17008                           ;main.c: 935: rv = LATCbits.LATC6;
 17009  003536  0E00               	movlw	0
 17010  003538  BC8B               	btfsc	3979,6,c	;volatile
 17011  00353A  0E01               	movlw	1
 17012  00353C  D02A               	goto	L63
 17013  00353E                     l8543:
 17014                           
 17015                           ; BSR set to: 0
 17016                           ;main.c: 940: rv = LATCbits.LATC5;
 17017  00353E  0E00               	movlw	0
 17018  003540  BA8B               	btfsc	3979,5,c	;volatile
 17019  003542  0E01               	movlw	1
 17020  003544  D026               	goto	L63
 17021  003546                     l8545:
 17022                           
 17023                           ; BSR set to: 0
 17024                           ;main.c: 945: rv = LATCbits.LATC4;
 17025  003546  0E00               	movlw	0
 17026  003548  B88B               	btfsc	3979,4,c	;volatile
 17027  00354A  0E01               	movlw	1
 17028  00354C  D022               	goto	L63
 17029  00354E                     l292:
 17030                           
 17031                           ; BSR set to: 0
 17032                           ;main.c: 950: rv = 0;
 17033  00354E  6A0A               	clrf	vscp_readAppReg@rv,c
 17034                           
 17035                           ;main.c: 951: break;
 17036  003550  D021               	goto	l8557
 17037  003552                     l8549:
 17038                           
 17039                           ; BSR set to: 0
 17040  003552  500B               	movf	vscp_readAppReg@reg,w,c
 17041                           
 17042                           ; Switch size 1, requested type "space"
 17043                           ; Number of cases is 8, Range of values is 2 to 9
 17044                           ; switch strategies available:
 17045                           ; Name         Instructions Cycles
 17046                           ; simple_byte           25    13 (average)
 17047                           ;	Chosen strategy is simple_byte
 17048  003554  0A02               	xorlw	2	; case 2
 17049  003556  E0DF               	bz	l8533
 17050  003558  0A01               	xorlw	1	; case 3
 17051  00355A  E0E1               	bz	l8535
 17052  00355C  0A07               	xorlw	7	; case 4
 17053  00355E  E0E3               	bz	l8537
 17054  003560  0A01               	xorlw	1	; case 5
 17055  003562  E0E5               	bz	l8539
 17056  003564  0A03               	xorlw	3	; case 6
 17057  003566  E0E7               	bz	l8541
 17058  003568  0A01               	xorlw	1	; case 7
 17059  00356A  E0E9               	bz	l8543
 17060  00356C  0A0F               	xorlw	15	; case 8
 17061  00356E  E0EB               	bz	l8545
 17062  003570  0A01               	xorlw	1	; case 9
 17063  003572  E0ED               	bz	l292
 17064  003574  D00F               	goto	l8557
 17065  003576                     l8551:
 17066                           
 17067                           ; BSR set to: 0
 17068                           ;main.c: 956: else if ( ( reg >= 10 ) &&
 17069                           ;main.c: 957: (reg < (72 + 7 * 8 ) ) ) {
 17070  003576  0E09               	movlw	9
 17071  003578  640B               	cpfsgt	vscp_readAppReg@reg,c
 17072  00357A  D00C               	goto	l8557
 17073                           
 17074                           ; BSR set to: 0
 17075  00357C  0E80               	movlw	128
 17076  00357E  600B               	cpfslt	vscp_readAppReg@reg,c
 17077  003580  D009               	goto	l8557
 17078                           
 17079                           ; BSR set to: 0
 17080                           ;main.c: 958: rv = Read_b_eep(0x43 + reg);
 17081  003582  0E43               	movlw	67
 17082  003584  240B               	addwf	vscp_readAppReg@reg,w,c
 17083  003586  6E08               	movwf	?_Read_b_eep,c
 17084  003588  6A09               	clrf	?_Read_b_eep+1,c
 17085  00358A  0E00               	movlw	0
 17086  00358C  2209               	addwfc	?_Read_b_eep+1,f,c
 17087  00358E  EC76  F01E         	call	_Read_b_eep	;wreg free
 17088  003592                     L63:
 17089  003592  6E0A               	movwf	vscp_readAppReg@rv,c
 17090  003594                     l8557:
 17091                           
 17092                           ;main.c: 959: }
 17093                           ;main.c: 961: return rv;
 17094  003594  500A               	movf	vscp_readAppReg@rv,w,c
 17095  003596  0012               	return	
 17096  003598                     __end_of_vscp_readAppReg:
 17097                           	opt stack 0
 17098                           tblptru	equ	0xFF8
 17099                           tblptrh	equ	0xFF7
 17100                           tblptrl	equ	0xFF6
 17101                           tablat	equ	0xFF5
 17102                           prodh	equ	0xFF4
 17103                           prodl	equ	0xFF3
 17104                           intcon	equ	0xFF2
 17105                           postinc0	equ	0xFEE
 17106                           wreg	equ	0xFE8
 17107                           indf1	equ	0xFE7
 17108                           fsr1h	equ	0xFE2
 17109                           fsr1l	equ	0xFE1
 17110                           indf2	equ	0xFDF
 17111                           postinc2	equ	0xFDE
 17112                           postdec2	equ	0xFDD
 17113                           plusw2	equ	0xFDB
 17114                           fsr2h	equ	0xFDA
 17115                           fsr2l	equ	0xFD9
 17116                           status	equ	0xFD8
 17117                           
 17118 ;; *************** function _interrupt_at_low_vector *****************
 17119 ;; Defined at:
 17120 ;;		line 133 in file "../main.c"
 17121 ;; Parameters:    Size  Location     Type
 17122 ;;		None
 17123 ;; Auto vars:     Size  Location     Type
 17124 ;;		None
 17125 ;; Return value:  Size  Location     Type
 17126 ;;		None               void
 17127 ;; Registers used:
 17128 ;;		wreg, status,2, status,0, cstack
 17129 ;; Tracked objects:
 17130 ;;		On entry : 0/0
 17131 ;;		On exit  : 0/0
 17132 ;;		Unchanged: 0/0
 17133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17134 ;;      Params:         0       0       0       0       0       0       0
 17135 ;;      Locals:         0       0       0       0       0       0       0
 17136 ;;      Temps:          3       0       0       0       0       0       0
 17137 ;;      Totals:         3       0       0       0       0       0       0
 17138 ;;Total ram usage:        3 bytes
 17139 ;; Hardware stack levels used:    1
 17140 ;; Hardware stack levels required when called:    1
 17141 ;; This function calls:
 17142 ;;		i1_WriteTimer0
 17143 ;; This function is called by:
 17144 ;;		Interrupt level 1
 17145 ;; This function uses a non-reentrant model
 17146 ;;
 17147                           
 17148                           	psect	intcodelo
 17149  000018                     __pintcodelo:
 17150                           	opt stack 0
 17151  000018                     _interrupt_at_low_vector:
 17152                           	opt stack 21
 17153                           
 17154                           ;incstack = 0
 17155  000018  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 17156  00001C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 17157  000020  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 17158  000024                     
 17159                           ;main.c: 135: if ( INTCONbits.TMR0IF ) {
 17160  000024  A4F2               	btfss	intcon,2,c	;volatile
 17161  000026  D001               	goto	i1u802_21
 17162  000028  D001               	goto	i1u802_20
 17163  00002A                     i1u802_21:
 17164  00002A  D03E               	goto	i1l147
 17165  00002C                     i1u802_20:
 17166  00002C                     
 17167                           ;main.c: 138: WriteTimer0(0xfb1d);
 17168  00002C  0EFB               	movlw	251
 17169  00002E  6E02               	movwf	?i1_WriteTimer0+1,c
 17170  000030  0E1D               	movlw	29
 17171  000032  6E01               	movwf	?i1_WriteTimer0,c
 17172  000034  EC7F  F01E         	call	i1_WriteTimer0	;wreg free
 17173  000038                     
 17174                           ;main.c: 140: vscp_timer++;
 17175  000038  0100               	movlb	0	; () banked
 17176  00003A  4B86               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 17177  00003C  2B87               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 17178  00003E                     
 17179                           ; BSR set to: 0
 17180                           ;main.c: 141: vscp_configtimer++;
 17181  00003E  4B84               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 17182  000040  2B85               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 17183  000042                     
 17184                           ; BSR set to: 0
 17185                           ;main.c: 143: sendTimer++;
 17186  000042  0E01               	movlw	1
 17187  000044  2780               	addwf	_measurement_clock& (0+255),f,b	;volatile
 17188  000046  0E00               	movlw	0
 17189  000048  2381               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 17190  00004A  0E00               	movlw	0
 17191  00004C  2382               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 17192  00004E  0E00               	movlw	0
 17193  000050  2383               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 17194  000052                     
 17195                           ; BSR set to: 0
 17196                           ;main.c: 146: if ( PORTCbits.RC0 ) {
 17197  000052  A082               	btfss	3970,0,c	;volatile
 17198  000054  D001               	goto	i1u803_21
 17199  000056  D001               	goto	i1u803_20
 17200  000058                     i1u803_21:
 17201  000058  D002               	goto	i1l7545
 17202  00005A                     i1u803_20:
 17203  00005A                     
 17204                           ; BSR set to: 0
 17205                           ;main.c: 147: vscp_initbtncnt = 0;
 17206  00005A  6B8E               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 17207                           
 17208                           ;main.c: 148: } else {
 17209  00005C  D001               	goto	i1l139
 17210  00005E                     i1l7545:
 17211                           
 17212                           ; BSR set to: 0
 17213                           ;main.c: 150: vscp_initbtncnt++;
 17214  00005E  2B8E               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 17215  000060                     i1l139:
 17216                           
 17217                           ; BSR set to: 0
 17218                           ;main.c: 151: }
 17219                           ;main.c: 154: vscp_statuscnt++;
 17220  000060  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 17221  000062                     
 17222                           ; BSR set to: 0
 17223                           ;main.c: 155: if ( ( 0x02 == vscp_initledfunc ) &&
 17224                           ;main.c: 156: ( vscp_statuscnt > 100 ) ) {
 17225  000062  5056               	movf	_vscp_initledfunc,w,c
 17226  000064  0A02               	xorlw	2
 17227  000066  A4D8               	btfss	status,2,c
 17228  000068  D001               	goto	i1u804_21
 17229  00006A  D001               	goto	i1u804_20
 17230  00006C                     i1u804_21:
 17231  00006C  D00E               	goto	i1l7555
 17232  00006E                     i1u804_20:
 17233  00006E                     
 17234                           ; BSR set to: 0
 17235  00006E  0E64               	movlw	100
 17236  000070  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 17237  000072  D001               	goto	i1u805_21
 17238  000074  D001               	goto	i1u805_20
 17239  000076                     i1u805_21:
 17240  000076  D009               	goto	i1l7555
 17241  000078                     i1u805_20:
 17242  000078                     
 17243                           ; BSR set to: 0
 17244                           ;main.c: 158: if ( PORTCbits.RC1 ) {
 17245  000078  A282               	btfss	3970,1,c	;volatile
 17246  00007A  D001               	goto	i1u806_21
 17247  00007C  D001               	goto	i1u806_20
 17248  00007E                     i1u806_21:
 17249  00007E  D002               	goto	i1l141
 17250  000080                     i1u806_20:
 17251  000080                     
 17252                           ; BSR set to: 0
 17253                           ;main.c: 159: PORTCbits.RC1 = 0;
 17254  000080  9282               	bcf	3970,1,c	;volatile
 17255                           
 17256                           ;main.c: 160: }
 17257  000082  D001               	goto	i1l142
 17258  000084                     i1l141:
 17259                           
 17260                           ; BSR set to: 0
 17261                           ;main.c: 161: else {
 17262                           ;main.c: 162: PORTCbits.RC1 = 1;
 17263  000084  8282               	bsf	3970,1,c	;volatile
 17264  000086                     i1l142:
 17265                           
 17266                           ; BSR set to: 0
 17267                           ;main.c: 163: }
 17268                           ;main.c: 165: vscp_statuscnt = 0;
 17269  000086  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17270                           
 17271                           ;main.c: 167: }
 17272  000088  D00E               	goto	i1l143
 17273  00008A                     i1l7555:
 17274                           
 17275                           ; BSR set to: 0
 17276                           ;main.c: 168: else if (0x01 == vscp_initledfunc) {
 17277  00008A  0456               	decf	_vscp_initledfunc,w,c
 17278  00008C  A4D8               	btfss	status,2,c
 17279  00008E  D001               	goto	i1u807_21
 17280  000090  D001               	goto	i1u807_20
 17281  000092                     i1u807_21:
 17282  000092  D003               	goto	i1l144
 17283  000094                     i1u807_20:
 17284  000094                     
 17285                           ; BSR set to: 0
 17286                           ;main.c: 169: PORTCbits.RC1 = 1;
 17287  000094  8282               	bsf	3970,1,c	;volatile
 17288                           
 17289                           ;main.c: 170: vscp_statuscnt = 0;
 17290  000096  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17291                           
 17292                           ;main.c: 171: }
 17293  000098  D006               	goto	i1l143
 17294  00009A                     i1l144:
 17295                           
 17296                           ; BSR set to: 0
 17297                           ;main.c: 172: else if (0x00 == vscp_initledfunc) {
 17298  00009A  6656               	tstfsz	_vscp_initledfunc,c
 17299  00009C  D001               	goto	i1u808_21
 17300  00009E  D001               	goto	i1u808_20
 17301  0000A0                     i1u808_21:
 17302  0000A0  D002               	goto	i1l143
 17303  0000A2                     i1u808_20:
 17304  0000A2                     
 17305                           ; BSR set to: 0
 17306                           ;main.c: 173: PORTCbits.RC1 = 0;
 17307  0000A2  9282               	bcf	3970,1,c	;volatile
 17308                           
 17309                           ;main.c: 174: vscp_statuscnt = 0;
 17310  0000A4  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17311  0000A6                     i1l143:
 17312                           
 17313                           ; BSR set to: 0
 17314                           ;main.c: 175: }
 17315                           ;main.c: 177: INTCONbits.TMR0IF = 0;
 17316  0000A6  94F2               	bcf	intcon,2,c	;volatile
 17317  0000A8                     i1l147:
 17318  0000A8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 17319  0000AC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 17320  0000B0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 17321  0000B4  0010               	retfie	
 17322  0000B6                     __end_of_interrupt_at_low_vector:
 17323                           	opt stack 0
 17324                           tblptru	equ	0xFF8
 17325                           tblptrh	equ	0xFF7
 17326                           tblptrl	equ	0xFF6
 17327                           tablat	equ	0xFF5
 17328                           prodh	equ	0xFF4
 17329                           prodl	equ	0xFF3
 17330                           intcon	equ	0xFF2
 17331                           postinc0	equ	0xFEE
 17332                           wreg	equ	0xFE8
 17333                           indf1	equ	0xFE7
 17334                           fsr1h	equ	0xFE2
 17335                           fsr1l	equ	0xFE1
 17336                           bsr	equ	0xFE0
 17337                           indf2	equ	0xFDF
 17338                           postinc2	equ	0xFDE
 17339                           postdec2	equ	0xFDD
 17340                           plusw2	equ	0xFDB
 17341                           fsr2h	equ	0xFDA
 17342                           fsr2l	equ	0xFD9
 17343                           status	equ	0xFD8
 17344                           
 17345 ;; *************** function i1_WriteTimer0 *****************
 17346 ;; Defined at:
 17347 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 17348 ;; Parameters:    Size  Location     Type
 17349 ;;  timer0          2    0[COMRAM] unsigned int 
 17350 ;; Auto vars:     Size  Location     Type
 17351 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 17352 ;; Return value:  Size  Location     Type
 17353 ;;		None               void
 17354 ;; Registers used:
 17355 ;;		None
 17356 ;; Tracked objects:
 17357 ;;		On entry : 0/0
 17358 ;;		On exit  : 0/0
 17359 ;;		Unchanged: 0/0
 17360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17361 ;;      Params:         2       0       0       0       0       0       0
 17362 ;;      Locals:         2       0       0       0       0       0       0
 17363 ;;      Temps:          0       0       0       0       0       0       0
 17364 ;;      Totals:         4       0       0       0       0       0       0
 17365 ;;Total ram usage:        4 bytes
 17366 ;; Hardware stack levels used:    1
 17367 ;; This function calls:
 17368 ;;		Nothing
 17369 ;; This function is called by:
 17370 ;;		_interrupt_at_low_vector
 17371 ;; This function uses a non-reentrant model
 17372 ;;
 17373                           
 17374                           	psect	text78
 17375  003CFE                     __ptext78:
 17376                           	opt stack 0
 17377  003CFE                     i1_WriteTimer0:
 17378                           	opt stack 21
 17379                           
 17380                           ;incstack = 0
 17381                           ;incstack = 0
 17382  003CFE  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 17383  003D02  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 17384  003D06  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 17385  003D0A  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 17386  003D0E  0012               	return	
 17387  003D10                     __end_ofi1_WriteTimer0:
 17388                           	opt stack 0
 17389                           tblptru	equ	0xFF8
 17390                           tblptrh	equ	0xFF7
 17391                           tblptrl	equ	0xFF6
 17392                           tablat	equ	0xFF5
 17393                           prodh	equ	0xFF4
 17394                           prodl	equ	0xFF3
 17395                           intcon	equ	0xFF2
 17396                           postinc0	equ	0xFEE
 17397                           wreg	equ	0xFE8
 17398                           indf1	equ	0xFE7
 17399                           fsr1h	equ	0xFE2
 17400                           fsr1l	equ	0xFE1
 17401                           bsr	equ	0xFE0
 17402                           indf2	equ	0xFDF
 17403                           postinc2	equ	0xFDE
 17404                           postdec2	equ	0xFDD
 17405                           plusw2	equ	0xFDB
 17406                           fsr2h	equ	0xFDA
 17407                           fsr2l	equ	0xFD9
 17408                           status	equ	0xFD8
 17409                           tblptru	equ	0xFF8
 17410                           tblptrh	equ	0xFF7
 17411                           tblptrl	equ	0xFF6
 17412                           tablat	equ	0xFF5
 17413                           prodh	equ	0xFF4
 17414                           prodl	equ	0xFF3
 17415                           intcon	equ	0xFF2
 17416                           postinc0	equ	0xFEE
 17417                           wreg	equ	0xFE8
 17418                           indf1	equ	0xFE7
 17419                           fsr1h	equ	0xFE2
 17420                           fsr1l	equ	0xFE1
 17421                           bsr	equ	0xFE0
 17422                           indf2	equ	0xFDF
 17423                           postinc2	equ	0xFDE
 17424                           postdec2	equ	0xFDD
 17425                           plusw2	equ	0xFDB
 17426                           fsr2h	equ	0xFDA
 17427                           fsr2l	equ	0xFD9
 17428                           status	equ	0xFD8
 17429                           
 17430                           	psect	rparam
 17431  0000                     tblptru	equ	0xFF8
 17432                           tblptrh	equ	0xFF7
 17433                           tblptrl	equ	0xFF6
 17434                           tablat	equ	0xFF5
 17435                           prodh	equ	0xFF4
 17436                           prodl	equ	0xFF3
 17437                           intcon	equ	0xFF2
 17438                           postinc0	equ	0xFEE
 17439                           wreg	equ	0xFE8
 17440                           indf1	equ	0xFE7
 17441                           fsr1h	equ	0xFE2
 17442                           fsr1l	equ	0xFE1
 17443                           bsr	equ	0xFE0
 17444                           indf2	equ	0xFDF
 17445                           postinc2	equ	0xFDE
 17446                           postdec2	equ	0xFDD
 17447                           plusw2	equ	0xFDB
 17448                           fsr2h	equ	0xFDA
 17449                           fsr2l	equ	0xFD9
 17450                           status	equ	0xFD8
 17451                           tblptru	equ	0xFF8
 17452                           tblptrh	equ	0xFF7
 17453                           tblptrl	equ	0xFF6
 17454                           tablat	equ	0xFF5
 17455                           prodh	equ	0xFF4
 17456                           prodl	equ	0xFF3
 17457                           intcon	equ	0xFF2
 17458                           postinc0	equ	0xFEE
 17459                           wreg	equ	0xFE8
 17460                           indf1	equ	0xFE7
 17461                           fsr1h	equ	0xFE2
 17462                           fsr1l	equ	0xFE1
 17463                           bsr	equ	0xFE0
 17464                           indf2	equ	0xFDF
 17465                           postinc2	equ	0xFDE
 17466                           postdec2	equ	0xFDD
 17467                           plusw2	equ	0xFDB
 17468                           fsr2h	equ	0xFDA
 17469                           fsr2l	equ	0xFD9
 17470                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         87
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     60     140
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_Read_b_eep
    _vscp_getZone->_Read_b_eep
    _doDM->_doActionOff
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionDisable->_Write_b_eep
    _doActionStatus->_SendInformationEvent
    _doActionPulse->_Read_b_eep
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeAppReg
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_Write_b_eep
    _vscp_setUserID->_Write_b_eep
    _vscp_setManufacturerId->_Write_b_eep
    _vscp_setGUID->_Write_b_eep
    _vscp_writeAppReg->_SendInformationEvent
    _calculateSetFilterMask->__CANIDToRegs
    _SendInformationEvent->_sendVSCPFrame
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_Read_b_eep
    _vscp_getUserID->_Read_b_eep
    _vscp_getGUID->_Read_b_eep
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_Read_b_eep
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_Write_b_eep
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_Write_b_eep
    _vscp_setSegmentCRC->_Write_b_eep
    _vscp_getSegmentCRC->_Read_b_eep
    _vscp_writeNicknamePermanent->_Write_b_eep
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_Read_b_eep
    _vscp_readAppReg->_Read_b_eep

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   70033
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                           _Busy_eep
                        _Write_b_eep
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           6     6      0    7438
                                             27 BANK0      6     6      0
                         _Read_b_eep
                        _doActionOff
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2370
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                17    17      0   15731
                                             28 BANK0     17    17      0
                         _Read_b_eep
                        _doActionOff
                         _doActionOn
                      _doActionPulse
                     _doActionStatus
                    _doActionDisable
                     _doActionToggle
 ---------------------------------------------------------------------------------
 (2) _doActionToggle                                       7     6      1    3470
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionDisable                                      6     5      1     449
                                             11 COMRAM     6     5      1
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _doActionStatus                                       7     6      1    3428
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulse                                        7     6      1     381
                                              9 COMRAM     7     6      1
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _doActionOn                                           7     6      1    3212
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOff                                          6     5      1    3212
                                             80 COMRAM     1     0      1
                                             22 BANK0      5     5      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   34199
                                             32 BANK0     28    28      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1   11224
                                             30 BANK0      2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    2151
                                             15 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     712
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     204
                                             11 COMRAM     4     4      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     112
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     134
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     134
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     9     8      1    8863
                                             80 COMRAM     1     0      1
                                             22 BANK0      8     8      0
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
               _SendInformationEvent
                    _vscp_readAppReg (ARG)
             _calculateSetFilterMask
 ---------------------------------------------------------------------------------
 (4) _calculateSetFilterMask                              50    50      0    1845
                                             17 COMRAM    50    50      0
                         _Read_b_eep
               _ECANSetOperationMode
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _SendInformationEvent                                 8     6      2    2533
                                             74 COMRAM     6     6      0
                                             20 BANK0      2     0      2
                         _Read_b_eep
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1773
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1334
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     217
                                             12 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      31
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     180
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     211
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4672
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     301
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _Write_b_eep                                          4     1      3      68
                                              7 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     666
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (5) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         3     3      0     508
                                              9 COMRAM     3     3      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      31
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     346
                                              9 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      31
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_getSegmentCRC
       _Read_b_eep
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
     _vscp_setControlByte
       _Busy_eep
       _Write_b_eep
   _init_app_eeprom
     _Busy_eep
     _Write_b_eep
   _init_app_ram
     _Read_b_eep
   _vscp_init
     _vscp_readNicknamePermanent
       _Read_b_eep
   _Busy_eep
   _Write_b_eep
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _Read_b_eep
     _vscp_readAppReg
       _Read_b_eep
     _vscp_writeAppReg
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_readAppReg (ARG)
         _Read_b_eep
       _calculateSetFilterMask (ARG)
         _Read_b_eep
         _ECANSetOperationMode
         __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _Read_b_eep
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _Busy_eep
       _Write_b_eep
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_getSegmentCRC
         _Read_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _Read_b_eep
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _Read_b_eep
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _Read_b_eep
         _vscp_getMDF_URL
         _vscp_getUserID
           _Read_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _Read_b_eep
       _vscp_getMDF_URL
       _vscp_getUserID
         _Read_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _Busy_eep
         _Write_b_eep
         _Read_b_eep
         _SendInformationEvent
           _Read_b_eep
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
         _vscp_readAppReg (ARG)
           _Read_b_eep
         _calculateSetFilterMask (ARG)
           _Read_b_eep
           _ECANSetOperationMode
           __CANIDToRegs
       _vscp_writeStdReg
         _vscp_setGUID
           _Busy_eep
           _Write_b_eep
         _vscp_setManufacturerId
           _Busy_eep
           _Write_b_eep
         _vscp_getGUID
           _Read_b_eep
         _vscp_getUserID
           _Read_b_eep
         _vscp_setUserID
           _Busy_eep
           _Write_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_restoreDefaults
           _init_app_eeprom
             _Busy_eep
             _Write_b_eep
           _init_app_ram
             _Read_b_eep
     _vscp_writeStdReg
       _vscp_setGUID
         _Busy_eep
         _Write_b_eep
       _vscp_setManufacturerId
         _Busy_eep
         _Write_b_eep
       _vscp_getGUID
         _Read_b_eep
       _vscp_getUserID
         _Read_b_eep
       _vscp_setUserID
         _Busy_eep
         _Write_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_restoreDefaults
         _init_app_eeprom
           _Busy_eep
           _Write_b_eep
         _init_app_ram
           _Read_b_eep
     ___lbmod
   _doDM
     _Read_b_eep
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionOn
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulse
       _Read_b_eep
     _doActionStatus
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionDisable
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
     _doActionToggle
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _Read_b_eep
     _vscp_getSubzone
       _Read_b_eep
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _Read_b_eep
       _vscp_getSubzone (ARG)
         _Read_b_eep
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
     _Read_b_eep
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _SendInformationEvent
       _Read_b_eep
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3C      8C       5       87.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E4       3        0.0%
DATA                 0      0      F0      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sun Sep 13 15:59:57 2015

                      doActionToggle@val 00C9                  __end_of_vscp_readAppReg 3598  
                  __end_of_sendVSCPFrame 34E2                                       PL2 2600  
                                     PL4 0E4C                                       PL6 0E60  
                                     PL8 1C1C             ?_vscp_writeNicknamePermanent 0001  
            ??_vscp_getRegisterPagesUsed 0008                                       bsr 000FE0  
    vscp_writeNicknamePermanent@nickname 000C                              __CFG_BORV$3 000000  
                __end_of_vscp_readStdReg 2992                    doActionToggle@dmflags 00C8  
                                    PL10 1C5A                                      PL20 2E42  
                                    PL12 1C72                                      PL30 2F80  
                                    PL22 1F48                                      PL14 1CA6  
                                    PL40 2F92                                      PL32 1F64  
                                    PL24 1F56                                      PL16 261A  
                                    PL50 2E8A                                      PL42 2992  
                                    PL34 2E50                                      PL26 2F70  
                                    PL18 2F5C                                      PL60 0EA6  
                                    PL52 1F72                                      PL44 2E76  
                                    PL36 2E62                                      PL28 14BA  
                                    PL70 14E6                                      PL62 31AC  
                                    PL54 1F84                                      PL46 14D2  
                                    PL38 1CD6                                      PL80 14F4  
                                    PL72 2416                                      PL64 0EB6  
                                    PL56 0E84                                      PL48 0E70  
                                    PL82 1CF4                                      PL74 2FA6  
                                    PL66 0EC6                                      PL58 0E96  
                                    PL76 29A6                                      PL68 0ED6  
                                    PL78 1CEA                                      l210 1DF8  
                                    l211 1E00                                      l220 1E24  
                                    l213 1E04                                      l222 1E28  
                                    l214 1E0C                                      l206 1DE8  
                                    l223 1E30                                      l207 1DF0  
                                    l151 31D4                                      l312 0740  
                                    l216 1E10                                      l160 321C  
                                    l225 1E34                                      l217 1E18  
                                    l322 0808                                      l306 06EC  
                                    l226 1E3E                                      l219 1E1C  
                                    l404 0E20                                      l332 08D0  
                                    l500 269A                                      l420 25FE  
                                    l228 1EFA                                      l236 1F46  
                                    l164 3236                                      l317 07A4  
                                    l253 3AA4                                      l502 26CA  
                                    l327 086C                                      l503 26FA  
                                    l504 272A                                      l337 0934  
                                    l249 3ACA                                      l441 1FD4  
                                    l505 275A                       vscp_readStdReg@idx 0019  
                                    l450 204A                                      l506 278A  
                                    l187 1914                                      l507 27BA  
                                    l515 2C94                                      l292 354E  
                                    l460 218A                                      l452 208A  
                                    l541 3668                                      l454 20CA  
                                    l471 32D8                                      l447 200A  
                                    l640 3C10                                      l480 3314  
                                    l456 210A                                      l528 2D50  
                                    l552 2B5A                                      l481 3318  
                                    l449 21EE                                      l561 2B9A  
                                    l482 331C                                      l458 214A  
                                    l570 2BBE                                      l562 2BA2  
                                    l483 3320                                      l571 2BC6  
                                    l484 3324                                      l564 2BA6  
                                    l477 330C                                      l573 2BCA  
                                    l565 2BAE                                      l557 2B8A  
                                    l478 3344                                      l494 2666  
                                    l574 2BD2                                      l558 2B92  
                                    l479 3310                                      l567 2BB2  
                                    l576 2BD6                                      l568 2BBA  
                                    l665 372E                                      l577 2BE0  
                                    l930 2E40                                      l907 2386  
                                    l579 2C2A                        doActionStatus@bOn 00C9  
                                    l908 23A0                                      l676 39DC  
                                    l925 2F5A                       vscp_readStdReg@reg 001C  
                                    l935 379C                                      l871 2B1A  
                                    l863 2A7E                                      l865 2A9C  
                                    l891 22C4                                      l883 2414  
                                    l876 2254                                      l893 22D8  
                                    l886 2322                                      l895 22EC  
                                    l887 22A2                                      l897 22FC  
                                    l889 22B0                                      l899 230C  
                           __CFG_CPB$OFF 000000           __size_of_vscp_handleProbeState 00BA  
                      doActionStatus@arg 0051                           getVSCPFrame@id 0028  
                      doActionStatus@val 00CA            __end_of_vscp_handleProbeState 342C  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                   __size_of_Write_b_eep 0034                   _calculateSetFilterMask 1960  
                                    wreg 000FE8              ?_doApplicationOneSecondWork 0001  
                           __CFG_LVP$OFF 000000                             __CFG_WDT$OFF 000000  
                                   l1102 3B14                                     l1113 3A06  
                                   l1050 3872                                     l1122 385E  
                                   l1108 3976                                     l1109 3982  
                   __size_of_doActionOff 00D4                                     l1126 3C2A  
                                   l1055 3B38                                     l1231 10AC  
                                   l1305 3D54                                     l1073 3416  
                                   l1065 3428                                     l1330 3942  
                                   l1074 33F6                                     l1066 33B4  
                                   l1171 3B7C                                     l1255 1228  
                                   l1256 123C                                     l1257 1278  
                                   l1346 3BD4                                     l1098 38E0  
                                   l1266 12B4                                     l1347 3BD6  
                                   l1291 14B8                                     l1197 30B0  
                                   l1299 3A30                                     l5009 1916  
                    vscp_readStdReg@code 0011                                     l7221 373E  
                                   l7231 376C                                     l7223 3748  
                                   l7127 2336                vscp_getManufacturerId@idx 000A  
                                   l7233 3772                                     l7225 3752  
                                   l7137 2356                                     l7227 375C  
                                   l7219 3736                                     l7251 2DDC  
                                   l7163 23CE                                     l7171 23E8  
                                   l7155 23A2                                     l7075 2282  
                                   l7059 2242                                     l7083 2290  
                                   l7229 3766                                     l7237 377E  
                                   l7069 226C                                     l7077 228C  
                                   l9031 1A84                                     l9023 1972  
                                   l7177 23FE                                     l9043 1B0A  
                                   l7523 3A52                                     l7515 3A3C  
                                   l7189 3C50                                     l6901 3B8A  
                                   l9061 1BA2                                     l9213 27EA  
                                   l9301 36AE                                     l8341 3834  
                                   l7711 3B24                                     l9063 1BAA  
                                   l9039 1A96                                     l9215 280A  
                                   l8351 3846                                     l9057 1B28  
                                   l8523 34F8                                     l7723 30CA  
                                   l7803 33CE                                     l9067 1BC0  
                                   l5947 3AB2                                     l5955 3A8C  
                                   l8347 383E                                     l8541 3536  
                                   l8533 3516                                     l7733 30F4  
                                   l9421 2A18                                     l9165 262E  
                                   l8543 353E                                     l8535 351E  
                                   l8551 3576                                     l8527 3508  
                                   l7743 31A2                                     l6951 39BE  
                                   l6935 36D2                                     l9415 2A08  
                                   l7807 33D2                                     l8545 3546  
                                   l8537 3526                                     l9433 2A42  
                                   l7809 33D6                                     l9177 2682  
                                   l8539 352E                                     l7739 3158  
                                   l6947 39BA                                     l9443 2A82  
                                   l9603 287A                                     l9283 3634  
                                   l8549 3552                                     l8557 3594  
                                   l9621 28B2                                     l9613 289C  
                                   l9455 2ACC                                     l9463 2AEA  
                                   l7783 3392                                     l7839 341A  
                                   l9711 304E                                     l9295 3682  
                                   l9449 2A9E                                     l9473 2B10  
                                   l7785 3398                                     l7769 3374  
                                   l9529 38D8                                     l9633 28D6  
                                   l9625 28BE                                     l9617 28A8  
                                   l9609 2890                                     l9491 2EE8  
                                   l9475 2B12                                     l9643 2920  
                                   l9731 3096                                     l9723 3082  
                                   l9707 3034                                     l9803 320C  
                                   l9469 2B0C                                     l9653 2968  
                                   l9629 28CA                                     l9565 3C24  
                                   l9709 3038                                     l9741 30B2  
                                   l9805 3210                                     l9821 3252  
                                   l9399 3984                                     l9591 2852  
                                   l9583 283C                                     l9663 298E  
                                   l9575 2828                                     l9831 327C  
                                   l9815 3230                                     l9807 3216  
                                   l9659 297E                                     l9595 285E  
                                   l9587 2846                                     l9579 2832  
                                   l9915 0F74                                     l9843 3290  
                                   l9819 323A                                     l9693 2FFA  
                                   l9861 0F08                                     l9853 0EF0  
                                   l9781 31D0                                     l9599 286A  
                                   l9687 2FDA                                     l9855 0EF6  
                                   l9847 3298                                     l9945 0FDC  
                                   l9929 0F80                                     l9881 0F46  
                                   l9857 0EFC                                     l9699 3016  
                                   l9955 1010                                     l9859 0F02  
                                   l9795 31FA                                     l9965 1044  
                                   l9975 1078                                     l9895 0F4E  
                                   l9879 0F40                                     l9799 3202  
                                   l9993 10DE                                     l9987 10B0  
                                   l9997 10F6                                     l9989 10CE  
            __size_of_vscp_getMatrixInfo 0020                                     u4275 394E  
                                   u4276 3950                           sendCANFrame@id 0037  
                                   u7115 224A                                     u7117 224C  
                                   u8234 311A                                     u8235 3116  
                                   u7435 2DA4                                     u7445 2DB4  
                                   u7455 2DE0                                     u6940 3722  
                                   u6945 3718                         ??_ECANInitialize 0009  
                           __CFG_PWRT$ON 000000                vscp_setManufacturerId@idx 000D  
                                   _doDM 2424                    __size_of_vscp_getGUID 0014  
                       ?_vscp_getMDF_URL 0001                                     _main 31BC  
                                   _init 38E2                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     indf1 000FE7  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                    __size_of_vscp_getZone 000A  
                    i1WriteTimer0@timer0 0001                         _vscp_writeAppReg 0622  
                            _vscp_minute 008F                              _vscp_second 0094  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 00B6                     doActionPulse@dmflags 000F  
          __size_of_vscp_doOneSecondWork 004E                        vscp_getUserID@idx 000A  
                  __size_of_vscp_setGUID 0026                         _vscp_writeStdReg 2FB0  
                        _doActionDisable 362E                ECANReceiveMessage@dataLen 0010  
                  getVSCPFrame@pPriority 0020                     __end_of_getVSCPFrame 3730  
            __size_of_vscp_getSegmentCRC 000A                         __RegsToCANID@val 000A  
                       __RegsToCANID@ptr 0008                     __size_of_getCANFrame 002C  
                                  l10003 113C                                    l10007 1152  
                                  l10023 1178                                    l10121 126C  
                                  l10113 125C                                    l10105 123E  
                                  l10041 11CA                                    l10025 117A  
                                  l10131 127A                                    l10035 119E  
                                  l10027 1184                                    l11011 2CC4  
                                  l10117 1264                                    l10053 11DC  
                                  l11021 2CF6                                    l11013 2CCE  
                                  l11101 2C00                                    l10223 1384  
                                  l10215 1354                                    l10135 1294  
                                  l11023 2D00                                    l11015 2CD8  
                                  l11041 2D62                                    l11017 2CE2  
                                  l11009 2CAE                                    l11113 2C3C  
                                  l10313 2548                                    l10401 1E42  
                                  l10227 139C                                    l10219 136E  
                                  l10171 12DE                                    l11035 2D3C  
                                  l11019 2CEC                                    l11027 2D0A  
                                  l11107 2C16                                    l10323 2596  
                                  l10331 25CA                                    l10411 1ED4  
                                  l10403 1E5E                                    l10245 13E0  
                                  l10237 13C6                                    l10181 1300  
                                  l10157 12B6                                    l10085 121C  
                                  l10069 11FC                                    l11029 2D26  
                                  l11045 2D74                                    l11117 2C4E  
                                  l10325 25B0                                    l10317 2562  
                                  l10309 252E                                    l10333 25F4  
                                  l10421 1F0C                                    l10271 1458  
                                  l11071 2B94                                    l11055 2B24  
                                  l10319 257C                                    l10415 1EE6  
                                  l10343 1D08                                    _B0CON 000E20  
                                  l11129 3B72                                    l10249 1408  
                                  l10193 132C                                    l10425 1F20  
                                  l10361 1D78                                    l10515 06FA  
                                  l11067 2B74                                    l10363 1DB0  
                                  l10427 1F42                                    l10339 1D00  
                                  l10517 06FE                                    l10509 06C0  
                                  l10197 133E                                    l10461 3356  
                                  l10437 32A4                                    l10373 1DF2  
                                  l10199 1344                                    l10287 2430  
                                  _B1CON 000E30                                    l10617 08E0  
                                  l10609 08A4                                    l10537 0750  
                                  l10529 0726                                    l10641 096E  
                                  l10481 0650                                    l10457 3328  
                                  l10449 32F2                                    l10465 3368  
                                  l10297 247E                                    ?_doDM 0001  
                                  l10811 0BA0                                    l10715 0A78  
                                  l11099 2BE4                                    l10805 0B9A  
                                  l10733 0ABC                                    l10709 0A72  
                                  l10661 09B6                                    l10629 0908  
                                  l10557 07B4                                    l10549 0778  
                                  l10901 0DDA                                    l10911 0E0A  
                                  l10831 0C0C                                    l10743 0AC8  
                                  l10719 0A7E                                    l10671 09C2  
                                  l10647 097C                                    l10639 0944  
                                  _B2CON 000E40                                    l10921 0E48  
                                  l10841 0CAA                                    l10833 0C2A  
                                  l10817 0BA6                                    l10577 0818  
                                  l10569 07DC                                    l10497 0698  
                                  l10489 0672                                    l10843 0CCA  
                                  l10835 0C4A                                    l10763 0B0C  
                                  l10739 0AC2                                    l10691 0A04  
                                  l10667 09BC                                    l10819 0BCE  
                                  l10931 1F9C                                    l10917 0E34  
                                  l10837 0C6A                                    l10829 0BF0  
                                  l10781 0B50                                    l10757 0B06  
                                  l10685 09FE                                    l10597 087C  
                                  l10589 0840                                    l10839 0C8A  
                                  l10847 0CF6                                    l10791 0B5C  
                                  l10767 0B12                                    l10695 0A34  
                                  l10943 1FF0                                    _B3CON 000E50  
                                  l10873 0D3E                                    l10849 0D1C  
                                  l10787 0B56                                    l10877 0D6A  
                                  l10887 0DB2                                    l10879 0D9C  
                                  l10983 2200                                    _B4CON 000E60  
                                  l10889 0DBE            __size_of_SendInformationEvent 006C  
                                  l10979 21CA                                    l10987 2212  
          __size_of_vscp_getMajorVersion 0002                                    l10997 2C60  
                                  _B5CON 000E70               __end_of_vscp_goActiveState 3BBC  
          ??_vscp_writeNicknamePermanent 000C                                    ?_main 0001  
                                  ?_init 0001                   ?_vscp_goBootloaderMode 0001  
                          i1_WriteTimer0 3CFE                                    _EEADR 000FA9  
                        __end_of___lbmod 3A5A                  _vscp_handleDropNickname 3954  
                                  _BSEL0 000DF8                                    u10104 1AF4  
                                  u10105 1AF2                                    u10134 1B5E  
                                  u10070 1AB6                                    u10135 1B5A  
                                  u10055 19CA                                    u10144 1B76  
                                  u10080 1ADE                                    u10145 1B72  
                                  u10075 1AAC                                    u11300 2960  
                                  u10164 1B8C                                    u10165 1B8A  
                                  u10085 1AD4                                    _T0CON 000FD5  
                                  u11305 295E                                    u10195 3468  
                                  u11270 2916                                    u10384 263E  
                                  u10385 263A                                    u11275 2914  
                                  u10584 3644                                    u12344 1D56  
                                  u10585 3640                                    u12345 1D52  
                                  u12364 1DC0                                    u12365 1DBC  
                                  u12534 32B4                                    u12535 32B0  
                                  u13194 1FAC                                    u10955 2EC2  
                                  u13195 1FA8                                    u13364 2C70  
                                  u10965 2ED2                                    u13365 2C6C  
                                  u10975 2EF0                                    u13484 2B34  
                                  u13485 2B30                                    i1l141 0084  
                                  i1l142 0086                                    i1l143 00A6  
                                  i1l144 009A                                    i1l139 0060  
                                  i1l147 00A8                          sendCANFrame@dlc 003B  
                                  _MSEL0 000DF0                                    _MSEL1 000DF1  
                                  _MSEL2 000DF2                                    _IRXIF 007D27  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 3D42               _vscp_readNicknamePermanent 3D38  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                       ?_vscp_getSubzone 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                             _vscp_getGUID 3CC6  
                                  doDM@i 00DC                            __CFG_WRTD$OFF 000000  
                         Read_b_eep@badd 0008                           __CFG_EBTRB$OFF 000000  
                 Write_b_eep@GIE_BIT_VAL 000B                             _vscp_getZone 3D1A  
                     vscp_writeAppReg@rv 00CB                                    _hours 0088  
              _vscp_getRegisterPagesUsed 3D60                   __size_of_vscp_getEvent 002A  
                           _vscp_setGUID 3AA6                                    tablat 000FF5  
                _vscp_getSubMinorVersion 3D66                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 3A80  
                   _ECANSetOperationMode 3C44                          __initialization 3B3A  
                           __end_of_doDM 2600                             __end_of_main 329E  
                           __end_of_init 3920                         ?_vscp_readAppReg 0001  
                             _Read_b_eep 3CEC                  _interrupt_at_low_vector 0018  
                       __end_of_Busy_eep 3D5A                           doDM@class_mask 00D1  
                         __CFG_OSC$HSPLL 000000                        ??_ECANSendMessage 001A  
                         ?i1_WriteTimer0 0001                                   ??_doDM 00CC  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 001E  
                 ??_vscp_restoreDefaults 0010                                   ??_main 0052  
                                 ??_init 000D            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 000A                 ??_vscp_setManufacturerId 000D  
               _vscp_handleProtocolEvent 0EE6                            __activetblptr 000002  
                      __RegsToCANID@type 000B               ECANReceiveMessage@msgFlags 0011  
          doApplicationOneSecondWork@bOn 00CE                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                 __size_of_doActionPulse 01EC               ECANReceiveMessage@savedPtr 0012  
                                 _CANCON 000F6F                                   _EEDATA 000FA8  
                                 _EECON2 000FA7                                   _CIOCON 000F73  
                          doDM@type_mask 00D4                       vscp_writeStdReg@rv 0015  
                          ?_init_app_ram 0001                                   _MDSEL0 007BBE  
                                 _MDSEL1 007BBF                               _OpenTimer0 3BBC  
                                 i1l7531 0024                                   i1l7541 0052  
                                 i1l7533 002C                                   i1l7551 0078  
                                 i1l7543 005A                                   i1l7535 0038  
                                 i1l7553 0080                                   i1l7545 005E  
                                 i1l7537 003E                                   i1l7555 008A  
                                 i1l7547 0062                                   i1l7539 0042  
                                 i1l7557 0094                                   i1l7549 006E  
                                 i1l7559 00A2                          _init_app_eeprom 14FE  
                                 _RXB0IF 007D20                                   _RXB1IF 007D21  
                __end_of_doActionDisable 36B8                                   _RXF1EN 006EA1  
                 ECANReceiveMessage@data 000F                   ECANReceiveMessage@mode 0016  
                 ECANReceiveMessage@temp 0017                        getVSCPFrame@pData 0022  
                      getVSCPFrame@pSize 0021                       _vscp_newNodeOnline 39DE  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0011  
 vscp_handleProtocolEvent@page_save_1294 00D9                           getCANFrame@pid 001C  
                         __CFG_STVREN$ON 000000                                ??___lbmod 0009  
                          _vscp_getEvent 3A08                                   _doWork 3D5E  
                       OpenTimer0@config 0008                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 000D                      vscp_writeAppReg@bOn 00CC  
        calculateSetFilterMask@rowfilter 003E               calculateSetFilterMask@mask 0036  
                    vscp_writeAppReg@reg 00CD               __end_of_vscp_setSegmentCRC 3C88  
                    vscp_writeAppReg@val 0051                                   clear_0 3B40  
                                 clear_1 3B4C                            ?_sendCANFrame 0037  
           vscp_handleProtocolEvent@byte 00E6                  __size_of_vscp_getUserID 0014  
                          _vscp_nickname 0090                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                    vscp_setSegmentCRC@crc 000C  
              ??_vscp_getSubMinorVersion 0008     __size_of_vscp_getBootLoaderAlgorithm 0002  
                         ??_init_app_ram 000A                     ??_vscp_newNodeOnline 004C  
                        ___lbmod@divisor 0008                          doActionToggle@i 00CB  
                             __accesstop 0060                  __end_of__initialization 3B52  
                        ___lbmod@counter 000A            __size_of_vscp_getMinorVersion 0002  
                        doActionStatus@i 00CB                    __size_of_getVSCPFrame 0078  
                     _vscp_writeRegister 3B5C                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 0026                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001                            _doActionPulse 2628  
            __end_of_vscp_check_pstorage 3B3A                  __size_of_vscp_setUserID 001C  
                            ?_Read_b_eep 0008                          ??i1_WriteTimer0 0003  
                    ?_vscp_writeRegister 00CE                               __end_ofPL2 261A  
                             __end_ofPL4 0E60                               __end_ofPL6 0E70  
                             __end_ofPL8 1C5A                           ??_sendCANFrame 003E  
                             _doActionOn 1F96                  ?_calculateSetFilterMask 0001  
          calculateSetFilterMask@lastOID 0035               __end_of_vscp_getFamilyCode 3D38  
                          ?__RegsToCANID 0008              __size_of_ECANReceiveMessage 01FA  
                     sendVSCPFrame@pData 0045               __end_of_vscp_getFamilyType 3D2E  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 00CE  
        __size_of_vscp_setManufacturerId 0026                 __end_of_vscp_writeAppReg 0E4C  
                 getVSCPFrame@pvscpclass 0027                  __end_of_init_app_eeprom 1960  
            __end_of_vscp_setControlByte 3C72                 __end_of_vscp_writeStdReg 30B6  
          calculateSetFilterMask@rowmask 0031                       __RegsToCANID@Value 000E  
                   ??_vscp_writeRegister 0052          __end_of_vscp_handleDropNickname 3984  
                           _getVSCPFrame 36B8                               __pbssBANK0 0060  
                            ?_OpenTimer0 0001               __end_of_vscp_getBufferSize 3D64  
                              ?_Busy_eep 0001                         ?_doActionDisable 000C  
                  vscp_writeRegister@reg 00CF                   ??_ECANSetOperationMode 0008  
     __size_of_vscp_getRegisterPagesUsed 0002                           ?_doActionPulse 000A  
        __end_of_vscp_getSubMinorVersion 3D68                 ECANSetOperationMode@mode 0008  
                                _B0RXFUL 007107                                  _B1RXFUL 007187  
                   __ECANRxFilterHitInfo 0054                                  _B2RXFUL 007207  
                                _B3RXFUL 007287                                  _B4RXFUL 007307  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 000C  
                                _B5RXFUL 007387           __end_of_calculateSetFilterMask 1C1C  
                __size_of_doActionToggle 013C                         WriteTimer0@timer 000A  
                __size_of_doActionStatus 0126                                  _ECANCON 000F77  
                          ??_WriteTimer0 000A                           ??__RegsToCANID 000C  
                          ??_Write_b_eep 000B                    sendVSCPFrame@priority 0043  
                                _BRGCON1 000F70                                  _BRGCON2 000F71  
                                _BRGCON3 000F72           SendInformationEvent@eventClass 00C4  
                    vscp_writeStdReg@reg 0016             __end_of_vscp_doOneSecondWork 3860  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 0041  
                          ??_doActionOff 00C6          __end_of_interrupt_at_low_vector 00B6  
               vscp_readStdReg@code_1267 0015                        sendCANFrame@pdata 003C  
                  _vscp_handleProbeState 3372                                  _RXB0CON 000F60  
                                _RXB1CON 000F50                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 3730               __end_of_vscp_getMatrixInfo 3B9E  
                                _TXB0CON 000F40                                  _TXB1CON 000F30  
                                _TXB2CON 000F20                                  _RXFCON0 000DD4  
                                _RXFCON1 000DD5                    doActionStatus@dmflags 00C8  
                     _vscp_goActiveState 3B9E                   __size_of_sendVSCPFrame 00B6  
           __end_of_SendInformationEvent 3812             __end_of_vscp_getMajorVersion 3D6C  
                    __size_of_Read_b_eep 0012                       __size_of_vscp_init 0044  
                             ??_Busy_eep 0008                  SendInformationEvent@idx 0050  
                 _vscp_getManufacturerId 3C9E                   _vscp_setManufacturerId 3A80  
                        _ECANSendMessage 29B2                      ?_vscp_goActiveState 0001  
                                __Hparam 0000                          ??_vscp_getEvent 002C  
                                __Lparam 0000                       _vscp_node_substate 0092  
             __end_of_vscp_getSegmentCRC 3D4C               ??_vscp_handleProtocolEvent 00D0  
                          ??_getCANFrame 001C                             doActionOff@i 00CA  
      __end_of_vscp_getRegisterPagesUsed 3D62                 __size_of_vscp_getMDF_URL 0018  
                                ___lbmod 3A32                          getCANFrame@pdlc 001A  
                vscp_writeAppReg@val_682 00CA                                _FIFOEMPTY 007BA7  
                        __size_of_doWork 0002                             __psmallconst 0600  
                   __end_of_init_app_ram 31AC                       _vscp_sendHeartBeat 3A5A  
                                __pcinit 3B3A                           _vscp_deviceURL 0600  
                            ?_doActionOn 0051                                  __ramtop 0600  
                    __size_of_OpenTimer0 001E                                  __ptext0 31BC  
                                __ptext1 3D5E                                  __ptext2 1CFC  
                                __ptext3 3812                                  __ptext4 3A5A  
                                __ptext5 3D10                                  __ptext6 3D1A  
                                __ptext7 3D5A                                  __ptext8 2424  
                                __ptext9 2B1C                           _vscp_getUserID 3CB2  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 004C  
                       doActionDisable@i 0011                    vscp_writeStdReg@value 0010  
                    ?_vscp_sendHeartBeat 00C4                 ??_vscp_handleSetNickname 000D  
                                _minutes 0089                                  _seconds 008B  
                    __end_of_WriteTimer0 3CEC                         ?_init_app_eeprom 0001  
                    __end_of_Write_b_eep 3954                        vscp_readAppReg@rv 000A  
                     vscp_getMDF_URL@idx 0009            vscp_handleProtocolEvent@bytes 00DD  
                   end_of_initialization 3B52                      __end_of_doActionOff 3372  
           __end_of_vscp_handleHeartbeat 38E2                 __size_of_vscp_getSubzone 000A  
                          __Lmediumconst 0000                     __end_of_sendCANFrame 39B2  
              vscp_handleProtocolEvent@i 00EA                vscp_handleProtocolEvent@j 00EB  
              vscp_handleProtocolEvent@k 00E4                          ??_doActionPulse 000B  
                 doActionDisable@dmflags 0010                     ??_vscp_sendHeartBeat 004C  
                         _vscp_sendEvent 3ACC                        ECANSendMessage@id 0012  
                      ECANSendMessage@pb 001B                                  postdec2 000FDD  
                __size_of_ECANInitialize 0096                           _vscp_setUserID 3BDA  
                                postinc0 000FEE                                  postinc2 000FDE  
                 __end_of_vscp_deviceURL 0620      __end_of_vscp_writeNicknamePermanent 3C9E  
            _vscp_writeNicknamePermanent 3C88                       __ECANPointBuffer@b 000B  
                          _sendVSCPFrame 342C                   __end_of_vscp_getUserID 3CC6  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0078CB  
                      __end_of_vscp_init 38A4                           _vscp_probe_cnt 0093  
                              _PORTCbits 000F82                      __end_of_getCANFrame 39DE  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
               __size_of_vscp_readAppReg 00B6                         ___lbmod@dividend 0009  
                       doActionPulse@arg 000A                           _vscp_statuscnt 0058  
               __size_of_vscp_readStdReg 017E                         doActionPulse@val 000E  
                     _vscp_setSegmentCRC 3C72               vscp_handleProtocolEvent@cb 00E2  
                __end_of_ECANSendMessage 2B1C                        vscp_readStdReg@rv 001B  
                            ___lbmod@rem 000B                            ?__CANIDToRegs 0008  
                            doDM@dmflags 00DB                     __end_of__RegsToCANID 2E42  
                    __size_of_doActionOn 0286                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 3AF2                               _vscp_error 3D5A  
                   _vscp_doOneSecondWork 3812                       i1WriteTimer0@timer 0003  
                             _vscp_timer 0086                   __end_of_vscp_setUserID 3BF6  
                 vscp_sendHeartBeat@zone 004C                             ??_Read_b_eep 000A  
                         ?_sendVSCPFrame 003F              doApplicationOneSecondWork@i 00D0  
                         _doActionToggle 2B1C                           _doActionStatus 2C58  
                        ?_vscp_getUserID 0001                           __end_of_doWork 3D60  
           __end_of_vscp_getMinorVersion 3D6A                              _WriteTimer0 3CDA  
                   _SendInformationEvent 37A6                     _vscp_getMajorVersion 3D6A  
                            _Write_b_eep 3920                     ??_vscp_setSegmentCRC 000C  
                      ??_vscp_getMDF_URL 0008            ??_vscp_getBootLoaderAlgorithm 0008  
                            __end_ofPL10 1C72                              __end_ofPL20 2E50  
                            __end_ofPL12 1CA6                        ?_vscp_writeAppReg 0051  
                            __end_ofPL30 2F92                              __end_ofPL22 1F56  
                            __end_ofPL14 1CD6                              __end_ofPL40 2FA6  
                            __end_ofPL32 1F72                              __end_ofPL24 1F64  
                            __end_ofPL16 2628                              __end_ofPL50 2E9C  
                            __end_ofPL42 29A6                              __end_ofPL34 2E62  
                            __end_ofPL26 2F80                              __end_ofPL18 2F70  
                            __end_ofPL60 0EB6                              __end_ofPL52 1F84  
                            __end_ofPL44 2E8A                              __end_ofPL36 2E76  
                            __end_ofPL28 14D2                              __end_ofPL70 14F4  
                            __end_ofPL62 31BC                              __end_ofPL54 1F96  
                            __end_ofPL46 14E6                              __end_ofPL38 1CEA  
                            __end_ofPL80 14FE                              __end_ofPL72 2424  
                            __end_ofPL64 0EC6                              __end_ofPL56 0E96  
                            __end_ofPL48 0E84                              __end_ofPL82 1CFC  
                            __end_ofPL74 2FB0                              __end_ofPL66 0ED6  
                            __end_ofPL58 0EA6                              __end_ofPL76 29B2  
                            __end_ofPL68 0EE6                              __end_ofPL78 1CF4  
                    start_initialization 3B3A                              _doActionOff 329E  
        __size_of_vscp_handleSetNickname 0024                       ??_vscp_writeAppReg 00C6  
                      ?_vscp_writeStdReg 0010                   _relay_protection_timer 0060  
                    __CFG_BOREN$BOACTIVE 000000              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 0008                       ??_vscp_writeStdReg 0011  
                     _vscp_getFamilyCode 3D2E                           ??__CANIDToRegs 000F  
                     _vscp_getFamilyType 3D24                         doDM@class_filter 00CF  
                     __end_of_Read_b_eep 3CFE                      sendVSCPFrame@nodeid 0042  
                      _vscp_readRegister 3C12                          ?_vscp_sendEvent 0001  
vscp_handleProtocolEvent@bytes_this_time 00E1                    ?_vscp_doOneSecondWork 0001  
                      __size_of_Busy_eep 0006                    ECANReceiveMessage@ptr 0018  
                    ?_vscp_getFamilyCode 0008                       ?_vscp_readRegister 0001  
       __end_of_vscp_handleProtocolEvent 14BA                                _doDM$2152 00D5  
                        ?_vscp_setUserID 000C                                _doDM$2153 00D6  
                              _doDM$2154 00D7                                _doDM$2155 00D8  
                              _doDM$2156 00D9                                _doDM$2157 00DA  
                    ?_vscp_getFamilyType 0008                    __size_of_init_app_ram 00F6  
               ?_vscp_handleDropNickname 0001                   __end_of_doActionToggle 2C58  
                      ??_vscp_getSubzone 000A                   __end_of_doActionStatus 2D7E  
               __end_of__ECANPointBuffer 37A6                        __CANIDToRegs@type 000E  
                            _getCANFrame 39B2                                 ??_doWork 0008  
                     _vscp_getBufferSize 3D62              vscp_handleProtocolEvent@len 00DE  
                         doActionOff@arg 0051              vscp_handleProtocolEvent@pos 00DC  
             __end_of_ECANReceiveMessage 2416                           doActionOff@val 00C9  
                    ??_vscp_readRegister 001D           __size_of_vscp_goBootloaderMode 001C  
                  ?_SendInformationEvent 00C4                    ?_vscp_getMajorVersion 0001  
                  __end_ofi1_WriteTimer0 3D10            __end_of_vscp_goBootloaderMode 3C12  
                   _vscp_handleHeartbeat 38A4                       __end_of_OpenTimer0 3BDA  
    __size_of_doApplicationOneSecondWork 024C                      ?_vscp_getBufferSize 0001  
                         doActionPulse@i 0010             __size_of_vscp_check_pstorage 0024  
                   ??_vscp_getFamilyCode 000C                 ?_vscp_getSubMinorVersion 0001  
                            __pbssCOMRAM 0052                     ??_vscp_getFamilyType 000C  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 00B0  
                       _vscp_alarmstatus 0055                            ?_vscp_getZone 0001  
                  __size_of_sendCANFrame 002E                  ?_vscp_getManufacturerId 0001  
                ?_vscp_setManufacturerId 000C                            ?_vscp_setGUID 000C  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0012  
                      ??_vscp_readAppReg 000A                        sendVSCPFrame@size 0044  
              __end_of_vscp_readRegister 3C2C                        _relay_pulse_flags 008A  
                           _init_app_ram 30B6                        _relay_pulse_timer 0070  
           __size_of_vscp_setControlByte 0016                 ?_interrupt_at_low_vector 0001  
                      ??_vscp_readStdReg 000C                     ??_vscp_getBufferSize 0008  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 3B7E  
                 _vscp_handleSetNickname 3AF2            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 00B0                          ?_doActionToggle 0051  
                         _ECANInitialize 3598                          ?_doActionStatus 0051  
               __size_of_doActionDisable 008A                                 ?___lbmod 0008  
                    ?_vscp_getMatrixInfo 0001                  calculateSetFilterMask@i 0043  
                calculateSetFilterMask@j 0042                          vscp_getGUID@idx 000A  
                            __pintcodelo 0018                             ??_doActionOn 00C6  
                  ?_vscp_handleHeartbeat 0001         vscp_handleProtocolEvent@len_1284 00E0  
                vscp_readStdReg@idx_1268 001A               vscp_setManufacturerId@data 000C  
                           _sendCANFrame 3984                              __smallconst 0600  
                      WriteTimer0@timer0 0008                       _vscp_getSegmentCRC 3D42  
                         ??_vscp_getGUID 000A                           ??_vscp_getZone 000A  
                            doActionOn@i 00CB           __end_of_vscp_getManufacturerId 3CB2  
         __end_of_vscp_setManufacturerId 3AA6                    __size_of__RegsToCANID 00C4  
       vscp_handleProtocolEvent@pos_1283 00DF                          doDM@type_filter 00D3  
                         ??_vscp_setGUID 000D                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 0008                         _vscp_configtimer 0084  
                     doActionDisable@arg 000C                       doActionDisable@val 000F  
        SendInformationEvent@eventTypeId 00C5                   ??_vscp_doOneSecondWork 004D  
                 sendVSCPFrame@vscpclass 003F                                 _LATBbits 000F8A  
                   _vscp_getMinorVersion 3D68                                 _LATCbits 000F8B  
                     __end_of_doActionOn 221C                   __end_of_ECANInitialize 362E  
                               i1u802_20 002C                                 i1u802_21 002A  
                               i1u803_20 005A                                 i1u803_21 0058  
                               i1u804_20 006E                                 i1u804_21 006C  
                               i1u805_20 0078                                 i1u805_21 0076  
                               i1u806_20 0080                                 i1u806_21 007E  
                               i1u807_20 0094                                 i1u807_21 0092  
                               i1u808_20 00A2                                 i1u808_21 00A0  
                       ECANSendMessage@i 0034                         ECANSendMessage@j 002F  
                  __end_of_vscp_getEvent 3A32                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 002C  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 000A                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                   ??_SendInformationEvent 004B  
                               _RXM1SIDH 000F1C                   ??_vscp_getMajorVersion 0008  
                               _RXM1SIDL 000F1D               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 004C                       vscp_setUserID@data 000C  
                   __end_of__CANIDToRegs 2F5C                             __RegsToCANID 2D7E  
                     _vscp_probe_address 0057                          Write_b_eep@badd 0008  
                        Write_b_eep@bdat 000A                       doActionOff@dmflags 00C8  
            __size_of_vscp_goActiveState 001E                      getVSCPFrame@pNodeId 001F  
                              _vscp_init 3860                                _vscp_imsg 0095  
                              _vscp_hour 008D                                _vscp_omsg 00A3  
                       vscp_setGUID@data 000C        __size_of_vscp_handleProtocolEvent 05D4  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
               SendInformationEvent@data 004D     __size_of_vscp_writeNicknamePermanent 0016  
     __end_of_doApplicationOneSecondWork 1F48               _doApplicationOneSecondWork 1CFC  
                       _vscp_page_select 0052               __size_of_vscp_readRegister 001A  
                      _measurement_clock 0080                                 _Busy_eep 3D54  
                  ?_vscp_getMinorVersion 0001                 __size_of_init_app_eeprom 0462  
           __end_of_vscp_restoreDefaults 3D54                               _EECON1bits 000FA6  
                        ?_ECANInitialize 0001                 ??_calculateSetFilterMask 0012  
                               __Hrparam 0000                     ECANReceiveMessage@id 0014  
            __size_of_vscp_sendHeartBeat 0026                         ??_vscp_getUserID 000A  
                        _vscp_getMDF_URL 3C2C                                 __Lrparam 0000  
                  __end_of_doActionPulse 2814                         __CANIDToRegs@val 000A  
                       __CANIDToRegs@ptr 0008                            doActionOn@arg 0051  
                          doActionOn@val 00CA                         _vscp_initledfunc 0056  
                       __size_of___lbmod 0028                   ??_vscp_handleHeartbeat 000D  
                       getCANFrame@flags 001D                             ?_WriteTimer0 0008  
                       getCANFrame@pdata 001B                             ?_Write_b_eep 0008  
                      ??_doActionDisable 000D               vscp_writeAppReg@bInfoEvent 00C9  
                             ?_vscp_init 0001                             ?_doActionOff 0051  
                               __ptext10 362E                                 __ptext11 2C58  
                               __ptext20 14FE                                 __ptext12 2628  
                               __ptext21 3BDA                                 __ptext13 1F96  
                               __ptext30 3D24                                 __ptext22 3A80  
                               __ptext14 329E                                 __ptext31 3D2E  
                               __ptext23 3AA6                                 __ptext15 0EE6  
                               __ptext40 3D6A                                 __ptext32 3D62  
                               __ptext24 0622                                 __ptext16 3A32  
                               __ptext41 39DE                                 __ptext33 3D64  
                               __ptext25 1960                                 __ptext17 3B5C  
                               __ptext50 3B9E                                 __ptext42 3954  
                               __ptext34 3C9E                                 __ptext26 37A6  
                               __ptext18 2FB0                                 __ptext51 3ACC  
                               __ptext43 3860                                 __ptext35 3CB2  
                               __ptext27 3C12                                 __ptext19 3D4C  
                               __ptext60 2D7E                                 __ptext52 342C  
                               __ptext44 3D38                                 __ptext36 3C2C  
                               __ptext28 2814                                 __ptext61 3730  
                               __ptext53 3984                                 __ptext45 3AF2  
                               __ptext37 3CC6                                 __ptext29 3D60  
                               __ptext70 3598                                 __ptext62 3B16  
                               __ptext54 29B2                                 __ptext46 38A4  
                               __ptext38 3D66                                 __ptext71 3C44  
                               __ptext63 3C5C                                 __ptext55 2E9C  
                               __ptext47 3B7E                                 __ptext39 3D68  
                               __ptext72 3BBC                                 __ptext64 3C72  
                               __ptext56 3A08                                 __ptext48 3BF6  
                               __ptext73 30B6                                 __ptext65 3D42  
                               __ptext57 36B8                                 __ptext49 3372  
                               __ptext74 3CDA                                 __ptext66 3C88  
                               __ptext58 39B2                                 __ptext75 3CEC  
                               __ptext67 3920                                 __ptext59 221C  
                               __ptext76 34E2                                 __ptext68 3D54  
                               __ptext69 38E2                                 __ptext78 3CFE  
         vscp_goBootloaderMode@algorithm 000C                vscp_sendHeartBeat@subzone 00C4  
                          ?_getVSCPFrame 001E                         ??_vscp_sendEvent 004B  
                        _vscp_getSubzone 3D10             calculateSetFilterMask@filter 003A  
                       ??_vscp_setUserID 000D                            __size_of_doDM 01DC  
                          __size_of_main 00E2                            __size_of_init 003E  
              __size_of_vscp_writeAppReg 082A                      _vscp_check_pstorage 3B16  
                          init_app_ram@i 000C           vscp_handleProtocolEvent@i_1282 00E5  
         vscp_handleProtocolEvent@i_1285 00E9           vscp_handleProtocolEvent@i_1293 00E3  
                   __end_of_vscp_getGUID 3CDA                __size_of_vscp_writeStdReg 0106  
                    ECANSendMessage@data 0016                 ECANSendMessage@tempBSEL0 0030  
                           ?_getCANFrame 001A                      ECANSendMessage@mode 002D  
                   __end_of_vscp_getZone 3D24                      ECANSendMessage@temp 0033  
                      ?__ECANPointBuffer 0008                        doActionOn@dmflags 00C9  
                      vscp_setUserID@idx 000D                     __end_of_vscp_setGUID 3ACC  
                     vscp_readAppReg@reg 000B                       ??__ECANPointBuffer 000B  
         vscp_handleProtocolEvent@offset 00DB                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 000D                         init_app_eeprom@i 000E  
                       init_app_eeprom@j 000F                      _vscp_setControlByte 3C5C  
            __size_of_vscp_setSegmentCRC 0016                          _vscp_readAppReg 34E2  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F50  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
           ??_vscp_readNicknamePermanent 000A                      ECANReceiveMessage@i 0015  
                        _vscp_guid_reset 008C                          _vscp_readStdReg 2814  
           vscp_handleDropNickname@bytes 000D               __end_of_vscp_newNodeOnline 3A08  
                     _ECANReceiveMessage 221C                           ??_getVSCPFrame 0023  
                        _vscp_initbtncnt 008E                          sendVSCPFrame@id 0047  
                               intlevel1 0000                   ??_vscp_getMinorVersion 0008  
                vscp_getMatrixInfo@pData 0001                  __end_of_vscp_getMDF_URL 3C44  
                   ?_vscp_setControlByte 0001                      ?_ECANReceiveMessage 000F  
                ?_vscp_handleSetNickname 0001                         ??_doActionToggle 00C6  
       __size_of_vscp_getSubMinorVersion 0002                         ??_doActionStatus 00C6  
                        _vscp_node_state 0091                             ??_vscp_error 0008  
                ECANSendMessage@msgFlags 0019                      vscp_getMatrixInfo@i 0008  
        __size_of_calculateSetFilterMask 02BC                  vscp_setControlByte@ctrl 000C  
                     ECANSendMessage@ptr 0035                        ??_init_app_eeprom 000C  
                  __size_of__CANIDToRegs 00C0      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 3D66              _vscp_getBootLoaderAlgorithm 3D64  
       __size_of_interrupt_at_low_vector 009E                   ECANSendMessage@dataLen 0018  
                    __ECANPointBuffer@pt 000C                     ??_ECANReceiveMessage 0012  
                  ??_vscp_check_pstorage 000D                   ECANSendMessage@buffers 002E  
                  _vscp_goBootloaderMode 3BF6             __end_of_ECANSetOperationMode 3C5C  
                   _vscp_restoreDefaults 3D4C              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 000A                  __end_of_vscp_getSubzone 3D1A  
            __size_of_vscp_getFamilyType 000A                               _RXM1EXIDEN 0078EB  
             __end_of_vscp_writeRegister 3B7E                       __end_of_vscp_error 3D5E  
                 ECANSendMessage@tempPtr 0031           __end_of_vscp_handleSetNickname 3B16  
     vscp_handleProtocolEvent@bytes_1289 00E7                    ??_vscp_setControlByte 000C  
                   vscp_readRegister@reg 001D             ??_doApplicationOneSecondWork 00CB  
                           __CANIDToRegs 2E9C                   __size_ofi1_WriteTimer0 0012  
      vscp_handleProtocolEvent@page_save 00D7              __size_of_vscp_getBufferSize 0002  
      doApplicationOneSecondWork@ctrlreg 00CF                 __size_of_ECANSendMessage 016A  
                      doActionToggle@bOn 00CA                        doActionToggle@arg 0051  
