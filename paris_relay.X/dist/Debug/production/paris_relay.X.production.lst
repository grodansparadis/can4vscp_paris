

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Tue Nov 10 18:23:09 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	text74,global,reloc=2,class=CODE,delta=1
    86                           	psect	text75,global,reloc=2,class=CODE,delta=1
    87                           	psect	text76,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    89                           	psect	text78,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    92                           	psect	pa_nodes,global,class=CODE,delta=1
    93  0000                     tblptrh	equ	0xFF7
    94                           tblptrl	equ	0xFF6
    95                           tablat	equ	0xFF5
    96                           prodh	equ	0xFF4
    97                           prodl	equ	0xFF3
    98                           intcon	equ	0xFF2
    99                           wreg	equ	0xFE8
   100                           indf1	equ	0xFE7
   101                           fsr1h	equ	0xFE2
   102                           fsr1l	equ	0xFE1
   103                           indf2	equ	0xFDF
   104                           postinc2	equ	0xFDE
   105                           postdec2	equ	0xFDD
   106                           plusw2	equ	0xFDB
   107                           fsr2h	equ	0xFDA
   108                           fsr2l	equ	0xFD9
   109                           status	equ	0xFD8
   110                           
   111                           	psect	smallconst
   112  000600                     __psmallconst:
   113                           	opt stack 0
   114  000600                     _vscp_deviceURL:
   115                           	opt stack 0
   116  000600  77                 	db	119
   117  000601  77                 	db	119
   118  000602  77                 	db	119
   119  000603  2E                 	db	46
   120  000604  65                 	db	101
   121  000605  75                 	db	117
   122  000606  72                 	db	114
   123  000607  6F                 	db	111
   124  000608  73                 	db	115
   125  000609  6F                 	db	111
   126  00060A  75                 	db	117
   127  00060B  72                 	db	114
   128  00060C  63                 	db	99
   129  00060D  65                 	db	101
   130  00060E  2E                 	db	46
   131  00060F  73                 	db	115
   132  000610  65                 	db	101
   133  000611  2F                 	db	47
   134  000612  70                 	db	112
   135  000613  61                 	db	97
   136  000614  72                 	db	114
   137  000615  69                 	db	105
   138  000616  73                 	db	115
   139  000617  5F                 	db	95
   140  000618  30                 	db	48
   141  000619  31                 	db	49
   142  00061A  30                 	db	48
   143  00061B  2E                 	db	46
   144  00061C  78                 	db	120
   145  00061D  6D                 	db	109
   146  00061E  6C                 	db	108
   147  00061F  00                 	db	0
   148  000620                     __end_of_vscp_deviceURL:
   149                           	opt stack 0
   150  0000                     _BRGCON1	set	3952
   151  0000                     _BRGCON2	set	3953
   152  0000                     _BRGCON3	set	3954
   153  0000                     _BSEL0	set	3576
   154  0000                     _CANCON	set	3951
   155  0000                     _CIOCON	set	3955
   156  0000                     _ECANCON	set	3959
   157  0000                     _EEADR	set	4009
   158  0000                     _EECON1bits	set	4006
   159  0000                     _EECON2	set	4007
   160  0000                     _EEDATA	set	4008
   161  0000                     _INTCONbits	set	4082
   162  0000                     _LATBbits	set	3978
   163  0000                     _LATCbits	set	3979
   164  0000                     _MSEL0	set	3568
   165  0000                     _MSEL1	set	3569
   166  0000                     _MSEL2	set	3570
   167  0000                     _PORTA	set	3968
   168  0000                     _PORTB	set	3969
   169  0000                     _PORTC	set	3970
   170  0000                     _PORTCbits	set	3970
   171  0000                     _RXB1CONbits	set	3920
   172  0000                     _RXF0EIDH	set	3842
   173  0000                     _RXF0EIDL	set	3843
   174  0000                     _RXF0SIDH	set	3840
   175  0000                     _RXF0SIDL	set	3841
   176  0000                     _RXF1EIDH	set	3846
   177  0000                     _RXF1EIDL	set	3847
   178  0000                     _RXF1SIDL	set	3845
   179  0000                     _RXFBCON0	set	3552
   180  0000                     _RXFBCON1	set	3553
   181  0000                     _RXFBCON2	set	3554
   182  0000                     _RXFBCON3	set	3555
   183  0000                     _RXFBCON4	set	3556
   184  0000                     _RXFBCON5	set	3557
   185  0000                     _RXFBCON6	set	3558
   186  0000                     _RXFBCON7	set	3559
   187  0000                     _RXFCON0	set	3540
   188  0000                     _RXFCON1	set	3541
   189  0000                     _RXM0EIDH	set	3866
   190  0000                     _RXM0EIDL	set	3867
   191  0000                     _RXM0SIDH	set	3864
   192  0000                     _RXM0SIDL	set	3865
   193  0000                     _RXM1EIDH	set	3870
   194  0000                     _RXM1EIDL	set	3871
   195  0000                     _RXM1SIDL	set	3869
   196  0000                     _T0CON	set	4053
   197  0000                     _T0CONbits	set	4053
   198  0000                     _TMR0H	set	4055
   199  0000                     _TMR0L	set	4054
   200  0000                     _TRISA	set	3986
   201  0000                     _TRISB	set	3987
   202  0000                     _TRISC	set	3988
   203  0000                     _B0RXFUL	set	28935
   204  0000                     _B0TXEN	set	28610
   205  0000                     _B1RXFUL	set	29063
   206  0000                     _B1TXEN	set	28611
   207  0000                     _B2RXFUL	set	29191
   208  0000                     _B2TXEN	set	28612
   209  0000                     _B3RXFUL	set	29319
   210  0000                     _B3TXEN	set	28613
   211  0000                     _B4RXFUL	set	29447
   212  0000                     _B4TXEN	set	28614
   213  0000                     _B5RXFUL	set	29575
   214  0000                     _B5TXEN	set	28615
   215  0000                     _FIFOEMPTY	set	31655
   216  0000                     _IRXIF	set	32039
   217  0000                     _MDSEL0	set	31678
   218  0000                     _MDSEL1	set	31679
   219  0000                     _RXB0FILHIT0	set	31488
   220  0000                     _RXB0FUL	set	31495
   221  0000                     _RXB0IF	set	32032
   222  0000                     _RXB0OVFL	set	31655
   223  0000                     _RXB1IF	set	32033
   224  0000                     _RXB1OVFL	set	31654
   225  0000                     _RXF1EN	set	28321
   226  0000                     _RXM0EXIDM	set	30923
   227  0000                     _RXM1EXIDEN	set	30955
   228  0000                     _B0CON	set	3616
   229  0000                     _B1CON	set	3632
   230  0000                     _B2CON	set	3648
   231  0000                     _B3CON	set	3664
   232  0000                     _B4CON	set	3680
   233  0000                     _B5CON	set	3696
   234  0000                     _RXB0CON	set	3936
   235  0000                     _RXB1CON	set	3920
   236  0000                     _RXF1SIDH	set	3844
   237  0000                     _RXM1SIDH	set	3868
   238  0000                     _TXB0CON	set	3904
   239  0000                     _TXB1CON	set	3888
   240  0000                     _TXB2CON	set	3872
   241                           
   242                           ; #config settings
   243  000620  00                 	db	0	; dummy byte at the end
   244  0000                     tblptrh	equ	0xFF7
   245                           tblptrl	equ	0xFF6
   246                           tablat	equ	0xFF5
   247                           prodh	equ	0xFF4
   248                           prodl	equ	0xFF3
   249                           intcon	equ	0xFF2
   250                           wreg	equ	0xFE8
   251                           indf1	equ	0xFE7
   252                           fsr1h	equ	0xFE2
   253                           fsr1l	equ	0xFE1
   254                           indf2	equ	0xFDF
   255                           postinc2	equ	0xFDE
   256                           postdec2	equ	0xFDD
   257                           plusw2	equ	0xFDB
   258                           fsr2h	equ	0xFDA
   259                           fsr2l	equ	0xFD9
   260                           status	equ	0xFD8
   261                           
   262                           	psect	cinit
   263  003BBA                     __pcinit:
   264                           	opt stack 0
   265  003BBA                     start_initialization:
   266                           	opt stack 0
   267  003BBA                     __initialization:
   268                           	opt stack 0
   269                           
   270                           ; Clear objects allocated to BANK0 (81 bytes)
   271  003BBA  EE00  F060         	lfsr	0,__pbssBANK0
   272  003BBE  0E51               	movlw	81
   273  003BC0                     clear_0:
   274  003BC0  6AEE               	clrf	postinc0,c
   275  003BC2  06E8               	decf	wreg,f,c
   276  003BC4  E1FD               	bnz	clear_0
   277                           
   278                           ; Clear objects allocated to COMRAM (7 bytes)
   279  003BC6  EE00  F052         	lfsr	0,__pbssCOMRAM
   280  003BCA  0E07               	movlw	7
   281  003BCC                     clear_1:
   282  003BCC  6AEE               	clrf	postinc0,c
   283  003BCE  06E8               	decf	wreg,f,c
   284  003BD0  E1FD               	bnz	clear_1
   285  003BD2                     end_of_initialization:
   286                           	opt stack 0
   287  003BD2                     __end_of__initialization:
   288                           	opt stack 0
   289  003BD2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   290  003BD4  6EF8               	movwf	tblptru,c
   291  003BD6  0100               	movlb	0
   292  003BD8  EF7D  F019         	goto	_main	;jump to C main() function
   293                           tblptru	equ	0xFF8
   294                           tblptrh	equ	0xFF7
   295                           tblptrl	equ	0xFF6
   296                           tablat	equ	0xFF5
   297                           prodh	equ	0xFF4
   298                           prodl	equ	0xFF3
   299                           intcon	equ	0xFF2
   300                           postinc0	equ	0xFEE
   301                           wreg	equ	0xFE8
   302                           indf1	equ	0xFE7
   303                           fsr1h	equ	0xFE2
   304                           fsr1l	equ	0xFE1
   305                           indf2	equ	0xFDF
   306                           postinc2	equ	0xFDE
   307                           postdec2	equ	0xFDD
   308                           plusw2	equ	0xFDB
   309                           fsr2h	equ	0xFDA
   310                           fsr2l	equ	0xFD9
   311                           status	equ	0xFD8
   312                           
   313                           	psect	bssCOMRAM
   314  000052                     __pbssCOMRAM:
   315                           	opt stack 0
   316  000052                     _vscp_page_select:
   317                           	opt stack 0
   318  000052                     	ds	2
   319  000054                     __ECANRxFilterHitInfo:
   320                           	opt stack 0
   321  000054                     	ds	1
   322  000055                     _vscp_alarmstatus:
   323                           	opt stack 0
   324  000055                     	ds	1
   325  000056                     _vscp_initledfunc:
   326                           	opt stack 0
   327  000056                     	ds	1
   328  000057                     _vscp_probe_address:
   329                           	opt stack 0
   330  000057                     	ds	1
   331  000058                     _vscp_statuscnt:
   332                           	opt stack 0
   333  000058                     	ds	1
   334                           tblptru	equ	0xFF8
   335                           tblptrh	equ	0xFF7
   336                           tblptrl	equ	0xFF6
   337                           tablat	equ	0xFF5
   338                           prodh	equ	0xFF4
   339                           prodl	equ	0xFF3
   340                           intcon	equ	0xFF2
   341                           postinc0	equ	0xFEE
   342                           wreg	equ	0xFE8
   343                           indf1	equ	0xFE7
   344                           fsr1h	equ	0xFE2
   345                           fsr1l	equ	0xFE1
   346                           indf2	equ	0xFDF
   347                           postinc2	equ	0xFDE
   348                           postdec2	equ	0xFDD
   349                           plusw2	equ	0xFDB
   350                           fsr2h	equ	0xFDA
   351                           fsr2l	equ	0xFD9
   352                           status	equ	0xFD8
   353                           
   354                           	psect	bssBANK0
   355  000060                     __pbssBANK0:
   356                           	opt stack 0
   357  000060                     _relay_protection_timer:
   358                           	opt stack 0
   359  000060                     	ds	16
   360  000070                     _relay_pulse_timer:
   361                           	opt stack 0
   362  000070                     	ds	16
   363  000080                     _measurement_clock:
   364                           	opt stack 0
   365  000080                     	ds	4
   366  000084                     _vscp_configtimer:
   367                           	opt stack 0
   368  000084                     	ds	2
   369  000086                     _vscp_timer:
   370                           	opt stack 0
   371  000086                     	ds	2
   372  000088                     _hours:
   373                           	opt stack 0
   374  000088                     	ds	1
   375  000089                     _minutes:
   376                           	opt stack 0
   377  000089                     	ds	1
   378  00008A                     _relay_pulse_flags:
   379                           	opt stack 0
   380  00008A                     	ds	1
   381  00008B                     _seconds:
   382                           	opt stack 0
   383  00008B                     	ds	1
   384  00008C                     _sendTimer:
   385                           	opt stack 0
   386  00008C                     	ds	1
   387  00008D                     _vscp_guid_reset:
   388                           	opt stack 0
   389  00008D                     	ds	1
   390  00008E                     _vscp_hour:
   391                           	opt stack 0
   392  00008E                     	ds	1
   393  00008F                     _vscp_initbtncnt:
   394                           	opt stack 0
   395  00008F                     	ds	1
   396  000090                     _vscp_minute:
   397                           	opt stack 0
   398  000090                     	ds	1
   399  000091                     _vscp_nickname:
   400                           	opt stack 0
   401  000091                     	ds	1
   402  000092                     _vscp_node_state:
   403                           	opt stack 0
   404  000092                     	ds	1
   405  000093                     _vscp_node_substate:
   406                           	opt stack 0
   407  000093                     	ds	1
   408  000094                     _vscp_probe_cnt:
   409                           	opt stack 0
   410  000094                     	ds	1
   411  000095                     _vscp_second:
   412                           	opt stack 0
   413  000095                     	ds	1
   414  000096                     _vscp_imsg:
   415                           	opt stack 0
   416  000096                     	ds	14
   417  0000A4                     _vscp_omsg:
   418                           	opt stack 0
   419  0000A4                     	ds	13
   420                           tblptru	equ	0xFF8
   421                           tblptrh	equ	0xFF7
   422                           tblptrl	equ	0xFF6
   423                           tablat	equ	0xFF5
   424                           prodh	equ	0xFF4
   425                           prodl	equ	0xFF3
   426                           intcon	equ	0xFF2
   427                           postinc0	equ	0xFEE
   428                           wreg	equ	0xFE8
   429                           indf1	equ	0xFE7
   430                           fsr1h	equ	0xFE2
   431                           fsr1l	equ	0xFE1
   432                           indf2	equ	0xFDF
   433                           postinc2	equ	0xFDE
   434                           postdec2	equ	0xFDD
   435                           plusw2	equ	0xFDB
   436                           fsr2h	equ	0xFDA
   437                           fsr2l	equ	0xFD9
   438                           status	equ	0xFD8
   439                           
   440                           	psect	cstackBANK0
   441  0000B1                     __pcstackBANK0:
   442                           	opt stack 0
   443  0000B1                     ??_sendVSCPFrame:
   444                           
   445                           ; 0 bytes @ 0x0
   446  0000B1                     	ds	20
   447  0000C5                     ?_SendInformationEvent:
   448                           	opt stack 0
   449  0000C5                     ?_vscp_sendHeartBeat:
   450                           	opt stack 0
   451  0000C5                     SendInformationEvent@eventClass:
   452                           	opt stack 0
   453  0000C5                     vscp_sendHeartBeat@subzone:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x14
   457  0000C5                     	ds	1
   458  0000C6                     SendInformationEvent@eventTypeId:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0x15
   462  0000C6                     	ds	1
   463  0000C7                     ??_doActionOff:
   464  0000C7                     ??_doActionOn:
   465  0000C7                     ??_doActionStatus:
   466  0000C7                     ??_doActionToggle:
   467  0000C7                     ??_vscp_writeAppReg:
   468                           
   469                           ; 0 bytes @ 0x16
   470  0000C7                     	ds	2
   471  0000C9                     doActionOff@dmflags:
   472                           	opt stack 0
   473  0000C9                     doActionStatus@dmflags:
   474                           	opt stack 0
   475  0000C9                     doActionToggle@dmflags:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x18
   479  0000C9                     	ds	1
   480  0000CA                     vscp_writeAppReg@bInfoEvent:
   481                           	opt stack 0
   482  0000CA                     doActionOn@dmflags:
   483                           	opt stack 0
   484  0000CA                     doActionOff@val:
   485                           	opt stack 0
   486  0000CA                     doActionStatus@bOn:
   487                           	opt stack 0
   488  0000CA                     doActionToggle@val:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x19
   492  0000CA                     	ds	1
   493  0000CB                     vscp_writeAppReg@val_682:
   494                           	opt stack 0
   495  0000CB                     doActionOn@val:
   496                           	opt stack 0
   497  0000CB                     doActionOff@i:
   498                           	opt stack 0
   499  0000CB                     doActionStatus@val:
   500                           	opt stack 0
   501  0000CB                     doActionToggle@bOn:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x1A
   505  0000CB                     	ds	1
   506  0000CC                     ??_doApplicationOneSecondWork:
   507  0000CC                     vscp_writeAppReg@rv:
   508                           	opt stack 0
   509  0000CC                     doActionOn@i:
   510                           	opt stack 0
   511  0000CC                     doActionStatus@i:
   512                           	opt stack 0
   513  0000CC                     doActionToggle@i:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x1B
   517  0000CC                     	ds	1
   518  0000CD                     ??_doDM:
   519  0000CD                     vscp_writeAppReg@bOn:
   520                           	opt stack 0
   521                           
   522                           ; 1 bytes @ 0x1C
   523  0000CD                     	ds	1
   524  0000CE                     vscp_writeAppReg@reg:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x1D
   528  0000CE                     	ds	1
   529  0000CF                     ?_vscp_writeRegister:
   530                           	opt stack 0
   531  0000CF                     doApplicationOneSecondWork@bOn:
   532                           	opt stack 0
   533  0000CF                     vscp_writeRegister@value:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x1E
   537  0000CF                     	ds	1
   538  0000D0                     doApplicationOneSecondWork@ctrlreg:
   539                           	opt stack 0
   540  0000D0                     vscp_writeRegister@reg:
   541                           	opt stack 0
   542  0000D0                     doDM@class_filter:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x1F
   546  0000D0                     	ds	1
   547  0000D1                     ??_vscp_handleProtocolEvent:
   548  0000D1                     doApplicationOneSecondWork@i:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x20
   552  0000D1                     	ds	1
   553  0000D2                     doDM@class_mask:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x21
   557  0000D2                     	ds	2
   558  0000D4                     doDM@type_filter:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x23
   562  0000D4                     	ds	1
   563  0000D5                     doDM@type_mask:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0x24
   567  0000D5                     	ds	1
   568  0000D6                     _doDM$2152:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x25
   572  0000D6                     	ds	1
   573  0000D7                     _doDM$2153:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x26
   577  0000D7                     	ds	1
   578  0000D8                     _doDM$2154:
   579                           	opt stack 0
   580  0000D8                     vscp_handleProtocolEvent@page_save:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x27
   584  0000D8                     	ds	1
   585  0000D9                     _doDM$2155:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x28
   589  0000D9                     	ds	1
   590  0000DA                     _doDM$2156:
   591                           	opt stack 0
   592  0000DA                     vscp_handleProtocolEvent@page_save_1294:
   593                           	opt stack 0
   594                           
   595                           ; 2 bytes @ 0x29
   596  0000DA                     	ds	1
   597  0000DB                     _doDM$2157:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x2A
   601  0000DB                     	ds	1
   602  0000DC                     doDM@dmflags:
   603                           	opt stack 0
   604  0000DC                     vscp_handleProtocolEvent@offset:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x2B
   608  0000DC                     	ds	1
   609  0000DD                     doDM@i:
   610                           	opt stack 0
   611  0000DD                     vscp_handleProtocolEvent@pos:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x2C
   615  0000DD                     	ds	1
   616  0000DE                     vscp_handleProtocolEvent@bytes:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x2D
   620  0000DE                     	ds	1
   621  0000DF                     vscp_handleProtocolEvent@len:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x2E
   625  0000DF                     	ds	1
   626  0000E0                     vscp_handleProtocolEvent@pos_1283:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x2F
   630  0000E0                     	ds	1
   631  0000E1                     vscp_handleProtocolEvent@len_1284:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x30
   635  0000E1                     	ds	1
   636  0000E2                     vscp_handleProtocolEvent@bytes_this_time:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x31
   640  0000E2                     	ds	1
   641  0000E3                     vscp_handleProtocolEvent@cb:
   642                           	opt stack 0
   643                           
   644                           ; 1 bytes @ 0x32
   645  0000E3                     	ds	1
   646  0000E4                     vscp_handleProtocolEvent@i_1293:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x33
   650  0000E4                     	ds	1
   651  0000E5                     vscp_handleProtocolEvent@k:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0x34
   655  0000E5                     	ds	1
   656  0000E6                     vscp_handleProtocolEvent@i_1282:
   657                           	opt stack 0
   658                           
   659                           ; 1 bytes @ 0x35
   660  0000E6                     	ds	1
   661  0000E7                     vscp_handleProtocolEvent@byte:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0x36
   665  0000E7                     	ds	1
   666  0000E8                     vscp_handleProtocolEvent@bytes_1289:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x37
   670  0000E8                     	ds	2
   671  0000EA                     vscp_handleProtocolEvent@i_1285:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x39
   675  0000EA                     	ds	1
   676  0000EB                     vscp_handleProtocolEvent@i:
   677                           	opt stack 0
   678                           
   679                           ; 1 bytes @ 0x3A
   680  0000EB                     	ds	1
   681  0000EC                     vscp_handleProtocolEvent@j:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x3B
   685  0000EC                     	ds	1
   686                           tblptru	equ	0xFF8
   687                           tblptrh	equ	0xFF7
   688                           tblptrl	equ	0xFF6
   689                           tablat	equ	0xFF5
   690                           prodh	equ	0xFF4
   691                           prodl	equ	0xFF3
   692                           intcon	equ	0xFF2
   693                           postinc0	equ	0xFEE
   694                           wreg	equ	0xFE8
   695                           indf1	equ	0xFE7
   696                           fsr1h	equ	0xFE2
   697                           fsr1l	equ	0xFE1
   698                           indf2	equ	0xFDF
   699                           postinc2	equ	0xFDE
   700                           postdec2	equ	0xFDD
   701                           plusw2	equ	0xFDB
   702                           fsr2h	equ	0xFDA
   703                           fsr2l	equ	0xFD9
   704                           status	equ	0xFD8
   705                           
   706                           	psect	cstackCOMRAM
   707  000001                     __pcstackCOMRAM:
   708                           	opt stack 0
   709  000001                     ?i1_WriteTimer0:
   710                           	opt stack 0
   711  000001                     i1WriteTimer0@timer0:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x0
   715  000001                     	ds	2
   716  000003                     i1WriteTimer0@timer:
   717                           	opt stack 0
   718                           
   719                           ; 2 bytes @ 0x2
   720  000003                     	ds	2
   721  000005                     ??_interrupt_at_low_vector:
   722                           
   723                           ; 0 bytes @ 0x4
   724  000005                     	ds	3
   725  000008                     ?_WriteTimer0:
   726                           	opt stack 0
   727  000008                     ?_Write_b_eep:
   728                           	opt stack 0
   729  000008                     ?__CANIDToRegs:
   730                           	opt stack 0
   731  000008                     ?__RegsToCANID:
   732                           	opt stack 0
   733  000008                     ??_vscp_getMDF_URL:
   734  000008                     ?_Read_b_eep:
   735                           	opt stack 0
   736  000008                     ?___lbmod:
   737                           	opt stack 0
   738  000008                     ?__ECANPointBuffer:
   739                           	opt stack 0
   740  000008                     ?_vscp_getFamilyCode:
   741                           	opt stack 0
   742  000008                     ?_vscp_getFamilyType:
   743                           	opt stack 0
   744  000008                     vscp_getMatrixInfo@i:
   745                           	opt stack 0
   746  000008                     ECANSetOperationMode@mode:
   747                           	opt stack 0
   748  000008                     OpenTimer0@config:
   749                           	opt stack 0
   750  000008                     ___lbmod@divisor:
   751                           	opt stack 0
   752  000008                     __CANIDToRegs@ptr:
   753                           	opt stack 0
   754  000008                     __RegsToCANID@ptr:
   755                           	opt stack 0
   756  000008                     Read_b_eep@badd:
   757                           	opt stack 0
   758  000008                     Write_b_eep@badd:
   759                           	opt stack 0
   760  000008                     WriteTimer0@timer0:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x7
   764  000008                     	ds	1
   765  000009                     vscp_getMDF_URL@idx:
   766                           	opt stack 0
   767  000009                     ___lbmod@dividend:
   768                           	opt stack 0
   769                           
   770                           ; 1 bytes @ 0x8
   771  000009                     	ds	1
   772  00000A                     ??_init_app_ram:
   773  00000A                     ?_doActionPulse:
   774                           	opt stack 0
   775  00000A                     vscp_readAppReg@rv:
   776                           	opt stack 0
   777  00000A                     doActionPulse@arg:
   778                           	opt stack 0
   779  00000A                     vscp_getGUID@idx:
   780                           	opt stack 0
   781  00000A                     vscp_getUserID@idx:
   782                           	opt stack 0
   783  00000A                     vscp_getManufacturerId@idx:
   784                           	opt stack 0
   785  00000A                     __RegsToCANID@val:
   786                           	opt stack 0
   787  00000A                     Write_b_eep@bdat:
   788                           	opt stack 0
   789  00000A                     ___lbmod@counter:
   790                           	opt stack 0
   791  00000A                     WriteTimer0@timer:
   792                           	opt stack 0
   793  00000A                     __CANIDToRegs@val:
   794                           	opt stack 0
   795                           
   796                           ; 4 bytes @ 0x9
   797  00000A                     	ds	1
   798  00000B                     ??_doActionPulse:
   799  00000B                     vscp_readAppReg@reg:
   800                           	opt stack 0
   801  00000B                     __RegsToCANID@type:
   802                           	opt stack 0
   803  00000B                     __ECANPointBuffer@b:
   804                           	opt stack 0
   805  00000B                     Write_b_eep@GIE_BIT_VAL:
   806                           	opt stack 0
   807  00000B                     ___lbmod@rem:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0xA
   811  00000B                     	ds	1
   812  00000C                     ?_doActionDisable:
   813                           	opt stack 0
   814  00000C                     ??__RegsToCANID:
   815  00000C                     ??_vscp_readStdReg:
   816  00000C                     ?_vscp_setGUID:
   817                           	opt stack 0
   818  00000C                     ?_vscp_setManufacturerId:
   819                           	opt stack 0
   820  00000C                     ?_vscp_setUserID:
   821                           	opt stack 0
   822  00000C                     init_app_ram@i:
   823                           	opt stack 0
   824  00000C                     vscp_setGUID@data:
   825                           	opt stack 0
   826  00000C                     vscp_setManufacturerId@data:
   827                           	opt stack 0
   828  00000C                     vscp_writeNicknamePermanent@nickname:
   829                           	opt stack 0
   830  00000C                     doActionDisable@arg:
   831                           	opt stack 0
   832  00000C                     vscp_setUserID@data:
   833                           	opt stack 0
   834  00000C                     vscp_setSegmentCRC@crc:
   835                           	opt stack 0
   836  00000C                     vscp_setControlByte@ctrl:
   837                           	opt stack 0
   838  00000C                     vscp_goBootloaderMode@algorithm:
   839                           	opt stack 0
   840  00000C                     __ECANPointBuffer@pt:
   841                           	opt stack 0
   842                           
   843                           ; 2 bytes @ 0xB
   844  00000C                     	ds	1
   845  00000D                     ??_doActionDisable:
   846  00000D                     vscp_setGUID@idx:
   847                           	opt stack 0
   848  00000D                     vscp_setManufacturerId@idx:
   849                           	opt stack 0
   850  00000D                     vscp_setUserID@idx:
   851                           	opt stack 0
   852  00000D                     vscp_handleDropNickname@bytes:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0xC
   856  00000D                     	ds	1
   857  00000E                     doActionPulse@val:
   858                           	opt stack 0
   859  00000E                     __CANIDToRegs@type:
   860                           	opt stack 0
   861  00000E                     __RegsToCANID@Value:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0xD
   865  00000E                     	ds	1
   866  00000F                     ??__CANIDToRegs:
   867  00000F                     ?_ECANReceiveMessage:
   868                           	opt stack 0
   869  00000F                     doActionPulse@dmflags:
   870                           	opt stack 0
   871  00000F                     doActionDisable@val:
   872                           	opt stack 0
   873  00000F                     ECANReceiveMessage@data:
   874                           	opt stack 0
   875                           
   876                           ; 1 bytes @ 0xE
   877  00000F                     	ds	1
   878  000010                     doActionPulse@i:
   879                           	opt stack 0
   880  000010                     doActionDisable@dmflags:
   881                           	opt stack 0
   882  000010                     ECANReceiveMessage@dataLen:
   883                           	opt stack 0
   884                           
   885                           ; 1 bytes @ 0xF
   886  000010                     	ds	1
   887  000011                     doActionDisable@i:
   888                           	opt stack 0
   889  000011                     ECANReceiveMessage@msgFlags:
   890                           	opt stack 0
   891  000011                     __CANIDToRegs@Value:
   892                           	opt stack 0
   893  000011                     vscp_readStdReg@code:
   894                           	opt stack 0
   895                           
   896                           ; 4 bytes @ 0x10
   897  000011                     	ds	1
   898  000012                     ??_calculateSetFilterMask:
   899  000012                     ?_ECANSendMessage:
   900                           	opt stack 0
   901  000012                     ECANReceiveMessage@savedPtr:
   902                           	opt stack 0
   903  000012                     ECANSendMessage@id:
   904                           	opt stack 0
   905                           
   906                           ; 4 bytes @ 0x11
   907  000012                     	ds	2
   908  000014                     ECANReceiveMessage@id:
   909                           	opt stack 0
   910                           
   911                           ; 1 bytes @ 0x13
   912  000014                     	ds	1
   913  000015                     ECANReceiveMessage@i:
   914                           	opt stack 0
   915  000015                     vscp_readStdReg@code_1267:
   916                           	opt stack 0
   917                           
   918                           ; 4 bytes @ 0x14
   919  000015                     	ds	1
   920  000016                     ECANReceiveMessage@mode:
   921                           	opt stack 0
   922  000016                     ECANSendMessage@data:
   923                           	opt stack 0
   924                           
   925                           ; 2 bytes @ 0x15
   926  000016                     	ds	1
   927  000017                     ECANReceiveMessage@temp:
   928                           	opt stack 0
   929                           
   930                           ; 1 bytes @ 0x16
   931  000017                     	ds	1
   932  000018                     ECANSendMessage@dataLen:
   933                           	opt stack 0
   934  000018                     ECANReceiveMessage@ptr:
   935                           	opt stack 0
   936                           
   937                           ; 2 bytes @ 0x17
   938  000018                     	ds	1
   939  000019                     ECANSendMessage@msgFlags:
   940                           	opt stack 0
   941  000019                     vscp_readStdReg@idx:
   942                           	opt stack 0
   943                           
   944                           ; 1 bytes @ 0x18
   945  000019                     	ds	1
   946  00001A                     ??_ECANSendMessage:
   947  00001A                     ?_getCANFrame:
   948                           	opt stack 0
   949  00001A                     getCANFrame@pdlc:
   950                           	opt stack 0
   951  00001A                     vscp_readStdReg@idx_1268:
   952                           	opt stack 0
   953                           
   954                           ; 1 bytes @ 0x19
   955  00001A                     	ds	1
   956  00001B                     getCANFrame@pdata:
   957                           	opt stack 0
   958  00001B                     vscp_readStdReg@rv:
   959                           	opt stack 0
   960  00001B                     ECANSendMessage@pb:
   961                           	opt stack 0
   962                           
   963                           ; 18 bytes @ 0x1A
   964  00001B                     	ds	1
   965  00001C                     getCANFrame@pid:
   966                           	opt stack 0
   967  00001C                     vscp_readStdReg@reg:
   968                           	opt stack 0
   969                           
   970                           ; 1 bytes @ 0x1B
   971  00001C                     	ds	1
   972  00001D                     getCANFrame@flags:
   973                           	opt stack 0
   974  00001D                     vscp_readRegister@reg:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0x1C
   978  00001D                     	ds	1
   979  00001E                     ?_getVSCPFrame:
   980                           	opt stack 0
   981  00001E                     getVSCPFrame@pvscptype:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x1D
   985  00001E                     	ds	1
   986  00001F                     getVSCPFrame@pNodeId:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x1E
   990  00001F                     	ds	1
   991  000020                     getVSCPFrame@pPriority:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x1F
   995  000020                     	ds	1
   996  000021                     getVSCPFrame@pSize:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x20
  1000  000021                     	ds	1
  1001  000022                     getVSCPFrame@pData:
  1002                           	opt stack 0
  1003                           
  1004                           ; 1 bytes @ 0x21
  1005  000022                     	ds	1
  1006  000023                     ??_getVSCPFrame:
  1007                           
  1008                           ; 0 bytes @ 0x22
  1009  000023                     	ds	4
  1010  000027                     getVSCPFrame@pvscpclass:
  1011                           	opt stack 0
  1012                           
  1013                           ; 1 bytes @ 0x26
  1014  000027                     	ds	1
  1015  000028                     getVSCPFrame@id:
  1016                           	opt stack 0
  1017                           
  1018                           ; 4 bytes @ 0x27
  1019  000028                     	ds	4
  1020  00002C                     vscp_getEvent@rv:
  1021                           	opt stack 0
  1022                           
  1023                           ; 1 bytes @ 0x2B
  1024  00002C                     	ds	1
  1025  00002D                     ECANSendMessage@mode:
  1026                           	opt stack 0
  1027                           
  1028                           ; 1 bytes @ 0x2C
  1029  00002D                     	ds	1
  1030  00002E                     ECANSendMessage@buffers:
  1031                           	opt stack 0
  1032                           
  1033                           ; 1 bytes @ 0x2D
  1034  00002E                     	ds	1
  1035  00002F                     ECANSendMessage@j:
  1036                           	opt stack 0
  1037                           
  1038                           ; 1 bytes @ 0x2E
  1039  00002F                     	ds	1
  1040  000030                     ECANSendMessage@tempBSEL0:
  1041                           	opt stack 0
  1042                           
  1043                           ; 1 bytes @ 0x2F
  1044  000030                     	ds	1
  1045  000031                     ECANSendMessage@tempPtr:
  1046                           	opt stack 0
  1047  000031                     calculateSetFilterMask@rowmask:
  1048                           	opt stack 0
  1049                           
  1050                           ; 4 bytes @ 0x30
  1051  000031                     	ds	2
  1052  000033                     ECANSendMessage@temp:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0x32
  1056  000033                     	ds	1
  1057  000034                     ECANSendMessage@i:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x33
  1061  000034                     	ds	1
  1062  000035                     calculateSetFilterMask@lastOID:
  1063                           	opt stack 0
  1064  000035                     ECANSendMessage@ptr:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0x34
  1068  000035                     	ds	1
  1069  000036                     calculateSetFilterMask@mask:
  1070                           	opt stack 0
  1071                           
  1072                           ; 4 bytes @ 0x35
  1073  000036                     	ds	1
  1074  000037                     ?_sendCANFrame:
  1075                           	opt stack 0
  1076  000037                     sendCANFrame@id:
  1077                           	opt stack 0
  1078                           
  1079                           ; 4 bytes @ 0x36
  1080  000037                     	ds	3
  1081  00003A                     calculateSetFilterMask@filter:
  1082                           	opt stack 0
  1083                           
  1084                           ; 4 bytes @ 0x39
  1085  00003A                     	ds	1
  1086  00003B                     sendCANFrame@dlc:
  1087                           	opt stack 0
  1088                           
  1089                           ; 1 bytes @ 0x3A
  1090  00003B                     	ds	1
  1091  00003C                     sendCANFrame@pdata:
  1092                           	opt stack 0
  1093                           
  1094                           ; 2 bytes @ 0x3B
  1095  00003C                     	ds	2
  1096  00003E                     calculateSetFilterMask@rowfilter:
  1097                           	opt stack 0
  1098                           
  1099                           ; 4 bytes @ 0x3D
  1100  00003E                     	ds	1
  1101  00003F                     ?_sendVSCPFrame:
  1102                           	opt stack 0
  1103  00003F                     sendVSCPFrame@vscpclass:
  1104                           	opt stack 0
  1105                           
  1106                           ; 2 bytes @ 0x3E
  1107  00003F                     	ds	2
  1108  000041                     sendVSCPFrame@vscptype:
  1109                           	opt stack 0
  1110                           
  1111                           ; 1 bytes @ 0x40
  1112  000041                     	ds	1
  1113  000042                     sendVSCPFrame@nodeid:
  1114                           	opt stack 0
  1115  000042                     calculateSetFilterMask@j:
  1116                           	opt stack 0
  1117                           
  1118                           ; 1 bytes @ 0x41
  1119  000042                     	ds	1
  1120  000043                     sendVSCPFrame@priority:
  1121                           	opt stack 0
  1122  000043                     calculateSetFilterMask@i:
  1123                           	opt stack 0
  1124                           
  1125                           ; 1 bytes @ 0x42
  1126  000043                     	ds	1
  1127  000044                     ??_init_app_eeprom:
  1128  000044                     sendVSCPFrame@size:
  1129                           	opt stack 0
  1130                           
  1131                           ; 1 bytes @ 0x43
  1132  000044                     	ds	1
  1133  000045                     sendVSCPFrame@pData:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0x44
  1137  000045                     	ds	1
  1138  000046                     init_app_eeprom@i:
  1139                           	opt stack 0
  1140                           
  1141                           ; 1 bytes @ 0x45
  1142  000046                     	ds	1
  1143  000047                     init_app_eeprom@j:
  1144                           	opt stack 0
  1145  000047                     sendVSCPFrame@id:
  1146                           	opt stack 0
  1147                           
  1148                           ; 4 bytes @ 0x46
  1149  000047                     	ds	1
  1150  000048                     ?_vscp_writeStdReg:
  1151                           	opt stack 0
  1152  000048                     vscp_writeStdReg@value:
  1153                           	opt stack 0
  1154                           
  1155                           ; 1 bytes @ 0x47
  1156  000048                     	ds	1
  1157  000049                     ??_vscp_writeStdReg:
  1158                           
  1159                           ; 0 bytes @ 0x48
  1160  000049                     	ds	2
  1161  00004B                     ??_SendInformationEvent:
  1162  00004B                     
  1163                           ; 0 bytes @ 0x4A
  1164  00004B                     	ds	1
  1165  00004C                     ??_vscp_newNodeOnline:
  1166  00004C                     vscp_sendHeartBeat@zone:
  1167                           	opt stack 0
  1168                           
  1169                           ; 1 bytes @ 0x4B
  1170  00004C                     	ds	1
  1171  00004D                     ??_vscp_doOneSecondWork:
  1172  00004D                     vscp_writeStdReg@rv:
  1173                           	opt stack 0
  1174  00004D                     SendInformationEvent@data:
  1175                           	opt stack 0
  1176                           
  1177                           ; 3 bytes @ 0x4C
  1178  00004D                     	ds	1
  1179  00004E                     vscp_writeStdReg@reg:
  1180                           	opt stack 0
  1181                           
  1182                           ; 1 bytes @ 0x4D
  1183  00004E                     	ds	2
  1184  000050                     SendInformationEvent@idx:
  1185                           	opt stack 0
  1186                           
  1187                           ; 1 bytes @ 0x4F
  1188  000050                     	ds	1
  1189  000051                     ?_doActionOff:
  1190                           	opt stack 0
  1191  000051                     ?_doActionOn:
  1192                           	opt stack 0
  1193  000051                     ?_doActionStatus:
  1194                           	opt stack 0
  1195  000051                     ?_doActionToggle:
  1196                           	opt stack 0
  1197  000051                     ?_vscp_writeAppReg:
  1198                           	opt stack 0
  1199  000051                     vscp_writeAppReg@val:
  1200                           	opt stack 0
  1201  000051                     doActionOn@arg:
  1202                           	opt stack 0
  1203  000051                     doActionOff@arg:
  1204                           	opt stack 0
  1205  000051                     doActionStatus@arg:
  1206                           	opt stack 0
  1207  000051                     doActionToggle@arg:
  1208                           	opt stack 0
  1209                           
  1210                           ; 1 bytes @ 0x50
  1211  000051                     	ds	1
  1212  000052                     tblptru	equ	0xFF8
  1213                           tblptrh	equ	0xFF7
  1214                           tblptrl	equ	0xFF6
  1215                           tablat	equ	0xFF5
  1216                           prodh	equ	0xFF4
  1217                           prodl	equ	0xFF3
  1218                           intcon	equ	0xFF2
  1219                           postinc0	equ	0xFEE
  1220                           wreg	equ	0xFE8
  1221                           indf1	equ	0xFE7
  1222                           fsr1h	equ	0xFE2
  1223                           fsr1l	equ	0xFE1
  1224                           indf2	equ	0xFDF
  1225                           postinc2	equ	0xFDE
  1226                           postdec2	equ	0xFDD
  1227                           plusw2	equ	0xFDB
  1228                           fsr2h	equ	0xFDA
  1229                           fsr2l	equ	0xFD9
  1230                           status	equ	0xFD8
  1231                           
  1232                           ; 0 bytes @ 0x51
  1233 ;;
  1234 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1235 ;;
  1236 ;; *************** function _main *****************
  1237 ;; Defined at:
  1238 ;;		line 188 in file "../main.c"
  1239 ;; Parameters:    Size  Location     Type
  1240 ;;		None
  1241 ;; Auto vars:     Size  Location     Type
  1242 ;;		None
  1243 ;; Return value:  Size  Location     Type
  1244 ;;		None               void
  1245 ;; Registers used:
  1246 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1247 ;; Tracked objects:
  1248 ;;		On entry : 0/0
  1249 ;;		On exit  : F/0
  1250 ;;		Unchanged: 0/0
  1251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1252 ;;      Params:         0       0       0       0       0       0       0
  1253 ;;      Locals:         0       0       0       0       0       0       0
  1254 ;;      Temps:          0       0       0       0       0       0       0
  1255 ;;      Totals:         0       0       0       0       0       0       0
  1256 ;;Total ram usage:        0 bytes
  1257 ;; Hardware stack levels required when called:   10
  1258 ;; This function calls:
  1259 ;;		_init
  1260 ;;		_vscp_check_pstorage
  1261 ;;		_init_app_eeprom
  1262 ;;		_init_app_ram
  1263 ;;		_vscp_init
  1264 ;;		_Busy_eep
  1265 ;;		_Write_b_eep
  1266 ;;		_vscp_getEvent
  1267 ;;		_vscp_goActiveState
  1268 ;;		_vscp_handleProbeState
  1269 ;;		_vscp_handleProtocolEvent
  1270 ;;		_doDM
  1271 ;;		_vscp_error
  1272 ;;		_vscp_doOneSecondWork
  1273 ;;		_doApplicationOneSecondWork
  1274 ;;		_doWork
  1275 ;; This function is called by:
  1276 ;;		Startup code after reset
  1277 ;; This function uses a non-reentrant model
  1278 ;;
  1279                           
  1280                           	psect	text0
  1281  0032FA                     __ptext0:
  1282                           	opt stack 0
  1283  0032FA                     _main:
  1284                           	opt stack 21
  1285                           
  1286                           ;main.c: 189: init();
  1287                           
  1288                           ;incstack = 0
  1289                           ;incstack = 0
  1290  0032FA  ECB0  F01C         	call	_init	;wreg free
  1291                           
  1292                           ;main.c: 193: if ( !vscp_check_pstorage() ) {
  1293  0032FE  ECCB  F01D         	call	_vscp_check_pstorage	;wreg free
  1294  003302  0900               	iorlw	0
  1295  003304  E104               	bnz	l9967
  1296                           
  1297                           ;main.c: 196: init_app_eeprom();
  1298  003306  EC7F  F00A         	call	_init_app_eeprom	;wreg free
  1299                           
  1300                           ;main.c: 197: init_app_ram();
  1301  00330A  EC86  F018         	call	_init_app_ram	;wreg free
  1302  00330E                     l9967:
  1303                           
  1304                           ;main.c: 200: }
  1305                           ;main.c: 202: vscp_init();
  1306  00330E  EC6F  F01C         	call	_vscp_init	;wreg free
  1307  003312                     l151:
  1308                           
  1309                           ; BSR set to: 0
  1310  003312  0004               	clrwdt		;# 
  1311                           
  1312                           ;main.c: 208: if ( ( vscp_initbtncnt > 250 ) &&
  1313                           ;main.c: 209: ( 0x01 != vscp_node_state ) ) {
  1314  003314  0EFA               	movlw	250
  1315  003316  0100               	movlb	0	; () banked
  1316  003318  658F               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1317  00331A  D00E               	goto	l9981
  1318                           
  1319                           ; BSR set to: 0
  1320  00331C  0592               	decf	_vscp_node_state& (0+255),w,b
  1321  00331E  E00C               	bz	l9981
  1322                           
  1323                           ; BSR set to: 0
  1324                           ;main.c: 212: vscp_nickname = 0xff;
  1325  003320  6991               	setf	_vscp_nickname& (0+255),b
  1326                           
  1327                           ; BSR set to: 0
  1328                           ;main.c: 213: (Busy_eep(), Write_b_eep(0x01,0xff));
  1329  003322  ECEA  F01E         	call	_Busy_eep	;wreg free
  1330  003326  6A09               	clrf	?_Write_b_eep+1,c
  1331  003328  0E01               	movlw	1
  1332  00332A  6E08               	movwf	?_Write_b_eep,c
  1333  00332C  0EFF               	movlw	255
  1334  00332E  680A               	setf	?_Write_b_eep+2,c
  1335  003330  ECCF  F01C         	call	_Write_b_eep	;wreg free
  1336                           
  1337                           ;main.c: 214: vscp_init();
  1338  003334  EC6F  F01C         	call	_vscp_init	;wreg free
  1339  003338                     l9981:
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;main.c: 216: }
  1343                           ;main.c: 219: vscp_imsg.flags = 0;
  1344  003338  6B96               	clrf	_vscp_imsg& (0+255),b
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;main.c: 220: vscp_getEvent();
  1348  00333A  EC44  F01D         	call	_vscp_getEvent	;wreg free
  1349                           
  1350                           ;main.c: 222: switch ( vscp_node_state ) {
  1351  00333E  D01C               	goto	l10005
  1352  003340                     l9985:
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;main.c: 227: if (0xff == vscp_nickname) {
  1356  003340  2991               	incf	_vscp_nickname& (0+255),w,b
  1357  003342  E103               	bnz	l9989
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;main.c: 229: vscp_node_state = 0x01;
  1361  003344  0E01               	movlw	1
  1362  003346  6F92               	movwf	_vscp_node_state& (0+255),b
  1363                           
  1364                           ;main.c: 230: } else {
  1365  003348  D023               	goto	l10007
  1366  00334A                     l9989:
  1367                           
  1368                           ; BSR set to: 0
  1369                           ;main.c: 232: vscp_node_state = 0x03;
  1370  00334A  0E03               	movlw	3
  1371  00334C  6F92               	movwf	_vscp_node_state& (0+255),b
  1372  00334E                     l9991:
  1373                           
  1374                           ; BSR set to: 0
  1375                           ;main.c: 233: vscp_goActiveState();
  1376  00334E  EC0F  F01E         	call	_vscp_goActiveState	;wreg free
  1377  003352  D01E               	goto	l10007
  1378  003354                     l9993:
  1379                           
  1380                           ; BSR set to: 0
  1381                           ;main.c: 238: vscp_handleProbeState();
  1382  003354  ECEE  F019         	call	_vscp_handleProbeState	;wreg free
  1383                           
  1384                           ;main.c: 239: break;
  1385  003358  D01B               	goto	l10007
  1386  00335A                     l160:
  1387                           
  1388                           ; BSR set to: 0
  1389                           ;main.c: 248: if (vscp_imsg.flags & 0x80) {
  1390  00335A  AF96               	btfss	_vscp_imsg& (0+255),7,b
  1391  00335C  D019               	goto	l10007
  1392                           
  1393                           ; BSR set to: 0
  1394                           ;main.c: 250: if ( 0 == vscp_imsg.vscp_class ) {
  1395  00335E  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  1396  003360  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1397  003362  B4D8               	btfsc	status,2,c
  1398                           
  1399                           ; BSR set to: 0
  1400                           ;main.c: 253: vscp_handleProtocolEvent();
  1401  003364  EC73  F007         	call	_vscp_handleProtocolEvent	;wreg free
  1402                           
  1403                           ;main.c: 255: }
  1404                           ;main.c: 257: doDM();
  1405  003368  EC1D  F012         	call	_doDM	;wreg free
  1406  00336C  D011               	goto	l10007
  1407  00336E                     l10001:
  1408                           
  1409                           ; BSR set to: 0
  1410                           ;main.c: 263: vscp_error();
  1411  00336E  ECED  F01E         	call	_vscp_error	;wreg free
  1412                           
  1413                           ;main.c: 264: break;
  1414  003372  D00E               	goto	l10007
  1415  003374                     l164:
  1416                           
  1417                           ; BSR set to: 0
  1418                           ;main.c: 267: vscp_node_state = 0x00;
  1419  003374  6B92               	clrf	_vscp_node_state& (0+255),b
  1420                           
  1421                           ;main.c: 268: break;
  1422  003376  D00C               	goto	l10007
  1423  003378                     l10005:
  1424  003378  0100               	movlb	0	; () banked
  1425  00337A  5192               	movf	_vscp_node_state& (0+255),w,b
  1426                           
  1427                           ; Switch size 1, requested type "space"
  1428                           ; Number of cases is 5, Range of values is 0 to 4
  1429                           ; switch strategies available:
  1430                           ; Name         Instructions Cycles
  1431                           ; simple_byte           16     9 (average)
  1432                           ;	Chosen strategy is simple_byte
  1433  00337C  E0E1               	bz	l9985
  1434  00337E  0A01               	xorlw	1	; case 1
  1435  003380  E0E9               	bz	l9993
  1436  003382  0A03               	xorlw	3	; case 2
  1437  003384  E0E4               	bz	l9991
  1438  003386  0A01               	xorlw	1	; case 3
  1439  003388  E0E8               	bz	l160
  1440  00338A  0A07               	xorlw	7	; case 4
  1441  00338C  E0F0               	bz	l10001
  1442  00338E  D7F2               	goto	l164
  1443  003390                     l10007:
  1444                           
  1445                           ;main.c: 273: if ( measurement_clock > 1000 ) {
  1446  003390  0EE9               	movlw	233
  1447  003392  0100               	movlb	0	; () banked
  1448  003394  5D80               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1449  003396  0E03               	movlw	3
  1450  003398  5981               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1451  00339A  0E00               	movlw	0
  1452  00339C  5982               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1453  00339E  0E00               	movlw	0
  1454  0033A0  5983               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1455  0033A2  E30B               	bnc	l10017
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;main.c: 275: measurement_clock = 0;
  1459  0033A4  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
  1460  0033A6  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1461  0033A8  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1462  0033AA  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1463                           
  1464                           ; BSR set to: 0
  1465                           ;main.c: 278: vscp_doOneSecondWork();
  1466  0033AC  EC48  F01C         	call	_vscp_doOneSecondWork	;wreg free
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;main.c: 282: if ( 0x03 == vscp_node_state ) {
  1470  0033B0  5192               	movf	_vscp_node_state& (0+255),w,b
  1471  0033B2  0A03               	xorlw	3
  1472  0033B4  B4D8               	btfsc	status,2,c
  1473                           
  1474                           ; BSR set to: 0
  1475                           ;main.c: 285: doApplicationOneSecondWork();
  1476  0033B6  EC7F  F00E         	call	_doApplicationOneSecondWork	;wreg free
  1477  0033BA                     l10017:
  1478                           
  1479                           ; BSR set to: 0
  1480                           ;main.c: 287: }
  1481                           ;main.c: 289: }
  1482                           ;main.c: 292: if ( seconds > 59 ) {
  1483  0033BA  0E3B               	movlw	59
  1484  0033BC  658B               	cpfsgt	_seconds& (0+255),b
  1485  0033BE  D00B               	goto	l10033
  1486                           
  1487                           ; BSR set to: 0
  1488                           ;main.c: 294: seconds = 0;
  1489  0033C0  6B8B               	clrf	_seconds& (0+255),b
  1490                           
  1491                           ; BSR set to: 0
  1492                           ;main.c: 295: minutes++;
  1493  0033C2  2B89               	incf	_minutes& (0+255),f,b
  1494                           
  1495                           ; BSR set to: 0
  1496                           ;main.c: 297: if ( minutes > 59 ) {
  1497  0033C4  0E3B               	movlw	59
  1498  0033C6  6589               	cpfsgt	_minutes& (0+255),b
  1499  0033C8  D002               	goto	l10029
  1500                           
  1501                           ; BSR set to: 0
  1502                           ;main.c: 298: minutes = 0;
  1503  0033CA  6B89               	clrf	_minutes& (0+255),b
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;main.c: 299: hours++;
  1507  0033CC  2B88               	incf	_hours& (0+255),f,b
  1508  0033CE                     l10029:
  1509                           
  1510                           ; BSR set to: 0
  1511                           ;main.c: 300: }
  1512                           ;main.c: 302: if ( hours > 23 ) hours = 0;
  1513  0033CE  0E17               	movlw	23
  1514  0033D0  6588               	cpfsgt	_hours& (0+255),b
  1515  0033D2  D001               	goto	l10033
  1516                           
  1517                           ; BSR set to: 0
  1518  0033D4  6B88               	clrf	_hours& (0+255),b
  1519  0033D6                     l10033:
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;main.c: 304: }
  1523                           ;main.c: 306: doWork();
  1524  0033D6  ECEF  F01E         	call	_doWork	;wreg free
  1525  0033DA  D79B               	goto	l151
  1526  0033DC                     __end_of_main:
  1527                           	opt stack 0
  1528                           tblptru	equ	0xFF8
  1529                           tblptrh	equ	0xFF7
  1530                           tblptrl	equ	0xFF6
  1531                           tablat	equ	0xFF5
  1532                           prodh	equ	0xFF4
  1533                           prodl	equ	0xFF3
  1534                           intcon	equ	0xFF2
  1535                           postinc0	equ	0xFEE
  1536                           wreg	equ	0xFE8
  1537                           indf1	equ	0xFE7
  1538                           fsr1h	equ	0xFE2
  1539                           fsr1l	equ	0xFE1
  1540                           indf2	equ	0xFDF
  1541                           postinc2	equ	0xFDE
  1542                           postdec2	equ	0xFDD
  1543                           plusw2	equ	0xFDB
  1544                           fsr2h	equ	0xFDA
  1545                           fsr2l	equ	0xFD9
  1546                           status	equ	0xFD8
  1547                           
  1548 ;; *************** function _doWork *****************
  1549 ;; Defined at:
  1550 ;;		line 885 in file "../main.c"
  1551 ;; Parameters:    Size  Location     Type
  1552 ;;		None
  1553 ;; Auto vars:     Size  Location     Type
  1554 ;;		None
  1555 ;; Return value:  Size  Location     Type
  1556 ;;		None               void
  1557 ;; Registers used:
  1558 ;;		wreg, status,2, status,0
  1559 ;; Tracked objects:
  1560 ;;		On entry : F/0
  1561 ;;		On exit  : F/0
  1562 ;;		Unchanged: F/0
  1563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1564 ;;      Params:         0       0       0       0       0       0       0
  1565 ;;      Locals:         0       0       0       0       0       0       0
  1566 ;;      Temps:          0       0       0       0       0       0       0
  1567 ;;      Totals:         0       0       0       0       0       0       0
  1568 ;;Total ram usage:        0 bytes
  1569 ;; Hardware stack levels used:    1
  1570 ;; Hardware stack levels required when called:    2
  1571 ;; This function calls:
  1572 ;;		Nothing
  1573 ;; This function is called by:
  1574 ;;		_main
  1575 ;; This function uses a non-reentrant model
  1576 ;;
  1577                           
  1578                           	psect	text1
  1579  003DDE                     __ptext1:
  1580                           	opt stack 0
  1581  003DDE                     _doWork:
  1582                           	opt stack 28
  1583                           
  1584                           ; BSR set to: 0
  1585                           
  1586                           ; BSR set to: 0
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;incstack = 0
  1590                           ;incstack = 0
  1591  003DDE  0012               	return	
  1592  003DE0                     __end_of_doWork:
  1593                           	opt stack 0
  1594                           tblptru	equ	0xFF8
  1595                           tblptrh	equ	0xFF7
  1596                           tblptrl	equ	0xFF6
  1597                           tablat	equ	0xFF5
  1598                           prodh	equ	0xFF4
  1599                           prodl	equ	0xFF3
  1600                           intcon	equ	0xFF2
  1601                           postinc0	equ	0xFEE
  1602                           wreg	equ	0xFE8
  1603                           indf1	equ	0xFE7
  1604                           fsr1h	equ	0xFE2
  1605                           fsr1l	equ	0xFE1
  1606                           indf2	equ	0xFDF
  1607                           postinc2	equ	0xFDE
  1608                           postdec2	equ	0xFDD
  1609                           plusw2	equ	0xFDB
  1610                           fsr2h	equ	0xFDA
  1611                           fsr2l	equ	0xFD9
  1612                           status	equ	0xFD8
  1613                           
  1614 ;; *************** function _doApplicationOneSecondWork *****************
  1615 ;; Defined at:
  1616 ;;		line 590 in file "../main.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;		None
  1619 ;; Auto vars:     Size  Location     Type
  1620 ;;  i               1   32[BANK0 ] unsigned char 
  1621 ;;  ctrlreg         1   31[BANK0 ] unsigned char 
  1622 ;;  bOn             1   30[BANK0 ] enum E15660
  1623 ;; Return value:  Size  Location     Type
  1624 ;;		None               void
  1625 ;; Registers used:
  1626 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1627 ;; Tracked objects:
  1628 ;;		On entry : F/0
  1629 ;;		On exit  : F/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1632 ;;      Params:         0       0       0       0       0       0       0
  1633 ;;      Locals:         0       3       0       0       0       0       0
  1634 ;;      Temps:          0       3       0       0       0       0       0
  1635 ;;      Totals:         0       6       0       0       0       0       0
  1636 ;;Total ram usage:        6 bytes
  1637 ;; Hardware stack levels used:    1
  1638 ;; Hardware stack levels required when called:    8
  1639 ;; This function calls:
  1640 ;;		_Read_b_eep
  1641 ;;		_doActionOff
  1642 ;;		_SendInformationEvent
  1643 ;; This function is called by:
  1644 ;;		_main
  1645 ;; This function uses a non-reentrant model
  1646 ;;
  1647                           
  1648                           	psect	text2
  1649  001CFE                     __ptext2:
  1650                           	opt stack 0
  1651  001CFE                     _doApplicationOneSecondWork:
  1652                           	opt stack 22
  1653                           
  1654                           ; BSR set to: 0
  1655                           ;main.c: 592: uint8_t i;
  1656                           ;main.c: 593: uint8_t ctrlreg;
  1657                           ;main.c: 594: BOOL bOn = 0;
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;incstack = 0
  1661                           ;incstack = 0
  1662  001CFE  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1663                           
  1664                           ;main.c: 596: for ( i = 0; i < 8; i++ ) {
  1665  001D00  6BD1               	clrf	doApplicationOneSecondWork@i& (0+255),b
  1666  001D02                     l10525:
  1667                           
  1668                           ; BSR set to: 0
  1669  001D02  0E07               	movlw	7
  1670  001D04  65D1               	cpfsgt	doApplicationOneSecondWork@i& (0+255),b
  1671  001D06  D001               	goto	l10529
  1672  001D08  D11F               	goto	l236
  1673  001D0A                     l10529:
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;main.c: 599: ctrlreg = Read_b_eep(0x43 + 10 + i);
  1677  001D0A  D92D               	call	PL32	;call to abstracted procedure
  1678  001D0C  ECB6  F01E         	call	_Read_b_eep	;wreg free
  1679  001D10  0100               	movlb	0	; () banked
  1680  001D12  6FD0               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;main.c: 602: if ( !( ctrlreg & 0x80 ) ) continue;
  1684  001D14  AFD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  1685  001D16  D116               	goto	l10613
  1686                           
  1687                           ; BSR set to: 0
  1688                           ;main.c: 606: if ( relay_protection_timer[ i ] ) {
  1689                           
  1690                           ; BSR set to: 0
  1691  001D18  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1692  001D1A  0D02               	mullw	2
  1693  001D1C  50F3               	movf	prodl,w,c
  1694  001D1E  0F60               	addlw	low _relay_protection_timer
  1695  001D20  6ED9               	movwf	fsr2l,c
  1696  001D22  6ADA               	clrf	fsr2h,c
  1697  001D24  50DE               	movf	postinc2,w,c
  1698  001D26  10DD               	iorwf	postdec2,w,c
  1699  001D28  E028               	bz	l10547
  1700                           
  1701                           ; BSR set to: 0
  1702                           ;main.c: 608: relay_protection_timer[ i ]--;
  1703  001D2A  D916               	call	PL22	;call to abstracted procedure
  1704  001D2C  06DE               	decf	postinc2,f,c
  1705  001D2E  0E00               	movlw	0
  1706  001D30  5ADD               	subwfb	postdec2,f,c
  1707                           
  1708                           ;main.c: 611: if ( !relay_protection_timer[ i ] &&
  1709                           ;main.c: 612: ( Read_b_eep(0x43 + 10 + i) &
  1710                           ;main.c: 613: 0x04 ) ) {
  1711  001D32  D912               	call	PL22	;call to abstracted procedure
  1712  001D34  50DE               	movf	postinc2,w,c
  1713  001D36  10DD               	iorwf	postdec2,w,c
  1714  001D38  E13C               	bnz	l10549
  1715                           
  1716                           ; BSR set to: 0
  1717  001D3A  D915               	call	PL32	;call to abstracted procedure
  1718  001D3C  ECB6  F01E         	call	_Read_b_eep	;wreg free
  1719  001D40  0100               	movlb	0	; () banked
  1720  001D42  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1721  001D44  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1722  001D46  D035               	goto	l10549
  1723                           
  1724                           ; BSR set to: 0
  1725                           ;main.c: 616: doActionOff( 0, (1 << i) );
  1726  001D48  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1727  001D4C  0E01               	movlw	1
  1728  001D4E  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1729  001D50  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1730  001D52  D002               	goto	u12364
  1731  001D54                     u12365:
  1732  001D54  90D8               	bcf	status,0,c
  1733  001D56  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1734  001D58                     u12364:
  1735  001D58  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1736  001D5A  D7FC               	goto	u12365
  1737  001D5C  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1738  001D5E  6E51               	movwf	?_doActionOff,c
  1739  001D60  0E00               	movlw	0
  1740  001D62  EC09  F019         	call	_doActionOff
  1741                           
  1742                           ; BSR set to: 0
  1743                           ;main.c: 619: if ( ctrlreg & 0x02 ) {
  1744  001D66  A3D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  1745  001D68  D024               	goto	l10549
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;main.c: 620: SendInformationEvent( i, 1,
  1749                           ;main.c: 621: 2 );
  1750  001D6A  0E01               	movlw	1
  1751  001D6C  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1752  001D6E  0E02               	movlw	2
  1753  001D70  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1754  001D72  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1755  001D74  EC12  F01C         	call	_SendInformationEvent
  1756  001D78  D01C               	goto	l10549
  1757  001D7A                     l10547:
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;main.c: 626: else {
  1761                           ;main.c: 628: relay_protection_timer[ i ] =
  1762                           ;main.c: 629: Read_b_eep(0x43 + 34 + i) * 256 +
  1763                           ;main.c: 630: Read_b_eep(0x43 + 35 + i);
  1764  001D7A  0E65               	movlw	101
  1765  001D7C  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1766  001D7E  6E08               	movwf	?_Read_b_eep,c
  1767  001D80  6A09               	clrf	?_Read_b_eep+1,c
  1768  001D82  0E00               	movlw	0
  1769  001D84  2209               	addwfc	?_Read_b_eep+1,f,c
  1770  001D86  ECB6  F01E         	call	_Read_b_eep	;wreg free
  1771  001D8A  0100               	movlb	0	; () banked
  1772  001D8C  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1773  001D8E  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1774  001D90  0E66               	movlw	102
  1775  001D92  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1776  001D94  6E08               	movwf	?_Read_b_eep,c
  1777  001D96  6A09               	clrf	?_Read_b_eep+1,c
  1778  001D98  0E00               	movlw	0
  1779  001D9A  2209               	addwfc	?_Read_b_eep+1,f,c
  1780  001D9C  ECB6  F01E         	call	_Read_b_eep	;wreg free
  1781  001DA0  0100               	movlb	0	; () banked
  1782  001DA2  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1783  001DA4  0E00               	movlw	0
  1784  001DA6  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1785  001DA8  D8D7               	call	PL22	;call to abstracted procedure
  1786  001DAA  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1787  001DAE  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1788  001DB2                     l10549:
  1789                           
  1790                           ; BSR set to: 0
  1791                           ;main.c: 631: }
  1792                           ;main.c: 634: if ( relay_pulse_flags & (1 << i) ) {
  1793  001DB2  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1794  001DB6  0E01               	movlw	1
  1795  001DB8  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1796  001DBA  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1797  001DBC  D002               	goto	u12384
  1798  001DBE                     u12385:
  1799  001DBE  90D8               	bcf	status,0,c
  1800  001DC0  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1801  001DC2                     u12384:
  1802  001DC2  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1803  001DC4  D7FC               	goto	u12385
  1804  001DC6  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1805  001DC8  158A               	andwf	_relay_pulse_flags& (0+255),w,b
  1806  001DCA  E101 D0BB          	bz	l10613
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;main.c: 636: if ( relay_pulse_timer[ i ] ) {
  1810  001DCE  D8BD               	call	PL20	;call to abstracted procedure
  1811  001DD0  50DE               	movf	postinc2,w,c
  1812  001DD2  10DD               	iorwf	postdec2,w,c
  1813  001DD4  E101 D0A5          	bz	l10611
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;main.c: 638: relay_pulse_timer[ i ]--;
  1817  001DD8  D8B8               	call	PL20	;call to abstracted procedure
  1818  001DDA  06DE               	decf	postinc2,f,c
  1819  001DDC  0E00               	movlw	0
  1820  001DDE  5ADD               	subwfb	postdec2,f,c
  1821                           
  1822                           ;main.c: 641: if ( !relay_pulse_timer[ i ] ) {
  1823  001DE0  D8B4               	call	PL20	;call to abstracted procedure
  1824  001DE2  50DE               	movf	postinc2,w,c
  1825  001DE4  10DD               	iorwf	postdec2,w,c
  1826  001DE6  E02E               	bz	l10587
  1827  001DE8  D0AD               	goto	l10613
  1828  001DEA                     l206:
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;main.c: 646: if ( LATBbits.LATB4 ) {
  1832  001DEA  A88A               	btfss	3978,4,c	;volatile
  1833  001DEC  D002               	goto	l207
  1834                           
  1835                           ; BSR set to: 0
  1836                           ;main.c: 647: LATBbits.LATB4 = 0;
  1837  001DEE  988A               	bcf	3978,4,c	;volatile
  1838  001DF0  D025               	goto	L6
  1839  001DF2                     l207:
  1840                           
  1841                           ; BSR set to: 0
  1842                           ;main.c: 650: LATBbits.LATB4 = 1;
  1843  001DF2  888A               	bsf	3978,4,c	;volatile
  1844  001DF4                     l10559:
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;main.c: 651: bOn = 1;
  1848  001DF4  0E01               	movlw	1
  1849  001DF6  6FCF               	movwf	doApplicationOneSecondWork@bOn& (0+255),b
  1850  001DF8  D033               	goto	l10589
  1851  001DFA                     l210:
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;main.c: 656: if ( LATBbits.LATB1 ) {
  1855  001DFA  A28A               	btfss	3978,1,c	;volatile
  1856  001DFC  D002               	goto	l211
  1857                           
  1858                           ; BSR set to: 0
  1859                           ;main.c: 657: LATBbits.LATB1 = 0;
  1860  001DFE  928A               	bcf	3978,1,c	;volatile
  1861  001E00  D01D               	goto	L6
  1862  001E02                     l211:
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;main.c: 660: LATBbits.LATB1 = 1;
  1866  001E02  828A               	bsf	3978,1,c	;volatile
  1867  001E04  D7F7               	goto	l10559
  1868  001E06                     l213:
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;main.c: 666: if ( LATBbits.LATB0 ) {
  1872  001E06  A08A               	btfss	3978,0,c	;volatile
  1873  001E08  D002               	goto	l214
  1874                           
  1875                           ; BSR set to: 0
  1876                           ;main.c: 667: LATBbits.LATB0 = 0;
  1877  001E0A  908A               	bcf	3978,0,c	;volatile
  1878  001E0C  D017               	goto	L6
  1879  001E0E                     l214:
  1880                           
  1881                           ; BSR set to: 0
  1882                           ;main.c: 670: LATBbits.LATB0 = 1;
  1883  001E0E  808A               	bsf	3978,0,c	;volatile
  1884  001E10  D7F1               	goto	l10559
  1885  001E12                     l216:
  1886                           
  1887                           ; BSR set to: 0
  1888                           ;main.c: 676: if ( LATCbits.LATC7 ) {
  1889  001E12  AE8B               	btfss	3979,7,c	;volatile
  1890  001E14  D002               	goto	l217
  1891                           
  1892                           ; BSR set to: 0
  1893                           ;main.c: 677: LATCbits.LATC7 = 0;
  1894  001E16  9E8B               	bcf	3979,7,c	;volatile
  1895  001E18  D011               	goto	L6
  1896  001E1A                     l217:
  1897                           
  1898                           ; BSR set to: 0
  1899                           ;main.c: 680: LATCbits.LATC7 = 1;
  1900  001E1A  8E8B               	bsf	3979,7,c	;volatile
  1901  001E1C  D7EB               	goto	l10559
  1902  001E1E                     l219:
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;main.c: 686: if ( LATCbits.LATC6 ) {
  1906  001E1E  AC8B               	btfss	3979,6,c	;volatile
  1907  001E20  D002               	goto	l220
  1908                           
  1909                           ; BSR set to: 0
  1910                           ;main.c: 687: LATCbits.LATC6 = 0;
  1911  001E22  9C8B               	bcf	3979,6,c	;volatile
  1912  001E24  D00B               	goto	L6
  1913  001E26                     l220:
  1914                           
  1915                           ; BSR set to: 0
  1916                           ;main.c: 690: LATCbits.LATC6 = 1;
  1917  001E26  8C8B               	bsf	3979,6,c	;volatile
  1918  001E28  D7E5               	goto	l10559
  1919  001E2A                     l222:
  1920                           
  1921                           ; BSR set to: 0
  1922                           ;main.c: 696: if ( LATCbits.LATC5 ) {
  1923  001E2A  AA8B               	btfss	3979,5,c	;volatile
  1924  001E2C  D002               	goto	l223
  1925                           
  1926                           ; BSR set to: 0
  1927                           ;main.c: 697: LATCbits.LATC5 = 0;
  1928  001E2E  9A8B               	bcf	3979,5,c	;volatile
  1929  001E30  D005               	goto	L6
  1930  001E32                     l223:
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;main.c: 700: LATCbits.LATC5 = 1;
  1934  001E32  8A8B               	bsf	3979,5,c	;volatile
  1935  001E34  D7DF               	goto	l10559
  1936  001E36                     l225:
  1937                           
  1938                           ; BSR set to: 0
  1939                           ;main.c: 706: if ( LATCbits.LATC4 ) {
  1940  001E36  A88B               	btfss	3979,4,c	;volatile
  1941  001E38  D003               	goto	l226
  1942                           
  1943                           ; BSR set to: 0
  1944                           ;main.c: 707: LATCbits.LATC4 = 0;
  1945  001E3A  988B               	bcf	3979,4,c	;volatile
  1946  001E3C                     L6:
  1947                           
  1948                           ;main.c: 708: bOn = 0;
  1949  001E3C  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1950                           
  1951                           ;main.c: 709: } else {
  1952  001E3E  D010               	goto	l10589
  1953  001E40                     l226:
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;main.c: 710: LATCbits.LATC4 = 1;
  1957  001E40  888B               	bsf	3979,4,c	;volatile
  1958  001E42  D7D8               	goto	l10559
  1959  001E44                     l10587:
  1960                           
  1961                           ; BSR set to: 0
  1962  001E44  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1963                           
  1964                           ; Switch size 1, requested type "space"
  1965                           ; Number of cases is 7, Range of values is 0 to 6
  1966                           ; switch strategies available:
  1967                           ; Name         Instructions Cycles
  1968                           ; simple_byte           22    12 (average)
  1969                           ;	Chosen strategy is simple_byte
  1970  001E46  E0D1               	bz	l206
  1971  001E48  0A01               	xorlw	1	; case 1
  1972  001E4A  E0D7               	bz	l210
  1973  001E4C  0A03               	xorlw	3	; case 2
  1974  001E4E  E0DB               	bz	l213
  1975  001E50  0A01               	xorlw	1	; case 3
  1976  001E52  E0DF               	bz	l216
  1977  001E54  0A07               	xorlw	7	; case 4
  1978  001E56  E0E3               	bz	l219
  1979  001E58  0A01               	xorlw	1	; case 5
  1980  001E5A  E0E7               	bz	l222
  1981  001E5C  0A03               	xorlw	3	; case 6
  1982  001E5E  E0EB               	bz	l225
  1983  001E60                     l10589:
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;main.c: 718: relay_pulse_timer[ i ] =
  1987                           ;main.c: 719: Read_b_eep(0x43 + 18 + 2*i) * 256 +
  1988                           ;main.c: 721: Read_b_eep(0x43 + 19 + 2*i);
  1989  001E60  D889               	call	PL52	;call to abstracted procedure
  1990  001E62  ECB6  F01E         	call	_Read_b_eep	;wreg free
  1991  001E66  0100               	movlb	0	; () banked
  1992  001E68  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1993  001E6A  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1994  001E6C  D88C               	call	PL54	;call to abstracted procedure
  1995  001E6E  ECB6  F01E         	call	_Read_b_eep	;wreg free
  1996  001E72  0100               	movlb	0	; () banked
  1997  001E74  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1998  001E76  0E00               	movlw	0
  1999  001E78  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  2000  001E7A  D867               	call	PL20	;call to abstracted procedure
  2001  001E7C  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  2002  001E80  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;main.c: 724: if ( bOn ) {
  2006  001E84  51CF               	movf	doApplicationOneSecondWork@bOn& (0+255),w,b
  2007  001E86  E03A               	bz	l228
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;main.c: 727: if ( Read_b_eep(0x43 + 10 + i) & 0x04 ) {
  2011  001E88  D86E               	call	PL32	;call to abstracted procedure
  2012  001E8A  ECB6  F01E         	call	_Read_b_eep	;wreg free
  2013  001E8E  0100               	movlb	0	; () banked
  2014  001E90  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2015  001E92  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  2016  001E94  D020               	goto	l10597
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;main.c: 728: relay_protection_timer[ i ] =
  2020                           ;main.c: 729: Read_b_eep(0x43 + 34 + 2*i) * 256 +
  2021                           ;main.c: 730: Read_b_eep(0x43 + 35 + 2*i);
  2022  001E96  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2023  001E98  0D02               	mullw	2
  2024  001E9A  0E65               	movlw	101
  2025  001E9C  24F3               	addwf	prodl,w,c
  2026  001E9E  6E08               	movwf	?_Read_b_eep,c
  2027  001EA0  0E00               	movlw	0
  2028  001EA2  20F4               	addwfc	prodh,w,c
  2029  001EA4  6E09               	movwf	?_Read_b_eep+1,c
  2030  001EA6  ECB6  F01E         	call	_Read_b_eep	;wreg free
  2031  001EAA  0100               	movlb	0	; () banked
  2032  001EAC  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2033  001EAE  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  2034  001EB0  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2035  001EB2  0D02               	mullw	2
  2036  001EB4  0E66               	movlw	102
  2037  001EB6  24F3               	addwf	prodl,w,c
  2038  001EB8  6E08               	movwf	?_Read_b_eep,c
  2039  001EBA  0E00               	movlw	0
  2040  001EBC  20F4               	addwfc	prodh,w,c
  2041  001EBE  6E09               	movwf	?_Read_b_eep+1,c
  2042  001EC0  ECB6  F01E         	call	_Read_b_eep	;wreg free
  2043  001EC4  0100               	movlb	0	; () banked
  2044  001EC6  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  2045  001EC8  0E00               	movlw	0
  2046  001ECA  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  2047  001ECC  D845               	call	PL22	;call to abstracted procedure
  2048  001ECE  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  2049  001ED2  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  2050  001ED6                     l10597:
  2051                           
  2052                           ; BSR set to: 0
  2053                           ;main.c: 731: }
  2054                           ;main.c: 733: if ( ctrlreg & 0x08 ) {
  2055  001ED6  A7D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  2056  001ED8  D007               	goto	l10601
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;main.c: 734: SendInformationEvent( i, 20,
  2060                           ;main.c: 735: 3 );
  2061  001EDA  0E14               	movlw	20
  2062  001EDC  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2063  001EDE  0E03               	movlw	3
  2064  001EE0  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2065  001EE2  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2066  001EE4  EC12  F01C         	call	_SendInformationEvent
  2067  001EE8                     l10601:
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;main.c: 736: }
  2071                           ;main.c: 738: if ( ctrlreg & 0x20 ) {
  2072  001EE8  ABD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  2073  001EEA  D02C               	goto	l10613
  2074                           
  2075                           ; BSR set to: 0
  2076                           ;main.c: 739: SendInformationEvent( i, 20,
  2077                           ;main.c: 740: 25 );
  2078  001EEC  0E14               	movlw	20
  2079  001EEE  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2080  001EF0  0E19               	movlw	25
  2081  001EF2  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2082  001EF4  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2083  001EF6  EC12  F01C         	call	_SendInformationEvent
  2084  001EFA  D024               	goto	l10613
  2085  001EFC                     l228:
  2086                           
  2087                           ; BSR set to: 0
  2088                           ;main.c: 745: if ( ctrlreg & 0x10 ) {
  2089  001EFC  A9D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  2090  001EFE  D007               	goto	l10607
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;main.c: 746: SendInformationEvent( i, 20,
  2094                           ;main.c: 747: 4 );
  2095  001F00  0E14               	movlw	20
  2096  001F02  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2097  001F04  0E04               	movlw	4
  2098  001F06  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2099  001F08  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2100  001F0A  EC12  F01C         	call	_SendInformationEvent
  2101  001F0E                     l10607:
  2102                           
  2103                           ; BSR set to: 0
  2104                           ;main.c: 748: }
  2105                           ;main.c: 750: if (ctrlreg & 0x40) {
  2106  001F0E  ADD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),6,b
  2107  001F10  D019               	goto	l10613
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;main.c: 751: SendInformationEvent( i, 20,
  2111                           ;main.c: 752: 24 );
  2112  001F12  0E14               	movlw	20
  2113  001F14  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2114  001F16  0E18               	movlw	24
  2115  001F18  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2116  001F1A  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2117  001F1C  EC12  F01C         	call	_SendInformationEvent
  2118  001F20  D011               	goto	l10613
  2119  001F22                     l10611:
  2120                           
  2121                           ; BSR set to: 0
  2122                           ;main.c: 759: else {
  2123                           ;main.c: 761: relay_pulse_timer[ 0 ] =
  2124                           ;main.c: 762: Read_b_eep(0x43 + 18 + 2*i) * 256 +
  2125                           ;main.c: 763: Read_b_eep(0x43 + 19 + 2*i);
  2126  001F22  D831               	call	PL54	;call to abstracted procedure
  2127  001F24  ECB6  F01E         	call	_Read_b_eep	;wreg free
  2128  001F28  0100               	movlb	0	; () banked
  2129  001F2A  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2130  001F2C  D823               	call	PL52	;call to abstracted procedure
  2131  001F2E  ECB6  F01E         	call	_Read_b_eep	;wreg free
  2132  001F32  0100               	movlb	0	; () banked
  2133  001F34  6FCE               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  2134  001F36  6BCD               	clrf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2135  001F38  51CC               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  2136  001F3A  25CD               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2137  001F3C  6F70               	movwf	_relay_pulse_timer& (0+255),b
  2138  001F3E  0E00               	movlw	0
  2139  001F40  21CE               	addwfc	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2140  001F42  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  2141  001F44                     l10613:
  2142                           
  2143                           ; BSR set to: 0
  2144  001F44  2BD1               	incf	doApplicationOneSecondWork@i& (0+255),f,b
  2145  001F46  D6DD               	goto	l10525
  2146  001F48                     l236:
  2147                           
  2148                           ; BSR set to: 0
  2149  001F48  0012               	return	
  2150  001F4A                     __end_of_doApplicationOneSecondWork:
  2151                           	opt stack 0
  2152  001F4A                     PL20:
  2153                           	opt stack 22
  2154  001F4A  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2155  001F4C  0D02               	mullw	2
  2156  001F4E  50F3               	movf	prodl,w,c
  2157  001F50  0F70               	addlw	low _relay_pulse_timer
  2158  001F52  6ED9               	movwf	fsr2l,c
  2159  001F54  6ADA               	clrf	fsr2h,c
  2160  001F56  0012               	return	
  2161  001F58                     __end_ofPL20:
  2162                           	opt stack 0
  2163  001F58                     PL22:
  2164                           	opt stack 22
  2165  001F58  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2166  001F5A  0D02               	mullw	2
  2167  001F5C  50F3               	movf	prodl,w,c
  2168  001F5E  0F60               	addlw	low _relay_protection_timer
  2169  001F60  6ED9               	movwf	fsr2l,c
  2170  001F62  6ADA               	clrf	fsr2h,c
  2171  001F64  0012               	return	
  2172  001F66                     __end_ofPL22:
  2173                           	opt stack 0
  2174  001F66                     PL32:
  2175                           	opt stack 22
  2176  001F66  0E4D               	movlw	77
  2177  001F68  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  2178  001F6A  6E08               	movwf	?_Read_b_eep,c
  2179  001F6C  6A09               	clrf	?_Read_b_eep+1,c
  2180  001F6E  0E00               	movlw	0
  2181  001F70  2209               	addwfc	?_Read_b_eep+1,f,c
  2182  001F72  0C00               	retlw	0
  2183  001F74                     __end_ofPL32:
  2184                           	opt stack 0
  2185  001F74                     PL52:
  2186                           	opt stack 22
  2187  001F74  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2188  001F76  0D02               	mullw	2
  2189  001F78  0E55               	movlw	85
  2190  001F7A  24F3               	addwf	prodl,w,c
  2191  001F7C  6E08               	movwf	?_Read_b_eep,c
  2192  001F7E  0E00               	movlw	0
  2193  001F80  20F4               	addwfc	prodh,w,c
  2194  001F82  6E09               	movwf	?_Read_b_eep+1,c
  2195  001F84  0012               	return	
  2196  001F86                     __end_ofPL52:
  2197                           	opt stack 0
  2198  001F86                     PL54:
  2199                           	opt stack 22
  2200  001F86  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2201  001F88  0D02               	mullw	2
  2202  001F8A  0E56               	movlw	86
  2203  001F8C  24F3               	addwf	prodl,w,c
  2204  001F8E  6E08               	movwf	?_Read_b_eep,c
  2205  001F90  0E00               	movlw	0
  2206  001F92  20F4               	addwfc	prodh,w,c
  2207  001F94  6E09               	movwf	?_Read_b_eep+1,c
  2208  001F96  0012               	return	
  2209  001F98                     __end_ofPL54:
  2210                           	opt stack 0
  2211                           tblptru	equ	0xFF8
  2212                           tblptrh	equ	0xFF7
  2213                           tblptrl	equ	0xFF6
  2214                           tablat	equ	0xFF5
  2215                           prodh	equ	0xFF4
  2216                           prodl	equ	0xFF3
  2217                           intcon	equ	0xFF2
  2218                           postinc0	equ	0xFEE
  2219                           wreg	equ	0xFE8
  2220                           indf1	equ	0xFE7
  2221                           fsr1h	equ	0xFE2
  2222                           fsr1l	equ	0xFE1
  2223                           indf2	equ	0xFDF
  2224                           postinc2	equ	0xFDE
  2225                           postdec2	equ	0xFDD
  2226                           plusw2	equ	0xFDB
  2227                           fsr2h	equ	0xFDA
  2228                           fsr2l	equ	0xFD9
  2229                           status	equ	0xFD8
  2230                           
  2231 ;; *************** function _vscp_doOneSecondWork *****************
  2232 ;; Defined at:
  2233 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;		None
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;		None
  2238 ;; Return value:  Size  Location     Type
  2239 ;;		None               void
  2240 ;; Registers used:
  2241 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2242 ;; Tracked objects:
  2243 ;;		On entry : F/0
  2244 ;;		On exit  : F/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2247 ;;      Params:         0       0       0       0       0       0       0
  2248 ;;      Locals:         0       0       0       0       0       0       0
  2249 ;;      Temps:          1       0       0       0       0       0       0
  2250 ;;      Totals:         1       0       0       0       0       0       0
  2251 ;;Total ram usage:        1 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; Hardware stack levels required when called:    8
  2254 ;; This function calls:
  2255 ;;		_vscp_getZone
  2256 ;;		_vscp_getSubzone
  2257 ;;		_vscp_sendHeartBeat
  2258 ;; This function is called by:
  2259 ;;		_main
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           	psect	text3
  2264  003890                     __ptext3:
  2265                           	opt stack 0
  2266  003890                     _vscp_doOneSecondWork:
  2267                           	opt stack 22
  2268                           
  2269                           ; BSR set to: 0
  2270                           ;vscp_firmware.c: 526: ++vscp_second;
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;incstack = 0
  2274                           ;incstack = 0
  2275  003890  2B95               	incf	_vscp_second& (0+255),f,b
  2276                           
  2277                           ; BSR set to: 0
  2278                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  2279  003892  0E3B               	movlw	59
  2280  003894  6595               	cpfsgt	_vscp_second& (0+255),b
  2281  003896  D00D               	goto	l8527
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;vscp_firmware.c: 529: vscp_second = 0;
  2285  003898  6B95               	clrf	_vscp_second& (0+255),b
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;vscp_firmware.c: 530: vscp_minute++;
  2289  00389A  2B90               	incf	_vscp_minute& (0+255),f,b
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  2293  00389C  5192               	movf	_vscp_node_state& (0+255),w,b
  2294  00389E  0A03               	xorlw	3
  2295  0038A0  E108               	bnz	l8527
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  2299                           ;vscp_firmware.c: 535: vscp_getSubzone());
  2300  0038A2  ECC8  F01E         	call	_vscp_getSubzone	;wreg free
  2301  0038A6  0100               	movlb	0	; () banked
  2302  0038A8  6FC5               	movwf	?_vscp_sendHeartBeat& (0+255),b
  2303  0038AA  ECCD  F01E         	call	_vscp_getZone	;wreg free
  2304  0038AE  EC6D  F01D         	call	_vscp_sendHeartBeat
  2305  0038B2                     l8527:
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;vscp_firmware.c: 536: }
  2309                           ;vscp_firmware.c: 537: }
  2310                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  2311  0038B2  0E3B               	movlw	59
  2312  0038B4  6590               	cpfsgt	_vscp_minute& (0+255),b
  2313  0038B6  D002               	goto	l8533
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;vscp_firmware.c: 540: vscp_minute = 0;
  2317  0038B8  6B90               	clrf	_vscp_minute& (0+255),b
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;vscp_firmware.c: 541: vscp_hour++;
  2321  0038BA  2B8E               	incf	_vscp_hour& (0+255),f,b
  2322  0038BC                     l8533:
  2323                           
  2324                           ; BSR set to: 0
  2325                           ;vscp_firmware.c: 542: }
  2326                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  2327  0038BC  0E17               	movlw	23
  2328  0038BE  658E               	cpfsgt	_vscp_hour& (0+255),b
  2329  0038C0  D001               	goto	l8537
  2330                           
  2331                           ; BSR set to: 0
  2332  0038C2  6B8E               	clrf	_vscp_hour& (0+255),b
  2333  0038C4                     l8537:
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  2337  0038C4  5192               	movf	_vscp_node_state& (0+255),w,b
  2338  0038C6  0A03               	xorlw	3
  2339  0038C8  E109               	bnz	l1122
  2340                           
  2341                           ; BSR set to: 0
  2342                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  2343  0038CA  2B8D               	incf	_vscp_guid_reset& (0+255),f,b
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  2347  0038CC  C08D  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  2348  0038D0  0E0F               	movlw	15
  2349  0038D2  164D               	andwf	??_vscp_doOneSecondWork,f,c
  2350  0038D4  0E02               	movlw	2
  2351  0038D6  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  2352  0038D8  B0D8               	btfsc	status,0,c
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  2356  0038DA  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  2357  0038DC                     l1122:
  2358                           
  2359                           ; BSR set to: 0
  2360  0038DC  0012               	return	
  2361  0038DE                     __end_of_vscp_doOneSecondWork:
  2362                           	opt stack 0
  2363                           tblptru	equ	0xFF8
  2364                           tblptrh	equ	0xFF7
  2365                           tblptrl	equ	0xFF6
  2366                           tablat	equ	0xFF5
  2367                           prodh	equ	0xFF4
  2368                           prodl	equ	0xFF3
  2369                           intcon	equ	0xFF2
  2370                           postinc0	equ	0xFEE
  2371                           wreg	equ	0xFE8
  2372                           indf1	equ	0xFE7
  2373                           fsr1h	equ	0xFE2
  2374                           fsr1l	equ	0xFE1
  2375                           indf2	equ	0xFDF
  2376                           postinc2	equ	0xFDE
  2377                           postdec2	equ	0xFDD
  2378                           plusw2	equ	0xFDB
  2379                           fsr2h	equ	0xFDA
  2380                           fsr2l	equ	0xFD9
  2381                           status	equ	0xFD8
  2382                           
  2383 ;; *************** function _vscp_sendHeartBeat *****************
  2384 ;; Defined at:
  2385 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  2386 ;; Parameters:    Size  Location     Type
  2387 ;;  zone            1    wreg     unsigned char 
  2388 ;;  subzone         1   20[BANK0 ] unsigned char 
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;  zone            1   75[COMRAM] unsigned char 
  2391 ;; Return value:  Size  Location     Type
  2392 ;;		None               void
  2393 ;; Registers used:
  2394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : F/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2400 ;;      Params:         0       1       0       0       0       0       0
  2401 ;;      Locals:         1       0       0       0       0       0       0
  2402 ;;      Temps:          0       0       0       0       0       0       0
  2403 ;;      Totals:         1       1       0       0       0       0       0
  2404 ;;Total ram usage:        2 bytes
  2405 ;; Hardware stack levels used:    1
  2406 ;; Hardware stack levels required when called:    7
  2407 ;; This function calls:
  2408 ;;		_vscp_sendEvent
  2409 ;; This function is called by:
  2410 ;;		_vscp_doOneSecondWork
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414                           	psect	text4
  2415  003ADA                     __ptext4:
  2416                           	opt stack 0
  2417  003ADA                     _vscp_sendHeartBeat:
  2418                           	opt stack 22
  2419                           
  2420                           ; BSR set to: 0
  2421                           ;incstack = 0
  2422                           ;incstack = 0
  2423                           ;vscp_sendHeartBeat@zone stored from wreg
  2424  003ADA  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  2425                           
  2426                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  2427  003ADE  0E83               	movlw	131
  2428  003AE0  0100               	movlb	0	; () banked
  2429  003AE2  6FA4               	movwf	_vscp_omsg& (0+255),b
  2430                           
  2431                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  2432  003AE4  0E07               	movlw	7
  2433  003AE6  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  2434                           
  2435                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  2436  003AE8  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  2437  003AEA  0E14               	movlw	20
  2438  003AEC  6FA6               	movwf	(_vscp_omsg+2)& (0+255),b
  2439                           
  2440                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  2441  003AEE  0E09               	movlw	9
  2442  003AF0  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  2443                           
  2444                           ; BSR set to: 0
  2445                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  2446  003AF2  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  2450  003AF4  C04C  F0AA         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  2451                           
  2452                           ; BSR set to: 0
  2453                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  2454  003AF8  C0C5  F0AB         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  2455                           
  2456                           ; BSR set to: 0
  2457                           ;vscp_firmware.c: 388: vscp_sendEvent();
  2458  003AFC  EFA6  F01D         	goto	_vscp_sendEvent	;wreg free
  2459  003B00                     __end_of_vscp_sendHeartBeat:
  2460                           	opt stack 0
  2461                           tblptru	equ	0xFF8
  2462                           tblptrh	equ	0xFF7
  2463                           tblptrl	equ	0xFF6
  2464                           tablat	equ	0xFF5
  2465                           prodh	equ	0xFF4
  2466                           prodl	equ	0xFF3
  2467                           intcon	equ	0xFF2
  2468                           postinc0	equ	0xFEE
  2469                           wreg	equ	0xFE8
  2470                           indf1	equ	0xFE7
  2471                           fsr1h	equ	0xFE2
  2472                           fsr1l	equ	0xFE1
  2473                           indf2	equ	0xFDF
  2474                           postinc2	equ	0xFDE
  2475                           postdec2	equ	0xFDD
  2476                           plusw2	equ	0xFDB
  2477                           fsr2h	equ	0xFDA
  2478                           fsr2l	equ	0xFD9
  2479                           status	equ	0xFD8
  2480                           
  2481 ;; *************** function _vscp_getSubzone *****************
  2482 ;; Defined at:
  2483 ;;		line 874 in file "../main.c"
  2484 ;; Parameters:    Size  Location     Type
  2485 ;;		None
  2486 ;; Auto vars:     Size  Location     Type
  2487 ;;		None
  2488 ;; Return value:  Size  Location     Type
  2489 ;;                  1    wreg      unsigned char 
  2490 ;; Registers used:
  2491 ;;		wreg, status,2, cstack
  2492 ;; Tracked objects:
  2493 ;;		On entry : F/0
  2494 ;;		On exit  : 0/0
  2495 ;;		Unchanged: 0/0
  2496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2497 ;;      Params:         0       0       0       0       0       0       0
  2498 ;;      Locals:         0       0       0       0       0       0       0
  2499 ;;      Temps:          0       0       0       0       0       0       0
  2500 ;;      Totals:         0       0       0       0       0       0       0
  2501 ;;Total ram usage:        0 bytes
  2502 ;; Hardware stack levels used:    1
  2503 ;; Hardware stack levels required when called:    3
  2504 ;; This function calls:
  2505 ;;		_Read_b_eep
  2506 ;; This function is called by:
  2507 ;;		_vscp_doOneSecondWork
  2508 ;; This function uses a non-reentrant model
  2509 ;;
  2510                           
  2511                           	psect	text5
  2512  003D90                     __ptext5:
  2513                           	opt stack 0
  2514  003D90                     _vscp_getSubzone:
  2515                           	opt stack 26
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;main.c: 875: return Read_b_eep(0x43 + 1);
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;incstack = 0
  2522                           ;incstack = 0
  2523  003D90  6A09               	clrf	?_Read_b_eep+1,c
  2524  003D92  0E44               	movlw	68
  2525  003D94  6E08               	movwf	?_Read_b_eep,c
  2526  003D96  EFB6  F01E         	goto	_Read_b_eep	;wreg free
  2527  003D9A                     __end_of_vscp_getSubzone:
  2528                           	opt stack 0
  2529                           tblptru	equ	0xFF8
  2530                           tblptrh	equ	0xFF7
  2531                           tblptrl	equ	0xFF6
  2532                           tablat	equ	0xFF5
  2533                           prodh	equ	0xFF4
  2534                           prodl	equ	0xFF3
  2535                           intcon	equ	0xFF2
  2536                           postinc0	equ	0xFEE
  2537                           wreg	equ	0xFE8
  2538                           indf1	equ	0xFE7
  2539                           fsr1h	equ	0xFE2
  2540                           fsr1l	equ	0xFE1
  2541                           indf2	equ	0xFDF
  2542                           postinc2	equ	0xFDE
  2543                           postdec2	equ	0xFDD
  2544                           plusw2	equ	0xFDB
  2545                           fsr2h	equ	0xFDA
  2546                           fsr2l	equ	0xFD9
  2547                           status	equ	0xFD8
  2548                           
  2549 ;; *************** function _vscp_getZone *****************
  2550 ;; Defined at:
  2551 ;;		line 865 in file "../main.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;		None
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;		None
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  1    wreg      unsigned char 
  2558 ;; Registers used:
  2559 ;;		wreg, status,2, cstack
  2560 ;; Tracked objects:
  2561 ;;		On entry : F/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2565 ;;      Params:         0       0       0       0       0       0       0
  2566 ;;      Locals:         0       0       0       0       0       0       0
  2567 ;;      Temps:          0       0       0       0       0       0       0
  2568 ;;      Totals:         0       0       0       0       0       0       0
  2569 ;;Total ram usage:        0 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:    3
  2572 ;; This function calls:
  2573 ;;		_Read_b_eep
  2574 ;; This function is called by:
  2575 ;;		_vscp_doOneSecondWork
  2576 ;; This function uses a non-reentrant model
  2577 ;;
  2578                           
  2579                           	psect	text6
  2580  003D9A                     __ptext6:
  2581                           	opt stack 0
  2582  003D9A                     _vscp_getZone:
  2583                           	opt stack 26
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;main.c: 866: return Read_b_eep(0x43 + 0);
  2587                           
  2588                           ;incstack = 0
  2589                           ;incstack = 0
  2590  003D9A  6A09               	clrf	?_Read_b_eep+1,c
  2591  003D9C  0E43               	movlw	67
  2592  003D9E  6E08               	movwf	?_Read_b_eep,c
  2593  003DA0  EFB6  F01E         	goto	_Read_b_eep	;wreg free
  2594  003DA4                     __end_of_vscp_getZone:
  2595                           	opt stack 0
  2596                           tblptru	equ	0xFF8
  2597                           tblptrh	equ	0xFF7
  2598                           tblptrl	equ	0xFF6
  2599                           tablat	equ	0xFF5
  2600                           prodh	equ	0xFF4
  2601                           prodl	equ	0xFF3
  2602                           intcon	equ	0xFF2
  2603                           postinc0	equ	0xFEE
  2604                           wreg	equ	0xFE8
  2605                           indf1	equ	0xFE7
  2606                           fsr1h	equ	0xFE2
  2607                           fsr1l	equ	0xFE1
  2608                           indf2	equ	0xFDF
  2609                           postinc2	equ	0xFDE
  2610                           postdec2	equ	0xFDD
  2611                           plusw2	equ	0xFDB
  2612                           fsr2h	equ	0xFDA
  2613                           fsr2l	equ	0xFD9
  2614                           status	equ	0xFD8
  2615                           
  2616 ;; *************** function _vscp_error *****************
  2617 ;; Defined at:
  2618 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  2619 ;; Parameters:    Size  Location     Type
  2620 ;;		None
  2621 ;; Auto vars:     Size  Location     Type
  2622 ;;		None
  2623 ;; Return value:  Size  Location     Type
  2624 ;;		None               void
  2625 ;; Registers used:
  2626 ;;		None
  2627 ;; Tracked objects:
  2628 ;;		On entry : 0/0
  2629 ;;		On exit  : 0/0
  2630 ;;		Unchanged: 0/0
  2631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2632 ;;      Params:         0       0       0       0       0       0       0
  2633 ;;      Locals:         0       0       0       0       0       0       0
  2634 ;;      Temps:          0       0       0       0       0       0       0
  2635 ;;      Totals:         0       0       0       0       0       0       0
  2636 ;;Total ram usage:        0 bytes
  2637 ;; Hardware stack levels used:    1
  2638 ;; Hardware stack levels required when called:    2
  2639 ;; This function calls:
  2640 ;;		Nothing
  2641 ;; This function is called by:
  2642 ;;		_main
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           	psect	text7
  2647  003DDA                     __ptext7:
  2648                           	opt stack 0
  2649  003DDA                     _vscp_error:
  2650                           	opt stack 28
  2651                           
  2652                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  2653                           
  2654                           ;incstack = 0
  2655                           ;incstack = 0
  2656  003DDA  6A56               	clrf	_vscp_initledfunc,c
  2657  003DDC  0012               	return	
  2658  003DDE                     __end_of_vscp_error:
  2659                           	opt stack 0
  2660                           tblptru	equ	0xFF8
  2661                           tblptrh	equ	0xFF7
  2662                           tblptrl	equ	0xFF6
  2663                           tablat	equ	0xFF5
  2664                           prodh	equ	0xFF4
  2665                           prodl	equ	0xFF3
  2666                           intcon	equ	0xFF2
  2667                           postinc0	equ	0xFEE
  2668                           wreg	equ	0xFE8
  2669                           indf1	equ	0xFE7
  2670                           fsr1h	equ	0xFE2
  2671                           fsr1l	equ	0xFE1
  2672                           indf2	equ	0xFDF
  2673                           postinc2	equ	0xFDE
  2674                           postdec2	equ	0xFDD
  2675                           plusw2	equ	0xFDB
  2676                           fsr2h	equ	0xFDA
  2677                           fsr2l	equ	0xFD9
  2678                           status	equ	0xFD8
  2679                           
  2680 ;; *************** function _doDM *****************
  2681 ;; Defined at:
  2682 ;;		line 1630 in file "../main.c"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;		None
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;  class_mask      2   33[BANK0 ] unsigned short 
  2687 ;;  class_filter    2   31[BANK0 ] unsigned short 
  2688 ;;  i               1   44[BANK0 ] unsigned char 
  2689 ;;  dmflags         1   43[BANK0 ] unsigned char 
  2690 ;;  type_mask       1   36[BANK0 ] unsigned char 
  2691 ;;  type_filter     1   35[BANK0 ] unsigned char 
  2692 ;; Return value:  Size  Location     Type
  2693 ;;		None               void
  2694 ;; Registers used:
  2695 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2696 ;; Tracked objects:
  2697 ;;		On entry : 0/0
  2698 ;;		On exit  : F/0
  2699 ;;		Unchanged: 0/0
  2700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2701 ;;      Params:         0       0       0       0       0       0       0
  2702 ;;      Locals:         0      14       0       0       0       0       0
  2703 ;;      Temps:          0       3       0       0       0       0       0
  2704 ;;      Totals:         0      17       0       0       0       0       0
  2705 ;;Total ram usage:       17 bytes
  2706 ;; Hardware stack levels used:    1
  2707 ;; Hardware stack levels required when called:    8
  2708 ;; This function calls:
  2709 ;;		_Read_b_eep
  2710 ;;		_doActionOff
  2711 ;;		_doActionOn
  2712 ;;		_doActionPulse
  2713 ;;		_doActionStatus
  2714 ;;		_doActionDisable
  2715 ;;		_doActionToggle
  2716 ;; This function is called by:
  2717 ;;		_main
  2718 ;; This function uses a non-reentrant model
  2719 ;;
  2720                           
  2721                           	psect	text8
  2722  00243A                     __ptext8:
  2723                           	opt stack 0
  2724  00243A                     _doDM:
  2725                           	opt stack 22
  2726                           
  2727                           ;main.c: 1631: unsigned char i;
  2728                           ;main.c: 1632: unsigned char dmflags;
  2729                           ;main.c: 1633: unsigned short class_filter;
  2730                           ;main.c: 1634: unsigned short class_mask;
  2731                           ;main.c: 1635: unsigned char type_filter;
  2732                           ;main.c: 1636: unsigned char type_mask;
  2733                           ;main.c: 1639: if ( 0 == vscp_imsg.vscp_class ) return;
  2734                           
  2735                           ;incstack = 0
  2736                           ;incstack = 0
  2737  00243A  0100               	movlb	0	; () banked
  2738  00243C  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  2739  00243E  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  2740  002440  E101 D0E8          	bz	l420
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;main.c: 1641: for (i = 0; i < 7; i++) {
  2744  002444  6BDD               	clrf	doDM@i& (0+255),b
  2745  002446                     l10473:
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;main.c: 1644: dmflags = Read_b_eep(0x43 + 72 + 1 + (8 * i));
  2749  002446  D8E7               	call	PL2	;call to abstracted procedure
  2750  002448  0E8C               	movlw	140
  2751  00244A  25CD               	addwf	??_doDM& (0+255),w,b
  2752  00244C  6E08               	movwf	?_Read_b_eep,c
  2753  00244E  0E00               	movlw	0
  2754  002450  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2755  002452  6E09               	movwf	?_Read_b_eep+1,c
  2756  002454  ECB6  F01E         	call	_Read_b_eep	;wreg free
  2757  002458  0100               	movlb	0	; () banked
  2758  00245A  6FDC               	movwf	doDM@dmflags& (0+255),b
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;main.c: 1647: if ( dmflags & 0x80 ) {
  2762  00245C  AFDC               	btfss	doDM@dmflags& (0+255),7,b
  2763  00245E  D0D5               	goto	l10519
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;main.c: 1650: if ( ( dmflags & 0x40 ) &&
  2767                           ;main.c: 1651: ( vscp_imsg.oaddr != Read_b_eep(0x43 + 72 + (8 * i)) ) ) {
  2768  002460  ADDC               	btfss	doDM@dmflags& (0+255),6,b
  2769  002462  D018               	goto	l10483
  2770                           
  2771                           ; BSR set to: 0
  2772  002464  51DD               	movf	doDM@i& (0+255),w,b
  2773  002466  6FCD               	movwf	??_doDM& (0+255),b
  2774  002468  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2775  00246A  90D8               	bcf	status,0,c
  2776  00246C  37CD               	rlcf	??_doDM& (0+255),f,b
  2777  00246E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2778  002470  90D8               	bcf	status,0,c
  2779  002472  37CD               	rlcf	??_doDM& (0+255),f,b
  2780  002474  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2781  002476  90D8               	bcf	status,0,c
  2782  002478  37CD               	rlcf	??_doDM& (0+255),f,b
  2783  00247A  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2784  00247C  0E8B               	movlw	139
  2785  00247E  25CD               	addwf	??_doDM& (0+255),w,b
  2786  002480  6E08               	movwf	?_Read_b_eep,c
  2787  002482  0E00               	movlw	0
  2788  002484  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2789  002486  6E09               	movwf	?_Read_b_eep+1,c
  2790  002488  ECB6  F01E         	call	_Read_b_eep	;wreg free
  2791  00248C  0100               	movlb	0	; () banked
  2792  00248E  199B               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  2793  002490  E001 D0BB          	bnz	l10519
  2794  002494                     l10483:
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;main.c: 1653: }
  2798                           ;main.c: 1677: class_filter = ( dmflags & 0x01)*256 +
  2799                           ;main.c: 1678: Read_b_eep(0x43 + 72 + (8 * i) + 3);
  2800  002494  51DD               	movf	doDM@i& (0+255),w,b
  2801  002496  0D08               	mullw	8
  2802  002498  0E8E               	movlw	142
  2803  00249A  24F3               	addwf	prodl,w,c
  2804  00249C  6E08               	movwf	?_Read_b_eep,c
  2805  00249E  0E00               	movlw	0
  2806  0024A0  20F4               	addwfc	prodh,w,c
  2807  0024A2  6E09               	movwf	?_Read_b_eep+1,c
  2808  0024A4  ECB6  F01E         	call	_Read_b_eep	;wreg free
  2809  0024A8  0100               	movlb	0	; () banked
  2810  0024AA  6FCD               	movwf	??_doDM& (0+255),b
  2811  0024AC  51DC               	movf	doDM@dmflags& (0+255),w,b
  2812  0024AE  0B01               	andlw	1
  2813  0024B0  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2814  0024B2  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2815  0024B4  51CD               	movf	??_doDM& (0+255),w,b
  2816  0024B6  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2817  0024B8  6FD0               	movwf	doDM@class_filter& (0+255),b
  2818  0024BA  0E00               	movlw	0
  2819  0024BC  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2820  0024BE  6FD1               	movwf	(doDM@class_filter+1)& (0+255),b
  2821                           
  2822                           ;main.c: 1682: class_mask = ( dmflags & 0x02)*256 +
  2823                           ;main.c: 1683: Read_b_eep(0x43 + 72 + (8 * i) + 2);
  2824  0024C0  51DD               	movf	doDM@i& (0+255),w,b
  2825  0024C2  0D08               	mullw	8
  2826  0024C4  0E8D               	movlw	141
  2827  0024C6  24F3               	addwf	prodl,w,c
  2828  0024C8  6E08               	movwf	?_Read_b_eep,c
  2829  0024CA  0E00               	movlw	0
  2830  0024CC  20F4               	addwfc	prodh,w,c
  2831  0024CE  6E09               	movwf	?_Read_b_eep+1,c
  2832  0024D0  ECB6  F01E         	call	_Read_b_eep	;wreg free
  2833  0024D4  0100               	movlb	0	; () banked
  2834  0024D6  6FCD               	movwf	??_doDM& (0+255),b
  2835  0024D8  51DC               	movf	doDM@dmflags& (0+255),w,b
  2836  0024DA  0B02               	andlw	2
  2837  0024DC  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2838  0024DE  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2839  0024E0  51CD               	movf	??_doDM& (0+255),w,b
  2840  0024E2  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2841  0024E4  6FD2               	movwf	doDM@class_mask& (0+255),b
  2842  0024E6  0E00               	movlw	0
  2843  0024E8  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2844  0024EA  6FD3               	movwf	(doDM@class_mask+1)& (0+255),b
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;main.c: 1687: type_filter = Read_b_eep(0x43 + 72 + (8 * i) + 5);
  2848  0024EC  D894               	call	PL2	;call to abstracted procedure
  2849  0024EE  0E90               	movlw	144
  2850  0024F0  25CD               	addwf	??_doDM& (0+255),w,b
  2851  0024F2  6E08               	movwf	?_Read_b_eep,c
  2852  0024F4  0E00               	movlw	0
  2853  0024F6  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2854  0024F8  6E09               	movwf	?_Read_b_eep+1,c
  2855  0024FA  ECB6  F01E         	call	_Read_b_eep	;wreg free
  2856  0024FE  0100               	movlb	0	; () banked
  2857  002500  6FD4               	movwf	doDM@type_filter& (0+255),b
  2858                           
  2859                           ; BSR set to: 0
  2860                           ;main.c: 1691: type_mask = Read_b_eep(0x43 + 72 + (8 * i) + 4);
  2861  002502  D889               	call	PL2	;call to abstracted procedure
  2862  002504  0E8F               	movlw	143
  2863  002506  25CD               	addwf	??_doDM& (0+255),w,b
  2864  002508  6E08               	movwf	?_Read_b_eep,c
  2865  00250A  0E00               	movlw	0
  2866  00250C  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2867  00250E  6E09               	movwf	?_Read_b_eep+1,c
  2868  002510  ECB6  F01E         	call	_Read_b_eep	;wreg free
  2869  002514  0100               	movlb	0	; () banked
  2870  002516  6FD5               	movwf	doDM@type_mask& (0+255),b
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;main.c: 1696: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2874                           ;main.c: 1697: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2875  002518  EE20  F098         	lfsr	2,_vscp_imsg+2
  2876  00251C  CFDE F0CD          	movff	postinc2,??_doDM
  2877  002520  CFDD F0CE          	movff	postdec2,??_doDM+1
  2878  002524  51D0               	movf	doDM@class_filter& (0+255),w,b
  2879  002526  1BCD               	xorwf	??_doDM& (0+255),f,b
  2880  002528  51D1               	movf	(doDM@class_filter+1)& (0+255),w,b
  2881  00252A  1BCE               	xorwf	(??_doDM+1)& (0+255),f,b
  2882  00252C  51D2               	movf	doDM@class_mask& (0+255),w,b
  2883  00252E  17CD               	andwf	??_doDM& (0+255),f,b
  2884  002530  51D3               	movf	(doDM@class_mask+1)& (0+255),w,b
  2885  002532  17CE               	andwf	(??_doDM+1)& (0+255),f,b
  2886  002534  51CE               	movf	(??_doDM+1)& (0+255),w,b
  2887  002536  11CD               	iorwf	??_doDM& (0+255),w,b
  2888  002538  E168               	bnz	l10519
  2889                           
  2890                           ; BSR set to: 0
  2891  00253A  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  2892  00253C  19D4               	xorwf	doDM@type_filter& (0+255),w,b
  2893  00253E  15D5               	andwf	doDM@type_mask& (0+255),w,b
  2894  002540  E04F               	bz	l10517
  2895  002542  D063               	goto	l10519
  2896  002544                     l10495:
  2897                           
  2898                           ;main.c: 1703: doActionOn( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2899  002544  0100               	movlb	0	; () banked
  2900  002546  D867               	call	PL2	;call to abstracted procedure
  2901  002548  D873               	call	PL16	;call to abstracted procedure
  2902  00254A  ECB6  F01E         	call	_Read_b_eep	;wreg free
  2903  00254E  0100               	movlb	0	; () banked
  2904  002550  6FD6               	movwf	_doDM$2152& (0+255),b
  2905                           
  2906                           ; BSR set to: 0
  2907                           ;main.c: 1703: doActionOn( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2908  002552  C0D6  F051         	movff	_doDM$2152,?_doActionOn
  2909  002556  51DC               	movf	doDM@dmflags& (0+255),w,b
  2910  002558  ECCC  F00F         	call	_doActionOn
  2911                           
  2912                           ;main.c: 1704: break;
  2913  00255C  D056               	goto	l10519
  2914  00255E                     l10499:
  2915                           
  2916                           ;main.c: 1707: doActionOff( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2917  00255E  0100               	movlb	0	; () banked
  2918  002560  D85A               	call	PL2	;call to abstracted procedure
  2919  002562  D866               	call	PL16	;call to abstracted procedure
  2920  002564  ECB6  F01E         	call	_Read_b_eep	;wreg free
  2921  002568  0100               	movlb	0	; () banked
  2922  00256A  6FD7               	movwf	_doDM$2153& (0+255),b
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;main.c: 1707: doActionOff( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2926  00256C  C0D7  F051         	movff	_doDM$2153,?_doActionOff
  2927  002570  51DC               	movf	doDM@dmflags& (0+255),w,b
  2928  002572  EC09  F019         	call	_doActionOff
  2929                           
  2930                           ;main.c: 1708: break;
  2931  002576  D049               	goto	l10519
  2932  002578                     l10503:
  2933                           
  2934                           ;main.c: 1711: doActionPulse( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2935  002578  0100               	movlb	0	; () banked
  2936  00257A  D84D               	call	PL2	;call to abstracted procedure
  2937  00257C  D859               	call	PL16	;call to abstracted procedure
  2938  00257E  ECB6  F01E         	call	_Read_b_eep	;wreg free
  2939  002582  0100               	movlb	0	; () banked
  2940  002584  6FD8               	movwf	_doDM$2154& (0+255),b
  2941                           
  2942                           ;main.c: 1711: doActionPulse( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2943  002586  C0D8  F00A         	movff	_doDM$2154,?_doActionPulse
  2944  00258A  51DC               	movf	doDM@dmflags& (0+255),w,b
  2945  00258C  EC1F  F013         	call	_doActionPulse
  2946                           
  2947                           ;main.c: 1712: break;
  2948  002590  D03C               	goto	l10519
  2949  002592                     l10505:
  2950                           
  2951                           ;main.c: 1715: doActionStatus( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2952  002592  0100               	movlb	0	; () banked
  2953  002594  D840               	call	PL2	;call to abstracted procedure
  2954  002596  D84C               	call	PL16	;call to abstracted procedure
  2955  002598  ECB6  F01E         	call	_Read_b_eep	;wreg free
  2956  00259C  0100               	movlb	0	; () banked
  2957  00259E  6FD9               	movwf	_doDM$2155& (0+255),b
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;main.c: 1715: doActionStatus( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2961  0025A0  C0D9  F051         	movff	_doDM$2155,?_doActionStatus
  2962  0025A4  51DC               	movf	doDM@dmflags& (0+255),w,b
  2963  0025A6  EC4C  F016         	call	_doActionStatus
  2964                           
  2965                           ;main.c: 1716: break;
  2966  0025AA  D02F               	goto	l10519
  2967  0025AC                     l10509:
  2968                           
  2969                           ;main.c: 1719: doActionDisable( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2970  0025AC  0100               	movlb	0	; () banked
  2971  0025AE  D833               	call	PL2	;call to abstracted procedure
  2972  0025B0  D83F               	call	PL16	;call to abstracted procedure
  2973  0025B2  ECB6  F01E         	call	_Read_b_eep	;wreg free
  2974  0025B6  0100               	movlb	0	; () banked
  2975  0025B8  6FDA               	movwf	_doDM$2156& (0+255),b
  2976                           
  2977                           ;main.c: 1719: doActionDisable( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2978  0025BA  C0DA  F00C         	movff	_doDM$2156,?_doActionDisable
  2979  0025BE  51DC               	movf	doDM@dmflags& (0+255),w,b
  2980  0025C0  EC01  F01B         	call	_doActionDisable
  2981                           
  2982                           ;main.c: 1720: break;
  2983  0025C4  D022               	goto	l10519
  2984  0025C6                     l10511:
  2985                           
  2986                           ;main.c: 1723: doActionToggle( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2987  0025C6  0100               	movlb	0	; () banked
  2988  0025C8  D826               	call	PL2	;call to abstracted procedure
  2989  0025CA  D832               	call	PL16	;call to abstracted procedure
  2990  0025CC  ECB6  F01E         	call	_Read_b_eep	;wreg free
  2991  0025D0  0100               	movlb	0	; () banked
  2992  0025D2  6FDB               	movwf	_doDM$2157& (0+255),b
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;main.c: 1723: doActionToggle( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2996  0025D4  C0DB  F051         	movff	_doDM$2157,?_doActionToggle
  2997  0025D8  51DC               	movf	doDM@dmflags& (0+255),w,b
  2998  0025DA  ECA3  F015         	call	_doActionToggle
  2999                           
  3000                           ;main.c: 1724: break;
  3001  0025DE  D015               	goto	l10519
  3002  0025E0                     l10517:
  3003                           
  3004                           ; BSR set to: 0
  3005  0025E0  D81A               	call	PL2	;call to abstracted procedure
  3006  0025E2  0E91               	movlw	145
  3007  0025E4  25CD               	addwf	??_doDM& (0+255),w,b
  3008  0025E6  6E08               	movwf	?_Read_b_eep,c
  3009  0025E8  0E00               	movlw	0
  3010  0025EA  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  3011  0025EC  6E09               	movwf	?_Read_b_eep+1,c
  3012  0025EE  ECB6  F01E         	call	_Read_b_eep	;wreg free
  3013                           
  3014                           ; Switch size 1, requested type "space"
  3015                           ; Number of cases is 6, Range of values is 1 to 16
  3016                           ; switch strategies available:
  3017                           ; Name         Instructions Cycles
  3018                           ; simple_byte           19    10 (average)
  3019                           ;	Chosen strategy is simple_byte
  3020  0025F2  0A01               	xorlw	1	; case 1
  3021  0025F4  E0A7               	bz	l10495
  3022  0025F6  0A03               	xorlw	3	; case 2
  3023  0025F8  E0B2               	bz	l10499
  3024  0025FA  0A01               	xorlw	1	; case 3
  3025  0025FC  E0BD               	bz	l10503
  3026  0025FE  0A07               	xorlw	7	; case 4
  3027  002600  E0E2               	bz	l10511
  3028  002602  0A0E               	xorlw	14	; case 10
  3029  002604  E0C6               	bz	l10505
  3030  002606  0A1A               	xorlw	26	; case 16
  3031  002608  E0D1               	bz	l10509
  3032  00260A                     l10519:
  3033  00260A  0100               	movlb	0	; () banked
  3034  00260C  2BDD               	incf	doDM@i& (0+255),f,b
  3035                           
  3036                           ; BSR set to: 0
  3037  00260E  0E06               	movlw	6
  3038  002610  65DD               	cpfsgt	doDM@i& (0+255),b
  3039  002612  D719               	goto	l10473
  3040  002614                     l420:
  3041                           
  3042                           ; BSR set to: 0
  3043  002614  0012               	return	
  3044  002616                     __end_of_doDM:
  3045                           	opt stack 0
  3046  002616                     PL2:
  3047                           	opt stack 22
  3048  002616  51DD               	movf	doDM@i& (0+255),w,b
  3049  002618  6FCD               	movwf	??_doDM& (0+255),b
  3050  00261A  6BCE               	clrf	(??_doDM+1)& (0+255),b
  3051  00261C  90D8               	bcf	status,0,c
  3052  00261E  37CD               	rlcf	??_doDM& (0+255),f,b
  3053  002620  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  3054  002622  90D8               	bcf	status,0,c
  3055  002624  37CD               	rlcf	??_doDM& (0+255),f,b
  3056  002626  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  3057  002628  90D8               	bcf	status,0,c
  3058  00262A  37CD               	rlcf	??_doDM& (0+255),f,b
  3059  00262C  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  3060  00262E  0012               	return	
  3061  002630                     __end_ofPL2:
  3062                           	opt stack 0
  3063  002630                     PL16:
  3064                           	opt stack 22
  3065  002630  0E92               	movlw	146
  3066  002632  25CD               	addwf	??_doDM& (0+255),w,b
  3067  002634  6E08               	movwf	?_Read_b_eep,c
  3068  002636  0E00               	movlw	0
  3069  002638  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  3070  00263A  6E09               	movwf	?_Read_b_eep+1,c
  3071  00263C  0012               	return	
  3072  00263E                     __end_ofPL16:
  3073                           	opt stack 0
  3074                           tblptru	equ	0xFF8
  3075                           tblptrh	equ	0xFF7
  3076                           tblptrl	equ	0xFF6
  3077                           tablat	equ	0xFF5
  3078                           prodh	equ	0xFF4
  3079                           prodl	equ	0xFF3
  3080                           intcon	equ	0xFF2
  3081                           postinc0	equ	0xFEE
  3082                           wreg	equ	0xFE8
  3083                           indf1	equ	0xFE7
  3084                           fsr1h	equ	0xFE2
  3085                           fsr1l	equ	0xFE1
  3086                           indf2	equ	0xFDF
  3087                           postinc2	equ	0xFDE
  3088                           postdec2	equ	0xFDD
  3089                           plusw2	equ	0xFDB
  3090                           fsr2h	equ	0xFDA
  3091                           fsr2l	equ	0xFD9
  3092                           status	equ	0xFD8
  3093                           
  3094 ;; *************** function _doActionToggle *****************
  3095 ;; Defined at:
  3096 ;;		line 2170 in file "../main.c"
  3097 ;; Parameters:    Size  Location     Type
  3098 ;;  dmflags         1    wreg     unsigned char 
  3099 ;;  arg             1   80[COMRAM] unsigned char 
  3100 ;; Auto vars:     Size  Location     Type
  3101 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3102 ;;  i               1   27[BANK0 ] unsigned char 
  3103 ;;  bOn             1   26[BANK0 ] enum E15660
  3104 ;;  val             1   25[BANK0 ] unsigned char 
  3105 ;; Return value:  Size  Location     Type
  3106 ;;		None               void
  3107 ;; Registers used:
  3108 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3109 ;; Tracked objects:
  3110 ;;		On entry : F/0
  3111 ;;		On exit  : F/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3114 ;;      Params:         1       0       0       0       0       0       0
  3115 ;;      Locals:         0       4       0       0       0       0       0
  3116 ;;      Temps:          0       2       0       0       0       0       0
  3117 ;;      Totals:         1       6       0       0       0       0       0
  3118 ;;Total ram usage:        7 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    7
  3121 ;; This function calls:
  3122 ;;		_Read_b_eep
  3123 ;;		_SendInformationEvent
  3124 ;; This function is called by:
  3125 ;;		_doDM
  3126 ;; This function uses a non-reentrant model
  3127 ;;
  3128                           
  3129                           	psect	text9
  3130  002B46                     __ptext9:
  3131                           	opt stack 0
  3132  002B46                     _doActionToggle:
  3133                           	opt stack 22
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;incstack = 0
  3137                           ;incstack = 0
  3138                           ;doActionToggle@dmflags stored from wreg
  3139  002B46  CFE8 F0C9          	movff	wreg,doActionToggle@dmflags
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;main.c: 2172: unsigned char i;
  3143                           ;main.c: 2173: unsigned char val;
  3144                           ;main.c: 2174: BOOL bOn = 0;
  3145  002B4A  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3146                           
  3147                           ;main.c: 2176: for ( i = 0; i < 8; i++ ) {
  3148  002B4C  6BCC               	clrf	doActionToggle@i& (0+255),b
  3149  002B4E                     l11241:
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;main.c: 2179: if ( !( arg & (1 << i) ) ) continue;
  3153  002B4E  C0CC  F0C7         	movff	doActionToggle@i,??_doActionToggle
  3154  002B52  0E01               	movlw	1
  3155  002B54  6FC8               	movwf	(??_doActionToggle+1)& (0+255),b
  3156  002B56  2BC7               	incf	??_doActionToggle& (0+255),f,b
  3157  002B58  D002               	goto	u13504
  3158  002B5A                     u13505:
  3159  002B5A  90D8               	bcf	status,0,c
  3160  002B5C  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3161  002B5E                     u13504:
  3162  002B5E  2FC7               	decfsz	??_doActionToggle& (0+255),f,b
  3163  002B60  D7FC               	goto	u13505
  3164  002B62  51C8               	movf	(??_doActionToggle+1)& (0+255),w,b
  3165  002B64  1451               	andwf	doActionToggle@arg,w,c
  3166  002B66  E101 D092          	bz	l11303
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;main.c: 2182: if ( dmflags & 0x10 ) {
  3170  002B6A  A9C9               	btfss	doActionToggle@dmflags& (0+255),4,b
  3171  002B6C  D011               	goto	l552
  3172                           
  3173                           ; BSR set to: 0
  3174                           ;main.c: 2183: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3175  002B6E  90D8               	bcf	status,0,c
  3176  002B70  35CC               	rlcf	doActionToggle@i& (0+255),w,b
  3177  002B72  6FC7               	movwf	??_doActionToggle& (0+255),b
  3178  002B74  6BC8               	clrf	(??_doActionToggle+1)& (0+255),b
  3179  002B76  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3180  002B78  0E75               	movlw	117
  3181  002B7A  25C7               	addwf	??_doActionToggle& (0+255),w,b
  3182  002B7C  6E08               	movwf	?_Read_b_eep,c
  3183  002B7E  0E00               	movlw	0
  3184  002B80  21C8               	addwfc	(??_doActionToggle+1)& (0+255),w,b
  3185  002B82  6E09               	movwf	?_Read_b_eep+1,c
  3186  002B84  ECB6  F01E         	call	_Read_b_eep	;wreg free
  3187  002B88  0100               	movlb	0	; () banked
  3188  002B8A  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3189  002B8C  E001 D07F          	bnz	l11303
  3190  002B90                     l552:
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;main.c: 2186: }
  3194                           ;main.c: 2187: }
  3195                           ;main.c: 2190: if ( dmflags & 0x08 ) {
  3196  002B90  A7C9               	btfss	doActionToggle@dmflags& (0+255),3,b
  3197  002B92  D010               	goto	l11253
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;main.c: 2191: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  3201  002B94  90D8               	bcf	status,0,c
  3202  002B96  35CC               	rlcf	doActionToggle@i& (0+255),w,b
  3203  002B98  6FC7               	movwf	??_doActionToggle& (0+255),b
  3204  002B9A  6BC8               	clrf	(??_doActionToggle+1)& (0+255),b
  3205  002B9C  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3206  002B9E  0E76               	movlw	118
  3207  002BA0  25C7               	addwf	??_doActionToggle& (0+255),w,b
  3208  002BA2  6E08               	movwf	?_Read_b_eep,c
  3209  002BA4  0E00               	movlw	0
  3210  002BA6  21C8               	addwfc	(??_doActionToggle+1)& (0+255),w,b
  3211  002BA8  6E09               	movwf	?_Read_b_eep+1,c
  3212  002BAA  ECB6  F01E         	call	_Read_b_eep	;wreg free
  3213  002BAE  0100               	movlb	0	; () banked
  3214  002BB0  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3215  002BB2  E16D               	bnz	l11303
  3216  002BB4                     l11253:
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;main.c: 2194: }
  3220                           ;main.c: 2195: }
  3221                           ;main.c: 2197: val = Read_b_eep(0x43 + 10 + i);
  3222  002BB4  0E4D               	movlw	77
  3223  002BB6  25CC               	addwf	doActionToggle@i& (0+255),w,b
  3224  002BB8  6E08               	movwf	?_Read_b_eep,c
  3225  002BBA  6A09               	clrf	?_Read_b_eep+1,c
  3226  002BBC  0E00               	movlw	0
  3227  002BBE  2209               	addwfc	?_Read_b_eep+1,f,c
  3228  002BC0  ECB6  F01E         	call	_Read_b_eep	;wreg free
  3229  002BC4  0100               	movlb	0	; () banked
  3230  002BC6  6FCA               	movwf	doActionToggle@val& (0+255),b
  3231                           
  3232                           ;main.c: 2199: switch ( i ) {
  3233  002BC8  D02D               	goto	l11285
  3234  002BCA                     l557:
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;main.c: 2202: if ( LATBbits.LATB4 ) {
  3238  002BCA  A88A               	btfss	3978,4,c	;volatile
  3239  002BCC  D002               	goto	l558
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;main.c: 2203: LATBbits.LATB4 = 0;
  3243  002BCE  988A               	bcf	3978,4,c	;volatile
  3244  002BD0  D025               	goto	L12
  3245  002BD2                     l558:
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;main.c: 2206: LATBbits.LATB4 = 1;
  3249  002BD2  888A               	bsf	3978,4,c	;volatile
  3250  002BD4                     l11257:
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;main.c: 2207: bOn = 1;
  3254  002BD4  0E01               	movlw	1
  3255  002BD6  6FCB               	movwf	doActionToggle@bOn& (0+255),b
  3256  002BD8  D033               	goto	l11287
  3257  002BDA                     l561:
  3258                           
  3259                           ; BSR set to: 0
  3260                           ;main.c: 2212: if ( LATBbits.LATB1 ) {
  3261  002BDA  A28A               	btfss	3978,1,c	;volatile
  3262  002BDC  D002               	goto	l562
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;main.c: 2213: LATBbits.LATB1 = 0;
  3266  002BDE  928A               	bcf	3978,1,c	;volatile
  3267  002BE0  D01D               	goto	L12
  3268  002BE2                     l562:
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;main.c: 2216: LATBbits.LATB1 = 1;
  3272  002BE2  828A               	bsf	3978,1,c	;volatile
  3273  002BE4  D7F7               	goto	l11257
  3274  002BE6                     l564:
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;main.c: 2222: if ( LATBbits.LATB0 ) {
  3278  002BE6  A08A               	btfss	3978,0,c	;volatile
  3279  002BE8  D002               	goto	l565
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;main.c: 2223: LATBbits.LATB0 = 0;
  3283  002BEA  908A               	bcf	3978,0,c	;volatile
  3284  002BEC  D017               	goto	L12
  3285  002BEE                     l565:
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;main.c: 2226: LATBbits.LATB0 = 1;
  3289  002BEE  808A               	bsf	3978,0,c	;volatile
  3290  002BF0  D7F1               	goto	l11257
  3291  002BF2                     l567:
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;main.c: 2232: if ( LATCbits.LATC7 ) {
  3295  002BF2  AE8B               	btfss	3979,7,c	;volatile
  3296  002BF4  D002               	goto	l568
  3297                           
  3298                           ; BSR set to: 0
  3299                           ;main.c: 2233: LATCbits.LATC7 = 0;
  3300  002BF6  9E8B               	bcf	3979,7,c	;volatile
  3301  002BF8  D011               	goto	L12
  3302  002BFA                     l568:
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;main.c: 2236: LATCbits.LATC7 = 1;
  3306  002BFA  8E8B               	bsf	3979,7,c	;volatile
  3307  002BFC  D7EB               	goto	l11257
  3308  002BFE                     l570:
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;main.c: 2242: if ( LATCbits.LATC6 ) {
  3312  002BFE  AC8B               	btfss	3979,6,c	;volatile
  3313  002C00  D002               	goto	l571
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;main.c: 2243: LATCbits.LATC6 = 0;
  3317  002C02  9C8B               	bcf	3979,6,c	;volatile
  3318  002C04  D00B               	goto	L12
  3319  002C06                     l571:
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;main.c: 2246: LATCbits.LATC6 = 1;
  3323  002C06  8C8B               	bsf	3979,6,c	;volatile
  3324  002C08  D7E5               	goto	l11257
  3325  002C0A                     l573:
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;main.c: 2252: if ( LATCbits.LATC5 ) {
  3329  002C0A  AA8B               	btfss	3979,5,c	;volatile
  3330  002C0C  D002               	goto	l574
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;main.c: 2253: LATCbits.LATC5 = 0;
  3334  002C0E  9A8B               	bcf	3979,5,c	;volatile
  3335  002C10  D005               	goto	L12
  3336  002C12                     l574:
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;main.c: 2256: LATCbits.LATC5 = 1;
  3340  002C12  8A8B               	bsf	3979,5,c	;volatile
  3341  002C14  D7DF               	goto	l11257
  3342  002C16                     l576:
  3343                           
  3344                           ; BSR set to: 0
  3345                           ;main.c: 2262: if ( LATCbits.LATC4 ) {
  3346  002C16  A88B               	btfss	3979,4,c	;volatile
  3347  002C18  D003               	goto	l577
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;main.c: 2263: LATCbits.LATC4 = 0;
  3351  002C1A  988B               	bcf	3979,4,c	;volatile
  3352  002C1C                     L12:
  3353                           
  3354                           ;main.c: 2264: bOn = 0;
  3355  002C1C  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3356                           
  3357                           ;main.c: 2265: } else {
  3358  002C1E  D010               	goto	l11287
  3359  002C20                     l577:
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;main.c: 2266: LATCbits.LATC4 = 1;
  3363  002C20  888B               	bsf	3979,4,c	;volatile
  3364  002C22  D7D8               	goto	l11257
  3365  002C24                     l11285:
  3366                           
  3367                           ; BSR set to: 0
  3368  002C24  51CC               	movf	doActionToggle@i& (0+255),w,b
  3369                           
  3370                           ; Switch size 1, requested type "space"
  3371                           ; Number of cases is 7, Range of values is 0 to 6
  3372                           ; switch strategies available:
  3373                           ; Name         Instructions Cycles
  3374                           ; simple_byte           22    12 (average)
  3375                           ;	Chosen strategy is simple_byte
  3376  002C26  E0D1               	bz	l557
  3377  002C28  0A01               	xorlw	1	; case 1
  3378  002C2A  E0D7               	bz	l561
  3379  002C2C  0A03               	xorlw	3	; case 2
  3380  002C2E  E0DB               	bz	l564
  3381  002C30  0A01               	xorlw	1	; case 3
  3382  002C32  E0DF               	bz	l567
  3383  002C34  0A07               	xorlw	7	; case 4
  3384  002C36  E0E3               	bz	l570
  3385  002C38  0A01               	xorlw	1	; case 5
  3386  002C3A  E0E7               	bz	l573
  3387  002C3C  0A03               	xorlw	3	; case 6
  3388  002C3E  E0EB               	bz	l576
  3389  002C40                     l11287:
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;main.c: 2273: if ( bOn ) {
  3393  002C40  51CB               	movf	doActionToggle@bOn& (0+255),w,b
  3394  002C42  E013               	bz	l579
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;main.c: 2276: if ( val & 0x08 ) {
  3398  002C44  A7CA               	btfss	doActionToggle@val& (0+255),3,b
  3399  002C46  D007               	goto	l11293
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;main.c: 2277: SendInformationEvent( i, 20, 3 );
  3403  002C48  0E14               	movlw	20
  3404  002C4A  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3405  002C4C  0E03               	movlw	3
  3406  002C4E  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3407  002C50  51CC               	movf	doActionToggle@i& (0+255),w,b
  3408  002C52  EC12  F01C         	call	_SendInformationEvent
  3409  002C56                     l11293:
  3410                           
  3411                           ; BSR set to: 0
  3412                           ;main.c: 2278: }
  3413                           ;main.c: 2281: if ( val & 0x20 ) {
  3414  002C56  ABCA               	btfss	doActionToggle@val& (0+255),5,b
  3415  002C58  D01A               	goto	l11303
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;main.c: 2282: SendInformationEvent( i, 20, 25 );
  3419  002C5A  0E14               	movlw	20
  3420  002C5C  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3421  002C5E  0E19               	movlw	25
  3422  002C60  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3423  002C62  51CC               	movf	doActionToggle@i& (0+255),w,b
  3424  002C64  EC12  F01C         	call	_SendInformationEvent
  3425  002C68  D012               	goto	l11303
  3426  002C6A                     l579:
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;main.c: 2286: else {
  3430                           ;main.c: 2289: if ( val & 0x10 ) {
  3431  002C6A  A9CA               	btfss	doActionToggle@val& (0+255),4,b
  3432  002C6C  D007               	goto	l11299
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;main.c: 2290: SendInformationEvent( i, 20, 4 );
  3436  002C6E  0E14               	movlw	20
  3437  002C70  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3438  002C72  0E04               	movlw	4
  3439  002C74  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3440  002C76  51CC               	movf	doActionToggle@i& (0+255),w,b
  3441  002C78  EC12  F01C         	call	_SendInformationEvent
  3442  002C7C                     l11299:
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;main.c: 2291: }
  3446                           ;main.c: 2294: if (val & 0x40 ) {
  3447  002C7C  ADCA               	btfss	doActionToggle@val& (0+255),6,b
  3448  002C7E  D007               	goto	l11303
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;main.c: 2295: SendInformationEvent( i, 20, 24 );
  3452  002C80  0E14               	movlw	20
  3453  002C82  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3454  002C84  0E18               	movlw	24
  3455  002C86  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3456  002C88  51CC               	movf	doActionToggle@i& (0+255),w,b
  3457  002C8A  EC12  F01C         	call	_SendInformationEvent
  3458  002C8E                     l11303:
  3459                           
  3460                           ; BSR set to: 0
  3461  002C8E  2BCC               	incf	doActionToggle@i& (0+255),f,b
  3462                           
  3463                           ; BSR set to: 0
  3464  002C90  0E07               	movlw	7
  3465  002C92  65CC               	cpfsgt	doActionToggle@i& (0+255),b
  3466  002C94  D75C               	goto	l11241
  3467                           
  3468                           ; BSR set to: 0
  3469  002C96  0C07               	retlw	7
  3470  002C98                     __end_of_doActionToggle:
  3471                           	opt stack 0
  3472                           tblptru	equ	0xFF8
  3473                           tblptrh	equ	0xFF7
  3474                           tblptrl	equ	0xFF6
  3475                           tablat	equ	0xFF5
  3476                           prodh	equ	0xFF4
  3477                           prodl	equ	0xFF3
  3478                           intcon	equ	0xFF2
  3479                           postinc0	equ	0xFEE
  3480                           wreg	equ	0xFE8
  3481                           indf1	equ	0xFE7
  3482                           fsr1h	equ	0xFE2
  3483                           fsr1l	equ	0xFE1
  3484                           indf2	equ	0xFDF
  3485                           postinc2	equ	0xFDE
  3486                           postdec2	equ	0xFDD
  3487                           plusw2	equ	0xFDB
  3488                           fsr2h	equ	0xFDA
  3489                           fsr2l	equ	0xFD9
  3490                           status	equ	0xFD8
  3491                           
  3492 ;; *************** function _doActionDisable *****************
  3493 ;; Defined at:
  3494 ;;		line 2133 in file "../main.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;  dmflags         1    wreg     unsigned char 
  3497 ;;  arg             1   11[COMRAM] unsigned char 
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;  dmflags         1   15[COMRAM] unsigned char 
  3500 ;;  i               1   16[COMRAM] unsigned char 
  3501 ;;  val             1   14[COMRAM] unsigned char 
  3502 ;; Return value:  Size  Location     Type
  3503 ;;		None               void
  3504 ;; Registers used:
  3505 ;;		wreg, status,2, status,0, cstack
  3506 ;; Tracked objects:
  3507 ;;		On entry : F/0
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3511 ;;      Params:         1       0       0       0       0       0       0
  3512 ;;      Locals:         3       0       0       0       0       0       0
  3513 ;;      Temps:          2       0       0       0       0       0       0
  3514 ;;      Totals:         6       0       0       0       0       0       0
  3515 ;;Total ram usage:        6 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:    3
  3518 ;; This function calls:
  3519 ;;		_Busy_eep
  3520 ;;		_Write_b_eep
  3521 ;;		_Read_b_eep
  3522 ;; This function is called by:
  3523 ;;		_doDM
  3524 ;; This function uses a non-reentrant model
  3525 ;;
  3526                           
  3527                           	psect	text10
  3528  003602                     __ptext10:
  3529                           	opt stack 0
  3530  003602                     _doActionDisable:
  3531                           	opt stack 26
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;incstack = 0
  3535                           ;incstack = 0
  3536                           ;doActionDisable@dmflags stored from wreg
  3537  003602  CFE8 F010          	movff	wreg,doActionDisable@dmflags
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;main.c: 2135: unsigned char i;
  3541                           ;main.c: 2136: unsigned char val;
  3542                           ;main.c: 2138: for ( i = 0; i < 8; i++ ) {
  3543  003606  6A11               	clrf	doActionDisable@i,c
  3544  003608                     l9469:
  3545                           
  3546                           ;main.c: 2141: if ( !( arg & (1 << i) ) ) continue;
  3547  003608  C011  F00D         	movff	doActionDisable@i,??_doActionDisable
  3548  00360C  0E01               	movlw	1
  3549  00360E  6E0E               	movwf	(??_doActionDisable+1)& (0+255),c
  3550  003610  2A0D               	incf	??_doActionDisable,f,c
  3551  003612  D002               	goto	u10604
  3552  003614                     u10605:
  3553  003614  90D8               	bcf	status,0,c
  3554  003616  360E               	rlcf	??_doActionDisable+1,f,c
  3555  003618                     u10604:
  3556  003618  2E0D               	decfsz	??_doActionDisable,f,c
  3557  00361A  D7FC               	goto	u10605
  3558  00361C  500E               	movf	??_doActionDisable+1,w,c
  3559  00361E  140C               	andwf	doActionDisable@arg,w,c
  3560  003620  E03A               	bz	l9487
  3561                           
  3562                           ;main.c: 2144: if ( dmflags & 0x10 ) {
  3563  003622  A810               	btfss	doActionDisable@dmflags,4,c
  3564  003624  D010               	goto	l541
  3565                           
  3566                           ;main.c: 2145: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3567  003626  90D8               	bcf	status,0,c
  3568  003628  3411               	rlcf	doActionDisable@i,w,c
  3569  00362A  6E0D               	movwf	??_doActionDisable& (0+255),c
  3570  00362C  6A0E               	clrf	(??_doActionDisable+1)& (0+255),c
  3571  00362E  360E               	rlcf	(??_doActionDisable+1)& (0+255),f,c
  3572  003630  0E75               	movlw	117
  3573  003632  240D               	addwf	??_doActionDisable,w,c
  3574  003634  6E08               	movwf	?_Read_b_eep,c
  3575  003636  0E00               	movlw	0
  3576  003638  200E               	addwfc	??_doActionDisable+1,w,c
  3577  00363A  6E09               	movwf	?_Read_b_eep+1,c
  3578  00363C  ECB6  F01E         	call	_Read_b_eep	;wreg free
  3579  003640  0100               	movlb	0	; () banked
  3580  003642  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3581  003644  E128               	bnz	l9487
  3582  003646                     l541:
  3583                           
  3584                           ;main.c: 2148: }
  3585                           ;main.c: 2149: }
  3586                           ;main.c: 2152: if ( dmflags & 0x08 ) {
  3587  003646  A610               	btfss	doActionDisable@dmflags,3,c
  3588  003648  D010               	goto	l9481
  3589                           
  3590                           ;main.c: 2153: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  3591  00364A  90D8               	bcf	status,0,c
  3592  00364C  3411               	rlcf	doActionDisable@i,w,c
  3593  00364E  6E0D               	movwf	??_doActionDisable& (0+255),c
  3594  003650  6A0E               	clrf	(??_doActionDisable+1)& (0+255),c
  3595  003652  360E               	rlcf	(??_doActionDisable+1)& (0+255),f,c
  3596  003654  0E76               	movlw	118
  3597  003656  240D               	addwf	??_doActionDisable,w,c
  3598  003658  6E08               	movwf	?_Read_b_eep,c
  3599  00365A  0E00               	movlw	0
  3600  00365C  200E               	addwfc	??_doActionDisable+1,w,c
  3601  00365E  6E09               	movwf	?_Read_b_eep+1,c
  3602  003660  ECB6  F01E         	call	_Read_b_eep	;wreg free
  3603  003664  0100               	movlb	0	; () banked
  3604  003666  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3605  003668  E116               	bnz	l9487
  3606  00366A                     l9481:
  3607                           
  3608                           ;main.c: 2156: }
  3609                           ;main.c: 2157: }
  3610                           ;main.c: 2159: val = Read_b_eep(0x43 + 10 + i);
  3611  00366A  0E4D               	movlw	77
  3612  00366C  2411               	addwf	doActionDisable@i,w,c
  3613  00366E  6E08               	movwf	?_Read_b_eep,c
  3614  003670  6A09               	clrf	?_Read_b_eep+1,c
  3615  003672  0E00               	movlw	0
  3616  003674  2209               	addwfc	?_Read_b_eep+1,f,c
  3617  003676  ECB6  F01E         	call	_Read_b_eep	;wreg free
  3618  00367A  6E0F               	movwf	doActionDisable@val,c
  3619                           
  3620                           ;main.c: 2160: (Busy_eep(), Write_b_eep(0x43 + 10 + i,val & ~0x80));
  3621  00367C  ECEA  F01E         	call	_Busy_eep	;wreg free
  3622  003680  0E4D               	movlw	77
  3623  003682  2411               	addwf	doActionDisable@i,w,c
  3624  003684  6E08               	movwf	?_Write_b_eep,c
  3625  003686  6A09               	clrf	?_Write_b_eep+1,c
  3626  003688  0E00               	movlw	0
  3627  00368A  2209               	addwfc	?_Write_b_eep+1,f,c
  3628  00368C  500F               	movf	doActionDisable@val,w,c
  3629  00368E  0B7F               	andlw	127
  3630  003690  6E0A               	movwf	?_Write_b_eep+2,c
  3631  003692  ECCF  F01C         	call	_Write_b_eep	;wreg free
  3632  003696                     l9487:
  3633  003696  2A11               	incf	doActionDisable@i,f,c
  3634  003698  0E07               	movlw	7
  3635  00369A  6411               	cpfsgt	doActionDisable@i,c
  3636  00369C  D7B5               	goto	l9469
  3637  00369E  0C07               	retlw	7
  3638  0036A0                     __end_of_doActionDisable:
  3639                           	opt stack 0
  3640                           tblptru	equ	0xFF8
  3641                           tblptrh	equ	0xFF7
  3642                           tblptrl	equ	0xFF6
  3643                           tablat	equ	0xFF5
  3644                           prodh	equ	0xFF4
  3645                           prodl	equ	0xFF3
  3646                           intcon	equ	0xFF2
  3647                           postinc0	equ	0xFEE
  3648                           wreg	equ	0xFE8
  3649                           indf1	equ	0xFE7
  3650                           fsr1h	equ	0xFE2
  3651                           fsr1l	equ	0xFE1
  3652                           indf2	equ	0xFDF
  3653                           postinc2	equ	0xFDE
  3654                           postdec2	equ	0xFDD
  3655                           plusw2	equ	0xFDB
  3656                           fsr2h	equ	0xFDA
  3657                           fsr2l	equ	0xFD9
  3658                           status	equ	0xFD8
  3659                           
  3660 ;; *************** function _doActionStatus *****************
  3661 ;; Defined at:
  3662 ;;		line 2037 in file "../main.c"
  3663 ;; Parameters:    Size  Location     Type
  3664 ;;  dmflags         1    wreg     unsigned char 
  3665 ;;  arg             1   80[COMRAM] unsigned char 
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3668 ;;  i               1   27[BANK0 ] unsigned char 
  3669 ;;  val             1   26[BANK0 ] unsigned char 
  3670 ;;  bOn             1   25[BANK0 ] enum E15660
  3671 ;; Return value:  Size  Location     Type
  3672 ;;		None               void
  3673 ;; Registers used:
  3674 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3675 ;; Tracked objects:
  3676 ;;		On entry : F/0
  3677 ;;		On exit  : F/0
  3678 ;;		Unchanged: 0/0
  3679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3680 ;;      Params:         1       0       0       0       0       0       0
  3681 ;;      Locals:         0       4       0       0       0       0       0
  3682 ;;      Temps:          0       2       0       0       0       0       0
  3683 ;;      Totals:         1       6       0       0       0       0       0
  3684 ;;Total ram usage:        7 bytes
  3685 ;; Hardware stack levels used:    1
  3686 ;; Hardware stack levels required when called:    7
  3687 ;; This function calls:
  3688 ;;		_Read_b_eep
  3689 ;;		_SendInformationEvent
  3690 ;; This function is called by:
  3691 ;;		_doDM
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           	psect	text11
  3696  002C98                     __ptext11:
  3697                           	opt stack 0
  3698  002C98                     _doActionStatus:
  3699                           	opt stack 22
  3700                           
  3701                           ;incstack = 0
  3702                           ;incstack = 0
  3703                           ;doActionStatus@dmflags stored from wreg
  3704  002C98  CFE8 F0C9          	movff	wreg,doActionStatus@dmflags
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;main.c: 2039: unsigned char i;
  3708                           ;main.c: 2040: unsigned char val;
  3709                           ;main.c: 2041: BOOL bOn = 0;
  3710  002C9C  6BCA               	clrf	doActionStatus@bOn& (0+255),b
  3711                           
  3712                           ;main.c: 2043: for (i = 0; i < 8; i++) {
  3713  002C9E  6BCC               	clrf	doActionStatus@i& (0+255),b
  3714  002CA0                     l11183:
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;main.c: 2046: if (!(arg & (1 << i))) continue;
  3718  002CA0  C0CC  F0C7         	movff	doActionStatus@i,??_doActionStatus
  3719  002CA4  0E01               	movlw	1
  3720  002CA6  6FC8               	movwf	(??_doActionStatus+1)& (0+255),b
  3721  002CA8  2BC7               	incf	??_doActionStatus& (0+255),f,b
  3722  002CAA  D002               	goto	u13384
  3723  002CAC                     u13385:
  3724  002CAC  90D8               	bcf	status,0,c
  3725  002CAE  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3726  002CB0                     u13384:
  3727  002CB0  2FC7               	decfsz	??_doActionStatus& (0+255),f,b
  3728  002CB2  D7FC               	goto	u13385
  3729  002CB4  51C8               	movf	(??_doActionStatus+1)& (0+255),w,b
  3730  002CB6  1451               	andwf	doActionStatus@arg,w,c
  3731  002CB8  E101 D087          	bz	l11231
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;main.c: 2049: if ( dmflags & 0x10 ) {
  3735  002CBC  A9C9               	btfss	doActionStatus@dmflags& (0+255),4,b
  3736  002CBE  D010               	goto	l515
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;main.c: 2050: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3740  002CC0  90D8               	bcf	status,0,c
  3741  002CC2  35CC               	rlcf	doActionStatus@i& (0+255),w,b
  3742  002CC4  6FC7               	movwf	??_doActionStatus& (0+255),b
  3743  002CC6  6BC8               	clrf	(??_doActionStatus+1)& (0+255),b
  3744  002CC8  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3745  002CCA  0E75               	movlw	117
  3746  002CCC  25C7               	addwf	??_doActionStatus& (0+255),w,b
  3747  002CCE  6E08               	movwf	?_Read_b_eep,c
  3748  002CD0  0E00               	movlw	0
  3749  002CD2  21C8               	addwfc	(??_doActionStatus+1)& (0+255),w,b
  3750  002CD4  6E09               	movwf	?_Read_b_eep+1,c
  3751  002CD6  ECB6  F01E         	call	_Read_b_eep	;wreg free
  3752  002CDA  0100               	movlb	0	; () banked
  3753  002CDC  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3754  002CDE  E175               	bnz	l11231
  3755  002CE0                     l515:
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;main.c: 2053: }
  3759                           ;main.c: 2054: }
  3760                           ;main.c: 2057: if ( dmflags & 0x08 ) {
  3761  002CE0  A7C9               	btfss	doActionStatus@dmflags& (0+255),3,b
  3762  002CE2  D010               	goto	l11195
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;main.c: 2058: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  3766  002CE4  90D8               	bcf	status,0,c
  3767  002CE6  35CC               	rlcf	doActionStatus@i& (0+255),w,b
  3768  002CE8  6FC7               	movwf	??_doActionStatus& (0+255),b
  3769  002CEA  6BC8               	clrf	(??_doActionStatus+1)& (0+255),b
  3770  002CEC  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3771  002CEE  0E76               	movlw	118
  3772  002CF0  25C7               	addwf	??_doActionStatus& (0+255),w,b
  3773  002CF2  6E08               	movwf	?_Read_b_eep,c
  3774  002CF4  0E00               	movlw	0
  3775  002CF6  21C8               	addwfc	(??_doActionStatus+1)& (0+255),w,b
  3776  002CF8  6E09               	movwf	?_Read_b_eep+1,c
  3777  002CFA  ECB6  F01E         	call	_Read_b_eep	;wreg free
  3778  002CFE  0100               	movlb	0	; () banked
  3779  002D00  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3780  002D02  E163               	bnz	l11231
  3781  002D04                     l11195:
  3782                           
  3783                           ; BSR set to: 0
  3784                           ;main.c: 2061: }
  3785                           ;main.c: 2062: }
  3786                           ;main.c: 2064: val = Read_b_eep(0x43 + 10 + i);
  3787  002D04  0E4D               	movlw	77
  3788  002D06  25CC               	addwf	doActionStatus@i& (0+255),w,b
  3789  002D08  6E08               	movwf	?_Read_b_eep,c
  3790  002D0A  6A09               	clrf	?_Read_b_eep+1,c
  3791  002D0C  0E00               	movlw	0
  3792  002D0E  2209               	addwfc	?_Read_b_eep+1,f,c
  3793  002D10  ECB6  F01E         	call	_Read_b_eep	;wreg free
  3794  002D14  0100               	movlb	0	; () banked
  3795  002D16  6FCB               	movwf	doActionStatus@val& (0+255),b
  3796                           
  3797                           ;main.c: 2066: switch (i) {
  3798  002D18  D023               	goto	l11213
  3799  002D1A                     l11197:
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;main.c: 2069: bOn = LATBbits.LATB4;
  3803  002D1A  0E00               	movlw	0
  3804  002D1C  B88A               	btfsc	3978,4,c	;volatile
  3805  002D1E  0E01               	movlw	1
  3806  002D20  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3807                           
  3808                           ;main.c: 2070: break;
  3809  002D22  D02C               	goto	l11215
  3810  002D24                     l11199:
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;main.c: 2073: bOn = LATBbits.LATB1;
  3814  002D24  0E00               	movlw	0
  3815  002D26  B28A               	btfsc	3978,1,c	;volatile
  3816  002D28  0E01               	movlw	1
  3817  002D2A  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3818                           
  3819                           ;main.c: 2074: break;
  3820  002D2C  D027               	goto	l11215
  3821  002D2E                     l11201:
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;main.c: 2077: bOn = LATBbits.LATB0;
  3825  002D2E  0E00               	movlw	0
  3826  002D30  B08A               	btfsc	3978,0,c	;volatile
  3827  002D32  0E01               	movlw	1
  3828  002D34  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3829                           
  3830                           ;main.c: 2078: break;
  3831  002D36  D022               	goto	l11215
  3832  002D38                     l11203:
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;main.c: 2081: bOn = LATCbits.LATC7;
  3836  002D38  0E00               	movlw	0
  3837  002D3A  BE8B               	btfsc	3979,7,c	;volatile
  3838  002D3C  0E01               	movlw	1
  3839  002D3E  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3840                           
  3841                           ;main.c: 2082: break;
  3842  002D40  D01D               	goto	l11215
  3843  002D42                     l11205:
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;main.c: 2085: bOn = LATCbits.LATC6;
  3847  002D42  0E00               	movlw	0
  3848  002D44  BC8B               	btfsc	3979,6,c	;volatile
  3849  002D46  0E01               	movlw	1
  3850  002D48  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3851                           
  3852                           ;main.c: 2086: break;
  3853  002D4A  D018               	goto	l11215
  3854  002D4C                     l11207:
  3855                           
  3856                           ; BSR set to: 0
  3857                           ;main.c: 2089: bOn = LATCbits.LATC5;
  3858  002D4C  0E00               	movlw	0
  3859  002D4E  BA8B               	btfsc	3979,5,c	;volatile
  3860  002D50  0E01               	movlw	1
  3861  002D52  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3862                           
  3863                           ;main.c: 2090: break;
  3864  002D54  D013               	goto	l11215
  3865  002D56                     l11209:
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;main.c: 2093: bOn = LATCbits.LATC4;
  3869  002D56  0E00               	movlw	0
  3870  002D58  B88B               	btfsc	3979,4,c	;volatile
  3871  002D5A  0E01               	movlw	1
  3872  002D5C  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3873                           
  3874                           ;main.c: 2094: break;
  3875  002D5E  D00E               	goto	l11215
  3876  002D60                     l11213:
  3877                           
  3878                           ; BSR set to: 0
  3879  002D60  51CC               	movf	doActionStatus@i& (0+255),w,b
  3880                           
  3881                           ; Switch size 1, requested type "space"
  3882                           ; Number of cases is 7, Range of values is 0 to 6
  3883                           ; switch strategies available:
  3884                           ; Name         Instructions Cycles
  3885                           ; simple_byte           22    12 (average)
  3886                           ;	Chosen strategy is simple_byte
  3887  002D62  E0DB               	bz	l11197
  3888  002D64  0A01               	xorlw	1	; case 1
  3889  002D66  E0DE               	bz	l11199
  3890  002D68  0A03               	xorlw	3	; case 2
  3891  002D6A  E0E1               	bz	l11201
  3892  002D6C  0A01               	xorlw	1	; case 3
  3893  002D6E  E0E4               	bz	l11203
  3894  002D70  0A07               	xorlw	7	; case 4
  3895  002D72  E0E7               	bz	l11205
  3896  002D74  0A01               	xorlw	1	; case 5
  3897  002D76  E0EA               	bz	l11207
  3898  002D78  0A03               	xorlw	3	; case 6
  3899  002D7A  E0ED               	bz	l11209
  3900  002D7C                     l11215:
  3901                           
  3902                           ; BSR set to: 0
  3903                           ;main.c: 2098: if (bOn) {
  3904  002D7C  51CA               	movf	doActionStatus@bOn& (0+255),w,b
  3905  002D7E  E013               	bz	l528
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;main.c: 2101: if ( val & 0x10 ) {
  3909  002D80  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3910  002D82  D007               	goto	l11221
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;main.c: 2102: SendInformationEvent( i, 20, 4 );
  3914  002D84  0E14               	movlw	20
  3915  002D86  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3916  002D88  0E04               	movlw	4
  3917  002D8A  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3918  002D8C  51CC               	movf	doActionStatus@i& (0+255),w,b
  3919  002D8E  EC12  F01C         	call	_SendInformationEvent
  3920  002D92                     l11221:
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;main.c: 2103: }
  3924                           ;main.c: 2106: if ( val & 0x40 ) {
  3925  002D92  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3926  002D94  D01A               	goto	l11231
  3927                           
  3928                           ; BSR set to: 0
  3929                           ;main.c: 2107: SendInformationEvent( i, 20, 24 );
  3930  002D96  0E14               	movlw	20
  3931  002D98  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3932  002D9A  0E18               	movlw	24
  3933  002D9C  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3934  002D9E  51CC               	movf	doActionStatus@i& (0+255),w,b
  3935  002DA0  EC12  F01C         	call	_SendInformationEvent
  3936  002DA4  D012               	goto	l11231
  3937  002DA6                     l528:
  3938                           
  3939                           ; BSR set to: 0
  3940                           ;main.c: 2111: else {
  3941                           ;main.c: 2114: if ( val & 0x10 ) {
  3942  002DA6  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3943  002DA8  D007               	goto	l11227
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;main.c: 2115: SendInformationEvent( i, 20, 4 );
  3947  002DAA  0E14               	movlw	20
  3948  002DAC  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3949  002DAE  0E04               	movlw	4
  3950  002DB0  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3951  002DB2  51CC               	movf	doActionStatus@i& (0+255),w,b
  3952  002DB4  EC12  F01C         	call	_SendInformationEvent
  3953  002DB8                     l11227:
  3954                           
  3955                           ; BSR set to: 0
  3956                           ;main.c: 2116: }
  3957                           ;main.c: 2119: if ( val & 0x40 ) {
  3958  002DB8  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3959  002DBA  D007               	goto	l11231
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;main.c: 2120: SendInformationEvent( i, 20, 24 );
  3963  002DBC  0E14               	movlw	20
  3964  002DBE  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3965  002DC0  0E18               	movlw	24
  3966  002DC2  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3967  002DC4  51CC               	movf	doActionStatus@i& (0+255),w,b
  3968  002DC6  EC12  F01C         	call	_SendInformationEvent
  3969  002DCA                     l11231:
  3970                           
  3971                           ; BSR set to: 0
  3972  002DCA  2BCC               	incf	doActionStatus@i& (0+255),f,b
  3973                           
  3974                           ; BSR set to: 0
  3975  002DCC  0E07               	movlw	7
  3976  002DCE  65CC               	cpfsgt	doActionStatus@i& (0+255),b
  3977  002DD0  D767               	goto	l11183
  3978                           
  3979                           ; BSR set to: 0
  3980  002DD2  0C07               	retlw	7
  3981  002DD4                     __end_of_doActionStatus:
  3982                           	opt stack 0
  3983                           tblptru	equ	0xFF8
  3984                           tblptrh	equ	0xFF7
  3985                           tblptrl	equ	0xFF6
  3986                           tablat	equ	0xFF5
  3987                           prodh	equ	0xFF4
  3988                           prodl	equ	0xFF3
  3989                           intcon	equ	0xFF2
  3990                           postinc0	equ	0xFEE
  3991                           wreg	equ	0xFE8
  3992                           indf1	equ	0xFE7
  3993                           fsr1h	equ	0xFE2
  3994                           fsr1l	equ	0xFE1
  3995                           indf2	equ	0xFDF
  3996                           postinc2	equ	0xFDE
  3997                           postdec2	equ	0xFDD
  3998                           plusw2	equ	0xFDB
  3999                           fsr2h	equ	0xFDA
  4000                           fsr2l	equ	0xFD9
  4001                           status	equ	0xFD8
  4002                           
  4003 ;; *************** function _doActionPulse *****************
  4004 ;; Defined at:
  4005 ;;		line 1939 in file "../main.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;  dmflags         1    wreg     unsigned char 
  4008 ;;  arg             1    9[COMRAM] unsigned char 
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;  dmflags         1   14[COMRAM] unsigned char 
  4011 ;;  i               1   15[COMRAM] unsigned char 
  4012 ;;  val             1   13[COMRAM] unsigned char 
  4013 ;; Return value:  Size  Location     Type
  4014 ;;		None               void
  4015 ;; Registers used:
  4016 ;;		wreg, status,2, status,0, cstack
  4017 ;; Tracked objects:
  4018 ;;		On entry : F/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4022 ;;      Params:         1       0       0       0       0       0       0
  4023 ;;      Locals:         3       0       0       0       0       0       0
  4024 ;;      Temps:          3       0       0       0       0       0       0
  4025 ;;      Totals:         7       0       0       0       0       0       0
  4026 ;;Total ram usage:        7 bytes
  4027 ;; Hardware stack levels used:    1
  4028 ;; Hardware stack levels required when called:    3
  4029 ;; This function calls:
  4030 ;;		_Read_b_eep
  4031 ;; This function is called by:
  4032 ;;		_doDM
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           	psect	text12
  4037  00263E                     __ptext12:
  4038                           	opt stack 0
  4039  00263E                     _doActionPulse:
  4040                           	opt stack 26
  4041                           
  4042                           ; BSR set to: 0
  4043                           ;incstack = 0
  4044                           ;incstack = 0
  4045                           ;doActionPulse@dmflags stored from wreg
  4046  00263E  CFE8 F00F          	movff	wreg,doActionPulse@dmflags
  4047                           
  4048                           ; BSR set to: 0
  4049                           ;main.c: 1941: unsigned char i;
  4050                           ;main.c: 1942: unsigned char val;
  4051                           ;main.c: 1944: for ( i = 0; i < 8; i++ ) {
  4052  002642  6A10               	clrf	doActionPulse@i,c
  4053  002644                     l9351:
  4054                           
  4055                           ;main.c: 1947: if ( !( arg & ( 1 << i ) ) ) continue;
  4056  002644  C010  F00B         	movff	doActionPulse@i,??_doActionPulse
  4057  002648  0E01               	movlw	1
  4058  00264A  6E0C               	movwf	(??_doActionPulse+1)& (0+255),c
  4059  00264C  2A0B               	incf	??_doActionPulse,f,c
  4060  00264E  D002               	goto	u10404
  4061  002650                     u10405:
  4062  002650  90D8               	bcf	status,0,c
  4063  002652  360C               	rlcf	??_doActionPulse+1,f,c
  4064  002654                     u10404:
  4065  002654  2E0B               	decfsz	??_doActionPulse,f,c
  4066  002656  D7FC               	goto	u10405
  4067  002658  500C               	movf	??_doActionPulse+1,w,c
  4068  00265A  140A               	andwf	doActionPulse@arg,w,c
  4069  00265C  E101 D0EA          	bz	l9401
  4070                           
  4071                           ;main.c: 1950: if ( dmflags & 0x10 ) {
  4072  002660  A80F               	btfss	doActionPulse@dmflags,4,c
  4073  002662  D011               	goto	l494
  4074                           
  4075                           ;main.c: 1951: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  4076  002664  90D8               	bcf	status,0,c
  4077  002666  3410               	rlcf	doActionPulse@i,w,c
  4078  002668  6E0B               	movwf	??_doActionPulse& (0+255),c
  4079  00266A  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4080  00266C  360C               	rlcf	(??_doActionPulse+1)& (0+255),f,c
  4081  00266E  0E75               	movlw	117
  4082  002670  240B               	addwf	??_doActionPulse,w,c
  4083  002672  6E08               	movwf	?_Read_b_eep,c
  4084  002674  0E00               	movlw	0
  4085  002676  200C               	addwfc	??_doActionPulse+1,w,c
  4086  002678  6E09               	movwf	?_Read_b_eep+1,c
  4087  00267A  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4088  00267E  0100               	movlb	0	; () banked
  4089  002680  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  4090  002682  E001 D0D7          	bnz	l9401
  4091  002686                     l494:
  4092                           
  4093                           ;main.c: 1954: }
  4094                           ;main.c: 1955: }
  4095                           ;main.c: 1958: if ( dmflags & 0x08 ) {
  4096  002686  A60F               	btfss	doActionPulse@dmflags,3,c
  4097  002688  D011               	goto	l9363
  4098                           
  4099                           ;main.c: 1959: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  4100  00268A  90D8               	bcf	status,0,c
  4101  00268C  3410               	rlcf	doActionPulse@i,w,c
  4102  00268E  6E0B               	movwf	??_doActionPulse& (0+255),c
  4103  002690  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4104  002692  360C               	rlcf	(??_doActionPulse+1)& (0+255),f,c
  4105  002694  0E76               	movlw	118
  4106  002696  240B               	addwf	??_doActionPulse,w,c
  4107  002698  6E08               	movwf	?_Read_b_eep,c
  4108  00269A  0E00               	movlw	0
  4109  00269C  200C               	addwfc	??_doActionPulse+1,w,c
  4110  00269E  6E09               	movwf	?_Read_b_eep+1,c
  4111  0026A0  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4112  0026A4  0100               	movlb	0	; () banked
  4113  0026A6  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4114  0026A8  E001 D0C4          	bnz	l9401
  4115  0026AC                     l9363:
  4116                           
  4117                           ;main.c: 1962: }
  4118                           ;main.c: 1963: }
  4119                           ;main.c: 1965: val = Read_b_eep(0x43 + 10 + i);
  4120  0026AC  0E4D               	movlw	77
  4121  0026AE  2410               	addwf	doActionPulse@i,w,c
  4122  0026B0  6E08               	movwf	?_Read_b_eep,c
  4123  0026B2  6A09               	clrf	?_Read_b_eep+1,c
  4124  0026B4  0E00               	movlw	0
  4125  0026B6  2209               	addwfc	?_Read_b_eep+1,f,c
  4126  0026B8  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4127  0026BC  6E0E               	movwf	doActionPulse@val,c
  4128                           
  4129                           ;main.c: 1968: if ( !( val & 0x80 ) ) continue;
  4130  0026BE  AE0E               	btfss	doActionPulse@val,7,c
  4131  0026C0  D0B9               	goto	l9401
  4132  0026C2  D0A8               	goto	l9399
  4133  0026C4                     l500:
  4134                           
  4135                           ;main.c: 1973: LATBbits.LATB4 = 0;
  4136  0026C4  988A               	bcf	3978,4,c	;volatile
  4137                           
  4138                           ;main.c: 1974: relay_pulse_flags |= 0x01;
  4139  0026C6  0100               	movlb	0	; () banked
  4140  0026C8  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;main.c: 1975: relay_pulse_timer[ 0 ] =
  4144                           ;main.c: 1976: Read_b_eep(0x43 + 18) * 256 +
  4145                           ;main.c: 1977: Read_b_eep(0x43 + 19);
  4146  0026CA  6A09               	clrf	?_Read_b_eep+1,c
  4147  0026CC  0E56               	movlw	86
  4148  0026CE  6E08               	movwf	?_Read_b_eep,c
  4149  0026D0  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4150  0026D4  6E0B               	movwf	??_doActionPulse& (0+255),c
  4151  0026D6  6A09               	clrf	?_Read_b_eep+1,c
  4152  0026D8  0E55               	movlw	85
  4153  0026DA  6E08               	movwf	?_Read_b_eep,c
  4154  0026DC  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4155  0026E0  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4156  0026E2  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4157  0026E4  500B               	movf	??_doActionPulse,w,c
  4158  0026E6  240C               	addwf	??_doActionPulse+1,w,c
  4159  0026E8  0100               	movlb	0	; () banked
  4160  0026EA  6F70               	movwf	_relay_pulse_timer& (0+255),b
  4161  0026EC  0E00               	movlw	0
  4162  0026EE  200D               	addwfc	??_doActionPulse+2,w,c
  4163  0026F0  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  4164                           
  4165                           ;main.c: 1978: break;
  4166  0026F2  D0A0               	goto	l9401
  4167  0026F4                     l502:
  4168                           
  4169                           ;main.c: 1981: LATBbits.LATB1 = 0;
  4170  0026F4  928A               	bcf	3978,1,c	;volatile
  4171                           
  4172                           ;main.c: 1982: relay_pulse_flags |= 0x02;
  4173  0026F6  0100               	movlb	0	; () banked
  4174  0026F8  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;main.c: 1983: relay_pulse_timer[ 1 ] =
  4178                           ;main.c: 1984: Read_b_eep(0x43 + 20) * 256 +
  4179                           ;main.c: 1985: Read_b_eep(0x43 + 21);
  4180  0026FA  6A09               	clrf	?_Read_b_eep+1,c
  4181  0026FC  0E58               	movlw	88
  4182  0026FE  6E08               	movwf	?_Read_b_eep,c
  4183  002700  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4184  002704  6E0B               	movwf	??_doActionPulse& (0+255),c
  4185  002706  6A09               	clrf	?_Read_b_eep+1,c
  4186  002708  0E57               	movlw	87
  4187  00270A  6E08               	movwf	?_Read_b_eep,c
  4188  00270C  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4189  002710  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4190  002712  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4191  002714  500B               	movf	??_doActionPulse,w,c
  4192  002716  240C               	addwf	??_doActionPulse+1,w,c
  4193  002718  0100               	movlb	0	; () banked
  4194  00271A  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  4195  00271C  0E00               	movlw	0
  4196  00271E  200D               	addwfc	??_doActionPulse+2,w,c
  4197  002720  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  4198                           
  4199                           ;main.c: 1986: break;
  4200  002722  D088               	goto	l9401
  4201  002724                     l503:
  4202                           
  4203                           ;main.c: 1989: LATBbits.LATB0 = 0;
  4204  002724  908A               	bcf	3978,0,c	;volatile
  4205                           
  4206                           ;main.c: 1990: relay_pulse_flags |= 0x04;
  4207  002726  0100               	movlb	0	; () banked
  4208  002728  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  4209                           
  4210                           ; BSR set to: 0
  4211                           ;main.c: 1991: relay_pulse_timer[ 2 ] =
  4212                           ;main.c: 1992: Read_b_eep(0x43 + 22) * 256 +
  4213                           ;main.c: 1993: Read_b_eep(0x43 + 23);
  4214  00272A  6A09               	clrf	?_Read_b_eep+1,c
  4215  00272C  0E5A               	movlw	90
  4216  00272E  6E08               	movwf	?_Read_b_eep,c
  4217  002730  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4218  002734  6E0B               	movwf	??_doActionPulse& (0+255),c
  4219  002736  6A09               	clrf	?_Read_b_eep+1,c
  4220  002738  0E59               	movlw	89
  4221  00273A  6E08               	movwf	?_Read_b_eep,c
  4222  00273C  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4223  002740  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4224  002742  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4225  002744  500B               	movf	??_doActionPulse,w,c
  4226  002746  240C               	addwf	??_doActionPulse+1,w,c
  4227  002748  0100               	movlb	0	; () banked
  4228  00274A  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  4229  00274C  0E00               	movlw	0
  4230  00274E  200D               	addwfc	??_doActionPulse+2,w,c
  4231  002750  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  4232                           
  4233                           ;main.c: 1994: break;
  4234  002752  D070               	goto	l9401
  4235  002754                     l504:
  4236                           
  4237                           ;main.c: 1997: LATCbits.LATC7 = 0;
  4238  002754  9E8B               	bcf	3979,7,c	;volatile
  4239                           
  4240                           ;main.c: 1998: relay_pulse_flags |= 0x08;
  4241  002756  0100               	movlb	0	; () banked
  4242  002758  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  4243                           
  4244                           ; BSR set to: 0
  4245                           ;main.c: 1999: relay_pulse_timer[ 3 ] =
  4246                           ;main.c: 2000: Read_b_eep(0x43 + 24) * 256 +
  4247                           ;main.c: 2001: Read_b_eep(0x43 + 25);
  4248  00275A  6A09               	clrf	?_Read_b_eep+1,c
  4249  00275C  0E5C               	movlw	92
  4250  00275E  6E08               	movwf	?_Read_b_eep,c
  4251  002760  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4252  002764  6E0B               	movwf	??_doActionPulse& (0+255),c
  4253  002766  6A09               	clrf	?_Read_b_eep+1,c
  4254  002768  0E5B               	movlw	91
  4255  00276A  6E08               	movwf	?_Read_b_eep,c
  4256  00276C  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4257  002770  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4258  002772  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4259  002774  500B               	movf	??_doActionPulse,w,c
  4260  002776  240C               	addwf	??_doActionPulse+1,w,c
  4261  002778  0100               	movlb	0	; () banked
  4262  00277A  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  4263  00277C  0E00               	movlw	0
  4264  00277E  200D               	addwfc	??_doActionPulse+2,w,c
  4265  002780  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  4266                           
  4267                           ;main.c: 2002: break;
  4268  002782  D058               	goto	l9401
  4269  002784                     l505:
  4270                           
  4271                           ;main.c: 2005: LATCbits.LATC6 = 0;
  4272  002784  9C8B               	bcf	3979,6,c	;volatile
  4273                           
  4274                           ;main.c: 2006: relay_pulse_flags |= 0x10;
  4275  002786  0100               	movlb	0	; () banked
  4276  002788  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  4277                           
  4278                           ; BSR set to: 0
  4279                           ;main.c: 2007: relay_pulse_timer[ 4 ] =
  4280                           ;main.c: 2008: Read_b_eep(0x43 + 26) * 256 +
  4281                           ;main.c: 2009: Read_b_eep(0x43 + 27);
  4282  00278A  6A09               	clrf	?_Read_b_eep+1,c
  4283  00278C  0E5E               	movlw	94
  4284  00278E  6E08               	movwf	?_Read_b_eep,c
  4285  002790  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4286  002794  6E0B               	movwf	??_doActionPulse& (0+255),c
  4287  002796  6A09               	clrf	?_Read_b_eep+1,c
  4288  002798  0E5D               	movlw	93
  4289  00279A  6E08               	movwf	?_Read_b_eep,c
  4290  00279C  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4291  0027A0  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4292  0027A2  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4293  0027A4  500B               	movf	??_doActionPulse,w,c
  4294  0027A6  240C               	addwf	??_doActionPulse+1,w,c
  4295  0027A8  0100               	movlb	0	; () banked
  4296  0027AA  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  4297  0027AC  0E00               	movlw	0
  4298  0027AE  200D               	addwfc	??_doActionPulse+2,w,c
  4299  0027B0  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  4300                           
  4301                           ;main.c: 2010: break;
  4302  0027B2  D040               	goto	l9401
  4303  0027B4                     l506:
  4304                           
  4305                           ;main.c: 2013: LATCbits.LATC5 = 0;
  4306  0027B4  9A8B               	bcf	3979,5,c	;volatile
  4307                           
  4308                           ;main.c: 2014: relay_pulse_flags |= 0x20;
  4309  0027B6  0100               	movlb	0	; () banked
  4310  0027B8  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  4311                           
  4312                           ; BSR set to: 0
  4313                           ;main.c: 2015: relay_pulse_timer[ 5 ] =
  4314                           ;main.c: 2016: Read_b_eep(0x43 + 28) * 256 +
  4315                           ;main.c: 2017: Read_b_eep(0x43 + 29);
  4316  0027BA  6A09               	clrf	?_Read_b_eep+1,c
  4317  0027BC  0E60               	movlw	96
  4318  0027BE  6E08               	movwf	?_Read_b_eep,c
  4319  0027C0  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4320  0027C4  6E0B               	movwf	??_doActionPulse& (0+255),c
  4321  0027C6  6A09               	clrf	?_Read_b_eep+1,c
  4322  0027C8  0E5F               	movlw	95
  4323  0027CA  6E08               	movwf	?_Read_b_eep,c
  4324  0027CC  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4325  0027D0  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4326  0027D2  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4327  0027D4  500B               	movf	??_doActionPulse,w,c
  4328  0027D6  240C               	addwf	??_doActionPulse+1,w,c
  4329  0027D8  0100               	movlb	0	; () banked
  4330  0027DA  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  4331  0027DC  0E00               	movlw	0
  4332  0027DE  200D               	addwfc	??_doActionPulse+2,w,c
  4333  0027E0  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  4334                           
  4335                           ;main.c: 2018: break;
  4336  0027E2  D028               	goto	l9401
  4337  0027E4                     l507:
  4338                           
  4339                           ;main.c: 2021: LATCbits.LATC4 = 0;
  4340  0027E4  988B               	bcf	3979,4,c	;volatile
  4341                           
  4342                           ;main.c: 2022: relay_pulse_flags |= 0x40;
  4343  0027E6  0100               	movlb	0	; () banked
  4344  0027E8  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;main.c: 2023: relay_pulse_timer[ 6 ] =
  4348                           ;main.c: 2024: Read_b_eep(0x43 + 30) * 256 +
  4349                           ;main.c: 2025: Read_b_eep(0x43 + 31);
  4350  0027EA  6A09               	clrf	?_Read_b_eep+1,c
  4351  0027EC  0E62               	movlw	98
  4352  0027EE  6E08               	movwf	?_Read_b_eep,c
  4353  0027F0  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4354  0027F4  6E0B               	movwf	??_doActionPulse& (0+255),c
  4355  0027F6  6A09               	clrf	?_Read_b_eep+1,c
  4356  0027F8  0E61               	movlw	97
  4357  0027FA  6E08               	movwf	?_Read_b_eep,c
  4358  0027FC  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4359  002800  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4360  002802  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4361  002804  500B               	movf	??_doActionPulse,w,c
  4362  002806  240C               	addwf	??_doActionPulse+1,w,c
  4363  002808  0100               	movlb	0	; () banked
  4364  00280A  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  4365  00280C  0E00               	movlw	0
  4366  00280E  200D               	addwfc	??_doActionPulse+2,w,c
  4367  002810  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  4368                           
  4369                           ;main.c: 2026: break;
  4370  002812  D010               	goto	l9401
  4371  002814                     l9399:
  4372  002814  5010               	movf	doActionPulse@i,w,c
  4373                           
  4374                           ; Switch size 1, requested type "space"
  4375                           ; Number of cases is 7, Range of values is 0 to 6
  4376                           ; switch strategies available:
  4377                           ; Name         Instructions Cycles
  4378                           ; simple_byte           22    12 (average)
  4379                           ;	Chosen strategy is simple_byte
  4380  002816  E101 D755          	bz	l500
  4381  00281A  0A01               	xorlw	1	; case 1
  4382  00281C  E101 D76A          	bz	l502
  4383  002820  0A03               	xorlw	3	; case 2
  4384  002822  E080               	bz	l503
  4385  002824  0A01               	xorlw	1	; case 3
  4386  002826  E096               	bz	l504
  4387  002828  0A07               	xorlw	7	; case 4
  4388  00282A  E0AC               	bz	l505
  4389  00282C  0A01               	xorlw	1	; case 5
  4390  00282E  E0C2               	bz	l506
  4391  002830  0A03               	xorlw	3	; case 6
  4392  002832  E0D8               	bz	l507
  4393  002834                     l9401:
  4394  002834  2A10               	incf	doActionPulse@i,f,c
  4395  002836  0E07               	movlw	7
  4396  002838  6410               	cpfsgt	doActionPulse@i,c
  4397  00283A  D704               	goto	l9351
  4398  00283C  0C07               	retlw	7
  4399  00283E                     __end_of_doActionPulse:
  4400                           	opt stack 0
  4401                           tblptru	equ	0xFF8
  4402                           tblptrh	equ	0xFF7
  4403                           tblptrl	equ	0xFF6
  4404                           tablat	equ	0xFF5
  4405                           prodh	equ	0xFF4
  4406                           prodl	equ	0xFF3
  4407                           intcon	equ	0xFF2
  4408                           postinc0	equ	0xFEE
  4409                           wreg	equ	0xFE8
  4410                           indf1	equ	0xFE7
  4411                           fsr1h	equ	0xFE2
  4412                           fsr1l	equ	0xFE1
  4413                           indf2	equ	0xFDF
  4414                           postinc2	equ	0xFDE
  4415                           postdec2	equ	0xFDD
  4416                           plusw2	equ	0xFDB
  4417                           fsr2h	equ	0xFDA
  4418                           fsr2l	equ	0xFD9
  4419                           status	equ	0xFD8
  4420                           
  4421 ;; *************** function _doActionOn *****************
  4422 ;; Defined at:
  4423 ;;		line 1737 in file "../main.c"
  4424 ;; Parameters:    Size  Location     Type
  4425 ;;  dmflags         1    wreg     unsigned char 
  4426 ;;  arg             1   80[COMRAM] unsigned char 
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;  dmflags         1   25[BANK0 ] unsigned char 
  4429 ;;  i               1   27[BANK0 ] unsigned char 
  4430 ;;  val             1   26[BANK0 ] unsigned char 
  4431 ;; Return value:  Size  Location     Type
  4432 ;;		None               void
  4433 ;; Registers used:
  4434 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4435 ;; Tracked objects:
  4436 ;;		On entry : F/0
  4437 ;;		On exit  : F/0
  4438 ;;		Unchanged: 0/0
  4439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4440 ;;      Params:         1       0       0       0       0       0       0
  4441 ;;      Locals:         0       3       0       0       0       0       0
  4442 ;;      Temps:          0       3       0       0       0       0       0
  4443 ;;      Totals:         1       6       0       0       0       0       0
  4444 ;;Total ram usage:        7 bytes
  4445 ;; Hardware stack levels used:    1
  4446 ;; Hardware stack levels required when called:    7
  4447 ;; This function calls:
  4448 ;;		_Read_b_eep
  4449 ;;		_SendInformationEvent
  4450 ;; This function is called by:
  4451 ;;		_doDM
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455                           	psect	text13
  4456  001F98                     __ptext13:
  4457                           	opt stack 0
  4458  001F98                     _doActionOn:
  4459                           	opt stack 22
  4460                           
  4461                           ;incstack = 0
  4462                           ;incstack = 0
  4463                           ;doActionOn@dmflags stored from wreg
  4464  001F98  CFE8 F0CA          	movff	wreg,doActionOn@dmflags
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;main.c: 1739: unsigned char i;
  4468                           ;main.c: 1740: unsigned char val;
  4469                           ;main.c: 1742: for (i = 0; i < 8; i++) {
  4470  001F9C  6BCC               	clrf	doActionOn@i& (0+255),b
  4471  001F9E                     l11117:
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;main.c: 1745: if ( !( arg & ( 1 << i ) ) ) continue;
  4475  001F9E  C0CC  F0C7         	movff	doActionOn@i,??_doActionOn
  4476  001FA2  0E01               	movlw	1
  4477  001FA4  6FC8               	movwf	(??_doActionOn+1)& (0+255),b
  4478  001FA6  2BC7               	incf	??_doActionOn& (0+255),f,b
  4479  001FA8  D002               	goto	u13214
  4480  001FAA                     u13215:
  4481  001FAA  90D8               	bcf	status,0,c
  4482  001FAC  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4483  001FAE                     u13214:
  4484  001FAE  2FC7               	decfsz	??_doActionOn& (0+255),f,b
  4485  001FB0  D7FC               	goto	u13215
  4486  001FB2  51C8               	movf	(??_doActionOn+1)& (0+255),w,b
  4487  001FB4  1451               	andwf	doActionOn@arg,w,c
  4488  001FB6  E101 D137          	bz	l11173
  4489                           
  4490                           ; BSR set to: 0
  4491                           ;main.c: 1748: if ( dmflags & 0x10 ) {
  4492  001FBA  A9CA               	btfss	doActionOn@dmflags& (0+255),4,b
  4493  001FBC  D011               	goto	l441
  4494                           
  4495                           ; BSR set to: 0
  4496                           ;main.c: 1749: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  4497  001FBE  90D8               	bcf	status,0,c
  4498  001FC0  35CC               	rlcf	doActionOn@i& (0+255),w,b
  4499  001FC2  6FC7               	movwf	??_doActionOn& (0+255),b
  4500  001FC4  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4501  001FC6  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4502  001FC8  0E75               	movlw	117
  4503  001FCA  25C7               	addwf	??_doActionOn& (0+255),w,b
  4504  001FCC  6E08               	movwf	?_Read_b_eep,c
  4505  001FCE  0E00               	movlw	0
  4506  001FD0  21C8               	addwfc	(??_doActionOn+1)& (0+255),w,b
  4507  001FD2  6E09               	movwf	?_Read_b_eep+1,c
  4508  001FD4  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4509  001FD8  0100               	movlb	0	; () banked
  4510  001FDA  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  4511  001FDC  E001 D124          	bnz	l11173
  4512  001FE0                     l441:
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;main.c: 1752: }
  4516                           ;main.c: 1753: }
  4517                           ;main.c: 1756: if ( dmflags & 0x08 ) {
  4518  001FE0  A7CA               	btfss	doActionOn@dmflags& (0+255),3,b
  4519  001FE2  D011               	goto	l11129
  4520                           
  4521                           ; BSR set to: 0
  4522                           ;main.c: 1757: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  4523  001FE4  90D8               	bcf	status,0,c
  4524  001FE6  35CC               	rlcf	doActionOn@i& (0+255),w,b
  4525  001FE8  6FC7               	movwf	??_doActionOn& (0+255),b
  4526  001FEA  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4527  001FEC  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4528  001FEE  0E76               	movlw	118
  4529  001FF0  25C7               	addwf	??_doActionOn& (0+255),w,b
  4530  001FF2  6E08               	movwf	?_Read_b_eep,c
  4531  001FF4  0E00               	movlw	0
  4532  001FF6  21C8               	addwfc	(??_doActionOn+1)& (0+255),w,b
  4533  001FF8  6E09               	movwf	?_Read_b_eep+1,c
  4534  001FFA  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4535  001FFE  0100               	movlb	0	; () banked
  4536  002000  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4537  002002  E001 D111          	bnz	l11173
  4538  002006                     l11129:
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;main.c: 1760: }
  4542                           ;main.c: 1761: }
  4543                           ;main.c: 1763: val = Read_b_eep(0x43 + 10 + i);
  4544  002006  0E4D               	movlw	77
  4545  002008  25CC               	addwf	doActionOn@i& (0+255),w,b
  4546  00200A  6E08               	movwf	?_Read_b_eep,c
  4547  00200C  6A09               	clrf	?_Read_b_eep+1,c
  4548  00200E  0E00               	movlw	0
  4549  002010  2209               	addwfc	?_Read_b_eep+1,f,c
  4550  002012  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4551  002016  0100               	movlb	0	; () banked
  4552  002018  6FCB               	movwf	doActionOn@val& (0+255),b
  4553                           
  4554                           ; BSR set to: 0
  4555                           ;main.c: 1766: if ( !( val & 0x80 ) ) continue;
  4556  00201A  AFCB               	btfss	doActionOn@val& (0+255),7,b
  4557  00201C  D105               	goto	l11173
  4558  00201E  D0E0               	goto	l11165
  4559  002020                     l447:
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;main.c: 1771: LATBbits.LATB4 = 1;
  4563  002020  888A               	bsf	3978,4,c	;volatile
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;main.c: 1773: if (Read_b_eep(0x43 + 10) & 0x04 ) {
  4567  002022  6A09               	clrf	?_Read_b_eep+1,c
  4568  002024  0E4D               	movlw	77
  4569  002026  6E08               	movwf	?_Read_b_eep,c
  4570  002028  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4571  00202C  0100               	movlb	0	; () banked
  4572  00202E  6FC7               	movwf	??_doActionOn& (0+255),b
  4573  002030  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4574  002032  D0E8               	goto	l449
  4575                           
  4576                           ; BSR set to: 0
  4577                           ;main.c: 1774: relay_protection_timer[ 0 ] =
  4578                           ;main.c: 1775: Read_b_eep(0x43 + 34) * 256 +
  4579                           ;main.c: 1776: Read_b_eep(0x43 + 35);
  4580  002034  6A09               	clrf	?_Read_b_eep+1,c
  4581  002036  0E66               	movlw	102
  4582  002038  6E08               	movwf	?_Read_b_eep,c
  4583  00203A  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4584  00203E  0100               	movlb	0	; () banked
  4585  002040  6FC7               	movwf	??_doActionOn& (0+255),b
  4586  002042  6A09               	clrf	?_Read_b_eep+1,c
  4587  002044  0E65               	movlw	101
  4588  002046  6E08               	movwf	?_Read_b_eep,c
  4589  002048  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4590  00204C  0100               	movlb	0	; () banked
  4591  00204E  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4592  002050  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4593  002052  51C7               	movf	??_doActionOn& (0+255),w,b
  4594  002054  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4595  002056  6F60               	movwf	_relay_protection_timer& (0+255),b
  4596  002058  0E00               	movlw	0
  4597  00205A  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4598  00205C  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  4599  00205E  D0D2               	goto	l449
  4600  002060                     l450:
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;main.c: 1781: LATBbits.LATB1 = 1;
  4604  002060  828A               	bsf	3978,1,c	;volatile
  4605                           
  4606                           ; BSR set to: 0
  4607                           ;main.c: 1783: if (Read_b_eep(0x43 + 11) & 0x04 ) {
  4608  002062  6A09               	clrf	?_Read_b_eep+1,c
  4609  002064  0E4E               	movlw	78
  4610  002066  6E08               	movwf	?_Read_b_eep,c
  4611  002068  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4612  00206C  0100               	movlb	0	; () banked
  4613  00206E  6FC7               	movwf	??_doActionOn& (0+255),b
  4614  002070  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4615  002072  D0C8               	goto	l449
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;main.c: 1784: relay_protection_timer[ 1 ] =
  4619                           ;main.c: 1785: Read_b_eep(0x43 + 36) * 256 +
  4620                           ;main.c: 1786: Read_b_eep(0x43 + 37);
  4621  002074  6A09               	clrf	?_Read_b_eep+1,c
  4622  002076  0E68               	movlw	104
  4623  002078  6E08               	movwf	?_Read_b_eep,c
  4624  00207A  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4625  00207E  0100               	movlb	0	; () banked
  4626  002080  6FC7               	movwf	??_doActionOn& (0+255),b
  4627  002082  6A09               	clrf	?_Read_b_eep+1,c
  4628  002084  0E67               	movlw	103
  4629  002086  6E08               	movwf	?_Read_b_eep,c
  4630  002088  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4631  00208C  0100               	movlb	0	; () banked
  4632  00208E  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4633  002090  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4634  002092  51C7               	movf	??_doActionOn& (0+255),w,b
  4635  002094  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4636  002096  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  4637  002098  0E00               	movlw	0
  4638  00209A  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4639  00209C  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  4640  00209E  D0B2               	goto	l449
  4641  0020A0                     l452:
  4642                           
  4643                           ; BSR set to: 0
  4644                           ;main.c: 1791: LATBbits.LATB0 = 1;
  4645  0020A0  808A               	bsf	3978,0,c	;volatile
  4646                           
  4647                           ; BSR set to: 0
  4648                           ;main.c: 1793: if (Read_b_eep(0x43 + 12) & 0x04 ) {
  4649  0020A2  6A09               	clrf	?_Read_b_eep+1,c
  4650  0020A4  0E4F               	movlw	79
  4651  0020A6  6E08               	movwf	?_Read_b_eep,c
  4652  0020A8  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4653  0020AC  0100               	movlb	0	; () banked
  4654  0020AE  6FC7               	movwf	??_doActionOn& (0+255),b
  4655  0020B0  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4656  0020B2  D0A8               	goto	l449
  4657                           
  4658                           ; BSR set to: 0
  4659                           ;main.c: 1794: relay_protection_timer[ 2 ] =
  4660                           ;main.c: 1795: Read_b_eep(0x43 + 38) * 256 +
  4661                           ;main.c: 1796: Read_b_eep(0x43 + 39);
  4662  0020B4  6A09               	clrf	?_Read_b_eep+1,c
  4663  0020B6  0E6A               	movlw	106
  4664  0020B8  6E08               	movwf	?_Read_b_eep,c
  4665  0020BA  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4666  0020BE  0100               	movlb	0	; () banked
  4667  0020C0  6FC7               	movwf	??_doActionOn& (0+255),b
  4668  0020C2  6A09               	clrf	?_Read_b_eep+1,c
  4669  0020C4  0E69               	movlw	105
  4670  0020C6  6E08               	movwf	?_Read_b_eep,c
  4671  0020C8  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4672  0020CC  0100               	movlb	0	; () banked
  4673  0020CE  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4674  0020D0  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4675  0020D2  51C7               	movf	??_doActionOn& (0+255),w,b
  4676  0020D4  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4677  0020D6  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  4678  0020D8  0E00               	movlw	0
  4679  0020DA  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4680  0020DC  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  4681  0020DE  D092               	goto	l449
  4682  0020E0                     l454:
  4683                           
  4684                           ; BSR set to: 0
  4685                           ;main.c: 1801: LATCbits.LATC7 = 1;
  4686  0020E0  8E8B               	bsf	3979,7,c	;volatile
  4687                           
  4688                           ; BSR set to: 0
  4689                           ;main.c: 1803: if ( Read_b_eep(0x43 + 13) & 0x04 ) {
  4690  0020E2  6A09               	clrf	?_Read_b_eep+1,c
  4691  0020E4  0E50               	movlw	80
  4692  0020E6  6E08               	movwf	?_Read_b_eep,c
  4693  0020E8  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4694  0020EC  0100               	movlb	0	; () banked
  4695  0020EE  6FC7               	movwf	??_doActionOn& (0+255),b
  4696  0020F0  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4697  0020F2  D088               	goto	l449
  4698                           
  4699                           ; BSR set to: 0
  4700                           ;main.c: 1804: relay_protection_timer[ 3 ] =
  4701                           ;main.c: 1805: Read_b_eep(0x43 + 40) * 256 +
  4702                           ;main.c: 1806: Read_b_eep(0x43 + 41);
  4703  0020F4  6A09               	clrf	?_Read_b_eep+1,c
  4704  0020F6  0E6C               	movlw	108
  4705  0020F8  6E08               	movwf	?_Read_b_eep,c
  4706  0020FA  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4707  0020FE  0100               	movlb	0	; () banked
  4708  002100  6FC7               	movwf	??_doActionOn& (0+255),b
  4709  002102  6A09               	clrf	?_Read_b_eep+1,c
  4710  002104  0E6B               	movlw	107
  4711  002106  6E08               	movwf	?_Read_b_eep,c
  4712  002108  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4713  00210C  0100               	movlb	0	; () banked
  4714  00210E  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4715  002110  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4716  002112  51C7               	movf	??_doActionOn& (0+255),w,b
  4717  002114  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4718  002116  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  4719  002118  0E00               	movlw	0
  4720  00211A  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4721  00211C  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  4722  00211E  D072               	goto	l449
  4723  002120                     l456:
  4724                           
  4725                           ; BSR set to: 0
  4726                           ;main.c: 1811: LATCbits.LATC6 = 1;
  4727  002120  8C8B               	bsf	3979,6,c	;volatile
  4728                           
  4729                           ; BSR set to: 0
  4730                           ;main.c: 1813: if (Read_b_eep(0x43 + 14) & 0x04 ) {
  4731  002122  6A09               	clrf	?_Read_b_eep+1,c
  4732  002124  0E51               	movlw	81
  4733  002126  6E08               	movwf	?_Read_b_eep,c
  4734  002128  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4735  00212C  0100               	movlb	0	; () banked
  4736  00212E  6FC7               	movwf	??_doActionOn& (0+255),b
  4737  002130  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4738  002132  D068               	goto	l449
  4739                           
  4740                           ; BSR set to: 0
  4741                           ;main.c: 1814: relay_protection_timer[ 4 ] =
  4742                           ;main.c: 1815: Read_b_eep(0x43 + 42) * 256 +
  4743                           ;main.c: 1816: Read_b_eep(0x43 + 43);
  4744  002134  6A09               	clrf	?_Read_b_eep+1,c
  4745  002136  0E6E               	movlw	110
  4746  002138  6E08               	movwf	?_Read_b_eep,c
  4747  00213A  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4748  00213E  0100               	movlb	0	; () banked
  4749  002140  6FC7               	movwf	??_doActionOn& (0+255),b
  4750  002142  6A09               	clrf	?_Read_b_eep+1,c
  4751  002144  0E6D               	movlw	109
  4752  002146  6E08               	movwf	?_Read_b_eep,c
  4753  002148  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4754  00214C  0100               	movlb	0	; () banked
  4755  00214E  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4756  002150  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4757  002152  51C7               	movf	??_doActionOn& (0+255),w,b
  4758  002154  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4759  002156  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  4760  002158  0E00               	movlw	0
  4761  00215A  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4762  00215C  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  4763  00215E  D052               	goto	l449
  4764  002160                     l458:
  4765                           
  4766                           ; BSR set to: 0
  4767                           ;main.c: 1821: LATCbits.LATC5 = 1;
  4768  002160  8A8B               	bsf	3979,5,c	;volatile
  4769                           
  4770                           ; BSR set to: 0
  4771                           ;main.c: 1823: if (Read_b_eep(0x43 + 15) & 0x04) {
  4772  002162  6A09               	clrf	?_Read_b_eep+1,c
  4773  002164  0E52               	movlw	82
  4774  002166  6E08               	movwf	?_Read_b_eep,c
  4775  002168  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4776  00216C  0100               	movlb	0	; () banked
  4777  00216E  6FC7               	movwf	??_doActionOn& (0+255),b
  4778  002170  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4779  002172  D048               	goto	l449
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;main.c: 1824: relay_protection_timer[ 5 ] =
  4783                           ;main.c: 1825: Read_b_eep(0x43 + 44) * 256 +
  4784                           ;main.c: 1826: Read_b_eep(0x43 + 45);
  4785  002174  6A09               	clrf	?_Read_b_eep+1,c
  4786  002176  0E70               	movlw	112
  4787  002178  6E08               	movwf	?_Read_b_eep,c
  4788  00217A  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4789  00217E  0100               	movlb	0	; () banked
  4790  002180  6FC7               	movwf	??_doActionOn& (0+255),b
  4791  002182  6A09               	clrf	?_Read_b_eep+1,c
  4792  002184  0E6F               	movlw	111
  4793  002186  6E08               	movwf	?_Read_b_eep,c
  4794  002188  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4795  00218C  0100               	movlb	0	; () banked
  4796  00218E  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4797  002190  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4798  002192  51C7               	movf	??_doActionOn& (0+255),w,b
  4799  002194  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4800  002196  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  4801  002198  0E00               	movlw	0
  4802  00219A  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4803  00219C  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  4804  00219E  D032               	goto	l449
  4805  0021A0                     l460:
  4806                           
  4807                           ; BSR set to: 0
  4808                           ;main.c: 1831: LATCbits.LATC4 = 1;
  4809  0021A0  888B               	bsf	3979,4,c	;volatile
  4810                           
  4811                           ; BSR set to: 0
  4812                           ;main.c: 1833: if ( Read_b_eep(0x43 + 16) & 0x04) {
  4813  0021A2  6A09               	clrf	?_Read_b_eep+1,c
  4814  0021A4  0E53               	movlw	83
  4815  0021A6  6E08               	movwf	?_Read_b_eep,c
  4816  0021A8  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4817  0021AC  0100               	movlb	0	; () banked
  4818  0021AE  6FC7               	movwf	??_doActionOn& (0+255),b
  4819  0021B0  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4820  0021B2  D028               	goto	l449
  4821                           
  4822                           ; BSR set to: 0
  4823                           ;main.c: 1834: relay_protection_timer[ 6 ] =
  4824                           ;main.c: 1835: Read_b_eep(0x43 + 46) * 256 +
  4825                           ;main.c: 1836: Read_b_eep(0x43 + 47);
  4826  0021B4  6A09               	clrf	?_Read_b_eep+1,c
  4827  0021B6  0E72               	movlw	114
  4828  0021B8  6E08               	movwf	?_Read_b_eep,c
  4829  0021BA  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4830  0021BE  0100               	movlb	0	; () banked
  4831  0021C0  6FC7               	movwf	??_doActionOn& (0+255),b
  4832  0021C2  6A09               	clrf	?_Read_b_eep+1,c
  4833  0021C4  0E71               	movlw	113
  4834  0021C6  6E08               	movwf	?_Read_b_eep,c
  4835  0021C8  ECB6  F01E         	call	_Read_b_eep	;wreg free
  4836  0021CC  0100               	movlb	0	; () banked
  4837  0021CE  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4838  0021D0  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4839  0021D2  51C7               	movf	??_doActionOn& (0+255),w,b
  4840  0021D4  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4841  0021D6  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  4842  0021D8  0E00               	movlw	0
  4843  0021DA  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4844  0021DC  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  4845  0021DE  D012               	goto	l449
  4846  0021E0                     l11165:
  4847                           
  4848                           ; BSR set to: 0
  4849  0021E0  51CC               	movf	doActionOn@i& (0+255),w,b
  4850                           
  4851                           ; Switch size 1, requested type "space"
  4852                           ; Number of cases is 7, Range of values is 0 to 6
  4853                           ; switch strategies available:
  4854                           ; Name         Instructions Cycles
  4855                           ; simple_byte           22    12 (average)
  4856                           ;	Chosen strategy is simple_byte
  4857  0021E2  E101 D71D          	bz	l447
  4858  0021E6  0A01               	xorlw	1	; case 1
  4859  0021E8  E101 D73A          	bz	l450
  4860  0021EC  0A03               	xorlw	3	; case 2
  4861  0021EE  E101 D757          	bz	l452
  4862  0021F2  0A01               	xorlw	1	; case 3
  4863  0021F4  E101 D774          	bz	l454
  4864  0021F8  0A07               	xorlw	7	; case 4
  4865  0021FA  E092               	bz	l456
  4866  0021FC  0A01               	xorlw	1	; case 5
  4867  0021FE  E0B0               	bz	l458
  4868  002200  0A03               	xorlw	3	; case 6
  4869  002202  E0CE               	bz	l460
  4870  002204                     l449:
  4871                           
  4872                           ; BSR set to: 0
  4873                           ;main.c: 1843: if ( val & 0x08 ) {
  4874  002204  A7CB               	btfss	doActionOn@val& (0+255),3,b
  4875  002206  D007               	goto	l11169
  4876                           
  4877                           ; BSR set to: 0
  4878                           ;main.c: 1844: SendInformationEvent( i, 20, 3 );
  4879  002208  0E14               	movlw	20
  4880  00220A  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4881  00220C  0E03               	movlw	3
  4882  00220E  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4883  002210  51CC               	movf	doActionOn@i& (0+255),w,b
  4884  002212  EC12  F01C         	call	_SendInformationEvent
  4885  002216                     l11169:
  4886                           
  4887                           ; BSR set to: 0
  4888                           ;main.c: 1845: }
  4889                           ;main.c: 1848: if ( val & 0x20 ) {
  4890  002216  ABCB               	btfss	doActionOn@val& (0+255),5,b
  4891  002218  D007               	goto	l11173
  4892                           
  4893                           ; BSR set to: 0
  4894                           ;main.c: 1849: SendInformationEvent( i, 20, 25 );
  4895  00221A  0E14               	movlw	20
  4896  00221C  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4897  00221E  0E19               	movlw	25
  4898  002220  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4899  002222  51CC               	movf	doActionOn@i& (0+255),w,b
  4900  002224  EC12  F01C         	call	_SendInformationEvent
  4901  002228                     l11173:
  4902                           
  4903                           ; BSR set to: 0
  4904  002228  2BCC               	incf	doActionOn@i& (0+255),f,b
  4905                           
  4906                           ; BSR set to: 0
  4907  00222A  0E07               	movlw	7
  4908  00222C  65CC               	cpfsgt	doActionOn@i& (0+255),b
  4909  00222E  D6B7               	goto	l11117
  4910                           
  4911                           ; BSR set to: 0
  4912  002230  0C07               	retlw	7
  4913  002232                     __end_of_doActionOn:
  4914                           	opt stack 0
  4915                           tblptru	equ	0xFF8
  4916                           tblptrh	equ	0xFF7
  4917                           tblptrl	equ	0xFF6
  4918                           tablat	equ	0xFF5
  4919                           prodh	equ	0xFF4
  4920                           prodl	equ	0xFF3
  4921                           intcon	equ	0xFF2
  4922                           postinc0	equ	0xFEE
  4923                           wreg	equ	0xFE8
  4924                           indf1	equ	0xFE7
  4925                           fsr1h	equ	0xFE2
  4926                           fsr1l	equ	0xFE1
  4927                           indf2	equ	0xFDF
  4928                           postinc2	equ	0xFDE
  4929                           postdec2	equ	0xFDD
  4930                           plusw2	equ	0xFDB
  4931                           fsr2h	equ	0xFDA
  4932                           fsr2l	equ	0xFD9
  4933                           status	equ	0xFD8
  4934                           
  4935 ;; *************** function _doActionOff *****************
  4936 ;; Defined at:
  4937 ;;		line 1859 in file "../main.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;  dmflags         1    wreg     unsigned char 
  4940 ;;  arg             1   80[COMRAM] unsigned char 
  4941 ;; Auto vars:     Size  Location     Type
  4942 ;;  dmflags         1   24[BANK0 ] unsigned char 
  4943 ;;  i               1   26[BANK0 ] unsigned char 
  4944 ;;  val             1   25[BANK0 ] unsigned char 
  4945 ;; Return value:  Size  Location     Type
  4946 ;;		None               void
  4947 ;; Registers used:
  4948 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4949 ;; Tracked objects:
  4950 ;;		On entry : F/0
  4951 ;;		On exit  : F/0
  4952 ;;		Unchanged: 0/0
  4953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4954 ;;      Params:         1       0       0       0       0       0       0
  4955 ;;      Locals:         0       3       0       0       0       0       0
  4956 ;;      Temps:          0       2       0       0       0       0       0
  4957 ;;      Totals:         1       5       0       0       0       0       0
  4958 ;;Total ram usage:        6 bytes
  4959 ;; Hardware stack levels used:    1
  4960 ;; Hardware stack levels required when called:    7
  4961 ;; This function calls:
  4962 ;;		_Read_b_eep
  4963 ;;		_SendInformationEvent
  4964 ;; This function is called by:
  4965 ;;		_doApplicationOneSecondWork
  4966 ;;		_doDM
  4967 ;; This function uses a non-reentrant model
  4968 ;;
  4969                           
  4970                           	psect	text14
  4971  003212                     __ptext14:
  4972                           	opt stack 0
  4973  003212                     _doActionOff:
  4974                           	opt stack 22
  4975                           
  4976                           ; BSR set to: 0
  4977                           ;incstack = 0
  4978                           ;incstack = 0
  4979                           ;doActionOff@dmflags stored from wreg
  4980  003212  CFE8 F0C9          	movff	wreg,doActionOff@dmflags
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;main.c: 1861: unsigned char i;
  4984                           ;main.c: 1862: unsigned char val;
  4985                           ;main.c: 1864: for ( i = 0; i < 8; i++ ) {
  4986  003216  6BCB               	clrf	doActionOff@i& (0+255),b
  4987  003218                     l10623:
  4988                           
  4989                           ; BSR set to: 0
  4990                           ;main.c: 1867: if ( !( arg & ( 1 << i ) ) ) continue;
  4991  003218  C0CB  F0C7         	movff	doActionOff@i,??_doActionOff
  4992  00321C  0E01               	movlw	1
  4993  00321E  6FC8               	movwf	(??_doActionOff+1)& (0+255),b
  4994  003220  2BC7               	incf	??_doActionOff& (0+255),f,b
  4995  003222  D002               	goto	u12554
  4996  003224                     u12555:
  4997  003224  90D8               	bcf	status,0,c
  4998  003226  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4999  003228                     u12554:
  5000  003228  2FC7               	decfsz	??_doActionOff& (0+255),f,b
  5001  00322A  D7FC               	goto	u12555
  5002  00322C  51C8               	movf	(??_doActionOff+1)& (0+255),w,b
  5003  00322E  1451               	andwf	doActionOff@arg,w,c
  5004  003230  E05F               	bz	l10651
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;main.c: 1870: if ( dmflags & 0x10 ) {
  5008  003232  A9C9               	btfss	doActionOff@dmflags& (0+255),4,b
  5009  003234  D010               	goto	l471
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;main.c: 1871: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  5013  003236  90D8               	bcf	status,0,c
  5014  003238  35CB               	rlcf	doActionOff@i& (0+255),w,b
  5015  00323A  6FC7               	movwf	??_doActionOff& (0+255),b
  5016  00323C  6BC8               	clrf	(??_doActionOff+1)& (0+255),b
  5017  00323E  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  5018  003240  0E75               	movlw	117
  5019  003242  25C7               	addwf	??_doActionOff& (0+255),w,b
  5020  003244  6E08               	movwf	?_Read_b_eep,c
  5021  003246  0E00               	movlw	0
  5022  003248  21C8               	addwfc	(??_doActionOff+1)& (0+255),w,b
  5023  00324A  6E09               	movwf	?_Read_b_eep+1,c
  5024  00324C  ECB6  F01E         	call	_Read_b_eep	;wreg free
  5025  003250  0100               	movlb	0	; () banked
  5026  003252  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5027  003254  E14D               	bnz	l10651
  5028  003256                     l471:
  5029                           
  5030                           ; BSR set to: 0
  5031                           ;main.c: 1874: }
  5032                           ;main.c: 1875: }
  5033                           ;main.c: 1878: if ( dmflags & 0x08 ) {
  5034  003256  A7C9               	btfss	doActionOff@dmflags& (0+255),3,b
  5035  003258  D010               	goto	l10635
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;main.c: 1879: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  5039  00325A  90D8               	bcf	status,0,c
  5040  00325C  35CB               	rlcf	doActionOff@i& (0+255),w,b
  5041  00325E  6FC7               	movwf	??_doActionOff& (0+255),b
  5042  003260  6BC8               	clrf	(??_doActionOff+1)& (0+255),b
  5043  003262  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  5044  003264  0E76               	movlw	118
  5045  003266  25C7               	addwf	??_doActionOff& (0+255),w,b
  5046  003268  6E08               	movwf	?_Read_b_eep,c
  5047  00326A  0E00               	movlw	0
  5048  00326C  21C8               	addwfc	(??_doActionOff+1)& (0+255),w,b
  5049  00326E  6E09               	movwf	?_Read_b_eep+1,c
  5050  003270  ECB6  F01E         	call	_Read_b_eep	;wreg free
  5051  003274  0100               	movlb	0	; () banked
  5052  003276  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5053  003278  E13B               	bnz	l10651
  5054  00327A                     l10635:
  5055                           
  5056                           ; BSR set to: 0
  5057                           ;main.c: 1882: }
  5058                           ;main.c: 1883: }
  5059                           ;main.c: 1885: val = Read_b_eep(0x43 + 10 + i);
  5060  00327A  0E4D               	movlw	77
  5061  00327C  25CB               	addwf	doActionOff@i& (0+255),w,b
  5062  00327E  6E08               	movwf	?_Read_b_eep,c
  5063  003280  6A09               	clrf	?_Read_b_eep+1,c
  5064  003282  0E00               	movlw	0
  5065  003284  2209               	addwfc	?_Read_b_eep+1,f,c
  5066  003286  ECB6  F01E         	call	_Read_b_eep	;wreg free
  5067  00328A  0100               	movlb	0	; () banked
  5068  00328C  6FCA               	movwf	doActionOff@val& (0+255),b
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;main.c: 1888: if ( !( val & 0x80 ) ) continue;
  5072  00328E  AFCA               	btfss	doActionOff@val& (0+255),7,b
  5073  003290  D02F               	goto	l10651
  5074  003292  D00E               	goto	l10643
  5075  003294                     l477:
  5076                           
  5077                           ; BSR set to: 0
  5078                           ;main.c: 1893: LATBbits.LATB4 = 0;
  5079  003294  988A               	bcf	3978,4,c	;volatile
  5080                           
  5081                           ;main.c: 1894: break;
  5082  003296  D01A               	goto	l478
  5083  003298                     l479:
  5084                           
  5085                           ; BSR set to: 0
  5086                           ;main.c: 1897: LATBbits.LATB1 = 0;
  5087  003298  928A               	bcf	3978,1,c	;volatile
  5088                           
  5089                           ;main.c: 1898: break;
  5090  00329A  D018               	goto	l478
  5091  00329C                     l480:
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;main.c: 1901: LATBbits.LATB0 = 0;
  5095  00329C  908A               	bcf	3978,0,c	;volatile
  5096                           
  5097                           ;main.c: 1902: break;
  5098  00329E  D016               	goto	l478
  5099  0032A0                     l481:
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;main.c: 1905: LATCbits.LATC7 = 0;
  5103  0032A0  9E8B               	bcf	3979,7,c	;volatile
  5104                           
  5105                           ;main.c: 1906: break;
  5106  0032A2  D014               	goto	l478
  5107  0032A4                     l482:
  5108                           
  5109                           ; BSR set to: 0
  5110                           ;main.c: 1909: LATCbits.LATC6 = 0;
  5111  0032A4  9C8B               	bcf	3979,6,c	;volatile
  5112                           
  5113                           ;main.c: 1910: break;
  5114  0032A6  D012               	goto	l478
  5115  0032A8                     l483:
  5116                           
  5117                           ; BSR set to: 0
  5118                           ;main.c: 1913: LATCbits.LATC5 = 0;
  5119  0032A8  9A8B               	bcf	3979,5,c	;volatile
  5120                           
  5121                           ;main.c: 1914: break;
  5122  0032AA  D010               	goto	l478
  5123  0032AC                     l484:
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;main.c: 1917: LATCbits.LATC4 = 0;
  5127  0032AC  988B               	bcf	3979,4,c	;volatile
  5128                           
  5129                           ;main.c: 1918: break;
  5130  0032AE  D00E               	goto	l478
  5131  0032B0                     l10643:
  5132                           
  5133                           ; BSR set to: 0
  5134  0032B0  51CB               	movf	doActionOff@i& (0+255),w,b
  5135                           
  5136                           ; Switch size 1, requested type "space"
  5137                           ; Number of cases is 7, Range of values is 0 to 6
  5138                           ; switch strategies available:
  5139                           ; Name         Instructions Cycles
  5140                           ; simple_byte           22    12 (average)
  5141                           ;	Chosen strategy is simple_byte
  5142  0032B2  E0F0               	bz	l477
  5143  0032B4  0A01               	xorlw	1	; case 1
  5144  0032B6  E0F0               	bz	l479
  5145  0032B8  0A03               	xorlw	3	; case 2
  5146  0032BA  E0F0               	bz	l480
  5147  0032BC  0A01               	xorlw	1	; case 3
  5148  0032BE  E0F0               	bz	l481
  5149  0032C0  0A07               	xorlw	7	; case 4
  5150  0032C2  E0F0               	bz	l482
  5151  0032C4  0A01               	xorlw	1	; case 5
  5152  0032C6  E0F0               	bz	l483
  5153  0032C8  0A03               	xorlw	3	; case 6
  5154  0032CA  E0F0               	bz	l484
  5155  0032CC                     l478:
  5156                           
  5157                           ; BSR set to: 0
  5158                           ;main.c: 1923: if ( val & 0x10 ) {
  5159  0032CC  A9CA               	btfss	doActionOff@val& (0+255),4,b
  5160  0032CE  D007               	goto	l10647
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;main.c: 1924: SendInformationEvent( i, 20, 4 );
  5164  0032D0  0E14               	movlw	20
  5165  0032D2  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  5166  0032D4  0E04               	movlw	4
  5167  0032D6  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5168  0032D8  51CB               	movf	doActionOff@i& (0+255),w,b
  5169  0032DA  EC12  F01C         	call	_SendInformationEvent
  5170  0032DE                     l10647:
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;main.c: 1925: }
  5174                           ;main.c: 1928: if ( val & 0x40 ) {
  5175  0032DE  ADCA               	btfss	doActionOff@val& (0+255),6,b
  5176  0032E0  D007               	goto	l10651
  5177                           
  5178                           ; BSR set to: 0
  5179                           ;main.c: 1929: SendInformationEvent( i, 20, 24 );
  5180  0032E2  0E14               	movlw	20
  5181  0032E4  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  5182  0032E6  0E18               	movlw	24
  5183  0032E8  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5184  0032EA  51CB               	movf	doActionOff@i& (0+255),w,b
  5185  0032EC  EC12  F01C         	call	_SendInformationEvent
  5186  0032F0                     l10651:
  5187                           
  5188                           ; BSR set to: 0
  5189  0032F0  2BCB               	incf	doActionOff@i& (0+255),f,b
  5190                           
  5191                           ; BSR set to: 0
  5192  0032F2  0E07               	movlw	7
  5193  0032F4  65CB               	cpfsgt	doActionOff@i& (0+255),b
  5194  0032F6  D790               	goto	l10623
  5195                           
  5196                           ; BSR set to: 0
  5197  0032F8  0C07               	retlw	7
  5198  0032FA                     __end_of_doActionOff:
  5199                           	opt stack 0
  5200                           tblptru	equ	0xFF8
  5201                           tblptrh	equ	0xFF7
  5202                           tblptrl	equ	0xFF6
  5203                           tablat	equ	0xFF5
  5204                           prodh	equ	0xFF4
  5205                           prodl	equ	0xFF3
  5206                           intcon	equ	0xFF2
  5207                           postinc0	equ	0xFEE
  5208                           wreg	equ	0xFE8
  5209                           indf1	equ	0xFE7
  5210                           fsr1h	equ	0xFE2
  5211                           fsr1l	equ	0xFE1
  5212                           indf2	equ	0xFDF
  5213                           postinc2	equ	0xFDE
  5214                           postdec2	equ	0xFDD
  5215                           plusw2	equ	0xFDB
  5216                           fsr2h	equ	0xFDA
  5217                           fsr2l	equ	0xFD9
  5218                           status	equ	0xFD8
  5219                           
  5220 ;; *************** function _vscp_handleProtocolEvent *****************
  5221 ;; Defined at:
  5222 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;		None
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;  bytes           1   45[BANK0 ] unsigned char 
  5227 ;;  page_save       2   41[BANK0 ] unsigned short 
  5228 ;;  i               1   51[BANK0 ] unsigned char 
  5229 ;;  bytes           2   55[BANK0 ] unsigned short 
  5230 ;;  page_save       2   39[BANK0 ] unsigned short 
  5231 ;;  byte            1   54[BANK0 ] unsigned char 
  5232 ;;  cb              1   50[BANK0 ] unsigned char 
  5233 ;;  bytes_this_t    1   49[BANK0 ] unsigned char 
  5234 ;;  j               1   59[BANK0 ] unsigned char 
  5235 ;;  i               1   57[BANK0 ] unsigned char 
  5236 ;;  k               1   52[BANK0 ] unsigned char 
  5237 ;;  i               1   53[BANK0 ] unsigned char 
  5238 ;;  len             1   48[BANK0 ] unsigned char 
  5239 ;;  pos             1   47[BANK0 ] unsigned char 
  5240 ;;  i               1   58[BANK0 ] unsigned char 
  5241 ;;  len             1   46[BANK0 ] unsigned char 
  5242 ;;  pos             1   44[BANK0 ] unsigned char 
  5243 ;;  offset          1   43[BANK0 ] unsigned char 
  5244 ;; Return value:  Size  Location     Type
  5245 ;;		None               void
  5246 ;; Registers used:
  5247 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5248 ;; Tracked objects:
  5249 ;;		On entry : F/0
  5250 ;;		On exit  : 0/0
  5251 ;;		Unchanged: 0/0
  5252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5253 ;;      Params:         0       0       0       0       0       0       0
  5254 ;;      Locals:         0      21       0       0       0       0       0
  5255 ;;      Temps:          0       7       0       0       0       0       0
  5256 ;;      Totals:         0      28       0       0       0       0       0
  5257 ;;Total ram usage:       28 bytes
  5258 ;; Hardware stack levels used:    1
  5259 ;; Hardware stack levels required when called:    9
  5260 ;; This function calls:
  5261 ;;		_vscp_init
  5262 ;;		_vscp_readAppReg
  5263 ;;		_vscp_writeAppReg
  5264 ;;		_vscp_sendEvent
  5265 ;;		_vscp_getGUID
  5266 ;;		_vscp_getMDF_URL
  5267 ;;		_vscp_goBootloaderMode
  5268 ;;		_vscp_getMatrixInfo
  5269 ;;		_vscp_handleHeartbeat
  5270 ;;		_vscp_handleSetNickname
  5271 ;;		_vscp_handleDropNickname
  5272 ;;		_vscp_newNodeOnline
  5273 ;;		_vscp_readRegister
  5274 ;;		_vscp_readStdReg
  5275 ;;		_vscp_writeRegister
  5276 ;;		_vscp_writeStdReg
  5277 ;;		___lbmod
  5278 ;; This function is called by:
  5279 ;;		_main
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           	psect	text15
  5284  000EE6                     __ptext15:
  5285                           	opt stack 0
  5286  000EE6                     _vscp_handleProtocolEvent:
  5287                           	opt stack 21
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;incstack = 0
  5294                           ;incstack = 0
  5295  000EE6  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  5296  000EE8  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  5297  000EEA  E101 D2B5          	bz	l10457
  5298  000EEE  D2E4               	goto	l1291
  5299  000EF0                     l10039:
  5300                           
  5301                           ; BSR set to: 0
  5302                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  5303  000EF0  EC91  F01C         	call	_vscp_handleHeartbeat	;wreg free
  5304                           
  5305                           ;vscp_firmware.c: 807: break;
  5306  000EF4  D2E1               	goto	l1291
  5307  000EF6                     l10041:
  5308                           
  5309                           ; BSR set to: 0
  5310                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  5311  000EF6  EC2F  F01D         	call	_vscp_newNodeOnline	;wreg free
  5312                           
  5313                           ;vscp_firmware.c: 812: break;
  5314  000EFA  D2DE               	goto	l1291
  5315  000EFC                     l10043:
  5316                           
  5317                           ; BSR set to: 0
  5318                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  5319  000EFC  ECB9  F01D         	call	_vscp_handleSetNickname	;wreg free
  5320                           
  5321                           ;vscp_firmware.c: 817: break;
  5322  000F00  D2DB               	goto	l1291
  5323  000F02                     l10045:
  5324                           
  5325                           ; BSR set to: 0
  5326                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  5327  000F02  ECE9  F01C         	call	_vscp_handleDropNickname	;wreg free
  5328                           
  5329                           ;vscp_firmware.c: 822: break;
  5330  000F06  D2D8               	goto	l1291
  5331  000F08                     l10047:
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  5335                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5336  000F08  5196               	movf	_vscp_imsg& (0+255),w,b
  5337  000F0A  0B0F               	andlw	15
  5338  000F0C  0A02               	xorlw	2
  5339  000F0E  E001 D2D3          	bnz	l1291
  5340                           
  5341                           ; BSR set to: 0
  5342  000F12  5191               	movf	_vscp_nickname& (0+255),w,b
  5343  000F14  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5344  000F18  62DF               	cpfseq	indf2,c
  5345  000F1A  D2CE               	goto	l1291
  5346                           
  5347                           ; BSR set to: 0
  5348                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  5349  000F1C  0E80               	movlw	128
  5350  000F1E  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5351  000F20  D012               	goto	l10067
  5352                           
  5353                           ; BSR set to: 0
  5354                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  5355  000F22  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5356  000F24  ECA6  F01A         	call	_vscp_readAppReg
  5357  000F28                     L13:
  5358  000F28  0100               	movlb	0	; () banked
  5359  000F2A                     L14:
  5360  000F2A  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
  5361                           
  5362                           ; BSR set to: 0
  5363                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  5364  000F2C  C09D  F0A9         	movff	_vscp_imsg+7,_vscp_omsg+5
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  5368  000F30  0E03               	movlw	3
  5369  000F32  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  5373  000F34  0E82               	movlw	130
  5374  000F36  6FA4               	movwf	_vscp_omsg& (0+255),b
  5375                           
  5376                           ; BSR set to: 0
  5377                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  5378  000F38  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5379  000F3A  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5380                           
  5381                           ; BSR set to: 0
  5382                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  5383  000F3C  0E0A               	movlw	10
  5384  000F3E  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5385  000F40                     l10065:
  5386                           
  5387                           ; BSR set to: 0
  5388                           ;vscp_firmware.c: 843: vscp_sendEvent();
  5389  000F40  ECA6  F01D         	call	_vscp_sendEvent	;wreg free
  5390                           
  5391                           ;vscp_firmware.c: 844: }
  5392  000F44  D2B9               	goto	l1291
  5393  000F46                     l10067:
  5394                           
  5395                           ; BSR set to: 0
  5396                           ;vscp_firmware.c: 845: else {
  5397                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  5398                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  5399  000F46  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5400  000F48  EC1F  F014         	call	_vscp_readStdReg
  5401  000F4C  D7ED               	goto	L13
  5402  000F4E                     l10081:
  5403                           
  5404                           ; BSR set to: 0
  5405                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  5406                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5407  000F4E  5196               	movf	_vscp_imsg& (0+255),w,b
  5408  000F50  0B0F               	andlw	15
  5409  000F52  0A03               	xorlw	3
  5410  000F54  E001 D2B0          	bnz	l1291
  5411                           
  5412                           ; BSR set to: 0
  5413  000F58  5191               	movf	_vscp_nickname& (0+255),w,b
  5414  000F5A  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5415  000F5E  62DF               	cpfseq	indf2,c
  5416  000F60  D2AB               	goto	l1291
  5417                           
  5418                           ; BSR set to: 0
  5419                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  5420  000F62  0E80               	movlw	128
  5421  000F64  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5422  000F66  D006               	goto	l10101
  5423                           
  5424                           ; BSR set to: 0
  5425                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  5426                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5427  000F68  C09E  F051         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  5428  000F6C  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5429  000F6E  EC11  F003         	call	_vscp_writeAppReg
  5430  000F72  D7DB               	goto	L14
  5431  000F74                     l10101:
  5432                           
  5433                           ; BSR set to: 0
  5434                           ;vscp_firmware.c: 888: else {
  5435                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  5436                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5437  000F74  C09E  F048         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  5438  000F78  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5439  000F7A  EC03  F018         	call	_vscp_writeStdReg
  5440  000F7E  D7D4               	goto	L13
  5441  000F80                     l10115:
  5442                           
  5443                           ; BSR set to: 0
  5444                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  5445                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  5446                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  5447                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  5448                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  5449                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  5450                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  5451  000F80  5191               	movf	_vscp_nickname& (0+255),w,b
  5452  000F82  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5453  000F86  62DF               	cpfseq	indf2,c
  5454  000F88  D297               	goto	l1291
  5455                           
  5456                           ; BSR set to: 0
  5457  000F8A  0E00               	movlw	0
  5458  000F8C  ECA3  F01E         	call	_vscp_getGUID
  5459  000F90  0100               	movlb	0	; () banked
  5460  000F92  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5461  000F94  E001 D290          	bnz	l1291
  5462                           
  5463                           ; BSR set to: 0
  5464  000F98  0E03               	movlw	3
  5465  000F9A  ECA3  F01E         	call	_vscp_getGUID
  5466  000F9E  0100               	movlb	0	; () banked
  5467  000FA0  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5468  000FA2  E001 D289          	bnz	l1291
  5469                           
  5470                           ; BSR set to: 0
  5471  000FA6  0E05               	movlw	5
  5472  000FA8  ECA3  F01E         	call	_vscp_getGUID
  5473  000FAC  0100               	movlb	0	; () banked
  5474  000FAE  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5475  000FB0  E001 D282          	bnz	l1291
  5476                           
  5477                           ; BSR set to: 0
  5478  000FB4  0E07               	movlw	7
  5479  000FB6  ECA3  F01E         	call	_vscp_getGUID
  5480  000FBA  0100               	movlb	0	; () banked
  5481  000FBC  19A1               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  5482  000FBE  E001 D27B          	bnz	l1291
  5483                           
  5484                           ; BSR set to: 0
  5485  000FC2  5053               	movf	_vscp_page_select+1,w,c
  5486  000FC4  19A2               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  5487  000FC6  E001 D277          	bnz	l1291
  5488                           
  5489                           ; BSR set to: 0
  5490  000FCA  5052               	movf	_vscp_page_select,w,c
  5491  000FCC  EE20  F0A3         	lfsr	2,_vscp_imsg+13
  5492  000FD0  62DF               	cpfseq	indf2,c
  5493  000FD2  D272               	goto	l1291
  5494                           
  5495                           ; BSR set to: 0
  5496                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  5497  000FD4  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5498  000FD6  EC3B  F01E         	call	_vscp_goBootloaderMode
  5499  000FDA  D26E               	goto	l1291
  5500  000FDC                     l10131:
  5501                           
  5502                           ; BSR set to: 0
  5503                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  5504                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  5505                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  5506                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  5507  000FDC  0E00               	movlw	0
  5508  000FDE  ECA3  F01E         	call	_vscp_getGUID
  5509  000FE2  0100               	movlb	0	; () banked
  5510  000FE4  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5511  000FE6  E173               	bnz	l10175
  5512                           
  5513                           ; BSR set to: 0
  5514  000FE8  0E01               	movlw	1
  5515  000FEA  ECA3  F01E         	call	_vscp_getGUID
  5516  000FEE  0100               	movlb	0	; () banked
  5517  000FF0  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5518  000FF2  E16D               	bnz	l10175
  5519                           
  5520                           ; BSR set to: 0
  5521  000FF4  0E02               	movlw	2
  5522  000FF6  ECA3  F01E         	call	_vscp_getGUID
  5523  000FFA  0100               	movlb	0	; () banked
  5524  000FFC  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5525  000FFE  E167               	bnz	l10175
  5526                           
  5527                           ; BSR set to: 0
  5528  001000  0E03               	movlw	3
  5529  001002  ECA3  F01E         	call	_vscp_getGUID
  5530  001006  0100               	movlb	0	; () banked
  5531  001008  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5532  00100A  E161               	bnz	l10175
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  5536  00100C  898D               	bsf	_vscp_guid_reset& (0+255),4,b
  5537  00100E  D05F               	goto	l10175
  5538  001010                     l10141:
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  5542                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  5543                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  5544                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  5545  001010  0E04               	movlw	4
  5546  001012  ECA3  F01E         	call	_vscp_getGUID
  5547  001016  0100               	movlb	0	; () banked
  5548  001018  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5549  00101A  E159               	bnz	l10175
  5550                           
  5551                           ; BSR set to: 0
  5552  00101C  0E05               	movlw	5
  5553  00101E  ECA3  F01E         	call	_vscp_getGUID
  5554  001022  0100               	movlb	0	; () banked
  5555  001024  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5556  001026  E153               	bnz	l10175
  5557                           
  5558                           ; BSR set to: 0
  5559  001028  0E06               	movlw	6
  5560  00102A  ECA3  F01E         	call	_vscp_getGUID
  5561  00102E  0100               	movlb	0	; () banked
  5562  001030  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5563  001032  E14D               	bnz	l10175
  5564                           
  5565                           ; BSR set to: 0
  5566  001034  0E07               	movlw	7
  5567  001036  ECA3  F01E         	call	_vscp_getGUID
  5568  00103A  0100               	movlb	0	; () banked
  5569  00103C  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5570  00103E  E147               	bnz	l10175
  5571                           
  5572                           ; BSR set to: 0
  5573                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  5574  001040  8B8D               	bsf	_vscp_guid_reset& (0+255),5,b
  5575  001042  D045               	goto	l10175
  5576  001044                     l10151:
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  5580                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  5581                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  5582                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  5583  001044  0E08               	movlw	8
  5584  001046  ECA3  F01E         	call	_vscp_getGUID
  5585  00104A  0100               	movlb	0	; () banked
  5586  00104C  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5587  00104E  E13F               	bnz	l10175
  5588                           
  5589                           ; BSR set to: 0
  5590  001050  0E09               	movlw	9
  5591  001052  ECA3  F01E         	call	_vscp_getGUID
  5592  001056  0100               	movlb	0	; () banked
  5593  001058  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5594  00105A  E139               	bnz	l10175
  5595                           
  5596                           ; BSR set to: 0
  5597  00105C  0E0A               	movlw	10
  5598  00105E  ECA3  F01E         	call	_vscp_getGUID
  5599  001062  0100               	movlb	0	; () banked
  5600  001064  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5601  001066  E133               	bnz	l10175
  5602                           
  5603                           ; BSR set to: 0
  5604  001068  0E0B               	movlw	11
  5605  00106A  ECA3  F01E         	call	_vscp_getGUID
  5606  00106E  0100               	movlb	0	; () banked
  5607  001070  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5608  001072  E12D               	bnz	l10175
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  5612  001074  8D8D               	bsf	_vscp_guid_reset& (0+255),6,b
  5613  001076  D02B               	goto	l10175
  5614  001078                     l10161:
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  5618                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  5619                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  5620                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  5621  001078  0E0C               	movlw	12
  5622  00107A  ECA3  F01E         	call	_vscp_getGUID
  5623  00107E  0100               	movlb	0	; () banked
  5624  001080  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5625  001082  E125               	bnz	l10175
  5626                           
  5627                           ; BSR set to: 0
  5628  001084  0E0D               	movlw	13
  5629  001086  ECA3  F01E         	call	_vscp_getGUID
  5630  00108A  0100               	movlb	0	; () banked
  5631  00108C  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5632  00108E  E11F               	bnz	l10175
  5633                           
  5634                           ; BSR set to: 0
  5635  001090  0E0E               	movlw	14
  5636  001092  ECA3  F01E         	call	_vscp_getGUID
  5637  001096  0100               	movlb	0	; () banked
  5638  001098  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5639  00109A  E119               	bnz	l10175
  5640                           
  5641                           ; BSR set to: 0
  5642  00109C  0E0F               	movlw	15
  5643  00109E  ECA3  F01E         	call	_vscp_getGUID
  5644  0010A2  0100               	movlb	0	; () banked
  5645  0010A4  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5646  0010A6  E113               	bnz	l10175
  5647                           
  5648                           ; BSR set to: 0
  5649                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  5650  0010A8  8F8D               	bsf	_vscp_guid_reset& (0+255),7,b
  5651  0010AA  D011               	goto	l10175
  5652  0010AC                     l1231:
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  5656  0010AC  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  5657                           
  5658                           ;vscp_firmware.c: 965: break;
  5659  0010AE  D00F               	goto	l10175
  5660  0010B0                     l10173:
  5661                           
  5662                           ; BSR set to: 0
  5663  0010B0  399C               	swapf	(_vscp_imsg+6)& (0+255),w,b
  5664  0010B2  0B0F               	andlw	15
  5665  0010B4  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5666  0010B6  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5667                           
  5668                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5669                           ; Switch size 1, requested type "space"
  5670                           ; Number of cases is 1, Range of values is 0 to 0
  5671                           ; switch strategies available:
  5672                           ; Name         Instructions Cycles
  5673                           ; simple_byte            4     3 (average)
  5674                           ;	Chosen strategy is simple_byte
  5675  0010B8  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5676  0010BA  E1F8               	bnz	l1231
  5677                           
  5678                           ; BSR set to: 0
  5679                           ; Switch size 1, requested type "space"
  5680                           ; Number of cases is 4, Range of values is 0 to 3
  5681                           ; switch strategies available:
  5682                           ; Name         Instructions Cycles
  5683                           ; simple_byte           13     7 (average)
  5684                           ;	Chosen strategy is simple_byte
  5685  0010BC  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5686  0010BE  E08E               	bz	l10131
  5687  0010C0  0A01               	xorlw	1	; case 1
  5688  0010C2  E0A6               	bz	l10141
  5689  0010C4  0A03               	xorlw	3	; case 2
  5690  0010C6  E0BE               	bz	l10151
  5691  0010C8  0A01               	xorlw	1	; case 3
  5692  0010CA  E0D6               	bz	l10161
  5693  0010CC  D7EF               	goto	l1231
  5694  0010CE                     l10175:
  5695                           
  5696                           ; BSR set to: 0
  5697                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  5698  0010CE  518D               	movf	_vscp_guid_reset& (0+255),w,b
  5699  0010D0  0BF0               	andlw	240
  5700  0010D2  0AF0               	xorlw	240
  5701  0010D4  E001 D1F0          	bnz	l1291
  5702                           
  5703                           ; BSR set to: 0
  5704                           ;vscp_firmware.c: 970: vscp_init();
  5705  0010D8  EC6F  F01C         	call	_vscp_init	;wreg free
  5706  0010DC  D1ED               	goto	l1291
  5707  0010DE                     l10179:
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5711  0010DE  5191               	movf	_vscp_nickname& (0+255),w,b
  5712  0010E0  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5713  0010E4  62DF               	cpfseq	indf2,c
  5714  0010E6  D1E8               	goto	l1291
  5715                           
  5716                           ; BSR set to: 0
  5717                           ;vscp_firmware.c: 978: uint8_t i;
  5718                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  5719  0010E8  6BDD               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  5720                           
  5721                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  5722  0010EA  C09D  F0DC         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  5723                           
  5724                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  5725  0010EE  C09E  F0DF         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  5726                           
  5727                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  5728  0010F2  6BEB               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  5729  0010F4  D042               	goto	l10211
  5730  0010F6                     l10183:
  5731                           
  5732                           ; BSR set to: 0
  5733                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  5734  0010F6  0E07               	movlw	7
  5735  0010F8  6E08               	movwf	?___lbmod,c
  5736  0010FA  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5737  0010FC  EC59  F01D         	call	___lbmod
  5738  001100  0100               	movlb	0	; () banked
  5739  001102  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5740  001104  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5741  001106  0FAA               	addlw	low (_vscp_omsg+6)
  5742  001108  6ED9               	movwf	fsr2l,c
  5743  00110A  6ADA               	clrf	fsr2h,c
  5744  00110C  51DC               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  5745  00110E  25EB               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5746  001110  EC49  F01E         	call	_vscp_readRegister
  5747  001114  6EDF               	movwf	indf2,c
  5748                           
  5749                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  5750  001116  0E07               	movlw	7
  5751  001118  6E08               	movwf	?___lbmod,c
  5752  00111A  0100               	movlb	0	; () banked
  5753  00111C  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5754  00111E  EC59  F01D         	call	___lbmod
  5755  001122  0A06               	xorlw	6
  5756  001124  E00B               	bz	l10189
  5757  001126  0EFF               	movlw	255
  5758  001128  0100               	movlb	0	; () banked
  5759  00112A  25DF               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  5760  00112C  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5761  00112E  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5762  001130  0EFF               	movlw	255
  5763  001132  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  5764  001134  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5765  001136  19D1               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5766  001138  11D2               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5767  00113A  E11E               	bnz	l10209
  5768  00113C                     l10189:
  5769                           
  5770                           ;vscp_firmware.c: 988: uint8_t bytes;
  5771                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  5772  00113C  0E07               	movlw	7
  5773  00113E  6E08               	movwf	?___lbmod,c
  5774  001140  0100               	movlb	0	; () banked
  5775  001142  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5776  001144  EC59  F01D         	call	___lbmod
  5777  001148  0A06               	xorlw	6
  5778  00114A  E103               	bnz	l10193
  5779                           
  5780                           ;vscp_firmware.c: 991: bytes = 7;
  5781  00114C  0E07               	movlw	7
  5782  00114E  0100               	movlb	0	; () banked
  5783  001150  D009               	goto	L15
  5784  001152                     l10193:
  5785                           
  5786                           ;vscp_firmware.c: 993: else {
  5787                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  5788  001152  0E07               	movlw	7
  5789  001154  6E08               	movwf	?___lbmod,c
  5790  001156  0100               	movlb	0	; () banked
  5791  001158  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5792  00115A  EC59  F01D         	call	___lbmod
  5793  00115E  0100               	movlb	0	; () banked
  5794  001160  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5795  001162  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5796  001164                     L15:
  5797  001164  6FDE               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  5798                           
  5799                           ; BSR set to: 0
  5800                           ;vscp_firmware.c: 995: }
  5801                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  5802  001166  51DE               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  5803  001168  0F81               	addlw	129
  5804  00116A  6FA4               	movwf	_vscp_omsg& (0+255),b
  5805                           
  5806                           ; BSR set to: 0
  5807                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  5814  00116C  D9BC               	call	PL72	;call to abstracted procedure
  5815                           
  5816                           ; BSR set to: 0
  5817                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  5818  00116E  C0DD  F0A9         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  5819                           
  5820                           ; BSR set to: 0
  5821                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  5822  001172  ECA6  F01D         	call	_vscp_sendEvent	;wreg free
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;vscp_firmware.c: 1005: pos++;
  5826  001176  2BDD               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  5827  001178                     l10209:
  5828                           
  5829                           ; BSR set to: 0
  5830  001178  2BEB               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  5831  00117A                     l10211:
  5832                           
  5833                           ; BSR set to: 0
  5834  00117A  51DF               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  5835  00117C  5DEB               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5836  00117E  E301 D19B          	bc	l1291
  5837  001182  D7B9               	goto	l10183
  5838  001184                     l10213:
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5842  001184  5191               	movf	_vscp_nickname& (0+255),w,b
  5843  001186  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5844  00118A  62DF               	cpfseq	indf2,c
  5845  00118C  D195               	goto	l1291
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;vscp_firmware.c: 1014: uint8_t i;
  5849                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  5850  00118E  C09D  F0E0         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1283
  5851                           
  5852                           ; BSR set to: 0
  5853                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  5854  001192  5196               	movf	_vscp_imsg& (0+255),w,b
  5855  001194  0FFE               	addlw	254
  5856  001196  0B07               	andlw	7
  5857  001198  6FE1               	movwf	vscp_handleProtocolEvent@len_1284& (0+255),b
  5858                           
  5859                           ; BSR set to: 0
  5860                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  5861  00119A  6BE6               	clrf	vscp_handleProtocolEvent@i_1282& (0+255),b
  5862  00119C  D016               	goto	l10227
  5863  00119E                     l10221:
  5864                           
  5865                           ; BSR set to: 0
  5866                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  5867  00119E  51E6               	movf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5868  0011A0  0F9E               	addlw	low (_vscp_imsg+8)
  5869  0011A2  6ED9               	movwf	fsr2l,c
  5870  0011A4  6ADA               	clrf	fsr2h,c
  5871  0011A6  50DF               	movf	indf2,w,c
  5872  0011A8  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  5873  0011AA  51E0               	movf	vscp_handleProtocolEvent@pos_1283& (0+255),w,b
  5874  0011AC  25E6               	addwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5875  0011AE  ECEE  F01D         	call	_vscp_writeRegister
  5876                           
  5877                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  5878  0011B2  0100               	movlb	0	; () banked
  5879  0011B4  51E6               	movf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5880  0011B6  0FAA               	addlw	low (_vscp_omsg+6)
  5881  0011B8  6ED9               	movwf	fsr2l,c
  5882  0011BA  6ADA               	clrf	fsr2h,c
  5883  0011BC  51E0               	movf	vscp_handleProtocolEvent@pos_1283& (0+255),w,b
  5884  0011BE  25E6               	addwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5885  0011C0  EC49  F01E         	call	_vscp_readRegister
  5886  0011C4  6EDF               	movwf	indf2,c
  5887  0011C6  0100               	movlb	0	; () banked
  5888  0011C8  2BE6               	incf	vscp_handleProtocolEvent@i_1282& (0+255),f,b
  5889  0011CA                     l10227:
  5890                           
  5891                           ; BSR set to: 0
  5892  0011CA  51E1               	movf	vscp_handleProtocolEvent@len_1284& (0+255),w,b
  5893  0011CC  5DE6               	subwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5894  0011CE  E3E7               	bnc	l10221
  5895                           
  5896                           ; BSR set to: 0
  5897                           ;vscp_firmware.c: 1022: }
  5898                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  5899                           
  5900                           ; BSR set to: 0
  5901                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  5902                           
  5903                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  5904  0011D0  D98A               	call	PL72	;call to abstracted procedure
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  5908  0011D2  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  5909                           
  5910                           ; BSR set to: 0
  5911                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  5912  0011D4  51E1               	movf	vscp_handleProtocolEvent@len_1284& (0+255),w,b
  5913  0011D6  0F81               	addlw	129
  5914  0011D8  6FA4               	movwf	_vscp_omsg& (0+255),b
  5915  0011DA  D6B2               	goto	l10065
  5916  0011DC                     l10239:
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5920  0011DC  5191               	movf	_vscp_nickname& (0+255),w,b
  5921  0011DE  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5922  0011E2  62DF               	cpfseq	indf2,c
  5923  0011E4  D169               	goto	l1291
  5924                           
  5925                           ; BSR set to: 0
  5926                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5927                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  5928                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  5929  0011E6  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5930  0011E8  ECA6  F01A         	call	_vscp_readAppReg
  5931  0011EC  0100               	movlb	0	; () banked
  5932  0011EE  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5933  0011F0  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5934  0011F2  6E51               	movwf	?_vscp_writeAppReg,c
  5935  0011F4  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5936  0011F6  EC11  F003         	call	_vscp_writeAppReg
  5937  0011FA  D697               	goto	L14
  5938  0011FC                     l10255:
  5939                           
  5940                           ; BSR set to: 0
  5941                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5942  0011FC  5191               	movf	_vscp_nickname& (0+255),w,b
  5943  0011FE  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5944  001202  62DF               	cpfseq	indf2,c
  5945  001204  D159               	goto	l1291
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5949                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  5950                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  5951  001206  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5952  001208  ECA6  F01A         	call	_vscp_readAppReg
  5953  00120C  0100               	movlb	0	; () banked
  5954  00120E  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5955  001210  05D1               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  5956  001212  6E51               	movwf	?_vscp_writeAppReg,c
  5957  001214  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5958  001216  EC11  F003         	call	_vscp_writeAppReg
  5959  00121A  D687               	goto	L14
  5960  00121C                     l10271:
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  5964                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  5965  00121C  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
  5966  00121E  1991               	xorwf	_vscp_nickname& (0+255),w,b
  5967  001220  E003               	bz	l1255
  5968                           
  5969                           ; BSR set to: 0
  5970  001222  299C               	incf	(_vscp_imsg+6)& (0+255),w,b
  5971  001224  E001 D148          	bnz	l1291
  5972  001228                     l1255:
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  5976  001228  6BE5               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  5977                           
  5978                           ; BSR set to: 0
  5979                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  5980  00122A  0E03               	movlw	3
  5981  00122C  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5982                           
  5983                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  5984  00122E  0E88               	movlw	136
  5985  001230  6FA4               	movwf	_vscp_omsg& (0+255),b
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  5989  001232  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5990  001234  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5991                           
  5992                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  5993  001236  0E20               	movlw	32
  5994  001238  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  5998  00123A  6BEA               	clrf	vscp_handleProtocolEvent@i_1285& (0+255),b
  5999  00123C                     l1256:
  6000                           
  6001                           ; BSR set to: 0
  6002                           ;vscp_firmware.c: 1091: {
  6003                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  6004                           
  6005                           ; BSR set to: 0
  6006                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  6007  00123C  D95B               	call	PL80	;call to abstracted procedure
  6008  00123E                     l10291:
  6009                           
  6010                           ; BSR set to: 0
  6011                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  6012  00123E  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  6013  001240  0FA9               	addlw	low (_vscp_omsg+5)
  6014  001242  6ED9               	movwf	fsr2l,c
  6015  001244  6ADA               	clrf	fsr2h,c
  6016  001246  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  6017  001248  080F               	sublw	15
  6018  00124A  ECA3  F01E         	call	_vscp_getGUID
  6019  00124E  6EDF               	movwf	indf2,c
  6020  001250  0100               	movlb	0	; () banked
  6021  001252  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;vscp_firmware.c: 1096: if (k > 16)
  6025  001254  0E10               	movlw	16
  6026  001256  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  6027  001258  D001               	goto	l10299
  6028  00125A  D004               	goto	l10303
  6029  00125C                     l10299:
  6030                           
  6031                           ; BSR set to: 0
  6032  00125C  2BEC               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  6033                           
  6034                           ; BSR set to: 0
  6035  00125E  0E07               	movlw	7
  6036  001260  65EC               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  6037  001262  D7ED               	goto	l10291
  6038  001264                     l10303:
  6039                           
  6040                           ; BSR set to: 0
  6041                           ;vscp_firmware.c: 1098: }
  6042                           ;vscp_firmware.c: 1100: if (k > 16)
  6043  001264  0E10               	movlw	16
  6044  001266  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  6045  001268  D001               	goto	l10307
  6046  00126A  D006               	goto	l1257
  6047  00126C                     l10307:
  6048                           
  6049                           ; BSR set to: 0
  6050                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  6051  00126C  ECA6  F01D         	call	_vscp_sendEvent	;wreg free
  6052                           
  6053                           ; BSR set to: 0
  6054  001270  2BEA               	incf	vscp_handleProtocolEvent@i_1285& (0+255),f,b
  6055                           
  6056                           ; BSR set to: 0
  6057  001272  0E02               	movlw	2
  6058  001274  65EA               	cpfsgt	vscp_handleProtocolEvent@i_1285& (0+255),b
  6059  001276  D7E2               	goto	l1256
  6060  001278                     l1257:
  6061                           
  6062                           ; BSR set to: 0
  6063                           ;vscp_firmware.c: 1104: }
  6064                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  6065  001278  6BEC               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  6066  00127A                     l10317:
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;vscp_firmware.c: 1107: {
  6070                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  6071  00127A  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  6072  00127C  EC56  F01E         	call	_vscp_getMDF_URL
  6073  001280  0900               	iorlw	0
  6074  001282  E008               	bz	l10321
  6075                           
  6076                           ; BSR set to: 0
  6077                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  6078  001284  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  6079  001286  0FAC               	addlw	low (_vscp_omsg+8)
  6080  001288  6ED9               	movwf	fsr2l,c
  6081  00128A  6ADA               	clrf	fsr2h,c
  6082  00128C  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  6083  00128E  EC56  F01E         	call	_vscp_getMDF_URL
  6084  001292  D005               	goto	L16
  6085  001294                     l10321:
  6086                           
  6087                           ; BSR set to: 0
  6088                           ;vscp_firmware.c: 1110: else
  6089                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  6090  001294  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  6091  001296  0FAC               	addlw	low (_vscp_omsg+8)
  6092  001298  6ED9               	movwf	fsr2l,c
  6093  00129A  6ADA               	clrf	fsr2h,c
  6094  00129C  0E00               	movlw	0
  6095  00129E                     L16:
  6096  00129E  6EDF               	movwf	indf2,c
  6097                           
  6098                           ; BSR set to: 0
  6099  0012A0  2BEC               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  6100                           
  6101                           ; BSR set to: 0
  6102  0012A2  0E04               	movlw	4
  6103  0012A4  65EC               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  6104  0012A6  D7E9               	goto	l10317
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;vscp_firmware.c: 1112: }
  6108                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  6109  0012A8  ECA6  F01D         	call	_vscp_sendEvent	;wreg free
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;vscp_firmware.c: 1116: k = 5;
  6113  0012AC  0E05               	movlw	5
  6114  0012AE  6FE5               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  6115                           
  6116                           ; BSR set to: 0
  6117                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  6118  0012B0  0E03               	movlw	3
  6119  0012B2  6FEA               	movwf	vscp_handleProtocolEvent@i_1285& (0+255),b
  6120  0012B4                     l1266:
  6121                           
  6122                           ; BSR set to: 0
  6123                           ;vscp_firmware.c: 1118: {
  6124                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  6128  0012B4  D91F               	call	PL80	;call to abstracted procedure
  6129  0012B6                     l10343:
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  6133  0012B6  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  6134  0012B8  0FA9               	addlw	low (_vscp_omsg+5)
  6135  0012BA  6ED9               	movwf	fsr2l,c
  6136  0012BC  6ADA               	clrf	fsr2h,c
  6137  0012BE  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  6138  0012C0  EC56  F01E         	call	_vscp_getMDF_URL
  6139  0012C4  6EDF               	movwf	indf2,c
  6140                           
  6141                           ; BSR set to: 0
  6142  0012C6  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  6143                           
  6144                           ; BSR set to: 0
  6145  0012C8  2BEC               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  6146                           
  6147                           ; BSR set to: 0
  6148  0012CA  0E07               	movlw	7
  6149  0012CC  65EC               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  6150  0012CE  D7F3               	goto	l10343
  6151                           
  6152                           ; BSR set to: 0
  6153                           ;vscp_firmware.c: 1123: }
  6154                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  6155  0012D0  ECA6  F01D         	call	_vscp_sendEvent	;wreg free
  6156                           
  6157                           ; BSR set to: 0
  6158  0012D4  2BEA               	incf	vscp_handleProtocolEvent@i_1285& (0+255),f,b
  6159                           
  6160                           ; BSR set to: 0
  6161  0012D6  0E06               	movlw	6
  6162  0012D8  65EA               	cpfsgt	vscp_handleProtocolEvent@i_1285& (0+255),b
  6163  0012DA  D7EC               	goto	l1266
  6164  0012DC  D0ED               	goto	l1291
  6165  0012DE                     l10357:
  6166                           
  6167                           ; BSR set to: 0
  6168                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  6169  0012DE  5191               	movf	_vscp_nickname& (0+255),w,b
  6170  0012E0  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6171  0012E4  62DF               	cpfseq	indf2,c
  6172  0012E6  D0E8               	goto	l1291
  6173                           
  6174                           ; BSR set to: 0
  6175                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  6176  0012E8  0E03               	movlw	3
  6177  0012EA  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6178                           
  6179                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  6180  0012EC  0E87               	movlw	135
  6181  0012EE  6FA4               	movwf	_vscp_omsg& (0+255),b
  6182                           
  6183                           ; BSR set to: 0
  6184                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  6185  0012F0  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6186  0012F2  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6187                           
  6188                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  6189  0012F4  0E22               	movlw	34
  6190  0012F6  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  6194  0012F8  0EA9               	movlw	(_vscp_omsg+5)& (0+255)
  6195  0012FA  ECFF  F01D         	call	_vscp_getMatrixInfo
  6196  0012FE  D620               	goto	l10065
  6197  001300                     l10367:
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  6201  001300  5191               	movf	_vscp_nickname& (0+255),w,b
  6202  001302  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6203  001306  62DF               	cpfseq	indf2,c
  6204  001308  D0D7               	goto	l1291
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  6208  00130A  6BE7               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  6212                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  6213  00130C  C096  F0D1         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  6214  001310  0E0F               	movlw	15
  6215  001312  17D1               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6216  001314  0E04               	movlw	4
  6217  001316  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6218  001318  E312               	bnc	l10383
  6219                           
  6220                           ; BSR set to: 0
  6221                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  6222  00131A  C0A0  F0E8         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1289
  6223  00131E  6BE9               	clrf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  6227  001320  51E9               	movf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6228  001322  11E8               	iorwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6229  001324  E103               	bnz	l10379
  6230                           
  6231                           ; BSR set to: 0
  6232  001326  0E01               	movlw	1
  6233  001328  6FE9               	movwf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6234  00132A  6BE8               	clrf	vscp_handleProtocolEvent@bytes_1289& (0+255),b
  6235  00132C                     l10379:
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  6239  00132C  0E01               	movlw	1
  6240  00132E  5DE8               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6241  001330  0E01               	movlw	1
  6242  001332  59E9               	subwfb	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6243  001334  E307               	bnc	l10385
  6244                           
  6245                           ; BSR set to: 0
  6246  001336  0E01               	movlw	1
  6247  001338  6FE9               	movwf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6248  00133A  0E00               	movlw	0
  6249  00133C  D002               	goto	L18
  6250  00133E                     l10383:
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;vscp_firmware.c: 1173: else {
  6254                           ;vscp_firmware.c: 1174: bytes = 1;
  6255  00133E  6BE9               	clrf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6256  001340  0E01               	movlw	1
  6257  001342                     L18:
  6258  001342  6FE8               	movwf	vscp_handleProtocolEvent@bytes_1289& (0+255),b
  6259  001344                     l10385:
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;vscp_firmware.c: 1175: }
  6263                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  6264  001344  C052  F0D8         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  6265  001348  C053  F0D9         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  6269  00134C  D8B6               	call	PL28	;call to abstracted procedure
  6270                           
  6271                           ; BSR set to: 0
  6272                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  6273  00134E  0E07               	movlw	7
  6274  001350  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6275                           
  6276                           ; BSR set to: 0
  6277                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  6281                           
  6282                           ; BSR set to: 0
  6283                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  6284                           
  6285                           ; BSR set to: 0
  6286                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  6287                           
  6288                           ; BSR set to: 0
  6289                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  6290  001352  D8BF               	call	PL36	;call to abstracted procedure
  6291  001354                     l10401:
  6292                           
  6293                           ; BSR set to: 0
  6294                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  6295  001354  51E7               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6296  001356  5DE8               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6297  001358  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6298  00135A  0E00               	movlw	0
  6299  00135C  59E9               	subwfb	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6300  00135E  6FD2               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6301  001360  0E04               	movlw	4
  6302  001362  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6303  001364  0E00               	movlw	0
  6304  001366  59D2               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6305  001368  E302               	bnc	l10405
  6306                           
  6307                           ; BSR set to: 0
  6308                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  6309  00136A  0E04               	movlw	4
  6310  00136C  D002               	goto	L19
  6311  00136E                     l10405:
  6312                           
  6313                           ; BSR set to: 0
  6314                           ;vscp_firmware.c: 1198: else {
  6315                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  6316  00136E  51E7               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6317  001370  5DE8               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6318  001372                     L19:
  6319  001372  6FE2               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  6320                           
  6321                           ; BSR set to: 0
  6322                           ;vscp_firmware.c: 1200: }
  6323                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  6324  001374  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6325  001376  0F84               	addlw	132
  6326  001378  6FA4               	movwf	_vscp_omsg& (0+255),b
  6327                           
  6328                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  6329                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  6330  00137A  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6331  00137C  25E7               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6332  00137E  6FAC               	movwf	(_vscp_omsg+8)& (0+255),b
  6333                           
  6334                           ; BSR set to: 0
  6335                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  6336  001380  6BE3               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  6337  001382  D00C               	goto	l10413
  6338  001384                     l10409:
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  6342                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  6343  001384  51E3               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6344  001386  0FAD               	addlw	low (_vscp_omsg+9)
  6345  001388  6ED9               	movwf	fsr2l,c
  6346  00138A  6ADA               	clrf	fsr2h,c
  6347  00138C  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6348  00138E  25E7               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6349  001390  25E3               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6350  001392  EC49  F01E         	call	_vscp_readRegister
  6351  001396  6EDF               	movwf	indf2,c
  6352  001398  0100               	movlb	0	; () banked
  6353  00139A  2BE3               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  6354  00139C                     l10413:
  6355                           
  6356                           ; BSR set to: 0
  6357  00139C  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6358  00139E  5DE3               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6359  0013A0  E3F1               	bnc	l10409
  6360                           
  6361                           ; BSR set to: 0
  6362                           ;vscp_firmware.c: 1211: }
  6363                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  6364  0013A2  ECA6  F01D         	call	_vscp_sendEvent	;wreg free
  6365                           
  6366                           ; BSR set to: 0
  6367                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  6368  0013A6  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6369  0013A8  27E7               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  6373  0013AA  2BA9               	incf	(_vscp_omsg+5)& (0+255),f,b
  6374                           
  6375                           ; BSR set to: 0
  6376                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  6377  0013AC  51E7               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6378  0013AE  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6379  0013B0  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6380  0013B2  51E8               	movf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6381  0013B4  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6382  0013B6  51E9               	movf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6383  0013B8  59D2               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6384  0013BA  E3CC               	bnc	l10401
  6385                           
  6386                           ; BSR set to: 0
  6387                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  6388  0013BC  C0D8  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  6389  0013C0  C0D9  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  6390  0013C4  D079               	goto	l1291
  6391  0013C6                     l10423:
  6392                           
  6393                           ; BSR set to: 0
  6394                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  6395  0013C6  5191               	movf	_vscp_nickname& (0+255),w,b
  6396  0013C8  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6397  0013CC  62DF               	cpfseq	indf2,c
  6398  0013CE  D074               	goto	l1291
  6399                           
  6400                           ; BSR set to: 0
  6401                           ;vscp_firmware.c: 1234: uint8_t i;
  6402                           ;vscp_firmware.c: 1235: uint16_t page_save;
  6403                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  6404  0013D0  C052  F0DA         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1294
  6405  0013D4  C053  F0DB         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1294+1
  6406                           
  6407                           ; BSR set to: 0
  6408                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  6409  0013D8  D870               	call	PL28	;call to abstracted procedure
  6410                           
  6411                           ; BSR set to: 0
  6412                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  6413  0013DA  C09F  F0E4         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1293
  6414                           
  6415                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  6416                           ;vscp_firmware.c: 1248: i++) {
  6417  0013DE  D014               	goto	l10435
  6418  0013E0                     l10431:
  6419                           
  6420                           ; BSR set to: 0
  6421                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  6422                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  6423  0013E0  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6424  0013E2  08A0               	sublw	low (_vscp_imsg+10)
  6425  0013E4  25E4               	addwf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6426  0013E6  6ED9               	movwf	fsr2l,c
  6427  0013E8  6ADA               	clrf	fsr2h,c
  6428  0013EA  50DF               	movf	indf2,w,c
  6429  0013EC  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  6430  0013EE  51E4               	movf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6431  0013F0  ECEE  F01D         	call	_vscp_writeRegister
  6432  0013F4  0100               	movlb	0	; () banked
  6433  0013F6  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6434  0013F8  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6435  0013FA  08AD               	sublw	low (_vscp_omsg+9)
  6436  0013FC  25E4               	addwf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6437  0013FE  6ED9               	movwf	fsr2l,c
  6438  001400  6ADA               	clrf	fsr2h,c
  6439  001402  C0D1  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  6440                           
  6441                           ; BSR set to: 0
  6442  001406  2BE4               	incf	vscp_handleProtocolEvent@i_1293& (0+255),f,b
  6443  001408                     l10435:
  6444                           
  6445                           ; BSR set to: 0
  6446  001408  5196               	movf	_vscp_imsg& (0+255),w,b
  6447  00140A  0B0F               	andlw	15
  6448  00140C  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6449  00140E  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6450  001410  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6451  001412  27D1               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6452  001414  0E00               	movlw	0
  6453  001416  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6454  001418  0EFC               	movlw	252
  6455  00141A  25D1               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6456  00141C  6FD3               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  6457  00141E  0EFF               	movlw	255
  6458  001420  21D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6459  001422  6FD4               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  6460  001424  51E4               	movf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6461  001426  6FD5               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  6462  001428  6BD6               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  6463  00142A  51D6               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  6464  00142C  0A80               	xorlw	128
  6465  00142E  6FD7               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  6466  001430  51D3               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  6467  001432  5DD5               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  6468  001434  51D4               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  6469  001436  0A80               	xorlw	128
  6470  001438  59D7               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  6471  00143A  E3D2               	bnc	l10431
  6472                           
  6473                           ; BSR set to: 0
  6474                           ;vscp_firmware.c: 1251: }
  6475                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  6476  00143C  C0DA  F052         	movff	vscp_handleProtocolEvent@page_save_1294,_vscp_page_select
  6477  001440  C0DB  F053         	movff	vscp_handleProtocolEvent@page_save_1294+1,_vscp_page_select+1
  6478                           
  6479                           ; BSR set to: 0
  6480                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  6481  001444  0E07               	movlw	7
  6482  001446  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6483                           
  6484                           ; BSR set to: 0
  6485                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  6486  001448  5196               	movf	_vscp_imsg& (0+255),w,b
  6487  00144A  0B0F               	andlw	15
  6488  00144C  0F80               	addlw	128
  6489  00144E  6FA4               	movwf	_vscp_omsg& (0+255),b
  6490                           
  6491                           ; BSR set to: 0
  6492                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  6493                           
  6494                           ; BSR set to: 0
  6495                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  6496                           
  6497                           ; BSR set to: 0
  6498                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  6499                           
  6500                           ; BSR set to: 0
  6501                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  6502                           
  6503                           ; BSR set to: 0
  6504                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  6505  001450  D840               	call	PL36	;call to abstracted procedure
  6506                           
  6507                           ; BSR set to: 0
  6508                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  6509  001452  C09F  F0AC         	movff	_vscp_imsg+9,_vscp_omsg+8
  6510  001456  D574               	goto	l10065
  6511  001458                     l10457:
  6512                           
  6513                           ; BSR set to: 0
  6514  001458  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  6515                           
  6516                           ; Switch size 1, requested type "space"
  6517                           ; Number of cases is 16, Range of values is 1 to 38
  6518                           ; switch strategies available:
  6519                           ; Name         Instructions Cycles
  6520                           ; simple_byte           49    25 (average)
  6521                           ;	Chosen strategy is simple_byte
  6522  00145A  0A01               	xorlw	1	; case 1
  6523  00145C  E101 D548          	bz	l10039
  6524  001460  0A03               	xorlw	3	; case 2
  6525  001462  E101 D548          	bz	l10041
  6526  001466  0A04               	xorlw	4	; case 6
  6527  001468  E101 D548          	bz	l10043
  6528  00146C  0A0E               	xorlw	14	; case 8
  6529  00146E  E101 D548          	bz	l10045
  6530  001472  0A01               	xorlw	1	; case 9
  6531  001474  E101 D548          	bz	l10047
  6532  001478  0A02               	xorlw	2	; case 11
  6533  00147A  E101 D568          	bz	l10081
  6534  00147E  0A07               	xorlw	7	; case 12
  6535  001480  E101 D57E          	bz	l10115
  6536  001484  0A1B               	xorlw	27	; case 23
  6537  001486  E101 D613          	bz	l10173
  6538  00148A  0A0F               	xorlw	15	; case 24
  6539  00148C  E101 D627          	bz	l10179
  6540  001490  0A01               	xorlw	1	; case 25
  6541  001492  E101 D677          	bz	l10213
  6542  001496  0A04               	xorlw	4	; case 29
  6543  001498  E101 D6A0          	bz	l10239
  6544  00149C  0A03               	xorlw	3	; case 30
  6545  00149E  E101 D6AD          	bz	l10255
  6546  0014A2  0A01               	xorlw	1	; case 31
  6547  0014A4  E101 D6BA          	bz	l10271
  6548  0014A8  0A3E               	xorlw	62	; case 33
  6549  0014AA  E101 D718          	bz	l10357
  6550  0014AE  0A04               	xorlw	4	; case 37
  6551  0014B0  E101 D726          	bz	l10367
  6552  0014B4  0A03               	xorlw	3	; case 38
  6553  0014B6  E087               	bz	l10423
  6554  0014B8                     l1291:
  6555  0014B8  0012               	return	
  6556  0014BA                     __end_of_vscp_handleProtocolEvent:
  6557                           	opt stack 0
  6558  0014BA                     PL28:
  6559                           	opt stack 21
  6560  0014BA  519E               	movf	(_vscp_imsg+8)& (0+255),w,b
  6561  0014BC  C09D  F0D1         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6562  0014C0  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6563  0014C2  C0D1  F0D2         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6564  0014C6  6BD1               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6565  0014C8  11D1               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6566  0014CA  6E52               	movwf	_vscp_page_select,c
  6567  0014CC  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6568  0014CE  6E53               	movwf	_vscp_page_select+1,c
  6569  0014D0  0012               	return	
  6570  0014D2                     __end_ofPL28:
  6571                           	opt stack 0
  6572  0014D2                     PL36:
  6573                           	opt stack 21
  6574  0014D2  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6575  0014D4  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6576  0014D6  0E27               	movlw	39
  6577  0014D8  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6578  0014DA  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  6579  0014DC  C09D  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+6
  6580  0014E0  C09E  F0AB         	movff	_vscp_imsg+8,_vscp_omsg+7
  6581  0014E4  0012               	return	
  6582  0014E6                     __end_ofPL36:
  6583                           	opt stack 0
  6584  0014E6                     PL72:
  6585                           	opt stack 21
  6586  0014E6  0E07               	movlw	7
  6587  0014E8  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6588  0014EA  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6589  0014EC  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6590  0014EE  0E1A               	movlw	26
  6591  0014F0  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6592  0014F2  0C1A               	retlw	26
  6593  0014F4                     __end_ofPL72:
  6594                           	opt stack 0
  6595  0014F4                     PL80:
  6596                           	opt stack 21
  6597  0014F4  C0EA  F0A9         	movff	vscp_handleProtocolEvent@i_1285,_vscp_omsg+5
  6598  0014F8  0E01               	movlw	1
  6599  0014FA  6FEC               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  6600  0014FC  0C01               	retlw	1
  6601  0014FE                     __end_ofPL80:
  6602                           	opt stack 0
  6603                           tblptru	equ	0xFF8
  6604                           tblptrh	equ	0xFF7
  6605                           tblptrl	equ	0xFF6
  6606                           tablat	equ	0xFF5
  6607                           prodh	equ	0xFF4
  6608                           prodl	equ	0xFF3
  6609                           intcon	equ	0xFF2
  6610                           postinc0	equ	0xFEE
  6611                           wreg	equ	0xFE8
  6612                           indf1	equ	0xFE7
  6613                           fsr1h	equ	0xFE2
  6614                           fsr1l	equ	0xFE1
  6615                           indf2	equ	0xFDF
  6616                           postinc2	equ	0xFDE
  6617                           postdec2	equ	0xFDD
  6618                           plusw2	equ	0xFDB
  6619                           fsr2h	equ	0xFDA
  6620                           fsr2l	equ	0xFD9
  6621                           status	equ	0xFD8
  6622                           
  6623 ;; *************** function ___lbmod *****************
  6624 ;; Defined at:
  6625 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  6626 ;; Parameters:    Size  Location     Type
  6627 ;;  dividend        1    wreg     unsigned char 
  6628 ;;  divisor         1    7[COMRAM] unsigned char 
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;  dividend        1    8[COMRAM] unsigned char 
  6631 ;;  rem             1   10[COMRAM] unsigned char 
  6632 ;;  counter         1    9[COMRAM] unsigned char 
  6633 ;; Return value:  Size  Location     Type
  6634 ;;                  1    wreg      unsigned char 
  6635 ;; Registers used:
  6636 ;;		wreg, status,2, status,0
  6637 ;; Tracked objects:
  6638 ;;		On entry : F/0
  6639 ;;		On exit  : 0/0
  6640 ;;		Unchanged: 0/0
  6641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6642 ;;      Params:         1       0       0       0       0       0       0
  6643 ;;      Locals:         3       0       0       0       0       0       0
  6644 ;;      Temps:          0       0       0       0       0       0       0
  6645 ;;      Totals:         4       0       0       0       0       0       0
  6646 ;;Total ram usage:        4 bytes
  6647 ;; Hardware stack levels used:    1
  6648 ;; Hardware stack levels required when called:    2
  6649 ;; This function calls:
  6650 ;;		Nothing
  6651 ;; This function is called by:
  6652 ;;		_vscp_handleProtocolEvent
  6653 ;; This function uses a non-reentrant model
  6654 ;;
  6655                           
  6656                           	psect	text16
  6657  003AB2                     __ptext16:
  6658                           	opt stack 0
  6659  003AB2                     ___lbmod:
  6660                           	opt stack 27
  6661                           
  6662                           ;incstack = 0
  6663                           ;incstack = 0
  6664                           ;___lbmod@dividend stored from wreg
  6665  003AB2  CFE8 F009          	movff	wreg,___lbmod@dividend
  6666                           
  6667                           ; BSR set to: 0
  6668  003AB6  0E08               	movlw	8
  6669  003AB8  6E0A               	movwf	___lbmod@counter,c
  6670                           
  6671                           ; BSR set to: 0
  6672  003ABA  6A0B               	clrf	___lbmod@rem,c
  6673  003ABC                     l7521:
  6674  003ABC  90D8               	bcf	status,0,c
  6675  003ABE  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  6676  003AC0  340B               	rlcf	___lbmod@rem& (0+255),w,c
  6677  003AC2  6E0B               	movwf	___lbmod@rem,c
  6678  003AC4  90D8               	bcf	status,0,c
  6679  003AC6  3609               	rlcf	___lbmod@dividend,f,c
  6680  003AC8  5008               	movf	___lbmod@divisor,w,c
  6681  003ACA  5C0B               	subwf	___lbmod@rem,w,c
  6682  003ACC  E302               	bnc	l7529
  6683  003ACE  5008               	movf	___lbmod@divisor,w,c
  6684  003AD0  5E0B               	subwf	___lbmod@rem,f,c
  6685  003AD2                     l7529:
  6686  003AD2  2E0A               	decfsz	___lbmod@counter,f,c
  6687  003AD4  D7F3               	goto	l7521
  6688  003AD6  500B               	movf	___lbmod@rem,w,c
  6689  003AD8  0012               	return	
  6690  003ADA                     __end_of___lbmod:
  6691                           	opt stack 0
  6692                           tblptru	equ	0xFF8
  6693                           tblptrh	equ	0xFF7
  6694                           tblptrl	equ	0xFF6
  6695                           tablat	equ	0xFF5
  6696                           prodh	equ	0xFF4
  6697                           prodl	equ	0xFF3
  6698                           intcon	equ	0xFF2
  6699                           postinc0	equ	0xFEE
  6700                           wreg	equ	0xFE8
  6701                           indf1	equ	0xFE7
  6702                           fsr1h	equ	0xFE2
  6703                           fsr1l	equ	0xFE1
  6704                           indf2	equ	0xFDF
  6705                           postinc2	equ	0xFDE
  6706                           postdec2	equ	0xFDD
  6707                           plusw2	equ	0xFDB
  6708                           fsr2h	equ	0xFDA
  6709                           fsr2l	equ	0xFD9
  6710                           status	equ	0xFD8
  6711                           
  6712 ;; *************** function _vscp_writeRegister *****************
  6713 ;; Defined at:
  6714 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  6715 ;; Parameters:    Size  Location     Type
  6716 ;;  reg             1    wreg     unsigned char 
  6717 ;;  value           1   30[BANK0 ] unsigned char 
  6718 ;; Auto vars:     Size  Location     Type
  6719 ;;  reg             1   31[BANK0 ] unsigned char 
  6720 ;; Return value:  Size  Location     Type
  6721 ;;                  1    wreg      unsigned char 
  6722 ;; Registers used:
  6723 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6724 ;; Tracked objects:
  6725 ;;		On entry : F/0
  6726 ;;		On exit  : 0/0
  6727 ;;		Unchanged: 0/0
  6728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6729 ;;      Params:         0       1       0       0       0       0       0
  6730 ;;      Locals:         0       1       0       0       0       0       0
  6731 ;;      Temps:          0       0       0       0       0       0       0
  6732 ;;      Totals:         0       2       0       0       0       0       0
  6733 ;;Total ram usage:        2 bytes
  6734 ;; Hardware stack levels used:    1
  6735 ;; Hardware stack levels required when called:    8
  6736 ;; This function calls:
  6737 ;;		_vscp_writeAppReg
  6738 ;;		_vscp_writeStdReg
  6739 ;; This function is called by:
  6740 ;;		_vscp_handleProtocolEvent
  6741 ;; This function uses a non-reentrant model
  6742 ;;
  6743                           
  6744                           	psect	text17
  6745  003BDC                     __ptext17:
  6746                           	opt stack 0
  6747  003BDC                     _vscp_writeRegister:
  6748                           	opt stack 21
  6749                           
  6750                           ;incstack = 0
  6751                           ;incstack = 0
  6752                           ;vscp_writeRegister@reg stored from wreg
  6753  003BDC  CFE8 F0D0          	movff	wreg,vscp_writeRegister@reg
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  6757  003BE0  0E7F               	movlw	127
  6758  003BE2  65D0               	cpfsgt	vscp_writeRegister@reg& (0+255),b
  6759  003BE4  D006               	goto	l11315
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  6763  003BE6  C0CF  F048         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  6764  003BEA  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6765  003BEC  EC03  F018         	call	_vscp_writeStdReg
  6766  003BF0  D005               	goto	l1171
  6767  003BF2                     l11315:
  6768                           
  6769                           ; BSR set to: 0
  6770                           ;vscp_firmware.c: 705: else {
  6771                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  6772  003BF2  C0CF  F051         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  6773  003BF6  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6774  003BF8  EC11  F003         	call	_vscp_writeAppReg
  6775  003BFC                     l1171:
  6776  003BFC  0012               	return	
  6777  003BFE                     __end_of_vscp_writeRegister:
  6778                           	opt stack 0
  6779                           tblptru	equ	0xFF8
  6780                           tblptrh	equ	0xFF7
  6781                           tblptrl	equ	0xFF6
  6782                           tablat	equ	0xFF5
  6783                           prodh	equ	0xFF4
  6784                           prodl	equ	0xFF3
  6785                           intcon	equ	0xFF2
  6786                           postinc0	equ	0xFEE
  6787                           wreg	equ	0xFE8
  6788                           indf1	equ	0xFE7
  6789                           fsr1h	equ	0xFE2
  6790                           fsr1l	equ	0xFE1
  6791                           indf2	equ	0xFDF
  6792                           postinc2	equ	0xFDE
  6793                           postdec2	equ	0xFDD
  6794                           plusw2	equ	0xFDB
  6795                           fsr2h	equ	0xFDA
  6796                           fsr2l	equ	0xFD9
  6797                           status	equ	0xFD8
  6798                           
  6799 ;; *************** function _vscp_writeStdReg *****************
  6800 ;; Defined at:
  6801 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  6802 ;; Parameters:    Size  Location     Type
  6803 ;;  reg             1    wreg     unsigned char 
  6804 ;;  value           1   71[COMRAM] unsigned char 
  6805 ;; Auto vars:     Size  Location     Type
  6806 ;;  reg             1   77[COMRAM] unsigned char 
  6807 ;;  rv              1   76[COMRAM] unsigned char 
  6808 ;; Return value:  Size  Location     Type
  6809 ;;                  1    wreg      unsigned char 
  6810 ;; Registers used:
  6811 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6812 ;; Tracked objects:
  6813 ;;		On entry : F/0
  6814 ;;		On exit  : 0/0
  6815 ;;		Unchanged: 0/0
  6816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6817 ;;      Params:         1       0       0       0       0       0       0
  6818 ;;      Locals:         2       0       0       0       0       0       0
  6819 ;;      Temps:          4       0       0       0       0       0       0
  6820 ;;      Totals:         7       0       0       0       0       0       0
  6821 ;;Total ram usage:        7 bytes
  6822 ;; Hardware stack levels used:    1
  6823 ;; Hardware stack levels required when called:    6
  6824 ;; This function calls:
  6825 ;;		_vscp_setGUID
  6826 ;;		_vscp_setManufacturerId
  6827 ;;		_vscp_getGUID
  6828 ;;		_vscp_getUserID
  6829 ;;		_vscp_setUserID
  6830 ;;		_vscp_getManufacturerId
  6831 ;;		_vscp_restoreDefaults
  6832 ;; This function is called by:
  6833 ;;		_vscp_writeRegister
  6834 ;;		_vscp_handleProtocolEvent
  6835 ;; This function uses a non-reentrant model
  6836 ;;
  6837                           
  6838                           	psect	text18
  6839  003006                     __ptext18:
  6840                           	opt stack 0
  6841  003006                     _vscp_writeStdReg:
  6842                           	opt stack 23
  6843                           
  6844                           ;incstack = 0
  6845                           ;incstack = 0
  6846                           ;vscp_writeStdReg@reg stored from wreg
  6847  003006  CFE8 F04E          	movff	wreg,vscp_writeStdReg@reg
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  6851  00300A  1C48               	comf	vscp_writeStdReg@value,w,c
  6852  00300C  6E4D               	movwf	vscp_writeStdReg@rv,c
  6853                           
  6854                           ; BSR set to: 0
  6855                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  6856                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  6857  00300E  0E83               	movlw	131
  6858  003010  644E               	cpfsgt	vscp_writeStdReg@reg,c
  6859  003012  D00E               	goto	l9873
  6860                           
  6861                           ; BSR set to: 0
  6862  003014  0E89               	movlw	137
  6863  003016  604E               	cpfslt	vscp_writeStdReg@reg,c
  6864  003018  D00B               	goto	l9873
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  6868  00301A  C048  F00C         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  6869  00301E  504E               	movf	vscp_writeStdReg@reg,w,c
  6870  003020  0F7C               	addlw	124
  6871  003022  EC2D  F01E         	call	_vscp_setUserID
  6872                           
  6873                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  6874  003026  504E               	movf	vscp_writeStdReg@reg,w,c
  6875  003028  0F7C               	addlw	124
  6876  00302A  EC99  F01E         	call	_vscp_getUserID
  6877  00302E  D069               	goto	L25
  6878  003030                     l9873:
  6879                           
  6880                           ; BSR set to: 0
  6881                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  6882  003030  504E               	movf	vscp_writeStdReg@reg,w,c
  6883  003032  0A92               	xorlw	146
  6884  003034  E10D               	bnz	l9879
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  6888  003036  5048               	movf	vscp_writeStdReg@value,w,c
  6889  003038  6E4A               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6890  00303A  6A49               	clrf	??_vscp_writeStdReg& (0+255),c
  6891  00303C  5052               	movf	_vscp_page_select,w,c
  6892  00303E  6E4B               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  6893  003040  6A4C               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  6894  003042  1049               	iorwf	??_vscp_writeStdReg,w,c
  6895  003044  6E52               	movwf	_vscp_page_select,c
  6896  003046  504A               	movf	??_vscp_writeStdReg+1,w,c
  6897  003048  104C               	iorwf	??_vscp_writeStdReg+3,w,c
  6898  00304A  6E53               	movwf	_vscp_page_select+1,c
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  6902  00304C  5053               	movf	_vscp_page_select+1,w,c
  6903  00304E  D059               	goto	L25
  6904  003050                     l9879:
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  6908  003050  504E               	movf	vscp_writeStdReg@reg,w,c
  6909  003052  0A93               	xorlw	147
  6910  003054  E10B               	bnz	l9885
  6911                           
  6912                           ; BSR set to: 0
  6913                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  6914  003056  6A49               	clrf	??_vscp_writeStdReg& (0+255),c
  6915  003058  5053               	movf	_vscp_page_select+1,w,c
  6916  00305A  6E4A               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6917  00305C  5048               	movf	vscp_writeStdReg@value,w,c
  6918  00305E  1049               	iorwf	??_vscp_writeStdReg,w,c
  6919  003060  6E52               	movwf	_vscp_page_select,c
  6920  003062  504A               	movf	??_vscp_writeStdReg+1,w,c
  6921  003064  6E53               	movwf	_vscp_page_select+1,c
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  6925  003066  C052  F04D         	movff	_vscp_page_select,vscp_writeStdReg@rv
  6926                           
  6927                           ;vscp_firmware.c: 737: }
  6928  00306A  D04E               	goto	l9927
  6929  00306C                     l9885:
  6930                           
  6931                           ; BSR set to: 0
  6932                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  6933  00306C  0E88               	movlw	136
  6934  00306E  644E               	cpfsgt	vscp_writeStdReg@reg,c
  6935  003070  D019               	goto	l9897
  6936                           
  6937                           ; BSR set to: 0
  6938  003072  0E91               	movlw	145
  6939  003074  604E               	cpfslt	vscp_writeStdReg@reg,c
  6940  003076  D016               	goto	l9897
  6941                           
  6942                           ; BSR set to: 0
  6943                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6944                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  6945  003078  C053  F049         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6946  00307C  C049  F04A         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6947  003080  6A4B               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6948  003082  284A               	incf	??_vscp_writeStdReg+1,w,c
  6949  003084  E102               	bnz	l9893
  6950                           
  6951                           ; BSR set to: 0
  6952  003086  2852               	incf	_vscp_page_select,w,c
  6953  003088  E002               	bz	l9895
  6954  00308A                     l9893:
  6955                           
  6956                           ; BSR set to: 0
  6957                           ;vscp_firmware.c: 747: rv = ~value;
  6958  00308A  1C48               	comf	vscp_writeStdReg@value,w,c
  6959  00308C  D03A               	goto	L25
  6960  00308E                     l9895:
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;vscp_firmware.c: 749: else {
  6964                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  6965  00308E  C048  F00C         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  6966  003092  504E               	movf	vscp_writeStdReg@reg,w,c
  6967  003094  0F77               	addlw	119
  6968  003096  EC80  F01D         	call	_vscp_setManufacturerId
  6969                           
  6970                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  6971  00309A  504E               	movf	vscp_writeStdReg@reg,w,c
  6972  00309C  0F77               	addlw	119
  6973  00309E  EC8F  F01E         	call	_vscp_getManufacturerId
  6974  0030A2  D02F               	goto	L25
  6975  0030A4                     l9897:
  6976                           
  6977                           ; BSR set to: 0
  6978                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  6979  0030A4  0ECF               	movlw	207
  6980  0030A6  644E               	cpfsgt	vscp_writeStdReg@reg,c
  6981  0030A8  D017               	goto	l9909
  6982                           
  6983                           ; BSR set to: 0
  6984  0030AA  0EE0               	movlw	224
  6985  0030AC  604E               	cpfslt	vscp_writeStdReg@reg,c
  6986  0030AE  D014               	goto	l9909
  6987                           
  6988                           ; BSR set to: 0
  6989                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6990                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  6991  0030B0  C053  F049         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6992  0030B4  C049  F04A         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6993  0030B8  6A4B               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6994  0030BA  284A               	incf	??_vscp_writeStdReg+1,w,c
  6995  0030BC  E1E6               	bnz	l9893
  6996                           
  6997                           ; BSR set to: 0
  6998  0030BE  2852               	incf	_vscp_page_select,w,c
  6999  0030C0  E1E4               	bnz	l9893
  7000                           
  7001                           ; BSR set to: 0
  7002                           ;vscp_firmware.c: 762: else {
  7003                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  7004  0030C2  C048  F00C         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  7005  0030C6  504E               	movf	vscp_writeStdReg@reg,w,c
  7006  0030C8  0F30               	addlw	48
  7007  0030CA  EC93  F01D         	call	_vscp_setGUID
  7008                           
  7009                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  7010  0030CE  504E               	movf	vscp_writeStdReg@reg,w,c
  7011  0030D0  0F30               	addlw	48
  7012  0030D2  ECA3  F01E         	call	_vscp_getGUID
  7013  0030D6  D015               	goto	L25
  7014  0030D8                     l9909:
  7015                           
  7016                           ; BSR set to: 0
  7017                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  7018  0030D8  504E               	movf	vscp_writeStdReg@reg,w,c
  7019  0030DA  0AA2               	xorlw	162
  7020  0030DC  E1D6               	bnz	l9893
  7021                           
  7022                           ; BSR set to: 0
  7023                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  7024  0030DE  5048               	movf	vscp_writeStdReg@value,w,c
  7025  0030E0  0A55               	xorlw	85
  7026  0030E2  E104               	bnz	l9917
  7027                           
  7028                           ; BSR set to: 0
  7029                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  7030  0030E4  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
  7031  0030E6  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  7032                           
  7033                           ; BSR set to: 0
  7034                           ;vscp_firmware.c: 771: rv = 0x55;
  7035  0030E8  0E55               	movlw	85
  7036  0030EA  D00B               	goto	L25
  7037  0030EC                     l9917:
  7038                           
  7039                           ; BSR set to: 0
  7040                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  7041  0030EC  5048               	movf	vscp_writeStdReg@value,w,c
  7042  0030EE  0AAA               	xorlw	170
  7043  0030F0  E10B               	bnz	l9927
  7044                           
  7045                           ; BSR set to: 0
  7046                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  7047  0030F2  0EE8               	movlw	232
  7048  0030F4  5D84               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  7049  0030F6  0E03               	movlw	3
  7050  0030F8  5985               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  7051  0030FA  E205               	bc	l1197
  7052                           
  7053                           ; BSR set to: 0
  7054                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  7055  0030FC  ECE6  F01E         	call	_vscp_restoreDefaults	;wreg free
  7056                           
  7057                           ;vscp_firmware.c: 776: rv = 0xaa;
  7058  003100  0EAA               	movlw	170
  7059  003102                     L25:
  7060  003102  6E4D               	movwf	vscp_writeStdReg@rv,c
  7061                           
  7062                           ;vscp_firmware.c: 777: }
  7063  003104  D001               	goto	l9927
  7064  003106                     l1197:
  7065                           
  7066                           ; BSR set to: 0
  7067                           ;vscp_firmware.c: 778: else {
  7068                           ;vscp_firmware.c: 779: rv = 0;
  7069  003106  6A4D               	clrf	vscp_writeStdReg@rv,c
  7070  003108                     l9927:
  7071                           
  7072                           ;vscp_firmware.c: 787: }
  7073                           ;vscp_firmware.c: 789: return rv;
  7074  003108  504D               	movf	vscp_writeStdReg@rv,w,c
  7075  00310A  0012               	return	
  7076  00310C                     __end_of_vscp_writeStdReg:
  7077                           	opt stack 0
  7078                           tblptru	equ	0xFF8
  7079                           tblptrh	equ	0xFF7
  7080                           tblptrl	equ	0xFF6
  7081                           tablat	equ	0xFF5
  7082                           prodh	equ	0xFF4
  7083                           prodl	equ	0xFF3
  7084                           intcon	equ	0xFF2
  7085                           postinc0	equ	0xFEE
  7086                           wreg	equ	0xFE8
  7087                           indf1	equ	0xFE7
  7088                           fsr1h	equ	0xFE2
  7089                           fsr1l	equ	0xFE1
  7090                           indf2	equ	0xFDF
  7091                           postinc2	equ	0xFDE
  7092                           postdec2	equ	0xFDD
  7093                           plusw2	equ	0xFDB
  7094                           fsr2h	equ	0xFDA
  7095                           fsr2l	equ	0xFD9
  7096                           status	equ	0xFD8
  7097                           
  7098 ;; *************** function _vscp_restoreDefaults *****************
  7099 ;; Defined at:
  7100 ;;		line 2560 in file "../main.c"
  7101 ;; Parameters:    Size  Location     Type
  7102 ;;		None
  7103 ;; Auto vars:     Size  Location     Type
  7104 ;;		None
  7105 ;; Return value:  Size  Location     Type
  7106 ;;		None               void
  7107 ;; Registers used:
  7108 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7109 ;; Tracked objects:
  7110 ;;		On entry : F/0
  7111 ;;		On exit  : 0/0
  7112 ;;		Unchanged: 0/0
  7113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7114 ;;      Params:         0       0       0       0       0       0       0
  7115 ;;      Locals:         0       0       0       0       0       0       0
  7116 ;;      Temps:          0       0       0       0       0       0       0
  7117 ;;      Totals:         0       0       0       0       0       0       0
  7118 ;;Total ram usage:        0 bytes
  7119 ;; Hardware stack levels used:    1
  7120 ;; Hardware stack levels required when called:    5
  7121 ;; This function calls:
  7122 ;;		_init_app_eeprom
  7123 ;;		_init_app_ram
  7124 ;; This function is called by:
  7125 ;;		_vscp_writeStdReg
  7126 ;; This function uses a non-reentrant model
  7127 ;;
  7128                           
  7129                           	psect	text19
  7130  003DCC                     __ptext19:
  7131                           	opt stack 0
  7132  003DCC                     _vscp_restoreDefaults:
  7133                           	opt stack 23
  7134                           
  7135                           ; BSR set to: 0
  7136                           ;main.c: 2561: init_app_eeprom();
  7137                           
  7138                           ;incstack = 0
  7139                           ;incstack = 0
  7140  003DCC  EC7F  F00A         	call	_init_app_eeprom	;wreg free
  7141                           
  7142                           ;main.c: 2562: init_app_ram();
  7143  003DD0  EF86  F018         	goto	_init_app_ram	;wreg free
  7144  003DD4                     __end_of_vscp_restoreDefaults:
  7145                           	opt stack 0
  7146                           tblptru	equ	0xFF8
  7147                           tblptrh	equ	0xFF7
  7148                           tblptrl	equ	0xFF6
  7149                           tablat	equ	0xFF5
  7150                           prodh	equ	0xFF4
  7151                           prodl	equ	0xFF3
  7152                           intcon	equ	0xFF2
  7153                           postinc0	equ	0xFEE
  7154                           wreg	equ	0xFE8
  7155                           indf1	equ	0xFE7
  7156                           fsr1h	equ	0xFE2
  7157                           fsr1l	equ	0xFE1
  7158                           indf2	equ	0xFDF
  7159                           postinc2	equ	0xFDE
  7160                           postdec2	equ	0xFDD
  7161                           plusw2	equ	0xFDB
  7162                           fsr2h	equ	0xFDA
  7163                           fsr2l	equ	0xFD9
  7164                           status	equ	0xFD8
  7165                           
  7166 ;; *************** function _init_app_eeprom *****************
  7167 ;; Defined at:
  7168 ;;		line 476 in file "../main.c"
  7169 ;; Parameters:    Size  Location     Type
  7170 ;;		None
  7171 ;; Auto vars:     Size  Location     Type
  7172 ;;  j               1   70[COMRAM] unsigned char 
  7173 ;;  i               1   69[COMRAM] unsigned char 
  7174 ;; Return value:  Size  Location     Type
  7175 ;;		None               void
  7176 ;; Registers used:
  7177 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7178 ;; Tracked objects:
  7179 ;;		On entry : 0/0
  7180 ;;		On exit  : 0/0
  7181 ;;		Unchanged: 0/0
  7182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7183 ;;      Params:         0       0       0       0       0       0       0
  7184 ;;      Locals:         2       0       0       0       0       0       0
  7185 ;;      Temps:          2       0       0       0       0       0       0
  7186 ;;      Totals:         4       0       0       0       0       0       0
  7187 ;;Total ram usage:        4 bytes
  7188 ;; Hardware stack levels used:    1
  7189 ;; Hardware stack levels required when called:    4
  7190 ;; This function calls:
  7191 ;;		_Busy_eep
  7192 ;;		_Write_b_eep
  7193 ;;		_calculateSetFilterMask
  7194 ;; This function is called by:
  7195 ;;		_main
  7196 ;;		_vscp_restoreDefaults
  7197 ;; This function uses a non-reentrant model
  7198 ;;
  7199                           
  7200                           	psect	text20
  7201  0014FE                     __ptext20:
  7202                           	opt stack 0
  7203  0014FE                     _init_app_eeprom:
  7204                           	opt stack 23
  7205                           
  7206                           ;main.c: 477: unsigned char i, j;
  7207                           ;main.c: 479: (Busy_eep(), Write_b_eep(0x43 + 0,0));
  7208                           
  7209                           ;incstack = 0
  7210                           ;incstack = 0
  7211  0014FE  ECEA  F01E         	call	_Busy_eep	;wreg free
  7212  001502  6A09               	clrf	?_Write_b_eep+1,c
  7213  001504  0E43               	movlw	67
  7214  001506  6E08               	movwf	?_Write_b_eep,c
  7215  001508  0E00               	movlw	0
  7216  00150A  6A0A               	clrf	?_Write_b_eep+2,c
  7217  00150C  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7218                           
  7219                           ;main.c: 480: (Busy_eep(), Write_b_eep(0x43 + 1,0));
  7220  001510  ECEA  F01E         	call	_Busy_eep	;wreg free
  7221  001514  6A09               	clrf	?_Write_b_eep+1,c
  7222  001516  0E44               	movlw	68
  7223  001518  6E08               	movwf	?_Write_b_eep,c
  7224  00151A  0E00               	movlw	0
  7225  00151C  6A0A               	clrf	?_Write_b_eep+2,c
  7226  00151E  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7227                           
  7228                           ;main.c: 482: (Busy_eep(), Write_b_eep(0x43 + 10,0x08 | 0x10 | 0x80));
  7229  001522  ECEA  F01E         	call	_Busy_eep	;wreg free
  7230  001526  6A09               	clrf	?_Write_b_eep+1,c
  7231  001528  0E4D               	movlw	77
  7232  00152A  6E08               	movwf	?_Write_b_eep,c
  7233  00152C  0E98               	movlw	152
  7234  00152E  6E0A               	movwf	?_Write_b_eep+2,c
  7235  001530  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7236                           
  7237                           ;main.c: 487: (Busy_eep(), Write_b_eep(0x43 + 11,0x08 | 0x10 | 0x80));
  7238  001534  ECEA  F01E         	call	_Busy_eep	;wreg free
  7239  001538  6A09               	clrf	?_Write_b_eep+1,c
  7240  00153A  0E4E               	movlw	78
  7241  00153C  6E08               	movwf	?_Write_b_eep,c
  7242  00153E  0E98               	movlw	152
  7243  001540  6E0A               	movwf	?_Write_b_eep+2,c
  7244  001542  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7245                           
  7246                           ;main.c: 492: (Busy_eep(), Write_b_eep(0x43 + 12,0x08 | 0x10 | 0x80));
  7247  001546  ECEA  F01E         	call	_Busy_eep	;wreg free
  7248  00154A  6A09               	clrf	?_Write_b_eep+1,c
  7249  00154C  0E4F               	movlw	79
  7250  00154E  6E08               	movwf	?_Write_b_eep,c
  7251  001550  0E98               	movlw	152
  7252  001552  6E0A               	movwf	?_Write_b_eep+2,c
  7253  001554  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7254                           
  7255                           ;main.c: 497: (Busy_eep(), Write_b_eep(0x43 + 13,0x08 | 0x10 | 0x80));
  7256  001558  ECEA  F01E         	call	_Busy_eep	;wreg free
  7257  00155C  6A09               	clrf	?_Write_b_eep+1,c
  7258  00155E  0E50               	movlw	80
  7259  001560  6E08               	movwf	?_Write_b_eep,c
  7260  001562  0E98               	movlw	152
  7261  001564  6E0A               	movwf	?_Write_b_eep+2,c
  7262  001566  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7263                           
  7264                           ;main.c: 502: (Busy_eep(), Write_b_eep(0x43 + 14,0x08 | 0x10 | 0x80));
  7265  00156A  ECEA  F01E         	call	_Busy_eep	;wreg free
  7266  00156E  6A09               	clrf	?_Write_b_eep+1,c
  7267  001570  0E51               	movlw	81
  7268  001572  6E08               	movwf	?_Write_b_eep,c
  7269  001574  0E98               	movlw	152
  7270  001576  6E0A               	movwf	?_Write_b_eep+2,c
  7271  001578  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7272                           
  7273                           ;main.c: 507: (Busy_eep(), Write_b_eep(0x43 + 15,0x08 | 0x10 | 0x80));
  7274  00157C  ECEA  F01E         	call	_Busy_eep	;wreg free
  7275  001580  6A09               	clrf	?_Write_b_eep+1,c
  7276  001582  0E52               	movlw	82
  7277  001584  6E08               	movwf	?_Write_b_eep,c
  7278  001586  0E98               	movlw	152
  7279  001588  6E0A               	movwf	?_Write_b_eep+2,c
  7280  00158A  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7281                           
  7282                           ;main.c: 512: (Busy_eep(), Write_b_eep(0x43 + 16,0x08 | 0x10 | 0x80));
  7283  00158E  ECEA  F01E         	call	_Busy_eep	;wreg free
  7284  001592  6A09               	clrf	?_Write_b_eep+1,c
  7285  001594  0E53               	movlw	83
  7286  001596  6E08               	movwf	?_Write_b_eep,c
  7287  001598  0E98               	movlw	152
  7288  00159A  6E0A               	movwf	?_Write_b_eep+2,c
  7289  00159C  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7290                           
  7291                           ;main.c: 517: (Busy_eep(), Write_b_eep(0x43 + 17,0x08 | 0x10 | 0x80));
  7292  0015A0  ECEA  F01E         	call	_Busy_eep	;wreg free
  7293  0015A4  6A09               	clrf	?_Write_b_eep+1,c
  7294  0015A6  0E54               	movlw	84
  7295  0015A8  6E08               	movwf	?_Write_b_eep,c
  7296  0015AA  0E98               	movlw	152
  7297  0015AC  6E0A               	movwf	?_Write_b_eep+2,c
  7298  0015AE  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7299                           
  7300                           ;main.c: 522: (Busy_eep(), Write_b_eep(0x43 + 18,0));
  7301  0015B2  ECEA  F01E         	call	_Busy_eep	;wreg free
  7302  0015B6  6A09               	clrf	?_Write_b_eep+1,c
  7303  0015B8  0E55               	movlw	85
  7304  0015BA  6E08               	movwf	?_Write_b_eep,c
  7305  0015BC  0E00               	movlw	0
  7306  0015BE  6A0A               	clrf	?_Write_b_eep+2,c
  7307  0015C0  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7308                           
  7309                           ;main.c: 523: (Busy_eep(), Write_b_eep(0x43 + 19,0));
  7310  0015C4  ECEA  F01E         	call	_Busy_eep	;wreg free
  7311  0015C8  6A09               	clrf	?_Write_b_eep+1,c
  7312  0015CA  0E56               	movlw	86
  7313  0015CC  6E08               	movwf	?_Write_b_eep,c
  7314  0015CE  0E00               	movlw	0
  7315  0015D0  6A0A               	clrf	?_Write_b_eep+2,c
  7316  0015D2  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7317                           
  7318                           ;main.c: 524: (Busy_eep(), Write_b_eep(0x43 + 20,0));
  7319  0015D6  ECEA  F01E         	call	_Busy_eep	;wreg free
  7320  0015DA  6A09               	clrf	?_Write_b_eep+1,c
  7321  0015DC  0E57               	movlw	87
  7322  0015DE  6E08               	movwf	?_Write_b_eep,c
  7323  0015E0  0E00               	movlw	0
  7324  0015E2  6A0A               	clrf	?_Write_b_eep+2,c
  7325  0015E4  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7326                           
  7327                           ;main.c: 525: (Busy_eep(), Write_b_eep(0x43 + 21,0));
  7328  0015E8  ECEA  F01E         	call	_Busy_eep	;wreg free
  7329  0015EC  6A09               	clrf	?_Write_b_eep+1,c
  7330  0015EE  0E58               	movlw	88
  7331  0015F0  6E08               	movwf	?_Write_b_eep,c
  7332  0015F2  0E00               	movlw	0
  7333  0015F4  6A0A               	clrf	?_Write_b_eep+2,c
  7334  0015F6  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7335                           
  7336                           ;main.c: 526: (Busy_eep(), Write_b_eep(0x43 + 22,0));
  7337  0015FA  ECEA  F01E         	call	_Busy_eep	;wreg free
  7338  0015FE  6A09               	clrf	?_Write_b_eep+1,c
  7339  001600  0E59               	movlw	89
  7340  001602  6E08               	movwf	?_Write_b_eep,c
  7341  001604  0E00               	movlw	0
  7342  001606  6A0A               	clrf	?_Write_b_eep+2,c
  7343  001608  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7344                           
  7345                           ;main.c: 527: (Busy_eep(), Write_b_eep(0x43 + 23,0));
  7346  00160C  ECEA  F01E         	call	_Busy_eep	;wreg free
  7347  001610  6A09               	clrf	?_Write_b_eep+1,c
  7348  001612  0E5A               	movlw	90
  7349  001614  6E08               	movwf	?_Write_b_eep,c
  7350  001616  0E00               	movlw	0
  7351  001618  6A0A               	clrf	?_Write_b_eep+2,c
  7352  00161A  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7353                           
  7354                           ;main.c: 528: (Busy_eep(), Write_b_eep(0x43 + 24,0));
  7355  00161E  ECEA  F01E         	call	_Busy_eep	;wreg free
  7356  001622  6A09               	clrf	?_Write_b_eep+1,c
  7357  001624  0E5B               	movlw	91
  7358  001626  6E08               	movwf	?_Write_b_eep,c
  7359  001628  0E00               	movlw	0
  7360  00162A  6A0A               	clrf	?_Write_b_eep+2,c
  7361  00162C  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7362                           
  7363                           ;main.c: 529: (Busy_eep(), Write_b_eep(0x43 + 25,0));
  7364  001630  ECEA  F01E         	call	_Busy_eep	;wreg free
  7365  001634  6A09               	clrf	?_Write_b_eep+1,c
  7366  001636  0E5C               	movlw	92
  7367  001638  6E08               	movwf	?_Write_b_eep,c
  7368  00163A  0E00               	movlw	0
  7369  00163C  6A0A               	clrf	?_Write_b_eep+2,c
  7370  00163E  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7371                           
  7372                           ;main.c: 530: (Busy_eep(), Write_b_eep(0x43 + 26,0));
  7373  001642  ECEA  F01E         	call	_Busy_eep	;wreg free
  7374  001646  6A09               	clrf	?_Write_b_eep+1,c
  7375  001648  0E5D               	movlw	93
  7376  00164A  6E08               	movwf	?_Write_b_eep,c
  7377  00164C  0E00               	movlw	0
  7378  00164E  6A0A               	clrf	?_Write_b_eep+2,c
  7379  001650  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7380                           
  7381                           ;main.c: 531: (Busy_eep(), Write_b_eep(0x43 + 27,0));
  7382  001654  ECEA  F01E         	call	_Busy_eep	;wreg free
  7383  001658  6A09               	clrf	?_Write_b_eep+1,c
  7384  00165A  0E5E               	movlw	94
  7385  00165C  6E08               	movwf	?_Write_b_eep,c
  7386  00165E  0E00               	movlw	0
  7387  001660  6A0A               	clrf	?_Write_b_eep+2,c
  7388  001662  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7389                           
  7390                           ;main.c: 532: (Busy_eep(), Write_b_eep(0x43 + 28,0));
  7391  001666  ECEA  F01E         	call	_Busy_eep	;wreg free
  7392  00166A  6A09               	clrf	?_Write_b_eep+1,c
  7393  00166C  0E5F               	movlw	95
  7394  00166E  6E08               	movwf	?_Write_b_eep,c
  7395  001670  0E00               	movlw	0
  7396  001672  6A0A               	clrf	?_Write_b_eep+2,c
  7397  001674  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7398                           
  7399                           ;main.c: 533: (Busy_eep(), Write_b_eep(0x43 + 29,0));
  7400  001678  ECEA  F01E         	call	_Busy_eep	;wreg free
  7401  00167C  6A09               	clrf	?_Write_b_eep+1,c
  7402  00167E  0E60               	movlw	96
  7403  001680  6E08               	movwf	?_Write_b_eep,c
  7404  001682  0E00               	movlw	0
  7405  001684  6A0A               	clrf	?_Write_b_eep+2,c
  7406  001686  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7407                           
  7408                           ;main.c: 534: (Busy_eep(), Write_b_eep(0x43 + 30,0));
  7409  00168A  ECEA  F01E         	call	_Busy_eep	;wreg free
  7410  00168E  6A09               	clrf	?_Write_b_eep+1,c
  7411  001690  0E61               	movlw	97
  7412  001692  6E08               	movwf	?_Write_b_eep,c
  7413  001694  0E00               	movlw	0
  7414  001696  6A0A               	clrf	?_Write_b_eep+2,c
  7415  001698  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7416                           
  7417                           ;main.c: 535: (Busy_eep(), Write_b_eep(0x43 + 31,0));
  7418  00169C  ECEA  F01E         	call	_Busy_eep	;wreg free
  7419  0016A0  6A09               	clrf	?_Write_b_eep+1,c
  7420  0016A2  0E62               	movlw	98
  7421  0016A4  6E08               	movwf	?_Write_b_eep,c
  7422  0016A6  0E00               	movlw	0
  7423  0016A8  6A0A               	clrf	?_Write_b_eep+2,c
  7424  0016AA  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7425                           
  7426                           ;main.c: 536: (Busy_eep(), Write_b_eep(0x43 + 32,0));
  7427  0016AE  ECEA  F01E         	call	_Busy_eep	;wreg free
  7428  0016B2  6A09               	clrf	?_Write_b_eep+1,c
  7429  0016B4  0E63               	movlw	99
  7430  0016B6  6E08               	movwf	?_Write_b_eep,c
  7431  0016B8  0E00               	movlw	0
  7432  0016BA  6A0A               	clrf	?_Write_b_eep+2,c
  7433  0016BC  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7434                           
  7435                           ;main.c: 537: (Busy_eep(), Write_b_eep(0x43 + 33,0));
  7436  0016C0  ECEA  F01E         	call	_Busy_eep	;wreg free
  7437  0016C4  6A09               	clrf	?_Write_b_eep+1,c
  7438  0016C6  0E64               	movlw	100
  7439  0016C8  6E08               	movwf	?_Write_b_eep,c
  7440  0016CA  0E00               	movlw	0
  7441  0016CC  6A0A               	clrf	?_Write_b_eep+2,c
  7442  0016CE  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7443                           
  7444                           ;main.c: 539: (Busy_eep(), Write_b_eep(0x43 + 34,0));
  7445  0016D2  ECEA  F01E         	call	_Busy_eep	;wreg free
  7446  0016D6  6A09               	clrf	?_Write_b_eep+1,c
  7447  0016D8  0E65               	movlw	101
  7448  0016DA  6E08               	movwf	?_Write_b_eep,c
  7449  0016DC  0E00               	movlw	0
  7450  0016DE  6A0A               	clrf	?_Write_b_eep+2,c
  7451  0016E0  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7452                           
  7453                           ;main.c: 540: (Busy_eep(), Write_b_eep(0x43 + 35,0));
  7454  0016E4  ECEA  F01E         	call	_Busy_eep	;wreg free
  7455  0016E8  6A09               	clrf	?_Write_b_eep+1,c
  7456  0016EA  0E66               	movlw	102
  7457  0016EC  6E08               	movwf	?_Write_b_eep,c
  7458  0016EE  0E00               	movlw	0
  7459  0016F0  6A0A               	clrf	?_Write_b_eep+2,c
  7460  0016F2  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7461                           
  7462                           ;main.c: 541: (Busy_eep(), Write_b_eep(0x43 + 36,0));
  7463  0016F6  ECEA  F01E         	call	_Busy_eep	;wreg free
  7464  0016FA  6A09               	clrf	?_Write_b_eep+1,c
  7465  0016FC  0E67               	movlw	103
  7466  0016FE  6E08               	movwf	?_Write_b_eep,c
  7467  001700  0E00               	movlw	0
  7468  001702  6A0A               	clrf	?_Write_b_eep+2,c
  7469  001704  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7470                           
  7471                           ;main.c: 542: (Busy_eep(), Write_b_eep(0x43 + 37,0));
  7472  001708  ECEA  F01E         	call	_Busy_eep	;wreg free
  7473  00170C  6A09               	clrf	?_Write_b_eep+1,c
  7474  00170E  0E68               	movlw	104
  7475  001710  6E08               	movwf	?_Write_b_eep,c
  7476  001712  0E00               	movlw	0
  7477  001714  6A0A               	clrf	?_Write_b_eep+2,c
  7478  001716  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7479                           
  7480                           ;main.c: 543: (Busy_eep(), Write_b_eep(0x43 + 38,0));
  7481  00171A  ECEA  F01E         	call	_Busy_eep	;wreg free
  7482  00171E  6A09               	clrf	?_Write_b_eep+1,c
  7483  001720  0E69               	movlw	105
  7484  001722  6E08               	movwf	?_Write_b_eep,c
  7485  001724  0E00               	movlw	0
  7486  001726  6A0A               	clrf	?_Write_b_eep+2,c
  7487  001728  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7488                           
  7489                           ;main.c: 544: (Busy_eep(), Write_b_eep(0x43 + 39,0));
  7490  00172C  ECEA  F01E         	call	_Busy_eep	;wreg free
  7491  001730  6A09               	clrf	?_Write_b_eep+1,c
  7492  001732  0E6A               	movlw	106
  7493  001734  6E08               	movwf	?_Write_b_eep,c
  7494  001736  0E00               	movlw	0
  7495  001738  6A0A               	clrf	?_Write_b_eep+2,c
  7496  00173A  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7497                           
  7498                           ;main.c: 545: (Busy_eep(), Write_b_eep(0x43 + 40,0));
  7499  00173E  ECEA  F01E         	call	_Busy_eep	;wreg free
  7500  001742  6A09               	clrf	?_Write_b_eep+1,c
  7501  001744  0E6B               	movlw	107
  7502  001746  6E08               	movwf	?_Write_b_eep,c
  7503  001748  0E00               	movlw	0
  7504  00174A  6A0A               	clrf	?_Write_b_eep+2,c
  7505  00174C  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7506                           
  7507                           ;main.c: 546: (Busy_eep(), Write_b_eep(0x43 + 41,0));
  7508  001750  ECEA  F01E         	call	_Busy_eep	;wreg free
  7509  001754  6A09               	clrf	?_Write_b_eep+1,c
  7510  001756  0E6C               	movlw	108
  7511  001758  6E08               	movwf	?_Write_b_eep,c
  7512  00175A  0E00               	movlw	0
  7513  00175C  6A0A               	clrf	?_Write_b_eep+2,c
  7514  00175E  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7515                           
  7516                           ;main.c: 547: (Busy_eep(), Write_b_eep(0x43 + 42,0));
  7517  001762  ECEA  F01E         	call	_Busy_eep	;wreg free
  7518  001766  6A09               	clrf	?_Write_b_eep+1,c
  7519  001768  0E6D               	movlw	109
  7520  00176A  6E08               	movwf	?_Write_b_eep,c
  7521  00176C  0E00               	movlw	0
  7522  00176E  6A0A               	clrf	?_Write_b_eep+2,c
  7523  001770  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7524                           
  7525                           ;main.c: 548: (Busy_eep(), Write_b_eep(0x43 + 43,0));
  7526  001774  ECEA  F01E         	call	_Busy_eep	;wreg free
  7527  001778  6A09               	clrf	?_Write_b_eep+1,c
  7528  00177A  0E6E               	movlw	110
  7529  00177C  6E08               	movwf	?_Write_b_eep,c
  7530  00177E  0E00               	movlw	0
  7531  001780  6A0A               	clrf	?_Write_b_eep+2,c
  7532  001782  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7533                           
  7534                           ;main.c: 549: (Busy_eep(), Write_b_eep(0x43 + 44,0));
  7535  001786  ECEA  F01E         	call	_Busy_eep	;wreg free
  7536  00178A  6A09               	clrf	?_Write_b_eep+1,c
  7537  00178C  0E6F               	movlw	111
  7538  00178E  6E08               	movwf	?_Write_b_eep,c
  7539  001790  0E00               	movlw	0
  7540  001792  6A0A               	clrf	?_Write_b_eep+2,c
  7541  001794  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7542                           
  7543                           ;main.c: 550: (Busy_eep(), Write_b_eep(0x43 + 45,0));
  7544  001798  ECEA  F01E         	call	_Busy_eep	;wreg free
  7545  00179C  6A09               	clrf	?_Write_b_eep+1,c
  7546  00179E  0E70               	movlw	112
  7547  0017A0  6E08               	movwf	?_Write_b_eep,c
  7548  0017A2  0E00               	movlw	0
  7549  0017A4  6A0A               	clrf	?_Write_b_eep+2,c
  7550  0017A6  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7551                           
  7552                           ;main.c: 551: (Busy_eep(), Write_b_eep(0x43 + 46,0));
  7553  0017AA  ECEA  F01E         	call	_Busy_eep	;wreg free
  7554  0017AE  6A09               	clrf	?_Write_b_eep+1,c
  7555  0017B0  0E71               	movlw	113
  7556  0017B2  6E08               	movwf	?_Write_b_eep,c
  7557  0017B4  0E00               	movlw	0
  7558  0017B6  6A0A               	clrf	?_Write_b_eep+2,c
  7559  0017B8  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7560                           
  7561                           ;main.c: 552: (Busy_eep(), Write_b_eep(0x43 + 47,0));
  7562  0017BC  ECEA  F01E         	call	_Busy_eep	;wreg free
  7563  0017C0  6A09               	clrf	?_Write_b_eep+1,c
  7564  0017C2  0E72               	movlw	114
  7565  0017C4  6E08               	movwf	?_Write_b_eep,c
  7566  0017C6  0E00               	movlw	0
  7567  0017C8  6A0A               	clrf	?_Write_b_eep+2,c
  7568  0017CA  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7569                           
  7570                           ;main.c: 553: (Busy_eep(), Write_b_eep(0x43 + 48,0));
  7571  0017CE  ECEA  F01E         	call	_Busy_eep	;wreg free
  7572  0017D2  6A09               	clrf	?_Write_b_eep+1,c
  7573  0017D4  0E73               	movlw	115
  7574  0017D6  6E08               	movwf	?_Write_b_eep,c
  7575  0017D8  0E00               	movlw	0
  7576  0017DA  6A0A               	clrf	?_Write_b_eep+2,c
  7577  0017DC  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7578                           
  7579                           ;main.c: 554: (Busy_eep(), Write_b_eep(0x43 + 49,0));
  7580  0017E0  ECEA  F01E         	call	_Busy_eep	;wreg free
  7581  0017E4  6A09               	clrf	?_Write_b_eep+1,c
  7582  0017E6  0E74               	movlw	116
  7583  0017E8  6E08               	movwf	?_Write_b_eep,c
  7584  0017EA  0E00               	movlw	0
  7585  0017EC  6A0A               	clrf	?_Write_b_eep+2,c
  7586  0017EE  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7587                           
  7588                           ;main.c: 556: (Busy_eep(), Write_b_eep(0x43 + 50,0));
  7589  0017F2  ECEA  F01E         	call	_Busy_eep	;wreg free
  7590  0017F6  6A09               	clrf	?_Write_b_eep+1,c
  7591  0017F8  0E75               	movlw	117
  7592  0017FA  6E08               	movwf	?_Write_b_eep,c
  7593  0017FC  0E00               	movlw	0
  7594  0017FE  6A0A               	clrf	?_Write_b_eep+2,c
  7595  001800  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7596                           
  7597                           ;main.c: 557: (Busy_eep(), Write_b_eep(0x43 + 51,0));
  7598  001804  ECEA  F01E         	call	_Busy_eep	;wreg free
  7599  001808  6A09               	clrf	?_Write_b_eep+1,c
  7600  00180A  0E76               	movlw	118
  7601  00180C  6E08               	movwf	?_Write_b_eep,c
  7602  00180E  0E00               	movlw	0
  7603  001810  6A0A               	clrf	?_Write_b_eep+2,c
  7604  001812  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7605                           
  7606                           ;main.c: 558: (Busy_eep(), Write_b_eep(0x43 + 52,0));
  7607  001816  ECEA  F01E         	call	_Busy_eep	;wreg free
  7608  00181A  6A09               	clrf	?_Write_b_eep+1,c
  7609  00181C  0E77               	movlw	119
  7610  00181E  6E08               	movwf	?_Write_b_eep,c
  7611  001820  0E00               	movlw	0
  7612  001822  6A0A               	clrf	?_Write_b_eep+2,c
  7613  001824  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7614                           
  7615                           ;main.c: 559: (Busy_eep(), Write_b_eep(0x43 + 53,0));
  7616  001828  ECEA  F01E         	call	_Busy_eep	;wreg free
  7617  00182C  6A09               	clrf	?_Write_b_eep+1,c
  7618  00182E  0E78               	movlw	120
  7619  001830  6E08               	movwf	?_Write_b_eep,c
  7620  001832  0E00               	movlw	0
  7621  001834  6A0A               	clrf	?_Write_b_eep+2,c
  7622  001836  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7623                           
  7624                           ;main.c: 560: (Busy_eep(), Write_b_eep(0x43 + 54,0));
  7625  00183A  ECEA  F01E         	call	_Busy_eep	;wreg free
  7626  00183E  6A09               	clrf	?_Write_b_eep+1,c
  7627  001840  0E79               	movlw	121
  7628  001842  6E08               	movwf	?_Write_b_eep,c
  7629  001844  0E00               	movlw	0
  7630  001846  6A0A               	clrf	?_Write_b_eep+2,c
  7631  001848  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7632                           
  7633                           ;main.c: 561: (Busy_eep(), Write_b_eep(0x43 + 55,0));
  7634  00184C  ECEA  F01E         	call	_Busy_eep	;wreg free
  7635  001850  6A09               	clrf	?_Write_b_eep+1,c
  7636  001852  0E7A               	movlw	122
  7637  001854  6E08               	movwf	?_Write_b_eep,c
  7638  001856  0E00               	movlw	0
  7639  001858  6A0A               	clrf	?_Write_b_eep+2,c
  7640  00185A  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7641                           
  7642                           ;main.c: 562: (Busy_eep(), Write_b_eep(0x43 + 56,0));
  7643  00185E  ECEA  F01E         	call	_Busy_eep	;wreg free
  7644  001862  6A09               	clrf	?_Write_b_eep+1,c
  7645  001864  0E7B               	movlw	123
  7646  001866  6E08               	movwf	?_Write_b_eep,c
  7647  001868  0E00               	movlw	0
  7648  00186A  6A0A               	clrf	?_Write_b_eep+2,c
  7649  00186C  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7650                           
  7651                           ;main.c: 563: (Busy_eep(), Write_b_eep(0x43 + 57,0));
  7652  001870  ECEA  F01E         	call	_Busy_eep	;wreg free
  7653  001874  6A09               	clrf	?_Write_b_eep+1,c
  7654  001876  0E7C               	movlw	124
  7655  001878  6E08               	movwf	?_Write_b_eep,c
  7656  00187A  0E00               	movlw	0
  7657  00187C  6A0A               	clrf	?_Write_b_eep+2,c
  7658  00187E  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7659                           
  7660                           ;main.c: 564: (Busy_eep(), Write_b_eep(0x43 + 58,0));
  7661  001882  ECEA  F01E         	call	_Busy_eep	;wreg free
  7662  001886  6A09               	clrf	?_Write_b_eep+1,c
  7663  001888  0E7D               	movlw	125
  7664  00188A  6E08               	movwf	?_Write_b_eep,c
  7665  00188C  0E00               	movlw	0
  7666  00188E  6A0A               	clrf	?_Write_b_eep+2,c
  7667  001890  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7668                           
  7669                           ;main.c: 565: (Busy_eep(), Write_b_eep(0x43 + 59,0));
  7670  001894  ECEA  F01E         	call	_Busy_eep	;wreg free
  7671  001898  6A09               	clrf	?_Write_b_eep+1,c
  7672  00189A  0E7E               	movlw	126
  7673  00189C  6E08               	movwf	?_Write_b_eep,c
  7674  00189E  0E00               	movlw	0
  7675  0018A0  6A0A               	clrf	?_Write_b_eep+2,c
  7676  0018A2  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7677                           
  7678                           ;main.c: 566: (Busy_eep(), Write_b_eep(0x43 + 60,0));
  7679  0018A6  ECEA  F01E         	call	_Busy_eep	;wreg free
  7680  0018AA  6A09               	clrf	?_Write_b_eep+1,c
  7681  0018AC  0E7F               	movlw	127
  7682  0018AE  6E08               	movwf	?_Write_b_eep,c
  7683  0018B0  0E00               	movlw	0
  7684  0018B2  6A0A               	clrf	?_Write_b_eep+2,c
  7685  0018B4  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7686                           
  7687                           ;main.c: 567: (Busy_eep(), Write_b_eep(0x43 + 61,0));
  7688  0018B8  ECEA  F01E         	call	_Busy_eep	;wreg free
  7689  0018BC  6A09               	clrf	?_Write_b_eep+1,c
  7690  0018BE  0E80               	movlw	128
  7691  0018C0  6E08               	movwf	?_Write_b_eep,c
  7692  0018C2  0E00               	movlw	0
  7693  0018C4  6A0A               	clrf	?_Write_b_eep+2,c
  7694  0018C6  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7695                           
  7696                           ;main.c: 568: (Busy_eep(), Write_b_eep(0x43 + 62,0));
  7697  0018CA  ECEA  F01E         	call	_Busy_eep	;wreg free
  7698  0018CE  6A09               	clrf	?_Write_b_eep+1,c
  7699  0018D0  0E81               	movlw	129
  7700  0018D2  6E08               	movwf	?_Write_b_eep,c
  7701  0018D4  0E00               	movlw	0
  7702  0018D6  6A0A               	clrf	?_Write_b_eep+2,c
  7703  0018D8  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7704                           
  7705                           ;main.c: 569: (Busy_eep(), Write_b_eep(0x43 + 63,0));
  7706  0018DC  ECEA  F01E         	call	_Busy_eep	;wreg free
  7707  0018E0  6A09               	clrf	?_Write_b_eep+1,c
  7708  0018E2  0E82               	movlw	130
  7709  0018E4  6E08               	movwf	?_Write_b_eep,c
  7710  0018E6  0E00               	movlw	0
  7711  0018E8  6A0A               	clrf	?_Write_b_eep+2,c
  7712  0018EA  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7713                           
  7714                           ;main.c: 570: (Busy_eep(), Write_b_eep(0x43 + 64,0));
  7715  0018EE  ECEA  F01E         	call	_Busy_eep	;wreg free
  7716  0018F2  6A09               	clrf	?_Write_b_eep+1,c
  7717  0018F4  0E83               	movlw	131
  7718  0018F6  6E08               	movwf	?_Write_b_eep,c
  7719  0018F8  0E00               	movlw	0
  7720  0018FA  6A0A               	clrf	?_Write_b_eep+2,c
  7721  0018FC  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7722                           
  7723                           ;main.c: 571: (Busy_eep(), Write_b_eep(0x43 + 65,0));
  7724  001900  ECEA  F01E         	call	_Busy_eep	;wreg free
  7725  001904  6A09               	clrf	?_Write_b_eep+1,c
  7726  001906  0E84               	movlw	132
  7727  001908  6E08               	movwf	?_Write_b_eep,c
  7728  00190A  0E00               	movlw	0
  7729  00190C  6A0A               	clrf	?_Write_b_eep+2,c
  7730  00190E  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7731                           
  7732                           ;main.c: 575: for ( i = 0; i < 7; i++ ) {
  7733  001912  6A46               	clrf	init_app_eeprom@i,c
  7734  001914                     l187:
  7735                           
  7736                           ;main.c: 576: for ( j = 0; j < 8; j++ ) {
  7737  001914  6A47               	clrf	init_app_eeprom@j,c
  7738  001916                     l7891:
  7739                           
  7740                           ;main.c: 577: (Busy_eep(), Write_b_eep(0x43 + 72 + i * 8 + j,0));
  7741  001916  ECEA  F01E         	call	_Busy_eep	;wreg free
  7742  00191A  5047               	movf	init_app_eeprom@j,w,c
  7743  00191C  C046  F044         	movff	init_app_eeprom@i,??_init_app_eeprom
  7744  001920  6A45               	clrf	(??_init_app_eeprom+1)& (0+255),c
  7745  001922  90D8               	bcf	status,0,c
  7746  001924  3644               	rlcf	??_init_app_eeprom,f,c
  7747  001926  3645               	rlcf	??_init_app_eeprom+1,f,c
  7748  001928  90D8               	bcf	status,0,c
  7749  00192A  3644               	rlcf	??_init_app_eeprom,f,c
  7750  00192C  3645               	rlcf	??_init_app_eeprom+1,f,c
  7751  00192E  90D8               	bcf	status,0,c
  7752  001930  3644               	rlcf	??_init_app_eeprom,f,c
  7753  001932  3645               	rlcf	??_init_app_eeprom+1,f,c
  7754  001934  2644               	addwf	??_init_app_eeprom,f,c
  7755  001936  0E00               	movlw	0
  7756  001938  2245               	addwfc	??_init_app_eeprom+1,f,c
  7757  00193A  0E8B               	movlw	139
  7758  00193C  2444               	addwf	??_init_app_eeprom,w,c
  7759  00193E  6E08               	movwf	?_Write_b_eep,c
  7760  001940  0E00               	movlw	0
  7761  001942  2045               	addwfc	??_init_app_eeprom+1,w,c
  7762  001944  6E09               	movwf	?_Write_b_eep+1,c
  7763  001946  0E00               	movlw	0
  7764  001948  6A0A               	clrf	?_Write_b_eep+2,c
  7765  00194A  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7766  00194E  2A47               	incf	init_app_eeprom@j,f,c
  7767  001950  0E07               	movlw	7
  7768  001952  6447               	cpfsgt	init_app_eeprom@j,c
  7769  001954  D7E0               	goto	l7891
  7770  001956  2A46               	incf	init_app_eeprom@i,f,c
  7771  001958  0E06               	movlw	6
  7772  00195A  6446               	cpfsgt	init_app_eeprom@i,c
  7773  00195C  D7DB               	goto	l187
  7774                           
  7775                           ;main.c: 578: }
  7776                           ;main.c: 579: }
  7777                           ;main.c: 582: calculateSetFilterMask();
  7778  00195E  EFB1  F00C         	goto	_calculateSetFilterMask	;wreg free
  7779  001962                     __end_of_init_app_eeprom:
  7780                           	opt stack 0
  7781                           tblptru	equ	0xFF8
  7782                           tblptrh	equ	0xFF7
  7783                           tblptrl	equ	0xFF6
  7784                           tablat	equ	0xFF5
  7785                           prodh	equ	0xFF4
  7786                           prodl	equ	0xFF3
  7787                           intcon	equ	0xFF2
  7788                           postinc0	equ	0xFEE
  7789                           wreg	equ	0xFE8
  7790                           indf1	equ	0xFE7
  7791                           fsr1h	equ	0xFE2
  7792                           fsr1l	equ	0xFE1
  7793                           indf2	equ	0xFDF
  7794                           postinc2	equ	0xFDE
  7795                           postdec2	equ	0xFDD
  7796                           plusw2	equ	0xFDB
  7797                           fsr2h	equ	0xFDA
  7798                           fsr2l	equ	0xFD9
  7799                           status	equ	0xFD8
  7800                           
  7801 ;; *************** function _vscp_setUserID *****************
  7802 ;; Defined at:
  7803 ;;		line 2375 in file "../main.c"
  7804 ;; Parameters:    Size  Location     Type
  7805 ;;  idx             1    wreg     unsigned char 
  7806 ;;  data            1   11[COMRAM] unsigned char 
  7807 ;; Auto vars:     Size  Location     Type
  7808 ;;  idx             1   12[COMRAM] unsigned char 
  7809 ;; Return value:  Size  Location     Type
  7810 ;;		None               void
  7811 ;; Registers used:
  7812 ;;		wreg, status,2, status,0, cstack
  7813 ;; Tracked objects:
  7814 ;;		On entry : F/0
  7815 ;;		On exit  : 0/0
  7816 ;;		Unchanged: 0/0
  7817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7818 ;;      Params:         1       0       0       0       0       0       0
  7819 ;;      Locals:         1       0       0       0       0       0       0
  7820 ;;      Temps:          0       0       0       0       0       0       0
  7821 ;;      Totals:         2       0       0       0       0       0       0
  7822 ;;Total ram usage:        2 bytes
  7823 ;; Hardware stack levels used:    1
  7824 ;; Hardware stack levels required when called:    3
  7825 ;; This function calls:
  7826 ;;		_Busy_eep
  7827 ;;		_Write_b_eep
  7828 ;; This function is called by:
  7829 ;;		_vscp_writeStdReg
  7830 ;; This function uses a non-reentrant model
  7831 ;;
  7832                           
  7833                           	psect	text21
  7834  003C5A                     __ptext21:
  7835                           	opt stack 0
  7836  003C5A                     _vscp_setUserID:
  7837                           	opt stack 25
  7838                           
  7839                           ;incstack = 0
  7840                           ;incstack = 0
  7841                           ;vscp_setUserID@idx stored from wreg
  7842  003C5A  CFE8 F00D          	movff	wreg,vscp_setUserID@idx
  7843                           
  7844                           ; BSR set to: 0
  7845                           ;main.c: 2376: (Busy_eep(), Write_b_eep(idx + 0x06,data));
  7846  003C5E  ECEA  F01E         	call	_Busy_eep	;wreg free
  7847  003C62  0E06               	movlw	6
  7848  003C64  240D               	addwf	vscp_setUserID@idx,w,c
  7849  003C66  6E08               	movwf	?_Write_b_eep,c
  7850  003C68  6A09               	clrf	?_Write_b_eep+1,c
  7851  003C6A  0E00               	movlw	0
  7852  003C6C  2209               	addwfc	?_Write_b_eep+1,f,c
  7853  003C6E  C00C  F00A         	movff	vscp_setUserID@data,?_Write_b_eep+2
  7854  003C72  EFCF  F01C         	goto	_Write_b_eep	;wreg free
  7855  003C76                     __end_of_vscp_setUserID:
  7856                           	opt stack 0
  7857                           tblptru	equ	0xFF8
  7858                           tblptrh	equ	0xFF7
  7859                           tblptrl	equ	0xFF6
  7860                           tablat	equ	0xFF5
  7861                           prodh	equ	0xFF4
  7862                           prodl	equ	0xFF3
  7863                           intcon	equ	0xFF2
  7864                           postinc0	equ	0xFEE
  7865                           wreg	equ	0xFE8
  7866                           indf1	equ	0xFE7
  7867                           fsr1h	equ	0xFE2
  7868                           fsr1l	equ	0xFE1
  7869                           indf2	equ	0xFDF
  7870                           postinc2	equ	0xFDE
  7871                           postdec2	equ	0xFDD
  7872                           plusw2	equ	0xFDB
  7873                           fsr2h	equ	0xFDA
  7874                           fsr2l	equ	0xFD9
  7875                           status	equ	0xFD8
  7876                           
  7877 ;; *************** function _vscp_setManufacturerId *****************
  7878 ;; Defined at:
  7879 ;;		line 818 in file "../main.c"
  7880 ;; Parameters:    Size  Location     Type
  7881 ;;  idx             1    wreg     unsigned char 
  7882 ;;  data            1   11[COMRAM] unsigned char 
  7883 ;; Auto vars:     Size  Location     Type
  7884 ;;  idx             1   12[COMRAM] unsigned char 
  7885 ;; Return value:  Size  Location     Type
  7886 ;;		None               void
  7887 ;; Registers used:
  7888 ;;		wreg, status,2, status,0, cstack
  7889 ;; Tracked objects:
  7890 ;;		On entry : F/0
  7891 ;;		On exit  : 0/0
  7892 ;;		Unchanged: 0/0
  7893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7894 ;;      Params:         1       0       0       0       0       0       0
  7895 ;;      Locals:         1       0       0       0       0       0       0
  7896 ;;      Temps:          0       0       0       0       0       0       0
  7897 ;;      Totals:         2       0       0       0       0       0       0
  7898 ;;Total ram usage:        2 bytes
  7899 ;; Hardware stack levels used:    1
  7900 ;; Hardware stack levels required when called:    3
  7901 ;; This function calls:
  7902 ;;		_Busy_eep
  7903 ;;		_Write_b_eep
  7904 ;; This function is called by:
  7905 ;;		_vscp_writeStdReg
  7906 ;; This function uses a non-reentrant model
  7907 ;;
  7908                           
  7909                           	psect	text22
  7910  003B00                     __ptext22:
  7911                           	opt stack 0
  7912  003B00                     _vscp_setManufacturerId:
  7913                           	opt stack 25
  7914                           
  7915                           ;incstack = 0
  7916                           ;incstack = 0
  7917                           ;vscp_setManufacturerId@idx stored from wreg
  7918  003B00  CFE8 F00D          	movff	wreg,vscp_setManufacturerId@idx
  7919                           
  7920                           ; BSR set to: 0
  7921                           ;main.c: 819: if ( idx>7 ) return;
  7922  003B04  0E07               	movlw	7
  7923  003B06  640D               	cpfsgt	vscp_setManufacturerId@idx,c
  7924  003B08  D001               	goto	l6023
  7925  003B0A  D00C               	goto	l253
  7926  003B0C                     l6023:
  7927                           
  7928                           ; BSR set to: 0
  7929                           ;main.c: 820: (Busy_eep(), Write_b_eep(0x0B + idx,data));
  7930  003B0C  ECEA  F01E         	call	_Busy_eep	;wreg free
  7931  003B10  0E0B               	movlw	11
  7932  003B12  240D               	addwf	vscp_setManufacturerId@idx,w,c
  7933  003B14  6E08               	movwf	?_Write_b_eep,c
  7934  003B16  6A09               	clrf	?_Write_b_eep+1,c
  7935  003B18  0E00               	movlw	0
  7936  003B1A  2209               	addwfc	?_Write_b_eep+1,f,c
  7937  003B1C  C00C  F00A         	movff	vscp_setManufacturerId@data,?_Write_b_eep+2
  7938  003B20  ECCF  F01C         	call	_Write_b_eep	;wreg free
  7939  003B24                     l253:
  7940  003B24  0012               	return	
  7941  003B26                     __end_of_vscp_setManufacturerId:
  7942                           	opt stack 0
  7943                           tblptru	equ	0xFF8
  7944                           tblptrh	equ	0xFF7
  7945                           tblptrl	equ	0xFF6
  7946                           tablat	equ	0xFF5
  7947                           prodh	equ	0xFF4
  7948                           prodl	equ	0xFF3
  7949                           intcon	equ	0xFF2
  7950                           postinc0	equ	0xFEE
  7951                           wreg	equ	0xFE8
  7952                           indf1	equ	0xFE7
  7953                           fsr1h	equ	0xFE2
  7954                           fsr1l	equ	0xFE1
  7955                           indf2	equ	0xFDF
  7956                           postinc2	equ	0xFDE
  7957                           postdec2	equ	0xFDD
  7958                           plusw2	equ	0xFDB
  7959                           fsr2h	equ	0xFDA
  7960                           fsr2l	equ	0xFD9
  7961                           status	equ	0xFD8
  7962                           
  7963 ;; *************** function _vscp_setGUID *****************
  7964 ;; Defined at:
  7965 ;;		line 806 in file "../main.c"
  7966 ;; Parameters:    Size  Location     Type
  7967 ;;  idx             1    wreg     unsigned char 
  7968 ;;  data            1   11[COMRAM] unsigned char 
  7969 ;; Auto vars:     Size  Location     Type
  7970 ;;  idx             1   12[COMRAM] unsigned char 
  7971 ;; Return value:  Size  Location     Type
  7972 ;;		None               void
  7973 ;; Registers used:
  7974 ;;		wreg, status,2, status,0, cstack
  7975 ;; Tracked objects:
  7976 ;;		On entry : F/0
  7977 ;;		On exit  : 0/0
  7978 ;;		Unchanged: 0/0
  7979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7980 ;;      Params:         1       0       0       0       0       0       0
  7981 ;;      Locals:         1       0       0       0       0       0       0
  7982 ;;      Temps:          0       0       0       0       0       0       0
  7983 ;;      Totals:         2       0       0       0       0       0       0
  7984 ;;Total ram usage:        2 bytes
  7985 ;; Hardware stack levels used:    1
  7986 ;; Hardware stack levels required when called:    3
  7987 ;; This function calls:
  7988 ;;		_Busy_eep
  7989 ;;		_Write_b_eep
  7990 ;; This function is called by:
  7991 ;;		_vscp_writeStdReg
  7992 ;; This function uses a non-reentrant model
  7993 ;;
  7994                           
  7995                           	psect	text23
  7996  003B26                     __ptext23:
  7997                           	opt stack 0
  7998  003B26                     _vscp_setGUID:
  7999                           	opt stack 25
  8000                           
  8001                           ;incstack = 0
  8002                           ;incstack = 0
  8003                           ;vscp_setGUID@idx stored from wreg
  8004  003B26  CFE8 F00D          	movff	wreg,vscp_setGUID@idx
  8005                           
  8006                           ; BSR set to: 0
  8007                           ;main.c: 807: if ( idx>15 ) return;
  8008  003B2A  0E0F               	movlw	15
  8009  003B2C  640D               	cpfsgt	vscp_setGUID@idx,c
  8010  003B2E  D001               	goto	l6015
  8011  003B30  D00C               	goto	l249
  8012  003B32                     l6015:
  8013                           
  8014                           ; BSR set to: 0
  8015                           ;main.c: 808: (Busy_eep(), Write_b_eep(0x13 + idx,data));
  8016  003B32  ECEA  F01E         	call	_Busy_eep	;wreg free
  8017  003B36  0E13               	movlw	19
  8018  003B38  240D               	addwf	vscp_setGUID@idx,w,c
  8019  003B3A  6E08               	movwf	?_Write_b_eep,c
  8020  003B3C  6A09               	clrf	?_Write_b_eep+1,c
  8021  003B3E  0E00               	movlw	0
  8022  003B40  2209               	addwfc	?_Write_b_eep+1,f,c
  8023  003B42  C00C  F00A         	movff	vscp_setGUID@data,?_Write_b_eep+2
  8024  003B46  ECCF  F01C         	call	_Write_b_eep	;wreg free
  8025  003B4A                     l249:
  8026  003B4A  0012               	return	
  8027  003B4C                     __end_of_vscp_setGUID:
  8028                           	opt stack 0
  8029                           tblptru	equ	0xFF8
  8030                           tblptrh	equ	0xFF7
  8031                           tblptrl	equ	0xFF6
  8032                           tablat	equ	0xFF5
  8033                           prodh	equ	0xFF4
  8034                           prodl	equ	0xFF3
  8035                           intcon	equ	0xFF2
  8036                           postinc0	equ	0xFEE
  8037                           wreg	equ	0xFE8
  8038                           indf1	equ	0xFE7
  8039                           fsr1h	equ	0xFE2
  8040                           fsr1l	equ	0xFE1
  8041                           indf2	equ	0xFDF
  8042                           postinc2	equ	0xFDE
  8043                           postdec2	equ	0xFDD
  8044                           plusw2	equ	0xFDB
  8045                           fsr2h	equ	0xFDA
  8046                           fsr2l	equ	0xFD9
  8047                           status	equ	0xFD8
  8048                           
  8049 ;; *************** function _vscp_writeAppReg *****************
  8050 ;; Defined at:
  8051 ;;		line 970 in file "../main.c"
  8052 ;; Parameters:    Size  Location     Type
  8053 ;;  reg             1    wreg     unsigned char 
  8054 ;;  val             1   80[COMRAM] unsigned char 
  8055 ;; Auto vars:     Size  Location     Type
  8056 ;;  reg             1   29[BANK0 ] unsigned char 
  8057 ;;  val             1   26[BANK0 ] unsigned char 
  8058 ;;  bOn             1   28[BANK0 ] enum E15660
  8059 ;;  rv              1   27[BANK0 ] unsigned char 
  8060 ;;  bInfoEvent      1   25[BANK0 ] enum E15660
  8061 ;; Return value:  Size  Location     Type
  8062 ;;                  1    wreg      unsigned char 
  8063 ;; Registers used:
  8064 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8065 ;; Tracked objects:
  8066 ;;		On entry : F/0
  8067 ;;		On exit  : F/0
  8068 ;;		Unchanged: 0/0
  8069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8070 ;;      Params:         1       0       0       0       0       0       0
  8071 ;;      Locals:         0       5       0       0       0       0       0
  8072 ;;      Temps:          0       3       0       0       0       0       0
  8073 ;;      Totals:         1       8       0       0       0       0       0
  8074 ;;Total ram usage:        9 bytes
  8075 ;; Hardware stack levels used:    1
  8076 ;; Hardware stack levels required when called:    7
  8077 ;; This function calls:
  8078 ;;		_Busy_eep
  8079 ;;		_Write_b_eep
  8080 ;;		_Read_b_eep
  8081 ;;		_calculateSetFilterMask
  8082 ;;		_SendInformationEvent
  8083 ;; This function is called by:
  8084 ;;		_vscp_writeRegister
  8085 ;;		_vscp_handleProtocolEvent
  8086 ;; This function uses a non-reentrant model
  8087 ;;
  8088                           
  8089                           	psect	text24
  8090  000622                     __ptext24:
  8091                           	opt stack 0
  8092  000622                     _vscp_writeAppReg:
  8093                           	opt stack 21
  8094                           
  8095                           ;incstack = 0
  8096                           ;incstack = 0
  8097                           ;vscp_writeAppReg@reg stored from wreg
  8098  000622  CFE8 F0CE          	movff	wreg,vscp_writeAppReg@reg
  8099                           
  8100                           ; BSR set to: 0
  8101                           ;main.c: 971: uint8_t rv;
  8102                           ;main.c: 972: BOOL bInfoEvent = 0;
  8103  000626  6BCA               	clrf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8104                           
  8105                           ;main.c: 973: BOOL bOn = 0;
  8106  000628  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8107                           
  8108                           ; BSR set to: 0
  8109                           ;main.c: 975: rv = ~val;
  8110  00062A  1C51               	comf	vscp_writeAppReg@val,w,c
  8111  00062C  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8112                           
  8113                           ; BSR set to: 0
  8114                           ;main.c: 978: if ( reg == 0 ) {
  8115  00062E  67CE               	tstfsz	vscp_writeAppReg@reg& (0+255),b
  8116  000630  D00F               	goto	l10667
  8117                           
  8118                           ; BSR set to: 0
  8119                           ;main.c: 979: (Busy_eep(), Write_b_eep(0x43 + 0,val));
  8120  000632  ECEA  F01E         	call	_Busy_eep	;wreg free
  8121  000636  6A09               	clrf	?_Write_b_eep+1,c
  8122  000638  0E43               	movlw	67
  8123  00063A  6E08               	movwf	?_Write_b_eep,c
  8124  00063C  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8125  000640  ECCF  F01C         	call	_Write_b_eep	;wreg free
  8126                           
  8127                           ;main.c: 980: rv = Read_b_eep(0x43 + 0);
  8128  000644  6A09               	clrf	?_Read_b_eep+1,c
  8129  000646  0E43               	movlw	67
  8130  000648  6E08               	movwf	?_Read_b_eep,c
  8131  00064A  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8132  00064E  D3B4               	goto	L27
  8133  000650                     l10667:
  8134                           
  8135                           ; BSR set to: 0
  8136                           ;main.c: 982: else if ( reg == 1 ) {
  8137  000650  05CE               	decf	vscp_writeAppReg@reg& (0+255),w,b
  8138  000652  E10F               	bnz	l10675
  8139                           
  8140                           ; BSR set to: 0
  8141                           ;main.c: 984: (Busy_eep(), Write_b_eep(0x43 + 1,val));
  8142  000654  ECEA  F01E         	call	_Busy_eep	;wreg free
  8143  000658  6A09               	clrf	?_Write_b_eep+1,c
  8144  00065A  0E44               	movlw	68
  8145  00065C  6E08               	movwf	?_Write_b_eep,c
  8146  00065E  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8147  000662  ECCF  F01C         	call	_Write_b_eep	;wreg free
  8148                           
  8149                           ;main.c: 985: rv = Read_b_eep(0x43 + 1);
  8150  000666  6A09               	clrf	?_Read_b_eep+1,c
  8151  000668  0E44               	movlw	68
  8152  00066A  6E08               	movwf	?_Read_b_eep,c
  8153  00066C  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8154  000670  D3A3               	goto	L27
  8155  000672                     l10675:
  8156                           
  8157                           ; BSR set to: 0
  8158                           ;main.c: 988: else if ( (reg >= 2) && (reg <= 9) ) {
  8159  000672  0E01               	movlw	1
  8160  000674  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8161  000676  D17B               	goto	l10827
  8162                           
  8163                           ; BSR set to: 0
  8164  000678  0E0A               	movlw	10
  8165  00067A  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8166  00067C  D178               	goto	l10827
  8167                           
  8168                           ; BSR set to: 0
  8169                           ;main.c: 990: if ( Read_b_eep(0x43 + 10 + reg - 2) &
  8170                           ;main.c: 992: 0x80 ) {
  8171  00067E  0E4B               	movlw	75
  8172  000680  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8173  000682  6E08               	movwf	?_Read_b_eep,c
  8174  000684  6A09               	clrf	?_Read_b_eep+1,c
  8175  000686  0E00               	movlw	0
  8176  000688  2209               	addwfc	?_Read_b_eep+1,f,c
  8177  00068A  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8178  00068E  0100               	movlb	0	; () banked
  8179  000690  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8180  000692  BFC7               	btfsc	??_vscp_writeAppReg& (0+255),7,b
  8181  000694  D157               	goto	l10825
  8182  000696  D3A1               	goto	l11087
  8183  000698                     l10683:
  8184                           
  8185                           ; BSR set to: 0
  8186                           ;main.c: 999: bInfoEvent = 1;
  8187  000698  0E01               	movlw	1
  8188  00069A  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8189                           
  8190                           ; BSR set to: 0
  8191                           ;main.c: 1001: if ( 1 == val ) {
  8192  00069C  0451               	decf	vscp_writeAppReg@val,w,c
  8193  00069E  E126               	bnz	l306
  8194                           
  8195                           ; BSR set to: 0
  8196                           ;main.c: 1003: LATBbits.LATB4 = 1;
  8197  0006A0  888A               	bsf	3978,4,c	;volatile
  8198                           
  8199                           ; BSR set to: 0
  8200                           ;main.c: 1004: rv = LATBbits.LATB4;
  8201  0006A2  0E00               	movlw	0
  8202  0006A4  B88A               	btfsc	3978,4,c	;volatile
  8203  0006A6  0E01               	movlw	1
  8204  0006A8  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8205                           
  8206                           ; BSR set to: 0
  8207                           ;main.c: 1005: bOn = 1;
  8208  0006AA  0E01               	movlw	1
  8209  0006AC  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8210                           
  8211                           ; BSR set to: 0
  8212                           ;main.c: 1008: if ( Read_b_eep(0x43 + 10) & 0x04 ) {
  8213  0006AE  6A09               	clrf	?_Read_b_eep+1,c
  8214  0006B0  0E4D               	movlw	77
  8215  0006B2  6E08               	movwf	?_Read_b_eep,c
  8216  0006B4  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8217  0006B8  0100               	movlb	0	; () banked
  8218  0006BA  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8219  0006BC  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8220  0006BE  D38D               	goto	l11087
  8221  0006C0                     l10695:
  8222                           
  8223                           ; BSR set to: 0
  8224                           ;main.c: 1009: relay_protection_timer[ 0 ] =
  8225                           ;main.c: 1010: Read_b_eep(0x43 + 34) * 256 +
  8226                           ;main.c: 1011: Read_b_eep(0x43 + 35);
  8227  0006C0  6A09               	clrf	?_Read_b_eep+1,c
  8228  0006C2  0E66               	movlw	102
  8229  0006C4  6E08               	movwf	?_Read_b_eep,c
  8230  0006C6  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8231  0006CA  0100               	movlb	0	; () banked
  8232  0006CC  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8233  0006CE  6A09               	clrf	?_Read_b_eep+1,c
  8234  0006D0  0E65               	movlw	101
  8235  0006D2  6E08               	movwf	?_Read_b_eep,c
  8236  0006D4  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8237  0006D8  0100               	movlb	0	; () banked
  8238  0006DA  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8239  0006DC  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8240  0006DE  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8241  0006E0  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8242  0006E2  6F60               	movwf	_relay_protection_timer& (0+255),b
  8243  0006E4  0E00               	movlw	0
  8244  0006E6  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8245  0006E8  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  8246  0006EA  D377               	goto	l11087
  8247  0006EC                     l306:
  8248                           
  8249                           ; BSR set to: 0
  8250                           ;main.c: 1015: else if (0 == val) {
  8251  0006EC  6651               	tstfsz	vscp_writeAppReg@val,c
  8252  0006EE  D375               	goto	l11087
  8253                           
  8254                           ; BSR set to: 0
  8255                           ;main.c: 1016: LATBbits.LATB4 = 0;
  8256  0006F0  988A               	bcf	3978,4,c	;volatile
  8257                           
  8258                           ; BSR set to: 0
  8259                           ;main.c: 1017: rv = LATBbits.LATB4;
  8260  0006F2  0E00               	movlw	0
  8261  0006F4  B88A               	btfsc	3978,4,c	;volatile
  8262  0006F6  0E01               	movlw	1
  8263  0006F8  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8264  0006FA                     l10701:
  8265                           
  8266                           ; BSR set to: 0
  8267                           ;main.c: 1018: bOn = 0;
  8268  0006FA  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8269  0006FC  D36E               	goto	l11087
  8270  0006FE                     l10703:
  8271                           
  8272                           ; BSR set to: 0
  8273                           ;main.c: 1025: bInfoEvent = 1;
  8274  0006FE  0E01               	movlw	1
  8275  000700  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8276                           
  8277                           ; BSR set to: 0
  8278                           ;main.c: 1027: if (1 == val) {
  8279  000702  0451               	decf	vscp_writeAppReg@val,w,c
  8280  000704  E11D               	bnz	l312
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;main.c: 1029: LATBbits.LATB1 = 1;
  8284  000706  828A               	bsf	3978,1,c	;volatile
  8285                           
  8286                           ; BSR set to: 0
  8287                           ;main.c: 1030: rv = LATBbits.LATB1;
  8288  000708  0E00               	movlw	0
  8289  00070A  B28A               	btfsc	3978,1,c	;volatile
  8290  00070C  0E01               	movlw	1
  8291  00070E  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8292                           
  8293                           ; BSR set to: 0
  8294                           ;main.c: 1031: bOn = 1;
  8295  000710  0E01               	movlw	1
  8296  000712  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8297                           
  8298                           ; BSR set to: 0
  8299                           ;main.c: 1033: if (Read_b_eep(0x43 + 11) & 0x04) {
  8300  000714  6A09               	clrf	?_Read_b_eep+1,c
  8301  000716  0E4E               	movlw	78
  8302  000718  6E08               	movwf	?_Read_b_eep,c
  8303  00071A  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8304  00071E  0100               	movlb	0	; () banked
  8305  000720  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8306  000722  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8307  000724  D35A               	goto	l11087
  8308  000726                     l10715:
  8309                           
  8310                           ; BSR set to: 0
  8311                           ;main.c: 1034: relay_protection_timer[ 1 ] =
  8312                           ;main.c: 1035: Read_b_eep(0x43 + 36) * 256 +
  8313                           ;main.c: 1036: Read_b_eep(0x43 + 37);
  8314  000726  6A09               	clrf	?_Read_b_eep+1,c
  8315  000728  0E68               	movlw	104
  8316  00072A  6E08               	movwf	?_Read_b_eep,c
  8317  00072C  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8318  000730  0100               	movlb	0	; () banked
  8319  000732  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8320  000734  6A09               	clrf	?_Read_b_eep+1,c
  8321  000736  0E67               	movlw	103
  8322  000738  6E08               	movwf	?_Read_b_eep,c
  8323  00073A  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8324  00073E  D170               	goto	L28
  8325  000740                     l312:
  8326                           
  8327                           ; BSR set to: 0
  8328                           ;main.c: 1040: else if (0 == val) {
  8329  000740  6651               	tstfsz	vscp_writeAppReg@val,c
  8330  000742  D34B               	goto	l11087
  8331                           
  8332                           ; BSR set to: 0
  8333                           ;main.c: 1041: LATBbits.LATB1 = 0;
  8334  000744  928A               	bcf	3978,1,c	;volatile
  8335                           
  8336                           ; BSR set to: 0
  8337                           ;main.c: 1042: rv = LATBbits.LATB1;
  8338  000746  0E00               	movlw	0
  8339  000748  B28A               	btfsc	3978,1,c	;volatile
  8340  00074A  0E01               	movlw	1
  8341  00074C  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8342  00074E  D7D5               	goto	l10701
  8343  000750                     l10723:
  8344                           
  8345                           ; BSR set to: 0
  8346                           ;main.c: 1050: bInfoEvent = 1;
  8347  000750  0E01               	movlw	1
  8348  000752  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8349                           
  8350                           ; BSR set to: 0
  8351                           ;main.c: 1052: if (1 == val) {
  8352  000754  0451               	decf	vscp_writeAppReg@val,w,c
  8353  000756  E126               	bnz	l317
  8354                           
  8355                           ; BSR set to: 0
  8356                           ;main.c: 1054: LATBbits.LATB0 = 1;
  8357  000758  808A               	bsf	3978,0,c	;volatile
  8358                           
  8359                           ; BSR set to: 0
  8360                           ;main.c: 1055: rv = LATBbits.LATB0;
  8361  00075A  0E00               	movlw	0
  8362  00075C  B08A               	btfsc	3978,0,c	;volatile
  8363  00075E  0E01               	movlw	1
  8364  000760  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8365                           
  8366                           ; BSR set to: 0
  8367                           ;main.c: 1056: bOn = 1;
  8368  000762  0E01               	movlw	1
  8369  000764  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;main.c: 1058: if ( Read_b_eep(0x43 + 12) & 0x04) {
  8373  000766  6A09               	clrf	?_Read_b_eep+1,c
  8374  000768  0E4F               	movlw	79
  8375  00076A  6E08               	movwf	?_Read_b_eep,c
  8376  00076C  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8377  000770  0100               	movlb	0	; () banked
  8378  000772  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8379  000774  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8380  000776  D331               	goto	l11087
  8381  000778                     l10735:
  8382                           
  8383                           ; BSR set to: 0
  8384                           ;main.c: 1059: relay_protection_timer[ 2 ] =
  8385                           ;main.c: 1060: Read_b_eep(0x43 + 38) * 256 +
  8386                           ;main.c: 1061: Read_b_eep(0x43 + 39);
  8387  000778  6A09               	clrf	?_Read_b_eep+1,c
  8388  00077A  0E6A               	movlw	106
  8389  00077C  6E08               	movwf	?_Read_b_eep,c
  8390  00077E  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8391  000782  0100               	movlb	0	; () banked
  8392  000784  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8393  000786  6A09               	clrf	?_Read_b_eep+1,c
  8394  000788  0E69               	movlw	105
  8395  00078A  6E08               	movwf	?_Read_b_eep,c
  8396  00078C  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8397  000790  0100               	movlb	0	; () banked
  8398  000792  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8399  000794  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8400  000796  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8401  000798  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8402  00079A  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  8403  00079C  0E00               	movlw	0
  8404  00079E  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8405  0007A0  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  8406  0007A2  D31B               	goto	l11087
  8407  0007A4                     l317:
  8408                           
  8409                           ; BSR set to: 0
  8410                           ;main.c: 1065: else if (0 == val) {
  8411  0007A4  6651               	tstfsz	vscp_writeAppReg@val,c
  8412  0007A6  D319               	goto	l11087
  8413                           
  8414                           ; BSR set to: 0
  8415                           ;main.c: 1066: LATBbits.LATB0 = 0;
  8416  0007A8  908A               	bcf	3978,0,c	;volatile
  8417                           
  8418                           ; BSR set to: 0
  8419                           ;main.c: 1067: rv = LATBbits.LATB0;
  8420  0007AA  0E00               	movlw	0
  8421  0007AC  B08A               	btfsc	3978,0,c	;volatile
  8422  0007AE  0E01               	movlw	1
  8423  0007B0  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8424  0007B2  D7A3               	goto	l10701
  8425  0007B4                     l10743:
  8426                           
  8427                           ; BSR set to: 0
  8428                           ;main.c: 1076: bInfoEvent = 1;
  8429  0007B4  0E01               	movlw	1
  8430  0007B6  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8431                           
  8432                           ; BSR set to: 0
  8433                           ;main.c: 1078: if (1 == val) {
  8434  0007B8  0451               	decf	vscp_writeAppReg@val,w,c
  8435  0007BA  E126               	bnz	l322
  8436                           
  8437                           ; BSR set to: 0
  8438                           ;main.c: 1080: LATCbits.LATC7 = 1;
  8439  0007BC  8E8B               	bsf	3979,7,c	;volatile
  8440                           
  8441                           ; BSR set to: 0
  8442                           ;main.c: 1081: rv = LATCbits.LATC7;
  8443  0007BE  0E00               	movlw	0
  8444  0007C0  BE8B               	btfsc	3979,7,c	;volatile
  8445  0007C2  0E01               	movlw	1
  8446  0007C4  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8447                           
  8448                           ; BSR set to: 0
  8449                           ;main.c: 1082: bOn = 1;
  8450  0007C6  0E01               	movlw	1
  8451  0007C8  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;main.c: 1084: if (Read_b_eep(0x43 + 13) & 0x04) {
  8455  0007CA  6A09               	clrf	?_Read_b_eep+1,c
  8456  0007CC  0E50               	movlw	80
  8457  0007CE  6E08               	movwf	?_Read_b_eep,c
  8458  0007D0  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8459  0007D4  0100               	movlb	0	; () banked
  8460  0007D6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8461  0007D8  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8462  0007DA  D2FF               	goto	l11087
  8463  0007DC                     l10755:
  8464                           
  8465                           ; BSR set to: 0
  8466                           ;main.c: 1085: relay_protection_timer[ 3 ] =
  8467                           ;main.c: 1086: Read_b_eep(0x43 + 40) * 256 +
  8468                           ;main.c: 1087: Read_b_eep(0x43 + 41);
  8469  0007DC  6A09               	clrf	?_Read_b_eep+1,c
  8470  0007DE  0E6C               	movlw	108
  8471  0007E0  6E08               	movwf	?_Read_b_eep,c
  8472  0007E2  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8473  0007E6  0100               	movlb	0	; () banked
  8474  0007E8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8475  0007EA  6A09               	clrf	?_Read_b_eep+1,c
  8476  0007EC  0E6B               	movlw	107
  8477  0007EE  6E08               	movwf	?_Read_b_eep,c
  8478  0007F0  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8479  0007F4  0100               	movlb	0	; () banked
  8480  0007F6  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8481  0007F8  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8482  0007FA  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8483  0007FC  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8484  0007FE  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  8485  000800  0E00               	movlw	0
  8486  000802  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8487  000804  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  8488  000806  D2E9               	goto	l11087
  8489  000808                     l322:
  8490                           
  8491                           ; BSR set to: 0
  8492                           ;main.c: 1091: else if (0 == val) {
  8493  000808  6651               	tstfsz	vscp_writeAppReg@val,c
  8494  00080A  D2E7               	goto	l11087
  8495                           
  8496                           ; BSR set to: 0
  8497                           ;main.c: 1092: LATCbits.LATC7 = 0;
  8498  00080C  9E8B               	bcf	3979,7,c	;volatile
  8499                           
  8500                           ; BSR set to: 0
  8501                           ;main.c: 1093: rv = LATCbits.LATC7;
  8502  00080E  0E00               	movlw	0
  8503  000810  BE8B               	btfsc	3979,7,c	;volatile
  8504  000812  0E01               	movlw	1
  8505  000814  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8506  000816  D771               	goto	l10701
  8507  000818                     l10763:
  8508                           
  8509                           ; BSR set to: 0
  8510                           ;main.c: 1102: bInfoEvent = 1;
  8511  000818  0E01               	movlw	1
  8512  00081A  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;main.c: 1104: if (1 == val) {
  8516  00081C  0451               	decf	vscp_writeAppReg@val,w,c
  8517  00081E  E126               	bnz	l327
  8518                           
  8519                           ; BSR set to: 0
  8520                           ;main.c: 1106: LATCbits.LATC6 = 1;
  8521  000820  8C8B               	bsf	3979,6,c	;volatile
  8522                           
  8523                           ; BSR set to: 0
  8524                           ;main.c: 1107: rv = LATCbits.LATC6;
  8525  000822  0E00               	movlw	0
  8526  000824  BC8B               	btfsc	3979,6,c	;volatile
  8527  000826  0E01               	movlw	1
  8528  000828  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;main.c: 1108: bOn = 1;
  8532  00082A  0E01               	movlw	1
  8533  00082C  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8534                           
  8535                           ; BSR set to: 0
  8536                           ;main.c: 1110: if (Read_b_eep(0x43 + 14) & 0x04) {
  8537  00082E  6A09               	clrf	?_Read_b_eep+1,c
  8538  000830  0E51               	movlw	81
  8539  000832  6E08               	movwf	?_Read_b_eep,c
  8540  000834  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8541  000838  0100               	movlb	0	; () banked
  8542  00083A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8543  00083C  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8544  00083E  D2CD               	goto	l11087
  8545  000840                     l10775:
  8546                           
  8547                           ; BSR set to: 0
  8548                           ;main.c: 1111: relay_protection_timer[ 4 ] =
  8549                           ;main.c: 1112: Read_b_eep(0x43 + 42) * 256 +
  8550                           ;main.c: 1113: Read_b_eep(0x43 + 43);
  8551  000840  6A09               	clrf	?_Read_b_eep+1,c
  8552  000842  0E6E               	movlw	110
  8553  000844  6E08               	movwf	?_Read_b_eep,c
  8554  000846  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8555  00084A  0100               	movlb	0	; () banked
  8556  00084C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8557  00084E  6A09               	clrf	?_Read_b_eep+1,c
  8558  000850  0E6D               	movlw	109
  8559  000852  6E08               	movwf	?_Read_b_eep,c
  8560  000854  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8561  000858  0100               	movlb	0	; () banked
  8562  00085A  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8563  00085C  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8564  00085E  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8565  000860  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8566  000862  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  8567  000864  0E00               	movlw	0
  8568  000866  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8569  000868  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  8570  00086A  D2B7               	goto	l11087
  8571  00086C                     l327:
  8572                           
  8573                           ; BSR set to: 0
  8574                           ;main.c: 1117: else if (0 == val) {
  8575  00086C  6651               	tstfsz	vscp_writeAppReg@val,c
  8576  00086E  D2B5               	goto	l11087
  8577                           
  8578                           ; BSR set to: 0
  8579                           ;main.c: 1118: LATCbits.LATC6 = 0;
  8580  000870  9C8B               	bcf	3979,6,c	;volatile
  8581                           
  8582                           ; BSR set to: 0
  8583                           ;main.c: 1119: rv = LATCbits.LATC6;
  8584  000872  0E00               	movlw	0
  8585  000874  BC8B               	btfsc	3979,6,c	;volatile
  8586  000876  0E01               	movlw	1
  8587  000878  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8588  00087A  D73F               	goto	l10701
  8589  00087C                     l10783:
  8590                           
  8591                           ; BSR set to: 0
  8592                           ;main.c: 1128: bInfoEvent = 1;
  8593  00087C  0E01               	movlw	1
  8594  00087E  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8595                           
  8596                           ; BSR set to: 0
  8597                           ;main.c: 1130: if (1 == val) {
  8598  000880  0451               	decf	vscp_writeAppReg@val,w,c
  8599  000882  E126               	bnz	l332
  8600                           
  8601                           ; BSR set to: 0
  8602                           ;main.c: 1132: LATCbits.LATC5 = 1;
  8603  000884  8A8B               	bsf	3979,5,c	;volatile
  8604                           
  8605                           ; BSR set to: 0
  8606                           ;main.c: 1133: rv = LATCbits.LATC5;
  8607  000886  0E00               	movlw	0
  8608  000888  BA8B               	btfsc	3979,5,c	;volatile
  8609  00088A  0E01               	movlw	1
  8610  00088C  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8611                           
  8612                           ; BSR set to: 0
  8613                           ;main.c: 1134: bOn = 1;
  8614  00088E  0E01               	movlw	1
  8615  000890  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8616                           
  8617                           ; BSR set to: 0
  8618                           ;main.c: 1136: if (Read_b_eep(0x43 + 15) & 0x04) {
  8619  000892  6A09               	clrf	?_Read_b_eep+1,c
  8620  000894  0E52               	movlw	82
  8621  000896  6E08               	movwf	?_Read_b_eep,c
  8622  000898  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8623  00089C  0100               	movlb	0	; () banked
  8624  00089E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8625  0008A0  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8626  0008A2  D29B               	goto	l11087
  8627  0008A4                     l10795:
  8628                           
  8629                           ; BSR set to: 0
  8630                           ;main.c: 1137: relay_protection_timer[ 5 ] =
  8631                           ;main.c: 1138: Read_b_eep(0x43 + 44) * 256 +
  8632                           ;main.c: 1139: Read_b_eep(0x43 + 45);
  8633  0008A4  6A09               	clrf	?_Read_b_eep+1,c
  8634  0008A6  0E70               	movlw	112
  8635  0008A8  6E08               	movwf	?_Read_b_eep,c
  8636  0008AA  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8637  0008AE  0100               	movlb	0	; () banked
  8638  0008B0  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8639  0008B2  6A09               	clrf	?_Read_b_eep+1,c
  8640  0008B4  0E6F               	movlw	111
  8641  0008B6  6E08               	movwf	?_Read_b_eep,c
  8642  0008B8  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8643  0008BC  0100               	movlb	0	; () banked
  8644  0008BE  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8645  0008C0  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8646  0008C2  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8647  0008C4  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8648  0008C6  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  8649  0008C8  0E00               	movlw	0
  8650  0008CA  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8651  0008CC  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  8652  0008CE  D285               	goto	l11087
  8653  0008D0                     l332:
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;main.c: 1143: else if (0 == val) {
  8657  0008D0  6651               	tstfsz	vscp_writeAppReg@val,c
  8658  0008D2  D283               	goto	l11087
  8659                           
  8660                           ; BSR set to: 0
  8661                           ;main.c: 1144: LATCbits.LATC5 = 0;
  8662  0008D4  9A8B               	bcf	3979,5,c	;volatile
  8663                           
  8664                           ; BSR set to: 0
  8665                           ;main.c: 1145: rv = LATCbits.LATC5;
  8666  0008D6  0E00               	movlw	0
  8667  0008D8  BA8B               	btfsc	3979,5,c	;volatile
  8668  0008DA  0E01               	movlw	1
  8669  0008DC  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8670  0008DE  D70D               	goto	l10701
  8671  0008E0                     l10803:
  8672                           
  8673                           ; BSR set to: 0
  8674                           ;main.c: 1153: bInfoEvent = 1;
  8675  0008E0  0E01               	movlw	1
  8676  0008E2  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;main.c: 1155: if (1 == val) {
  8680  0008E4  0451               	decf	vscp_writeAppReg@val,w,c
  8681  0008E6  E126               	bnz	l337
  8682                           
  8683                           ; BSR set to: 0
  8684                           ;main.c: 1157: LATCbits.LATC4 = 1;
  8685  0008E8  888B               	bsf	3979,4,c	;volatile
  8686                           
  8687                           ; BSR set to: 0
  8688                           ;main.c: 1158: rv = LATCbits.LATC4;
  8689  0008EA  0E00               	movlw	0
  8690  0008EC  B88B               	btfsc	3979,4,c	;volatile
  8691  0008EE  0E01               	movlw	1
  8692  0008F0  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8693                           
  8694                           ; BSR set to: 0
  8695                           ;main.c: 1159: bOn = 1;
  8696  0008F2  0E01               	movlw	1
  8697  0008F4  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8698                           
  8699                           ; BSR set to: 0
  8700                           ;main.c: 1161: if (Read_b_eep(0x43 + 16) & 0x04) {
  8701  0008F6  6A09               	clrf	?_Read_b_eep+1,c
  8702  0008F8  0E53               	movlw	83
  8703  0008FA  6E08               	movwf	?_Read_b_eep,c
  8704  0008FC  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8705  000900  0100               	movlb	0	; () banked
  8706  000902  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8707  000904  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8708  000906  D269               	goto	l11087
  8709  000908                     l10815:
  8710                           
  8711                           ; BSR set to: 0
  8712                           ;main.c: 1162: relay_protection_timer[ 6 ] =
  8713                           ;main.c: 1163: Read_b_eep(0x43 + 46) * 256 +
  8714                           ;main.c: 1164: Read_b_eep(0x43 + 47);
  8715  000908  6A09               	clrf	?_Read_b_eep+1,c
  8716  00090A  0E72               	movlw	114
  8717  00090C  6E08               	movwf	?_Read_b_eep,c
  8718  00090E  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8719  000912  0100               	movlb	0	; () banked
  8720  000914  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8721  000916  6A09               	clrf	?_Read_b_eep+1,c
  8722  000918  0E71               	movlw	113
  8723  00091A  6E08               	movwf	?_Read_b_eep,c
  8724  00091C  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8725  000920  0100               	movlb	0	; () banked
  8726  000922  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8727  000924  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8728  000926  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8729  000928  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8730  00092A  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  8731  00092C  0E00               	movlw	0
  8732  00092E  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8733  000930  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  8734  000932  D253               	goto	l11087
  8735  000934                     l337:
  8736                           
  8737                           ; BSR set to: 0
  8738                           ;main.c: 1168: else if (0 == val) {
  8739  000934  6651               	tstfsz	vscp_writeAppReg@val,c
  8740  000936  D251               	goto	l11087
  8741                           
  8742                           ; BSR set to: 0
  8743                           ;main.c: 1169: LATCbits.LATC4 = 0;
  8744  000938  988B               	bcf	3979,4,c	;volatile
  8745                           
  8746                           ; BSR set to: 0
  8747                           ;main.c: 1170: rv = LATCbits.LATC4;
  8748  00093A  0E00               	movlw	0
  8749  00093C  B88B               	btfsc	3979,4,c	;volatile
  8750  00093E  0E01               	movlw	1
  8751  000940  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8752  000942  D6DB               	goto	l10701
  8753  000944                     l10825:
  8754                           
  8755                           ; BSR set to: 0
  8756  000944  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  8757                           
  8758                           ; Switch size 1, requested type "space"
  8759                           ; Number of cases is 7, Range of values is 2 to 8
  8760                           ; switch strategies available:
  8761                           ; Name         Instructions Cycles
  8762                           ; simple_byte           22    12 (average)
  8763                           ;	Chosen strategy is simple_byte
  8764  000946  0A02               	xorlw	2	; case 2
  8765  000948  E101 D6A6          	bz	l10683
  8766  00094C  0A01               	xorlw	1	; case 3
  8767  00094E  E101 D6D6          	bz	l10703
  8768  000952  0A07               	xorlw	7	; case 4
  8769  000954  E101 D6FC          	bz	l10723
  8770  000958  0A01               	xorlw	1	; case 5
  8771  00095A  E101 D72B          	bz	l10743
  8772  00095E  0A03               	xorlw	3	; case 6
  8773  000960  E101 D75A          	bz	l10763
  8774  000964  0A01               	xorlw	1	; case 7
  8775  000966  E08A               	bz	l10783
  8776  000968  0A0F               	xorlw	15	; case 8
  8777  00096A  E0BA               	bz	l10803
  8778                           
  8779                           ; BSR set to: 0
  8780                           ;main.c: 1176: }
  8781                           ;main.c: 1177: }
  8782  00096C  D236               	goto	l11087
  8783  00096E                     l10827:
  8784                           
  8785                           ; BSR set to: 0
  8786                           ;main.c: 1180: else if ( (reg >= 10 ) &&
  8787                           ;main.c: 1181: (reg <= 17) ) {
  8788  00096E  0E09               	movlw	9
  8789  000970  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8790  000972  D12D               	goto	l11005
  8791                           
  8792                           ; BSR set to: 0
  8793  000974  0E12               	movlw	18
  8794  000976  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8795  000978  D12A               	goto	l11005
  8796  00097A  D115               	goto	l11003
  8797  00097C                     l10833:
  8798                           
  8799                           ; BSR set to: 0
  8800                           ;main.c: 1187: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8801  00097C  ECEA  F01E         	call	_Busy_eep	;wreg free
  8802  000980  DA65               	call	PL4	;call to abstracted procedure
  8803  000982  ECCF  F01C         	call	_Write_b_eep	;wreg free
  8804                           
  8805                           ;main.c: 1188: rv = Read_b_eep(0x43 + reg);
  8806  000986  DA6C               	call	PL6	;call to abstracted procedure
  8807  000988  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8808  00098C  0100               	movlb	0	; () banked
  8809  00098E  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8810                           
  8811                           ; BSR set to: 0
  8812                           ;main.c: 1190: if ( val & 0x01 ) {
  8813  000990  A051               	btfss	vscp_writeAppReg@val,0,c
  8814  000992  D011               	goto	l10847
  8815                           
  8816                           ; BSR set to: 0
  8817                           ;main.c: 1192: LATBbits.LATB4 = 0;
  8818  000994  988A               	bcf	3978,4,c	;volatile
  8819                           
  8820                           ;main.c: 1193: bOn = 0;
  8821  000996  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8822                           
  8823                           ; BSR set to: 0
  8824                           ;main.c: 1195: relay_pulse_flags |= 0x01;
  8825  000998  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  8826                           
  8827                           ; BSR set to: 0
  8828                           ;main.c: 1196: relay_pulse_timer[ 0 ] =
  8829                           ;main.c: 1197: Read_b_eep(0x43 + 18) * 256 +
  8830                           ;main.c: 1198: Read_b_eep(0x43 + 19);
  8831  00099A  6A09               	clrf	?_Read_b_eep+1,c
  8832  00099C  0E56               	movlw	86
  8833  00099E  6E08               	movwf	?_Read_b_eep,c
  8834  0009A0  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8835  0009A4  0100               	movlb	0	; () banked
  8836  0009A6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8837  0009A8  6A09               	clrf	?_Read_b_eep+1,c
  8838  0009AA  0E55               	movlw	85
  8839  0009AC  6E08               	movwf	?_Read_b_eep,c
  8840  0009AE  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8841  0009B2  DA5E               	call	PL38	;call to abstracted procedure
  8842                           
  8843                           ;main.c: 1199: }
  8844  0009B4  D003               	goto	l10853
  8845  0009B6                     l10847:
  8846                           
  8847                           ; BSR set to: 0
  8848                           ;main.c: 1200: else {
  8849                           ;main.c: 1201: relay_pulse_flags &= 0b11111110;
  8850  0009B6  918A               	bcf	_relay_pulse_flags& (0+255),0,b
  8851                           
  8852                           ; BSR set to: 0
  8853                           ;main.c: 1202: LATBbits.LATB4 = 0;
  8854  0009B8  988A               	bcf	3978,4,c	;volatile
  8855                           
  8856                           ; BSR set to: 0
  8857                           ;main.c: 1203: bOn = 0;
  8858  0009BA  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8859  0009BC                     l10853:
  8860                           
  8861                           ; BSR set to: 0
  8862                           ;main.c: 1204: }
  8863                           ;main.c: 1206: if ( val & 0x04 ) {
  8864  0009BC  B451               	btfsc	vscp_writeAppReg@val,2,c
  8865  0009BE  D680               	goto	l10695
  8866  0009C0  D20C               	goto	l11087
  8867  0009C2                     l10857:
  8868                           
  8869                           ; BSR set to: 0
  8870                           ;main.c: 1215: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8871  0009C2  ECEA  F01E         	call	_Busy_eep	;wreg free
  8872  0009C6  DA42               	call	PL4	;call to abstracted procedure
  8873  0009C8  ECCF  F01C         	call	_Write_b_eep	;wreg free
  8874                           
  8875                           ;main.c: 1216: rv = Read_b_eep(0x43 + reg);
  8876  0009CC  DA49               	call	PL6	;call to abstracted procedure
  8877  0009CE  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8878  0009D2  0100               	movlb	0	; () banked
  8879  0009D4  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8880                           
  8881                           ; BSR set to: 0
  8882                           ;main.c: 1218: if ( val & 0x01 ) {
  8883  0009D6  A051               	btfss	vscp_writeAppReg@val,0,c
  8884  0009D8  D012               	goto	l10871
  8885                           
  8886                           ; BSR set to: 0
  8887                           ;main.c: 1220: LATBbits.LATB1 = 0;
  8888  0009DA  928A               	bcf	3978,1,c	;volatile
  8889                           
  8890                           ;main.c: 1221: bOn = 0;
  8891  0009DC  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8892                           
  8893                           ; BSR set to: 0
  8894                           ;main.c: 1223: relay_pulse_flags |= 0x02;
  8895  0009DE  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  8896                           
  8897                           ; BSR set to: 0
  8898                           ;main.c: 1224: relay_pulse_timer[ 1 ] =
  8899                           ;main.c: 1225: Read_b_eep(0x43 + 18) * 256 +
  8900                           ;main.c: 1226: Read_b_eep(0x43 + 19);
  8901  0009E0  6A09               	clrf	?_Read_b_eep+1,c
  8902  0009E2  0E56               	movlw	86
  8903  0009E4  6E08               	movwf	?_Read_b_eep,c
  8904  0009E6  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8905  0009EA  0100               	movlb	0	; () banked
  8906  0009EC  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8907  0009EE  6A09               	clrf	?_Read_b_eep+1,c
  8908  0009F0  0E55               	movlw	85
  8909  0009F2  6E08               	movwf	?_Read_b_eep,c
  8910  0009F4  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8911  0009F8  0100               	movlb	0	; () banked
  8912  0009FA  DA44               	call	PL56	;call to abstracted procedure
  8913                           
  8914                           ;main.c: 1227: }
  8915  0009FC  D003               	goto	l10877
  8916  0009FE                     l10871:
  8917                           
  8918                           ; BSR set to: 0
  8919                           ;main.c: 1228: else {
  8920                           ;main.c: 1229: relay_pulse_flags &= 0b11111101;
  8921  0009FE  938A               	bcf	_relay_pulse_flags& (0+255),1,b
  8922                           
  8923                           ; BSR set to: 0
  8924                           ;main.c: 1230: LATBbits.LATB1 = 0;
  8925  000A00  928A               	bcf	3978,1,c	;volatile
  8926                           
  8927                           ; BSR set to: 0
  8928                           ;main.c: 1231: bOn = 0;
  8929  000A02  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8930  000A04                     l10877:
  8931                           
  8932                           ; BSR set to: 0
  8933                           ;main.c: 1232: }
  8934                           ;main.c: 1234: if ( val & 0x04 ) {
  8935  000A04  A451               	btfss	vscp_writeAppReg@val,2,c
  8936  000A06  D1E9               	goto	l11087
  8937                           
  8938                           ; BSR set to: 0
  8939                           ;main.c: 1235: relay_protection_timer[ 1 ] =
  8940                           ;main.c: 1236: Read_b_eep(0x43 + 34) * 256 +
  8941                           ;main.c: 1237: Read_b_eep(0x43 + 35);
  8942  000A08  6A09               	clrf	?_Read_b_eep+1,c
  8943  000A0A  0E66               	movlw	102
  8944  000A0C  6E08               	movwf	?_Read_b_eep,c
  8945  000A0E  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8946  000A12  0100               	movlb	0	; () banked
  8947  000A14  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8948  000A16  6A09               	clrf	?_Read_b_eep+1,c
  8949  000A18  0E65               	movlw	101
  8950  000A1A  6E08               	movwf	?_Read_b_eep,c
  8951  000A1C  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8952  000A20                     L28:
  8953  000A20  0100               	movlb	0	; () banked
  8954  000A22  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8955  000A24  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8956  000A26  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8957  000A28  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8958  000A2A  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  8959  000A2C  0E00               	movlw	0
  8960  000A2E  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8961  000A30  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  8962  000A32  D1D3               	goto	l11087
  8963  000A34                     l10881:
  8964                           
  8965                           ; BSR set to: 0
  8966                           ;main.c: 1243: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8967  000A34  ECEA  F01E         	call	_Busy_eep	;wreg free
  8968  000A38  DA09               	call	PL4	;call to abstracted procedure
  8969  000A3A  ECCF  F01C         	call	_Write_b_eep	;wreg free
  8970                           
  8971                           ;main.c: 1244: rv = Read_b_eep(0x43 + reg);
  8972  000A3E  DA10               	call	PL6	;call to abstracted procedure
  8973  000A40  ECB6  F01E         	call	_Read_b_eep	;wreg free
  8974  000A44  0100               	movlb	0	; () banked
  8975  000A46  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8976                           
  8977                           ; BSR set to: 0
  8978                           ;main.c: 1246: if ( val & 0x01 ) {
  8979  000A48  A051               	btfss	vscp_writeAppReg@val,0,c
  8980  000A4A  D013               	goto	l10895
  8981                           
  8982                           ; BSR set to: 0
  8983                           ;main.c: 1248: LATBbits.LATB0 = 0;
  8984  000A4C  908A               	bcf	3978,0,c	;volatile
  8985                           
  8986                           ;main.c: 1249: bOn = 0;
  8987  000A4E  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8988                           
  8989                           ; BSR set to: 0
  8990                           ;main.c: 1251: relay_pulse_flags |= 0x04;
  8991  000A50  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  8992                           
  8993                           ; BSR set to: 0
  8994                           ;main.c: 1252: relay_pulse_timer[ 2 ] =
  8995                           ;main.c: 1253: Read_b_eep(0x43 + 22) * 256 +
  8996                           ;main.c: 1254: Read_b_eep(0x43 + 23);
  8997  000A52  6A09               	clrf	?_Read_b_eep+1,c
  8998  000A54  0E5A               	movlw	90
  8999  000A56  6E08               	movwf	?_Read_b_eep,c
  9000  000A58  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9001  000A5C  0100               	movlb	0	; () banked
  9002  000A5E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9003  000A60  6A09               	clrf	?_Read_b_eep+1,c
  9004  000A62  0E59               	movlw	89
  9005  000A64  6E08               	movwf	?_Read_b_eep,c
  9006  000A66  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9007  000A6A  0100               	movlb	0	; () banked
  9008  000A6C  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9009  000A6E  DA23               	call	PL64	;call to abstracted procedure
  9010                           
  9011                           ;main.c: 1255: }
  9012  000A70  D003               	goto	l10901
  9013  000A72                     l10895:
  9014                           
  9015                           ; BSR set to: 0
  9016                           ;main.c: 1256: else {
  9017                           ;main.c: 1257: relay_pulse_flags &= 0b11111011;
  9018  000A72  958A               	bcf	_relay_pulse_flags& (0+255),2,b
  9019                           
  9020                           ; BSR set to: 0
  9021                           ;main.c: 1258: LATBbits.LATB0 = 0;
  9022  000A74  908A               	bcf	3978,0,c	;volatile
  9023                           
  9024                           ; BSR set to: 0
  9025                           ;main.c: 1259: bOn = 0;
  9026  000A76  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9027  000A78                     l10901:
  9028                           
  9029                           ; BSR set to: 0
  9030                           ;main.c: 1260: }
  9031                           ;main.c: 1262: if ( val & 0x04 ) {
  9032  000A78  B451               	btfsc	vscp_writeAppReg@val,2,c
  9033  000A7A  D67E               	goto	l10735
  9034  000A7C  D1AE               	goto	l11087
  9035  000A7E                     l10905:
  9036                           
  9037                           ; BSR set to: 0
  9038                           ;main.c: 1271: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9039  000A7E  ECEA  F01E         	call	_Busy_eep	;wreg free
  9040  000A82  D9E4               	call	PL4	;call to abstracted procedure
  9041  000A84  ECCF  F01C         	call	_Write_b_eep	;wreg free
  9042                           
  9043                           ;main.c: 1272: rv = Read_b_eep(0x43 + reg);
  9044  000A88  D9EB               	call	PL6	;call to abstracted procedure
  9045  000A8A  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9046  000A8E  0100               	movlb	0	; () banked
  9047  000A90  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9048                           
  9049                           ; BSR set to: 0
  9050                           ;main.c: 1274: if ( val & 0x01 ) {
  9051  000A92  A051               	btfss	vscp_writeAppReg@val,0,c
  9052  000A94  D013               	goto	l10919
  9053                           
  9054                           ; BSR set to: 0
  9055                           ;main.c: 1276: LATCbits.LATC7 = 0;
  9056  000A96  9E8B               	bcf	3979,7,c	;volatile
  9057                           
  9058                           ;main.c: 1277: bOn = 0;
  9059  000A98  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9060                           
  9061                           ; BSR set to: 0
  9062                           ;main.c: 1279: relay_pulse_flags |= 0x08;
  9063  000A9A  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  9064                           
  9065                           ; BSR set to: 0
  9066                           ;main.c: 1280: relay_pulse_timer[ 3 ] =
  9067                           ;main.c: 1281: Read_b_eep(0x43 + 24) * 256 +
  9068                           ;main.c: 1282: Read_b_eep(0x43 + 25);
  9069  000A9C  6A09               	clrf	?_Read_b_eep+1,c
  9070  000A9E  0E5C               	movlw	92
  9071  000AA0  6E08               	movwf	?_Read_b_eep,c
  9072  000AA2  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9073  000AA6  0100               	movlb	0	; () banked
  9074  000AA8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9075  000AAA  6A09               	clrf	?_Read_b_eep+1,c
  9076  000AAC  0E5B               	movlw	91
  9077  000AAE  6E08               	movwf	?_Read_b_eep,c
  9078  000AB0  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9079  000AB4  0100               	movlb	0	; () banked
  9080  000AB6  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9081  000AB8  DA06               	call	PL66	;call to abstracted procedure
  9082                           
  9083                           ;main.c: 1283: }
  9084  000ABA  D003               	goto	l10925
  9085  000ABC                     l10919:
  9086                           
  9087                           ; BSR set to: 0
  9088                           ;main.c: 1284: else {
  9089                           ;main.c: 1285: relay_pulse_flags &= 0b11110111;
  9090  000ABC  978A               	bcf	_relay_pulse_flags& (0+255),3,b
  9091                           
  9092                           ; BSR set to: 0
  9093                           ;main.c: 1286: LATCbits.LATC7 = 0;
  9094  000ABE  9E8B               	bcf	3979,7,c	;volatile
  9095                           
  9096                           ; BSR set to: 0
  9097                           ;main.c: 1287: bOn = 0;
  9098  000AC0  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9099  000AC2                     l10925:
  9100                           
  9101                           ; BSR set to: 0
  9102                           ;main.c: 1288: }
  9103                           ;main.c: 1290: if ( val & 0x04 ) {
  9104  000AC2  B451               	btfsc	vscp_writeAppReg@val,2,c
  9105  000AC4  D68B               	goto	l10755
  9106  000AC6  D189               	goto	l11087
  9107  000AC8                     l10929:
  9108                           
  9109                           ; BSR set to: 0
  9110                           ;main.c: 1299: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9111  000AC8  ECEA  F01E         	call	_Busy_eep	;wreg free
  9112  000ACC  D9BF               	call	PL4	;call to abstracted procedure
  9113  000ACE  ECCF  F01C         	call	_Write_b_eep	;wreg free
  9114                           
  9115                           ;main.c: 1300: rv = Read_b_eep(0x43 + reg);
  9116  000AD2  D9C6               	call	PL6	;call to abstracted procedure
  9117  000AD4  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9118  000AD8  0100               	movlb	0	; () banked
  9119  000ADA  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9120                           
  9121                           ; BSR set to: 0
  9122                           ;main.c: 1302: if ( val & 0x01 ) {
  9123  000ADC  A051               	btfss	vscp_writeAppReg@val,0,c
  9124  000ADE  D013               	goto	l10943
  9125                           
  9126                           ; BSR set to: 0
  9127                           ;main.c: 1304: LATCbits.LATC6 = 0;
  9128  000AE0  9C8B               	bcf	3979,6,c	;volatile
  9129                           
  9130                           ;main.c: 1305: bOn = 0;
  9131  000AE2  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9132                           
  9133                           ; BSR set to: 0
  9134                           ;main.c: 1307: relay_pulse_flags |= 0x10;
  9135  000AE4  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  9136                           
  9137                           ; BSR set to: 0
  9138                           ;main.c: 1308: relay_pulse_timer[ 4 ] =
  9139                           ;main.c: 1309: Read_b_eep(0x43 + 26) * 256 +
  9140                           ;main.c: 1310: Read_b_eep(0x43 + 27);
  9141  000AE6  6A09               	clrf	?_Read_b_eep+1,c
  9142  000AE8  0E5E               	movlw	94
  9143  000AEA  6E08               	movwf	?_Read_b_eep,c
  9144  000AEC  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9145  000AF0  0100               	movlb	0	; () banked
  9146  000AF2  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9147  000AF4  6A09               	clrf	?_Read_b_eep+1,c
  9148  000AF6  0E5D               	movlw	93
  9149  000AF8  6E08               	movwf	?_Read_b_eep,c
  9150  000AFA  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9151  000AFE  0100               	movlb	0	; () banked
  9152  000B00  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9153  000B02  D9D1               	call	PL62	;call to abstracted procedure
  9154                           
  9155                           ;main.c: 1311: }
  9156  000B04  D003               	goto	l10949
  9157  000B06                     l10943:
  9158                           
  9159                           ; BSR set to: 0
  9160                           ;main.c: 1312: else {
  9161                           ;main.c: 1313: relay_pulse_flags &= 0b11101111;
  9162  000B06  998A               	bcf	_relay_pulse_flags& (0+255),4,b
  9163                           
  9164                           ; BSR set to: 0
  9165                           ;main.c: 1314: LATCbits.LATC6 = 0;
  9166  000B08  9C8B               	bcf	3979,6,c	;volatile
  9167                           
  9168                           ; BSR set to: 0
  9169                           ;main.c: 1315: bOn = 0;
  9170  000B0A  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9171  000B0C                     l10949:
  9172                           
  9173                           ; BSR set to: 0
  9174                           ;main.c: 1316: }
  9175                           ;main.c: 1318: if ( val & 0x04 ) {
  9176  000B0C  B451               	btfsc	vscp_writeAppReg@val,2,c
  9177  000B0E  D698               	goto	l10775
  9178  000B10  D164               	goto	l11087
  9179  000B12                     l10953:
  9180                           
  9181                           ; BSR set to: 0
  9182                           ;main.c: 1327: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9183  000B12  ECEA  F01E         	call	_Busy_eep	;wreg free
  9184  000B16  D99A               	call	PL4	;call to abstracted procedure
  9185  000B18  ECCF  F01C         	call	_Write_b_eep	;wreg free
  9186                           
  9187                           ;main.c: 1328: rv = Read_b_eep(0x43 + reg);
  9188  000B1C  D9A1               	call	PL6	;call to abstracted procedure
  9189  000B1E  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9190  000B22  0100               	movlb	0	; () banked
  9191  000B24  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9192                           
  9193                           ; BSR set to: 0
  9194                           ;main.c: 1330: if ( val & 0x01 ) {
  9195  000B26  A051               	btfss	vscp_writeAppReg@val,0,c
  9196  000B28  D013               	goto	l10967
  9197                           
  9198                           ; BSR set to: 0
  9199                           ;main.c: 1332: LATCbits.LATC5 = 0;
  9200  000B2A  9A8B               	bcf	3979,5,c	;volatile
  9201                           
  9202                           ;main.c: 1333: bOn = 0;
  9203  000B2C  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9204                           
  9205                           ; BSR set to: 0
  9206                           ;main.c: 1335: relay_pulse_flags |= 0x20;
  9207  000B2E  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  9208                           
  9209                           ; BSR set to: 0
  9210                           ;main.c: 1336: relay_pulse_timer[ 5 ] =
  9211                           ;main.c: 1337: Read_b_eep(0x43 + 28) * 256 +
  9212                           ;main.c: 1338: Read_b_eep(0x43 + 29);
  9213  000B30  6A09               	clrf	?_Read_b_eep+1,c
  9214  000B32  0E60               	movlw	96
  9215  000B34  6E08               	movwf	?_Read_b_eep,c
  9216  000B36  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9217  000B3A  0100               	movlb	0	; () banked
  9218  000B3C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9219  000B3E  6A09               	clrf	?_Read_b_eep+1,c
  9220  000B40  0E5F               	movlw	95
  9221  000B42  6E08               	movwf	?_Read_b_eep,c
  9222  000B44  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9223  000B48  0100               	movlb	0	; () banked
  9224  000B4A  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9225  000B4C  D9A4               	call	PL60	;call to abstracted procedure
  9226                           
  9227                           ;main.c: 1339: }
  9228  000B4E  D003               	goto	l10973
  9229  000B50                     l10967:
  9230                           
  9231                           ; BSR set to: 0
  9232                           ;main.c: 1340: else {
  9233                           ;main.c: 1341: relay_pulse_flags &= 0b11011111;
  9234  000B50  9B8A               	bcf	_relay_pulse_flags& (0+255),5,b
  9235                           
  9236                           ; BSR set to: 0
  9237                           ;main.c: 1342: LATCbits.LATC5 = 0;
  9238  000B52  9A8B               	bcf	3979,5,c	;volatile
  9239                           
  9240                           ; BSR set to: 0
  9241                           ;main.c: 1343: bOn = 0;
  9242  000B54  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9243  000B56                     l10973:
  9244                           
  9245                           ; BSR set to: 0
  9246                           ;main.c: 1344: }
  9247                           ;main.c: 1346: if ( val & 0x04 ) {
  9248  000B56  B451               	btfsc	vscp_writeAppReg@val,2,c
  9249  000B58  D6A5               	goto	l10795
  9250  000B5A  D13F               	goto	l11087
  9251  000B5C                     l10977:
  9252                           
  9253                           ; BSR set to: 0
  9254                           ;main.c: 1355: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9255  000B5C  ECEA  F01E         	call	_Busy_eep	;wreg free
  9256  000B60  D975               	call	PL4	;call to abstracted procedure
  9257  000B62  ECCF  F01C         	call	_Write_b_eep	;wreg free
  9258                           
  9259                           ;main.c: 1356: rv = Read_b_eep(0x43 + reg);
  9260  000B66  D97C               	call	PL6	;call to abstracted procedure
  9261  000B68  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9262  000B6C  0100               	movlb	0	; () banked
  9263  000B6E  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9264                           
  9265                           ; BSR set to: 0
  9266                           ;main.c: 1358: if ( val & 0x01 ) {
  9267  000B70  A051               	btfss	vscp_writeAppReg@val,0,c
  9268  000B72  D013               	goto	l10991
  9269                           
  9270                           ; BSR set to: 0
  9271                           ;main.c: 1360: LATCbits.LATC4 = 0;
  9272  000B74  988B               	bcf	3979,4,c	;volatile
  9273                           
  9274                           ;main.c: 1361: bOn = 0;
  9275  000B76  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9276                           
  9277                           ; BSR set to: 0
  9278                           ;main.c: 1363: relay_pulse_flags |= 0x40;
  9279  000B78  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  9280                           
  9281                           ; BSR set to: 0
  9282                           ;main.c: 1364: relay_pulse_timer[ 6 ] =
  9283                           ;main.c: 1365: Read_b_eep(0x43 + 30) * 256 +
  9284                           ;main.c: 1366: Read_b_eep(0x43 + 31);
  9285  000B7A  6A09               	clrf	?_Read_b_eep+1,c
  9286  000B7C  0E62               	movlw	98
  9287  000B7E  6E08               	movwf	?_Read_b_eep,c
  9288  000B80  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9289  000B84  0100               	movlb	0	; () banked
  9290  000B86  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9291  000B88  6A09               	clrf	?_Read_b_eep+1,c
  9292  000B8A  0E61               	movlw	97
  9293  000B8C  6E08               	movwf	?_Read_b_eep,c
  9294  000B8E  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9295  000B92  0100               	movlb	0	; () banked
  9296  000B94  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9297  000B96  D99F               	call	PL68	;call to abstracted procedure
  9298                           
  9299                           ;main.c: 1367: }
  9300  000B98  D003               	goto	l10997
  9301  000B9A                     l10991:
  9302                           
  9303                           ; BSR set to: 0
  9304                           ;main.c: 1368: else {
  9305                           ;main.c: 1369: relay_pulse_flags &= 0b10111111;
  9306  000B9A  9D8A               	bcf	_relay_pulse_flags& (0+255),6,b
  9307                           
  9308                           ; BSR set to: 0
  9309                           ;main.c: 1370: LATCbits.LATC7 = 0;
  9310  000B9C  9E8B               	bcf	3979,7,c	;volatile
  9311                           
  9312                           ; BSR set to: 0
  9313                           ;main.c: 1371: bOn = 0;
  9314  000B9E  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9315  000BA0                     l10997:
  9316                           
  9317                           ; BSR set to: 0
  9318                           ;main.c: 1372: }
  9319                           ;main.c: 1374: if ( val & 0x04 ) {
  9320  000BA0  B451               	btfsc	vscp_writeAppReg@val,2,c
  9321  000BA2  D6B2               	goto	l10815
  9322  000BA4  D11A               	goto	l11087
  9323  000BA6                     l11003:
  9324                           
  9325                           ; BSR set to: 0
  9326  000BA6  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9327                           
  9328                           ; Switch size 1, requested type "space"
  9329                           ; Number of cases is 7, Range of values is 10 to 16
  9330                           ; switch strategies available:
  9331                           ; Name         Instructions Cycles
  9332                           ; simple_byte           22    12 (average)
  9333                           ;	Chosen strategy is simple_byte
  9334  000BA8  0A0A               	xorlw	10	; case 10
  9335  000BAA  E101 D6E7          	bz	l10833
  9336  000BAE  0A01               	xorlw	1	; case 11
  9337  000BB0  E101 D707          	bz	l10857
  9338  000BB4  0A07               	xorlw	7	; case 12
  9339  000BB6  E101 D73D          	bz	l10881
  9340  000BBA  0A01               	xorlw	1	; case 13
  9341  000BBC  E101 D75F          	bz	l10905
  9342  000BC0  0A03               	xorlw	3	; case 14
  9343  000BC2  E082               	bz	l10929
  9344  000BC4  0A01               	xorlw	1	; case 15
  9345  000BC6  E0A5               	bz	l10953
  9346  000BC8  0A1F               	xorlw	31	; case 16
  9347  000BCA  E0C8               	bz	l10977
  9348  000BCC  D106               	goto	l11087
  9349  000BCE                     l11005:
  9350                           
  9351                           ; BSR set to: 0
  9352                           ;main.c: 1385: else if ( (reg >= 18 ) &&
  9353                           ;main.c: 1386: (reg <= 33 ) ) {
  9354  000BCE  0E11               	movlw	17
  9355  000BD0  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9356  000BD2  D0A4               	goto	l11035
  9357                           
  9358                           ; BSR set to: 0
  9359  000BD4  0E22               	movlw	34
  9360  000BD6  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9361  000BD8  D0A1               	goto	l11035
  9362                           
  9363                           ; BSR set to: 0
  9364                           ;main.c: 1389: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9365  000BDA  ECEA  F01E         	call	_Busy_eep	;wreg free
  9366  000BDE  D936               	call	PL4	;call to abstracted procedure
  9367  000BE0  ECCF  F01C         	call	_Write_b_eep	;wreg free
  9368                           
  9369                           ;main.c: 1390: rv = Read_b_eep(0x43 + reg);
  9370  000BE4  D93D               	call	PL6	;call to abstracted procedure
  9371  000BE6  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9372  000BEA  0100               	movlb	0	; () banked
  9373  000BEC  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9374                           
  9375                           ;main.c: 1394: switch ( reg ) {
  9376  000BEE  D083               	goto	l11033
  9377  000BF0                     l11015:
  9378                           
  9379                           ; BSR set to: 0
  9380                           ;main.c: 1397: relay_pulse_timer[ 0 ] =
  9381                           ;main.c: 1398: Read_b_eep(0x43 + 18) * 256 +
  9382                           ;main.c: 1399: Read_b_eep(0x43 + 19);
  9383  000BF0  6A09               	clrf	?_Read_b_eep+1,c
  9384  000BF2  0E56               	movlw	86
  9385  000BF4  6E08               	movwf	?_Read_b_eep,c
  9386  000BF6  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9387  000BFA  0100               	movlb	0	; () banked
  9388  000BFC  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9389  000BFE  6A09               	clrf	?_Read_b_eep+1,c
  9390  000C00  0E55               	movlw	85
  9391  000C02  6E08               	movwf	?_Read_b_eep,c
  9392  000C04  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9393  000C08  D933               	call	PL38	;call to abstracted procedure
  9394                           
  9395                           ;main.c: 1400: break;
  9396  000C0A  D0E7               	goto	l11087
  9397  000C0C                     l11017:
  9398                           
  9399                           ; BSR set to: 0
  9400                           ;main.c: 1403: relay_pulse_timer[ 1 ] =
  9401                           ;main.c: 1404: Read_b_eep(0x43 + 20) * 256 +
  9402                           ;main.c: 1405: Read_b_eep(0x43 + 21);
  9403  000C0C  6A09               	clrf	?_Read_b_eep+1,c
  9404  000C0E  0E58               	movlw	88
  9405  000C10  6E08               	movwf	?_Read_b_eep,c
  9406  000C12  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9407  000C16  0100               	movlb	0	; () banked
  9408  000C18  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9409  000C1A  6A09               	clrf	?_Read_b_eep+1,c
  9410  000C1C  0E57               	movlw	87
  9411  000C1E  6E08               	movwf	?_Read_b_eep,c
  9412  000C20  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9413  000C24  0100               	movlb	0	; () banked
  9414  000C26  D92E               	call	PL56	;call to abstracted procedure
  9415                           
  9416                           ;main.c: 1406: break;
  9417  000C28  D0D8               	goto	l11087
  9418  000C2A                     l11019:
  9419                           
  9420                           ; BSR set to: 0
  9421                           ;main.c: 1409: relay_pulse_timer[ 2 ] =
  9422                           ;main.c: 1410: Read_b_eep(0x43 + 22) * 256 +
  9423                           ;main.c: 1411: Read_b_eep(0x43 + 23);
  9424  000C2A  6A09               	clrf	?_Read_b_eep+1,c
  9425  000C2C  0E5A               	movlw	90
  9426  000C2E  6E08               	movwf	?_Read_b_eep,c
  9427  000C30  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9428  000C34  0100               	movlb	0	; () banked
  9429  000C36  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9430  000C38  6A09               	clrf	?_Read_b_eep+1,c
  9431  000C3A  0E59               	movlw	89
  9432  000C3C  6E08               	movwf	?_Read_b_eep,c
  9433  000C3E  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9434  000C42  0100               	movlb	0	; () banked
  9435  000C44  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9436  000C46  D937               	call	PL64	;call to abstracted procedure
  9437                           
  9438                           ;main.c: 1412: break;
  9439  000C48  D0C8               	goto	l11087
  9440  000C4A                     l11021:
  9441                           
  9442                           ; BSR set to: 0
  9443                           ;main.c: 1415: relay_pulse_timer[ 3 ] =
  9444                           ;main.c: 1416: Read_b_eep(0x43 + 24) * 256 +
  9445                           ;main.c: 1417: Read_b_eep(0x43 + 25);
  9446  000C4A  6A09               	clrf	?_Read_b_eep+1,c
  9447  000C4C  0E5C               	movlw	92
  9448  000C4E  6E08               	movwf	?_Read_b_eep,c
  9449  000C50  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9450  000C54  0100               	movlb	0	; () banked
  9451  000C56  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9452  000C58  6A09               	clrf	?_Read_b_eep+1,c
  9453  000C5A  0E5B               	movlw	91
  9454  000C5C  6E08               	movwf	?_Read_b_eep,c
  9455  000C5E  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9456  000C62  0100               	movlb	0	; () banked
  9457  000C64  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9458  000C66  D92F               	call	PL66	;call to abstracted procedure
  9459                           
  9460                           ;main.c: 1418: break;
  9461  000C68  D0B8               	goto	l11087
  9462  000C6A                     l11023:
  9463                           
  9464                           ; BSR set to: 0
  9465                           ;main.c: 1421: relay_pulse_timer[ 4 ] =
  9466                           ;main.c: 1422: Read_b_eep(0x43 + 26) * 256 +
  9467                           ;main.c: 1423: Read_b_eep(0x43 + 27);
  9468  000C6A  6A09               	clrf	?_Read_b_eep+1,c
  9469  000C6C  0E5E               	movlw	94
  9470  000C6E  6E08               	movwf	?_Read_b_eep,c
  9471  000C70  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9472  000C74  0100               	movlb	0	; () banked
  9473  000C76  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9474  000C78  6A09               	clrf	?_Read_b_eep+1,c
  9475  000C7A  0E5D               	movlw	93
  9476  000C7C  6E08               	movwf	?_Read_b_eep,c
  9477  000C7E  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9478  000C82  0100               	movlb	0	; () banked
  9479  000C84  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9480  000C86  D90F               	call	PL62	;call to abstracted procedure
  9481                           
  9482                           ;main.c: 1424: break;
  9483  000C88  D0A8               	goto	l11087
  9484  000C8A                     l11025:
  9485                           
  9486                           ; BSR set to: 0
  9487                           ;main.c: 1427: relay_pulse_timer[ 5 ] =
  9488                           ;main.c: 1428: Read_b_eep(0x43 + 28) * 256 +
  9489                           ;main.c: 1429: Read_b_eep(0x43 + 29);
  9490  000C8A  6A09               	clrf	?_Read_b_eep+1,c
  9491  000C8C  0E60               	movlw	96
  9492  000C8E  6E08               	movwf	?_Read_b_eep,c
  9493  000C90  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9494  000C94  0100               	movlb	0	; () banked
  9495  000C96  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9496  000C98  6A09               	clrf	?_Read_b_eep+1,c
  9497  000C9A  0E5F               	movlw	95
  9498  000C9C  6E08               	movwf	?_Read_b_eep,c
  9499  000C9E  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9500  000CA2  0100               	movlb	0	; () banked
  9501  000CA4  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9502  000CA6  D8F7               	call	PL60	;call to abstracted procedure
  9503                           
  9504                           ;main.c: 1430: break;
  9505  000CA8  D098               	goto	l11087
  9506  000CAA                     l11027:
  9507                           
  9508                           ; BSR set to: 0
  9509                           ;main.c: 1433: relay_pulse_timer[ 6 ] =
  9510                           ;main.c: 1434: Read_b_eep(0x43 + 30) * 256 +
  9511                           ;main.c: 1435: Read_b_eep(0x43 + 31);
  9512  000CAA  6A09               	clrf	?_Read_b_eep+1,c
  9513  000CAC  0E62               	movlw	98
  9514  000CAE  6E08               	movwf	?_Read_b_eep,c
  9515  000CB0  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9516  000CB4  0100               	movlb	0	; () banked
  9517  000CB6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9518  000CB8  6A09               	clrf	?_Read_b_eep+1,c
  9519  000CBA  0E61               	movlw	97
  9520  000CBC  6E08               	movwf	?_Read_b_eep,c
  9521  000CBE  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9522  000CC2  0100               	movlb	0	; () banked
  9523  000CC4  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9524  000CC6  D907               	call	PL68	;call to abstracted procedure
  9525                           
  9526                           ;main.c: 1436: break;
  9527  000CC8  D088               	goto	l11087
  9528  000CCA                     l11029:
  9529                           
  9530                           ; BSR set to: 0
  9531                           ;main.c: 1439: relay_pulse_timer[ 7 ] =
  9532                           ;main.c: 1440: Read_b_eep(0x43 + 32) * 256 +
  9533                           ;main.c: 1441: Read_b_eep(0x43 + 33);
  9534  000CCA  6A09               	clrf	?_Read_b_eep+1,c
  9535  000CCC  0E64               	movlw	100
  9536  000CCE  6E08               	movwf	?_Read_b_eep,c
  9537  000CD0  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9538  000CD4  0100               	movlb	0	; () banked
  9539  000CD6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9540  000CD8  6A09               	clrf	?_Read_b_eep+1,c
  9541  000CDA  0E63               	movlw	99
  9542  000CDC  6E08               	movwf	?_Read_b_eep,c
  9543  000CDE  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9544  000CE2  0100               	movlb	0	; () banked
  9545  000CE4  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9546  000CE6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9547  000CE8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9548  000CEA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9549  000CEC  6F7E               	movwf	(_relay_pulse_timer+14)& (0+255),b
  9550  000CEE  0E00               	movlw	0
  9551  000CF0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9552  000CF2  6F7F               	movwf	(_relay_pulse_timer+15)& (0+255),b
  9553                           
  9554                           ;main.c: 1442: break;
  9555  000CF4  D072               	goto	l11087
  9556  000CF6                     l11033:
  9557                           
  9558                           ; BSR set to: 0
  9559  000CF6  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9560                           
  9561                           ; Switch size 1, requested type "space"
  9562                           ; Number of cases is 8, Range of values is 19 to 33
  9563                           ; switch strategies available:
  9564                           ; Name         Instructions Cycles
  9565                           ; simple_byte           25    13 (average)
  9566                           ;	Chosen strategy is simple_byte
  9567  000CF8  0A13               	xorlw	19	; case 19
  9568  000CFA  E101 D779          	bz	l11015
  9569  000CFE  0A06               	xorlw	6	; case 21
  9570  000D00  E085               	bz	l11017
  9571  000D02  0A02               	xorlw	2	; case 23
  9572  000D04  E092               	bz	l11019
  9573  000D06  0A0E               	xorlw	14	; case 25
  9574  000D08  E0A0               	bz	l11021
  9575  000D0A  0A02               	xorlw	2	; case 27
  9576  000D0C  E0AE               	bz	l11023
  9577  000D0E  0A06               	xorlw	6	; case 29
  9578  000D10  E0BC               	bz	l11025
  9579  000D12  0A02               	xorlw	2	; case 31
  9580  000D14  E0CA               	bz	l11027
  9581  000D16  0A3E               	xorlw	62	; case 33
  9582  000D18  E0D8               	bz	l11029
  9583  000D1A  D05F               	goto	l11087
  9584  000D1C                     l11035:
  9585                           
  9586                           ; BSR set to: 0
  9587                           ;main.c: 1450: else if ( ( reg >= 34 ) &&
  9588                           ;main.c: 1451: ( reg <= 49 ) ) {
  9589  000D1C  0E21               	movlw	33
  9590  000D1E  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9591  000D20  D03D               	goto	l11065
  9592                           
  9593                           ; BSR set to: 0
  9594  000D22  0E32               	movlw	50
  9595  000D24  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9596  000D26  D03A               	goto	l11065
  9597                           
  9598                           ; BSR set to: 0
  9599                           ;main.c: 1454: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9600  000D28  ECEA  F01E         	call	_Busy_eep	;wreg free
  9601  000D2C  D88F               	call	PL4	;call to abstracted procedure
  9602  000D2E  ECCF  F01C         	call	_Write_b_eep	;wreg free
  9603                           
  9604                           ;main.c: 1455: rv = Read_b_eep(0x43 + reg);
  9605  000D32  D896               	call	PL6	;call to abstracted procedure
  9606  000D34  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9607  000D38  0100               	movlb	0	; () banked
  9608  000D3A  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9609                           
  9610                           ;main.c: 1457: switch ( reg ) {
  9611  000D3C  D016               	goto	l11063
  9612  000D3E                     l11059:
  9613                           
  9614                           ; BSR set to: 0
  9615                           ;main.c: 1502: relay_protection_timer[ 7 ] =
  9616                           ;main.c: 1503: Read_b_eep(0x43 + 48) * 256 +
  9617                           ;main.c: 1504: Read_b_eep(0x43 + 49);
  9618  000D3E  6A09               	clrf	?_Read_b_eep+1,c
  9619  000D40  0E74               	movlw	116
  9620  000D42  6E08               	movwf	?_Read_b_eep,c
  9621  000D44  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9622  000D48  0100               	movlb	0	; () banked
  9623  000D4A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9624  000D4C  6A09               	clrf	?_Read_b_eep+1,c
  9625  000D4E  0E73               	movlw	115
  9626  000D50  6E08               	movwf	?_Read_b_eep,c
  9627  000D52  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9628  000D56  0100               	movlb	0	; () banked
  9629  000D58  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9630  000D5A  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9631  000D5C  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9632  000D5E  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9633  000D60  6F6E               	movwf	(_relay_protection_timer+14)& (0+255),b
  9634  000D62  0E00               	movlw	0
  9635  000D64  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9636  000D66  6F6F               	movwf	(_relay_protection_timer+15)& (0+255),b
  9637                           
  9638                           ;main.c: 1505: break;
  9639  000D68  D038               	goto	l11087
  9640  000D6A                     l11063:
  9641                           
  9642                           ; BSR set to: 0
  9643  000D6A  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9644                           
  9645                           ; Switch size 1, requested type "space"
  9646                           ; Number of cases is 8, Range of values is 35 to 49
  9647                           ; switch strategies available:
  9648                           ; Name         Instructions Cycles
  9649                           ; simple_byte           25    13 (average)
  9650                           ;	Chosen strategy is simple_byte
  9651  000D6C  0A23               	xorlw	35	; case 35
  9652  000D6E  E101 D4A7          	bz	l10695
  9653  000D72  0A06               	xorlw	6	; case 37
  9654  000D74  E101 D4D7          	bz	l10715
  9655  000D78  0A02               	xorlw	2	; case 39
  9656  000D7A  E101 D4FD          	bz	l10735
  9657  000D7E  0A0E               	xorlw	14	; case 41
  9658  000D80  E101 D52C          	bz	l10755
  9659  000D84  0A02               	xorlw	2	; case 43
  9660  000D86  E101 D55B          	bz	l10775
  9661  000D8A  0A06               	xorlw	6	; case 45
  9662  000D8C  E101 D58A          	bz	l10795
  9663  000D90  0A02               	xorlw	2	; case 47
  9664  000D92  E101 D5B9          	bz	l10815
  9665  000D96  0A1E               	xorlw	30	; case 49
  9666  000D98  E0D2               	bz	l11059
  9667  000D9A  D01F               	goto	l11087
  9668  000D9C                     l11065:
  9669                           
  9670                           ; BSR set to: 0
  9671                           ;main.c: 1513: else if ( (reg >= 50 ) && (reg <= 65) ) {
  9672  000D9C  0E31               	movlw	49
  9673  000D9E  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9674  000DA0  D00E               	goto	l11075
  9675                           
  9676                           ; BSR set to: 0
  9677  000DA2  0E42               	movlw	66
  9678  000DA4  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9679  000DA6  D00B               	goto	l11075
  9680                           
  9681                           ; BSR set to: 0
  9682                           ;main.c: 1516: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9683  000DA8  ECEA  F01E         	call	_Busy_eep	;wreg free
  9684  000DAC  D84F               	call	PL4	;call to abstracted procedure
  9685  000DAE  ECCF  F01C         	call	_Write_b_eep	;wreg free
  9686  000DB2                     l11073:
  9687                           
  9688                           ;main.c: 1517: rv = Read_b_eep(0x43 + reg);
  9689  000DB2  D856               	call	PL6	;call to abstracted procedure
  9690  000DB4  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9691  000DB8                     L27:
  9692  000DB8  0100               	movlb	0	; () banked
  9693  000DBA  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9694                           
  9695                           ;main.c: 1519: }
  9696  000DBC  D00E               	goto	l11087
  9697  000DBE                     l11075:
  9698                           
  9699                           ; BSR set to: 0
  9700                           ;main.c: 1520: else if ( (reg >= 72) &&
  9701                           ;main.c: 1521: (reg < (72 + 7 * 8)) ) {
  9702  000DBE  0E47               	movlw	71
  9703  000DC0  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9704  000DC2  D00B               	goto	l11087
  9705                           
  9706                           ; BSR set to: 0
  9707  000DC4  0E80               	movlw	128
  9708  000DC6  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9709  000DC8  D008               	goto	l11087
  9710                           
  9711                           ; BSR set to: 0
  9712                           ;main.c: 1522: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9713  000DCA  ECEA  F01E         	call	_Busy_eep	;wreg free
  9714  000DCE  D83E               	call	PL4	;call to abstracted procedure
  9715  000DD0  ECCF  F01C         	call	_Write_b_eep	;wreg free
  9716                           
  9717                           ;main.c: 1523: calculateSetFilterMask();
  9718  000DD4  ECB1  F00C         	call	_calculateSetFilterMask	;wreg free
  9719  000DD8  D7EC               	goto	l11073
  9720  000DDA                     l11087:
  9721                           
  9722                           ; BSR set to: 0
  9723                           ;main.c: 1525: }
  9724                           ;main.c: 1531: if ( bInfoEvent ) {
  9725  000DDA  51CA               	movf	vscp_writeAppReg@bInfoEvent& (0+255),w,b
  9726  000DDC  E035               	bz	l11107
  9727                           
  9728                           ; BSR set to: 0
  9729                           ;main.c: 1533: unsigned char val;
  9730                           ;main.c: 1534: val = Read_b_eep(0x43 + 10 + (reg - 2));
  9731  000DDE  0E4B               	movlw	75
  9732  000DE0  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9733  000DE2  6E08               	movwf	?_Read_b_eep,c
  9734  000DE4  6A09               	clrf	?_Read_b_eep+1,c
  9735  000DE6  0E00               	movlw	0
  9736  000DE8  2209               	addwfc	?_Read_b_eep+1,f,c
  9737  000DEA  ECB6  F01E         	call	_Read_b_eep	;wreg free
  9738  000DEE  0100               	movlb	0	; () banked
  9739  000DF0  6FCB               	movwf	vscp_writeAppReg@val_682& (0+255),b
  9740                           
  9741                           ; BSR set to: 0
  9742                           ;main.c: 1537: if ( bOn ) {
  9743  000DF2  51CD               	movf	vscp_writeAppReg@bOn& (0+255),w,b
  9744  000DF4  E015               	bz	l404
  9745                           
  9746                           ; BSR set to: 0
  9747                           ;main.c: 1539: if ( val & 0x08 ) {
  9748  000DF6  A7CB               	btfss	vscp_writeAppReg@val_682& (0+255),3,b
  9749  000DF8  D008               	goto	l11097
  9750                           
  9751                           ; BSR set to: 0
  9752                           ;main.c: 1540: SendInformationEvent( reg - 2,
  9753                           ;main.c: 1541: 20,
  9754                           ;main.c: 1542: 3 );
  9755  000DFA  0E14               	movlw	20
  9756  000DFC  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9757  000DFE  0E03               	movlw	3
  9758  000E00  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9759  000E02  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9760  000E04  0FFE               	addlw	254
  9761  000E06  EC12  F01C         	call	_SendInformationEvent
  9762  000E0A                     l11097:
  9763                           
  9764                           ; BSR set to: 0
  9765                           ;main.c: 1543: }
  9766                           ;main.c: 1545: if ( val & 0x20 ) {
  9767  000E0A  ABCB               	btfss	vscp_writeAppReg@val_682& (0+255),5,b
  9768  000E0C  D01D               	goto	l11107
  9769                           
  9770                           ; BSR set to: 0
  9771                           ;main.c: 1546: SendInformationEvent( reg - 2,
  9772                           ;main.c: 1547: 20,
  9773                           ;main.c: 1548: 25 );
  9774  000E0E  0E14               	movlw	20
  9775  000E10  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9776  000E12  0E19               	movlw	25
  9777  000E14  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9778  000E16  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9779  000E18  0FFE               	addlw	254
  9780  000E1A  EC12  F01C         	call	_SendInformationEvent
  9781  000E1E  D014               	goto	l11107
  9782  000E20                     l404:
  9783                           
  9784                           ; BSR set to: 0
  9785                           ;main.c: 1552: else {
  9786                           ;main.c: 1554: if ( val & 0x10 ) {
  9787  000E20  A9CB               	btfss	vscp_writeAppReg@val_682& (0+255),4,b
  9788  000E22  D008               	goto	l11103
  9789                           
  9790                           ; BSR set to: 0
  9791                           ;main.c: 1555: SendInformationEvent( reg - 2,
  9792                           ;main.c: 1556: 20,
  9793                           ;main.c: 1557: 4 );
  9794  000E24  0E14               	movlw	20
  9795  000E26  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9796  000E28  0E04               	movlw	4
  9797  000E2A  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9798  000E2C  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9799  000E2E  0FFE               	addlw	254
  9800  000E30  EC12  F01C         	call	_SendInformationEvent
  9801  000E34                     l11103:
  9802                           
  9803                           ; BSR set to: 0
  9804                           ;main.c: 1558: }
  9805                           ;main.c: 1560: if ( val & 0x40 ) {
  9806  000E34  ADCB               	btfss	vscp_writeAppReg@val_682& (0+255),6,b
  9807  000E36  D008               	goto	l11107
  9808                           
  9809                           ; BSR set to: 0
  9810                           ;main.c: 1561: SendInformationEvent( reg - 2,
  9811                           ;main.c: 1562: 20,
  9812                           ;main.c: 1563: 24 );
  9813  000E38  0E14               	movlw	20
  9814  000E3A  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9815  000E3C  0E18               	movlw	24
  9816  000E3E  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9817  000E40  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9818  000E42  0FFE               	addlw	254
  9819  000E44  EC12  F01C         	call	_SendInformationEvent
  9820  000E48                     l11107:
  9821                           
  9822                           ; BSR set to: 0
  9823                           ;main.c: 1564: }
  9824                           ;main.c: 1565: }
  9825                           ;main.c: 1566: }
  9826                           ;main.c: 1568: return rv;
  9827  000E48  51CC               	movf	vscp_writeAppReg@rv& (0+255),w,b
  9828                           
  9829                           ; BSR set to: 0
  9830  000E4A  0012               	return	
  9831  000E4C                     __end_of_vscp_writeAppReg:
  9832                           	opt stack 0
  9833  000E4C                     PL4:
  9834                           	opt stack 21
  9835  000E4C  0E43               	movlw	67
  9836  000E4E  0100               	movlb	0	; () banked
  9837  000E50  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9838  000E52  6E08               	movwf	?_Write_b_eep,c
  9839  000E54  6A09               	clrf	?_Write_b_eep+1,c
  9840  000E56  0E00               	movlw	0
  9841  000E58  2209               	addwfc	?_Write_b_eep+1,f,c
  9842  000E5A  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9843  000E5E  0C00               	retlw	0
  9844  000E60                     __end_ofPL4:
  9845                           	opt stack 0
  9846  000E60                     PL6:
  9847                           	opt stack 21
  9848  000E60  0E43               	movlw	67
  9849  000E62  0100               	movlb	0	; () banked
  9850  000E64  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9851  000E66  6E08               	movwf	?_Read_b_eep,c
  9852  000E68  6A09               	clrf	?_Read_b_eep+1,c
  9853  000E6A  0E00               	movlw	0
  9854  000E6C  2209               	addwfc	?_Read_b_eep+1,f,c
  9855  000E6E  0C00               	retlw	0
  9856  000E70                     __end_ofPL6:
  9857                           	opt stack 0
  9858  000E70                     PL38:
  9859                           	opt stack 21
  9860  000E70  0100               	movlb	0	; () banked
  9861  000E72  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9862  000E74  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9863  000E76  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9864  000E78  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9865  000E7A  6F70               	movwf	_relay_pulse_timer& (0+255),b
  9866  000E7C  0E00               	movlw	0
  9867  000E7E  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9868  000E80  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  9869  000E82  0012               	return	
  9870  000E84                     __end_ofPL38:
  9871                           	opt stack 0
  9872  000E84                     PL56:
  9873                           	opt stack 21
  9874  000E84  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9875  000E86  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9876  000E88  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9877  000E8A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9878  000E8C  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  9879  000E8E  0E00               	movlw	0
  9880  000E90  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9881  000E92  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  9882  000E94  0012               	return	
  9883  000E96                     __end_ofPL56:
  9884                           	opt stack 0
  9885  000E96                     PL60:
  9886                           	opt stack 21
  9887  000E96  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9888  000E98  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9889  000E9A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9890  000E9C  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9891  000E9E  0E00               	movlw	0
  9892  000EA0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9893  000EA2  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9894  000EA4  0012               	return	
  9895  000EA6                     __end_ofPL60:
  9896                           	opt stack 0
  9897  000EA6                     PL62:
  9898                           	opt stack 21
  9899  000EA6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9900  000EA8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9901  000EAA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9902  000EAC  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9903  000EAE  0E00               	movlw	0
  9904  000EB0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9905  000EB2  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9906  000EB4  0012               	return	
  9907  000EB6                     __end_ofPL62:
  9908                           	opt stack 0
  9909  000EB6                     PL64:
  9910                           	opt stack 21
  9911  000EB6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9912  000EB8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9913  000EBA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9914  000EBC  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  9915  000EBE  0E00               	movlw	0
  9916  000EC0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9917  000EC2  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  9918  000EC4  0012               	return	
  9919  000EC6                     __end_ofPL64:
  9920                           	opt stack 0
  9921  000EC6                     PL66:
  9922                           	opt stack 21
  9923  000EC6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9924  000EC8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9925  000ECA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9926  000ECC  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  9927  000ECE  0E00               	movlw	0
  9928  000ED0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9929  000ED2  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  9930  000ED4  0012               	return	
  9931  000ED6                     __end_ofPL66:
  9932                           	opt stack 0
  9933  000ED6                     PL68:
  9934                           	opt stack 21
  9935  000ED6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9936  000ED8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9937  000EDA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9938  000EDC  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9939  000EDE  0E00               	movlw	0
  9940  000EE0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9941  000EE2  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9942  000EE4  0012               	return	
  9943  000EE6                     __end_ofPL68:
  9944                           	opt stack 0
  9945                           tblptru	equ	0xFF8
  9946                           tblptrh	equ	0xFF7
  9947                           tblptrl	equ	0xFF6
  9948                           tablat	equ	0xFF5
  9949                           prodh	equ	0xFF4
  9950                           prodl	equ	0xFF3
  9951                           intcon	equ	0xFF2
  9952                           postinc0	equ	0xFEE
  9953                           wreg	equ	0xFE8
  9954                           indf1	equ	0xFE7
  9955                           fsr1h	equ	0xFE2
  9956                           fsr1l	equ	0xFE1
  9957                           indf2	equ	0xFDF
  9958                           postinc2	equ	0xFDE
  9959                           postdec2	equ	0xFDD
  9960                           plusw2	equ	0xFDB
  9961                           fsr2h	equ	0xFDA
  9962                           fsr2l	equ	0xFD9
  9963                           status	equ	0xFD8
  9964                           
  9965 ;; *************** function _SendInformationEvent *****************
  9966 ;; Defined at:
  9967 ;;		line 1598 in file "../main.c"
  9968 ;; Parameters:    Size  Location     Type
  9969 ;;  idx             1    wreg     unsigned char 
  9970 ;;  eventClass      1   20[BANK0 ] unsigned char 
  9971 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
  9972 ;; Auto vars:     Size  Location     Type
  9973 ;;  idx             1   79[COMRAM] unsigned char 
  9974 ;;  data            3   76[COMRAM] unsigned char [3]
  9975 ;; Return value:  Size  Location     Type
  9976 ;;		None               void
  9977 ;; Registers used:
  9978 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9979 ;; Tracked objects:
  9980 ;;		On entry : F/0
  9981 ;;		On exit  : F/0
  9982 ;;		Unchanged: 0/0
  9983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9984 ;;      Params:         0       2       0       0       0       0       0
  9985 ;;      Locals:         4       0       0       0       0       0       0
  9986 ;;      Temps:          2       0       0       0       0       0       0
  9987 ;;      Totals:         6       2       0       0       0       0       0
  9988 ;;Total ram usage:        8 bytes
  9989 ;; Hardware stack levels used:    1
  9990 ;; Hardware stack levels required when called:    6
  9991 ;; This function calls:
  9992 ;;		_Read_b_eep
  9993 ;;		_sendVSCPFrame
  9994 ;; This function is called by:
  9995 ;;		_doApplicationOneSecondWork
  9996 ;;		_vscp_writeAppReg
  9997 ;;		_doActionOn
  9998 ;;		_doActionOff
  9999 ;;		_doActionStatus
 10000 ;;		_doActionToggle
 10001 ;; This function uses a non-reentrant model
 10002 ;;
 10003                           
 10004                           	psect	text25
 10005  003824                     __ptext25:
 10006                           	opt stack 0
 10007  003824                     _SendInformationEvent:
 10008                           	opt stack 23
 10009                           
 10010                           ; BSR set to: 0
 10011                           ;incstack = 0
 10012                           ;incstack = 0
 10013                           ;SendInformationEvent@idx stored from wreg
 10014  003824  CFE8 F050          	movff	wreg,SendInformationEvent@idx
 10015                           
 10016                           ; BSR set to: 0
 10017                           ;main.c: 1599: uint8_t data[3];
 10018                           ;main.c: 1612: data[ 0 ] = idx;
 10019  003828  C050  F04D         	movff	SendInformationEvent@idx,SendInformationEvent@data
 10020                           
 10021                           ; BSR set to: 0
 10022                           ;main.c: 1613: data[ 1 ] = Read_b_eep(0x43 + 50 + 2*idx);
 10023  00382C  90D8               	bcf	status,0,c
 10024  00382E  3450               	rlcf	SendInformationEvent@idx,w,c
 10025  003830  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10026  003832  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10027  003834  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10028  003836  0E75               	movlw	117
 10029  003838  244B               	addwf	??_SendInformationEvent,w,c
 10030  00383A  6E08               	movwf	?_Read_b_eep,c
 10031  00383C  0E00               	movlw	0
 10032  00383E  204C               	addwfc	??_SendInformationEvent+1,w,c
 10033  003840  6E09               	movwf	?_Read_b_eep+1,c
 10034  003842  ECB6  F01E         	call	_Read_b_eep	;wreg free
 10035  003846  6E4E               	movwf	SendInformationEvent@data+1,c
 10036                           
 10037                           ;main.c: 1614: data[ 2 ] = Read_b_eep(0x43 + 51 + 2*idx);
 10038  003848  90D8               	bcf	status,0,c
 10039  00384A  3450               	rlcf	SendInformationEvent@idx,w,c
 10040  00384C  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10041  00384E  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10042  003850  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10043  003852  0E76               	movlw	118
 10044  003854  244B               	addwf	??_SendInformationEvent,w,c
 10045  003856  6E08               	movwf	?_Read_b_eep,c
 10046  003858  0E00               	movlw	0
 10047  00385A  204C               	addwfc	??_SendInformationEvent+1,w,c
 10048  00385C  6E09               	movwf	?_Read_b_eep+1,c
 10049  00385E  ECB6  F01E         	call	_Read_b_eep	;wreg free
 10050  003862  6E4F               	movwf	SendInformationEvent@data+2,c
 10051                           
 10052                           ;main.c: 1615: sendVSCPFrame( eventClass,
 10053                           ;main.c: 1616: eventTypeId,
 10054                           ;main.c: 1617: vscp_nickname,
 10055                           ;main.c: 1618: 0x03,
 10056                           ;main.c: 1619: 3,
 10057                           ;main.c: 1620: data );
 10058  003864  0100               	movlb	0	; () banked
 10059  003866  C0C5  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
 10060  00386A  6A40               	clrf	?_sendVSCPFrame+1,c
 10061  00386C  C0C6  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
 10062  003870  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 10063  003874  0E03               	movlw	3
 10064  003876  6E43               	movwf	?_sendVSCPFrame+4,c
 10065  003878  6E44               	movwf	?_sendVSCPFrame+5,c
 10066  00387A  0E4D               	movlw	low SendInformationEvent@data
 10067  00387C  6E45               	movwf	?_sendVSCPFrame+6,c
 10068  00387E  0E00               	movlw	high SendInformationEvent@data
 10069  003880  6E46               	movwf	?_sendVSCPFrame+7,c
 10070  003882  0E0F               	movlw	15
 10071  003884  6E46               	movwf	?_sendVSCPFrame+7,c
 10072  003886  0E5F               	movlw	__accesstop+-1
 10073  003888  6445               	cpfsgt	?_sendVSCPFrame+6,c
 10074  00388A  6A46               	clrf	?_sendVSCPFrame+7,c
 10075  00388C  EF4B  F01A         	goto	_sendVSCPFrame	;wreg free
 10076  003890                     __end_of_SendInformationEvent:
 10077                           	opt stack 0
 10078                           tblptru	equ	0xFF8
 10079                           tblptrh	equ	0xFF7
 10080                           tblptrl	equ	0xFF6
 10081                           tablat	equ	0xFF5
 10082                           prodh	equ	0xFF4
 10083                           prodl	equ	0xFF3
 10084                           intcon	equ	0xFF2
 10085                           postinc0	equ	0xFEE
 10086                           wreg	equ	0xFE8
 10087                           indf1	equ	0xFE7
 10088                           fsr1h	equ	0xFE2
 10089                           fsr1l	equ	0xFE1
 10090                           indf2	equ	0xFDF
 10091                           postinc2	equ	0xFDE
 10092                           postdec2	equ	0xFDD
 10093                           plusw2	equ	0xFDB
 10094                           fsr2h	equ	0xFDA
 10095                           fsr2l	equ	0xFD9
 10096                           status	equ	0xFD8
 10097                           
 10098 ;; *************** function _calculateSetFilterMask *****************
 10099 ;; Defined at:
 10100 ;;		line 2681 in file "../main.c"
 10101 ;; Parameters:    Size  Location     Type
 10102 ;;		None
 10103 ;; Auto vars:     Size  Location     Type
 10104 ;;  rowfilter       4   61[COMRAM] unsigned long 
 10105 ;;  filter          4   57[COMRAM] unsigned long 
 10106 ;;  mask            4   53[COMRAM] unsigned long 
 10107 ;;  rowmask         4   48[COMRAM] unsigned long 
 10108 ;;  i               1   66[COMRAM] unsigned char 
 10109 ;;  j               1   65[COMRAM] unsigned char 
 10110 ;;  lastOID         1   52[COMRAM] unsigned char 
 10111 ;; Return value:  Size  Location     Type
 10112 ;;		None               void
 10113 ;; Registers used:
 10114 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10115 ;; Tracked objects:
 10116 ;;		On entry : 0/0
 10117 ;;		On exit  : 0/0
 10118 ;;		Unchanged: 0/0
 10119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10120 ;;      Params:         0       0       0       0       0       0       0
 10121 ;;      Locals:        19       0       0       0       0       0       0
 10122 ;;      Temps:         31       0       0       0       0       0       0
 10123 ;;      Totals:        50       0       0       0       0       0       0
 10124 ;;Total ram usage:       50 bytes
 10125 ;; Hardware stack levels used:    1
 10126 ;; Hardware stack levels required when called:    3
 10127 ;; This function calls:
 10128 ;;		_Read_b_eep
 10129 ;;		_ECANSetOperationMode
 10130 ;;		__CANIDToRegs
 10131 ;; This function is called by:
 10132 ;;		_init_app_eeprom
 10133 ;;		_vscp_writeAppReg
 10134 ;; This function uses a non-reentrant model
 10135 ;;
 10136                           
 10137                           	psect	text26
 10138  001962                     __ptext26:
 10139                           	opt stack 0
 10140  001962                     _calculateSetFilterMask:
 10141                           	opt stack 23
 10142                           
 10143                           ;main.c: 2682: uint8_t i,j;
 10144                           ;main.c: 2683: uint8_t lastOID;
 10145                           ;main.c: 2684: uint32_t rowmask;
 10146                           ;main.c: 2685: uint32_t rowfilter;
 10147                           ;main.c: 2688: uint32_t mask = 0xffffffff;
 10148                           
 10149                           ; BSR set to: 0
 10150                           ;incstack = 0
 10151                           ;incstack = 0
 10152  001962  6836               	setf	calculateSetFilterMask@mask,c
 10153  001964  6837               	setf	calculateSetFilterMask@mask+1,c
 10154  001966  6838               	setf	calculateSetFilterMask@mask+2,c
 10155  001968  6839               	setf	calculateSetFilterMask@mask+3,c
 10156                           
 10157                           ;main.c: 2689: uint32_t filter = 0;
 10158  00196A  6A3A               	clrf	calculateSetFilterMask@filter,c
 10159  00196C  6A3B               	clrf	calculateSetFilterMask@filter+1,c
 10160  00196E  6A3C               	clrf	calculateSetFilterMask@filter+2,c
 10161  001970  6A3D               	clrf	calculateSetFilterMask@filter+3,c
 10162                           
 10163                           ;main.c: 2692: for ( i=0; i < 7; i++ ) {
 10164  001972  6A43               	clrf	calculateSetFilterMask@i,c
 10165  001974                     l8651:
 10166                           
 10167                           ;main.c: 2695: if ( Read_b_eep(0x43 + 8*i + 1) & 0x80 ) {
 10168  001974  5043               	movf	calculateSetFilterMask@i,w,c
 10169  001976  D972               	call	PL10	;call to abstracted procedure
 10170  001978  0E44               	movlw	68
 10171  00197A  2412               	addwf	??_calculateSetFilterMask,w,c
 10172  00197C  6E08               	movwf	?_Read_b_eep,c
 10173  00197E  0E00               	movlw	0
 10174  001980  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10175  001982  6E09               	movwf	?_Read_b_eep+1,c
 10176  001984  ECB6  F01E         	call	_Read_b_eep	;wreg free
 10177  001988  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 10178  00198A  AE14               	btfss	??_calculateSetFilterMask+2,7,c
 10179  00198C  D11A               	goto	l8695
 10180                           
 10181                           ;main.c: 2704: rowmask =
 10182                           ;main.c: 2706: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 2 ) << 23 ) |
 10183                           ;main.c: 2708: ( (uint32_t)Read_b_eep(0x43 + 8*i + 2) << 16 ) |
 10184                           ;main.c: 2710: ( (uint32_t)Read_b_eep(0x43 + 8*i + 4) << 8 ) |
 10185                           ;main.c: 2712: 0xff;
 10186  00198E  5043               	movf	calculateSetFilterMask@i,w,c
 10187  001990  D965               	call	PL10	;call to abstracted procedure
 10188  001992  0E47               	movlw	71
 10189  001994  2412               	addwf	??_calculateSetFilterMask,w,c
 10190  001996  6E08               	movwf	?_Read_b_eep,c
 10191  001998  0E00               	movlw	0
 10192  00199A  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10193  00199C  6E09               	movwf	?_Read_b_eep+1,c
 10194  00199E  ECB6  F01E         	call	_Read_b_eep	;wreg free
 10195  0019A2  D968               	call	PL12	;call to abstracted procedure
 10196  0019A4  0E45               	movlw	69
 10197  0019A6  2419               	addwf	??_calculateSetFilterMask+7,w,c
 10198  0019A8  6E08               	movwf	?_Read_b_eep,c
 10199  0019AA  0E00               	movlw	0
 10200  0019AC  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 10201  0019AE  6E09               	movwf	?_Read_b_eep+1,c
 10202  0019B0  ECB6  F01E         	call	_Read_b_eep	;wreg free
 10203  0019B4  D934               	call	PL8	;call to abstracted procedure
 10204  0019B6  ECB6  F01E         	call	_Read_b_eep	;wreg free
 10205  0019BA  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 10206  0019BC  0E02               	movlw	2
 10207  0019BE  1622               	andwf	??_calculateSetFilterMask+16,f,c
 10208  0019C0  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 10209  0019C4  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 10210  0019C6  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 10211  0019C8  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 10212  0019CA  0E17               	movlw	23
 10213  0019CC                     u9355:
 10214  0019CC  90D8               	bcf	status,0,c
 10215  0019CE  3623               	rlcf	??_calculateSetFilterMask+17,f,c
 10216  0019D0  3624               	rlcf	??_calculateSetFilterMask+18,f,c
 10217  0019D2  3625               	rlcf	??_calculateSetFilterMask+19,f,c
 10218  0019D4  3626               	rlcf	??_calculateSetFilterMask+20,f,c
 10219  0019D6  2EE8               	decfsz	wreg,f,c
 10220  0019D8  D7F9               	goto	u9355
 10221  0019DA  501C               	movf	??_calculateSetFilterMask+10,w,c
 10222  0019DC  D965               	call	PL14	;call to abstracted procedure
 10223  0019DE  0EFF               	movlw	255
 10224  0019E0  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 10225  0019E2  6E31               	movwf	calculateSetFilterMask@rowmask,c
 10226  0019E4  502C               	movf	??_calculateSetFilterMask+26,w,c
 10227  0019E6  6E32               	movwf	calculateSetFilterMask@rowmask+1,c
 10228  0019E8  502D               	movf	??_calculateSetFilterMask+27,w,c
 10229  0019EA  6E33               	movwf	calculateSetFilterMask@rowmask+2,c
 10230  0019EC  502E               	movf	??_calculateSetFilterMask+28,w,c
 10231  0019EE  6E34               	movwf	calculateSetFilterMask@rowmask+3,c
 10232                           
 10233                           ;main.c: 2713: ;
 10234                           ;main.c: 2718: rowfilter =
 10235                           ;main.c: 2720: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 1 ) << 24 ) |
 10236                           ;main.c: 2722: ( (uint32_t)Read_b_eep(0x43 + 8*i + 3) << 16 ) |
 10237                           ;main.c: 2724: ( (uint32_t)Read_b_eep(0x43 + 8*i + 5) << 8 ) |
 10238                           ;main.c: 2727: Read_b_eep(0x43 + 8*i);
 10239  0019F0  5043               	movf	calculateSetFilterMask@i,w,c
 10240  0019F2  D934               	call	PL10	;call to abstracted procedure
 10241  0019F4  0E48               	movlw	72
 10242  0019F6  2412               	addwf	??_calculateSetFilterMask,w,c
 10243  0019F8  6E08               	movwf	?_Read_b_eep,c
 10244  0019FA  0E00               	movlw	0
 10245  0019FC  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10246  0019FE  6E09               	movwf	?_Read_b_eep+1,c
 10247  001A00  ECB6  F01E         	call	_Read_b_eep	;wreg free
 10248  001A04  D937               	call	PL12	;call to abstracted procedure
 10249  001A06  0E46               	movlw	70
 10250  001A08  2419               	addwf	??_calculateSetFilterMask+7,w,c
 10251  001A0A  6E08               	movwf	?_Read_b_eep,c
 10252  001A0C  0E00               	movlw	0
 10253  001A0E  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 10254  001A10  6E09               	movwf	?_Read_b_eep+1,c
 10255  001A12  ECB6  F01E         	call	_Read_b_eep	;wreg free
 10256  001A16  D903               	call	PL8	;call to abstracted procedure
 10257  001A18  ECB6  F01E         	call	_Read_b_eep	;wreg free
 10258  001A1C  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 10259  001A1E  0E01               	movlw	1
 10260  001A20  1622               	andwf	??_calculateSetFilterMask+16,f,c
 10261  001A22  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 10262  001A26  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 10263  001A28  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 10264  001A2A  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 10265  001A2C  C023  F026         	movff	??_calculateSetFilterMask+17,??_calculateSetFilterMask+20
 10266  001A30  6A25               	clrf	??_calculateSetFilterMask+19,c
 10267  001A32  6A24               	clrf	??_calculateSetFilterMask+18,c
 10268  001A34  6A23               	clrf	??_calculateSetFilterMask+17,c
 10269  001A36  501C               	movf	??_calculateSetFilterMask+10,w,c
 10270  001A38  D937               	call	PL14	;call to abstracted procedure
 10271  001A3A  5043               	movf	calculateSetFilterMask@i,w,c
 10272  001A3C  6E2F               	movwf	(??_calculateSetFilterMask+29)& (0+255),c
 10273  001A3E  6A30               	clrf	(??_calculateSetFilterMask+30)& (0+255),c
 10274  001A40  90D8               	bcf	status,0,c
 10275  001A42  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10276  001A44  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10277  001A46  90D8               	bcf	status,0,c
 10278  001A48  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10279  001A4A  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10280  001A4C  90D8               	bcf	status,0,c
 10281  001A4E  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10282  001A50  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10283  001A52  0E43               	movlw	67
 10284  001A54  242F               	addwf	??_calculateSetFilterMask+29,w,c
 10285  001A56  6E08               	movwf	?_Read_b_eep,c
 10286  001A58  0E00               	movlw	0
 10287  001A5A  2030               	addwfc	??_calculateSetFilterMask+30,w,c
 10288  001A5C  6E09               	movwf	?_Read_b_eep+1,c
 10289  001A5E  ECB6  F01E         	call	_Read_b_eep	;wreg free
 10290  001A62  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 10291  001A64  6E3E               	movwf	calculateSetFilterMask@rowfilter,c
 10292  001A66  502C               	movf	??_calculateSetFilterMask+26,w,c
 10293  001A68  6E3F               	movwf	calculateSetFilterMask@rowfilter+1,c
 10294  001A6A  502D               	movf	??_calculateSetFilterMask+27,w,c
 10295  001A6C  6E40               	movwf	calculateSetFilterMask@rowfilter+2,c
 10296  001A6E  502E               	movf	??_calculateSetFilterMask+28,w,c
 10297  001A70  6E41               	movwf	calculateSetFilterMask@rowfilter+3,c
 10298                           
 10299                           ;main.c: 2729: if ( 0 == i ) filter = rowfilter;
 10300  001A72  6643               	tstfsz	calculateSetFilterMask@i,c
 10301  001A74  D008               	goto	l8659
 10302  001A76  C03E  F03A         	movff	calculateSetFilterMask@rowfilter,calculateSetFilterMask@filter
 10303  001A7A  C03F  F03B         	movff	calculateSetFilterMask@rowfilter+1,calculateSetFilterMask@filter+1
 10304  001A7E  C040  F03C         	movff	calculateSetFilterMask@rowfilter+2,calculateSetFilterMask@filter+2
 10305  001A82  C041  F03D         	movff	calculateSetFilterMask@rowfilter+3,calculateSetFilterMask@filter+3
 10306  001A86                     l8659:
 10307                           
 10308                           ;main.c: 2733: mask &= rowmask;
 10309  001A86  5031               	movf	calculateSetFilterMask@rowmask,w,c
 10310  001A88  1636               	andwf	calculateSetFilterMask@mask,f,c
 10311  001A8A  5032               	movf	calculateSetFilterMask@rowmask+1,w,c
 10312  001A8C  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10313  001A8E  5033               	movf	calculateSetFilterMask@rowmask+2,w,c
 10314  001A90  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10315  001A92  5034               	movf	calculateSetFilterMask@rowmask+3,w,c
 10316  001A94  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10317                           
 10318                           ;main.c: 2738: for ( j=0; j<32; j++ ) {
 10319  001A96  6A42               	clrf	calculateSetFilterMask@j,c
 10320  001A98                     l8667:
 10321                           
 10322                           ;main.c: 2740: if ( ( ( filter >> j ) & 1 ) != ( ( rowfilter >> j ) & 1 ) ) {
 10323  001A98  5042               	movf	calculateSetFilterMask@j,w,c
 10324  001A9A  C03E  F012         	movff	calculateSetFilterMask@rowfilter,??_calculateSetFilterMask
 10325  001A9E  C03F  F013         	movff	calculateSetFilterMask@rowfilter+1,??_calculateSetFilterMask+1
 10326  001AA2  C040  F014         	movff	calculateSetFilterMask@rowfilter+2,??_calculateSetFilterMask+2
 10327  001AA6  C041  F015         	movff	calculateSetFilterMask@rowfilter+3,??_calculateSetFilterMask+3
 10328  001AAA  2AE8               	incf	wreg,f,c
 10329  001AAC  D005               	goto	u9370
 10330  001AAE                     u9375:
 10331  001AAE  90D8               	bcf	status,0,c
 10332  001AB0  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10333  001AB2  3214               	rrcf	??_calculateSetFilterMask+2,f,c
 10334  001AB4  3213               	rrcf	??_calculateSetFilterMask+1,f,c
 10335  001AB6  3212               	rrcf	??_calculateSetFilterMask,f,c
 10336  001AB8                     u9370:
 10337  001AB8  2EE8               	decfsz	wreg,f,c
 10338  001ABA  D7F9               	goto	u9375
 10339  001ABC  0E01               	movlw	1
 10340  001ABE  1612               	andwf	??_calculateSetFilterMask,f,c
 10341  001AC0  5042               	movf	calculateSetFilterMask@j,w,c
 10342  001AC2  C03A  F016         	movff	calculateSetFilterMask@filter,??_calculateSetFilterMask+4
 10343  001AC6  C03B  F017         	movff	calculateSetFilterMask@filter+1,??_calculateSetFilterMask+5
 10344  001ACA  C03C  F018         	movff	calculateSetFilterMask@filter+2,??_calculateSetFilterMask+6
 10345  001ACE  C03D  F019         	movff	calculateSetFilterMask@filter+3,??_calculateSetFilterMask+7
 10346  001AD2  2AE8               	incf	wreg,f,c
 10347  001AD4  D005               	goto	u9380
 10348  001AD6                     u9385:
 10349  001AD6  90D8               	bcf	status,0,c
 10350  001AD8  3219               	rrcf	??_calculateSetFilterMask+7,f,c
 10351  001ADA  3218               	rrcf	??_calculateSetFilterMask+6,f,c
 10352  001ADC  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10353  001ADE  3216               	rrcf	??_calculateSetFilterMask+4,f,c
 10354  001AE0                     u9380:
 10355  001AE0  2EE8               	decfsz	wreg,f,c
 10356  001AE2  D7F9               	goto	u9385
 10357  001AE4  5016               	movf	??_calculateSetFilterMask+4,w,c
 10358  001AE6  0B01               	andlw	1
 10359  001AE8  1812               	xorwf	??_calculateSetFilterMask,w,c
 10360  001AEA  E010               	bz	l8671
 10361                           
 10362                           ;main.c: 2741: mask &= ~(1<<j);
 10363  001AEC  C042  F012         	movff	calculateSetFilterMask@j,??_calculateSetFilterMask
 10364  001AF0  D8FD               	call	PL78	;call to abstracted procedure
 10365  001AF2  D001               	goto	u9404
 10366  001AF4                     u9405:
 10367  001AF4  D900               	call	PL82	;call to abstracted procedure
 10368  001AF6                     u9404:
 10369  001AF6  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10370  001AF8  D7FD               	goto	u9405
 10371  001AFA  1C13               	comf	??_calculateSetFilterMask+1,w,c
 10372  001AFC  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10373  001AFE  1C14               	comf	??_calculateSetFilterMask+2,w,c
 10374  001B00  6E16               	movwf	(??_calculateSetFilterMask+4)& (0+255),c
 10375  001B02  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10376  001B04  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10377  001B06  0617               	decf	(??_calculateSetFilterMask+5)& (0+255),f,c
 10378  001B08  5017               	movf	(??_calculateSetFilterMask+5)& (0+255),w,c
 10379  001B0A  D8E6               	call	PL44	;call to abstracted procedure
 10380  001B0C                     l8671:
 10381  001B0C  2A42               	incf	calculateSetFilterMask@j,f,c
 10382  001B0E  0E1F               	movlw	31
 10383  001B10  6442               	cpfsgt	calculateSetFilterMask@j,c
 10384  001B12  D7C2               	goto	l8667
 10385                           
 10386                           ;main.c: 2742: }
 10387                           ;main.c: 2743: }
 10388                           ;main.c: 2749: filter &= rowfilter;
 10389  001B14  503E               	movf	calculateSetFilterMask@rowfilter,w,c
 10390  001B16  163A               	andwf	calculateSetFilterMask@filter,f,c
 10391  001B18  503F               	movf	calculateSetFilterMask@rowfilter+1,w,c
 10392  001B1A  163B               	andwf	calculateSetFilterMask@filter+1,f,c
 10393  001B1C  5040               	movf	calculateSetFilterMask@rowfilter+2,w,c
 10394  001B1E  163C               	andwf	calculateSetFilterMask@filter+2,f,c
 10395  001B20  5041               	movf	calculateSetFilterMask@rowfilter+3,w,c
 10396  001B22  163D               	andwf	calculateSetFilterMask@filter+3,f,c
 10397                           
 10398                           ;main.c: 2757: }
 10399                           ;main.c: 2759: if (i) {
 10400                           
 10401                           ;main.c: 2752: if ( !Read_b_eep(0x43 + 8*i + 1) & 0x40 ) {
 10402  001B24  5043               	movf	calculateSetFilterMask@i,w,c
 10403  001B26  E042               	bz	l8691
 10404                           
 10405                           ;main.c: 2762: for (j = 0; j < 8; j++) {
 10406  001B28  6A42               	clrf	calculateSetFilterMask@j,c
 10407  001B2A                     l8685:
 10408                           
 10409                           ;main.c: 2763: if ((lastOID >> i & 1)
 10410                           ;main.c: 2764: != (Read_b_eep(0x43 + 8 * i) >> i & 1)) {
 10411  001B2A  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10412  001B2E  5043               	movf	calculateSetFilterMask@i,w,c
 10413  001B30  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10414  001B32  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10415  001B34  90D8               	bcf	status,0,c
 10416  001B36  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10417  001B38  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10418  001B3A  90D8               	bcf	status,0,c
 10419  001B3C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10420  001B3E  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10421  001B40  90D8               	bcf	status,0,c
 10422  001B42  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10423  001B44  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10424  001B46  0E43               	movlw	67
 10425  001B48  2413               	addwf	??_calculateSetFilterMask+1,w,c
 10426  001B4A  6E08               	movwf	?_Read_b_eep,c
 10427  001B4C  0E00               	movlw	0
 10428  001B4E  2014               	addwfc	??_calculateSetFilterMask+2,w,c
 10429  001B50  6E09               	movwf	?_Read_b_eep+1,c
 10430  001B52  ECB6  F01E         	call	_Read_b_eep	;wreg free
 10431  001B56  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10432  001B58  2A12               	incf	??_calculateSetFilterMask,f,c
 10433  001B5A  D002               	goto	u9434
 10434  001B5C                     u9435:
 10435  001B5C  90D8               	bcf	status,0,c
 10436  001B5E  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10437  001B60                     u9434:
 10438  001B60  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10439  001B62  D7FC               	goto	u9435
 10440  001B64  0E01               	movlw	1
 10441  001B66  1615               	andwf	??_calculateSetFilterMask+3,f,c
 10442  001B68  C043  F016         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask+4
 10443  001B6C  C035  F017         	movff	calculateSetFilterMask@lastOID,??_calculateSetFilterMask+5
 10444  001B70  2A16               	incf	??_calculateSetFilterMask+4,f,c
 10445  001B72  D002               	goto	u9444
 10446  001B74                     u9445:
 10447  001B74  90D8               	bcf	status,0,c
 10448  001B76  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10449  001B78                     u9444:
 10450  001B78  2E16               	decfsz	??_calculateSetFilterMask+4,f,c
 10451  001B7A  D7FC               	goto	u9445
 10452  001B7C  5017               	movf	??_calculateSetFilterMask+5,w,c
 10453  001B7E  0B01               	andlw	1
 10454  001B80  1815               	xorwf	??_calculateSetFilterMask+3,w,c
 10455  001B82  E010               	bz	l8689
 10456                           
 10457                           ;main.c: 2765: mask &= (1 << i);
 10458  001B84  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10459  001B88  D8B1               	call	PL78	;call to abstracted procedure
 10460  001B8A  D001               	goto	u9464
 10461  001B8C                     u9465:
 10462  001B8C  D8B4               	call	PL82	;call to abstracted procedure
 10463  001B8E                     u9464:
 10464  001B8E  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10465  001B90  D7FD               	goto	u9465
 10466  001B92  C013  F015         	movff	??_calculateSetFilterMask+1,??_calculateSetFilterMask+3
 10467  001B96  C014  F016         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+4
 10468  001B9A  0E00               	movlw	0
 10469  001B9C  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10470  001B9E  0EFF               	movlw	255
 10471  001BA0  6E17               	movwf	(??_calculateSetFilterMask+5)& (0+255),c
 10472  001BA2  D89A               	call	PL44	;call to abstracted procedure
 10473  001BA4                     l8689:
 10474  001BA4  2A42               	incf	calculateSetFilterMask@j,f,c
 10475  001BA6  0E07               	movlw	7
 10476  001BA8  6442               	cpfsgt	calculateSetFilterMask@j,c
 10477  001BAA  D7BF               	goto	l8685
 10478  001BAC                     l8691:
 10479                           
 10480                           ;main.c: 2766: }
 10481                           ;main.c: 2767: }
 10482                           ;main.c: 2769: lastOID = Read_b_eep(0x43 + 8 * i);
 10483  001BAC  5043               	movf	calculateSetFilterMask@i,w,c
 10484  001BAE  D856               	call	PL10	;call to abstracted procedure
 10485  001BB0  0E43               	movlw	67
 10486  001BB2  2412               	addwf	??_calculateSetFilterMask,w,c
 10487  001BB4  6E08               	movwf	?_Read_b_eep,c
 10488  001BB6  0E00               	movlw	0
 10489  001BB8  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10490  001BBA  6E09               	movwf	?_Read_b_eep+1,c
 10491  001BBC  ECB6  F01E         	call	_Read_b_eep	;wreg free
 10492  001BC0  6E35               	movwf	calculateSetFilterMask@lastOID,c
 10493  001BC2                     l8695:
 10494  001BC2  2A43               	incf	calculateSetFilterMask@i,f,c
 10495  001BC4  0E06               	movlw	6
 10496  001BC6  6443               	cpfsgt	calculateSetFilterMask@i,c
 10497  001BC8  D6D5               	goto	l8651
 10498                           
 10499                           ;main.c: 2775: }
 10500                           ;main.c: 2777: }
 10501                           ;main.c: 2778: }
 10502                           ;main.c: 2781: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 10503  001BCA  0E80               	movlw	128
 10504  001BCC  EC62  F01E         	call	_ECANSetOperationMode
 10505                           
 10506                           ;main.c: 2784: _CANIDToRegs((BYTE*)&RXM1SIDH, mask, 1);
 10507  001BD0  010F               	movlb	15	; () banked
 10508  001BD2  0E0F               	movlw	15	;volatile
 10509  001BD4  6E09               	movwf	?__CANIDToRegs+1,c
 10510  001BD6  0E1C               	movlw	28	;volatile
 10511  001BD8  6E08               	movwf	?__CANIDToRegs,c
 10512  001BDA  C036  F00A         	movff	calculateSetFilterMask@mask,?__CANIDToRegs+2
 10513  001BDE  C037  F00B         	movff	calculateSetFilterMask@mask+1,?__CANIDToRegs+3
 10514  001BE2  C038  F00C         	movff	calculateSetFilterMask@mask+2,?__CANIDToRegs+4
 10515  001BE6  C039  F00D         	movff	calculateSetFilterMask@mask+3,?__CANIDToRegs+5
 10516  001BEA  0E01               	movlw	1
 10517  001BEC  6E0E               	movwf	?__CANIDToRegs+6,c
 10518  001BEE  EC79  F017         	call	__CANIDToRegs	;wreg free
 10519                           
 10520                           ;main.c: 2787: RXF1EN = 1; _CANIDToRegs((BYTE*)&RXF1SIDH, filter, 1);;
 10521  001BF2  010D               	movlb	13	; () banked
 10522  001BF4  83D4               	bsf	212,1,b	;volatile
 10523                           
 10524                           ; BSR set to: 13
 10525  001BF6  010F               	movlb	15	; () banked
 10526  001BF8  0E0F               	movlw	15	;volatile
 10527  001BFA  6E09               	movwf	?__CANIDToRegs+1,c
 10528  001BFC  0E04               	movlw	4	;volatile
 10529  001BFE  6E08               	movwf	?__CANIDToRegs,c
 10530  001C00  C03A  F00A         	movff	calculateSetFilterMask@filter,?__CANIDToRegs+2
 10531  001C04  C03B  F00B         	movff	calculateSetFilterMask@filter+1,?__CANIDToRegs+3
 10532  001C08  C03C  F00C         	movff	calculateSetFilterMask@filter+2,?__CANIDToRegs+4
 10533  001C0C  C03D  F00D         	movff	calculateSetFilterMask@filter+3,?__CANIDToRegs+5
 10534  001C10  0E01               	movlw	1
 10535  001C12  6E0E               	movwf	?__CANIDToRegs+6,c
 10536  001C14  EC79  F017         	call	__CANIDToRegs	;wreg free
 10537                           
 10538                           ;main.c: 2790: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
 10539  001C18  0E00               	movlw	0
 10540  001C1A  EF62  F01E         	goto	_ECANSetOperationMode
 10541  001C1E                     __end_of_calculateSetFilterMask:
 10542                           	opt stack 0
 10543  001C1E                     PL8:
 10544                           	opt stack 23
 10545  001C1E  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
 10546  001C20  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 10547  001C24  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 10548  001C26  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 10549  001C28  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 10550  001C2A  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 10551  001C2E  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 10552  001C32  6A1D               	clrf	??_calculateSetFilterMask+11,c
 10553  001C34  6A1C               	clrf	??_calculateSetFilterMask+10,c
 10554  001C36  5043               	movf	calculateSetFilterMask@i,w,c
 10555  001C38  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 10556  001C3A  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 10557  001C3C  90D8               	bcf	status,0,c
 10558  001C3E  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10559  001C40  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10560  001C42  90D8               	bcf	status,0,c
 10561  001C44  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10562  001C46  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10563  001C48  90D8               	bcf	status,0,c
 10564  001C4A  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10565  001C4C  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10566  001C4E  0E44               	movlw	68
 10567  001C50  2420               	addwf	??_calculateSetFilterMask+14,w,c
 10568  001C52  6E08               	movwf	?_Read_b_eep,c
 10569  001C54  0E00               	movlw	0
 10570  001C56  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 10571  001C58  6E09               	movwf	?_Read_b_eep+1,c
 10572  001C5A  0012               	return	
 10573  001C5C                     __end_ofPL8:
 10574                           	opt stack 0
 10575  001C5C                     PL10:
 10576                           	opt stack 23
 10577  001C5C  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10578  001C5E  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10579  001C60  90D8               	bcf	status,0,c
 10580  001C62  3612               	rlcf	??_calculateSetFilterMask,f,c
 10581  001C64  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10582  001C66  90D8               	bcf	status,0,c
 10583  001C68  3612               	rlcf	??_calculateSetFilterMask,f,c
 10584  001C6A  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10585  001C6C  90D8               	bcf	status,0,c
 10586  001C6E  3612               	rlcf	??_calculateSetFilterMask,f,c
 10587  001C70  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10588  001C72  0012               	return	
 10589  001C74                     __end_ofPL10:
 10590                           	opt stack 0
 10591  001C74                     PL12:
 10592                           	opt stack 23
 10593  001C74  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 10594  001C76  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
 10595  001C7A  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
 10596  001C7C  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10597  001C7E  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
 10598  001C80  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
 10599  001C84  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
 10600  001C88  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
 10601  001C8C  6A15               	clrf	??_calculateSetFilterMask+3,c
 10602  001C8E  5043               	movf	calculateSetFilterMask@i,w,c
 10603  001C90  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
 10604  001C92  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
 10605  001C94  90D8               	bcf	status,0,c
 10606  001C96  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10607  001C98  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10608  001C9A  90D8               	bcf	status,0,c
 10609  001C9C  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10610  001C9E  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10611  001CA0  90D8               	bcf	status,0,c
 10612  001CA2  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10613  001CA4  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10614  001CA6  0012               	return	
 10615  001CA8                     __end_ofPL12:
 10616                           	opt stack 0
 10617  001CA8                     PL14:
 10618                           	opt stack 23
 10619  001CA8  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 10620  001CAA  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 10621  001CAC  501D               	movf	??_calculateSetFilterMask+11,w,c
 10622  001CAE  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 10623  001CB0  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 10624  001CB2  501E               	movf	??_calculateSetFilterMask+12,w,c
 10625  001CB4  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 10626  001CB6  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 10627  001CB8  501F               	movf	??_calculateSetFilterMask+13,w,c
 10628  001CBA  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 10629  001CBC  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 10630  001CBE  5015               	movf	??_calculateSetFilterMask+3,w,c
 10631  001CC0  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 10632  001CC2  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 10633  001CC4  5016               	movf	??_calculateSetFilterMask+4,w,c
 10634  001CC6  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 10635  001CC8  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 10636  001CCA  5017               	movf	??_calculateSetFilterMask+5,w,c
 10637  001CCC  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 10638  001CCE  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 10639  001CD0  5018               	movf	??_calculateSetFilterMask+6,w,c
 10640  001CD2  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 10641  001CD4  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 10642  001CD6  0012               	return	
 10643  001CD8                     __end_ofPL14:
 10644                           	opt stack 0
 10645  001CD8                     PL44:
 10646                           	opt stack 23
 10647  001CD8  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10648  001CDA  5015               	movf	??_calculateSetFilterMask+3,w,c
 10649  001CDC  1636               	andwf	calculateSetFilterMask@mask,f,c
 10650  001CDE  5016               	movf	??_calculateSetFilterMask+4,w,c
 10651  001CE0  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10652  001CE2  5017               	movf	??_calculateSetFilterMask+5,w,c
 10653  001CE4  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10654  001CE6  5018               	movf	??_calculateSetFilterMask+6,w,c
 10655  001CE8  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10656  001CEA  0012               	return	
 10657  001CEC                     __end_ofPL44:
 10658                           	opt stack 0
 10659  001CEC                     PL78:
 10660                           	opt stack 23
 10661  001CEC  0E01               	movlw	1
 10662  001CEE  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10663  001CF0  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10664  001CF2  2A12               	incf	??_calculateSetFilterMask,f,c
 10665  001CF4  0012               	return	
 10666  001CF6                     __end_ofPL78:
 10667                           	opt stack 0
 10668  001CF6                     PL82:
 10669                           	opt stack 23
 10670  001CF6  90D8               	bcf	status,0,c
 10671  001CF8  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10672  001CFA  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10673  001CFC  0012               	return	
 10674  001CFE                     __end_ofPL82:
 10675                           	opt stack 0
 10676                           tblptru	equ	0xFF8
 10677                           tblptrh	equ	0xFF7
 10678                           tblptrl	equ	0xFF6
 10679                           tablat	equ	0xFF5
 10680                           prodh	equ	0xFF4
 10681                           prodl	equ	0xFF3
 10682                           intcon	equ	0xFF2
 10683                           postinc0	equ	0xFEE
 10684                           wreg	equ	0xFE8
 10685                           indf1	equ	0xFE7
 10686                           fsr1h	equ	0xFE2
 10687                           fsr1l	equ	0xFE1
 10688                           indf2	equ	0xFDF
 10689                           postinc2	equ	0xFDE
 10690                           postdec2	equ	0xFDD
 10691                           plusw2	equ	0xFDB
 10692                           fsr2h	equ	0xFDA
 10693                           fsr2l	equ	0xFD9
 10694                           status	equ	0xFD8
 10695                           
 10696 ;; *************** function _vscp_readRegister *****************
 10697 ;; Defined at:
 10698 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 10699 ;; Parameters:    Size  Location     Type
 10700 ;;  reg             1    wreg     unsigned char 
 10701 ;; Auto vars:     Size  Location     Type
 10702 ;;  reg             1   28[COMRAM] unsigned char 
 10703 ;; Return value:  Size  Location     Type
 10704 ;;                  1    wreg      unsigned char 
 10705 ;; Registers used:
 10706 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10707 ;; Tracked objects:
 10708 ;;		On entry : F/0
 10709 ;;		On exit  : 0/0
 10710 ;;		Unchanged: 0/0
 10711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10712 ;;      Params:         0       0       0       0       0       0       0
 10713 ;;      Locals:         1       0       0       0       0       0       0
 10714 ;;      Temps:          0       0       0       0       0       0       0
 10715 ;;      Totals:         1       0       0       0       0       0       0
 10716 ;;Total ram usage:        1 bytes
 10717 ;; Hardware stack levels used:    1
 10718 ;; Hardware stack levels required when called:    5
 10719 ;; This function calls:
 10720 ;;		_vscp_readAppReg
 10721 ;;		_vscp_readStdReg
 10722 ;; This function is called by:
 10723 ;;		_vscp_handleProtocolEvent
 10724 ;; This function uses a non-reentrant model
 10725 ;;
 10726                           
 10727                           	psect	text27
 10728  003C92                     __ptext27:
 10729                           	opt stack 0
 10730  003C92                     _vscp_readRegister:
 10731                           	opt stack 24
 10732                           
 10733                           ;incstack = 0
 10734                           ;incstack = 0
 10735                           ;vscp_readRegister@reg stored from wreg
 10736  003C92  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
 10737                           
 10738                           ; BSR set to: 0
 10739                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 10740  003C96  0E7F               	movlw	127
 10741  003C98  641D               	cpfsgt	vscp_readRegister@reg,c
 10742  003C9A  D004               	goto	l9751
 10743                           
 10744                           ; BSR set to: 0
 10745                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 10746  003C9C  501D               	movf	vscp_readRegister@reg,w,c
 10747  003C9E  EC1F  F014         	call	_vscp_readStdReg
 10748  003CA2  D003               	goto	l1126
 10749  003CA4                     l9751:
 10750                           
 10751                           ; BSR set to: 0
 10752                           ;vscp_firmware.c: 565: else {
 10753                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 10754  003CA4  501D               	movf	vscp_readRegister@reg,w,c
 10755  003CA6  ECA6  F01A         	call	_vscp_readAppReg
 10756  003CAA                     l1126:
 10757  003CAA  0012               	return	
 10758  003CAC                     __end_of_vscp_readRegister:
 10759                           	opt stack 0
 10760                           tblptru	equ	0xFF8
 10761                           tblptrh	equ	0xFF7
 10762                           tblptrl	equ	0xFF6
 10763                           tablat	equ	0xFF5
 10764                           prodh	equ	0xFF4
 10765                           prodl	equ	0xFF3
 10766                           intcon	equ	0xFF2
 10767                           postinc0	equ	0xFEE
 10768                           wreg	equ	0xFE8
 10769                           indf1	equ	0xFE7
 10770                           fsr1h	equ	0xFE2
 10771                           fsr1l	equ	0xFE1
 10772                           indf2	equ	0xFDF
 10773                           postinc2	equ	0xFDE
 10774                           postdec2	equ	0xFDD
 10775                           plusw2	equ	0xFDB
 10776                           fsr2h	equ	0xFDA
 10777                           fsr2l	equ	0xFD9
 10778                           status	equ	0xFD8
 10779                           
 10780 ;; *************** function _vscp_readStdReg *****************
 10781 ;; Defined at:
 10782 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 10783 ;; Parameters:    Size  Location     Type
 10784 ;;  reg             1    wreg     unsigned char 
 10785 ;; Auto vars:     Size  Location     Type
 10786 ;;  reg             1   27[COMRAM] unsigned char 
 10787 ;;  code            4   20[COMRAM] unsigned long 
 10788 ;;  idx             1   25[COMRAM] unsigned char 
 10789 ;;  code            4   16[COMRAM] unsigned long 
 10790 ;;  idx             1   24[COMRAM] unsigned char 
 10791 ;;  rv              1   26[COMRAM] unsigned char 
 10792 ;; Return value:  Size  Location     Type
 10793 ;;                  1    wreg      unsigned char 
 10794 ;; Registers used:
 10795 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10796 ;; Tracked objects:
 10797 ;;		On entry : F/0
 10798 ;;		On exit  : 0/0
 10799 ;;		Unchanged: 0/0
 10800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10801 ;;      Params:         0       0       0       0       0       0       0
 10802 ;;      Locals:        12       0       0       0       0       0       0
 10803 ;;      Temps:          5       0       0       0       0       0       0
 10804 ;;      Totals:        17       0       0       0       0       0       0
 10805 ;;Total ram usage:       17 bytes
 10806 ;; Hardware stack levels used:    1
 10807 ;; Hardware stack levels required when called:    4
 10808 ;; This function calls:
 10809 ;;		_vscp_getMajorVersion
 10810 ;;		_vscp_getMinorVersion
 10811 ;;		_vscp_getSubMinorVersion
 10812 ;;		_vscp_getGUID
 10813 ;;		_vscp_getMDF_URL
 10814 ;;		_vscp_getUserID
 10815 ;;		_vscp_getManufacturerId
 10816 ;;		_vscp_getBootLoaderAlgorithm
 10817 ;;		_vscp_getBufferSize
 10818 ;;		_vscp_getFamilyCode
 10819 ;;		_vscp_getFamilyType
 10820 ;;		_vscp_getRegisterPagesUsed
 10821 ;; This function is called by:
 10822 ;;		_vscp_readRegister
 10823 ;;		_vscp_handleProtocolEvent
 10824 ;; This function uses a non-reentrant model
 10825 ;;
 10826                           
 10827                           	psect	text28
 10828  00283E                     __ptext28:
 10829                           	opt stack 0
 10830  00283E                     _vscp_readStdReg:
 10831                           	opt stack 25
 10832                           
 10833                           ;incstack = 0
 10834                           ;incstack = 0
 10835                           ;vscp_readStdReg@reg stored from wreg
 10836  00283E  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
 10837                           
 10838                           ; BSR set to: 0
 10839                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 10840  002842  6A1B               	clrf	vscp_readStdReg@rv,c
 10841                           
 10842                           ; BSR set to: 0
 10843                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 10844  002844  501C               	movf	vscp_readStdReg@reg,w,c
 10845  002846  0A80               	xorlw	128
 10846  002848  E104               	bnz	l9761
 10847                           
 10848                           ; BSR set to: 0
 10849                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 10850  00284A  C055  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 10851                           
 10852                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 10853  00284E  6A55               	clrf	_vscp_alarmstatus,c
 10854                           
 10855                           ;vscp_firmware.c: 584: }
 10856  002850  D0B3               	goto	l9849
 10857  002852                     l9761:
 10858                           
 10859                           ; BSR set to: 0
 10860                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 10861  002852  501C               	movf	vscp_readStdReg@reg,w,c
 10862  002854  0A81               	xorlw	129
 10863  002856  E102               	bnz	l9765
 10864                           
 10865                           ; BSR set to: 0
 10866                           ;vscp_firmware.c: 588: rv = 1;
 10867  002858  0E01               	movlw	1
 10868  00285A  D075               	goto	L39
 10869  00285C                     l9765:
 10870                           
 10871                           ; BSR set to: 0
 10872                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 10873  00285C  501C               	movf	vscp_readStdReg@reg,w,c
 10874  00285E  0A82               	xorlw	130
 10875  002860  E102               	bnz	l9769
 10876                           
 10877                           ; BSR set to: 0
 10878                           ;vscp_firmware.c: 594: rv = 5;
 10879  002862  0E05               	movlw	5
 10880  002864  D070               	goto	L39
 10881  002866                     l9769:
 10882                           
 10883                           ; BSR set to: 0
 10884                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 10885  002866  501C               	movf	vscp_readStdReg@reg,w,c
 10886  002868  0A83               	xorlw	131
 10887  00286A  E102               	bnz	l9773
 10888                           
 10889                           ; BSR set to: 0
 10890                           ;vscp_firmware.c: 600: rv = 0;
 10891  00286C  6A1B               	clrf	vscp_readStdReg@rv,c
 10892                           
 10893                           ;vscp_firmware.c: 602: }
 10894  00286E  D0A4               	goto	l9849
 10895  002870                     l9773:
 10896                           
 10897                           ; BSR set to: 0
 10898                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 10899  002870  501C               	movf	vscp_readStdReg@reg,w,c
 10900  002872  0A94               	xorlw	148
 10901  002874  E103               	bnz	l9777
 10902                           
 10903                           ; BSR set to: 0
 10904                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 10905  002876  ECF5  F01E         	call	_vscp_getMajorVersion	;wreg free
 10906  00287A  D065               	goto	L39
 10907  00287C                     l9777:
 10908                           
 10909                           ; BSR set to: 0
 10910                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 10911  00287C  501C               	movf	vscp_readStdReg@reg,w,c
 10912  00287E  0A95               	xorlw	149
 10913  002880  E103               	bnz	l9781
 10914                           
 10915                           ; BSR set to: 0
 10916                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 10917  002882  ECF4  F01E         	call	_vscp_getMinorVersion	;wreg free
 10918  002886  D05F               	goto	L39
 10919  002888                     l9781:
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 10923  002888  501C               	movf	vscp_readStdReg@reg,w,c
 10924  00288A  0A96               	xorlw	150
 10925  00288C  E103               	bnz	l9785
 10926                           
 10927                           ; BSR set to: 0
 10928                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 10929  00288E  ECF3  F01E         	call	_vscp_getSubMinorVersion	;wreg free
 10930  002892  D059               	goto	L39
 10931  002894                     l9785:
 10932                           
 10933                           ; BSR set to: 0
 10934                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 10935  002894  0E89               	movlw	137
 10936  002896  601C               	cpfslt	vscp_readStdReg@reg,c
 10937  002898  D005               	goto	l9789
 10938                           
 10939                           ; BSR set to: 0
 10940                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 10941  00289A  501C               	movf	vscp_readStdReg@reg,w,c
 10942  00289C  0F7C               	addlw	124
 10943  00289E  EC99  F01E         	call	_vscp_getUserID
 10944  0028A2  D051               	goto	L39
 10945  0028A4                     l9789:
 10946                           
 10947                           ; BSR set to: 0
 10948                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 10949                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 10950  0028A4  0E88               	movlw	136
 10951  0028A6  641C               	cpfsgt	vscp_readStdReg@reg,c
 10952  0028A8  D008               	goto	l9795
 10953                           
 10954                           ; BSR set to: 0
 10955  0028AA  0E91               	movlw	145
 10956  0028AC  601C               	cpfslt	vscp_readStdReg@reg,c
 10957  0028AE  D005               	goto	l9795
 10958                           
 10959                           ; BSR set to: 0
 10960                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 10961  0028B0  501C               	movf	vscp_readStdReg@reg,w,c
 10962  0028B2  0F77               	addlw	119
 10963  0028B4  EC8F  F01E         	call	_vscp_getManufacturerId
 10964  0028B8  D046               	goto	L39
 10965  0028BA                     l9795:
 10966                           
 10967                           ; BSR set to: 0
 10968                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 10969  0028BA  501C               	movf	vscp_readStdReg@reg,w,c
 10970  0028BC  0A91               	xorlw	145
 10971  0028BE  E103               	bnz	l9799
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 10975  0028C0  C091  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
 10976                           
 10977                           ;vscp_firmware.c: 639: }
 10978  0028C4  D079               	goto	l9849
 10979  0028C6                     l9799:
 10980                           
 10981                           ; BSR set to: 0
 10982                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 10983  0028C6  501C               	movf	vscp_readStdReg@reg,w,c
 10984  0028C8  0A93               	xorlw	147
 10985  0028CA  E103               	bnz	l9803
 10986                           
 10987                           ; BSR set to: 0
 10988                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 10989  0028CC  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
 10990                           
 10991                           ;vscp_firmware.c: 645: }
 10992  0028D0  D073               	goto	l9849
 10993  0028D2                     l9803:
 10994                           
 10995                           ; BSR set to: 0
 10996                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 10997  0028D2  501C               	movf	vscp_readStdReg@reg,w,c
 10998  0028D4  0A92               	xorlw	146
 10999  0028D6  E102               	bnz	l9807
 11000                           
 11001                           ; BSR set to: 0
 11002                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 11003  0028D8  5053               	movf	_vscp_page_select+1,w,c
 11004  0028DA  D035               	goto	L39
 11005  0028DC                     l9807:
 11006                           
 11007                           ; BSR set to: 0
 11008                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 11009  0028DC  501C               	movf	vscp_readStdReg@reg,w,c
 11010  0028DE  0A97               	xorlw	151
 11011  0028E0  E103               	bnz	l9811
 11012                           
 11013                           ; BSR set to: 0
 11014                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 11015  0028E2  ECF2  F01E         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 11016  0028E6  D02F               	goto	L39
 11017  0028E8                     l9811:
 11018                           
 11019                           ; BSR set to: 0
 11020                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 11021  0028E8  501C               	movf	vscp_readStdReg@reg,w,c
 11022  0028EA  0A98               	xorlw	152
 11023  0028EC  E103               	bnz	l9815
 11024                           
 11025                           ; BSR set to: 0
 11026                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 11027  0028EE  ECF1  F01E         	call	_vscp_getBufferSize	;wreg free
 11028  0028F2  D029               	goto	L39
 11029  0028F4                     l9815:
 11030                           
 11031                           ; BSR set to: 0
 11032                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 11033  0028F4  501C               	movf	vscp_readStdReg@reg,w,c
 11034  0028F6  0A99               	xorlw	153
 11035  0028F8  E103               	bnz	l9819
 11036                           
 11037                           ; BSR set to: 0
 11038                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 11039  0028FA  ECF0  F01E         	call	_vscp_getRegisterPagesUsed	;wreg free
 11040  0028FE  D023               	goto	L39
 11041  002900                     l9819:
 11042                           
 11043                           ; BSR set to: 0
 11044                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 11045                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 11046  002900  0E99               	movlw	153
 11047  002902  641C               	cpfsgt	vscp_readStdReg@reg,c
 11048  002904  D022               	goto	l9829
 11049                           
 11050                           ; BSR set to: 0
 11051  002906  0E9E               	movlw	158
 11052  002908  601C               	cpfslt	vscp_readStdReg@reg,c
 11053  00290A  D01F               	goto	l9829
 11054                           
 11055                           ; BSR set to: 0
 11056                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 11057  00290C  ECD7  F01E         	call	_vscp_getFamilyCode	;wreg free
 11058  002910  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 11059  002914  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 11060  002918  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 11061  00291C  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 11062                           
 11063                           ; BSR set to: 0
 11064                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 11065  002920  501C               	movf	vscp_readStdReg@reg,w,c
 11066  002922  0F66               	addlw	102
 11067  002924  6E19               	movwf	vscp_readStdReg@idx,c
 11068                           
 11069                           ; BSR set to: 0
 11070                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 11071  002926  5019               	movf	vscp_readStdReg@idx,w,c
 11072  002928  D849               	call	PL48	;call to abstracted procedure
 11073  00292A  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 11074  00292E  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 11075  002932  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 11076  002936  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 11077  00293A  2AE8               	incf	wreg,f,c
 11078  00293C  D001               	goto	u11290
 11079  00293E                     u11295:
 11080  00293E  D848               	call	PL76	;call to abstracted procedure
 11081  002940                     u11290:
 11082  002940  2EE8               	decfsz	wreg,f,c
 11083  002942  D7FD               	goto	u11295
 11084  002944  D024               	goto	L40
 11085  002946                     L39:
 11086  002946  6E1B               	movwf	vscp_readStdReg@rv,c
 11087                           
 11088                           ;vscp_firmware.c: 671: }
 11089  002948  D037               	goto	l9849
 11090  00294A                     l9829:
 11091                           
 11092                           ; BSR set to: 0
 11093                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 11094                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 11095  00294A  0E9D               	movlw	157
 11096  00294C  641C               	cpfsgt	vscp_readStdReg@reg,c
 11097  00294E  D021               	goto	l9839
 11098                           
 11099                           ; BSR set to: 0
 11100  002950  0EA2               	movlw	162
 11101  002952  601C               	cpfslt	vscp_readStdReg@reg,c
 11102  002954  D01E               	goto	l9839
 11103                           
 11104                           ; BSR set to: 0
 11105                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 11106  002956  ECD2  F01E         	call	_vscp_getFamilyType	;wreg free
 11107  00295A  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1267+3
 11108  00295E  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1267+2
 11109  002962  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1267+1
 11110  002966  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1267
 11111                           
 11112                           ; BSR set to: 0
 11113                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 11114  00296A  501C               	movf	vscp_readStdReg@reg,w,c
 11115  00296C  0F62               	addlw	98
 11116  00296E  6E1A               	movwf	vscp_readStdReg@idx_1268,c
 11117                           
 11118                           ; BSR set to: 0
 11119                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 11120  002970  501A               	movf	vscp_readStdReg@idx_1268,w,c
 11121  002972  D824               	call	PL48	;call to abstracted procedure
 11122  002974  C015  F00D         	movff	vscp_readStdReg@code_1267,??_vscp_readStdReg+1
 11123  002978  C016  F00E         	movff	vscp_readStdReg@code_1267+1,??_vscp_readStdReg+2
 11124  00297C  C017  F00F         	movff	vscp_readStdReg@code_1267+2,??_vscp_readStdReg+3
 11125  002980  C018  F010         	movff	vscp_readStdReg@code_1267+3,??_vscp_readStdReg+4
 11126  002984  2AE8               	incf	wreg,f,c
 11127  002986  D001               	goto	u11320
 11128  002988                     u11325:
 11129  002988  D823               	call	PL76	;call to abstracted procedure
 11130  00298A                     u11320:
 11131  00298A  2EE8               	decfsz	wreg,f,c
 11132  00298C  D7FD               	goto	u11325
 11133  00298E                     L40:
 11134  00298E  500D               	movf	??_vscp_readStdReg+1,w,c
 11135  002990  D7DA               	goto	L39
 11136  002992                     l9839:
 11137                           
 11138                           ; BSR set to: 0
 11139                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 11140                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 11141  002992  0ECF               	movlw	207
 11142  002994  641C               	cpfsgt	vscp_readStdReg@reg,c
 11143  002996  D008               	goto	l9845
 11144                           
 11145                           ; BSR set to: 0
 11146  002998  0EE0               	movlw	224
 11147  00299A  601C               	cpfslt	vscp_readStdReg@reg,c
 11148  00299C  D005               	goto	l9845
 11149                           
 11150                           ; BSR set to: 0
 11151                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 11152  00299E  501C               	movf	vscp_readStdReg@reg,w,c
 11153  0029A0  0F30               	addlw	48
 11154  0029A2  ECA3  F01E         	call	_vscp_getGUID
 11155  0029A6  D7CF               	goto	L39
 11156  0029A8                     l9845:
 11157                           
 11158                           ; BSR set to: 0
 11159                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 11160  0029A8  0EDF               	movlw	223
 11161  0029AA  641C               	cpfsgt	vscp_readStdReg@reg,c
 11162  0029AC  D005               	goto	l9849
 11163                           
 11164                           ; BSR set to: 0
 11165                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 11166  0029AE  501C               	movf	vscp_readStdReg@reg,w,c
 11167  0029B0  0F20               	addlw	32
 11168  0029B2  EC56  F01E         	call	_vscp_getMDF_URL
 11169  0029B6  D7C7               	goto	L39
 11170  0029B8                     l9849:
 11171                           
 11172                           ;vscp_firmware.c: 691: }
 11173                           ;vscp_firmware.c: 693: return rv;
 11174  0029B8  501B               	movf	vscp_readStdReg@rv,w,c
 11175  0029BA  0012               	return	
 11176  0029BC                     __end_of_vscp_readStdReg:
 11177                           	opt stack 0
 11178  0029BC                     PL48:
 11179                           	opt stack 25
 11180  0029BC  0803               	sublw	3
 11181  0029BE  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
 11182  0029C0  90D8               	bcf	status,0,c
 11183  0029C2  360C               	rlcf	??_vscp_readStdReg,f,c
 11184  0029C4  90D8               	bcf	status,0,c
 11185  0029C6  360C               	rlcf	??_vscp_readStdReg,f,c
 11186  0029C8  90D8               	bcf	status,0,c
 11187  0029CA  360C               	rlcf	??_vscp_readStdReg,f,c
 11188  0029CC  500C               	movf	??_vscp_readStdReg,w,c
 11189  0029CE  0012               	return	
 11190  0029D0                     __end_ofPL48:
 11191                           	opt stack 0
 11192  0029D0                     PL76:
 11193                           	opt stack 25
 11194  0029D0  90D8               	bcf	status,0,c
 11195  0029D2  3210               	rrcf	??_vscp_readStdReg+4,f,c
 11196  0029D4  320F               	rrcf	??_vscp_readStdReg+3,f,c
 11197  0029D6  320E               	rrcf	??_vscp_readStdReg+2,f,c
 11198  0029D8  320D               	rrcf	??_vscp_readStdReg+1,f,c
 11199  0029DA  0012               	return	
 11200  0029DC                     __end_ofPL76:
 11201                           	opt stack 0
 11202                           tblptru	equ	0xFF8
 11203                           tblptrh	equ	0xFF7
 11204                           tblptrl	equ	0xFF6
 11205                           tablat	equ	0xFF5
 11206                           prodh	equ	0xFF4
 11207                           prodl	equ	0xFF3
 11208                           intcon	equ	0xFF2
 11209                           postinc0	equ	0xFEE
 11210                           wreg	equ	0xFE8
 11211                           indf1	equ	0xFE7
 11212                           fsr1h	equ	0xFE2
 11213                           fsr1l	equ	0xFE1
 11214                           indf2	equ	0xFDF
 11215                           postinc2	equ	0xFDE
 11216                           postdec2	equ	0xFDD
 11217                           plusw2	equ	0xFDB
 11218                           fsr2h	equ	0xFDA
 11219                           fsr2l	equ	0xFD9
 11220                           status	equ	0xFD8
 11221                           
 11222 ;; *************** function _vscp_getRegisterPagesUsed *****************
 11223 ;; Defined at:
 11224 ;;		line 2571 in file "../main.c"
 11225 ;; Parameters:    Size  Location     Type
 11226 ;;		None
 11227 ;; Auto vars:     Size  Location     Type
 11228 ;;		None
 11229 ;; Return value:  Size  Location     Type
 11230 ;;                  1    wreg      unsigned char 
 11231 ;; Registers used:
 11232 ;;		wreg
 11233 ;; Tracked objects:
 11234 ;;		On entry : F/0
 11235 ;;		On exit  : F/0
 11236 ;;		Unchanged: F/0
 11237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11238 ;;      Params:         0       0       0       0       0       0       0
 11239 ;;      Locals:         0       0       0       0       0       0       0
 11240 ;;      Temps:          0       0       0       0       0       0       0
 11241 ;;      Totals:         0       0       0       0       0       0       0
 11242 ;;Total ram usage:        0 bytes
 11243 ;; Hardware stack levels used:    1
 11244 ;; Hardware stack levels required when called:    2
 11245 ;; This function calls:
 11246 ;;		Nothing
 11247 ;; This function is called by:
 11248 ;;		_vscp_readStdReg
 11249 ;; This function uses a non-reentrant model
 11250 ;;
 11251                           
 11252                           	psect	text29
 11253  003DE0                     __ptext29:
 11254                           	opt stack 0
 11255  003DE0                     _vscp_getRegisterPagesUsed:
 11256                           	opt stack 26
 11257                           
 11258                           ; BSR set to: 0
 11259                           
 11260                           ; BSR set to: 0
 11261                           ;main.c: 2572: return 1;
 11262                           
 11263                           ;incstack = 0
 11264                           ;incstack = 0
 11265  003DE0  0C01               	retlw	1
 11266  003DE2                     __end_of_vscp_getRegisterPagesUsed:
 11267                           	opt stack 0
 11268                           tblptru	equ	0xFF8
 11269                           tblptrh	equ	0xFF7
 11270                           tblptrl	equ	0xFF6
 11271                           tablat	equ	0xFF5
 11272                           prodh	equ	0xFF4
 11273                           prodl	equ	0xFF3
 11274                           intcon	equ	0xFF2
 11275                           postinc0	equ	0xFEE
 11276                           wreg	equ	0xFE8
 11277                           indf1	equ	0xFE7
 11278                           fsr1h	equ	0xFE2
 11279                           fsr1l	equ	0xFE1
 11280                           indf2	equ	0xFDF
 11281                           postinc2	equ	0xFDE
 11282                           postdec2	equ	0xFDD
 11283                           plusw2	equ	0xFDB
 11284                           fsr2h	equ	0xFDA
 11285                           fsr2l	equ	0xFD9
 11286                           status	equ	0xFD8
 11287                           
 11288 ;; *************** function _vscp_getFamilyType *****************
 11289 ;; Defined at:
 11290 ;;		line 2552 in file "../main.c"
 11291 ;; Parameters:    Size  Location     Type
 11292 ;;		None
 11293 ;; Auto vars:     Size  Location     Type
 11294 ;;		None
 11295 ;; Return value:  Size  Location     Type
 11296 ;;                  4    7[COMRAM] unsigned long 
 11297 ;; Registers used:
 11298 ;;		None
 11299 ;; Tracked objects:
 11300 ;;		On entry : F/0
 11301 ;;		On exit  : F/0
 11302 ;;		Unchanged: F/0
 11303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11304 ;;      Params:         4       0       0       0       0       0       0
 11305 ;;      Locals:         0       0       0       0       0       0       0
 11306 ;;      Temps:          0       0       0       0       0       0       0
 11307 ;;      Totals:         4       0       0       0       0       0       0
 11308 ;;Total ram usage:        4 bytes
 11309 ;; Hardware stack levels used:    1
 11310 ;; Hardware stack levels required when called:    2
 11311 ;; This function calls:
 11312 ;;		Nothing
 11313 ;; This function is called by:
 11314 ;;		_vscp_readStdReg
 11315 ;; This function uses a non-reentrant model
 11316 ;;
 11317                           
 11318                           	psect	text30
 11319  003DA4                     __ptext30:
 11320                           	opt stack 0
 11321  003DA4                     _vscp_getFamilyType:
 11322                           	opt stack 26
 11323                           
 11324                           ; BSR set to: 0
 11325                           ;main.c: 2553: return 0;
 11326                           
 11327                           ; BSR set to: 0
 11328                           ;incstack = 0
 11329                           ;incstack = 0
 11330  003DA4  6A08               	clrf	?_vscp_getFamilyType,c
 11331  003DA6  6A09               	clrf	?_vscp_getFamilyType+1,c
 11332  003DA8  6A0A               	clrf	?_vscp_getFamilyType+2,c
 11333  003DAA  6A0B               	clrf	?_vscp_getFamilyType+3,c
 11334                           
 11335                           ; BSR set to: 0
 11336  003DAC  0012               	return	
 11337  003DAE                     __end_of_vscp_getFamilyType:
 11338                           	opt stack 0
 11339                           tblptru	equ	0xFF8
 11340                           tblptrh	equ	0xFF7
 11341                           tblptrl	equ	0xFF6
 11342                           tablat	equ	0xFF5
 11343                           prodh	equ	0xFF4
 11344                           prodl	equ	0xFF3
 11345                           intcon	equ	0xFF2
 11346                           postinc0	equ	0xFEE
 11347                           wreg	equ	0xFE8
 11348                           indf1	equ	0xFE7
 11349                           fsr1h	equ	0xFE2
 11350                           fsr1l	equ	0xFE1
 11351                           indf2	equ	0xFDF
 11352                           postinc2	equ	0xFDE
 11353                           postdec2	equ	0xFDD
 11354                           plusw2	equ	0xFDB
 11355                           fsr2h	equ	0xFDA
 11356                           fsr2l	equ	0xFD9
 11357                           status	equ	0xFD8
 11358                           
 11359 ;; *************** function _vscp_getFamilyCode *****************
 11360 ;; Defined at:
 11361 ;;		line 2543 in file "../main.c"
 11362 ;; Parameters:    Size  Location     Type
 11363 ;;		None
 11364 ;; Auto vars:     Size  Location     Type
 11365 ;;		None
 11366 ;; Return value:  Size  Location     Type
 11367 ;;                  4    7[COMRAM] unsigned long 
 11368 ;; Registers used:
 11369 ;;		None
 11370 ;; Tracked objects:
 11371 ;;		On entry : F/0
 11372 ;;		On exit  : F/0
 11373 ;;		Unchanged: F/0
 11374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11375 ;;      Params:         4       0       0       0       0       0       0
 11376 ;;      Locals:         0       0       0       0       0       0       0
 11377 ;;      Temps:          0       0       0       0       0       0       0
 11378 ;;      Totals:         4       0       0       0       0       0       0
 11379 ;;Total ram usage:        4 bytes
 11380 ;; Hardware stack levels used:    1
 11381 ;; Hardware stack levels required when called:    2
 11382 ;; This function calls:
 11383 ;;		Nothing
 11384 ;; This function is called by:
 11385 ;;		_vscp_readStdReg
 11386 ;; This function uses a non-reentrant model
 11387 ;;
 11388                           
 11389                           	psect	text31
 11390  003DAE                     __ptext31:
 11391                           	opt stack 0
 11392  003DAE                     _vscp_getFamilyCode:
 11393                           	opt stack 26
 11394                           
 11395                           ; BSR set to: 0
 11396                           ;main.c: 2544: return 0L;
 11397                           
 11398                           ; BSR set to: 0
 11399                           ;incstack = 0
 11400                           ;incstack = 0
 11401  003DAE  6A08               	clrf	?_vscp_getFamilyCode,c
 11402  003DB0  6A09               	clrf	?_vscp_getFamilyCode+1,c
 11403  003DB2  6A0A               	clrf	?_vscp_getFamilyCode+2,c
 11404  003DB4  6A0B               	clrf	?_vscp_getFamilyCode+3,c
 11405                           
 11406                           ; BSR set to: 0
 11407  003DB6  0012               	return	
 11408  003DB8                     __end_of_vscp_getFamilyCode:
 11409                           	opt stack 0
 11410                           tblptru	equ	0xFF8
 11411                           tblptrh	equ	0xFF7
 11412                           tblptrl	equ	0xFF6
 11413                           tablat	equ	0xFF5
 11414                           prodh	equ	0xFF4
 11415                           prodl	equ	0xFF3
 11416                           intcon	equ	0xFF2
 11417                           postinc0	equ	0xFEE
 11418                           wreg	equ	0xFE8
 11419                           indf1	equ	0xFE7
 11420                           fsr1h	equ	0xFE2
 11421                           fsr1l	equ	0xFE1
 11422                           indf2	equ	0xFDF
 11423                           postinc2	equ	0xFDE
 11424                           postdec2	equ	0xFDD
 11425                           plusw2	equ	0xFDB
 11426                           fsr2h	equ	0xFDA
 11427                           fsr2l	equ	0xFD9
 11428                           status	equ	0xFD8
 11429                           
 11430 ;; *************** function _vscp_getBufferSize *****************
 11431 ;; Defined at:
 11432 ;;		line 2404 in file "../main.c"
 11433 ;; Parameters:    Size  Location     Type
 11434 ;;		None
 11435 ;; Auto vars:     Size  Location     Type
 11436 ;;		None
 11437 ;; Return value:  Size  Location     Type
 11438 ;;                  1    wreg      unsigned char 
 11439 ;; Registers used:
 11440 ;;		wreg
 11441 ;; Tracked objects:
 11442 ;;		On entry : F/0
 11443 ;;		On exit  : F/0
 11444 ;;		Unchanged: F/0
 11445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11446 ;;      Params:         0       0       0       0       0       0       0
 11447 ;;      Locals:         0       0       0       0       0       0       0
 11448 ;;      Temps:          0       0       0       0       0       0       0
 11449 ;;      Totals:         0       0       0       0       0       0       0
 11450 ;;Total ram usage:        0 bytes
 11451 ;; Hardware stack levels used:    1
 11452 ;; Hardware stack levels required when called:    2
 11453 ;; This function calls:
 11454 ;;		Nothing
 11455 ;; This function is called by:
 11456 ;;		_vscp_readStdReg
 11457 ;; This function uses a non-reentrant model
 11458 ;;
 11459                           
 11460                           	psect	text32
 11461  003DE2                     __ptext32:
 11462                           	opt stack 0
 11463  003DE2                     _vscp_getBufferSize:
 11464                           	opt stack 26
 11465                           
 11466                           ; BSR set to: 0
 11467                           
 11468                           ; BSR set to: 0
 11469                           ;main.c: 2405: return 8;
 11470                           
 11471                           ; BSR set to: 0
 11472                           ;incstack = 0
 11473                           ;incstack = 0
 11474  003DE2  0C08               	retlw	8
 11475  003DE4                     __end_of_vscp_getBufferSize:
 11476                           	opt stack 0
 11477                           tblptru	equ	0xFF8
 11478                           tblptrh	equ	0xFF7
 11479                           tblptrl	equ	0xFF6
 11480                           tablat	equ	0xFF5
 11481                           prodh	equ	0xFF4
 11482                           prodl	equ	0xFF3
 11483                           intcon	equ	0xFF2
 11484                           postinc0	equ	0xFEE
 11485                           wreg	equ	0xFE8
 11486                           indf1	equ	0xFE7
 11487                           fsr1h	equ	0xFE2
 11488                           fsr1l	equ	0xFE1
 11489                           indf2	equ	0xFDF
 11490                           postinc2	equ	0xFDE
 11491                           postdec2	equ	0xFDD
 11492                           plusw2	equ	0xFDB
 11493                           fsr2h	equ	0xFDA
 11494                           fsr2l	equ	0xFD9
 11495                           status	equ	0xFD8
 11496                           
 11497 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 11498 ;; Defined at:
 11499 ;;		line 2395 in file "../main.c"
 11500 ;; Parameters:    Size  Location     Type
 11501 ;;		None
 11502 ;; Auto vars:     Size  Location     Type
 11503 ;;		None
 11504 ;; Return value:  Size  Location     Type
 11505 ;;                  1    wreg      unsigned char 
 11506 ;; Registers used:
 11507 ;;		wreg
 11508 ;; Tracked objects:
 11509 ;;		On entry : F/0
 11510 ;;		On exit  : F/0
 11511 ;;		Unchanged: F/0
 11512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11513 ;;      Params:         0       0       0       0       0       0       0
 11514 ;;      Locals:         0       0       0       0       0       0       0
 11515 ;;      Temps:          0       0       0       0       0       0       0
 11516 ;;      Totals:         0       0       0       0       0       0       0
 11517 ;;Total ram usage:        0 bytes
 11518 ;; Hardware stack levels used:    1
 11519 ;; Hardware stack levels required when called:    2
 11520 ;; This function calls:
 11521 ;;		Nothing
 11522 ;; This function is called by:
 11523 ;;		_vscp_readStdReg
 11524 ;; This function uses a non-reentrant model
 11525 ;;
 11526                           
 11527                           	psect	text33
 11528  003DE4                     __ptext33:
 11529                           	opt stack 0
 11530  003DE4                     _vscp_getBootLoaderAlgorithm:
 11531                           	opt stack 26
 11532                           
 11533                           ; BSR set to: 0
 11534                           
 11535                           ; BSR set to: 0
 11536                           ;main.c: 2396: return 0x01;
 11537                           
 11538                           ; BSR set to: 0
 11539                           ;incstack = 0
 11540                           ;incstack = 0
 11541  003DE4  0C01               	retlw	1
 11542  003DE6                     __end_of_vscp_getBootLoaderAlgorithm:
 11543                           	opt stack 0
 11544                           tblptru	equ	0xFF8
 11545                           tblptrh	equ	0xFF7
 11546                           tblptrl	equ	0xFF6
 11547                           tablat	equ	0xFF5
 11548                           prodh	equ	0xFF4
 11549                           prodl	equ	0xFF3
 11550                           intcon	equ	0xFF2
 11551                           postinc0	equ	0xFEE
 11552                           wreg	equ	0xFE8
 11553                           indf1	equ	0xFE7
 11554                           fsr1h	equ	0xFE2
 11555                           fsr1l	equ	0xFE1
 11556                           indf2	equ	0xFDF
 11557                           postinc2	equ	0xFDE
 11558                           postdec2	equ	0xFDD
 11559                           plusw2	equ	0xFDB
 11560                           fsr2h	equ	0xFDA
 11561                           fsr2l	equ	0xFD9
 11562                           status	equ	0xFD8
 11563                           
 11564 ;; *************** function _vscp_getManufacturerId *****************
 11565 ;; Defined at:
 11566 ;;		line 2386 in file "../main.c"
 11567 ;; Parameters:    Size  Location     Type
 11568 ;;  idx             1    wreg     unsigned char 
 11569 ;; Auto vars:     Size  Location     Type
 11570 ;;  idx             1    9[COMRAM] unsigned char 
 11571 ;; Return value:  Size  Location     Type
 11572 ;;                  1    wreg      unsigned char 
 11573 ;; Registers used:
 11574 ;;		wreg, status,2, status,0, cstack
 11575 ;; Tracked objects:
 11576 ;;		On entry : 0/0
 11577 ;;		On exit  : 0/0
 11578 ;;		Unchanged: 0/0
 11579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11580 ;;      Params:         0       0       0       0       0       0       0
 11581 ;;      Locals:         1       0       0       0       0       0       0
 11582 ;;      Temps:          0       0       0       0       0       0       0
 11583 ;;      Totals:         1       0       0       0       0       0       0
 11584 ;;Total ram usage:        1 bytes
 11585 ;; Hardware stack levels used:    1
 11586 ;; Hardware stack levels required when called:    3
 11587 ;; This function calls:
 11588 ;;		_Read_b_eep
 11589 ;; This function is called by:
 11590 ;;		_vscp_readStdReg
 11591 ;;		_vscp_writeStdReg
 11592 ;; This function uses a non-reentrant model
 11593 ;;
 11594                           
 11595                           	psect	text34
 11596  003D1E                     __ptext34:
 11597                           	opt stack 0
 11598  003D1E                     _vscp_getManufacturerId:
 11599                           	opt stack 25
 11600                           
 11601                           ; BSR set to: 0
 11602                           ;incstack = 0
 11603                           ;incstack = 0
 11604                           ;vscp_getManufacturerId@idx stored from wreg
 11605  003D1E  CFE8 F00A          	movff	wreg,vscp_getManufacturerId@idx
 11606                           
 11607                           ;main.c: 2387: return Read_b_eep(0x0B + idx);
 11608  003D22  0E0B               	movlw	11
 11609  003D24  240A               	addwf	vscp_getManufacturerId@idx,w,c
 11610  003D26  6E08               	movwf	?_Read_b_eep,c
 11611  003D28  6A09               	clrf	?_Read_b_eep+1,c
 11612  003D2A  0E00               	movlw	0
 11613  003D2C  2209               	addwfc	?_Read_b_eep+1,f,c
 11614  003D2E  EFB6  F01E         	goto	_Read_b_eep	;wreg free
 11615  003D32                     __end_of_vscp_getManufacturerId:
 11616                           	opt stack 0
 11617                           tblptru	equ	0xFF8
 11618                           tblptrh	equ	0xFF7
 11619                           tblptrl	equ	0xFF6
 11620                           tablat	equ	0xFF5
 11621                           prodh	equ	0xFF4
 11622                           prodl	equ	0xFF3
 11623                           intcon	equ	0xFF2
 11624                           postinc0	equ	0xFEE
 11625                           wreg	equ	0xFE8
 11626                           indf1	equ	0xFE7
 11627                           fsr1h	equ	0xFE2
 11628                           fsr1l	equ	0xFE1
 11629                           indf2	equ	0xFDF
 11630                           postinc2	equ	0xFDE
 11631                           postdec2	equ	0xFDD
 11632                           plusw2	equ	0xFDB
 11633                           fsr2h	equ	0xFDA
 11634                           fsr2l	equ	0xFD9
 11635                           status	equ	0xFD8
 11636                           
 11637 ;; *************** function _vscp_getUserID *****************
 11638 ;; Defined at:
 11639 ;;		line 2366 in file "../main.c"
 11640 ;; Parameters:    Size  Location     Type
 11641 ;;  idx             1    wreg     unsigned char 
 11642 ;; Auto vars:     Size  Location     Type
 11643 ;;  idx             1    9[COMRAM] unsigned char 
 11644 ;; Return value:  Size  Location     Type
 11645 ;;                  1    wreg      unsigned char 
 11646 ;; Registers used:
 11647 ;;		wreg, status,2, status,0, cstack
 11648 ;; Tracked objects:
 11649 ;;		On entry : 0/0
 11650 ;;		On exit  : 0/0
 11651 ;;		Unchanged: 0/0
 11652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11653 ;;      Params:         0       0       0       0       0       0       0
 11654 ;;      Locals:         1       0       0       0       0       0       0
 11655 ;;      Temps:          0       0       0       0       0       0       0
 11656 ;;      Totals:         1       0       0       0       0       0       0
 11657 ;;Total ram usage:        1 bytes
 11658 ;; Hardware stack levels used:    1
 11659 ;; Hardware stack levels required when called:    3
 11660 ;; This function calls:
 11661 ;;		_Read_b_eep
 11662 ;; This function is called by:
 11663 ;;		_vscp_readStdReg
 11664 ;;		_vscp_writeStdReg
 11665 ;; This function uses a non-reentrant model
 11666 ;;
 11667                           
 11668                           	psect	text35
 11669  003D32                     __ptext35:
 11670                           	opt stack 0
 11671  003D32                     _vscp_getUserID:
 11672                           	opt stack 25
 11673                           
 11674                           ;incstack = 0
 11675                           ;incstack = 0
 11676                           ;vscp_getUserID@idx stored from wreg
 11677  003D32  CFE8 F00A          	movff	wreg,vscp_getUserID@idx
 11678                           
 11679                           ;main.c: 2367: return Read_b_eep(0x06 + idx);
 11680  003D36  0E06               	movlw	6
 11681  003D38  240A               	addwf	vscp_getUserID@idx,w,c
 11682  003D3A  6E08               	movwf	?_Read_b_eep,c
 11683  003D3C  6A09               	clrf	?_Read_b_eep+1,c
 11684  003D3E  0E00               	movlw	0
 11685  003D40  2209               	addwfc	?_Read_b_eep+1,f,c
 11686  003D42  EFB6  F01E         	goto	_Read_b_eep	;wreg free
 11687  003D46                     __end_of_vscp_getUserID:
 11688                           	opt stack 0
 11689                           tblptru	equ	0xFF8
 11690                           tblptrh	equ	0xFF7
 11691                           tblptrl	equ	0xFF6
 11692                           tablat	equ	0xFF5
 11693                           prodh	equ	0xFF4
 11694                           prodl	equ	0xFF3
 11695                           intcon	equ	0xFF2
 11696                           postinc0	equ	0xFEE
 11697                           wreg	equ	0xFE8
 11698                           indf1	equ	0xFE7
 11699                           fsr1h	equ	0xFE2
 11700                           fsr1l	equ	0xFE1
 11701                           indf2	equ	0xFDF
 11702                           postinc2	equ	0xFDE
 11703                           postdec2	equ	0xFDD
 11704                           plusw2	equ	0xFDB
 11705                           fsr2h	equ	0xFDA
 11706                           fsr2l	equ	0xFD9
 11707                           status	equ	0xFD8
 11708                           
 11709 ;; *************** function _vscp_getMDF_URL *****************
 11710 ;; Defined at:
 11711 ;;		line 2357 in file "../main.c"
 11712 ;; Parameters:    Size  Location     Type
 11713 ;;  idx             1    wreg     unsigned char 
 11714 ;; Auto vars:     Size  Location     Type
 11715 ;;  idx             1    8[COMRAM] unsigned char 
 11716 ;; Return value:  Size  Location     Type
 11717 ;;                  1    wreg      unsigned char 
 11718 ;; Registers used:
 11719 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11720 ;; Tracked objects:
 11721 ;;		On entry : F/0
 11722 ;;		On exit  : F/0
 11723 ;;		Unchanged: F/0
 11724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11725 ;;      Params:         0       0       0       0       0       0       0
 11726 ;;      Locals:         1       0       0       0       0       0       0
 11727 ;;      Temps:          1       0       0       0       0       0       0
 11728 ;;      Totals:         2       0       0       0       0       0       0
 11729 ;;Total ram usage:        2 bytes
 11730 ;; Hardware stack levels used:    1
 11731 ;; Hardware stack levels required when called:    2
 11732 ;; This function calls:
 11733 ;;		Nothing
 11734 ;; This function is called by:
 11735 ;;		_vscp_readStdReg
 11736 ;;		_vscp_handleProtocolEvent
 11737 ;; This function uses a non-reentrant model
 11738 ;;
 11739                           
 11740                           	psect	text36
 11741  003CAC                     __ptext36:
 11742                           	opt stack 0
 11743  003CAC                     _vscp_getMDF_URL:
 11744                           	opt stack 26
 11745                           
 11746                           ;incstack = 0
 11747                           ;incstack = 0
 11748                           ;vscp_getMDF_URL@idx stored from wreg
 11749  003CAC  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
 11750                           
 11751                           ; BSR set to: 0
 11752                           ;main.c: 2358: return vscp_deviceURL[ idx ];
 11753  003CB0  5009               	movf	vscp_getMDF_URL@idx,w,c
 11754  003CB2  0F00               	addlw	low _vscp_deviceURL
 11755  003CB4  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
 11756  003CB6  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 11757  003CBA  0E06               	movlw	high __smallconst
 11758  003CBC  6EF7               	movwf	tblptrh,c
 11759  003CBE  0008               	tblrd		*
 11760  003CC0  50F5               	movf	tablat,w,c
 11761                           
 11762                           ; BSR set to: 0
 11763  003CC2  0012               	return	
 11764  003CC4                     __end_of_vscp_getMDF_URL:
 11765                           	opt stack 0
 11766                           tblptru	equ	0xFF8
 11767                           tblptrh	equ	0xFF7
 11768                           tblptrl	equ	0xFF6
 11769                           tablat	equ	0xFF5
 11770                           prodh	equ	0xFF4
 11771                           prodl	equ	0xFF3
 11772                           intcon	equ	0xFF2
 11773                           postinc0	equ	0xFEE
 11774                           wreg	equ	0xFE8
 11775                           indf1	equ	0xFE7
 11776                           fsr1h	equ	0xFE2
 11777                           fsr1l	equ	0xFE1
 11778                           indf2	equ	0xFDF
 11779                           postinc2	equ	0xFDE
 11780                           postdec2	equ	0xFDD
 11781                           plusw2	equ	0xFDB
 11782                           fsr2h	equ	0xFDA
 11783                           fsr2l	equ	0xFD9
 11784                           status	equ	0xFD8
 11785                           
 11786 ;; *************** function _vscp_getGUID *****************
 11787 ;; Defined at:
 11788 ;;		line 2345 in file "../main.c"
 11789 ;; Parameters:    Size  Location     Type
 11790 ;;  idx             1    wreg     unsigned char 
 11791 ;; Auto vars:     Size  Location     Type
 11792 ;;  idx             1    9[COMRAM] unsigned char 
 11793 ;; Return value:  Size  Location     Type
 11794 ;;                  1    wreg      unsigned char 
 11795 ;; Registers used:
 11796 ;;		wreg, status,2, status,0, cstack
 11797 ;; Tracked objects:
 11798 ;;		On entry : 0/0
 11799 ;;		On exit  : 0/0
 11800 ;;		Unchanged: 0/0
 11801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11802 ;;      Params:         0       0       0       0       0       0       0
 11803 ;;      Locals:         1       0       0       0       0       0       0
 11804 ;;      Temps:          0       0       0       0       0       0       0
 11805 ;;      Totals:         1       0       0       0       0       0       0
 11806 ;;Total ram usage:        1 bytes
 11807 ;; Hardware stack levels used:    1
 11808 ;; Hardware stack levels required when called:    3
 11809 ;; This function calls:
 11810 ;;		_Read_b_eep
 11811 ;; This function is called by:
 11812 ;;		_vscp_readStdReg
 11813 ;;		_vscp_writeStdReg
 11814 ;;		_vscp_handleProtocolEvent
 11815 ;; This function uses a non-reentrant model
 11816 ;;
 11817                           
 11818                           	psect	text37
 11819  003D46                     __ptext37:
 11820                           	opt stack 0
 11821  003D46                     _vscp_getGUID:
 11822                           	opt stack 25
 11823                           
 11824                           ; BSR set to: 0
 11825                           ;incstack = 0
 11826                           ;incstack = 0
 11827                           ;vscp_getGUID@idx stored from wreg
 11828  003D46  CFE8 F00A          	movff	wreg,vscp_getGUID@idx
 11829                           
 11830                           ;main.c: 2346: return Read_b_eep(0x13 + idx);
 11831  003D4A  0E13               	movlw	19
 11832  003D4C  240A               	addwf	vscp_getGUID@idx,w,c
 11833  003D4E  6E08               	movwf	?_Read_b_eep,c
 11834  003D50  6A09               	clrf	?_Read_b_eep+1,c
 11835  003D52  0E00               	movlw	0
 11836  003D54  2209               	addwfc	?_Read_b_eep+1,f,c
 11837  003D56  EFB6  F01E         	goto	_Read_b_eep	;wreg free
 11838  003D5A                     __end_of_vscp_getGUID:
 11839                           	opt stack 0
 11840                           tblptru	equ	0xFF8
 11841                           tblptrh	equ	0xFF7
 11842                           tblptrl	equ	0xFF6
 11843                           tablat	equ	0xFF5
 11844                           prodh	equ	0xFF4
 11845                           prodl	equ	0xFF3
 11846                           intcon	equ	0xFF2
 11847                           postinc0	equ	0xFEE
 11848                           wreg	equ	0xFE8
 11849                           indf1	equ	0xFE7
 11850                           fsr1h	equ	0xFE2
 11851                           fsr1l	equ	0xFE1
 11852                           indf2	equ	0xFDF
 11853                           postinc2	equ	0xFDE
 11854                           postdec2	equ	0xFDD
 11855                           plusw2	equ	0xFDB
 11856                           fsr2h	equ	0xFDA
 11857                           fsr2l	equ	0xFD9
 11858                           status	equ	0xFD8
 11859                           
 11860 ;; *************** function _vscp_getSubMinorVersion *****************
 11861 ;; Defined at:
 11862 ;;		line 2334 in file "../main.c"
 11863 ;; Parameters:    Size  Location     Type
 11864 ;;		None
 11865 ;; Auto vars:     Size  Location     Type
 11866 ;;		None
 11867 ;; Return value:  Size  Location     Type
 11868 ;;                  1    wreg      unsigned char 
 11869 ;; Registers used:
 11870 ;;		wreg
 11871 ;; Tracked objects:
 11872 ;;		On entry : F/0
 11873 ;;		On exit  : F/0
 11874 ;;		Unchanged: F/0
 11875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11876 ;;      Params:         0       0       0       0       0       0       0
 11877 ;;      Locals:         0       0       0       0       0       0       0
 11878 ;;      Temps:          0       0       0       0       0       0       0
 11879 ;;      Totals:         0       0       0       0       0       0       0
 11880 ;;Total ram usage:        0 bytes
 11881 ;; Hardware stack levels used:    1
 11882 ;; Hardware stack levels required when called:    2
 11883 ;; This function calls:
 11884 ;;		Nothing
 11885 ;; This function is called by:
 11886 ;;		_vscp_readStdReg
 11887 ;; This function uses a non-reentrant model
 11888 ;;
 11889                           
 11890                           	psect	text38
 11891  003DE6                     __ptext38:
 11892                           	opt stack 0
 11893  003DE6                     _vscp_getSubMinorVersion:
 11894                           	opt stack 26
 11895                           
 11896                           ; BSR set to: 0
 11897                           
 11898                           ; BSR set to: 0
 11899                           ;main.c: 2335: return 2;
 11900                           
 11901                           ;incstack = 0
 11902                           ;incstack = 0
 11903  003DE6  0C02               	retlw	2
 11904  003DE8                     __end_of_vscp_getSubMinorVersion:
 11905                           	opt stack 0
 11906                           tblptru	equ	0xFF8
 11907                           tblptrh	equ	0xFF7
 11908                           tblptrl	equ	0xFF6
 11909                           tablat	equ	0xFF5
 11910                           prodh	equ	0xFF4
 11911                           prodl	equ	0xFF3
 11912                           intcon	equ	0xFF2
 11913                           postinc0	equ	0xFEE
 11914                           wreg	equ	0xFE8
 11915                           indf1	equ	0xFE7
 11916                           fsr1h	equ	0xFE2
 11917                           fsr1l	equ	0xFE1
 11918                           indf2	equ	0xFDF
 11919                           postinc2	equ	0xFDE
 11920                           postdec2	equ	0xFDD
 11921                           plusw2	equ	0xFDB
 11922                           fsr2h	equ	0xFDA
 11923                           fsr2l	equ	0xFD9
 11924                           status	equ	0xFD8
 11925                           
 11926 ;; *************** function _vscp_getMinorVersion *****************
 11927 ;; Defined at:
 11928 ;;		line 2325 in file "../main.c"
 11929 ;; Parameters:    Size  Location     Type
 11930 ;;		None
 11931 ;; Auto vars:     Size  Location     Type
 11932 ;;		None
 11933 ;; Return value:  Size  Location     Type
 11934 ;;                  1    wreg      unsigned char 
 11935 ;; Registers used:
 11936 ;;		wreg
 11937 ;; Tracked objects:
 11938 ;;		On entry : F/0
 11939 ;;		On exit  : F/0
 11940 ;;		Unchanged: F/0
 11941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11942 ;;      Params:         0       0       0       0       0       0       0
 11943 ;;      Locals:         0       0       0       0       0       0       0
 11944 ;;      Temps:          0       0       0       0       0       0       0
 11945 ;;      Totals:         0       0       0       0       0       0       0
 11946 ;;Total ram usage:        0 bytes
 11947 ;; Hardware stack levels used:    1
 11948 ;; Hardware stack levels required when called:    2
 11949 ;; This function calls:
 11950 ;;		Nothing
 11951 ;; This function is called by:
 11952 ;;		_vscp_readStdReg
 11953 ;; This function uses a non-reentrant model
 11954 ;;
 11955                           
 11956                           	psect	text39
 11957  003DE8                     __ptext39:
 11958                           	opt stack 0
 11959  003DE8                     _vscp_getMinorVersion:
 11960                           	opt stack 26
 11961                           
 11962                           ; BSR set to: 0
 11963                           
 11964                           ; BSR set to: 0
 11965                           ;main.c: 2326: return 1;
 11966                           
 11967                           ; BSR set to: 0
 11968                           ;incstack = 0
 11969                           ;incstack = 0
 11970  003DE8  0C01               	retlw	1
 11971  003DEA                     __end_of_vscp_getMinorVersion:
 11972                           	opt stack 0
 11973                           tblptru	equ	0xFF8
 11974                           tblptrh	equ	0xFF7
 11975                           tblptrl	equ	0xFF6
 11976                           tablat	equ	0xFF5
 11977                           prodh	equ	0xFF4
 11978                           prodl	equ	0xFF3
 11979                           intcon	equ	0xFF2
 11980                           postinc0	equ	0xFEE
 11981                           wreg	equ	0xFE8
 11982                           indf1	equ	0xFE7
 11983                           fsr1h	equ	0xFE2
 11984                           fsr1l	equ	0xFE1
 11985                           indf2	equ	0xFDF
 11986                           postinc2	equ	0xFDE
 11987                           postdec2	equ	0xFDD
 11988                           plusw2	equ	0xFDB
 11989                           fsr2h	equ	0xFDA
 11990                           fsr2l	equ	0xFD9
 11991                           status	equ	0xFD8
 11992                           
 11993 ;; *************** function _vscp_getMajorVersion *****************
 11994 ;; Defined at:
 11995 ;;		line 2316 in file "../main.c"
 11996 ;; Parameters:    Size  Location     Type
 11997 ;;		None
 11998 ;; Auto vars:     Size  Location     Type
 11999 ;;		None
 12000 ;; Return value:  Size  Location     Type
 12001 ;;                  1    wreg      unsigned char 
 12002 ;; Registers used:
 12003 ;;		wreg
 12004 ;; Tracked objects:
 12005 ;;		On entry : F/0
 12006 ;;		On exit  : F/0
 12007 ;;		Unchanged: F/0
 12008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12009 ;;      Params:         0       0       0       0       0       0       0
 12010 ;;      Locals:         0       0       0       0       0       0       0
 12011 ;;      Temps:          0       0       0       0       0       0       0
 12012 ;;      Totals:         0       0       0       0       0       0       0
 12013 ;;Total ram usage:        0 bytes
 12014 ;; Hardware stack levels used:    1
 12015 ;; Hardware stack levels required when called:    2
 12016 ;; This function calls:
 12017 ;;		Nothing
 12018 ;; This function is called by:
 12019 ;;		_vscp_readStdReg
 12020 ;; This function uses a non-reentrant model
 12021 ;;
 12022                           
 12023                           	psect	text40
 12024  003DEA                     __ptext40:
 12025                           	opt stack 0
 12026  003DEA                     _vscp_getMajorVersion:
 12027                           	opt stack 26
 12028                           
 12029                           ; BSR set to: 0
 12030                           
 12031                           ; BSR set to: 0
 12032                           ;main.c: 2317: return 1;
 12033                           
 12034                           ; BSR set to: 0
 12035                           ;incstack = 0
 12036                           ;incstack = 0
 12037  003DEA  0C01               	retlw	1
 12038  003DEC                     __end_of_vscp_getMajorVersion:
 12039                           	opt stack 0
 12040                           tblptru	equ	0xFF8
 12041                           tblptrh	equ	0xFF7
 12042                           tblptrl	equ	0xFF6
 12043                           tablat	equ	0xFF5
 12044                           prodh	equ	0xFF4
 12045                           prodl	equ	0xFF3
 12046                           intcon	equ	0xFF2
 12047                           postinc0	equ	0xFEE
 12048                           wreg	equ	0xFE8
 12049                           indf1	equ	0xFE7
 12050                           fsr1h	equ	0xFE2
 12051                           fsr1l	equ	0xFE1
 12052                           indf2	equ	0xFDF
 12053                           postinc2	equ	0xFDE
 12054                           postdec2	equ	0xFDD
 12055                           plusw2	equ	0xFDB
 12056                           fsr2h	equ	0xFDA
 12057                           fsr2l	equ	0xFD9
 12058                           status	equ	0xFD8
 12059                           
 12060 ;; *************** function _vscp_newNodeOnline *****************
 12061 ;; Defined at:
 12062 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 12063 ;; Parameters:    Size  Location     Type
 12064 ;;		None
 12065 ;; Auto vars:     Size  Location     Type
 12066 ;;		None
 12067 ;; Return value:  Size  Location     Type
 12068 ;;		None               void
 12069 ;; Registers used:
 12070 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12071 ;; Tracked objects:
 12072 ;;		On entry : F/0
 12073 ;;		On exit  : F/0
 12074 ;;		Unchanged: 0/0
 12075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12076 ;;      Params:         0       0       0       0       0       0       0
 12077 ;;      Locals:         0       0       0       0       0       0       0
 12078 ;;      Temps:          1       0       0       0       0       0       0
 12079 ;;      Totals:         1       0       0       0       0       0       0
 12080 ;;Total ram usage:        1 bytes
 12081 ;; Hardware stack levels used:    1
 12082 ;; Hardware stack levels required when called:    7
 12083 ;; This function calls:
 12084 ;;		_vscp_sendEvent
 12085 ;; This function is called by:
 12086 ;;		_vscp_handleProtocolEvent
 12087 ;; This function uses a non-reentrant model
 12088 ;;
 12089                           
 12090                           	psect	text41
 12091  003A5E                     __ptext41:
 12092                           	opt stack 0
 12093  003A5E                     _vscp_newNodeOnline:
 12094                           	opt stack 22
 12095                           
 12096                           ; BSR set to: 0
 12097                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 12098                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12099                           
 12100                           ; BSR set to: 0
 12101                           ;incstack = 0
 12102                           ;incstack = 0
 12103  003A5E  C096  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
 12104  003A62  0E0F               	movlw	15
 12105  003A64  164C               	andwf	??_vscp_newNodeOnline,f,c
 12106  003A66  044C               	decf	??_vscp_newNodeOnline,w,c
 12107  003A68  E10E               	bnz	l1113
 12108                           
 12109                           ; BSR set to: 0
 12110  003A6A  5191               	movf	_vscp_nickname& (0+255),w,b
 12111  003A6C  EE20  F09C         	lfsr	2,_vscp_imsg+6
 12112  003A70  62DF               	cpfseq	indf2,c
 12113  003A72  D009               	goto	l1113
 12114                           
 12115                           ; BSR set to: 0
 12116                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 12117  003A74  0E80               	movlw	128
 12118  003A76  6FA4               	movwf	_vscp_omsg& (0+255),b
 12119                           
 12120                           ; BSR set to: 0
 12121                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 12122  003A78  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12123                           
 12124                           ; BSR set to: 0
 12125                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 12126  003A7A  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12127  003A7C  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12128                           
 12129                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 12130  003A7E  0E03               	movlw	3
 12131  003A80  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12132                           
 12133                           ; BSR set to: 0
 12134                           ;vscp_firmware.c: 514: vscp_sendEvent();
 12135  003A82  ECA6  F01D         	call	_vscp_sendEvent	;wreg free
 12136  003A86                     l1113:
 12137                           
 12138                           ; BSR set to: 0
 12139  003A86  0012               	return	
 12140  003A88                     __end_of_vscp_newNodeOnline:
 12141                           	opt stack 0
 12142                           tblptru	equ	0xFF8
 12143                           tblptrh	equ	0xFF7
 12144                           tblptrl	equ	0xFF6
 12145                           tablat	equ	0xFF5
 12146                           prodh	equ	0xFF4
 12147                           prodl	equ	0xFF3
 12148                           intcon	equ	0xFF2
 12149                           postinc0	equ	0xFEE
 12150                           wreg	equ	0xFE8
 12151                           indf1	equ	0xFE7
 12152                           fsr1h	equ	0xFE2
 12153                           fsr1l	equ	0xFE1
 12154                           indf2	equ	0xFDF
 12155                           postinc2	equ	0xFDE
 12156                           postdec2	equ	0xFDD
 12157                           plusw2	equ	0xFDB
 12158                           fsr2h	equ	0xFDA
 12159                           fsr2l	equ	0xFD9
 12160                           status	equ	0xFD8
 12161                           
 12162 ;; *************** function _vscp_handleDropNickname *****************
 12163 ;; Defined at:
 12164 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 12165 ;; Parameters:    Size  Location     Type
 12166 ;;		None
 12167 ;; Auto vars:     Size  Location     Type
 12168 ;;  bytes           1   12[COMRAM] unsigned char 
 12169 ;; Return value:  Size  Location     Type
 12170 ;;		None               void
 12171 ;; Registers used:
 12172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12173 ;; Tracked objects:
 12174 ;;		On entry : F/0
 12175 ;;		On exit  : F/0
 12176 ;;		Unchanged: 0/0
 12177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12178 ;;      Params:         0       0       0       0       0       0       0
 12179 ;;      Locals:         1       0       0       0       0       0       0
 12180 ;;      Temps:          0       0       0       0       0       0       0
 12181 ;;      Totals:         1       0       0       0       0       0       0
 12182 ;;Total ram usage:        1 bytes
 12183 ;; Hardware stack levels used:    1
 12184 ;; Hardware stack levels required when called:    5
 12185 ;; This function calls:
 12186 ;;		_vscp_init
 12187 ;;		_vscp_writeNicknamePermanent
 12188 ;; This function is called by:
 12189 ;;		_vscp_handleProtocolEvent
 12190 ;; This function uses a non-reentrant model
 12191 ;;
 12192                           
 12193                           	psect	text42
 12194  0039D2                     __ptext42:
 12195                           	opt stack 0
 12196  0039D2                     _vscp_handleDropNickname:
 12197                           	opt stack 24
 12198                           
 12199                           ; BSR set to: 0
 12200                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 12201                           
 12202                           ; BSR set to: 0
 12203                           ;incstack = 0
 12204                           ;incstack = 0
 12205  0039D2  5196               	movf	_vscp_imsg& (0+255),w,b
 12206  0039D4  0B0F               	andlw	15
 12207  0039D6  6E0D               	movwf	vscp_handleDropNickname@bytes,c
 12208                           
 12209                           ; BSR set to: 0
 12210                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12211  0039D8  500D               	movf	vscp_handleDropNickname@bytes,w,c
 12212  0039DA  E012               	bz	l1109
 12213                           
 12214                           ; BSR set to: 0
 12215  0039DC  5191               	movf	_vscp_nickname& (0+255),w,b
 12216  0039DE  EE20  F09C         	lfsr	2,_vscp_imsg+6
 12217  0039E2  62DF               	cpfseq	indf2,c
 12218  0039E4  D00D               	goto	l1109
 12219                           
 12220                           ; BSR set to: 0
 12221                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 12222  0039E6  040D               	decf	vscp_handleDropNickname@bytes,w,c
 12223  0039E8  E005               	bz	l1108
 12224                           
 12225                           ; BSR set to: 0
 12226  0039EA  0E01               	movlw	1
 12227  0039EC  640D               	cpfsgt	vscp_handleDropNickname@bytes,c
 12228  0039EE  D008               	goto	l1109
 12229                           
 12230                           ; BSR set to: 0
 12231  0039F0  679D               	tstfsz	(_vscp_imsg+7)& (0+255),b
 12232  0039F2  D006               	goto	l1109
 12233  0039F4                     l1108:
 12234                           
 12235                           ; BSR set to: 0
 12236                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 12237  0039F4  6991               	setf	_vscp_nickname& (0+255),b
 12238                           
 12239                           ; BSR set to: 0
 12240                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 12241  0039F6  0EFF               	movlw	255
 12242  0039F8  EC84  F01E         	call	_vscp_writeNicknamePermanent
 12243                           
 12244                           ;vscp_firmware.c: 481: vscp_init();
 12245  0039FC  EC6F  F01C         	call	_vscp_init	;wreg free
 12246  003A00                     l1109:
 12247                           
 12248                           ; BSR set to: 0
 12249  003A00  0012               	return	
 12250  003A02                     __end_of_vscp_handleDropNickname:
 12251                           	opt stack 0
 12252                           tblptru	equ	0xFF8
 12253                           tblptrh	equ	0xFF7
 12254                           tblptrl	equ	0xFF6
 12255                           tablat	equ	0xFF5
 12256                           prodh	equ	0xFF4
 12257                           prodl	equ	0xFF3
 12258                           intcon	equ	0xFF2
 12259                           postinc0	equ	0xFEE
 12260                           wreg	equ	0xFE8
 12261                           indf1	equ	0xFE7
 12262                           fsr1h	equ	0xFE2
 12263                           fsr1l	equ	0xFE1
 12264                           indf2	equ	0xFDF
 12265                           postinc2	equ	0xFDE
 12266                           postdec2	equ	0xFDD
 12267                           plusw2	equ	0xFDB
 12268                           fsr2h	equ	0xFDA
 12269                           fsr2l	equ	0xFD9
 12270                           status	equ	0xFD8
 12271                           
 12272 ;; *************** function _vscp_init *****************
 12273 ;; Defined at:
 12274 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 12275 ;; Parameters:    Size  Location     Type
 12276 ;;		None
 12277 ;; Auto vars:     Size  Location     Type
 12278 ;;		None
 12279 ;; Return value:  Size  Location     Type
 12280 ;;		None               void
 12281 ;; Registers used:
 12282 ;;		wreg, status,2, cstack
 12283 ;; Tracked objects:
 12284 ;;		On entry : 0/0
 12285 ;;		On exit  : F/0
 12286 ;;		Unchanged: 0/0
 12287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12288 ;;      Params:         0       0       0       0       0       0       0
 12289 ;;      Locals:         0       0       0       0       0       0       0
 12290 ;;      Temps:          0       0       0       0       0       0       0
 12291 ;;      Totals:         0       0       0       0       0       0       0
 12292 ;;Total ram usage:        0 bytes
 12293 ;; Hardware stack levels used:    1
 12294 ;; Hardware stack levels required when called:    4
 12295 ;; This function calls:
 12296 ;;		_vscp_readNicknamePermanent
 12297 ;; This function is called by:
 12298 ;;		_main
 12299 ;;		_vscp_handleDropNickname
 12300 ;;		_vscp_handleProtocolEvent
 12301 ;; This function uses a non-reentrant model
 12302 ;;
 12303                           
 12304                           	psect	text43
 12305  0038DE                     __ptext43:
 12306                           	opt stack 0
 12307  0038DE                     _vscp_init:
 12308                           	opt stack 24
 12309                           
 12310                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 12311                           
 12312                           ; BSR set to: 0
 12313                           ;incstack = 0
 12314                           ;incstack = 0
 12315  0038DE  0E02               	movlw	2
 12316  0038E0  6E56               	movwf	_vscp_initledfunc,c
 12317                           
 12318                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 12319  0038E2  ECDC  F01E         	call	_vscp_readNicknamePermanent	;wreg free
 12320  0038E6  0100               	movlb	0	; () banked
 12321  0038E8  6F91               	movwf	_vscp_nickname& (0+255),b
 12322                           
 12323                           ; BSR set to: 0
 12324                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 12325  0038EA  6791               	tstfsz	_vscp_nickname& (0+255),b
 12326  0038EC  D001               	goto	l1050
 12327                           
 12328                           ; BSR set to: 0
 12329  0038EE  6991               	setf	_vscp_nickname& (0+255),b
 12330  0038F0                     l1050:
 12331                           
 12332                           ; BSR set to: 0
 12333                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 12334  0038F0  6B96               	clrf	_vscp_imsg& (0+255),b
 12335                           
 12336                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 12337  0038F2  6B97               	clrf	(_vscp_imsg+1)& (0+255),b
 12338                           
 12339                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 12340  0038F4  6B98               	clrf	(_vscp_imsg+2)& (0+255),b
 12341  0038F6  6B99               	clrf	(_vscp_imsg+3)& (0+255),b
 12342                           
 12343                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 12344  0038F8  6B9A               	clrf	(_vscp_imsg+4)& (0+255),b
 12345                           
 12346                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 12347  0038FA  6BA4               	clrf	_vscp_omsg& (0+255),b
 12348                           
 12349                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 12350  0038FC  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12351                           
 12352                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 12353  0038FE  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12354  003900  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12355                           
 12356                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 12357  003902  6BA8               	clrf	(_vscp_omsg+4)& (0+255),b
 12358                           
 12359                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 12360  003904  6A55               	clrf	_vscp_alarmstatus,c
 12361                           
 12362                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 12363  003906  6A57               	clrf	_vscp_probe_address,c
 12364                           
 12365                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 12366  003908  6B92               	clrf	_vscp_node_state& (0+255),b
 12367                           
 12368                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 12369  00390A  6B93               	clrf	_vscp_node_substate& (0+255),b
 12370                           
 12371                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 12372  00390C  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12373                           
 12374                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 12375  00390E  6A52               	clrf	_vscp_page_select,c
 12376  003910  6A53               	clrf	_vscp_page_select+1,c
 12377                           
 12378                           ;vscp_firmware.c: 153: vscp_timer = 0;
 12379  003912  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12380  003914  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12381                           
 12382                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 12383  003916  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
 12384  003918  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 12385                           
 12386                           ;vscp_firmware.c: 155: vscp_second = 0;
 12387  00391A  6B95               	clrf	_vscp_second& (0+255),b
 12388                           
 12389                           ;vscp_firmware.c: 156: vscp_minute = 0;
 12390  00391C  6B90               	clrf	_vscp_minute& (0+255),b
 12391                           
 12392                           ;vscp_firmware.c: 157: vscp_hour = 0;
 12393  00391E  6B8E               	clrf	_vscp_hour& (0+255),b
 12394                           
 12395                           ; BSR set to: 0
 12396  003920  0012               	return	
 12397  003922                     __end_of_vscp_init:
 12398                           	opt stack 0
 12399                           tblptru	equ	0xFF8
 12400                           tblptrh	equ	0xFF7
 12401                           tblptrl	equ	0xFF6
 12402                           tablat	equ	0xFF5
 12403                           prodh	equ	0xFF4
 12404                           prodl	equ	0xFF3
 12405                           intcon	equ	0xFF2
 12406                           postinc0	equ	0xFEE
 12407                           wreg	equ	0xFE8
 12408                           indf1	equ	0xFE7
 12409                           fsr1h	equ	0xFE2
 12410                           fsr1l	equ	0xFE1
 12411                           indf2	equ	0xFDF
 12412                           postinc2	equ	0xFDE
 12413                           postdec2	equ	0xFDD
 12414                           plusw2	equ	0xFDB
 12415                           fsr2h	equ	0xFDA
 12416                           fsr2l	equ	0xFD9
 12417                           status	equ	0xFD8
 12418                           
 12419 ;; *************** function _vscp_readNicknamePermanent *****************
 12420 ;; Defined at:
 12421 ;;		line 847 in file "../main.c"
 12422 ;; Parameters:    Size  Location     Type
 12423 ;;		None
 12424 ;; Auto vars:     Size  Location     Type
 12425 ;;		None
 12426 ;; Return value:  Size  Location     Type
 12427 ;;                  1    wreg      unsigned char 
 12428 ;; Registers used:
 12429 ;;		wreg, status,2, cstack
 12430 ;; Tracked objects:
 12431 ;;		On entry : 0/0
 12432 ;;		On exit  : 0/0
 12433 ;;		Unchanged: 0/0
 12434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12435 ;;      Params:         0       0       0       0       0       0       0
 12436 ;;      Locals:         0       0       0       0       0       0       0
 12437 ;;      Temps:          0       0       0       0       0       0       0
 12438 ;;      Totals:         0       0       0       0       0       0       0
 12439 ;;Total ram usage:        0 bytes
 12440 ;; Hardware stack levels used:    1
 12441 ;; Hardware stack levels required when called:    3
 12442 ;; This function calls:
 12443 ;;		_Read_b_eep
 12444 ;; This function is called by:
 12445 ;;		_vscp_init
 12446 ;; This function uses a non-reentrant model
 12447 ;;
 12448                           
 12449                           	psect	text44
 12450  003DB8                     __ptext44:
 12451                           	opt stack 0
 12452  003DB8                     _vscp_readNicknamePermanent:
 12453                           	opt stack 24
 12454                           
 12455                           ;main.c: 848: return Read_b_eep(0x01);
 12456                           
 12457                           ; BSR set to: 0
 12458                           ;incstack = 0
 12459                           ;incstack = 0
 12460  003DB8  6A09               	clrf	?_Read_b_eep+1,c
 12461  003DBA  0E01               	movlw	1
 12462  003DBC  6E08               	movwf	?_Read_b_eep,c
 12463  003DBE  EFB6  F01E         	goto	_Read_b_eep	;wreg free
 12464  003DC2                     __end_of_vscp_readNicknamePermanent:
 12465                           	opt stack 0
 12466                           tblptru	equ	0xFF8
 12467                           tblptrh	equ	0xFF7
 12468                           tblptrl	equ	0xFF6
 12469                           tablat	equ	0xFF5
 12470                           prodh	equ	0xFF4
 12471                           prodl	equ	0xFF3
 12472                           intcon	equ	0xFF2
 12473                           postinc0	equ	0xFEE
 12474                           wreg	equ	0xFE8
 12475                           indf1	equ	0xFE7
 12476                           fsr1h	equ	0xFE2
 12477                           fsr1l	equ	0xFE1
 12478                           indf2	equ	0xFDF
 12479                           postinc2	equ	0xFDE
 12480                           postdec2	equ	0xFDD
 12481                           plusw2	equ	0xFDB
 12482                           fsr2h	equ	0xFDA
 12483                           fsr2l	equ	0xFD9
 12484                           status	equ	0xFD8
 12485                           
 12486 ;; *************** function _vscp_handleSetNickname *****************
 12487 ;; Defined at:
 12488 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 12489 ;; Parameters:    Size  Location     Type
 12490 ;;		None
 12491 ;; Auto vars:     Size  Location     Type
 12492 ;;		None
 12493 ;; Return value:  Size  Location     Type
 12494 ;;		None               void
 12495 ;; Registers used:
 12496 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12497 ;; Tracked objects:
 12498 ;;		On entry : F/0
 12499 ;;		On exit  : 0/0
 12500 ;;		Unchanged: 0/0
 12501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12502 ;;      Params:         0       0       0       0       0       0       0
 12503 ;;      Locals:         0       0       0       0       0       0       0
 12504 ;;      Temps:          0       0       0       0       0       0       0
 12505 ;;      Totals:         0       0       0       0       0       0       0
 12506 ;;Total ram usage:        0 bytes
 12507 ;; Hardware stack levels used:    1
 12508 ;; Hardware stack levels required when called:    4
 12509 ;; This function calls:
 12510 ;;		_vscp_writeNicknamePermanent
 12511 ;;		_vscp_setSegmentCRC
 12512 ;; This function is called by:
 12513 ;;		_vscp_handleProtocolEvent
 12514 ;; This function uses a non-reentrant model
 12515 ;;
 12516                           
 12517                           	psect	text45
 12518  003B72                     __ptext45:
 12519                           	opt stack 0
 12520  003B72                     _vscp_handleSetNickname:
 12521                           	opt stack 25
 12522                           
 12523                           ; BSR set to: 0
 12524                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 12525                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12526                           
 12527                           ;incstack = 0
 12528                           ;incstack = 0
 12529  003B72  5196               	movf	_vscp_imsg& (0+255),w,b
 12530  003B74  0B0F               	andlw	15
 12531  003B76  0A02               	xorlw	2
 12532  003B78  E10D               	bnz	l1102
 12533                           
 12534                           ; BSR set to: 0
 12535  003B7A  5191               	movf	_vscp_nickname& (0+255),w,b
 12536  003B7C  EE20  F09C         	lfsr	2,_vscp_imsg+6
 12537  003B80  62DF               	cpfseq	indf2,c
 12538  003B82  D008               	goto	l1102
 12539                           
 12540                           ; BSR set to: 0
 12541                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 12542  003B84  C09D  F091         	movff	_vscp_imsg+7,_vscp_nickname
 12543                           
 12544                           ; BSR set to: 0
 12545                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 12546  003B88  5191               	movf	_vscp_nickname& (0+255),w,b
 12547  003B8A  EC84  F01E         	call	_vscp_writeNicknamePermanent
 12548                           
 12549                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 12550  003B8E  0E40               	movlw	64
 12551  003B90  EC79  F01E         	call	_vscp_setSegmentCRC
 12552  003B94                     l1102:
 12553  003B94  0012               	return	
 12554  003B96                     __end_of_vscp_handleSetNickname:
 12555                           	opt stack 0
 12556                           tblptru	equ	0xFF8
 12557                           tblptrh	equ	0xFF7
 12558                           tblptrl	equ	0xFF6
 12559                           tablat	equ	0xFF5
 12560                           prodh	equ	0xFF4
 12561                           prodl	equ	0xFF3
 12562                           intcon	equ	0xFF2
 12563                           postinc0	equ	0xFEE
 12564                           wreg	equ	0xFE8
 12565                           indf1	equ	0xFE7
 12566                           fsr1h	equ	0xFE2
 12567                           fsr1l	equ	0xFE1
 12568                           indf2	equ	0xFDF
 12569                           postinc2	equ	0xFDE
 12570                           postdec2	equ	0xFDD
 12571                           plusw2	equ	0xFDB
 12572                           fsr2h	equ	0xFDA
 12573                           fsr2l	equ	0xFD9
 12574                           status	equ	0xFD8
 12575                           
 12576 ;; *************** function _vscp_handleHeartbeat *****************
 12577 ;; Defined at:
 12578 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 12579 ;; Parameters:    Size  Location     Type
 12580 ;;		None
 12581 ;; Auto vars:     Size  Location     Type
 12582 ;;		None
 12583 ;; Return value:  Size  Location     Type
 12584 ;;		None               void
 12585 ;; Registers used:
 12586 ;;		wreg, status,2, status,0, cstack
 12587 ;; Tracked objects:
 12588 ;;		On entry : F/0
 12589 ;;		On exit  : 0/0
 12590 ;;		Unchanged: 0/0
 12591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12592 ;;      Params:         0       0       0       0       0       0       0
 12593 ;;      Locals:         0       0       0       0       0       0       0
 12594 ;;      Temps:          0       0       0       0       0       0       0
 12595 ;;      Totals:         0       0       0       0       0       0       0
 12596 ;;Total ram usage:        0 bytes
 12597 ;; Hardware stack levels used:    1
 12598 ;; Hardware stack levels required when called:    4
 12599 ;; This function calls:
 12600 ;;		_vscp_writeNicknamePermanent
 12601 ;;		_vscp_getSegmentCRC
 12602 ;;		_vscp_setSegmentCRC
 12603 ;; This function is called by:
 12604 ;;		_vscp_handleProtocolEvent
 12605 ;; This function uses a non-reentrant model
 12606 ;;
 12607                           
 12608                           	psect	text46
 12609  003922                     __ptext46:
 12610                           	opt stack 0
 12611  003922                     _vscp_handleHeartbeat:
 12612                           	opt stack 25
 12613                           
 12614                           ; BSR set to: 0
 12615                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 12616                           
 12617                           ;incstack = 0
 12618                           ;incstack = 0
 12619  003922  ECE1  F01E         	call	_vscp_getSegmentCRC	;wreg free
 12620  003926  0900               	iorlw	0
 12621  003928  E116               	bnz	l9715
 12622                           
 12623                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 12624                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 12625  00392A  0100               	movlb	0	; () banked
 12626  00392C  5196               	movf	_vscp_imsg& (0+255),w,b
 12627  00392E  0B0F               	andlw	15
 12628  003930  0A05               	xorlw	5
 12629  003932  E115               	bnz	l1098
 12630                           
 12631                           ; BSR set to: 0
 12632  003934  ECE1  F01E         	call	_vscp_getSegmentCRC	;wreg free
 12633  003938  0100               	movlb	0	; () banked
 12634  00393A  199C               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 12635  00393C  E010               	bz	l1098
 12636                           
 12637                           ; BSR set to: 0
 12638                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12639  00393E  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 12640  003940  EC79  F01E         	call	_vscp_setSegmentCRC
 12641                           
 12642                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 12643  003944  0100               	movlb	0	; () banked
 12644  003946  6991               	setf	_vscp_nickname& (0+255),b
 12645                           
 12646                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 12647  003948  0EFF               	movlw	255
 12648  00394A  EC84  F01E         	call	_vscp_writeNicknamePermanent
 12649                           
 12650                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 12651  00394E  0E01               	movlw	1
 12652  003950  0100               	movlb	0	; () banked
 12653  003952  6F92               	movwf	_vscp_node_state& (0+255),b
 12654  003954  D004               	goto	l1098
 12655  003956                     l9715:
 12656                           
 12657                           ;vscp_firmware.c: 411: else {
 12658                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12659  003956  0100               	movlb	0	; () banked
 12660  003958  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 12661  00395A  EC79  F01E         	call	_vscp_setSegmentCRC
 12662  00395E                     l1098:
 12663  00395E  0012               	return	
 12664  003960                     __end_of_vscp_handleHeartbeat:
 12665                           	opt stack 0
 12666                           tblptru	equ	0xFF8
 12667                           tblptrh	equ	0xFF7
 12668                           tblptrl	equ	0xFF6
 12669                           tablat	equ	0xFF5
 12670                           prodh	equ	0xFF4
 12671                           prodl	equ	0xFF3
 12672                           intcon	equ	0xFF2
 12673                           postinc0	equ	0xFEE
 12674                           wreg	equ	0xFE8
 12675                           indf1	equ	0xFE7
 12676                           fsr1h	equ	0xFE2
 12677                           fsr1l	equ	0xFE1
 12678                           indf2	equ	0xFDF
 12679                           postinc2	equ	0xFDE
 12680                           postdec2	equ	0xFDD
 12681                           plusw2	equ	0xFDB
 12682                           fsr2h	equ	0xFDA
 12683                           fsr2l	equ	0xFD9
 12684                           status	equ	0xFD8
 12685                           
 12686 ;; *************** function _vscp_getMatrixInfo *****************
 12687 ;; Defined at:
 12688 ;;		line 2526 in file "../main.c"
 12689 ;; Parameters:    Size  Location     Type
 12690 ;;  pData           1    wreg     PTR unsigned char 
 12691 ;;		 -> vscp_omsg(13), 
 12692 ;; Auto vars:     Size  Location     Type
 12693 ;;  pData           1    0[COMRAM] PTR unsigned char 
 12694 ;;		 -> vscp_omsg(13), 
 12695 ;;  i               1    7[COMRAM] unsigned char 
 12696 ;; Return value:  Size  Location     Type
 12697 ;;		None               void
 12698 ;; Registers used:
 12699 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12700 ;; Tracked objects:
 12701 ;;		On entry : F/0
 12702 ;;		On exit  : F/0
 12703 ;;		Unchanged: 0/0
 12704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12705 ;;      Params:         0       0       0       0       0       0       0
 12706 ;;      Locals:         1       0       0       0       0       0       0
 12707 ;;      Temps:          0       0       0       0       0       0       0
 12708 ;;      Totals:         1       0       0       0       0       0       0
 12709 ;;Total ram usage:        1 bytes
 12710 ;; Hardware stack levels used:    1
 12711 ;; Hardware stack levels required when called:    2
 12712 ;; This function calls:
 12713 ;;		Nothing
 12714 ;; This function is called by:
 12715 ;;		_vscp_handleProtocolEvent
 12716 ;; This function uses a non-reentrant model
 12717 ;;
 12718                           
 12719                           	psect	text47
 12720  003BFE                     __ptext47:
 12721                           	opt stack 0
 12722  003BFE                     _vscp_getMatrixInfo:
 12723                           	opt stack 27
 12724                           
 12725                           ; BSR set to: 0
 12726                           ;main.c: 2527: uint8_t i;
 12727                           ;main.c: 2529: vscp_omsg.data[ 0 ] = 7;
 12728                           
 12729                           ;incstack = 0
 12730                           ;incstack = 0
 12731  003BFE  0E07               	movlw	7
 12732  003C00  6FA9               	movwf	(_vscp_omsg+5)& (0+255),b
 12733                           
 12734                           ;main.c: 2530: vscp_omsg.data[ 1 ] = 72;
 12735  003C02  0E48               	movlw	72
 12736  003C04  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
 12737                           
 12738                           ;main.c: 2533: for ( i = 2; i < 8; i++ ) {
 12739  003C06  0E02               	movlw	2
 12740  003C08  6E08               	movwf	vscp_getMatrixInfo@i,c
 12741  003C0A                     l6907:
 12742                           
 12743                           ; BSR set to: 0
 12744                           ;main.c: 2534: vscp_omsg.data[ i ] = 0;
 12745  003C0A  5008               	movf	vscp_getMatrixInfo@i,w,c
 12746  003C0C  0FA9               	addlw	low (_vscp_omsg+5)
 12747  003C0E  6ED9               	movwf	fsr2l,c
 12748  003C10  6ADA               	clrf	fsr2h,c
 12749  003C12  6ADF               	clrf	indf2,c
 12750                           
 12751                           ; BSR set to: 0
 12752  003C14  2A08               	incf	vscp_getMatrixInfo@i,f,c
 12753                           
 12754                           ; BSR set to: 0
 12755  003C16  0E07               	movlw	7
 12756  003C18  6408               	cpfsgt	vscp_getMatrixInfo@i,c
 12757  003C1A  D7F7               	goto	l6907
 12758                           
 12759                           ; BSR set to: 0
 12760  003C1C  0C07               	retlw	7
 12761  003C1E                     __end_of_vscp_getMatrixInfo:
 12762                           	opt stack 0
 12763                           tblptru	equ	0xFF8
 12764                           tblptrh	equ	0xFF7
 12765                           tblptrl	equ	0xFF6
 12766                           tablat	equ	0xFF5
 12767                           prodh	equ	0xFF4
 12768                           prodl	equ	0xFF3
 12769                           intcon	equ	0xFF2
 12770                           postinc0	equ	0xFEE
 12771                           wreg	equ	0xFE8
 12772                           indf1	equ	0xFE7
 12773                           fsr1h	equ	0xFE2
 12774                           fsr1l	equ	0xFE1
 12775                           indf2	equ	0xFDF
 12776                           postinc2	equ	0xFDE
 12777                           postdec2	equ	0xFDD
 12778                           plusw2	equ	0xFDB
 12779                           fsr2h	equ	0xFDA
 12780                           fsr2l	equ	0xFD9
 12781                           status	equ	0xFD8
 12782                           
 12783 ;; *************** function _vscp_goBootloaderMode *****************
 12784 ;; Defined at:
 12785 ;;		line 2510 in file "../main.c"
 12786 ;; Parameters:    Size  Location     Type
 12787 ;;  algorithm       1    wreg     unsigned char 
 12788 ;; Auto vars:     Size  Location     Type
 12789 ;;  algorithm       1   11[COMRAM] unsigned char 
 12790 ;; Return value:  Size  Location     Type
 12791 ;;		None               void
 12792 ;; Registers used:
 12793 ;;		wreg, status,2, status,0, cstack
 12794 ;; Tracked objects:
 12795 ;;		On entry : F/0
 12796 ;;		On exit  : 0/0
 12797 ;;		Unchanged: 0/0
 12798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12799 ;;      Params:         0       0       0       0       0       0       0
 12800 ;;      Locals:         1       0       0       0       0       0       0
 12801 ;;      Temps:          0       0       0       0       0       0       0
 12802 ;;      Totals:         1       0       0       0       0       0       0
 12803 ;;Total ram usage:        1 bytes
 12804 ;; Hardware stack levels used:    1
 12805 ;; Hardware stack levels required when called:    3
 12806 ;; This function calls:
 12807 ;;		_Busy_eep
 12808 ;;		_Write_b_eep
 12809 ;; This function is called by:
 12810 ;;		_vscp_handleProtocolEvent
 12811 ;; This function uses a non-reentrant model
 12812 ;;
 12813                           
 12814                           	psect	text48
 12815  003C76                     __ptext48:
 12816                           	opt stack 0
 12817  003C76                     _vscp_goBootloaderMode:
 12818                           	opt stack 26
 12819                           
 12820                           ; BSR set to: 0
 12821                           ;incstack = 0
 12822                           ;incstack = 0
 12823                           ;vscp_goBootloaderMode@algorithm stored from wreg
 12824  003C76  CFE8 F00C          	movff	wreg,vscp_goBootloaderMode@algorithm
 12825                           
 12826                           ; BSR set to: 0
 12827                           ;main.c: 2511: if ( 0x01 != algorithm ) return;
 12828  003C7A  040C               	decf	vscp_goBootloaderMode@algorithm,w,c
 12829  003C7C  E109               	bnz	l640
 12830                           
 12831                           ; BSR set to: 0
 12832                           ;main.c: 2515: (Busy_eep(), Write_b_eep(0x00,0xff));
 12833  003C7E  ECEA  F01E         	call	_Busy_eep	;wreg free
 12834  003C82  6A09               	clrf	?_Write_b_eep+1,c
 12835  003C84  6A08               	clrf	?_Write_b_eep,c
 12836  003C86  0EFF               	movlw	255
 12837  003C88  680A               	setf	?_Write_b_eep+2,c
 12838  003C8A  ECCF  F01C         	call	_Write_b_eep	;wreg free
 12839  003C8E  00FF               	reset		;# 
 12840  003C90                     l640:
 12841  003C90  0012               	return	
 12842  003C92                     __end_of_vscp_goBootloaderMode:
 12843                           	opt stack 0
 12844                           tblptru	equ	0xFF8
 12845                           tblptrh	equ	0xFF7
 12846                           tblptrl	equ	0xFF6
 12847                           tablat	equ	0xFF5
 12848                           prodh	equ	0xFF4
 12849                           prodl	equ	0xFF3
 12850                           intcon	equ	0xFF2
 12851                           postinc0	equ	0xFEE
 12852                           wreg	equ	0xFE8
 12853                           indf1	equ	0xFE7
 12854                           fsr1h	equ	0xFE2
 12855                           fsr1l	equ	0xFE1
 12856                           indf2	equ	0xFDF
 12857                           postinc2	equ	0xFDE
 12858                           postdec2	equ	0xFDD
 12859                           plusw2	equ	0xFDB
 12860                           fsr2h	equ	0xFDA
 12861                           fsr2l	equ	0xFD9
 12862                           status	equ	0xFD8
 12863                           
 12864 ;; *************** function _vscp_handleProbeState *****************
 12865 ;; Defined at:
 12866 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 12867 ;; Parameters:    Size  Location     Type
 12868 ;;		None
 12869 ;; Auto vars:     Size  Location     Type
 12870 ;;		None
 12871 ;; Return value:  Size  Location     Type
 12872 ;;		None               void
 12873 ;; Registers used:
 12874 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12875 ;; Tracked objects:
 12876 ;;		On entry : 0/0
 12877 ;;		On exit  : F/0
 12878 ;;		Unchanged: 0/0
 12879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12880 ;;      Params:         0       0       0       0       0       0       0
 12881 ;;      Locals:         0       0       0       0       0       0       0
 12882 ;;      Temps:          0       0       0       0       0       0       0
 12883 ;;      Totals:         0       0       0       0       0       0       0
 12884 ;;Total ram usage:        0 bytes
 12885 ;; Hardware stack levels used:    1
 12886 ;; Hardware stack levels required when called:    8
 12887 ;; This function calls:
 12888 ;;		_vscp_goActiveState
 12889 ;;		_vscp_writeNicknamePermanent
 12890 ;;		_vscp_sendEvent
 12891 ;;		_vscp_setSegmentCRC
 12892 ;; This function is called by:
 12893 ;;		_main
 12894 ;; This function uses a non-reentrant model
 12895 ;;
 12896                           
 12897                           	psect	text49
 12898  0033DC                     __ptext49:
 12899                           	opt stack 0
 12900  0033DC                     _vscp_handleProbeState:
 12901                           	opt stack 22
 12902                           
 12903                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 12904                           
 12905                           ;incstack = 0
 12906                           ;incstack = 0
 12907  0033DC  D053               	goto	l8025
 12908  0033DE                     l7955:
 12909                           
 12910                           ; BSR set to: 0
 12911                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 12912  0033DE  2857               	incf	_vscp_probe_address,w,c
 12913  0033E0  E010               	bz	l7971
 12914                           
 12915                           ; BSR set to: 0
 12916                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 12917  0033E2  0E81               	movlw	129
 12918  0033E4  6FA4               	movwf	_vscp_omsg& (0+255),b
 12919                           
 12920                           ; BSR set to: 0
 12921                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 12922  0033E6  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12923                           
 12924                           ; BSR set to: 0
 12925                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 12926  0033E8  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12927  0033EA  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12928                           
 12929                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 12930  0033EC  0E02               	movlw	2
 12931  0033EE  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12932                           
 12933                           ; BSR set to: 0
 12934                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 12935  0033F0  C057  F0A9         	movff	_vscp_probe_address,_vscp_omsg+5
 12936                           
 12937                           ; BSR set to: 0
 12938                           ;vscp_firmware.c: 216: vscp_sendEvent();
 12939  0033F4  ECA6  F01D         	call	_vscp_sendEvent	;wreg free
 12940                           
 12941                           ; BSR set to: 0
 12942                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 12943  0033F8  0E01               	movlw	1
 12944  0033FA  6F93               	movwf	_vscp_node_substate& (0+255),b
 12945  0033FC                     l7969:
 12946                           
 12947                           ; BSR set to: 0
 12948                           ;vscp_firmware.c: 219: vscp_timer = 0;
 12949  0033FC  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12950  0033FE  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12951                           
 12952                           ;vscp_firmware.c: 221: }
 12953  003400  D048               	goto	l1065
 12954  003402                     l7971:
 12955                           
 12956                           ; BSR set to: 0
 12957                           ;vscp_firmware.c: 222: else {
 12958                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 12959  003402  0E04               	movlw	4
 12960  003404  6F92               	movwf	_vscp_node_state& (0+255),b
 12961                           
 12962                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 12963  003406  0E81               	movlw	129
 12964  003408  6FA4               	movwf	_vscp_omsg& (0+255),b
 12965                           
 12966                           ; BSR set to: 0
 12967                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 12968  00340A  69A9               	setf	(_vscp_omsg+5)& (0+255),b
 12969                           
 12970                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 12971  00340C  0E07               	movlw	7
 12972  00340E  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
 12973                           
 12974                           ; BSR set to: 0
 12975                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 12976  003410  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12977  003412  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12978                           
 12979                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 12980  003414  0E03               	movlw	3
 12981  003416  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12982                           
 12983                           ; BSR set to: 0
 12984                           ;vscp_firmware.c: 235: vscp_sendEvent();
 12985  003418  ECA6  F01D         	call	_vscp_sendEvent	;wreg free
 12986  00341C  D03A               	goto	l1065
 12987  00341E                     l1066:
 12988                           
 12989                           ; BSR set to: 0
 12990                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 12991  00341E  AF96               	btfss	_vscp_imsg& (0+255),7,b
 12992  003420  D00F               	goto	l7995
 12993                           
 12994                           ; BSR set to: 0
 12995                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 12996                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 12997  003422  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
 12998  003424  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 12999  003426  E135               	bnz	l1065
 13000                           
 13001                           ; BSR set to: 0
 13002  003428  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
 13003  00342A  0A03               	xorlw	3
 13004  00342C  E132               	bnz	l1065
 13005                           
 13006                           ; BSR set to: 0
 13007                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 13008  00342E  6657               	tstfsz	_vscp_probe_address,c
 13009  003430  D003               	goto	l7989
 13010                           
 13011                           ; BSR set to: 0
 13012                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 13013  003432  0E02               	movlw	2
 13014  003434  6F92               	movwf	_vscp_node_state& (0+255),b
 13015  003436  D7E2               	goto	l7969
 13016  003438                     l7989:
 13017                           
 13018                           ; BSR set to: 0
 13019                           ;vscp_firmware.c: 257: else {
 13020                           ;vscp_firmware.c: 260: vscp_probe_address++;
 13021  003438  2A57               	incf	_vscp_probe_address,f,c
 13022                           
 13023                           ; BSR set to: 0
 13024                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 13025  00343A  6B93               	clrf	_vscp_node_substate& (0+255),b
 13026  00343C                     l7993:
 13027                           
 13028                           ; BSR set to: 0
 13029                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 13030  00343C  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 13031  00343E  D029               	goto	l1065
 13032  003440                     l7995:
 13033                           
 13034                           ; BSR set to: 0
 13035                           ;vscp_firmware.c: 267: else {
 13036                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 13037  003440  0EE9               	movlw	233
 13038  003442  5D86               	subwf	_vscp_timer& (0+255),w,b	;volatile
 13039  003444  0E03               	movlw	3
 13040  003446  5987               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 13041  003448  E324               	bnc	l1065
 13042                           
 13043                           ; BSR set to: 0
 13044                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 13045  00344A  2B94               	incf	_vscp_probe_cnt& (0+255),f,b
 13046                           
 13047                           ; BSR set to: 0
 13048                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 13049  00344C  0E02               	movlw	2
 13050  00344E  6594               	cpfsgt	_vscp_probe_cnt& (0+255),b
 13051  003450  D017               	goto	l1073
 13052                           
 13053                           ; BSR set to: 0
 13054                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 13055  003452  6657               	tstfsz	_vscp_probe_address,c
 13056  003454  D005               	goto	l1074
 13057                           
 13058                           ; BSR set to: 0
 13059                           ;vscp_firmware.c: 279: vscp_probe_address++;
 13060  003456  2A57               	incf	_vscp_probe_address,f,c
 13061                           
 13062                           ; BSR set to: 0
 13063                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 13064  003458  6B93               	clrf	_vscp_node_substate& (0+255),b
 13065                           
 13066                           ; BSR set to: 0
 13067                           ;vscp_firmware.c: 281: vscp_timer = 0;
 13068  00345A  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 13069  00345C  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 13070  00345E  D7EE               	goto	l7993
 13071  003460                     l1074:
 13072                           
 13073                           ; BSR set to: 0
 13074                           ;vscp_firmware.c: 285: else {
 13075                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 13076  003460  C057  F091         	movff	_vscp_probe_address,_vscp_nickname
 13077                           
 13078                           ; BSR set to: 0
 13079                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 13080  003464  0E03               	movlw	3
 13081  003466  6F92               	movwf	_vscp_node_state& (0+255),b
 13082                           
 13083                           ; BSR set to: 0
 13084                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 13085  003468  6B93               	clrf	_vscp_node_substate& (0+255),b
 13086                           
 13087                           ; BSR set to: 0
 13088                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 13089  00346A  5191               	movf	_vscp_nickname& (0+255),w,b
 13090  00346C  EC84  F01E         	call	_vscp_writeNicknamePermanent
 13091                           
 13092                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 13093  003470  0E40               	movlw	64
 13094  003472  EC79  F01E         	call	_vscp_setSegmentCRC
 13095                           
 13096                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 13097  003476  0100               	movlb	0	; () banked
 13098  003478  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 13099                           
 13100                           ; BSR set to: 0
 13101                           ;vscp_firmware.c: 296: vscp_goActiveState();
 13102  00347A  EC0F  F01E         	call	_vscp_goActiveState	;wreg free
 13103  00347E  D009               	goto	l1065
 13104  003480                     l1073:
 13105                           
 13106                           ; BSR set to: 0
 13107                           ;vscp_firmware.c: 300: else {
 13108                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 13109  003480  6B93               	clrf	_vscp_node_substate& (0+255),b
 13110  003482  D007               	goto	l1065
 13111  003484                     l8025:
 13112  003484  0100               	movlb	0	; () banked
 13113  003486  5193               	movf	_vscp_node_substate& (0+255),w,b
 13114                           
 13115                           ; Switch size 1, requested type "space"
 13116                           ; Number of cases is 3, Range of values is 0 to 2
 13117                           ; switch strategies available:
 13118                           ; Name         Instructions Cycles
 13119                           ; simple_byte           10     6 (average)
 13120                           ;	Chosen strategy is simple_byte
 13121  003488  E0AA               	bz	l7955
 13122  00348A  0A01               	xorlw	1	; case 1
 13123  00348C  E0C8               	bz	l1066
 13124  00348E  0A03               	xorlw	3	; case 2
 13125  003490  E1F7               	bnz	l1073
 13126  003492                     l1065:
 13127                           
 13128                           ; BSR set to: 0
 13129                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 13130  003492  6B96               	clrf	_vscp_imsg& (0+255),b
 13131                           
 13132                           ; BSR set to: 0
 13133  003494  0012               	return	
 13134  003496                     __end_of_vscp_handleProbeState:
 13135                           	opt stack 0
 13136                           tblptru	equ	0xFF8
 13137                           tblptrh	equ	0xFF7
 13138                           tblptrl	equ	0xFF6
 13139                           tablat	equ	0xFF5
 13140                           prodh	equ	0xFF4
 13141                           prodl	equ	0xFF3
 13142                           intcon	equ	0xFF2
 13143                           postinc0	equ	0xFEE
 13144                           wreg	equ	0xFE8
 13145                           indf1	equ	0xFE7
 13146                           fsr1h	equ	0xFE2
 13147                           fsr1l	equ	0xFE1
 13148                           indf2	equ	0xFDF
 13149                           postinc2	equ	0xFDE
 13150                           postdec2	equ	0xFDD
 13151                           plusw2	equ	0xFDB
 13152                           fsr2h	equ	0xFDA
 13153                           fsr2l	equ	0xFD9
 13154                           status	equ	0xFD8
 13155                           
 13156 ;; *************** function _vscp_goActiveState *****************
 13157 ;; Defined at:
 13158 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 13159 ;; Parameters:    Size  Location     Type
 13160 ;;		None
 13161 ;; Auto vars:     Size  Location     Type
 13162 ;;		None
 13163 ;; Return value:  Size  Location     Type
 13164 ;;		None               void
 13165 ;; Registers used:
 13166 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13167 ;; Tracked objects:
 13168 ;;		On entry : 0/0
 13169 ;;		On exit  : F/0
 13170 ;;		Unchanged: 0/0
 13171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13172 ;;      Params:         0       0       0       0       0       0       0
 13173 ;;      Locals:         0       0       0       0       0       0       0
 13174 ;;      Temps:          0       0       0       0       0       0       0
 13175 ;;      Totals:         0       0       0       0       0       0       0
 13176 ;;Total ram usage:        0 bytes
 13177 ;; Hardware stack levels used:    1
 13178 ;; Hardware stack levels required when called:    7
 13179 ;; This function calls:
 13180 ;;		_vscp_sendEvent
 13181 ;; This function is called by:
 13182 ;;		_main
 13183 ;;		_vscp_handleProbeState
 13184 ;; This function uses a non-reentrant model
 13185 ;;
 13186                           
 13187                           	psect	text50
 13188  003C1E                     __ptext50:
 13189                           	opt stack 0
 13190  003C1E                     _vscp_goActiveState:
 13191                           	opt stack 22
 13192                           
 13193                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 13194                           
 13195                           ; BSR set to: 0
 13196                           ;incstack = 0
 13197                           ;incstack = 0
 13198  003C1E  0E81               	movlw	129
 13199  003C20  0100               	movlb	0	; () banked
 13200  003C22  6FA4               	movwf	_vscp_omsg& (0+255),b
 13201                           
 13202                           ; BSR set to: 0
 13203                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 13204  003C24  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 13205                           
 13206                           ; BSR set to: 0
 13207                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 13208  003C26  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 13209  003C28  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 13210                           
 13211                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 13212  003C2A  0E02               	movlw	2
 13213  003C2C  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 13214                           
 13215                           ; BSR set to: 0
 13216                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 13217  003C2E  C091  F0A9         	movff	_vscp_nickname,_vscp_omsg+5
 13218                           
 13219                           ; BSR set to: 0
 13220                           ;vscp_firmware.c: 366: vscp_sendEvent();
 13221  003C32  ECA6  F01D         	call	_vscp_sendEvent	;wreg free
 13222                           
 13223                           ; BSR set to: 0
 13224                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 13225  003C36  0E01               	movlw	1
 13226  003C38  6E56               	movwf	_vscp_initledfunc,c
 13227                           
 13228                           ; BSR set to: 0
 13229  003C3A  0C01               	retlw	1
 13230  003C3C                     __end_of_vscp_goActiveState:
 13231                           	opt stack 0
 13232                           tblptru	equ	0xFF8
 13233                           tblptrh	equ	0xFF7
 13234                           tblptrl	equ	0xFF6
 13235                           tablat	equ	0xFF5
 13236                           prodh	equ	0xFF4
 13237                           prodl	equ	0xFF3
 13238                           intcon	equ	0xFF2
 13239                           postinc0	equ	0xFEE
 13240                           wreg	equ	0xFE8
 13241                           indf1	equ	0xFE7
 13242                           fsr1h	equ	0xFE2
 13243                           fsr1l	equ	0xFE1
 13244                           indf2	equ	0xFDF
 13245                           postinc2	equ	0xFDE
 13246                           postdec2	equ	0xFDD
 13247                           plusw2	equ	0xFDB
 13248                           fsr2h	equ	0xFDA
 13249                           fsr2l	equ	0xFD9
 13250                           status	equ	0xFD8
 13251                           
 13252 ;; *************** function _vscp_sendEvent *****************
 13253 ;; Defined at:
 13254 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 13255 ;; Parameters:    Size  Location     Type
 13256 ;;		None
 13257 ;; Auto vars:     Size  Location     Type
 13258 ;;  rv              1    0        unsigned char 
 13259 ;; Return value:  Size  Location     Type
 13260 ;;                  1    wreg      unsigned char 
 13261 ;; Registers used:
 13262 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13263 ;; Tracked objects:
 13264 ;;		On entry : F/0
 13265 ;;		On exit  : F/0
 13266 ;;		Unchanged: 0/0
 13267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13268 ;;      Params:         0       0       0       0       0       0       0
 13269 ;;      Locals:         1       0       0       0       0       0       0
 13270 ;;      Temps:          0       0       0       0       0       0       0
 13271 ;;      Totals:         1       0       0       0       0       0       0
 13272 ;;Total ram usage:        1 bytes
 13273 ;; Hardware stack levels used:    1
 13274 ;; Hardware stack levels required when called:    6
 13275 ;; This function calls:
 13276 ;;		_sendVSCPFrame
 13277 ;; This function is called by:
 13278 ;;		_vscp_handleProbeState
 13279 ;;		_vscp_goActiveState
 13280 ;;		_vscp_sendHeartBeat
 13281 ;;		_vscp_newNodeOnline
 13282 ;;		_vscp_handleProtocolEvent
 13283 ;; This function uses a non-reentrant model
 13284 ;;
 13285                           
 13286                           	psect	text51
 13287  003B4C                     __ptext51:
 13288                           	opt stack 0
 13289  003B4C                     _vscp_sendEvent:
 13290                           	opt stack 22
 13291                           
 13292                           ; BSR set to: 0
 13293                           
 13294                           ; BSR set to: 0
 13295                           ;incstack = 0
 13296                           ;incstack = 0
 13297  003B4C  C0A6  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
 13298  003B50  C0A7  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 13299  003B54  C0A8  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 13300  003B58  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 13301  003B5C  C0A5  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 13302  003B60  51A4               	movf	_vscp_omsg& (0+255),w,b
 13303  003B62  0B0F               	andlw	15
 13304  003B64  6E44               	movwf	?_sendVSCPFrame+5,c
 13305  003B66  0E00               	movlw	high (_vscp_omsg+5)
 13306  003B68  6E46               	movwf	?_sendVSCPFrame+7,c
 13307  003B6A  0EA9               	movlw	low (_vscp_omsg+5)
 13308  003B6C  6E45               	movwf	?_sendVSCPFrame+6,c
 13309  003B6E  EF4B  F01A         	goto	_sendVSCPFrame	;wreg free
 13310  003B72                     __end_of_vscp_sendEvent:
 13311                           	opt stack 0
 13312                           tblptru	equ	0xFF8
 13313                           tblptrh	equ	0xFF7
 13314                           tblptrl	equ	0xFF6
 13315                           tablat	equ	0xFF5
 13316                           prodh	equ	0xFF4
 13317                           prodl	equ	0xFF3
 13318                           intcon	equ	0xFF2
 13319                           postinc0	equ	0xFEE
 13320                           wreg	equ	0xFE8
 13321                           indf1	equ	0xFE7
 13322                           fsr1h	equ	0xFE2
 13323                           fsr1l	equ	0xFE1
 13324                           indf2	equ	0xFDF
 13325                           postinc2	equ	0xFDE
 13326                           postdec2	equ	0xFDD
 13327                           plusw2	equ	0xFDB
 13328                           fsr2h	equ	0xFDA
 13329                           fsr2l	equ	0xFD9
 13330                           status	equ	0xFD8
 13331                           
 13332 ;; *************** function _sendVSCPFrame *****************
 13333 ;; Defined at:
 13334 ;;		line 2585 in file "../main.c"
 13335 ;; Parameters:    Size  Location     Type
 13336 ;;  vscpclass       2   62[COMRAM] unsigned short 
 13337 ;;  vscptype        1   64[COMRAM] unsigned char 
 13338 ;;  nodeid          1   65[COMRAM] unsigned char 
 13339 ;;  priority        1   66[COMRAM] unsigned char 
 13340 ;;  size            1   67[COMRAM] unsigned char 
 13341 ;;  pData           2   68[COMRAM] PTR unsigned char 
 13342 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13343 ;; Auto vars:     Size  Location     Type
 13344 ;;  id              4   70[COMRAM] unsigned long 
 13345 ;; Return value:  Size  Location     Type
 13346 ;;                  1    wreg      unsigned char 
 13347 ;; Registers used:
 13348 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13349 ;; Tracked objects:
 13350 ;;		On entry : F/0
 13351 ;;		On exit  : F/0
 13352 ;;		Unchanged: 0/0
 13353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13354 ;;      Params:         8       0       0       0       0       0       0
 13355 ;;      Locals:         4       0       0       0       0       0       0
 13356 ;;      Temps:          0      20       0       0       0       0       0
 13357 ;;      Totals:        12      20       0       0       0       0       0
 13358 ;;Total ram usage:       32 bytes
 13359 ;; Hardware stack levels used:    1
 13360 ;; Hardware stack levels required when called:    5
 13361 ;; This function calls:
 13362 ;;		_sendCANFrame
 13363 ;; This function is called by:
 13364 ;;		_SendInformationEvent
 13365 ;;		_vscp_sendEvent
 13366 ;; This function uses a non-reentrant model
 13367 ;;
 13368                           
 13369                           	psect	text52
 13370  003496                     __ptext52:
 13371                           	opt stack 0
 13372  003496                     _sendVSCPFrame:
 13373                           	opt stack 23
 13374                           
 13375                           ; BSR set to: 0
 13376                           ;main.c: 2586: uint32_t id = ( (uint32_t)priority << 26 ) |
 13377                           ;main.c: 2587: ( (uint32_t)vscpclass << 16 ) |
 13378                           ;main.c: 2588: ( (uint32_t)vscptype << 8 ) |
 13379                           ;main.c: 2589: nodeid;
 13380                           
 13381                           ; BSR set to: 0
 13382                           ;incstack = 0
 13383                           ;incstack = 0
 13384  003496  C041  F0B1         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 13385  00349A  6BB2               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 13386  00349C  6BB3               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 13387  00349E  6BB4               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 13388  0034A0  C0B3  F0B4         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 13389  0034A4  C0B2  F0B3         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 13390  0034A8  C0B1  F0B2         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 13391  0034AC  6BB1               	clrf	??_sendVSCPFrame& (0+255),b
 13392  0034AE  503F               	movf	sendVSCPFrame@vscpclass,w,c
 13393  0034B0  6FB5               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 13394  0034B2  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
 13395  0034B4  6FB6               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 13396  0034B6  6BB7               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 13397  0034B8  6BB8               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 13398  0034BA  C0B6  F0B8         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 13399  0034BE  C0B5  F0B7         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 13400  0034C2  6BB6               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 13401  0034C4  6BB5               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 13402  0034C6  C043  F0B9         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 13403  0034CA  6BBA               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 13404  0034CC  6BBB               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 13405  0034CE  6BBC               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 13406  0034D0  0E1A               	movlw	26
 13407  0034D2                     u10215:
 13408  0034D2  90D8               	bcf	status,0,c
 13409  0034D4  37B9               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 13410  0034D6  37BA               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 13411  0034D8  37BB               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 13412  0034DA  37BC               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 13413  0034DC  2EE8               	decfsz	wreg,f,c
 13414  0034DE  D7F9               	goto	u10215
 13415  0034E0  51B5               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 13416  0034E2  11B9               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 13417  0034E4  6FBD               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 13418  0034E6  51B6               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 13419  0034E8  11BA               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 13420  0034EA  6FBE               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 13421  0034EC  51B7               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 13422  0034EE  11BB               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 13423  0034F0  6FBF               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 13424  0034F2  51B8               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 13425  0034F4  11BC               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 13426  0034F6  6FC0               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 13427  0034F8  51B1               	movf	??_sendVSCPFrame& (0+255),w,b
 13428  0034FA  11BD               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 13429  0034FC  6FC1               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 13430  0034FE  51B2               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 13431  003500  11BE               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 13432  003502  6FC2               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 13433  003504  51B3               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 13434  003506  11BF               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 13435  003508  6FC3               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 13436  00350A  51B4               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 13437  00350C  11C0               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 13438  00350E  6FC4               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 13439  003510  5042               	movf	sendVSCPFrame@nodeid,w,c
 13440  003512  11C1               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 13441  003514  6E47               	movwf	sendVSCPFrame@id,c
 13442  003516  51C2               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 13443  003518  6E48               	movwf	sendVSCPFrame@id+1,c
 13444  00351A  51C3               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 13445  00351C  6E49               	movwf	sendVSCPFrame@id+2,c
 13446  00351E  51C4               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 13447  003520  6E4A               	movwf	sendVSCPFrame@id+3,c
 13448                           
 13449                           ; BSR set to: 0
 13450                           ;main.c: 2591: if ( !sendCANFrame( id, size, pData ) ) {
 13451  003522  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
 13452  003526  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 13453  00352A  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 13454  00352E  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 13455  003532  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 13456  003536  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 13457  00353A  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 13458  00353E  EC01  F01D         	call	_sendCANFrame	;wreg free
 13459  003542  0900               	iorlw	0
 13460                           
 13461                           ; BSR set to: 0
 13462                           ;main.c: 2592: return 0;
 13463  003544  0E00               	movlw	0
 13464  003546  A4D8               	btfss	status,2,c
 13465                           
 13466                           ; BSR set to: 0
 13467                           ;main.c: 2593: }
 13468                           ;main.c: 2595: return 1;
 13469  003548  0E01               	movlw	1
 13470                           
 13471                           ; BSR set to: 0
 13472  00354A  0012               	return	
 13473  00354C                     __end_of_sendVSCPFrame:
 13474                           	opt stack 0
 13475                           tblptru	equ	0xFF8
 13476                           tblptrh	equ	0xFF7
 13477                           tblptrl	equ	0xFF6
 13478                           tablat	equ	0xFF5
 13479                           prodh	equ	0xFF4
 13480                           prodl	equ	0xFF3
 13481                           intcon	equ	0xFF2
 13482                           postinc0	equ	0xFEE
 13483                           wreg	equ	0xFE8
 13484                           indf1	equ	0xFE7
 13485                           fsr1h	equ	0xFE2
 13486                           fsr1l	equ	0xFE1
 13487                           indf2	equ	0xFDF
 13488                           postinc2	equ	0xFDE
 13489                           postdec2	equ	0xFDD
 13490                           plusw2	equ	0xFDB
 13491                           fsr2h	equ	0xFDA
 13492                           fsr2l	equ	0xFD9
 13493                           status	equ	0xFD8
 13494                           
 13495 ;; *************** function _sendCANFrame *****************
 13496 ;; Defined at:
 13497 ;;		line 2630 in file "../main.c"
 13498 ;; Parameters:    Size  Location     Type
 13499 ;;  id              4   54[COMRAM] unsigned long 
 13500 ;;  dlc             1   58[COMRAM] unsigned char 
 13501 ;;  pdata           2   59[COMRAM] PTR unsigned char 
 13502 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13503 ;; Auto vars:     Size  Location     Type
 13504 ;;  rv              1    0        unsigned char 
 13505 ;; Return value:  Size  Location     Type
 13506 ;;                  1    wreg      unsigned char 
 13507 ;; Registers used:
 13508 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13509 ;; Tracked objects:
 13510 ;;		On entry : F/0
 13511 ;;		On exit  : F/0
 13512 ;;		Unchanged: 0/0
 13513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13514 ;;      Params:         7       0       0       0       0       0       0
 13515 ;;      Locals:         1       0       0       0       0       0       0
 13516 ;;      Temps:          0       0       0       0       0       0       0
 13517 ;;      Totals:         8       0       0       0       0       0       0
 13518 ;;Total ram usage:        8 bytes
 13519 ;; Hardware stack levels used:    1
 13520 ;; Hardware stack levels required when called:    4
 13521 ;; This function calls:
 13522 ;;		_ECANSendMessage
 13523 ;; This function is called by:
 13524 ;;		_sendVSCPFrame
 13525 ;; This function uses a non-reentrant model
 13526 ;;
 13527                           
 13528                           	psect	text53
 13529  003A02                     __ptext53:
 13530                           	opt stack 0
 13531  003A02                     _sendCANFrame:
 13532                           	opt stack 23
 13533                           
 13534                           ; BSR set to: 0
 13535                           ;main.c: 2633: sendTimer = 0;
 13536                           
 13537                           ; BSR set to: 0
 13538                           ;incstack = 0
 13539                           ;incstack = 0
 13540  003A02  6B8C               	clrf	_sendTimer& (0+255),b	;volatile
 13541  003A04                     l9585:
 13542                           
 13543                           ;main.c: 2635: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 13544  003A04  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
 13545  003A08  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 13546  003A0C  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 13547  003A10  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 13548  003A14  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 13549  003A18  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 13550  003A1C  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 13551  003A20  0E20               	movlw	32
 13552  003A22  6E19               	movwf	?_ECANSendMessage+7,c
 13553  003A24  ECEE  F014         	call	_ECANSendMessage	;wreg free
 13554  003A28  0900               	iorlw	0
 13555  003A2A  E0EC               	bz	l9585
 13556                           
 13557                           ;main.c: 2638: }
 13558                           ;main.c: 2639: }
 13559                           ;main.c: 2641: vscp_omsg.flags = 0;
 13560                           
 13561                           ;main.c: 2637: break;
 13562  003A2C  0100               	movlb	0	; () banked
 13563  003A2E  6BA4               	clrf	_vscp_omsg& (0+255),b
 13564                           
 13565                           ; BSR set to: 0
 13566                           
 13567                           ; BSR set to: 0
 13568                           ;main.c: 2643: return rv;
 13569  003A30  0C01               	retlw	1
 13570  003A32                     __end_of_sendCANFrame:
 13571                           	opt stack 0
 13572                           tblptru	equ	0xFF8
 13573                           tblptrh	equ	0xFF7
 13574                           tblptrl	equ	0xFF6
 13575                           tablat	equ	0xFF5
 13576                           prodh	equ	0xFF4
 13577                           prodl	equ	0xFF3
 13578                           intcon	equ	0xFF2
 13579                           postinc0	equ	0xFEE
 13580                           wreg	equ	0xFE8
 13581                           indf1	equ	0xFE7
 13582                           fsr1h	equ	0xFE2
 13583                           fsr1l	equ	0xFE1
 13584                           indf2	equ	0xFDF
 13585                           postinc2	equ	0xFDE
 13586                           postdec2	equ	0xFDD
 13587                           plusw2	equ	0xFDB
 13588                           fsr2h	equ	0xFDA
 13589                           fsr2l	equ	0xFD9
 13590                           status	equ	0xFD8
 13591                           
 13592 ;; *************** function _ECANSendMessage *****************
 13593 ;; Defined at:
 13594 ;;		line 617 in file "../ECAN.c"
 13595 ;; Parameters:    Size  Location     Type
 13596 ;;  id              4   17[COMRAM] unsigned long 
 13597 ;;  data            2   21[COMRAM] PTR unsigned char 
 13598 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13599 ;;  dataLen         1   23[COMRAM] unsigned char 
 13600 ;;  msgFlags        1   24[COMRAM] enum E16306
 13601 ;; Auto vars:     Size  Location     Type
 13602 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
 13603 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13604 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13605 ;;		 -> B0CON(1), 
 13606 ;;  ptr             2   52[COMRAM] PTR unsigned char 
 13607 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13608 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13609 ;;		 -> B0CON(1), 
 13610 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
 13611 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13612 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13613 ;;		 -> B0CON(1), 
 13614 ;;  i               1   51[COMRAM] unsigned char 
 13615 ;;  temp            1   50[COMRAM] unsigned char 
 13616 ;;  tempBSEL0       1   47[COMRAM] struct .
 13617 ;;  j               1   46[COMRAM] unsigned char 
 13618 ;;  buffers         1   45[COMRAM] unsigned char 
 13619 ;;  mode            1   44[COMRAM] unsigned char 
 13620 ;; Return value:  Size  Location     Type
 13621 ;;                  1    wreg      enum E15660
 13622 ;; Registers used:
 13623 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13624 ;; Tracked objects:
 13625 ;;		On entry : 0/0
 13626 ;;		On exit  : 0/0
 13627 ;;		Unchanged: 0/0
 13628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13629 ;;      Params:         8       0       0       0       0       0       0
 13630 ;;      Locals:        28       0       0       0       0       0       0
 13631 ;;      Temps:          1       0       0       0       0       0       0
 13632 ;;      Totals:        37       0       0       0       0       0       0
 13633 ;;Total ram usage:       37 bytes
 13634 ;; Hardware stack levels used:    1
 13635 ;; Hardware stack levels required when called:    3
 13636 ;; This function calls:
 13637 ;;		__CANIDToRegs
 13638 ;; This function is called by:
 13639 ;;		_sendCANFrame
 13640 ;; This function uses a non-reentrant model
 13641 ;;
 13642                           
 13643                           	psect	text54
 13644  0029DC                     __ptext54:
 13645                           	opt stack 0
 13646  0029DC                     _ECANSendMessage:
 13647                           	opt stack 23
 13648                           
 13649                           ;ECAN.c: 619: BYTE mode;
 13650                           ;ECAN.c: 620: BYTE buffers;
 13651                           ;ECAN.c: 628: BYTE i,j;
 13652                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 13653                           ;ECAN.c: 630: BYTE* pb[9];
 13654                           ;ECAN.c: 631: BYTE temp;
 13655                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 13656                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 13657                           
 13658                           ; BSR set to: 0
 13659                           ;incstack = 0
 13660                           ;incstack = 0
 13661  0029DC  0E0F               	movlw	15	;volatile
 13662  0029DE  6E1C               	movwf	ECANSendMessage@pb+1,c
 13663  0029E0  0E40               	movlw	64	;volatile
 13664  0029E2  6E1B               	movwf	ECANSendMessage@pb,c
 13665                           
 13666                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 13667  0029E4  0E0F               	movlw	15	;volatile
 13668  0029E6  6E1E               	movwf	ECANSendMessage@pb+3,c
 13669  0029E8  0E30               	movlw	48	;volatile
 13670  0029EA  6E1D               	movwf	ECANSendMessage@pb+2,c
 13671                           
 13672                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 13673  0029EC  0E0F               	movlw	15	;volatile
 13674  0029EE  6E20               	movwf	ECANSendMessage@pb+5,c
 13675  0029F0  0E20               	movlw	32	;volatile
 13676  0029F2  6E1F               	movwf	ECANSendMessage@pb+4,c
 13677                           
 13678                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 13679  0029F4  0E0E               	movlw	14	;volatile
 13680  0029F6  6E22               	movwf	ECANSendMessage@pb+7,c
 13681  0029F8  0E20               	movlw	32	;volatile
 13682  0029FA  6E21               	movwf	ECANSendMessage@pb+6,c
 13683                           
 13684                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 13685  0029FC  0E0E               	movlw	14	;volatile
 13686  0029FE  6E24               	movwf	ECANSendMessage@pb+9,c
 13687  002A00  0E30               	movlw	48	;volatile
 13688  002A02  6E23               	movwf	ECANSendMessage@pb+8,c
 13689                           
 13690                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 13691  002A04  0E0E               	movlw	14	;volatile
 13692  002A06  6E26               	movwf	ECANSendMessage@pb+11,c
 13693  002A08  0E40               	movlw	64	;volatile
 13694  002A0A  6E25               	movwf	ECANSendMessage@pb+10,c
 13695                           
 13696                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 13697  002A0C  0E0E               	movlw	14	;volatile
 13698  002A0E  6E28               	movwf	ECANSendMessage@pb+13,c
 13699  002A10  0E50               	movlw	80	;volatile
 13700  002A12  6E27               	movwf	ECANSendMessage@pb+12,c
 13701                           
 13702                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 13703  002A14  0E0E               	movlw	14	;volatile
 13704  002A16  6E2A               	movwf	ECANSendMessage@pb+15,c
 13705  002A18  0E60               	movlw	96	;volatile
 13706  002A1A  6E29               	movwf	ECANSendMessage@pb+14,c
 13707                           
 13708                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 13709  002A1C  0E0E               	movlw	14	;volatile
 13710  002A1E  6E2C               	movwf	ECANSendMessage@pb+17,c
 13711  002A20  0E70               	movlw	112	;volatile
 13712  002A22  6E2B               	movwf	ECANSendMessage@pb+16,c
 13713                           
 13714                           ; BSR set to: 14
 13715                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 13716  002A24  5077               	movf	3959,w,c	;volatile
 13717  002A26  0BC0               	andlw	192
 13718  002A28  6E2D               	movwf	ECANSendMessage@mode,c
 13719                           
 13720                           ; BSR set to: 14
 13721                           ;ECAN.c: 660: if ( mode == 0x00 )
 13722  002A2A  662D               	tstfsz	ECANSendMessage@mode,c
 13723  002A2C  D002               	goto	l9601
 13724                           
 13725                           ; BSR set to: 14
 13726                           ;ECAN.c: 661: buffers = 2;
 13727  002A2E  0E02               	movlw	2
 13728  002A30  D001               	goto	L41
 13729  002A32                     l9601:
 13730                           
 13731                           ; BSR set to: 14
 13732                           ;ECAN.c: 662: else
 13733                           ;ECAN.c: 663: buffers = 8;
 13734  002A32  0E08               	movlw	8
 13735  002A34                     L41:
 13736  002A34  6E2E               	movwf	ECANSendMessage@buffers,c
 13737                           
 13738                           ; BSR set to: 14
 13739                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 13740  002A36  010D               	movlb	13	; () banked
 13741  002A38  90D8               	bcf	status,0,c
 13742  002A3A  31F8               	rrcf	248,w,b	;volatile
 13743  002A3C  6E30               	movwf	ECANSendMessage@tempBSEL0,c
 13744                           
 13745                           ; BSR set to: 13
 13746                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 13747  002A3E  6A34               	clrf	ECANSendMessage@i,c
 13748  002A40  D07D               	goto	l9661
 13749  002A42                     l9607:
 13750                           
 13751                           ;ECAN.c: 688: {
 13752                           ;ECAN.c: 693: ptr = pb[i];
 13753  002A42  5034               	movf	ECANSendMessage@i,w,c
 13754  002A44  0D02               	mullw	2
 13755  002A46  50F3               	movf	prodl,w,c
 13756  002A48  0F1B               	addlw	low ECANSendMessage@pb
 13757  002A4A  6ED9               	movwf	fsr2l,c
 13758  002A4C  6ADA               	clrf	fsr2h,c
 13759  002A4E  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
 13760  002A52  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
 13761                           
 13762                           ;ECAN.c: 694: tempPtr = ptr;
 13763  002A56  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 13764  002A5A  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 13765                           
 13766                           ;ECAN.c: 702: if ( i > 2 )
 13767  002A5E  0E02               	movlw	2
 13768  002A60  6434               	cpfsgt	ECANSendMessage@i,c
 13769  002A62  D004               	goto	l9619
 13770                           
 13771                           ;ECAN.c: 703: {
 13772                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 13773  002A64  90D8               	bcf	status,0,c
 13774  002A66  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
 13775                           
 13776                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 13777  002A68  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
 13778  002A6A  D067               	goto	l9659
 13779  002A6C                     l9619:
 13780                           
 13781                           ;ECAN.c: 714: }
 13782                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 13783  002A6C  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13784  002A70  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13785  002A74  50DF               	movf	indf2,w,c
 13786  002A76  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13787  002A78  B61A               	btfsc	??_ECANSendMessage,3,c
 13788  002A7A  D05F               	goto	l9659
 13789                           
 13790                           ;ECAN.c: 721: {
 13791                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 13792  002A7C  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13793  002A80  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13794  002A84  0EFC               	movlw	252
 13795  002A86  16DF               	andwf	indf2,f,c
 13796                           
 13797                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 13798  002A88  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 13799  002A8C  0E03               	movlw	3
 13800  002A8E  161A               	andwf	??_ECANSendMessage,f,c
 13801  002A90  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13802  002A94  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13803  002A98  501A               	movf	??_ECANSendMessage,w,c
 13804  002A9A  12DF               	iorwf	indf2,f,c
 13805                           
 13806                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 13807  002A9C  AC19               	btfss	ECANSendMessage@msgFlags,6,c
 13808  002A9E  D004               	goto	l863
 13809                           
 13810                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 13811  002AA0  5018               	movf	ECANSendMessage@dataLen,w,c
 13812  002AA2  0940               	iorlw	64
 13813  002AA4  6E33               	movwf	ECANSendMessage@temp,c
 13814  002AA6  D002               	goto	l9629
 13815  002AA8                     l863:
 13816                           
 13817                           ;ECAN.c: 729: else
 13818                           ;ECAN.c: 730: temp = dataLen;
 13819  002AA8  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 13820  002AAC                     l9629:
 13821                           
 13822                           ;ECAN.c: 732: *(ptr+5) = temp;
 13823  002AAC  EE20 F005          	lfsr	2,5
 13824  002AB0  5035               	movf	ECANSendMessage@ptr,w,c
 13825  002AB2  26D9               	addwf	fsr2l,f,c
 13826  002AB4  5036               	movf	ECANSendMessage@ptr+1,w,c
 13827  002AB6  22DA               	addwfc	fsr2h,f,c
 13828  002AB8  C033  FFDF         	movff	ECANSendMessage@temp,indf2
 13829                           
 13830                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 13831  002ABC  AA19               	btfss	ECANSendMessage@msgFlags,5,c
 13832  002ABE  D003               	goto	l865
 13833                           
 13834                           ;ECAN.c: 736: temp = 1;
 13835  002AC0  0E01               	movlw	1
 13836  002AC2  6E33               	movwf	ECANSendMessage@temp,c
 13837  002AC4  D001               	goto	l9635
 13838  002AC6                     l865:
 13839                           
 13840                           ;ECAN.c: 738: else
 13841                           ;ECAN.c: 739: temp = 0;
 13842  002AC6  6A33               	clrf	ECANSendMessage@temp,c
 13843  002AC8                     l9635:
 13844                           
 13845                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 13846  002AC8  2835               	incf	ECANSendMessage@ptr,w,c
 13847  002ACA  6E08               	movwf	?__CANIDToRegs,c
 13848  002ACC  0E00               	movlw	0
 13849  002ACE  2036               	addwfc	ECANSendMessage@ptr+1,w,c
 13850  002AD0  6E09               	movwf	?__CANIDToRegs+1,c
 13851  002AD2  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 13852  002AD6  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 13853  002ADA  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 13854  002ADE  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 13855  002AE2  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 13856  002AE6  EC79  F017         	call	__CANIDToRegs	;wreg free
 13857                           
 13858                           ;ECAN.c: 745: ptr += 6;
 13859  002AEA  0E06               	movlw	6
 13860  002AEC  2635               	addwf	ECANSendMessage@ptr,f,c
 13861  002AEE  0E00               	movlw	0
 13862  002AF0  2236               	addwfc	ECANSendMessage@ptr+1,f,c
 13863                           
 13864                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 13865  002AF2  6A2F               	clrf	ECANSendMessage@j,c
 13866  002AF4  D00F               	goto	l9649
 13867  002AF6                     l9641:
 13868                           
 13869                           ;ECAN.c: 748: *ptr++ = *data++;
 13870  002AF6  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
 13871  002AFA  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 13872  002AFE  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 13873  002B02  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 13874  002B06  CFDF FFE7          	movff	indf2,indf1
 13875  002B0A  4A16               	infsnz	ECANSendMessage@data,f,c
 13876  002B0C  2A17               	incf	ECANSendMessage@data+1,f,c
 13877  002B0E  4A35               	infsnz	ECANSendMessage@ptr,f,c
 13878  002B10  2A36               	incf	ECANSendMessage@ptr+1,f,c
 13879  002B12  2A2F               	incf	ECANSendMessage@j,f,c
 13880  002B14                     l9649:
 13881  002B14  5018               	movf	ECANSendMessage@dataLen,w,c
 13882  002B16  5C2F               	subwf	ECANSendMessage@j,w,c
 13883  002B18  E3EE               	bnc	l9641
 13884                           
 13885                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 13886  002B1A  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13887  002B1E  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13888  002B22  50DF               	movf	indf2,w,c
 13889  002B24  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13890  002B26  B41A               	btfsc	??_ECANSendMessage,2,c
 13891  002B28  D006               	goto	l9655
 13892                           
 13893                           ;ECAN.c: 753: *tempPtr |= 0x08;
 13894  002B2A  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13895  002B2E  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13896  002B32  0E00               	movlw	0
 13897  002B34  86DB               	bsf	plusw2,3,c
 13898  002B36                     l9655:
 13899                           
 13900                           ;ECAN.c: 755: return TRUE;
 13901  002B36  0E01               	movlw	1
 13902  002B38  D005               	goto	l871
 13903  002B3A                     l9659:
 13904  002B3A  2A34               	incf	ECANSendMessage@i,f,c
 13905  002B3C                     l9661:
 13906  002B3C  502E               	movf	ECANSendMessage@buffers,w,c
 13907  002B3E  5C34               	subwf	ECANSendMessage@i,w,c
 13908  002B40  E380               	bnc	l9607
 13909                           
 13910                           ;ECAN.c: 756: }
 13911                           ;ECAN.c: 757: }
 13912                           ;ECAN.c: 760: return FALSE;
 13913  002B42  0E00               	movlw	0
 13914  002B44                     l871:
 13915  002B44  0012               	return	
 13916  002B46                     __end_of_ECANSendMessage:
 13917                           	opt stack 0
 13918                           tblptru	equ	0xFF8
 13919                           tblptrh	equ	0xFF7
 13920                           tblptrl	equ	0xFF6
 13921                           tablat	equ	0xFF5
 13922                           prodh	equ	0xFF4
 13923                           prodl	equ	0xFF3
 13924                           intcon	equ	0xFF2
 13925                           postinc0	equ	0xFEE
 13926                           wreg	equ	0xFE8
 13927                           indf1	equ	0xFE7
 13928                           fsr1h	equ	0xFE2
 13929                           fsr1l	equ	0xFE1
 13930                           indf2	equ	0xFDF
 13931                           postinc2	equ	0xFDE
 13932                           postdec2	equ	0xFDD
 13933                           plusw2	equ	0xFDB
 13934                           fsr2h	equ	0xFDA
 13935                           fsr2l	equ	0xFD9
 13936                           status	equ	0xFD8
 13937                           
 13938 ;; *************** function __CANIDToRegs *****************
 13939 ;; Defined at:
 13940 ;;		line 1099 in file "../ECAN.c"
 13941 ;; Parameters:    Size  Location     Type
 13942 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 13943 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13944 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13945 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
 13946 ;;  val             4    9[COMRAM] unsigned long 
 13947 ;;  type            1   13[COMRAM] unsigned char 
 13948 ;; Auto vars:     Size  Location     Type
 13949 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
 13950 ;;		 -> _CANIDToRegs@val(4), 
 13951 ;; Return value:  Size  Location     Type
 13952 ;;		None               void
 13953 ;; Registers used:
 13954 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13955 ;; Tracked objects:
 13956 ;;		On entry : 0/F
 13957 ;;		On exit  : 0/0
 13958 ;;		Unchanged: 0/0
 13959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13960 ;;      Params:         7       0       0       0       0       0       0
 13961 ;;      Locals:         1       0       0       0       0       0       0
 13962 ;;      Temps:          2       0       0       0       0       0       0
 13963 ;;      Totals:        10       0       0       0       0       0       0
 13964 ;;Total ram usage:       10 bytes
 13965 ;; Hardware stack levels used:    1
 13966 ;; Hardware stack levels required when called:    2
 13967 ;; This function calls:
 13968 ;;		Nothing
 13969 ;; This function is called by:
 13970 ;;		_calculateSetFilterMask
 13971 ;;		_ECANSendMessage
 13972 ;; This function uses a non-reentrant model
 13973 ;;
 13974                           
 13975                           	psect	text55
 13976  002EF2                     __ptext55:
 13977                           	opt stack 0
 13978  002EF2                     __CANIDToRegs:
 13979                           	opt stack 23
 13980                           
 13981                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 13982                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 13983                           
 13984                           ;incstack = 0
 13985                           ;incstack = 0
 13986  002EF2  0E0A               	movlw	low __CANIDToRegs@val
 13987  002EF4  6E11               	movwf	__CANIDToRegs@Value,c
 13988                           
 13989                           ;ECAN.c: 1104: if ( type == 0 )
 13990  002EF6  660E               	tstfsz	__CANIDToRegs@type,c
 13991  002EF8  D022               	goto	l9677
 13992                           
 13993                           ;ECAN.c: 1105: {
 13994                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 13995  002EFA  5011               	movf	__CANIDToRegs@Value,w,c
 13996  002EFC  6ED9               	movwf	fsr2l,c
 13997  002EFE  6ADA               	clrf	fsr2h,c
 13998  002F00  50DF               	movf	indf2,w,c
 13999  002F02  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 14000  002F04  90D8               	bcf	status,0,c
 14001  002F06  320F               	rrcf	??__CANIDToRegs,f,c
 14002  002F08  90D8               	bcf	status,0,c
 14003  002F0A  320F               	rrcf	??__CANIDToRegs,f,c
 14004  002F0C  90D8               	bcf	status,0,c
 14005  002F0E  300F               	rrcf	??__CANIDToRegs,w,c
 14006                           
 14007                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 14008  002F10  D862               	call	PL30	;call to abstracted procedure
 14009  002F12  2AD9               	incf	fsr2l,f,c
 14010  002F14  6ADA               	clrf	fsr2h,c
 14011  002F16  D872               	call	PL74	;call to abstracted procedure
 14012  002F18                     u10975:
 14013  002F18  90D8               	bcf	status,0,c
 14014  002F1A  360F               	rlcf	??__CANIDToRegs,f,c
 14015  002F1C  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 14016  002F1E  D7FC               	goto	u10975
 14017  002F20  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 14018                           
 14019                           ;ECAN.c: 1109: ptr++;
 14020                           
 14021                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 14022  002F24  D846               	call	PL18	;call to abstracted procedure
 14023  002F26  D86A               	call	PL74	;call to abstracted procedure
 14024  002F28                     u10985:
 14025  002F28  90D8               	bcf	status,0,c
 14026  002F2A  360F               	rlcf	??__CANIDToRegs,f,c
 14027  002F2C  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 14028  002F2E  D7FC               	goto	u10985
 14029  002F30  500F               	movf	??__CANIDToRegs,w,c
 14030  002F32  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 14031  002F36  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 14032  002F3A  6EDF               	movwf	indf2,c
 14033                           
 14034                           ;ECAN.c: 1111: }
 14035  002F3C  D039               	goto	l925
 14036  002F3E                     l9677:
 14037                           
 14038                           ;ECAN.c: 1112: else
 14039                           ;ECAN.c: 1113: {
 14040                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 14041  002F3E  5011               	movf	__CANIDToRegs@Value,w,c
 14042  002F40  D842               	call	PL26	;call to abstracted procedure
 14043  002F42  0E05               	movlw	5
 14044  002F44  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 14045  002F46                     u10995:
 14046  002F46  90D8               	bcf	status,0,c
 14047  002F48  320F               	rrcf	??__CANIDToRegs,f,c
 14048  002F4A  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 14049  002F4C  D7FC               	goto	u10995
 14050  002F4E  500F               	movf	??__CANIDToRegs,w,c
 14051                           
 14052                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 14053  002F50  D842               	call	PL30	;call to abstracted procedure
 14054  002F52  0E03               	movlw	3
 14055  002F54  D849               	call	PL46	;call to abstracted procedure
 14056  002F56  360F               	rlcf	??__CANIDToRegs,f,c
 14057  002F58  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 14058                           
 14059                           ;ECAN.c: 1117: ptr++;
 14060                           
 14061                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 14062  002F5C  D82A               	call	PL18	;call to abstracted procedure
 14063  002F5E  0E02               	movlw	2
 14064  002F60  D843               	call	PL46	;call to abstracted procedure
 14065  002F62  340F               	rlcf	??__CANIDToRegs,w,c
 14066  002F64  0BE0               	andlw	224
 14067  002F66  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 14068  002F6A  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 14069  002F6E  6EDF               	movwf	indf2,c
 14070                           
 14071                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 14072  002F70  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 14073  002F74  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 14074  002F78  0E00               	movlw	0
 14075  002F7A  86DB               	bsf	plusw2,3,c
 14076                           
 14077                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 14078  002F7C  5011               	movf	__CANIDToRegs@Value,w,c
 14079  002F7E  D823               	call	PL26	;call to abstracted procedure
 14080  002F80  0E03               	movlw	3
 14081  002F82  160F               	andwf	??__CANIDToRegs,f,c
 14082  002F84  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 14083                           
 14084                           ;ECAN.c: 1122: ptr++;
 14085                           
 14086                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 14087  002F88  D814               	call	PL18	;call to abstracted procedure
 14088  002F8A  2AD9               	incf	fsr2l,f,c
 14089  002F8C  6ADA               	clrf	fsr2h,c
 14090  002F8E  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 14091  002F92  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 14092  002F96  CFDF FFE7          	movff	indf2,indf1
 14093                           
 14094                           ;ECAN.c: 1124: ptr++;
 14095  002F9A  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 14096  002F9C  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 14097                           
 14098                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 14099  002F9E  5011               	movf	__CANIDToRegs@Value,w,c
 14100  002FA0  6ED9               	movwf	fsr2l,c
 14101  002FA2  6ADA               	clrf	fsr2h,c
 14102  002FA4  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 14103  002FA8  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 14104  002FAC  CFDF FFE7          	movff	indf2,indf1
 14105  002FB0                     l925:
 14106  002FB0  0012               	return	
 14107  002FB2                     __end_of__CANIDToRegs:
 14108                           	opt stack 0
 14109  002FB2                     PL18:
 14110                           	opt stack 23
 14111  002FB2  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 14112  002FB6  500F               	movf	??__CANIDToRegs,w,c
 14113  002FB8  12DF               	iorwf	indf2,f,c
 14114  002FBA  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 14115  002FBC  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 14116  002FBE  5011               	movf	__CANIDToRegs@Value,w,c
 14117  002FC0  6ED9               	movwf	fsr2l,c
 14118  002FC2  6ADA               	clrf	fsr2h,c
 14119  002FC4  0012               	return	
 14120  002FC6                     __end_ofPL18:
 14121                           	opt stack 0
 14122  002FC6                     PL26:
 14123                           	opt stack 23
 14124  002FC6  6ED9               	movwf	fsr2l,c
 14125  002FC8  6ADA               	clrf	fsr2h,c
 14126  002FCA  0E02               	movlw	2
 14127  002FCC  26D9               	addwf	fsr2l,f,c
 14128  002FCE  6ADA               	clrf	fsr2h,c
 14129  002FD0  50DF               	movf	indf2,w,c
 14130  002FD2  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 14131  002FD4  0012               	return	
 14132  002FD6                     __end_ofPL26:
 14133                           	opt stack 0
 14134  002FD6                     PL30:
 14135                           	opt stack 23
 14136  002FD6  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 14137  002FDA  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 14138  002FDE  6EDF               	movwf	indf2,c
 14139  002FE0  5011               	movf	__CANIDToRegs@Value,w,c
 14140  002FE2  6ED9               	movwf	fsr2l,c
 14141  002FE4  6ADA               	clrf	fsr2h,c
 14142  002FE6  0012               	return	
 14143  002FE8                     __end_ofPL30:
 14144                           	opt stack 0
 14145  002FE8                     PL46:
 14146                           	opt stack 23
 14147  002FE8  26D9               	addwf	fsr2l,f,c
 14148  002FEA  6ADA               	clrf	fsr2h,c
 14149  002FEC  50DF               	movf	indf2,w,c
 14150  002FEE  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 14151  002FF0  90D8               	bcf	status,0,c
 14152  002FF2  360F               	rlcf	??__CANIDToRegs,f,c
 14153  002FF4  90D8               	bcf	status,0,c
 14154  002FF6  360F               	rlcf	??__CANIDToRegs,f,c
 14155  002FF8  90D8               	bcf	status,0,c
 14156  002FFA  0012               	return	
 14157  002FFC                     __end_ofPL46:
 14158                           	opt stack 0
 14159  002FFC                     PL74:
 14160                           	opt stack 23
 14161  002FFC  50DF               	movf	indf2,w,c
 14162  002FFE  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 14163  003000  0E05               	movlw	5
 14164  003002  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 14165  003004  0C05               	retlw	5
 14166  003006                     __end_ofPL74:
 14167                           	opt stack 0
 14168                           tblptru	equ	0xFF8
 14169                           tblptrh	equ	0xFF7
 14170                           tblptrl	equ	0xFF6
 14171                           tablat	equ	0xFF5
 14172                           prodh	equ	0xFF4
 14173                           prodl	equ	0xFF3
 14174                           intcon	equ	0xFF2
 14175                           postinc0	equ	0xFEE
 14176                           wreg	equ	0xFE8
 14177                           indf1	equ	0xFE7
 14178                           fsr1h	equ	0xFE2
 14179                           fsr1l	equ	0xFE1
 14180                           indf2	equ	0xFDF
 14181                           postinc2	equ	0xFDE
 14182                           postdec2	equ	0xFDD
 14183                           plusw2	equ	0xFDB
 14184                           fsr2h	equ	0xFDA
 14185                           fsr2l	equ	0xFD9
 14186                           status	equ	0xFD8
 14187                           
 14188 ;; *************** function _vscp_getEvent *****************
 14189 ;; Defined at:
 14190 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 14191 ;; Parameters:    Size  Location     Type
 14192 ;;		None
 14193 ;; Auto vars:     Size  Location     Type
 14194 ;;  rv              1   43[COMRAM] unsigned char 
 14195 ;; Return value:  Size  Location     Type
 14196 ;;                  1    wreg      unsigned char 
 14197 ;; Registers used:
 14198 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14199 ;; Tracked objects:
 14200 ;;		On entry : F/0
 14201 ;;		On exit  : 0/0
 14202 ;;		Unchanged: 0/0
 14203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14204 ;;      Params:         0       0       0       0       0       0       0
 14205 ;;      Locals:         1       0       0       0       0       0       0
 14206 ;;      Temps:          0       0       0       0       0       0       0
 14207 ;;      Totals:         1       0       0       0       0       0       0
 14208 ;;Total ram usage:        1 bytes
 14209 ;; Hardware stack levels used:    1
 14210 ;; Hardware stack levels required when called:    6
 14211 ;; This function calls:
 14212 ;;		_getVSCPFrame
 14213 ;; This function is called by:
 14214 ;;		_main
 14215 ;; This function uses a non-reentrant model
 14216 ;;
 14217                           
 14218                           	psect	text56
 14219  003A88                     __ptext56:
 14220                           	opt stack 0
 14221  003A88                     _vscp_getEvent:
 14222                           	opt stack 24
 14223                           
 14224                           ; BSR set to: 0
 14225                           ;vscp_firmware.c: 1309: int8_t rv;
 14226                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 14227                           
 14228                           ;incstack = 0
 14229                           ;incstack = 0
 14230  003A88  BF96               	btfsc	_vscp_imsg& (0+255),7,b
 14231  003A8A  D012               	goto	l1299
 14232                           
 14233                           ; BSR set to: 0
 14234                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 14235                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 14236                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 14237                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 14238                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 14239                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
 14240  003A8C  0E9A               	movlw	low (_vscp_imsg+4)
 14241  003A8E  6E1E               	movwf	?_getVSCPFrame,c
 14242  003A90  0E9B               	movlw	low (_vscp_imsg+5)
 14243  003A92  6E1F               	movwf	?_getVSCPFrame+1,c
 14244  003A94  0E97               	movlw	low (_vscp_imsg+1)
 14245  003A96  6E20               	movwf	?_getVSCPFrame+2,c
 14246  003A98  0E96               	movlw	low _vscp_imsg
 14247  003A9A  6E21               	movwf	?_getVSCPFrame+3,c
 14248  003A9C  0E9C               	movlw	low (_vscp_imsg+6)
 14249  003A9E  6E22               	movwf	?_getVSCPFrame+4,c
 14250  003AA0  0E98               	movlw	(_vscp_imsg+2)& (0+255)
 14251  003AA2  EC9B  F01B         	call	_getVSCPFrame
 14252  003AA6  6E2C               	movwf	vscp_getEvent@rv,c
 14253  003AA8  502C               	movf	vscp_getEvent@rv& (0+255),w,c
 14254  003AAA  E002               	bz	l1299
 14255                           
 14256                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 14257  003AAC  0100               	movlb	0	; () banked
 14258  003AAE  8F96               	bsf	_vscp_imsg& (0+255),7,b
 14259  003AB0                     l1299:
 14260  003AB0  0012               	return	
 14261  003AB2                     __end_of_vscp_getEvent:
 14262                           	opt stack 0
 14263                           tblptru	equ	0xFF8
 14264                           tblptrh	equ	0xFF7
 14265                           tblptrl	equ	0xFF6
 14266                           tablat	equ	0xFF5
 14267                           prodh	equ	0xFF4
 14268                           prodl	equ	0xFF3
 14269                           intcon	equ	0xFF2
 14270                           postinc0	equ	0xFEE
 14271                           wreg	equ	0xFE8
 14272                           indf1	equ	0xFE7
 14273                           fsr1h	equ	0xFE2
 14274                           fsr1l	equ	0xFE1
 14275                           indf2	equ	0xFDF
 14276                           postinc2	equ	0xFDE
 14277                           postdec2	equ	0xFDD
 14278                           plusw2	equ	0xFDB
 14279                           fsr2h	equ	0xFDA
 14280                           fsr2l	equ	0xFD9
 14281                           status	equ	0xFD8
 14282                           
 14283 ;; *************** function _getVSCPFrame *****************
 14284 ;; Defined at:
 14285 ;;		line 2609 in file "../main.c"
 14286 ;; Parameters:    Size  Location     Type
 14287 ;;  pvscpclass      1    wreg     PTR unsigned short 
 14288 ;;		 -> vscp_imsg(14), 
 14289 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
 14290 ;;		 -> vscp_imsg(14), 
 14291 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
 14292 ;;		 -> vscp_imsg(14), 
 14293 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
 14294 ;;		 -> vscp_imsg(14), 
 14295 ;;  pSize           1   32[COMRAM] PTR unsigned char 
 14296 ;;		 -> vscp_imsg(14), 
 14297 ;;  pData           1   33[COMRAM] PTR unsigned char 
 14298 ;;		 -> vscp_imsg(14), 
 14299 ;; Auto vars:     Size  Location     Type
 14300 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
 14301 ;;		 -> vscp_imsg(14), 
 14302 ;;  id              4   39[COMRAM] unsigned long 
 14303 ;; Return value:  Size  Location     Type
 14304 ;;                  1    wreg      unsigned char 
 14305 ;; Registers used:
 14306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14307 ;; Tracked objects:
 14308 ;;		On entry : F/0
 14309 ;;		On exit  : 0/0
 14310 ;;		Unchanged: 0/0
 14311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14312 ;;      Params:         5       0       0       0       0       0       0
 14313 ;;      Locals:         5       0       0       0       0       0       0
 14314 ;;      Temps:          4       0       0       0       0       0       0
 14315 ;;      Totals:        14       0       0       0       0       0       0
 14316 ;;Total ram usage:       14 bytes
 14317 ;; Hardware stack levels used:    1
 14318 ;; Hardware stack levels required when called:    5
 14319 ;; This function calls:
 14320 ;;		_getCANFrame
 14321 ;; This function is called by:
 14322 ;;		_vscp_getEvent
 14323 ;; This function uses a non-reentrant model
 14324 ;;
 14325                           
 14326                           	psect	text57
 14327  003736                     __ptext57:
 14328                           	opt stack 0
 14329  003736                     _getVSCPFrame:
 14330                           	opt stack 24
 14331                           
 14332                           ;incstack = 0
 14333                           ;incstack = 0
 14334                           ;getVSCPFrame@pvscpclass stored from wreg
 14335  003736  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
 14336                           
 14337                           ; BSR set to: 0
 14338                           ;main.c: 2610: uint32_t id;
 14339                           ;main.c: 2612: if ( !getCANFrame(&id, pSize, pData) ) {
 14340  00373A  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
 14341  00373E  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
 14342  003742  0E28               	movlw	getVSCPFrame@id& (0+255)
 14343  003744  EC19  F01D         	call	_getCANFrame
 14344  003748  0900               	iorlw	0
 14345  00374A  E102               	bnz	l6941
 14346                           
 14347                           ;main.c: 2613: return 0;
 14348  00374C  0E00               	movlw	0
 14349  00374E  D02E               	goto	l665
 14350  003750                     l6941:
 14351                           
 14352                           ;main.c: 2614: }
 14353                           ;main.c: 2616: *pNodeId = id & 0x0ff;
 14354  003750  501F               	movf	getVSCPFrame@pNodeId,w,c
 14355  003752  6ED9               	movwf	fsr2l,c
 14356  003754  6ADA               	clrf	fsr2h,c
 14357  003756  C028  FFDF         	movff	getVSCPFrame@id,indf2
 14358                           
 14359                           ;main.c: 2617: *pvscptype = (id >> 8) & 0xff;
 14360  00375A  501E               	movf	getVSCPFrame@pvscptype,w,c
 14361  00375C  6ED9               	movwf	fsr2l,c
 14362  00375E  6ADA               	clrf	fsr2h,c
 14363  003760  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
 14364                           
 14365                           ;main.c: 2618: *pvscpclass = (id >> 16) & 0x1ff;
 14366  003764  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 14367  003766  6E23               	movwf	??_getVSCPFrame& (0+255),c
 14368  003768  0E01               	movlw	1
 14369  00376A  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 14370  00376C  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
 14371  00376E  5027               	movf	getVSCPFrame@pvscpclass,w,c
 14372  003770  6ED9               	movwf	fsr2l,c
 14373  003772  6ADA               	clrf	fsr2h,c
 14374  003774  C023  FFDE         	movff	??_getVSCPFrame,postinc2
 14375  003778  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 14376                           
 14377                           ;main.c: 2619: *pPriority = (uint16_t) (0x07 & (id >> 26));
 14378  00377C  5020               	movf	getVSCPFrame@pPriority,w,c
 14379  00377E  6ED9               	movwf	fsr2l,c
 14380  003780  6ADA               	clrf	fsr2h,c
 14381  003782  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 14382  003786  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 14383  00378A  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 14384  00378E  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 14385  003792  0E1B               	movlw	27
 14386  003794  D005               	goto	u6940
 14387  003796                     u6945:
 14388  003796  90D8               	bcf	status,0,c
 14389  003798  3226               	rrcf	??_getVSCPFrame+3,f,c
 14390  00379A  3225               	rrcf	??_getVSCPFrame+2,f,c
 14391  00379C  3224               	rrcf	??_getVSCPFrame+1,f,c
 14392  00379E  3223               	rrcf	??_getVSCPFrame,f,c
 14393  0037A0                     u6940:
 14394  0037A0  2EE8               	decfsz	wreg,f,c
 14395  0037A2  D7F9               	goto	u6945
 14396  0037A4  5023               	movf	??_getVSCPFrame,w,c
 14397  0037A6  0B07               	andlw	7
 14398  0037A8  6EDF               	movwf	indf2,c
 14399                           
 14400                           ;main.c: 2621: return 1;
 14401  0037AA  0E01               	movlw	1
 14402  0037AC                     l665:
 14403  0037AC  0012               	return	
 14404  0037AE                     __end_of_getVSCPFrame:
 14405                           	opt stack 0
 14406                           tblptru	equ	0xFF8
 14407                           tblptrh	equ	0xFF7
 14408                           tblptrl	equ	0xFF6
 14409                           tablat	equ	0xFF5
 14410                           prodh	equ	0xFF4
 14411                           prodl	equ	0xFF3
 14412                           intcon	equ	0xFF2
 14413                           postinc0	equ	0xFEE
 14414                           wreg	equ	0xFE8
 14415                           indf1	equ	0xFE7
 14416                           fsr1h	equ	0xFE2
 14417                           fsr1l	equ	0xFE1
 14418                           indf2	equ	0xFDF
 14419                           postinc2	equ	0xFDE
 14420                           postdec2	equ	0xFDD
 14421                           plusw2	equ	0xFDB
 14422                           fsr2h	equ	0xFDA
 14423                           fsr2l	equ	0xFD9
 14424                           status	equ	0xFD8
 14425                           
 14426 ;; *************** function _getCANFrame *****************
 14427 ;; Defined at:
 14428 ;;		line 2651 in file "../main.c"
 14429 ;; Parameters:    Size  Location     Type
 14430 ;;  pid             1    wreg     PTR unsigned long 
 14431 ;;		 -> getVSCPFrame@id(4), 
 14432 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 14433 ;;		 -> vscp_imsg(14), 
 14434 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 14435 ;;		 -> vscp_imsg(14), 
 14436 ;; Auto vars:     Size  Location     Type
 14437 ;;  pid             1   27[COMRAM] PTR unsigned long 
 14438 ;;		 -> getVSCPFrame@id(4), 
 14439 ;;  flags           1   28[COMRAM] enum E16332
 14440 ;; Return value:  Size  Location     Type
 14441 ;;                  1    wreg      unsigned char 
 14442 ;; Registers used:
 14443 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14444 ;; Tracked objects:
 14445 ;;		On entry : F/0
 14446 ;;		On exit  : 0/0
 14447 ;;		Unchanged: 0/0
 14448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14449 ;;      Params:         2       0       0       0       0       0       0
 14450 ;;      Locals:         2       0       0       0       0       0       0
 14451 ;;      Temps:          0       0       0       0       0       0       0
 14452 ;;      Totals:         4       0       0       0       0       0       0
 14453 ;;Total ram usage:        4 bytes
 14454 ;; Hardware stack levels used:    1
 14455 ;; Hardware stack levels required when called:    4
 14456 ;; This function calls:
 14457 ;;		_ECANReceiveMessage
 14458 ;; This function is called by:
 14459 ;;		_getVSCPFrame
 14460 ;; This function uses a non-reentrant model
 14461 ;;
 14462                           
 14463                           	psect	text58
 14464  003A32                     __ptext58:
 14465                           	opt stack 0
 14466  003A32                     _getCANFrame:
 14467                           	opt stack 24
 14468                           
 14469                           ;incstack = 0
 14470                           ;incstack = 0
 14471                           ;getCANFrame@pid stored from wreg
 14472  003A32  CFE8 F01C          	movff	wreg,getCANFrame@pid
 14473                           
 14474                           ; BSR set to: 0
 14475                           ;main.c: 2652: ECAN_RX_MSG_FLAGS flags;
 14476                           ;main.c: 2656: if (vscp_imsg.flags & 0x80) return 0;
 14477  003A36  AF96               	btfss	_vscp_imsg& (0+255),7,b
 14478  003A38  D002               	goto	l6957
 14479  003A3A                     l6953:
 14480  003A3A  0E00               	movlw	0
 14481  003A3C  D00F               	goto	l676
 14482  003A3E                     l6957:
 14483                           
 14484                           ; BSR set to: 0
 14485                           ;main.c: 2658: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 14486  003A3E  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 14487  003A42  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 14488  003A46  0E1D               	movlw	low getCANFrame@flags
 14489  003A48  6E11               	movwf	?_ECANReceiveMessage+2,c
 14490  003A4A  501C               	movf	getCANFrame@pid,w,c
 14491  003A4C  EC19  F011         	call	_ECANReceiveMessage
 14492  003A50  0900               	iorlw	0
 14493  003A52  E0F3               	bz	l6953
 14494                           
 14495                           ;main.c: 2661: if (flags & ECAN_RX_RTR_FRAME) return 0;
 14496  003A54  AC1D               	btfss	getCANFrame@flags,6,c
 14497                           
 14498                           ;main.c: 2664: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 14499  003A56  AA1D               	btfss	getCANFrame@flags,5,c
 14500  003A58  D7F0               	goto	l6953
 14501                           
 14502                           ;main.c: 2666: return 1;
 14503  003A5A  0E01               	movlw	1
 14504  003A5C                     l676:
 14505  003A5C  0012               	return	
 14506  003A5E                     __end_of_getCANFrame:
 14507                           	opt stack 0
 14508                           tblptru	equ	0xFF8
 14509                           tblptrh	equ	0xFF7
 14510                           tblptrl	equ	0xFF6
 14511                           tablat	equ	0xFF5
 14512                           prodh	equ	0xFF4
 14513                           prodl	equ	0xFF3
 14514                           intcon	equ	0xFF2
 14515                           postinc0	equ	0xFEE
 14516                           wreg	equ	0xFE8
 14517                           indf1	equ	0xFE7
 14518                           fsr1h	equ	0xFE2
 14519                           fsr1l	equ	0xFE1
 14520                           indf2	equ	0xFDF
 14521                           postinc2	equ	0xFDE
 14522                           postdec2	equ	0xFDD
 14523                           plusw2	equ	0xFDB
 14524                           fsr2h	equ	0xFDA
 14525                           fsr2l	equ	0xFD9
 14526                           status	equ	0xFD8
 14527                           
 14528 ;; *************** function _ECANReceiveMessage *****************
 14529 ;; Defined at:
 14530 ;;		line 803 in file "../ECAN.c"
 14531 ;; Parameters:    Size  Location     Type
 14532 ;;  id              1    wreg     PTR unsigned long 
 14533 ;;		 -> getVSCPFrame@id(4), 
 14534 ;;  data            1   14[COMRAM] PTR unsigned char 
 14535 ;;		 -> vscp_imsg(14), 
 14536 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 14537 ;;		 -> vscp_imsg(14), 
 14538 ;;  msgFlags        1   16[COMRAM] PTR enum E16324
 14539 ;;		 -> getCANFrame@flags(1), 
 14540 ;; Auto vars:     Size  Location     Type
 14541 ;;  id              1   19[COMRAM] PTR unsigned long 
 14542 ;;		 -> getVSCPFrame@id(4), 
 14543 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 14544 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14545 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14546 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
 14547 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14548 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14549 ;;  temp            1   22[COMRAM] struct .
 14550 ;;  mode            1   21[COMRAM] unsigned char 
 14551 ;;  i               1   20[COMRAM] unsigned char 
 14552 ;; Return value:  Size  Location     Type
 14553 ;;                  1    wreg      enum E15660
 14554 ;; Registers used:
 14555 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14556 ;; Tracked objects:
 14557 ;;		On entry : F/0
 14558 ;;		On exit  : 0/0
 14559 ;;		Unchanged: 0/0
 14560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14561 ;;      Params:         3       0       0       0       0       0       0
 14562 ;;      Locals:         8       0       0       0       0       0       0
 14563 ;;      Temps:          0       0       0       0       0       0       0
 14564 ;;      Totals:        11       0       0       0       0       0       0
 14565 ;;Total ram usage:       11 bytes
 14566 ;; Hardware stack levels used:    1
 14567 ;; Hardware stack levels required when called:    3
 14568 ;; This function calls:
 14569 ;;		__ECANPointBuffer
 14570 ;;		__RegsToCANID
 14571 ;; This function is called by:
 14572 ;;		_getCANFrame
 14573 ;; This function uses a non-reentrant model
 14574 ;;
 14575                           
 14576                           	psect	text59
 14577  002232                     __ptext59:
 14578                           	opt stack 0
 14579  002232                     _ECANReceiveMessage:
 14580                           	opt stack 24
 14581                           
 14582                           ;incstack = 0
 14583                           ;incstack = 0
 14584                           ;ECANReceiveMessage@id stored from wreg
 14585  002232  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
 14586                           
 14587                           ; BSR set to: 0
 14588                           ;ECAN.c: 805: BYTE mode;
 14589                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 14590                           ;ECAN.c: 809: char i;
 14591                           ;ECAN.c: 810: BYTE_VAL temp;
 14592                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 14593  002236  6A54               	clrf	__ECANRxFilterHitInfo,c
 14594                           
 14595                           ; BSR set to: 0
 14596                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 14597  002238  5077               	movf	3959,w,c	;volatile
 14598  00223A  0BC0               	andlw	192
 14599  00223C  6E16               	movwf	ECANReceiveMessage@mode,c
 14600                           
 14601                           ; BSR set to: 0
 14602                           ;ECAN.c: 816: if ( mode == 0x00 )
 14603  00223E  6616               	tstfsz	ECANReceiveMessage@mode,c
 14604  002240  D032               	goto	l7089
 14605                           
 14606                           ; BSR set to: 0
 14607                           ;ECAN.c: 822: {
 14608                           ;ECAN.c: 824: if ( RXB0FUL )
 14609  002242  AE60               	btfss	3936,7,c	;volatile
 14610  002244  D012               	goto	l876
 14611                           
 14612                           ; BSR set to: 0
 14613                           ;ECAN.c: 825: {
 14614                           ;ECAN.c: 827: RXB0IF = 0;
 14615  002246  90A4               	bcf	4004,0,c	;volatile
 14616                           
 14617                           ;ECAN.c: 830: if ( RXB0OVFL )
 14618  002248  AE74               	btfss	3956,7,c	;volatile
 14619  00224A  D006               	goto	l7065
 14620                           
 14621                           ; BSR set to: 0
 14622                           ;ECAN.c: 831: {
 14623                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 14624  00224C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14625  00224E  6ED9               	movwf	fsr2l,c
 14626  002250  6ADA               	clrf	fsr2h,c
 14627  002252  0E00               	movlw	0
 14628  002254  86DB               	bsf	plusw2,3,c
 14629                           
 14630                           ; BSR set to: 0
 14631                           ;ECAN.c: 833: RXB0OVFL = 0;
 14632  002256  9E74               	bcf	3956,7,c	;volatile
 14633  002258                     l7065:
 14634                           
 14635                           ; BSR set to: 0
 14636                           ;ECAN.c: 834: }
 14637                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 14638  002258  A060               	btfss	3936,0,c	;volatile
 14639  00225A  D002               	bra	u7115
 14640  00225C  8054               	bsf	__ECANRxFilterHitInfo,0,c
 14641  00225E  D001               	bra	u7117
 14642  002260                     u7115:
 14643  002260  9054               	bcf	__ECANRxFilterHitInfo,0,c
 14644  002262                     u7117:
 14645                           
 14646                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 14647  002262  0E0F               	movlw	15	;volatile
 14648  002264  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14649  002266  0E60               	movlw	96	;volatile
 14650  002268  D01A               	goto	L42
 14651  00226A                     l876:
 14652                           
 14653                           ; BSR set to: 0
 14654                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 14655  00226A  010F               	movlb	15	; () banked
 14656  00226C  AF50               	btfss	80,7,b	;volatile
 14657  00226E  D019               	goto	l7083
 14658                           
 14659                           ; BSR set to: 15
 14660                           ;ECAN.c: 842: {
 14661                           ;ECAN.c: 844: RXB1IF = 0;
 14662  002270  92A4               	bcf	4004,1,c	;volatile
 14663                           
 14664                           ;ECAN.c: 847: if ( RXB1OVFL )
 14665  002272  AC74               	btfss	3956,6,c	;volatile
 14666  002274  D006               	goto	l7075
 14667                           
 14668                           ; BSR set to: 15
 14669                           ;ECAN.c: 848: {
 14670                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 14671  002276  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14672  002278  6ED9               	movwf	fsr2l,c
 14673  00227A  6ADA               	clrf	fsr2h,c
 14674  00227C  0E00               	movlw	0
 14675  00227E  86DB               	bsf	plusw2,3,c
 14676                           
 14677                           ; BSR set to: 15
 14678                           ;ECAN.c: 850: RXB1OVFL = 0;
 14679  002280  9C74               	bcf	3956,6,c	;volatile
 14680  002282                     l7075:
 14681                           
 14682                           ; BSR set to: 15
 14683                           ;ECAN.c: 851: }
 14684                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 14685  002282  5150               	movf	80,w,b	;volatile
 14686  002284  0B07               	andlw	7
 14687  002286  6E54               	movwf	__ECANRxFilterHitInfo,c
 14688                           
 14689                           ; BSR set to: 15
 14690                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 14691  002288  0E02               	movlw	2
 14692  00228A  6054               	cpfslt	__ECANRxFilterHitInfo,c
 14693  00228C  D005               	goto	l7081
 14694                           
 14695                           ; BSR set to: 15
 14696                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 14697  00228E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14698  002290  6ED9               	movwf	fsr2l,c
 14699  002292  6ADA               	clrf	fsr2h,c
 14700  002294  0E00               	movlw	0
 14701  002296  8EDB               	bsf	plusw2,7,c
 14702  002298                     l7081:
 14703                           
 14704                           ; BSR set to: 15
 14705                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 14706  002298  0E0F               	movlw	15	;volatile
 14707  00229A  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14708  00229C  0E50               	movlw	80	;volatile
 14709  00229E                     L42:
 14710  00229E  6E18               	movwf	ECANReceiveMessage@ptr,c
 14711                           
 14712                           ;ECAN.c: 860: }
 14713  0022A0  D065               	goto	l7143
 14714  0022A2                     l7083:
 14715                           
 14716                           ;ECAN.c: 861: else
 14717                           ;ECAN.c: 862: return FALSE;
 14718  0022A2  0E00               	movlw	0
 14719  0022A4  D0C2               	goto	l883
 14720  0022A6                     l7089:
 14721                           
 14722                           ; BSR set to: 0
 14723                           ;ECAN.c: 869: else if ( mode == 0x40 )
 14724  0022A6  5016               	movf	ECANReceiveMessage@mode,w,c
 14725  0022A8  0A40               	xorlw	64
 14726  0022AA  E146               	bnz	l886
 14727                           
 14728                           ; BSR set to: 0
 14729                           ;ECAN.c: 875: {
 14730                           ;ECAN.c: 876: if ( RXB0FUL )
 14731  0022AC  AE60               	btfss	3936,7,c	;volatile
 14732  0022AE  D004               	goto	l887
 14733                           
 14734                           ; BSR set to: 0
 14735                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 14736  0022B0  0E0F               	movlw	15	;volatile
 14737  0022B2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14738  0022B4  0E60               	movlw	96	;volatile
 14739  0022B6  D03E               	goto	L49
 14740  0022B8                     l887:
 14741                           
 14742                           ; BSR set to: 0
 14743                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 14744  0022B8  010F               	movlb	15	; () banked
 14745  0022BA  AF50               	btfss	80,7,b	;volatile
 14746  0022BC  D004               	goto	l889
 14747                           
 14748                           ; BSR set to: 15
 14749                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 14750  0022BE  0E0F               	movlw	15	;volatile
 14751  0022C0  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14752  0022C2  0E50               	movlw	80	;volatile
 14753  0022C4  D037               	goto	L49
 14754  0022C6                     l889:
 14755                           
 14756                           ; BSR set to: 15
 14757                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 14758  0022C6  010D               	movlb	13
 14759  0022C8  B5F8               	btfsc	248,2,b	;volatile
 14760  0022CA  D007               	goto	l891
 14761  0022CC  010E               	movlb	14
 14762  0022CE  AF20               	btfss	32,7,b	;volatile
 14763  0022D0  D004               	goto	l891
 14764                           
 14765                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 14766  0022D2  0E0E               	movlw	14	;volatile
 14767  0022D4  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14768  0022D6  0E20               	movlw	32	;volatile
 14769  0022D8  D02D               	goto	L49
 14770  0022DA                     l891:
 14771                           
 14772                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 14773  0022DA  010D               	movlb	13
 14774  0022DC  B7F8               	btfsc	248,3,b	;volatile
 14775  0022DE  D007               	goto	l893
 14776  0022E0  010E               	movlb	14
 14777  0022E2  AF30               	btfss	48,7,b	;volatile
 14778  0022E4  D004               	goto	l893
 14779                           
 14780                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 14781  0022E6  0E0E               	movlw	14	;volatile
 14782  0022E8  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14783  0022EA  0E30               	movlw	48	;volatile
 14784  0022EC  D023               	goto	L49
 14785  0022EE                     l893:
 14786                           
 14787                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 14788  0022EE  010D               	movlb	13
 14789  0022F0  B9F8               	btfsc	248,4,b	;volatile
 14790  0022F2  D007               	goto	l895
 14791  0022F4  010E               	movlb	14
 14792  0022F6  AF40               	btfss	64,7,b	;volatile
 14793  0022F8  D004               	goto	l895
 14794                           
 14795                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 14796  0022FA  0E0E               	movlw	14	;volatile
 14797  0022FC  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14798  0022FE  0E40               	movlw	64	;volatile
 14799  002300  D019               	goto	L49
 14800  002302                     l895:
 14801                           
 14802                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 14803  002302  010D               	movlb	13
 14804  002304  BBF8               	btfsc	248,5,b	;volatile
 14805  002306  D005               	goto	l897
 14806  002308  010E               	movlb	14
 14807  00230A  AF50               	btfss	80,7,b	;volatile
 14808  00230C  D002               	goto	l897
 14809                           
 14810                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 14811  00230E  0E0E               	movlw	14	;volatile
 14812  002310  D7D7               	goto	L50
 14813  002312                     l897:
 14814                           
 14815                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 14816  002312  010D               	movlb	13
 14817  002314  BDF8               	btfsc	248,6,b	;volatile
 14818  002316  D005               	goto	l899
 14819  002318  010E               	movlb	14
 14820  00231A  AF60               	btfss	96,7,b	;volatile
 14821  00231C  D002               	goto	l899
 14822                           
 14823                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 14824  00231E  0E0E               	movlw	14	;volatile
 14825  002320  D7C8               	goto	L51
 14826  002322                     l899:
 14827                           
 14828                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 14829  002322  010D               	movlb	13
 14830  002324  BFF8               	btfsc	248,7,b	;volatile
 14831  002326  D7BD               	goto	l7083
 14832  002328  010E               	movlb	14
 14833  00232A  AF70               	btfss	112,7,b	;volatile
 14834  00232C  D7BA               	goto	l7083
 14835                           
 14836                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 14837  00232E  0E0E               	movlw	14	;volatile
 14838  002330  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14839  002332  0E70               	movlw	112	;volatile
 14840  002334                     L49:
 14841  002334  6E18               	movwf	ECANReceiveMessage@ptr,c
 14842  002336  D00A               	goto	l7133
 14843  002338                     l886:
 14844                           
 14845                           ; BSR set to: 0
 14846                           ;ECAN.c: 910: else
 14847                           ;ECAN.c: 915: {
 14848                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 14849  002338  AE74               	btfss	3956,7,c	;volatile
 14850  00233A  D7B3               	goto	l7083
 14851                           
 14852                           ; BSR set to: 0
 14853                           ;ECAN.c: 917: {
 14854                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 14855  00233C  506F               	movf	3951,w,c	;volatile
 14856  00233E  0B07               	andlw	7
 14857  002340  ECD7  F01B         	call	__ECANPointBuffer
 14858  002344  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 14859  002348  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 14860  00234C                     l7133:
 14861                           
 14862                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 14863  00234C  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14864  002350  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14865  002354  50DF               	movf	indf2,w,c
 14866  002356  0B1F               	andlw	31
 14867  002358  6E54               	movwf	__ECANRxFilterHitInfo,c
 14868                           
 14869                           ;ECAN.c: 932: RXB1IF = 0;
 14870  00235A  92A4               	bcf	4004,1,c	;volatile
 14871                           
 14872                           ;ECAN.c: 934: if ( RXB1OVFL )
 14873  00235C  AC74               	btfss	3956,6,c	;volatile
 14874  00235E  D006               	goto	l7143
 14875                           
 14876                           ;ECAN.c: 935: {
 14877                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 14878  002360  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14879  002362  6ED9               	movwf	fsr2l,c
 14880  002364  6ADA               	clrf	fsr2h,c
 14881  002366  0E00               	movlw	0
 14882  002368  86DB               	bsf	plusw2,3,c
 14883                           
 14884                           ;ECAN.c: 937: RXB1OVFL = 0;
 14885  00236A  9C74               	bcf	3956,6,c	;volatile
 14886  00236C                     l7143:
 14887                           
 14888                           ;ECAN.c: 942: savedPtr = ptr;
 14889  00236C  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 14890  002370  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 14891                           
 14892                           ;ECAN.c: 943: *msgFlags = 0;
 14893  002374  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14894  002376  6ED9               	movwf	fsr2l,c
 14895  002378  6ADA               	clrf	fsr2h,c
 14896  00237A  6ADF               	clrf	indf2,c
 14897                           
 14898                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 14899  00237C  EE20 F005          	lfsr	2,5
 14900  002380  D855               	call	PL70	;call to abstracted procedure
 14901                           
 14902                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 14903  002382  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14904  002384  6ED9               	movwf	fsr2l,c
 14905  002386  6ADA               	clrf	fsr2h,c
 14906  002388  5017               	movf	ECANReceiveMessage@temp,w,c
 14907  00238A  0B0F               	andlw	15
 14908  00238C  6EDF               	movwf	indf2,c
 14909                           
 14910                           ;ECAN.c: 950: if ( temp.bits.b6 )
 14911  00238E  AC17               	btfss	ECANReceiveMessage@temp,6,c
 14912  002390  D005               	goto	l907
 14913                           
 14914                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 14915  002392  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14916  002394  6ED9               	movwf	fsr2l,c
 14917  002396  6ADA               	clrf	fsr2h,c
 14918  002398  0E00               	movlw	0
 14919  00239A  8CDB               	bsf	plusw2,6,c
 14920  00239C                     l907:
 14921                           
 14922                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 14923  00239C  EE20 F002          	lfsr	2,2
 14924  0023A0  D845               	call	PL70	;call to abstracted procedure
 14925                           
 14926                           ;ECAN.c: 955: if ( temp.bits.b3 )
 14927  0023A2  A617               	btfss	ECANReceiveMessage@temp,3,c
 14928  0023A4  D008               	goto	l908
 14929                           
 14930                           ;ECAN.c: 956: {
 14931                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 14932  0023A6  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14933  0023A8  6ED9               	movwf	fsr2l,c
 14934  0023AA  6ADA               	clrf	fsr2h,c
 14935  0023AC  0E00               	movlw	0
 14936  0023AE  8ADB               	bsf	plusw2,5,c
 14937                           
 14938                           ;ECAN.c: 958: temp.Val = 1;
 14939  0023B0  0E01               	movlw	1
 14940  0023B2  6E17               	movwf	ECANReceiveMessage@temp,c
 14941                           
 14942                           ;ECAN.c: 959: }
 14943  0023B4  D001               	goto	l7161
 14944  0023B6                     l908:
 14945                           
 14946                           ;ECAN.c: 960: else
 14947                           ;ECAN.c: 961: temp.Val = 0;
 14948  0023B6  6A17               	clrf	ECANReceiveMessage@temp,c
 14949  0023B8                     l7161:
 14950                           
 14951                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 14952  0023B8  2818               	incf	ECANReceiveMessage@ptr,w,c
 14953  0023BA  6E08               	movwf	?__RegsToCANID,c
 14954  0023BC  0E00               	movlw	0
 14955  0023BE  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 14956  0023C0  6E09               	movwf	?__RegsToCANID+1,c
 14957  0023C2  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 14958  0023C6  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 14959  0023CA  ECEA  F016         	call	__RegsToCANID	;wreg free
 14960                           
 14961                           ;ECAN.c: 966: ptr += 6;
 14962  0023CE  0E06               	movlw	6
 14963  0023D0  2618               	addwf	ECANReceiveMessage@ptr,f,c
 14964  0023D2  0E00               	movlw	0
 14965  0023D4  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 14966                           
 14967                           ;ECAN.c: 967: temp.Val = *dataLen;
 14968  0023D6  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14969  0023D8  6ED9               	movwf	fsr2l,c
 14970  0023DA  6ADA               	clrf	fsr2h,c
 14971  0023DC  50DF               	movf	indf2,w,c
 14972  0023DE  6E17               	movwf	ECANReceiveMessage@temp,c
 14973                           
 14974                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 14975  0023E0  6A15               	clrf	ECANReceiveMessage@i,c
 14976  0023E2  D00D               	goto	l7177
 14977  0023E4                     l7169:
 14978                           
 14979                           ;ECAN.c: 969: *data++ = *ptr++;
 14980  0023E4  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14981  0023E8  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14982  0023EC  500F               	movf	ECANReceiveMessage@data,w,c
 14983  0023EE  6EE1               	movwf	fsr1l,c
 14984  0023F0  6AE2               	clrf	fsr1h,c
 14985  0023F2  CFDF FFE7          	movff	indf2,indf1
 14986  0023F6  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 14987  0023F8  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 14988  0023FA  2A0F               	incf	ECANReceiveMessage@data,f,c
 14989  0023FC  2A15               	incf	ECANReceiveMessage@i,f,c
 14990  0023FE                     l7177:
 14991  0023FE  5017               	movf	ECANReceiveMessage@temp,w,c
 14992  002400  5C15               	subwf	ECANReceiveMessage@i,w,c
 14993  002402  E3F0               	bnc	l7169
 14994                           
 14995                           ;ECAN.c: 972: if ( IRXIF )
 14996  002404  AEA4               	btfss	4004,7,c	;volatile
 14997  002406  D006               	goto	l7183
 14998                           
 14999                           ;ECAN.c: 973: {
 15000                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 15001  002408  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 15002  00240A  6ED9               	movwf	fsr2l,c
 15003  00240C  6ADA               	clrf	fsr2h,c
 15004  00240E  0E00               	movlw	0
 15005  002410  88DB               	bsf	plusw2,4,c
 15006                           
 15007                           ;ECAN.c: 975: IRXIF = 0;
 15008  002412  9EA4               	bcf	4004,7,c	;volatile
 15009  002414                     l7183:
 15010                           
 15011                           ;ECAN.c: 976: }
 15012                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 15013  002414  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 15014  002418  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 15015  00241C  0E7F               	movlw	127
 15016  00241E  16DF               	andwf	indf2,f,c
 15017                           
 15018                           ;ECAN.c: 983: if ( mode == 0x80 )
 15019  002420  5016               	movf	ECANReceiveMessage@mode,w,c
 15020  002422  0A80               	xorlw	128
 15021  002424  B4D8               	btfsc	status,2,c
 15022                           
 15023                           ;ECAN.c: 984: FIFOEMPTY = 0;
 15024  002426  9E74               	bcf	3956,7,c	;volatile
 15025                           
 15026                           ;ECAN.c: 990: return TRUE;
 15027  002428  0E01               	movlw	1
 15028  00242A                     l883:
 15029  00242A  0012               	return	
 15030  00242C                     __end_of_ECANReceiveMessage:
 15031                           	opt stack 0
 15032  00242C                     PL70:
 15033                           	opt stack 24
 15034  00242C  5018               	movf	ECANReceiveMessage@ptr,w,c
 15035  00242E  26D9               	addwf	fsr2l,f,c
 15036  002430  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 15037  002432  22DA               	addwfc	fsr2h,f,c
 15038  002434  50DF               	movf	indf2,w,c
 15039  002436  6E17               	movwf	ECANReceiveMessage@temp,c
 15040  002438  0012               	return	
 15041  00243A                     __end_ofPL70:
 15042                           	opt stack 0
 15043                           tblptru	equ	0xFF8
 15044                           tblptrh	equ	0xFF7
 15045                           tblptrl	equ	0xFF6
 15046                           tablat	equ	0xFF5
 15047                           prodh	equ	0xFF4
 15048                           prodl	equ	0xFF3
 15049                           intcon	equ	0xFF2
 15050                           postinc0	equ	0xFEE
 15051                           wreg	equ	0xFE8
 15052                           indf1	equ	0xFE7
 15053                           fsr1h	equ	0xFE2
 15054                           fsr1l	equ	0xFE1
 15055                           indf2	equ	0xFDF
 15056                           postinc2	equ	0xFDE
 15057                           postdec2	equ	0xFDD
 15058                           plusw2	equ	0xFDB
 15059                           fsr2h	equ	0xFDA
 15060                           fsr2l	equ	0xFD9
 15061                           status	equ	0xFD8
 15062                           
 15063 ;; *************** function __RegsToCANID *****************
 15064 ;; Defined at:
 15065 ;;		line 1156 in file "../ECAN.c"
 15066 ;; Parameters:    Size  Location     Type
 15067 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 15068 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 15069 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 15070 ;;  val             1    9[COMRAM] PTR unsigned long 
 15071 ;;		 -> getVSCPFrame@id(4), 
 15072 ;;  type            1   10[COMRAM] unsigned char 
 15073 ;; Auto vars:     Size  Location     Type
 15074 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 15075 ;;		 -> getVSCPFrame@id(4), 
 15076 ;; Return value:  Size  Location     Type
 15077 ;;		None               void
 15078 ;; Registers used:
 15079 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15080 ;; Tracked objects:
 15081 ;;		On entry : 0/0
 15082 ;;		On exit  : 0/0
 15083 ;;		Unchanged: 0/0
 15084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15085 ;;      Params:         4       0       0       0       0       0       0
 15086 ;;      Locals:         1       0       0       0       0       0       0
 15087 ;;      Temps:          2       0       0       0       0       0       0
 15088 ;;      Totals:         7       0       0       0       0       0       0
 15089 ;;Total ram usage:        7 bytes
 15090 ;; Hardware stack levels used:    1
 15091 ;; Hardware stack levels required when called:    2
 15092 ;; This function calls:
 15093 ;;		Nothing
 15094 ;; This function is called by:
 15095 ;;		_ECANReceiveMessage
 15096 ;; This function uses a non-reentrant model
 15097 ;;
 15098                           
 15099                           	psect	text60
 15100  002DD4                     __ptext60:
 15101                           	opt stack 0
 15102  002DD4                     __RegsToCANID:
 15103                           	opt stack 24
 15104                           
 15105                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 15106                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 15107                           
 15108                           ;incstack = 0
 15109                           ;incstack = 0
 15110  002DD4  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 15111                           
 15112                           ;ECAN.c: 1161: if ( type == 0 )
 15113  002DD8  660B               	tstfsz	__RegsToCANID@type,c
 15114  002DDA  D02B               	goto	l7257
 15115                           
 15116                           ;ECAN.c: 1162: {
 15117                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 15118  002DDC  500E               	movf	__RegsToCANID@Value,w,c
 15119  002DDE  6ED9               	movwf	fsr2l,c
 15120  002DE0  D86C               	call	PL40	;call to abstracted procedure
 15121  002DE2  360C               	rlcf	??__RegsToCANID,f,c
 15122  002DE4  90D8               	bcf	status,0,c
 15123  002DE6  360C               	rlcf	??__RegsToCANID,f,c
 15124  002DE8  90D8               	bcf	status,0,c
 15125  002DEA  340C               	rlcf	??__RegsToCANID,w,c
 15126  002DEC  6EDF               	movwf	indf2,c
 15127                           
 15128                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 15129  002DEE  500E               	movf	__RegsToCANID@Value,w,c
 15130  002DF0  6ED9               	movwf	fsr2l,c
 15131  002DF2  6ADA               	clrf	fsr2h,c
 15132  002DF4  2AD9               	incf	fsr2l,f,c
 15133  002DF6  6ADA               	clrf	fsr2h,c
 15134  002DF8  D873               	call	PL50	;call to abstracted procedure
 15135  002DFA                     u7435:
 15136  002DFA  90D8               	bcf	status,0,c
 15137  002DFC  320C               	rrcf	??__RegsToCANID,f,c
 15138  002DFE  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 15139  002E00  D7FC               	goto	u7435
 15140  002E02  500C               	movf	??__RegsToCANID,w,c
 15141                           
 15142                           ;ECAN.c: 1166: ptr++;
 15143                           
 15144                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 15145  002E04  D863               	call	PL42	;call to abstracted procedure
 15146  002E06  0E05               	movlw	5
 15147  002E08  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 15148  002E0A                     u7445:
 15149  002E0A  90D8               	bcf	status,0,c
 15150  002E0C  320C               	rrcf	??__RegsToCANID,f,c
 15151  002E0E  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 15152  002E10  D7FC               	goto	u7445
 15153  002E12  500E               	movf	__RegsToCANID@Value,w,c
 15154  002E14  6ED9               	movwf	fsr2l,c
 15155  002E16  6ADA               	clrf	fsr2h,c
 15156  002E18  500C               	movf	??__RegsToCANID,w,c
 15157  002E1A  12DF               	iorwf	indf2,f,c
 15158                           
 15159                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 15160  002E1C  D83D               	call	PL24	;call to abstracted procedure
 15161  002E1E  6ADF               	clrf	indf2,c
 15162                           
 15163                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 15164  002E20  500E               	movf	__RegsToCANID@Value,w,c
 15165  002E22  6ED9               	movwf	fsr2l,c
 15166  002E24  6ADA               	clrf	fsr2h,c
 15167  002E26  0E03               	movlw	3
 15168  002E28  26D9               	addwf	fsr2l,f,c
 15169  002E2A  6ADA               	clrf	fsr2h,c
 15170  002E2C  0E00               	movlw	0
 15171  002E2E  6EDF               	movwf	indf2,c
 15172                           
 15173                           ;ECAN.c: 1170: }
 15174  002E30  D032               	goto	l930
 15175  002E32                     l7257:
 15176                           
 15177                           ;ECAN.c: 1171: else
 15178                           ;ECAN.c: 1172: {
 15179                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 15180  002E32  D832               	call	PL24	;call to abstracted procedure
 15181  002E34  D855               	call	PL50	;call to abstracted procedure
 15182  002E36                     u7455:
 15183  002E36  90D8               	bcf	status,0,c
 15184  002E38  360C               	rlcf	??__RegsToCANID,f,c
 15185  002E3A  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 15186  002E3C  D7FC               	goto	u7455
 15187  002E3E  500C               	movf	??__RegsToCANID,w,c
 15188  002E40  6EDF               	movwf	indf2,c
 15189                           
 15190                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 15191  002E42  500E               	movf	__RegsToCANID@Value,w,c
 15192  002E44  6ED9               	movwf	fsr2l,c
 15193  002E46  6ADA               	clrf	fsr2h,c
 15194  002E48  0E03               	movlw	3
 15195  002E4A  26D9               	addwf	fsr2l,f,c
 15196  002E4C  D836               	call	PL40	;call to abstracted procedure
 15197  002E4E  320C               	rrcf	??__RegsToCANID,f,c
 15198  002E50  90D8               	bcf	status,0,c
 15199  002E52  320C               	rrcf	??__RegsToCANID,f,c
 15200  002E54  90D8               	bcf	status,0,c
 15201  002E56  300C               	rrcf	??__RegsToCANID,w,c
 15202                           
 15203                           ;ECAN.c: 1176: ptr++;
 15204                           
 15205                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 15206  002E58  D839               	call	PL42	;call to abstracted procedure
 15207  002E5A  0E03               	movlw	3
 15208  002E5C  160C               	andwf	??__RegsToCANID,f,c
 15209  002E5E  D81C               	call	PL24	;call to abstracted procedure
 15210  002E60  500C               	movf	??__RegsToCANID,w,c
 15211  002E62  12DF               	iorwf	indf2,f,c
 15212                           
 15213                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 15214  002E64  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15215  002E68  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15216  002E6C  50DF               	movf	indf2,w,c
 15217  002E6E  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15218  002E70  90D8               	bcf	status,0,c
 15219  002E72  320C               	rrcf	??__RegsToCANID,f,c
 15220  002E74  90D8               	bcf	status,0,c
 15221  002E76  320C               	rrcf	??__RegsToCANID,f,c
 15222  002E78  90D8               	bcf	status,0,c
 15223  002E7A  320C               	rrcf	??__RegsToCANID,f,c
 15224  002E7C  0E1C               	movlw	28
 15225  002E7E  160C               	andwf	??__RegsToCANID,f,c
 15226  002E80  D80B               	call	PL24	;call to abstracted procedure
 15227  002E82  500C               	movf	??__RegsToCANID,w,c
 15228  002E84  12DF               	iorwf	indf2,f,c
 15229                           
 15230                           ;ECAN.c: 1180: ptr++;
 15231                           
 15232                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 15233  002E86  D80F               	call	PL34	;call to abstracted procedure
 15234  002E88  2AE1               	incf	fsr1l,f,c
 15235  002E8A  6AE2               	clrf	fsr1h,c
 15236  002E8C  CFDF FFE7          	movff	indf2,indf1
 15237                           
 15238                           ;ECAN.c: 1182: ptr++;
 15239                           
 15240                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 15241  002E90  D80A               	call	PL34	;call to abstracted procedure
 15242  002E92  CFDF FFE7          	movff	indf2,indf1
 15243  002E96                     l930:
 15244  002E96  0012               	return	
 15245  002E98                     __end_of__RegsToCANID:
 15246                           	opt stack 0
 15247  002E98                     PL24:
 15248                           	opt stack 24
 15249  002E98  500E               	movf	__RegsToCANID@Value,w,c
 15250  002E9A  6ED9               	movwf	fsr2l,c
 15251  002E9C  6ADA               	clrf	fsr2h,c
 15252  002E9E  0E02               	movlw	2
 15253  002EA0  26D9               	addwf	fsr2l,f,c
 15254  002EA2  6ADA               	clrf	fsr2h,c
 15255  002EA4  0012               	return	
 15256  002EA6                     __end_ofPL24:
 15257                           	opt stack 0
 15258  002EA6                     PL34:
 15259                           	opt stack 24
 15260  002EA6  4A08               	infsnz	__RegsToCANID@ptr,f,c
 15261  002EA8  2A09               	incf	__RegsToCANID@ptr+1,f,c
 15262  002EAA  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15263  002EAE  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15264  002EB2  500E               	movf	__RegsToCANID@Value,w,c
 15265  002EB4  6EE1               	movwf	fsr1l,c
 15266  002EB6  6AE2               	clrf	fsr1h,c
 15267  002EB8  0012               	return	
 15268  002EBA                     __end_ofPL34:
 15269                           	opt stack 0
 15270  002EBA                     PL40:
 15271                           	opt stack 24
 15272  002EBA  6ADA               	clrf	fsr2h,c
 15273  002EBC  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 15274  002EC0  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 15275  002EC4  50E7               	movf	indf1,w,c
 15276  002EC6  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15277  002EC8  90D8               	bcf	status,0,c
 15278  002ECA  0012               	return	
 15279  002ECC                     __end_ofPL40:
 15280                           	opt stack 0
 15281  002ECC                     PL42:
 15282                           	opt stack 24
 15283  002ECC  6EDF               	movwf	indf2,c
 15284  002ECE  4A08               	infsnz	__RegsToCANID@ptr,f,c
 15285  002ED0  2A09               	incf	__RegsToCANID@ptr+1,f,c
 15286  002ED2  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15287  002ED6  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15288  002EDA  50DF               	movf	indf2,w,c
 15289  002EDC  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15290  002EDE  0012               	return	
 15291  002EE0                     __end_ofPL42:
 15292                           	opt stack 0
 15293  002EE0                     PL50:
 15294                           	opt stack 24
 15295  002EE0  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 15296  002EE4  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 15297  002EE8  50E7               	movf	indf1,w,c
 15298  002EEA  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15299  002EEC  0E05               	movlw	5
 15300  002EEE  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 15301  002EF0  0C05               	retlw	5
 15302  002EF2                     __end_ofPL50:
 15303                           	opt stack 0
 15304                           tblptru	equ	0xFF8
 15305                           tblptrh	equ	0xFF7
 15306                           tblptrl	equ	0xFF6
 15307                           tablat	equ	0xFF5
 15308                           prodh	equ	0xFF4
 15309                           prodl	equ	0xFF3
 15310                           intcon	equ	0xFF2
 15311                           postinc0	equ	0xFEE
 15312                           wreg	equ	0xFE8
 15313                           indf1	equ	0xFE7
 15314                           fsr1h	equ	0xFE2
 15315                           fsr1l	equ	0xFE1
 15316                           indf2	equ	0xFDF
 15317                           postinc2	equ	0xFDE
 15318                           postdec2	equ	0xFDD
 15319                           plusw2	equ	0xFDB
 15320                           fsr2h	equ	0xFDA
 15321                           fsr2l	equ	0xFD9
 15322                           status	equ	0xFD8
 15323                           
 15324 ;; *************** function __ECANPointBuffer *****************
 15325 ;; Defined at:
 15326 ;;		line 1207 in file "../ECAN.c"
 15327 ;; Parameters:    Size  Location     Type
 15328 ;;  b               1    wreg     unsigned char 
 15329 ;; Auto vars:     Size  Location     Type
 15330 ;;  b               1   10[COMRAM] unsigned char 
 15331 ;;  pt              2   11[COMRAM] PTR unsigned char 
 15332 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 15333 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 15334 ;; Return value:  Size  Location     Type
 15335 ;;                  2    7[COMRAM] PTR unsigned char 
 15336 ;; Registers used:
 15337 ;;		wreg, status,2, status,0
 15338 ;; Tracked objects:
 15339 ;;		On entry : F/0
 15340 ;;		On exit  : 0/0
 15341 ;;		Unchanged: 0/0
 15342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15343 ;;      Params:         3       0       0       0       0       0       0
 15344 ;;      Locals:         3       0       0       0       0       0       0
 15345 ;;      Temps:          0       0       0       0       0       0       0
 15346 ;;      Totals:         6       0       0       0       0       0       0
 15347 ;;Total ram usage:        6 bytes
 15348 ;; Hardware stack levels used:    1
 15349 ;; Hardware stack levels required when called:    2
 15350 ;; This function calls:
 15351 ;;		Nothing
 15352 ;; This function is called by:
 15353 ;;		_ECANReceiveMessage
 15354 ;; This function uses a non-reentrant model
 15355 ;;
 15356                           
 15357                           	psect	text61
 15358  0037AE                     __ptext61:
 15359                           	opt stack 0
 15360  0037AE                     __ECANPointBuffer:
 15361                           	opt stack 24
 15362                           
 15363                           ;incstack = 0
 15364                           ;incstack = 0
 15365                           ;__ECANPointBuffer@b stored from wreg
 15366  0037AE  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 15367                           
 15368                           ; BSR set to: 0
 15369                           ;ECAN.c: 1208: BYTE* pt;
 15370                           ;ECAN.c: 1210: switch(b)
 15371  0037B2  D024               	goto	l7243
 15372  0037B4                     l7225:
 15373                           
 15374                           ; BSR set to: 0
 15375                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 15376  0037B4  0E0F               	movlw	15	;volatile
 15377  0037B6  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15378  0037B8  0E60               	movlw	96	;volatile
 15379  0037BA  D01E               	goto	L58
 15380  0037BC                     l7227:
 15381                           
 15382                           ; BSR set to: 0
 15383                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 15384  0037BC  010F               	movlb	15	; () banked
 15385  0037BE  0E0F               	movlw	15	;volatile
 15386  0037C0  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15387  0037C2  0E50               	movlw	80	;volatile
 15388  0037C4  D019               	goto	L58
 15389  0037C6                     l7229:
 15390                           
 15391                           ; BSR set to: 0
 15392                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 15393  0037C6  010E               	movlb	14	; () banked
 15394  0037C8  0E0E               	movlw	14	;volatile
 15395  0037CA  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15396  0037CC  0E20               	movlw	32	;volatile
 15397  0037CE  D014               	goto	L58
 15398  0037D0                     l7231:
 15399                           
 15400                           ; BSR set to: 0
 15401                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 15402  0037D0  010E               	movlb	14	; () banked
 15403  0037D2  0E0E               	movlw	14	;volatile
 15404  0037D4  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15405  0037D6  0E30               	movlw	48	;volatile
 15406  0037D8  D00F               	goto	L58
 15407  0037DA                     l7233:
 15408                           
 15409                           ; BSR set to: 0
 15410                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 15411  0037DA  010E               	movlb	14	; () banked
 15412  0037DC  0E0E               	movlw	14	;volatile
 15413  0037DE  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15414  0037E0  0E40               	movlw	64	;volatile
 15415  0037E2  D00A               	goto	L58
 15416  0037E4                     l7235:
 15417                           
 15418                           ; BSR set to: 0
 15419                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 15420  0037E4  010E               	movlb	14	; () banked
 15421  0037E6  0E0E               	movlw	14	;volatile
 15422  0037E8  D7EB               	goto	L59
 15423  0037EA                     l7237:
 15424                           
 15425                           ; BSR set to: 0
 15426                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 15427  0037EA  010E               	movlb	14	; () banked
 15428  0037EC  0E0E               	movlw	14	;volatile
 15429  0037EE  D7E3               	goto	L60
 15430  0037F0                     l7239:
 15431                           
 15432                           ; BSR set to: 0
 15433                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 15434  0037F0  010E               	movlb	14	; () banked
 15435  0037F2  0E0E               	movlw	14	;volatile
 15436  0037F4  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15437  0037F6  0E70               	movlw	112	;volatile
 15438  0037F8                     L58:
 15439  0037F8  6E0C               	movwf	__ECANPointBuffer@pt,c
 15440                           
 15441                           ;ECAN.c: 1235: break;
 15442  0037FA  D00F               	goto	l935
 15443  0037FC                     l7243:
 15444                           
 15445                           ; BSR set to: 0
 15446  0037FC  500B               	movf	__ECANPointBuffer@b,w,c
 15447                           
 15448                           ; Switch size 1, requested type "space"
 15449                           ; Number of cases is 7, Range of values is 0 to 6
 15450                           ; switch strategies available:
 15451                           ; Name         Instructions Cycles
 15452                           ; simple_byte           22    12 (average)
 15453                           ;	Chosen strategy is simple_byte
 15454  0037FE  E0DA               	bz	l7225
 15455  003800  0A01               	xorlw	1	; case 1
 15456  003802  E0DC               	bz	l7227
 15457  003804  0A03               	xorlw	3	; case 2
 15458  003806  E0DF               	bz	l7229
 15459  003808  0A01               	xorlw	1	; case 3
 15460  00380A  E0E2               	bz	l7231
 15461  00380C  0A07               	xorlw	7	; case 4
 15462  00380E  E0E5               	bz	l7233
 15463  003810  0A01               	xorlw	1	; case 5
 15464  003812  E0E8               	bz	l7235
 15465  003814  0A03               	xorlw	3	; case 6
 15466  003816  E0E9               	bz	l7237
 15467  003818  D7EB               	goto	l7239
 15468  00381A                     l935:
 15469                           
 15470                           ;ECAN.c: 1237: return (pt);
 15471  00381A  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 15472  00381E  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 15473  003822  0012               	return	
 15474  003824                     __end_of__ECANPointBuffer:
 15475                           	opt stack 0
 15476                           tblptru	equ	0xFF8
 15477                           tblptrh	equ	0xFF7
 15478                           tblptrl	equ	0xFF6
 15479                           tablat	equ	0xFF5
 15480                           prodh	equ	0xFF4
 15481                           prodl	equ	0xFF3
 15482                           intcon	equ	0xFF2
 15483                           postinc0	equ	0xFEE
 15484                           wreg	equ	0xFE8
 15485                           indf1	equ	0xFE7
 15486                           fsr1h	equ	0xFE2
 15487                           fsr1l	equ	0xFE1
 15488                           indf2	equ	0xFDF
 15489                           postinc2	equ	0xFDE
 15490                           postdec2	equ	0xFDD
 15491                           plusw2	equ	0xFDB
 15492                           fsr2h	equ	0xFDA
 15493                           fsr2l	equ	0xFD9
 15494                           status	equ	0xFD8
 15495                           
 15496 ;; *************** function _vscp_check_pstorage *****************
 15497 ;; Defined at:
 15498 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 15499 ;; Parameters:    Size  Location     Type
 15500 ;;		None
 15501 ;; Auto vars:     Size  Location     Type
 15502 ;;		None
 15503 ;; Return value:  Size  Location     Type
 15504 ;;                  1    wreg      unsigned char 
 15505 ;; Registers used:
 15506 ;;		wreg, status,2, status,0, cstack
 15507 ;; Tracked objects:
 15508 ;;		On entry : 0/0
 15509 ;;		On exit  : 0/0
 15510 ;;		Unchanged: 0/0
 15511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15512 ;;      Params:         0       0       0       0       0       0       0
 15513 ;;      Locals:         0       0       0       0       0       0       0
 15514 ;;      Temps:          0       0       0       0       0       0       0
 15515 ;;      Totals:         0       0       0       0       0       0       0
 15516 ;;Total ram usage:        0 bytes
 15517 ;; Hardware stack levels used:    1
 15518 ;; Hardware stack levels required when called:    4
 15519 ;; This function calls:
 15520 ;;		_vscp_writeNicknamePermanent
 15521 ;;		_vscp_getSegmentCRC
 15522 ;;		_vscp_setSegmentCRC
 15523 ;;		_vscp_setControlByte
 15524 ;; This function is called by:
 15525 ;;		_main
 15526 ;; This function uses a non-reentrant model
 15527 ;;
 15528                           
 15529                           	psect	text62
 15530  003B96                     __ptext62:
 15531                           	opt stack 0
 15532  003B96                     _vscp_check_pstorage:
 15533                           	opt stack 26
 15534                           
 15535                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 15536                           
 15537                           ;incstack = 0
 15538                           ;incstack = 0
 15539  003B96  ECE1  F01E         	call	_vscp_getSegmentCRC	;wreg free
 15540  003B9A  0BC0               	andlw	192
 15541  003B9C  0A40               	xorlw	64
 15542  003B9E  E102               	bnz	l7719
 15543                           
 15544                           ;vscp_firmware.c: 172: return !0;
 15545  003BA0  0E01               	movlw	1
 15546  003BA2  D00A               	goto	l1055
 15547  003BA4                     l7719:
 15548                           
 15549                           ;vscp_firmware.c: 173: }
 15550                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 15551  003BA4  0EFF               	movlw	255
 15552  003BA6  EC84  F01E         	call	_vscp_writeNicknamePermanent
 15553                           
 15554                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 15555  003BAA  0E00               	movlw	0
 15556  003BAC  EC79  F01E         	call	_vscp_setSegmentCRC
 15557                           
 15558                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 15559  003BB0  0EA0               	movlw	160
 15560  003BB2  EC6E  F01E         	call	_vscp_setControlByte
 15561                           
 15562                           ;vscp_firmware.c: 185: return 0;
 15563  003BB6  0E00               	movlw	0
 15564  003BB8                     l1055:
 15565  003BB8  0012               	return	
 15566  003BBA                     __end_of_vscp_check_pstorage:
 15567                           	opt stack 0
 15568                           tblptru	equ	0xFF8
 15569                           tblptrh	equ	0xFF7
 15570                           tblptrl	equ	0xFF6
 15571                           tablat	equ	0xFF5
 15572                           prodh	equ	0xFF4
 15573                           prodl	equ	0xFF3
 15574                           intcon	equ	0xFF2
 15575                           postinc0	equ	0xFEE
 15576                           wreg	equ	0xFE8
 15577                           indf1	equ	0xFE7
 15578                           fsr1h	equ	0xFE2
 15579                           fsr1l	equ	0xFE1
 15580                           indf2	equ	0xFDF
 15581                           postinc2	equ	0xFDE
 15582                           postdec2	equ	0xFDD
 15583                           plusw2	equ	0xFDB
 15584                           fsr2h	equ	0xFDA
 15585                           fsr2l	equ	0xFD9
 15586                           status	equ	0xFD8
 15587                           
 15588 ;; *************** function _vscp_setControlByte *****************
 15589 ;; Defined at:
 15590 ;;		line 2450 in file "../main.c"
 15591 ;; Parameters:    Size  Location     Type
 15592 ;;  ctrl            1    wreg     unsigned char 
 15593 ;; Auto vars:     Size  Location     Type
 15594 ;;  ctrl            1   11[COMRAM] unsigned char 
 15595 ;; Return value:  Size  Location     Type
 15596 ;;		None               void
 15597 ;; Registers used:
 15598 ;;		wreg, status,2, cstack
 15599 ;; Tracked objects:
 15600 ;;		On entry : 0/0
 15601 ;;		On exit  : 0/0
 15602 ;;		Unchanged: 0/0
 15603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15604 ;;      Params:         0       0       0       0       0       0       0
 15605 ;;      Locals:         1       0       0       0       0       0       0
 15606 ;;      Temps:          0       0       0       0       0       0       0
 15607 ;;      Totals:         1       0       0       0       0       0       0
 15608 ;;Total ram usage:        1 bytes
 15609 ;; Hardware stack levels used:    1
 15610 ;; Hardware stack levels required when called:    3
 15611 ;; This function calls:
 15612 ;;		_Busy_eep
 15613 ;;		_Write_b_eep
 15614 ;; This function is called by:
 15615 ;;		_vscp_check_pstorage
 15616 ;; This function uses a non-reentrant model
 15617 ;;
 15618                           
 15619                           	psect	text63
 15620  003CDC                     __ptext63:
 15621                           	opt stack 0
 15622  003CDC                     _vscp_setControlByte:
 15623                           	opt stack 26
 15624                           
 15625                           ;incstack = 0
 15626                           ;incstack = 0
 15627                           ;vscp_setControlByte@ctrl stored from wreg
 15628  003CDC  CFE8 F00C          	movff	wreg,vscp_setControlByte@ctrl
 15629                           
 15630                           ;main.c: 2451: (Busy_eep(), Write_b_eep(0x03,ctrl));
 15631  003CE0  ECEA  F01E         	call	_Busy_eep	;wreg free
 15632  003CE4  6A09               	clrf	?_Write_b_eep+1,c
 15633  003CE6  0E03               	movlw	3
 15634  003CE8  6E08               	movwf	?_Write_b_eep,c
 15635  003CEA  C00C  F00A         	movff	vscp_setControlByte@ctrl,?_Write_b_eep+2
 15636  003CEE  EFCF  F01C         	goto	_Write_b_eep	;wreg free
 15637  003CF2                     __end_of_vscp_setControlByte:
 15638                           	opt stack 0
 15639                           tblptru	equ	0xFF8
 15640                           tblptrh	equ	0xFF7
 15641                           tblptrl	equ	0xFF6
 15642                           tablat	equ	0xFF5
 15643                           prodh	equ	0xFF4
 15644                           prodl	equ	0xFF3
 15645                           intcon	equ	0xFF2
 15646                           postinc0	equ	0xFEE
 15647                           wreg	equ	0xFE8
 15648                           indf1	equ	0xFE7
 15649                           fsr1h	equ	0xFE2
 15650                           fsr1l	equ	0xFE1
 15651                           indf2	equ	0xFDF
 15652                           postinc2	equ	0xFDE
 15653                           postdec2	equ	0xFDD
 15654                           plusw2	equ	0xFDB
 15655                           fsr2h	equ	0xFDA
 15656                           fsr2l	equ	0xFD9
 15657                           status	equ	0xFD8
 15658                           
 15659 ;; *************** function _vscp_setSegmentCRC *****************
 15660 ;; Defined at:
 15661 ;;		line 2441 in file "../main.c"
 15662 ;; Parameters:    Size  Location     Type
 15663 ;;  crc             1    wreg     unsigned char 
 15664 ;; Auto vars:     Size  Location     Type
 15665 ;;  crc             1   11[COMRAM] unsigned char 
 15666 ;; Return value:  Size  Location     Type
 15667 ;;		None               void
 15668 ;; Registers used:
 15669 ;;		wreg, status,2, cstack
 15670 ;; Tracked objects:
 15671 ;;		On entry : 0/0
 15672 ;;		On exit  : 0/0
 15673 ;;		Unchanged: 0/0
 15674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15675 ;;      Params:         0       0       0       0       0       0       0
 15676 ;;      Locals:         1       0       0       0       0       0       0
 15677 ;;      Temps:          0       0       0       0       0       0       0
 15678 ;;      Totals:         1       0       0       0       0       0       0
 15679 ;;Total ram usage:        1 bytes
 15680 ;; Hardware stack levels used:    1
 15681 ;; Hardware stack levels required when called:    3
 15682 ;; This function calls:
 15683 ;;		_Busy_eep
 15684 ;;		_Write_b_eep
 15685 ;; This function is called by:
 15686 ;;		_vscp_check_pstorage
 15687 ;;		_vscp_handleProbeState
 15688 ;;		_vscp_handleHeartbeat
 15689 ;;		_vscp_handleSetNickname
 15690 ;; This function uses a non-reentrant model
 15691 ;;
 15692                           
 15693                           	psect	text64
 15694  003CF2                     __ptext64:
 15695                           	opt stack 0
 15696  003CF2                     _vscp_setSegmentCRC:
 15697                           	opt stack 25
 15698                           
 15699                           ;incstack = 0
 15700                           ;incstack = 0
 15701                           ;vscp_setSegmentCRC@crc stored from wreg
 15702  003CF2  CFE8 F00C          	movff	wreg,vscp_setSegmentCRC@crc
 15703                           
 15704                           ;main.c: 2442: (Busy_eep(), Write_b_eep(0x02,crc));
 15705  003CF6  ECEA  F01E         	call	_Busy_eep	;wreg free
 15706  003CFA  6A09               	clrf	?_Write_b_eep+1,c
 15707  003CFC  0E02               	movlw	2
 15708  003CFE  6E08               	movwf	?_Write_b_eep,c
 15709  003D00  C00C  F00A         	movff	vscp_setSegmentCRC@crc,?_Write_b_eep+2
 15710  003D04  EFCF  F01C         	goto	_Write_b_eep	;wreg free
 15711  003D08                     __end_of_vscp_setSegmentCRC:
 15712                           	opt stack 0
 15713                           tblptru	equ	0xFF8
 15714                           tblptrh	equ	0xFF7
 15715                           tblptrl	equ	0xFF6
 15716                           tablat	equ	0xFF5
 15717                           prodh	equ	0xFF4
 15718                           prodl	equ	0xFF3
 15719                           intcon	equ	0xFF2
 15720                           postinc0	equ	0xFEE
 15721                           wreg	equ	0xFE8
 15722                           indf1	equ	0xFE7
 15723                           fsr1h	equ	0xFE2
 15724                           fsr1l	equ	0xFE1
 15725                           indf2	equ	0xFDF
 15726                           postinc2	equ	0xFDE
 15727                           postdec2	equ	0xFDD
 15728                           plusw2	equ	0xFDB
 15729                           fsr2h	equ	0xFDA
 15730                           fsr2l	equ	0xFD9
 15731                           status	equ	0xFD8
 15732                           
 15733 ;; *************** function _vscp_getSegmentCRC *****************
 15734 ;; Defined at:
 15735 ;;		line 2432 in file "../main.c"
 15736 ;; Parameters:    Size  Location     Type
 15737 ;;		None
 15738 ;; Auto vars:     Size  Location     Type
 15739 ;;		None
 15740 ;; Return value:  Size  Location     Type
 15741 ;;                  1    wreg      unsigned char 
 15742 ;; Registers used:
 15743 ;;		wreg, status,2, cstack
 15744 ;; Tracked objects:
 15745 ;;		On entry : 0/0
 15746 ;;		On exit  : 0/0
 15747 ;;		Unchanged: 0/0
 15748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15749 ;;      Params:         0       0       0       0       0       0       0
 15750 ;;      Locals:         0       0       0       0       0       0       0
 15751 ;;      Temps:          0       0       0       0       0       0       0
 15752 ;;      Totals:         0       0       0       0       0       0       0
 15753 ;;Total ram usage:        0 bytes
 15754 ;; Hardware stack levels used:    1
 15755 ;; Hardware stack levels required when called:    3
 15756 ;; This function calls:
 15757 ;;		_Read_b_eep
 15758 ;; This function is called by:
 15759 ;;		_vscp_check_pstorage
 15760 ;;		_vscp_handleHeartbeat
 15761 ;; This function uses a non-reentrant model
 15762 ;;
 15763                           
 15764                           	psect	text65
 15765  003DC2                     __ptext65:
 15766                           	opt stack 0
 15767  003DC2                     _vscp_getSegmentCRC:
 15768                           	opt stack 25
 15769                           
 15770                           ;main.c: 2433: return Read_b_eep(0x02);
 15771                           
 15772                           ;incstack = 0
 15773                           ;incstack = 0
 15774  003DC2  6A09               	clrf	?_Read_b_eep+1,c
 15775  003DC4  0E02               	movlw	2
 15776  003DC6  6E08               	movwf	?_Read_b_eep,c
 15777  003DC8  EFB6  F01E         	goto	_Read_b_eep	;wreg free
 15778  003DCC                     __end_of_vscp_getSegmentCRC:
 15779                           	opt stack 0
 15780                           tblptru	equ	0xFF8
 15781                           tblptrh	equ	0xFF7
 15782                           tblptrl	equ	0xFF6
 15783                           tablat	equ	0xFF5
 15784                           prodh	equ	0xFF4
 15785                           prodl	equ	0xFF3
 15786                           intcon	equ	0xFF2
 15787                           postinc0	equ	0xFEE
 15788                           wreg	equ	0xFE8
 15789                           indf1	equ	0xFE7
 15790                           fsr1h	equ	0xFE2
 15791                           fsr1l	equ	0xFE1
 15792                           indf2	equ	0xFDF
 15793                           postinc2	equ	0xFDE
 15794                           postdec2	equ	0xFDD
 15795                           plusw2	equ	0xFDB
 15796                           fsr2h	equ	0xFDA
 15797                           fsr2l	equ	0xFD9
 15798                           status	equ	0xFD8
 15799                           
 15800 ;; *************** function _vscp_writeNicknamePermanent *****************
 15801 ;; Defined at:
 15802 ;;		line 856 in file "../main.c"
 15803 ;; Parameters:    Size  Location     Type
 15804 ;;  nickname        1    wreg     unsigned char 
 15805 ;; Auto vars:     Size  Location     Type
 15806 ;;  nickname        1   11[COMRAM] unsigned char 
 15807 ;; Return value:  Size  Location     Type
 15808 ;;		None               void
 15809 ;; Registers used:
 15810 ;;		wreg, status,2, cstack
 15811 ;; Tracked objects:
 15812 ;;		On entry : 0/0
 15813 ;;		On exit  : 0/0
 15814 ;;		Unchanged: 0/0
 15815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15816 ;;      Params:         0       0       0       0       0       0       0
 15817 ;;      Locals:         1       0       0       0       0       0       0
 15818 ;;      Temps:          0       0       0       0       0       0       0
 15819 ;;      Totals:         1       0       0       0       0       0       0
 15820 ;;Total ram usage:        1 bytes
 15821 ;; Hardware stack levels used:    1
 15822 ;; Hardware stack levels required when called:    3
 15823 ;; This function calls:
 15824 ;;		_Busy_eep
 15825 ;;		_Write_b_eep
 15826 ;; This function is called by:
 15827 ;;		_vscp_check_pstorage
 15828 ;;		_vscp_handleProbeState
 15829 ;;		_vscp_handleHeartbeat
 15830 ;;		_vscp_handleSetNickname
 15831 ;;		_vscp_handleDropNickname
 15832 ;; This function uses a non-reentrant model
 15833 ;;
 15834                           
 15835                           	psect	text66
 15836  003D08                     __ptext66:
 15837                           	opt stack 0
 15838  003D08                     _vscp_writeNicknamePermanent:
 15839                           	opt stack 25
 15840                           
 15841                           ;incstack = 0
 15842                           ;incstack = 0
 15843                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 15844  003D08  CFE8 F00C          	movff	wreg,vscp_writeNicknamePermanent@nickname
 15845                           
 15846                           ;main.c: 857: (Busy_eep(), Write_b_eep(0x01,nickname));
 15847  003D0C  ECEA  F01E         	call	_Busy_eep	;wreg free
 15848  003D10  6A09               	clrf	?_Write_b_eep+1,c
 15849  003D12  0E01               	movlw	1
 15850  003D14  6E08               	movwf	?_Write_b_eep,c
 15851  003D16  C00C  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_Write_b_eep+2
 15852  003D1A  EFCF  F01C         	goto	_Write_b_eep	;wreg free
 15853  003D1E                     __end_of_vscp_writeNicknamePermanent:
 15854                           	opt stack 0
 15855                           tblptru	equ	0xFF8
 15856                           tblptrh	equ	0xFF7
 15857                           tblptrl	equ	0xFF6
 15858                           tablat	equ	0xFF5
 15859                           prodh	equ	0xFF4
 15860                           prodl	equ	0xFF3
 15861                           intcon	equ	0xFF2
 15862                           postinc0	equ	0xFEE
 15863                           wreg	equ	0xFE8
 15864                           indf1	equ	0xFE7
 15865                           fsr1h	equ	0xFE2
 15866                           fsr1l	equ	0xFE1
 15867                           indf2	equ	0xFDF
 15868                           postinc2	equ	0xFDE
 15869                           postdec2	equ	0xFDD
 15870                           plusw2	equ	0xFDB
 15871                           fsr2h	equ	0xFDA
 15872                           fsr2l	equ	0xFD9
 15873                           status	equ	0xFD8
 15874                           
 15875 ;; *************** function _Write_b_eep *****************
 15876 ;; Defined at:
 15877 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 15878 ;; Parameters:    Size  Location     Type
 15879 ;;  badd            2    7[COMRAM] unsigned int 
 15880 ;;  bdat            1    9[COMRAM] unsigned char 
 15881 ;; Auto vars:     Size  Location     Type
 15882 ;;  GIE_BIT_VAL     1   10[COMRAM] unsigned char 
 15883 ;; Return value:  Size  Location     Type
 15884 ;;		None               void
 15885 ;; Registers used:
 15886 ;;		wreg, status,2
 15887 ;; Tracked objects:
 15888 ;;		On entry : 0/0
 15889 ;;		On exit  : 0/0
 15890 ;;		Unchanged: 0/0
 15891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15892 ;;      Params:         3       0       0       0       0       0       0
 15893 ;;      Locals:         1       0       0       0       0       0       0
 15894 ;;      Temps:          0       0       0       0       0       0       0
 15895 ;;      Totals:         4       0       0       0       0       0       0
 15896 ;;Total ram usage:        4 bytes
 15897 ;; Hardware stack levels used:    1
 15898 ;; Hardware stack levels required when called:    2
 15899 ;; This function calls:
 15900 ;;		Nothing
 15901 ;; This function is called by:
 15902 ;;		_main
 15903 ;;		_init_app_eeprom
 15904 ;;		_vscp_setGUID
 15905 ;;		_vscp_setManufacturerId
 15906 ;;		_vscp_writeNicknamePermanent
 15907 ;;		_vscp_writeAppReg
 15908 ;;		_doActionDisable
 15909 ;;		_vscp_setUserID
 15910 ;;		_vscp_setSegmentCRC
 15911 ;;		_vscp_setControlByte
 15912 ;;		_vscp_goBootloaderMode
 15913 ;; This function uses a non-reentrant model
 15914 ;;
 15915                           
 15916                           	psect	text67
 15917  00399E                     __ptext67:
 15918                           	opt stack 0
 15919  00399E                     _Write_b_eep:
 15920                           	opt stack 26
 15921                           
 15922                           ;incstack = 0
 15923                           ;incstack = 0
 15924  00399E  C008  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 15925  0039A2  C00A  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 15926  0039A6  9EA6               	bcf	4006,7,c	;volatile
 15927  0039A8  9CA6               	bcf	4006,6,c	;volatile
 15928  0039AA  84A6               	bsf	4006,2,c	;volatile
 15929  0039AC  0E00               	movlw	0
 15930  0039AE  BEF2               	btfsc	intcon,7,c	;volatile
 15931  0039B0  0E01               	movlw	1
 15932  0039B2  6E0B               	movwf	Write_b_eep@GIE_BIT_VAL,c
 15933  0039B4  9EF2               	bcf	intcon,7,c	;volatile
 15934  0039B6  0E55               	movlw	85
 15935  0039B8  6EA7               	movwf	4007,c	;volatile
 15936  0039BA  0EAA               	movlw	170
 15937  0039BC  6EA7               	movwf	4007,c	;volatile
 15938  0039BE  82A6               	bsf	4006,1,c	;volatile
 15939  0039C0                     l1330:
 15940  0039C0  B2A6               	btfsc	4006,1,c	;volatile
 15941  0039C2  D7FE               	goto	l1330
 15942  0039C4  B00B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 15943  0039C6  D002               	bra	u4275
 15944  0039C8  9EF2               	bcf	intcon,7,c	;volatile
 15945  0039CA  D001               	bra	u4276
 15946  0039CC                     u4275:
 15947  0039CC  8EF2               	bsf	intcon,7,c	;volatile
 15948  0039CE                     u4276:
 15949  0039CE  94A6               	bcf	4006,2,c	;volatile
 15950  0039D0  0012               	return	
 15951  0039D2                     __end_of_Write_b_eep:
 15952                           	opt stack 0
 15953                           tblptru	equ	0xFF8
 15954                           tblptrh	equ	0xFF7
 15955                           tblptrl	equ	0xFF6
 15956                           tablat	equ	0xFF5
 15957                           prodh	equ	0xFF4
 15958                           prodl	equ	0xFF3
 15959                           intcon	equ	0xFF2
 15960                           postinc0	equ	0xFEE
 15961                           wreg	equ	0xFE8
 15962                           indf1	equ	0xFE7
 15963                           fsr1h	equ	0xFE2
 15964                           fsr1l	equ	0xFE1
 15965                           indf2	equ	0xFDF
 15966                           postinc2	equ	0xFDE
 15967                           postdec2	equ	0xFDD
 15968                           plusw2	equ	0xFDB
 15969                           fsr2h	equ	0xFDA
 15970                           fsr2l	equ	0xFD9
 15971                           status	equ	0xFD8
 15972                           
 15973 ;; *************** function _Busy_eep *****************
 15974 ;; Defined at:
 15975 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 15976 ;; Parameters:    Size  Location     Type
 15977 ;;		None
 15978 ;; Auto vars:     Size  Location     Type
 15979 ;;		None
 15980 ;; Return value:  Size  Location     Type
 15981 ;;		None               void
 15982 ;; Registers used:
 15983 ;;		None
 15984 ;; Tracked objects:
 15985 ;;		On entry : 0/0
 15986 ;;		On exit  : 0/0
 15987 ;;		Unchanged: 0/0
 15988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15989 ;;      Params:         0       0       0       0       0       0       0
 15990 ;;      Locals:         0       0       0       0       0       0       0
 15991 ;;      Temps:          0       0       0       0       0       0       0
 15992 ;;      Totals:         0       0       0       0       0       0       0
 15993 ;;Total ram usage:        0 bytes
 15994 ;; Hardware stack levels used:    1
 15995 ;; Hardware stack levels required when called:    2
 15996 ;; This function calls:
 15997 ;;		Nothing
 15998 ;; This function is called by:
 15999 ;;		_main
 16000 ;;		_init_app_eeprom
 16001 ;;		_vscp_setGUID
 16002 ;;		_vscp_setManufacturerId
 16003 ;;		_vscp_writeNicknamePermanent
 16004 ;;		_vscp_writeAppReg
 16005 ;;		_doActionDisable
 16006 ;;		_vscp_setUserID
 16007 ;;		_vscp_setSegmentCRC
 16008 ;;		_vscp_setControlByte
 16009 ;;		_vscp_goBootloaderMode
 16010 ;; This function uses a non-reentrant model
 16011 ;;
 16012                           
 16013                           	psect	text68
 16014  003DD4                     __ptext68:
 16015                           	opt stack 0
 16016  003DD4                     _Busy_eep:
 16017                           	opt stack 26
 16018  003DD4                     l1305:
 16019  003DD4  A2A6               	btfss	4006,1,c	;volatile
 16020  003DD6  0012               	return	
 16021  003DD8  D7FD               	goto	l1305
 16022  003DDA                     __end_of_Busy_eep:
 16023                           	opt stack 0
 16024                           tblptru	equ	0xFF8
 16025                           tblptrh	equ	0xFF7
 16026                           tblptrl	equ	0xFF6
 16027                           tablat	equ	0xFF5
 16028                           prodh	equ	0xFF4
 16029                           prodl	equ	0xFF3
 16030                           intcon	equ	0xFF2
 16031                           postinc0	equ	0xFEE
 16032                           wreg	equ	0xFE8
 16033                           indf1	equ	0xFE7
 16034                           fsr1h	equ	0xFE2
 16035                           fsr1l	equ	0xFE1
 16036                           indf2	equ	0xFDF
 16037                           postinc2	equ	0xFDE
 16038                           postdec2	equ	0xFDD
 16039                           plusw2	equ	0xFDB
 16040                           fsr2h	equ	0xFDA
 16041                           fsr2l	equ	0xFD9
 16042                           status	equ	0xFD8
 16043                           
 16044 ;; *************** function _init *****************
 16045 ;; Defined at:
 16046 ;;		line 316 in file "../main.c"
 16047 ;; Parameters:    Size  Location     Type
 16048 ;;		None
 16049 ;; Auto vars:     Size  Location     Type
 16050 ;;		None
 16051 ;; Return value:  Size  Location     Type
 16052 ;;		None               void
 16053 ;; Registers used:
 16054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16055 ;; Tracked objects:
 16056 ;;		On entry : 0/0
 16057 ;;		On exit  : 0/0
 16058 ;;		Unchanged: 0/0
 16059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16060 ;;      Params:         0       0       0       0       0       0       0
 16061 ;;      Locals:         0       0       0       0       0       0       0
 16062 ;;      Temps:          0       0       0       0       0       0       0
 16063 ;;      Totals:         0       0       0       0       0       0       0
 16064 ;;Total ram usage:        0 bytes
 16065 ;; Hardware stack levels used:    1
 16066 ;; Hardware stack levels required when called:    4
 16067 ;; This function calls:
 16068 ;;		_WriteTimer0
 16069 ;;		_init_app_ram
 16070 ;;		_OpenTimer0
 16071 ;;		_ECANInitialize
 16072 ;; This function is called by:
 16073 ;;		_main
 16074 ;; This function uses a non-reentrant model
 16075 ;;
 16076                           
 16077                           	psect	text69
 16078  003960                     __ptext69:
 16079                           	opt stack 0
 16080  003960                     _init:
 16081                           	opt stack 26
 16082                           
 16083                           ;main.c: 321: init_app_ram();
 16084                           
 16085                           ;incstack = 0
 16086                           ;incstack = 0
 16087  003960  EC86  F018         	call	_init_app_ram	;wreg free
 16088                           
 16089                           ;main.c: 332: TRISA = 0x00;
 16090  003964  6A92               	clrf	3986,c	;volatile
 16091                           
 16092                           ;main.c: 333: PORTA = 0x00;
 16093  003966  6A80               	clrf	3968,c	;volatile
 16094                           
 16095                           ;main.c: 345: TRISB = 0b00001000;
 16096  003968  0E08               	movlw	8
 16097  00396A  6E93               	movwf	3987,c	;volatile
 16098                           
 16099                           ;main.c: 346: PORTB = 0x00;
 16100  00396C  6A81               	clrf	3969,c	;volatile
 16101                           
 16102                           ;main.c: 356: TRISC = 0b00000001;
 16103  00396E  0E01               	movlw	1
 16104  003970  6E94               	movwf	3988,c	;volatile
 16105                           
 16106                           ;main.c: 357: PORTC = 0x00;
 16107  003972  6A82               	clrf	3970,c	;volatile
 16108                           
 16109                           ;main.c: 383: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 16110  003974  0E92               	movlw	146
 16111  003976  EC1E  F01E         	call	_OpenTimer0
 16112                           
 16113                           ;main.c: 384: WriteTimer0( 0xfb1d );
 16114  00397A  0EFB               	movlw	251
 16115  00397C  6E09               	movwf	?_WriteTimer0+1,c
 16116  00397E  0E1D               	movlw	29
 16117  003980  6E08               	movwf	?_WriteTimer0,c
 16118  003982  ECAD  F01E         	call	_WriteTimer0	;wreg free
 16119                           
 16120                           ;main.c: 387: LATBbits.LATB4 = 0;
 16121  003986  988A               	bcf	3978,4,c	;volatile
 16122                           
 16123                           ;main.c: 388: LATBbits.LATB1 = 0;
 16124  003988  928A               	bcf	3978,1,c	;volatile
 16125                           
 16126                           ;main.c: 389: LATBbits.LATB0 = 0;
 16127  00398A  908A               	bcf	3978,0,c	;volatile
 16128                           
 16129                           ;main.c: 390: LATCbits.LATC7 = 0;
 16130  00398C  9E8B               	bcf	3979,7,c	;volatile
 16131                           
 16132                           ;main.c: 391: LATCbits.LATC6 = 0;
 16133  00398E  9C8B               	bcf	3979,6,c	;volatile
 16134                           
 16135                           ;main.c: 392: LATCbits.LATC5 = 0;
 16136  003990  9A8B               	bcf	3979,5,c	;volatile
 16137                           
 16138                           ;main.c: 393: LATCbits.LATC4 = 0;
 16139  003992  988B               	bcf	3979,4,c	;volatile
 16140                           
 16141                           ;main.c: 396: ECANInitialize();
 16142  003994  EC50  F01B         	call	_ECANInitialize	;wreg free
 16143                           
 16144                           ;main.c: 417: INTCONbits.PEIE = 1;
 16145  003998  8CF2               	bsf	intcon,6,c	;volatile
 16146                           
 16147                           ;main.c: 420: INTCONbits.GIE = 1;
 16148  00399A  8EF2               	bsf	intcon,7,c	;volatile
 16149  00399C  0012               	return	
 16150  00399E                     __end_of_init:
 16151                           	opt stack 0
 16152                           tblptru	equ	0xFF8
 16153                           tblptrh	equ	0xFF7
 16154                           tblptrl	equ	0xFF6
 16155                           tablat	equ	0xFF5
 16156                           prodh	equ	0xFF4
 16157                           prodl	equ	0xFF3
 16158                           intcon	equ	0xFF2
 16159                           postinc0	equ	0xFEE
 16160                           wreg	equ	0xFE8
 16161                           indf1	equ	0xFE7
 16162                           fsr1h	equ	0xFE2
 16163                           fsr1l	equ	0xFE1
 16164                           indf2	equ	0xFDF
 16165                           postinc2	equ	0xFDE
 16166                           postdec2	equ	0xFDD
 16167                           plusw2	equ	0xFDB
 16168                           fsr2h	equ	0xFDA
 16169                           fsr2l	equ	0xFD9
 16170                           status	equ	0xFD8
 16171                           
 16172 ;; *************** function _ECANInitialize *****************
 16173 ;; Defined at:
 16174 ;;		line 168 in file "../ECAN.c"
 16175 ;; Parameters:    Size  Location     Type
 16176 ;;		None
 16177 ;; Auto vars:     Size  Location     Type
 16178 ;;		None
 16179 ;; Return value:  Size  Location     Type
 16180 ;;		None               void
 16181 ;; Registers used:
 16182 ;;		wreg, status,2, status,0, cstack
 16183 ;; Tracked objects:
 16184 ;;		On entry : 0/0
 16185 ;;		On exit  : 0/0
 16186 ;;		Unchanged: 0/0
 16187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16188 ;;      Params:         0       0       0       0       0       0       0
 16189 ;;      Locals:         0       0       0       0       0       0       0
 16190 ;;      Temps:          0       0       0       0       0       0       0
 16191 ;;      Totals:         0       0       0       0       0       0       0
 16192 ;;Total ram usage:        0 bytes
 16193 ;; Hardware stack levels used:    1
 16194 ;; Hardware stack levels required when called:    3
 16195 ;; This function calls:
 16196 ;;		_ECANSetOperationMode
 16197 ;; This function is called by:
 16198 ;;		_init
 16199 ;; This function uses a non-reentrant model
 16200 ;;
 16201                           
 16202                           	psect	text70
 16203  0036A0                     __ptext70:
 16204                           	opt stack 0
 16205  0036A0                     _ECANInitialize:
 16206                           	opt stack 26
 16207                           
 16208                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 16209                           
 16210                           ;incstack = 0
 16211                           ;incstack = 0
 16212  0036A0  0E80               	movlw	128
 16213  0036A2  EC62  F01E         	call	_ECANSetOperationMode
 16214                           
 16215                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 16216  0036A6  0E09               	movlw	9
 16217  0036A8  6E70               	movwf	3952,c	;volatile
 16218                           
 16219                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 16220  0036AA  0EFC               	movlw	252
 16221  0036AC  6E71               	movwf	3953,c	;volatile
 16222                           
 16223                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 16224                           ;ECAN.c: 181: (0 << 6) |
 16225                           ;ECAN.c: 182: (2-1);
 16226  0036AE  0E01               	movlw	1
 16227  0036B0  6E72               	movwf	3954,c	;volatile
 16228                           
 16229                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 16230  0036B2  0E20               	movlw	32
 16231  0036B4  6E73               	movwf	3955,c	;volatile
 16232                           
 16233                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 16234  0036B6  8E77               	bsf	3959,7,c	;volatile
 16235                           
 16236                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 16237  0036B8  9C77               	bcf	3959,6,c	;volatile
 16238                           
 16239                           ;ECAN.c: 205: RXB0CON = 0;
 16240  0036BA  6A60               	clrf	3936,c	;volatile
 16241                           
 16242                           ;ECAN.c: 211: RXB1CON = 0;
 16243  0036BC  010F               	movlb	15	; () banked
 16244  0036BE  6B50               	clrf	80,b	;volatile
 16245                           
 16246                           ; BSR set to: 15
 16247                           ;ECAN.c: 221: B0CON = 0;
 16248  0036C0  010E               	movlb	14	; () banked
 16249  0036C2  6B20               	clrf	32,b	;volatile
 16250                           
 16251                           ; BSR set to: 14
 16252                           ;ECAN.c: 231: B1CON = 0;
 16253  0036C4  6B30               	clrf	48,b	;volatile
 16254                           
 16255                           ; BSR set to: 14
 16256                           ;ECAN.c: 241: B2CON = 0;
 16257  0036C6  6B40               	clrf	64,b	;volatile
 16258                           
 16259                           ; BSR set to: 14
 16260                           ;ECAN.c: 254: B3CON = 0 << 2;
 16261  0036C8  6B50               	clrf	80,b	;volatile
 16262                           
 16263                           ; BSR set to: 14
 16264                           ;ECAN.c: 264: B4CON = 0 << 2;
 16265  0036CA  6B60               	clrf	96,b	;volatile
 16266                           
 16267                           ; BSR set to: 14
 16268                           ;ECAN.c: 274: B5CON = 0 << 2;
 16269  0036CC  6B70               	clrf	112,b	;volatile
 16270                           
 16271                           ; BSR set to: 14
 16272                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 16273  0036CE  0EE0               	movlw	224
 16274  0036D0  010D               	movlb	13	; () banked
 16275  0036D2  6FF8               	movwf	248,b	;volatile
 16276                           
 16277                           ; BSR set to: 13
 16278                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 16279  0036D4  010F               	movlb	15	; () banked
 16280  0036D6  6B00               	clrf	0,b	;volatile
 16281                           
 16282                           ; BSR set to: 15
 16283  0036D8  0E08               	movlw	8
 16284  0036DA  6F01               	movwf	1,b	;volatile
 16285                           
 16286                           ; BSR set to: 15
 16287  0036DC  6B02               	clrf	2,b	;volatile
 16288                           
 16289                           ; BSR set to: 15
 16290  0036DE  6B03               	clrf	3,b	;volatile
 16291                           
 16292                           ; BSR set to: 15
 16293                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 16294  0036E0  6B04               	clrf	4,b	;volatile
 16295                           
 16296                           ; BSR set to: 15
 16297  0036E2  0EE8               	movlw	232
 16298  0036E4  6F05               	movwf	5,b	;volatile
 16299                           
 16300                           ; BSR set to: 15
 16301  0036E6  0E1A               	movlw	26
 16302  0036E8  6F06               	movwf	6,b	;volatile
 16303                           
 16304                           ; BSR set to: 15
 16305  0036EA  6B07               	clrf	7,b	;volatile
 16306                           
 16307                           ; BSR set to: 15
 16308                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 16309  0036EC  0E03               	movlw	3
 16310  0036EE  010D               	movlb	13	; () banked
 16311  0036F0  6FD4               	movwf	212,b	;volatile
 16312                           
 16313                           ; BSR set to: 13
 16314                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 16315  0036F2  6BD5               	clrf	213,b	;volatile
 16316                           
 16317                           ; BSR set to: 13
 16318                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 16319  0036F4  6BE0               	clrf	224,b	;volatile
 16320                           
 16321                           ; BSR set to: 13
 16322                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 16323  0036F6  0E11               	movlw	17
 16324  0036F8  6FE1               	movwf	225,b	;volatile
 16325                           
 16326                           ; BSR set to: 13
 16327                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 16328  0036FA  6FE2               	movwf	226,b	;volatile
 16329                           
 16330                           ; BSR set to: 13
 16331                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 16332  0036FC  6BE3               	clrf	227,b	;volatile
 16333                           
 16334                           ; BSR set to: 13
 16335                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 16336  0036FE  6BE4               	clrf	228,b	;volatile
 16337                           
 16338                           ; BSR set to: 13
 16339                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 16340  003700  6BE5               	clrf	229,b	;volatile
 16341                           
 16342                           ; BSR set to: 13
 16343                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 16344  003702  6BE6               	clrf	230,b	;volatile
 16345                           
 16346                           ; BSR set to: 13
 16347                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 16348  003704  6BE7               	clrf	231,b	;volatile
 16349                           
 16350                           ; BSR set to: 13
 16351                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 16352  003706  0E54               	movlw	84
 16353  003708  6FF0               	movwf	240,b	;volatile
 16354                           
 16355                           ; BSR set to: 13
 16356                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 16357  00370A  0E05               	movlw	5
 16358  00370C  6FF1               	movwf	241,b	;volatile
 16359                           
 16360                           ; BSR set to: 13
 16361                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 16362  00370E  6BF2               	clrf	242,b	;volatile
 16363                           
 16364                           ; BSR set to: 13
 16365                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 16366  003710  6BF2               	clrf	242,b	;volatile
 16367                           
 16368                           ; BSR set to: 13
 16369                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 16370  003712  0E0F               	movlw	15
 16371  003714  010F               	movlb	15	; () banked
 16372  003716  6F18               	movwf	24,b	;volatile
 16373                           
 16374                           ; BSR set to: 15
 16375  003718  0EE0               	movlw	224
 16376  00371A  6F19               	movwf	25,b	;volatile
 16377                           
 16378                           ; BSR set to: 15
 16379  00371C  6B1A               	clrf	26,b	;volatile
 16380                           
 16381                           ; BSR set to: 15
 16382  00371E  6B1B               	clrf	27,b	;volatile
 16383                           
 16384                           ; BSR set to: 15
 16385                           ;ECAN.c: 482: RXM0EXIDM = 1;
 16386  003720  8719               	bsf	25,3,b	;volatile
 16387                           
 16388                           ; BSR set to: 15
 16389                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 16390  003722  0E0F               	movlw	15
 16391  003724  6F1C               	movwf	28,b	;volatile
 16392                           
 16393                           ; BSR set to: 15
 16394  003726  0EE0               	movlw	224
 16395  003728  6F1D               	movwf	29,b	;volatile
 16396                           
 16397                           ; BSR set to: 15
 16398  00372A  691E               	setf	30,b	;volatile
 16399                           
 16400                           ; BSR set to: 15
 16401  00372C  6B1F               	clrf	31,b	;volatile
 16402                           
 16403                           ; BSR set to: 15
 16404                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 16405  00372E  871D               	bsf	29,3,b	;volatile
 16406                           
 16407                           ; BSR set to: 15
 16408                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 16409  003730  0E00               	movlw	0
 16410  003732  EF62  F01E         	goto	_ECANSetOperationMode
 16411  003736                     __end_of_ECANInitialize:
 16412                           	opt stack 0
 16413                           tblptru	equ	0xFF8
 16414                           tblptrh	equ	0xFF7
 16415                           tblptrl	equ	0xFF6
 16416                           tablat	equ	0xFF5
 16417                           prodh	equ	0xFF4
 16418                           prodl	equ	0xFF3
 16419                           intcon	equ	0xFF2
 16420                           postinc0	equ	0xFEE
 16421                           wreg	equ	0xFE8
 16422                           indf1	equ	0xFE7
 16423                           fsr1h	equ	0xFE2
 16424                           fsr1l	equ	0xFE1
 16425                           indf2	equ	0xFDF
 16426                           postinc2	equ	0xFDE
 16427                           postdec2	equ	0xFDD
 16428                           plusw2	equ	0xFDB
 16429                           fsr2h	equ	0xFDA
 16430                           fsr2l	equ	0xFD9
 16431                           status	equ	0xFD8
 16432                           
 16433 ;; *************** function _ECANSetOperationMode *****************
 16434 ;; Defined at:
 16435 ;;		line 1012 in file "../ECAN.c"
 16436 ;; Parameters:    Size  Location     Type
 16437 ;;  mode            1    wreg     enum E16337
 16438 ;; Auto vars:     Size  Location     Type
 16439 ;;  mode            1    7[COMRAM] enum E16337
 16440 ;; Return value:  Size  Location     Type
 16441 ;;		None               void
 16442 ;; Registers used:
 16443 ;;		wreg, status,2, status,0
 16444 ;; Tracked objects:
 16445 ;;		On entry : 0/0
 16446 ;;		On exit  : 0/0
 16447 ;;		Unchanged: 0/0
 16448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16449 ;;      Params:         0       0       0       0       0       0       0
 16450 ;;      Locals:         1       0       0       0       0       0       0
 16451 ;;      Temps:          0       0       0       0       0       0       0
 16452 ;;      Totals:         1       0       0       0       0       0       0
 16453 ;;Total ram usage:        1 bytes
 16454 ;; Hardware stack levels used:    1
 16455 ;; Hardware stack levels required when called:    2
 16456 ;; This function calls:
 16457 ;;		Nothing
 16458 ;; This function is called by:
 16459 ;;		_calculateSetFilterMask
 16460 ;;		_ECANInitialize
 16461 ;; This function uses a non-reentrant model
 16462 ;;
 16463                           
 16464                           	psect	text71
 16465  003CC4                     __ptext71:
 16466                           	opt stack 0
 16467  003CC4                     _ECANSetOperationMode:
 16468                           	opt stack 23
 16469                           
 16470                           ;incstack = 0
 16471                           ;incstack = 0
 16472                           ;ECANSetOperationMode@mode stored from wreg
 16473  003CC4  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 16474                           
 16475                           ;ECAN.c: 1013: CANCON &= 0x1F;
 16476  003CC8  0E1F               	movlw	31
 16477  003CCA  166F               	andwf	3951,f,c	;volatile
 16478                           
 16479                           ;ECAN.c: 1014: CANCON |= mode;
 16480  003CCC  5008               	movf	ECANSetOperationMode@mode,w,c
 16481  003CCE  126F               	iorwf	3951,f,c	;volatile
 16482  003CD0                     l7195:
 16483  003CD0  506F               	movf	3951,w,c	;volatile
 16484  003CD2  0BE0               	andlw	224
 16485  003CD4  1808               	xorwf	ECANSetOperationMode@mode,w,c
 16486  003CD6  B4D8               	btfsc	status,2,c
 16487  003CD8  0012               	return	
 16488  003CDA  D7FA               	goto	l7195
 16489  003CDC                     __end_of_ECANSetOperationMode:
 16490                           	opt stack 0
 16491                           tblptru	equ	0xFF8
 16492                           tblptrh	equ	0xFF7
 16493                           tblptrl	equ	0xFF6
 16494                           tablat	equ	0xFF5
 16495                           prodh	equ	0xFF4
 16496                           prodl	equ	0xFF3
 16497                           intcon	equ	0xFF2
 16498                           postinc0	equ	0xFEE
 16499                           wreg	equ	0xFE8
 16500                           indf1	equ	0xFE7
 16501                           fsr1h	equ	0xFE2
 16502                           fsr1l	equ	0xFE1
 16503                           indf2	equ	0xFDF
 16504                           postinc2	equ	0xFDE
 16505                           postdec2	equ	0xFDD
 16506                           plusw2	equ	0xFDB
 16507                           fsr2h	equ	0xFDA
 16508                           fsr2l	equ	0xFD9
 16509                           status	equ	0xFD8
 16510                           
 16511 ;; *************** function _OpenTimer0 *****************
 16512 ;; Defined at:
 16513 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 16514 ;; Parameters:    Size  Location     Type
 16515 ;;  config          1    wreg     unsigned char 
 16516 ;; Auto vars:     Size  Location     Type
 16517 ;;  config          1    7[COMRAM] unsigned char 
 16518 ;; Return value:  Size  Location     Type
 16519 ;;		None               void
 16520 ;; Registers used:
 16521 ;;		wreg, status,2, status,0
 16522 ;; Tracked objects:
 16523 ;;		On entry : 0/0
 16524 ;;		On exit  : 0/0
 16525 ;;		Unchanged: 0/0
 16526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16527 ;;      Params:         0       0       0       0       0       0       0
 16528 ;;      Locals:         1       0       0       0       0       0       0
 16529 ;;      Temps:          0       0       0       0       0       0       0
 16530 ;;      Totals:         1       0       0       0       0       0       0
 16531 ;;Total ram usage:        1 bytes
 16532 ;; Hardware stack levels used:    1
 16533 ;; Hardware stack levels required when called:    2
 16534 ;; This function calls:
 16535 ;;		Nothing
 16536 ;; This function is called by:
 16537 ;;		_init
 16538 ;; This function uses a non-reentrant model
 16539 ;;
 16540                           
 16541                           	psect	text72
 16542  003C3C                     __ptext72:
 16543                           	opt stack 0
 16544  003C3C                     _OpenTimer0:
 16545                           	opt stack 27
 16546                           
 16547                           ;incstack = 0
 16548                           ;incstack = 0
 16549                           ;OpenTimer0@config stored from wreg
 16550  003C3C  CFE8 F008          	movff	wreg,OpenTimer0@config
 16551  003C40  5008               	movf	OpenTimer0@config,w,c
 16552  003C42  0B7F               	andlw	127
 16553  003C44  6ED5               	movwf	4053,c	;volatile
 16554  003C46  6AD7               	clrf	4055,c	;volatile
 16555  003C48  6AD6               	clrf	4054,c	;volatile
 16556  003C4A  94F2               	bcf	intcon,2,c	;volatile
 16557  003C4C  AE08               	btfss	OpenTimer0@config,7,c
 16558  003C4E  D002               	goto	l1346
 16559  003C50  8AF2               	bsf	intcon,5,c	;volatile
 16560  003C52  D001               	goto	l1347
 16561  003C54                     l1346:
 16562  003C54  9AF2               	bcf	intcon,5,c	;volatile
 16563  003C56                     l1347:
 16564  003C56  8ED5               	bsf	4053,7,c	;volatile
 16565  003C58  0012               	return	
 16566  003C5A                     __end_of_OpenTimer0:
 16567                           	opt stack 0
 16568                           tblptru	equ	0xFF8
 16569                           tblptrh	equ	0xFF7
 16570                           tblptrl	equ	0xFF6
 16571                           tablat	equ	0xFF5
 16572                           prodh	equ	0xFF4
 16573                           prodl	equ	0xFF3
 16574                           intcon	equ	0xFF2
 16575                           postinc0	equ	0xFEE
 16576                           wreg	equ	0xFE8
 16577                           indf1	equ	0xFE7
 16578                           fsr1h	equ	0xFE2
 16579                           fsr1l	equ	0xFE1
 16580                           indf2	equ	0xFDF
 16581                           postinc2	equ	0xFDE
 16582                           postdec2	equ	0xFDD
 16583                           plusw2	equ	0xFDB
 16584                           fsr2h	equ	0xFDA
 16585                           fsr2l	equ	0xFD9
 16586                           status	equ	0xFD8
 16587                           
 16588 ;; *************** function _init_app_ram *****************
 16589 ;; Defined at:
 16590 ;;		line 430 in file "../main.c"
 16591 ;; Parameters:    Size  Location     Type
 16592 ;;		None
 16593 ;; Auto vars:     Size  Location     Type
 16594 ;;  i               1   11[COMRAM] unsigned char 
 16595 ;; Return value:  Size  Location     Type
 16596 ;;		None               void
 16597 ;; Registers used:
 16598 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16599 ;; Tracked objects:
 16600 ;;		On entry : 0/0
 16601 ;;		On exit  : 0/0
 16602 ;;		Unchanged: 0/0
 16603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16604 ;;      Params:         0       0       0       0       0       0       0
 16605 ;;      Locals:         1       0       0       0       0       0       0
 16606 ;;      Temps:          2       0       0       0       0       0       0
 16607 ;;      Totals:         3       0       0       0       0       0       0
 16608 ;;Total ram usage:        3 bytes
 16609 ;; Hardware stack levels used:    1
 16610 ;; Hardware stack levels required when called:    3
 16611 ;; This function calls:
 16612 ;;		_Read_b_eep
 16613 ;; This function is called by:
 16614 ;;		_main
 16615 ;;		_init
 16616 ;;		_vscp_restoreDefaults
 16617 ;; This function uses a non-reentrant model
 16618 ;;
 16619                           
 16620                           	psect	text73
 16621  00310C                     __ptext73:
 16622                           	opt stack 0
 16623  00310C                     _init_app_ram:
 16624                           	opt stack 24
 16625                           
 16626                           ;main.c: 431: uint8_t i;
 16627                           ;main.c: 433: measurement_clock = 0;
 16628                           
 16629                           ;incstack = 0
 16630                           ;incstack = 0
 16631  00310C  0100               	movlb	0	; () banked
 16632  00310E  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
 16633  003110  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 16634  003112  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 16635  003114  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 16636                           
 16637                           ;main.c: 435: seconds = 0;
 16638  003116  6B8B               	clrf	_seconds& (0+255),b
 16639                           
 16640                           ;main.c: 436: minutes = 0;
 16641  003118  6B89               	clrf	_minutes& (0+255),b
 16642                           
 16643                           ;main.c: 437: hours = 0;
 16644  00311A  6B88               	clrf	_hours& (0+255),b
 16645                           
 16646                           ;main.c: 439: relay_pulse_flags = 0;
 16647  00311C  6B8A               	clrf	_relay_pulse_flags& (0+255),b
 16648                           
 16649                           ;main.c: 442: for ( i = 0; i < 8; i++ ) {
 16650  00311E  6A0C               	clrf	init_app_ram@i,c
 16651  003120                     l7909:
 16652                           
 16653                           ; BSR set to: 0
 16654                           ;main.c: 443: relay_pulse_timer[ i ] = 0;
 16655  003120  500C               	movf	init_app_ram@i,w,c
 16656  003122  0D02               	mullw	2
 16657  003124  50F3               	movf	prodl,w,c
 16658  003126  0F70               	addlw	low _relay_pulse_timer
 16659  003128  6ED9               	movwf	fsr2l,c
 16660  00312A  6ADA               	clrf	fsr2h,c
 16661  00312C  6ADE               	clrf	postinc2,c
 16662  00312E  6ADD               	clrf	postdec2,c
 16663                           
 16664                           ;main.c: 444: relay_protection_timer[ i ] = 0;
 16665  003130  500C               	movf	init_app_ram@i,w,c
 16666  003132  0D02               	mullw	2
 16667  003134  50F3               	movf	prodl,w,c
 16668  003136  0F60               	addlw	low _relay_protection_timer
 16669  003138  6ED9               	movwf	fsr2l,c
 16670  00313A  6ADA               	clrf	fsr2h,c
 16671  00313C  6ADE               	clrf	postinc2,c
 16672  00313E  6ADD               	clrf	postdec2,c
 16673                           
 16674                           ; BSR set to: 0
 16675  003140  2A0C               	incf	init_app_ram@i,f,c
 16676                           
 16677                           ; BSR set to: 0
 16678  003142  0E07               	movlw	7
 16679  003144  640C               	cpfsgt	init_app_ram@i,c
 16680  003146  D7EC               	goto	l7909
 16681                           
 16682                           ; BSR set to: 0
 16683                           ;main.c: 445: }
 16684                           ;main.c: 447: for ( i=0; i<7; i++ ) {
 16685  003148  6A0C               	clrf	init_app_ram@i,c
 16686  00314A                     l7919:
 16687                           
 16688                           ;main.c: 450: if ( Read_b_eep(0x43 + 10 + i) &
 16689                           ;main.c: 451: 0x01 ) {
 16690  00314A  0E4D               	movlw	77
 16691  00314C  240C               	addwf	init_app_ram@i,w,c
 16692  00314E  6E08               	movwf	?_Read_b_eep,c
 16693  003150  6A09               	clrf	?_Read_b_eep+1,c
 16694  003152  0E00               	movlw	0
 16695  003154  2209               	addwfc	?_Read_b_eep+1,f,c
 16696  003156  ECB6  F01E         	call	_Read_b_eep	;wreg free
 16697  00315A  6E0A               	movwf	??_init_app_ram& (0+255),c
 16698  00315C  A00A               	btfss	??_init_app_ram,0,c
 16699  00315E  D027               	goto	l7925
 16700                           
 16701                           ;main.c: 453: relay_pulse_flags |= (1<<i);
 16702  003160  C00C  F00A         	movff	init_app_ram@i,??_init_app_ram
 16703  003164  0E01               	movlw	1
 16704  003166  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16705  003168  2A0A               	incf	??_init_app_ram,f,c
 16706  00316A  D002               	goto	u8254
 16707  00316C                     u8255:
 16708  00316C  90D8               	bcf	status,0,c
 16709  00316E  360B               	rlcf	??_init_app_ram+1,f,c
 16710  003170                     u8254:
 16711  003170  2E0A               	decfsz	??_init_app_ram,f,c
 16712  003172  D7FC               	goto	u8255
 16713  003174  500B               	movf	??_init_app_ram+1,w,c
 16714  003176  0100               	movlb	0	; () banked
 16715  003178  138A               	iorwf	_relay_pulse_flags& (0+255),f,b
 16716                           
 16717                           ; BSR set to: 0
 16718                           ;main.c: 454: relay_pulse_timer[ i ] =
 16719                           ;main.c: 455: Read_b_eep(0x43 + 18 + i) * 256 +
 16720                           ;main.c: 456: Read_b_eep(0x43 + 19 + i);
 16721  00317A  0E55               	movlw	85
 16722  00317C  240C               	addwf	init_app_ram@i,w,c
 16723  00317E  6E08               	movwf	?_Read_b_eep,c
 16724  003180  6A09               	clrf	?_Read_b_eep+1,c
 16725  003182  0E00               	movlw	0
 16726  003184  2209               	addwfc	?_Read_b_eep+1,f,c
 16727  003186  ECB6  F01E         	call	_Read_b_eep	;wreg free
 16728  00318A  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16729  00318C  6A0A               	clrf	??_init_app_ram& (0+255),c
 16730  00318E  0E56               	movlw	86
 16731  003190  240C               	addwf	init_app_ram@i,w,c
 16732  003192  6E08               	movwf	?_Read_b_eep,c
 16733  003194  6A09               	clrf	?_Read_b_eep+1,c
 16734  003196  0E00               	movlw	0
 16735  003198  2209               	addwfc	?_Read_b_eep+1,f,c
 16736  00319A  ECB6  F01E         	call	_Read_b_eep	;wreg free
 16737  00319E  D831               	call	PL58	;call to abstracted procedure
 16738  0031A0  0F70               	addlw	low _relay_pulse_timer
 16739  0031A2  6ED9               	movwf	fsr2l,c
 16740  0031A4  6ADA               	clrf	fsr2h,c
 16741  0031A6  C00A  FFDE         	movff	??_init_app_ram,postinc2
 16742  0031AA  C00B  FFDD         	movff	??_init_app_ram+1,postdec2
 16743  0031AE                     l7925:
 16744                           
 16745                           ;main.c: 457: }
 16746                           ;main.c: 460: if ( Read_b_eep(0x43 + 15 + i) & 0x04) {
 16747  0031AE  0E52               	movlw	82
 16748  0031B0  240C               	addwf	init_app_ram@i,w,c
 16749  0031B2  6E08               	movwf	?_Read_b_eep,c
 16750  0031B4  6A09               	clrf	?_Read_b_eep+1,c
 16751  0031B6  0E00               	movlw	0
 16752  0031B8  2209               	addwfc	?_Read_b_eep+1,f,c
 16753  0031BA  ECB6  F01E         	call	_Read_b_eep	;wreg free
 16754  0031BE  6E0A               	movwf	??_init_app_ram& (0+255),c
 16755  0031C0  A40A               	btfss	??_init_app_ram,2,c
 16756  0031C2  D01A               	goto	l7929
 16757                           
 16758                           ;main.c: 461: relay_protection_timer[ i ] =
 16759                           ;main.c: 462: Read_b_eep(0x43 + 44 + i) * 256 +
 16760                           ;main.c: 463: Read_b_eep(0x43 + 45 + i);
 16761  0031C4  0E6F               	movlw	111
 16762  0031C6  240C               	addwf	init_app_ram@i,w,c
 16763  0031C8  6E08               	movwf	?_Read_b_eep,c
 16764  0031CA  6A09               	clrf	?_Read_b_eep+1,c
 16765  0031CC  0E00               	movlw	0
 16766  0031CE  2209               	addwfc	?_Read_b_eep+1,f,c
 16767  0031D0  ECB6  F01E         	call	_Read_b_eep	;wreg free
 16768  0031D4  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16769  0031D6  6A0A               	clrf	??_init_app_ram& (0+255),c
 16770  0031D8  0E70               	movlw	112
 16771  0031DA  240C               	addwf	init_app_ram@i,w,c
 16772  0031DC  6E08               	movwf	?_Read_b_eep,c
 16773  0031DE  6A09               	clrf	?_Read_b_eep+1,c
 16774  0031E0  0E00               	movlw	0
 16775  0031E2  2209               	addwfc	?_Read_b_eep+1,f,c
 16776  0031E4  ECB6  F01E         	call	_Read_b_eep	;wreg free
 16777  0031E8  D80C               	call	PL58	;call to abstracted procedure
 16778  0031EA  0F60               	addlw	low _relay_protection_timer
 16779  0031EC  6ED9               	movwf	fsr2l,c
 16780  0031EE  6ADA               	clrf	fsr2h,c
 16781  0031F0  C00A  FFDE         	movff	??_init_app_ram,postinc2
 16782  0031F4  C00B  FFDD         	movff	??_init_app_ram+1,postdec2
 16783  0031F8                     l7929:
 16784  0031F8  2A0C               	incf	init_app_ram@i,f,c
 16785  0031FA  0E06               	movlw	6
 16786  0031FC  640C               	cpfsgt	init_app_ram@i,c
 16787  0031FE  D7A5               	goto	l7919
 16788  003200  0C06               	retlw	6
 16789  003202                     __end_of_init_app_ram:
 16790                           	opt stack 0
 16791  003202                     PL58:
 16792                           	opt stack 24
 16793  003202  260A               	addwf	??_init_app_ram,f,c
 16794  003204  0E00               	movlw	0
 16795  003206  220B               	addwfc	??_init_app_ram+1,f,c
 16796  003208  500C               	movf	init_app_ram@i,w,c
 16797  00320A  0D02               	mullw	2
 16798  00320C  50F3               	movf	prodl,w,c
 16799  00320E  0100               	movlb	0	; () banked
 16800  003210  0012               	return	
 16801  003212                     __end_ofPL58:
 16802                           	opt stack 0
 16803                           tblptru	equ	0xFF8
 16804                           tblptrh	equ	0xFF7
 16805                           tblptrl	equ	0xFF6
 16806                           tablat	equ	0xFF5
 16807                           prodh	equ	0xFF4
 16808                           prodl	equ	0xFF3
 16809                           intcon	equ	0xFF2
 16810                           postinc0	equ	0xFEE
 16811                           wreg	equ	0xFE8
 16812                           indf1	equ	0xFE7
 16813                           fsr1h	equ	0xFE2
 16814                           fsr1l	equ	0xFE1
 16815                           indf2	equ	0xFDF
 16816                           postinc2	equ	0xFDE
 16817                           postdec2	equ	0xFDD
 16818                           plusw2	equ	0xFDB
 16819                           fsr2h	equ	0xFDA
 16820                           fsr2l	equ	0xFD9
 16821                           status	equ	0xFD8
 16822                           
 16823 ;; *************** function _WriteTimer0 *****************
 16824 ;; Defined at:
 16825 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16826 ;; Parameters:    Size  Location     Type
 16827 ;;  timer0          2    7[COMRAM] unsigned int 
 16828 ;; Auto vars:     Size  Location     Type
 16829 ;;  timer           2    9[COMRAM] struct Timers
 16830 ;; Return value:  Size  Location     Type
 16831 ;;		None               void
 16832 ;; Registers used:
 16833 ;;		None
 16834 ;; Tracked objects:
 16835 ;;		On entry : 0/0
 16836 ;;		On exit  : 0/0
 16837 ;;		Unchanged: 0/0
 16838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16839 ;;      Params:         2       0       0       0       0       0       0
 16840 ;;      Locals:         2       0       0       0       0       0       0
 16841 ;;      Temps:          0       0       0       0       0       0       0
 16842 ;;      Totals:         4       0       0       0       0       0       0
 16843 ;;Total ram usage:        4 bytes
 16844 ;; Hardware stack levels used:    1
 16845 ;; Hardware stack levels required when called:    2
 16846 ;; This function calls:
 16847 ;;		Nothing
 16848 ;; This function is called by:
 16849 ;;		_init
 16850 ;; This function uses a non-reentrant model
 16851 ;;
 16852                           
 16853                           	psect	text74
 16854  003D5A                     __ptext74:
 16855                           	opt stack 0
 16856  003D5A                     _WriteTimer0:
 16857                           	opt stack 27
 16858                           
 16859                           ;incstack = 0
 16860                           ;incstack = 0
 16861  003D5A  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 16862  003D5E  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 16863  003D62  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 16864  003D66  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 16865  003D6A  0012               	return	
 16866  003D6C                     __end_of_WriteTimer0:
 16867                           	opt stack 0
 16868                           tblptru	equ	0xFF8
 16869                           tblptrh	equ	0xFF7
 16870                           tblptrl	equ	0xFF6
 16871                           tablat	equ	0xFF5
 16872                           prodh	equ	0xFF4
 16873                           prodl	equ	0xFF3
 16874                           intcon	equ	0xFF2
 16875                           postinc0	equ	0xFEE
 16876                           wreg	equ	0xFE8
 16877                           indf1	equ	0xFE7
 16878                           fsr1h	equ	0xFE2
 16879                           fsr1l	equ	0xFE1
 16880                           indf2	equ	0xFDF
 16881                           postinc2	equ	0xFDE
 16882                           postdec2	equ	0xFDD
 16883                           plusw2	equ	0xFDB
 16884                           fsr2h	equ	0xFDA
 16885                           fsr2l	equ	0xFD9
 16886                           status	equ	0xFD8
 16887                           
 16888 ;; *************** function _Read_b_eep *****************
 16889 ;; Defined at:
 16890 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 16891 ;; Parameters:    Size  Location     Type
 16892 ;;  badd            2    7[COMRAM] unsigned int 
 16893 ;; Auto vars:     Size  Location     Type
 16894 ;;		None
 16895 ;; Return value:  Size  Location     Type
 16896 ;;                  1    wreg      unsigned char 
 16897 ;; Registers used:
 16898 ;;		wreg, status,2
 16899 ;; Tracked objects:
 16900 ;;		On entry : 0/0
 16901 ;;		On exit  : 0/0
 16902 ;;		Unchanged: 0/0
 16903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16904 ;;      Params:         2       0       0       0       0       0       0
 16905 ;;      Locals:         0       0       0       0       0       0       0
 16906 ;;      Temps:          0       0       0       0       0       0       0
 16907 ;;      Totals:         2       0       0       0       0       0       0
 16908 ;;Total ram usage:        2 bytes
 16909 ;; Hardware stack levels used:    1
 16910 ;; Hardware stack levels required when called:    2
 16911 ;; This function calls:
 16912 ;;		Nothing
 16913 ;; This function is called by:
 16914 ;;		_init_app_ram
 16915 ;;		_doApplicationOneSecondWork
 16916 ;;		_vscp_readNicknamePermanent
 16917 ;;		_vscp_getZone
 16918 ;;		_vscp_getSubzone
 16919 ;;		_vscp_readAppReg
 16920 ;;		_vscp_writeAppReg
 16921 ;;		_SendInformationEvent
 16922 ;;		_doDM
 16923 ;;		_doActionOn
 16924 ;;		_doActionOff
 16925 ;;		_doActionPulse
 16926 ;;		_doActionStatus
 16927 ;;		_doActionDisable
 16928 ;;		_doActionToggle
 16929 ;;		_vscp_getGUID
 16930 ;;		_vscp_getUserID
 16931 ;;		_vscp_getManufacturerId
 16932 ;;		_vscp_getSegmentCRC
 16933 ;;		_calculateSetFilterMask
 16934 ;; This function uses a non-reentrant model
 16935 ;;
 16936                           
 16937                           	psect	text75
 16938  003D6C                     __ptext75:
 16939                           	opt stack 0
 16940  003D6C                     _Read_b_eep:
 16941                           	opt stack 26
 16942                           
 16943                           ;incstack = 0
 16944                           ;incstack = 0
 16945  003D6C  C008  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 16946  003D70  9CA6               	bcf	4006,6,c	;volatile
 16947  003D72  9EA6               	bcf	4006,7,c	;volatile
 16948  003D74  80A6               	bsf	4006,0,c	;volatile
 16949  003D76  F000               	nop		;# 
 16950  003D78  F000               	nop		;# 
 16951  003D7A  50A8               	movf	4008,w,c	;volatile
 16952  003D7C  0012               	return	
 16953  003D7E                     __end_of_Read_b_eep:
 16954                           	opt stack 0
 16955                           tblptru	equ	0xFF8
 16956                           tblptrh	equ	0xFF7
 16957                           tblptrl	equ	0xFF6
 16958                           tablat	equ	0xFF5
 16959                           prodh	equ	0xFF4
 16960                           prodl	equ	0xFF3
 16961                           intcon	equ	0xFF2
 16962                           postinc0	equ	0xFEE
 16963                           wreg	equ	0xFE8
 16964                           indf1	equ	0xFE7
 16965                           fsr1h	equ	0xFE2
 16966                           fsr1l	equ	0xFE1
 16967                           indf2	equ	0xFDF
 16968                           postinc2	equ	0xFDE
 16969                           postdec2	equ	0xFDD
 16970                           plusw2	equ	0xFDB
 16971                           fsr2h	equ	0xFDA
 16972                           fsr2l	equ	0xFD9
 16973                           status	equ	0xFD8
 16974                           
 16975 ;; *************** function _vscp_readAppReg *****************
 16976 ;; Defined at:
 16977 ;;		line 896 in file "../main.c"
 16978 ;; Parameters:    Size  Location     Type
 16979 ;;  reg             1    wreg     unsigned char 
 16980 ;; Auto vars:     Size  Location     Type
 16981 ;;  reg             1   10[COMRAM] unsigned char 
 16982 ;;  rv              1    9[COMRAM] unsigned char 
 16983 ;; Return value:  Size  Location     Type
 16984 ;;                  1    wreg      unsigned char 
 16985 ;; Registers used:
 16986 ;;		wreg, status,2, status,0, cstack
 16987 ;; Tracked objects:
 16988 ;;		On entry : F/0
 16989 ;;		On exit  : 0/0
 16990 ;;		Unchanged: 0/0
 16991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16992 ;;      Params:         0       0       0       0       0       0       0
 16993 ;;      Locals:         2       0       0       0       0       0       0
 16994 ;;      Temps:          0       0       0       0       0       0       0
 16995 ;;      Totals:         2       0       0       0       0       0       0
 16996 ;;Total ram usage:        2 bytes
 16997 ;; Hardware stack levels used:    1
 16998 ;; Hardware stack levels required when called:    3
 16999 ;; This function calls:
 17000 ;;		_Read_b_eep
 17001 ;; This function is called by:
 17002 ;;		_vscp_readRegister
 17003 ;;		_vscp_handleProtocolEvent
 17004 ;; This function uses a non-reentrant model
 17005 ;;
 17006                           
 17007                           	psect	text76
 17008  00354C                     __ptext76:
 17009                           	opt stack 0
 17010  00354C                     _vscp_readAppReg:
 17011                           	opt stack 25
 17012                           
 17013                           ;incstack = 0
 17014                           ;incstack = 0
 17015                           ;vscp_readAppReg@reg stored from wreg
 17016  00354C  CFE8 F00B          	movff	wreg,vscp_readAppReg@reg
 17017                           
 17018                           ; BSR set to: 0
 17019                           ;main.c: 897: uint8_t rv;
 17020                           ;main.c: 899: rv = 0x00;
 17021  003550  6A0A               	clrf	vscp_readAppReg@rv,c
 17022                           
 17023                           ; BSR set to: 0
 17024                           ;main.c: 902: if ( reg == 0x00 ) {
 17025  003552  660B               	tstfsz	vscp_readAppReg@reg,c
 17026  003554  D006               	goto	l8771
 17027                           
 17028                           ; BSR set to: 0
 17029                           ;main.c: 903: rv = Read_b_eep(0x43 + 0);
 17030  003556  6A09               	clrf	?_Read_b_eep+1,c
 17031  003558  0E43               	movlw	67
 17032  00355A  6E08               	movwf	?_Read_b_eep,c
 17033  00355C  ECB6  F01E         	call	_Read_b_eep	;wreg free
 17034  003560  D04D               	goto	L63
 17035  003562                     l8771:
 17036                           
 17037                           ; BSR set to: 0
 17038                           ;main.c: 906: else if ( reg == 0x01 ) {
 17039  003562  040B               	decf	vscp_readAppReg@reg,w,c
 17040  003564  E106               	bnz	l8775
 17041                           
 17042                           ; BSR set to: 0
 17043                           ;main.c: 907: rv = Read_b_eep(0x43 + 1);
 17044  003566  6A09               	clrf	?_Read_b_eep+1,c
 17045  003568  0E44               	movlw	68
 17046  00356A  6E08               	movwf	?_Read_b_eep,c
 17047  00356C  ECB6  F01E         	call	_Read_b_eep	;wreg free
 17048  003570  D045               	goto	L63
 17049  003572                     l8775:
 17050                           
 17051                           ; BSR set to: 0
 17052                           ;main.c: 909: else if ( (reg >= 2) && (reg < 10) ) {
 17053  003572  0E01               	movlw	1
 17054  003574  640B               	cpfsgt	vscp_readAppReg@reg,c
 17055  003576  D034               	goto	l8799
 17056                           
 17057                           ; BSR set to: 0
 17058  003578  0E0A               	movlw	10
 17059  00357A  600B               	cpfslt	vscp_readAppReg@reg,c
 17060  00357C  D031               	goto	l8799
 17061  00357E  D01E               	goto	l8797
 17062  003580                     l8781:
 17063                           
 17064                           ; BSR set to: 0
 17065                           ;main.c: 915: rv = LATBbits.LATB4;
 17066  003580  0E00               	movlw	0
 17067  003582  B88A               	btfsc	3978,4,c	;volatile
 17068  003584  0E01               	movlw	1
 17069  003586  D03A               	goto	L63
 17070  003588                     l8783:
 17071                           
 17072                           ; BSR set to: 0
 17073                           ;main.c: 920: rv = LATBbits.LATB1;
 17074  003588  0E00               	movlw	0
 17075  00358A  B28A               	btfsc	3978,1,c	;volatile
 17076  00358C  0E01               	movlw	1
 17077  00358E  D036               	goto	L63
 17078  003590                     l8785:
 17079                           
 17080                           ; BSR set to: 0
 17081                           ;main.c: 925: rv = LATBbits.LATB0;
 17082  003590  0E00               	movlw	0
 17083  003592  B08A               	btfsc	3978,0,c	;volatile
 17084  003594  0E01               	movlw	1
 17085  003596  D032               	goto	L63
 17086  003598                     l8787:
 17087                           
 17088                           ; BSR set to: 0
 17089                           ;main.c: 930: rv = LATCbits.LATC7;
 17090  003598  0E00               	movlw	0
 17091  00359A  BE8B               	btfsc	3979,7,c	;volatile
 17092  00359C  0E01               	movlw	1
 17093  00359E  D02E               	goto	L63
 17094  0035A0                     l8789:
 17095                           
 17096                           ; BSR set to: 0
 17097                           ;main.c: 935: rv = LATCbits.LATC6;
 17098  0035A0  0E00               	movlw	0
 17099  0035A2  BC8B               	btfsc	3979,6,c	;volatile
 17100  0035A4  0E01               	movlw	1
 17101  0035A6  D02A               	goto	L63
 17102  0035A8                     l8791:
 17103                           
 17104                           ; BSR set to: 0
 17105                           ;main.c: 940: rv = LATCbits.LATC5;
 17106  0035A8  0E00               	movlw	0
 17107  0035AA  BA8B               	btfsc	3979,5,c	;volatile
 17108  0035AC  0E01               	movlw	1
 17109  0035AE  D026               	goto	L63
 17110  0035B0                     l8793:
 17111                           
 17112                           ; BSR set to: 0
 17113                           ;main.c: 945: rv = LATCbits.LATC4;
 17114  0035B0  0E00               	movlw	0
 17115  0035B2  B88B               	btfsc	3979,4,c	;volatile
 17116  0035B4  0E01               	movlw	1
 17117  0035B6  D022               	goto	L63
 17118  0035B8                     l292:
 17119                           
 17120                           ; BSR set to: 0
 17121                           ;main.c: 950: rv = 0;
 17122  0035B8  6A0A               	clrf	vscp_readAppReg@rv,c
 17123                           
 17124                           ;main.c: 951: break;
 17125  0035BA  D021               	goto	l8805
 17126  0035BC                     l8797:
 17127                           
 17128                           ; BSR set to: 0
 17129  0035BC  500B               	movf	vscp_readAppReg@reg,w,c
 17130                           
 17131                           ; Switch size 1, requested type "space"
 17132                           ; Number of cases is 8, Range of values is 2 to 9
 17133                           ; switch strategies available:
 17134                           ; Name         Instructions Cycles
 17135                           ; simple_byte           25    13 (average)
 17136                           ;	Chosen strategy is simple_byte
 17137  0035BE  0A02               	xorlw	2	; case 2
 17138  0035C0  E0DF               	bz	l8781
 17139  0035C2  0A01               	xorlw	1	; case 3
 17140  0035C4  E0E1               	bz	l8783
 17141  0035C6  0A07               	xorlw	7	; case 4
 17142  0035C8  E0E3               	bz	l8785
 17143  0035CA  0A01               	xorlw	1	; case 5
 17144  0035CC  E0E5               	bz	l8787
 17145  0035CE  0A03               	xorlw	3	; case 6
 17146  0035D0  E0E7               	bz	l8789
 17147  0035D2  0A01               	xorlw	1	; case 7
 17148  0035D4  E0E9               	bz	l8791
 17149  0035D6  0A0F               	xorlw	15	; case 8
 17150  0035D8  E0EB               	bz	l8793
 17151  0035DA  0A01               	xorlw	1	; case 9
 17152  0035DC  E0ED               	bz	l292
 17153  0035DE  D00F               	goto	l8805
 17154  0035E0                     l8799:
 17155                           
 17156                           ; BSR set to: 0
 17157                           ;main.c: 956: else if ( ( reg >= 10 ) &&
 17158                           ;main.c: 957: (reg < (72 + 7 * 8 ) ) ) {
 17159  0035E0  0E09               	movlw	9
 17160  0035E2  640B               	cpfsgt	vscp_readAppReg@reg,c
 17161  0035E4  D00C               	goto	l8805
 17162                           
 17163                           ; BSR set to: 0
 17164  0035E6  0E80               	movlw	128
 17165  0035E8  600B               	cpfslt	vscp_readAppReg@reg,c
 17166  0035EA  D009               	goto	l8805
 17167                           
 17168                           ; BSR set to: 0
 17169                           ;main.c: 958: rv = Read_b_eep(0x43 + reg);
 17170  0035EC  0E43               	movlw	67
 17171  0035EE  240B               	addwf	vscp_readAppReg@reg,w,c
 17172  0035F0  6E08               	movwf	?_Read_b_eep,c
 17173  0035F2  6A09               	clrf	?_Read_b_eep+1,c
 17174  0035F4  0E00               	movlw	0
 17175  0035F6  2209               	addwfc	?_Read_b_eep+1,f,c
 17176  0035F8  ECB6  F01E         	call	_Read_b_eep	;wreg free
 17177  0035FC                     L63:
 17178  0035FC  6E0A               	movwf	vscp_readAppReg@rv,c
 17179  0035FE                     l8805:
 17180                           
 17181                           ;main.c: 959: }
 17182                           ;main.c: 961: return rv;
 17183  0035FE  500A               	movf	vscp_readAppReg@rv,w,c
 17184  003600  0012               	return	
 17185  003602                     __end_of_vscp_readAppReg:
 17186                           	opt stack 0
 17187                           tblptru	equ	0xFF8
 17188                           tblptrh	equ	0xFF7
 17189                           tblptrl	equ	0xFF6
 17190                           tablat	equ	0xFF5
 17191                           prodh	equ	0xFF4
 17192                           prodl	equ	0xFF3
 17193                           intcon	equ	0xFF2
 17194                           postinc0	equ	0xFEE
 17195                           wreg	equ	0xFE8
 17196                           indf1	equ	0xFE7
 17197                           fsr1h	equ	0xFE2
 17198                           fsr1l	equ	0xFE1
 17199                           indf2	equ	0xFDF
 17200                           postinc2	equ	0xFDE
 17201                           postdec2	equ	0xFDD
 17202                           plusw2	equ	0xFDB
 17203                           fsr2h	equ	0xFDA
 17204                           fsr2l	equ	0xFD9
 17205                           status	equ	0xFD8
 17206                           
 17207 ;; *************** function _interrupt_at_low_vector *****************
 17208 ;; Defined at:
 17209 ;;		line 131 in file "../main.c"
 17210 ;; Parameters:    Size  Location     Type
 17211 ;;		None
 17212 ;; Auto vars:     Size  Location     Type
 17213 ;;		None
 17214 ;; Return value:  Size  Location     Type
 17215 ;;		None               void
 17216 ;; Registers used:
 17217 ;;		wreg, status,2, status,0, cstack
 17218 ;; Tracked objects:
 17219 ;;		On entry : 0/0
 17220 ;;		On exit  : 0/0
 17221 ;;		Unchanged: 0/0
 17222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17223 ;;      Params:         0       0       0       0       0       0       0
 17224 ;;      Locals:         0       0       0       0       0       0       0
 17225 ;;      Temps:          3       0       0       0       0       0       0
 17226 ;;      Totals:         3       0       0       0       0       0       0
 17227 ;;Total ram usage:        3 bytes
 17228 ;; Hardware stack levels used:    1
 17229 ;; Hardware stack levels required when called:    1
 17230 ;; This function calls:
 17231 ;;		i1_WriteTimer0
 17232 ;; This function is called by:
 17233 ;;		Interrupt level 1
 17234 ;; This function uses a non-reentrant model
 17235 ;;
 17236                           
 17237                           	psect	intcodelo
 17238  000018                     __pintcodelo:
 17239                           	opt stack 0
 17240  000018                     _interrupt_at_low_vector:
 17241                           	opt stack 21
 17242                           
 17243                           ;incstack = 0
 17244  000018  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 17245  00001C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 17246  000020  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 17247  000024                     
 17248                           ;main.c: 133: if ( INTCONbits.TMR0IF ) {
 17249  000024  A4F2               	btfss	intcon,2,c	;volatile
 17250  000026  D001               	goto	i1u802_21
 17251  000028  D001               	goto	i1u802_20
 17252  00002A                     i1u802_21:
 17253  00002A  D03F               	goto	i1l147
 17254  00002C                     i1u802_20:
 17255  00002C                     
 17256                           ;main.c: 136: WriteTimer0(0xfb1d);
 17257  00002C  0EFB               	movlw	251
 17258  00002E  6E02               	movwf	?i1_WriteTimer0+1,c
 17259  000030  0E1D               	movlw	29
 17260  000032  6E01               	movwf	?i1_WriteTimer0,c
 17261  000034  ECBF  F01E         	call	i1_WriteTimer0	;wreg free
 17262  000038                     
 17263                           ;main.c: 138: vscp_timer++;
 17264  000038  0100               	movlb	0	; () banked
 17265  00003A  4B86               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 17266  00003C  2B87               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 17267  00003E                     
 17268                           ; BSR set to: 0
 17269                           ;main.c: 139: vscp_configtimer++;
 17270  00003E  4B84               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 17271  000040  2B85               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 17272  000042                     
 17273                           ; BSR set to: 0
 17274                           ;main.c: 140: measurement_clock++;
 17275  000042  0E01               	movlw	1
 17276  000044  2780               	addwf	_measurement_clock& (0+255),f,b	;volatile
 17277  000046  0E00               	movlw	0
 17278  000048  2381               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 17279  00004A  0E00               	movlw	0
 17280  00004C  2382               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 17281  00004E  0E00               	movlw	0
 17282  000050  2383               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 17283  000052                     
 17284                           ; BSR set to: 0
 17285                           ;main.c: 141: sendTimer++;
 17286  000052  2B8C               	incf	_sendTimer& (0+255),f,b	;volatile
 17287  000054                     
 17288                           ; BSR set to: 0
 17289                           ;main.c: 144: if ( PORTCbits.RC0 ) {
 17290  000054  A082               	btfss	3970,0,c	;volatile
 17291  000056  D001               	goto	i1u803_21
 17292  000058  D001               	goto	i1u803_20
 17293  00005A                     i1u803_21:
 17294  00005A  D002               	goto	i1l7553
 17295  00005C                     i1u803_20:
 17296  00005C                     
 17297                           ; BSR set to: 0
 17298                           ;main.c: 145: vscp_initbtncnt = 0;
 17299  00005C  6B8F               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 17300                           
 17301                           ;main.c: 146: } else {
 17302  00005E  D001               	goto	i1l139
 17303  000060                     i1l7553:
 17304                           
 17305                           ; BSR set to: 0
 17306                           ;main.c: 148: vscp_initbtncnt++;
 17307  000060  2B8F               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 17308  000062                     i1l139:
 17309                           
 17310                           ; BSR set to: 0
 17311                           ;main.c: 149: }
 17312                           ;main.c: 152: vscp_statuscnt++;
 17313  000062  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 17314  000064                     
 17315                           ; BSR set to: 0
 17316                           ;main.c: 153: if ( ( 0x02 == vscp_initledfunc ) &&
 17317                           ;main.c: 154: ( vscp_statuscnt > 100 ) ) {
 17318  000064  5056               	movf	_vscp_initledfunc,w,c
 17319  000066  0A02               	xorlw	2
 17320  000068  A4D8               	btfss	status,2,c
 17321  00006A  D001               	goto	i1u804_21
 17322  00006C  D001               	goto	i1u804_20
 17323  00006E                     i1u804_21:
 17324  00006E  D00E               	goto	i1l7563
 17325  000070                     i1u804_20:
 17326  000070                     
 17327                           ; BSR set to: 0
 17328  000070  0E64               	movlw	100
 17329  000072  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 17330  000074  D001               	goto	i1u805_21
 17331  000076  D001               	goto	i1u805_20
 17332  000078                     i1u805_21:
 17333  000078  D009               	goto	i1l7563
 17334  00007A                     i1u805_20:
 17335  00007A                     
 17336                           ; BSR set to: 0
 17337                           ;main.c: 156: if ( PORTCbits.RC1 ) {
 17338  00007A  A282               	btfss	3970,1,c	;volatile
 17339  00007C  D001               	goto	i1u806_21
 17340  00007E  D001               	goto	i1u806_20
 17341  000080                     i1u806_21:
 17342  000080  D002               	goto	i1l141
 17343  000082                     i1u806_20:
 17344  000082                     
 17345                           ; BSR set to: 0
 17346                           ;main.c: 157: PORTCbits.RC1 = 0;
 17347  000082  9282               	bcf	3970,1,c	;volatile
 17348                           
 17349                           ;main.c: 158: }
 17350  000084  D001               	goto	i1l142
 17351  000086                     i1l141:
 17352                           
 17353                           ; BSR set to: 0
 17354                           ;main.c: 159: else {
 17355                           ;main.c: 160: PORTCbits.RC1 = 1;
 17356  000086  8282               	bsf	3970,1,c	;volatile
 17357  000088                     i1l142:
 17358                           
 17359                           ; BSR set to: 0
 17360                           ;main.c: 161: }
 17361                           ;main.c: 163: vscp_statuscnt = 0;
 17362  000088  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17363                           
 17364                           ;main.c: 165: }
 17365  00008A  D00E               	goto	i1l143
 17366  00008C                     i1l7563:
 17367                           
 17368                           ; BSR set to: 0
 17369                           ;main.c: 166: else if (0x01 == vscp_initledfunc) {
 17370  00008C  0456               	decf	_vscp_initledfunc,w,c
 17371  00008E  A4D8               	btfss	status,2,c
 17372  000090  D001               	goto	i1u807_21
 17373  000092  D001               	goto	i1u807_20
 17374  000094                     i1u807_21:
 17375  000094  D003               	goto	i1l144
 17376  000096                     i1u807_20:
 17377  000096                     
 17378                           ; BSR set to: 0
 17379                           ;main.c: 167: PORTCbits.RC1 = 1;
 17380  000096  8282               	bsf	3970,1,c	;volatile
 17381                           
 17382                           ;main.c: 168: vscp_statuscnt = 0;
 17383  000098  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17384                           
 17385                           ;main.c: 169: }
 17386  00009A  D006               	goto	i1l143
 17387  00009C                     i1l144:
 17388                           
 17389                           ; BSR set to: 0
 17390                           ;main.c: 170: else if (0x00 == vscp_initledfunc) {
 17391  00009C  6656               	tstfsz	_vscp_initledfunc,c
 17392  00009E  D001               	goto	i1u808_21
 17393  0000A0  D001               	goto	i1u808_20
 17394  0000A2                     i1u808_21:
 17395  0000A2  D002               	goto	i1l143
 17396  0000A4                     i1u808_20:
 17397  0000A4                     
 17398                           ; BSR set to: 0
 17399                           ;main.c: 171: PORTCbits.RC1 = 0;
 17400  0000A4  9282               	bcf	3970,1,c	;volatile
 17401                           
 17402                           ;main.c: 172: vscp_statuscnt = 0;
 17403  0000A6  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17404  0000A8                     i1l143:
 17405                           
 17406                           ; BSR set to: 0
 17407                           ;main.c: 173: }
 17408                           ;main.c: 175: INTCONbits.TMR0IF = 0;
 17409  0000A8  94F2               	bcf	intcon,2,c	;volatile
 17410  0000AA                     i1l147:
 17411  0000AA  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 17412  0000AE  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 17413  0000B2  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 17414  0000B6  0010               	retfie	
 17415  0000B8                     __end_of_interrupt_at_low_vector:
 17416                           	opt stack 0
 17417                           tblptru	equ	0xFF8
 17418                           tblptrh	equ	0xFF7
 17419                           tblptrl	equ	0xFF6
 17420                           tablat	equ	0xFF5
 17421                           prodh	equ	0xFF4
 17422                           prodl	equ	0xFF3
 17423                           intcon	equ	0xFF2
 17424                           postinc0	equ	0xFEE
 17425                           wreg	equ	0xFE8
 17426                           indf1	equ	0xFE7
 17427                           fsr1h	equ	0xFE2
 17428                           fsr1l	equ	0xFE1
 17429                           bsr	equ	0xFE0
 17430                           indf2	equ	0xFDF
 17431                           postinc2	equ	0xFDE
 17432                           postdec2	equ	0xFDD
 17433                           plusw2	equ	0xFDB
 17434                           fsr2h	equ	0xFDA
 17435                           fsr2l	equ	0xFD9
 17436                           status	equ	0xFD8
 17437                           
 17438 ;; *************** function i1_WriteTimer0 *****************
 17439 ;; Defined at:
 17440 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 17441 ;; Parameters:    Size  Location     Type
 17442 ;;  timer0          2    0[COMRAM] unsigned int 
 17443 ;; Auto vars:     Size  Location     Type
 17444 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 17445 ;; Return value:  Size  Location     Type
 17446 ;;		None               void
 17447 ;; Registers used:
 17448 ;;		None
 17449 ;; Tracked objects:
 17450 ;;		On entry : 0/0
 17451 ;;		On exit  : 0/0
 17452 ;;		Unchanged: 0/0
 17453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17454 ;;      Params:         2       0       0       0       0       0       0
 17455 ;;      Locals:         2       0       0       0       0       0       0
 17456 ;;      Temps:          0       0       0       0       0       0       0
 17457 ;;      Totals:         4       0       0       0       0       0       0
 17458 ;;Total ram usage:        4 bytes
 17459 ;; Hardware stack levels used:    1
 17460 ;; This function calls:
 17461 ;;		Nothing
 17462 ;; This function is called by:
 17463 ;;		_interrupt_at_low_vector
 17464 ;; This function uses a non-reentrant model
 17465 ;;
 17466                           
 17467                           	psect	text78
 17468  003D7E                     __ptext78:
 17469                           	opt stack 0
 17470  003D7E                     i1_WriteTimer0:
 17471                           	opt stack 21
 17472                           
 17473                           ;incstack = 0
 17474                           ;incstack = 0
 17475  003D7E  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 17476  003D82  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 17477  003D86  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 17478  003D8A  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 17479  003D8E  0012               	return	
 17480  003D90                     __end_ofi1_WriteTimer0:
 17481                           	opt stack 0
 17482                           tblptru	equ	0xFF8
 17483                           tblptrh	equ	0xFF7
 17484                           tblptrl	equ	0xFF6
 17485                           tablat	equ	0xFF5
 17486                           prodh	equ	0xFF4
 17487                           prodl	equ	0xFF3
 17488                           intcon	equ	0xFF2
 17489                           postinc0	equ	0xFEE
 17490                           wreg	equ	0xFE8
 17491                           indf1	equ	0xFE7
 17492                           fsr1h	equ	0xFE2
 17493                           fsr1l	equ	0xFE1
 17494                           bsr	equ	0xFE0
 17495                           indf2	equ	0xFDF
 17496                           postinc2	equ	0xFDE
 17497                           postdec2	equ	0xFDD
 17498                           plusw2	equ	0xFDB
 17499                           fsr2h	equ	0xFDA
 17500                           fsr2l	equ	0xFD9
 17501                           status	equ	0xFD8
 17502                           tblptru	equ	0xFF8
 17503                           tblptrh	equ	0xFF7
 17504                           tblptrl	equ	0xFF6
 17505                           tablat	equ	0xFF5
 17506                           prodh	equ	0xFF4
 17507                           prodl	equ	0xFF3
 17508                           intcon	equ	0xFF2
 17509                           postinc0	equ	0xFEE
 17510                           wreg	equ	0xFE8
 17511                           indf1	equ	0xFE7
 17512                           fsr1h	equ	0xFE2
 17513                           fsr1l	equ	0xFE1
 17514                           bsr	equ	0xFE0
 17515                           indf2	equ	0xFDF
 17516                           postinc2	equ	0xFDE
 17517                           postdec2	equ	0xFDD
 17518                           plusw2	equ	0xFDB
 17519                           fsr2h	equ	0xFDA
 17520                           fsr2l	equ	0xFD9
 17521                           status	equ	0xFD8
 17522                           
 17523                           	psect	rparam
 17524  0000                     tblptru	equ	0xFF8
 17525                           tblptrh	equ	0xFF7
 17526                           tblptrl	equ	0xFF6
 17527                           tablat	equ	0xFF5
 17528                           prodh	equ	0xFF4
 17529                           prodl	equ	0xFF3
 17530                           intcon	equ	0xFF2
 17531                           postinc0	equ	0xFEE
 17532                           wreg	equ	0xFE8
 17533                           indf1	equ	0xFE7
 17534                           fsr1h	equ	0xFE2
 17535                           fsr1l	equ	0xFE1
 17536                           bsr	equ	0xFE0
 17537                           indf2	equ	0xFDF
 17538                           postinc2	equ	0xFDE
 17539                           postdec2	equ	0xFDD
 17540                           plusw2	equ	0xFDB
 17541                           fsr2h	equ	0xFDA
 17542                           fsr2l	equ	0xFD9
 17543                           status	equ	0xFD8
 17544                           tblptru	equ	0xFF8
 17545                           tblptrh	equ	0xFF7
 17546                           tblptrl	equ	0xFF6
 17547                           tablat	equ	0xFF5
 17548                           prodh	equ	0xFF4
 17549                           prodl	equ	0xFF3
 17550                           intcon	equ	0xFF2
 17551                           postinc0	equ	0xFEE
 17552                           wreg	equ	0xFE8
 17553                           indf1	equ	0xFE7
 17554                           fsr1h	equ	0xFE2
 17555                           fsr1l	equ	0xFE1
 17556                           bsr	equ	0xFE0
 17557                           indf2	equ	0xFDF
 17558                           postinc2	equ	0xFDE
 17559                           postdec2	equ	0xFDD
 17560                           plusw2	equ	0xFDB
 17561                           fsr2h	equ	0xFDA
 17562                           fsr2l	equ	0xFD9
 17563                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     60     141
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_Read_b_eep
    _vscp_getZone->_Read_b_eep
    _doDM->_doActionOff
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionDisable->_Write_b_eep
    _doActionStatus->_SendInformationEvent
    _doActionPulse->_Read_b_eep
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeAppReg
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_calculateSetFilterMask
    _vscp_setUserID->_Write_b_eep
    _vscp_setManufacturerId->_Write_b_eep
    _vscp_setGUID->_Write_b_eep
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _calculateSetFilterMask->__CANIDToRegs
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_Read_b_eep
    _vscp_getUserID->_Read_b_eep
    _vscp_getGUID->_Read_b_eep
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_Read_b_eep
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_Write_b_eep
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_Write_b_eep
    _vscp_setSegmentCRC->_Write_b_eep
    _vscp_getSegmentCRC->_Read_b_eep
    _vscp_writeNicknamePermanent->_Write_b_eep
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_Read_b_eep
    _vscp_readAppReg->_Read_b_eep

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   75754
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                           _Busy_eep
                        _Write_b_eep
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           6     6      0    7438
                                             27 BANK0      6     6      0
                         _Read_b_eep
                        _doActionOff
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2370
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                17    17      0   15731
                                             28 BANK0     17    17      0
                         _Read_b_eep
                        _doActionOff
                         _doActionOn
                      _doActionPulse
                     _doActionStatus
                    _doActionDisable
                     _doActionToggle
 ---------------------------------------------------------------------------------
 (2) _doActionToggle                                       7     6      1    3470
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionDisable                                      6     5      1     449
                                             11 COMRAM     6     5      1
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _doActionStatus                                       7     6      1    3428
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulse                                        7     6      1     381
                                              9 COMRAM     7     6      1
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _doActionOn                                           7     6      1    3212
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOff                                          6     5      1    3212
                                             80 COMRAM     1     0      1
                                             22 BANK0      5     5      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   38013
                                             32 BANK0     28    28      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1   13131
                                             30 BANK0      2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    4058
                                             71 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0    2619
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0    2111
                                             67 COMRAM     4     4      0
                           _Busy_eep
                        _Write_b_eep
             _calculateSetFilterMask
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     112
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     134
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     134
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     9     8      1    8863
                                             80 COMRAM     1     0      1
                                             22 BANK0      8     8      0
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
             _calculateSetFilterMask
               _SendInformationEvent
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (2) _SendInformationEvent                                 8     6      2    2533
                                             74 COMRAM     6     6      0
                                             20 BANK0      2     0      2
                         _Read_b_eep
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (5) _calculateSetFilterMask                              50    50      0    1845
                                             17 COMRAM    50    50      0
                         _Read_b_eep
               _ECANSetOperationMode
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1773
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1334
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     217
                                             12 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      31
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     180
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     211
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4672
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     301
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _Write_b_eep                                          4     1      3      68
                                              7 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     666
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (6) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         3     3      0     508
                                              9 COMRAM     3     3      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      31
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     346
                                              9 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      31
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_getSegmentCRC
       _Read_b_eep
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
     _vscp_setControlByte
       _Busy_eep
       _Write_b_eep
   _init_app_eeprom
     _Busy_eep
     _Write_b_eep
     _calculateSetFilterMask
       _Read_b_eep
       _ECANSetOperationMode
       __CANIDToRegs
   _init_app_ram
     _Read_b_eep
   _vscp_init
     _vscp_readNicknamePermanent
       _Read_b_eep
   _Busy_eep
   _Write_b_eep
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _Read_b_eep
     _vscp_readAppReg
       _Read_b_eep
     _vscp_writeAppReg
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
       _calculateSetFilterMask
         _Read_b_eep
         _ECANSetOperationMode
         __CANIDToRegs
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_readAppReg (ARG)
         _Read_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _Read_b_eep
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _Busy_eep
       _Write_b_eep
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_getSegmentCRC
         _Read_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _Read_b_eep
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _Read_b_eep
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _Read_b_eep
         _vscp_getMDF_URL
         _vscp_getUserID
           _Read_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _Read_b_eep
       _vscp_getMDF_URL
       _vscp_getUserID
         _Read_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _Busy_eep
         _Write_b_eep
         _Read_b_eep
         _calculateSetFilterMask
           _Read_b_eep
           _ECANSetOperationMode
           __CANIDToRegs
         _SendInformationEvent
           _Read_b_eep
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
         _vscp_readAppReg (ARG)
           _Read_b_eep
       _vscp_writeStdReg
         _vscp_setGUID
           _Busy_eep
           _Write_b_eep
         _vscp_setManufacturerId
           _Busy_eep
           _Write_b_eep
         _vscp_getGUID
           _Read_b_eep
         _vscp_getUserID
           _Read_b_eep
         _vscp_setUserID
           _Busy_eep
           _Write_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_restoreDefaults
           _init_app_eeprom
             _Busy_eep
             _Write_b_eep
             _calculateSetFilterMask
               _Read_b_eep
               _ECANSetOperationMode
               __CANIDToRegs
           _init_app_ram
             _Read_b_eep
     _vscp_writeStdReg
       _vscp_setGUID
         _Busy_eep
         _Write_b_eep
       _vscp_setManufacturerId
         _Busy_eep
         _Write_b_eep
       _vscp_getGUID
         _Read_b_eep
       _vscp_getUserID
         _Read_b_eep
       _vscp_setUserID
         _Busy_eep
         _Write_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_restoreDefaults
         _init_app_eeprom
           _Busy_eep
           _Write_b_eep
           _calculateSetFilterMask
             _Read_b_eep
             _ECANSetOperationMode
             __CANIDToRegs
         _init_app_ram
           _Read_b_eep
     ___lbmod
   _doDM
     _Read_b_eep
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionOn
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulse
       _Read_b_eep
     _doActionStatus
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionDisable
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
     _doActionToggle
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _Read_b_eep
     _vscp_getSubzone
       _Read_b_eep
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _Read_b_eep
       _vscp_getSubzone (ARG)
         _Read_b_eep
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
     _Read_b_eep
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _SendInformationEvent
       _Read_b_eep
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3C      8D       5       88.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E5       3        0.0%
DATA                 0      0      F1      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Tue Nov 10 18:23:09 2015

                      doActionToggle@val 00CA                  __end_of_vscp_readAppReg 3602  
                  __end_of_sendVSCPFrame 354C                                       PL2 2616  
                                     PL4 0E4C                                       PL6 0E60  
                                     PL8 1C1E             ?_vscp_writeNicknamePermanent 0001  
            ??_vscp_getRegisterPagesUsed 0008                                       bsr 000FE0  
    vscp_writeNicknamePermanent@nickname 000C                              __CFG_BORV$3 000000  
                __end_of_vscp_readStdReg 29BC                    doActionToggle@dmflags 00C9  
                                    PL10 1C5C                                      PL20 1F4A  
                                    PL12 1C74                                      PL30 2FD6  
                                    PL22 1F58                                      PL14 1CA8  
                                    PL40 2EBA                                      PL32 1F66  
                                    PL24 2E98                                      PL16 2630  
                                    PL50 2EE0                                      PL42 2ECC  
                                    PL34 2EA6                                      PL26 2FC6  
                                    PL18 2FB2                                      PL60 0E96  
                                    PL52 1F74                                      PL44 1CD8  
                                    PL36 14D2                                      PL28 14BA  
                                    PL70 242C                                      PL62 0EA6  
                                    PL54 1F86                                      PL46 2FE8  
                                    PL38 0E70                                      PL80 14F4  
                                    PL72 14E6                                      PL64 0EB6  
                                    PL56 0E84                                      PL48 29BC  
                                    PL82 1CF6                                      PL74 2FFC  
                                    PL66 0EC6                                      PL58 3202  
                                    PL76 29D0                                      PL68 0ED6  
                                    PL78 1CEC                                      l210 1DFA  
                                    l211 1E02                                      l220 1E26  
                                    l213 1E06                                      l222 1E2A  
                                    l214 1E0E                                      l206 1DEA  
                                    l223 1E32                                      l207 1DF2  
                                    l151 3312                                      l312 0740  
                                    l216 1E12                                      l160 335A  
                                    l225 1E36                                      l217 1E1A  
                                    l322 0808                                      l306 06EC  
                                    l226 1E40                                      l219 1E1E  
                                    l404 0E20                                      l332 08D0  
                                    l500 26C4                                      l420 2614  
                                    l228 1EFC                                      l236 1F48  
                                    l164 3374                                      l317 07A4  
                                    l253 3B24                                      l502 26F4  
                                    l327 086C                                      l503 2724  
                                    l504 2754                                      l337 0934  
                                    l249 3B4A                                      l441 1FE0  
                                    l505 2784                       vscp_readStdReg@idx 0019  
                                    l450 2060                                      l506 27B4  
                                    l187 1914                                      l507 27E4  
                                    l515 2CE0                                      l292 35B8  
                                    l460 21A0                                      l452 20A0  
                                    l541 3646                                      l454 20E0  
                                    l471 3256                                      l447 2020  
                                    l640 3C90                                      l480 329C  
                                    l456 2120                                      l528 2DA6  
                                    l552 2B90                                      l481 32A0  
                                    l449 2204                                      l561 2BDA  
                                    l482 32A4                                      l458 2160  
                                    l570 2BFE                                      l562 2BE2  
                                    l483 32A8                                      l571 2C06  
                                    l484 32AC                                      l564 2BE6  
                                    l477 3294                                      l573 2C0A  
                                    l565 2BEE                                      l557 2BCA  
                                    l478 32CC                                      l494 2686  
                                    l574 2C12                                      l558 2BD2  
                                    l479 3298                                      l567 2BF2  
                                    l576 2C16                                      l568 2BFA  
                                    l665 37AC                                      l577 2C20  
                                    l930 2E96                                      l907 239C  
                                    l579 2C6A                        doActionStatus@bOn 00CA  
                                    l908 23B6                                      l676 3A5C  
                                    l925 2FB0                       vscp_readStdReg@reg 001C  
                                    l935 381A                                      l871 2B44  
                                    l863 2AA8                                      l865 2AC6  
                                    l891 22DA                                      l883 242A  
                                    l876 226A                                      l893 22EE  
                                    l886 2338                                      l895 2302  
                                    l887 22B8                                      l897 2312  
                                    l889 22C6                                      l899 2322  
                           __CFG_CPB$OFF 000000           __size_of_vscp_handleProbeState 00BA  
                      doActionStatus@arg 0051                           getVSCPFrame@id 0028  
                      doActionStatus@val 00CB            __end_of_vscp_handleProbeState 3496  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                   __size_of_Write_b_eep 0034                   _calculateSetFilterMask 1962  
                                    wreg 000FE8              ?_doApplicationOneSecondWork 0001  
                           __CFG_LVP$OFF 000000                             __CFG_WDT$OFF 000000  
                                   l1102 3B94                                     l1113 3A86  
                                   l1050 38F0                                     l1122 38DC  
                                   l1108 39F4                                     l1109 3A00  
                   __size_of_doActionOff 00E8                                     l1126 3CAA  
                                   l1055 3BB8                                     l1231 10AC  
                                   l1305 3DD4                                     l1073 3480  
                                   l1065 3492                                     l1330 39C0  
                                   l1074 3460                                     l1066 341E  
                                   l1171 3BFC                                     l1255 1228  
                                   l1256 123C                                     l1257 1278  
                                   l1346 3C54                                     l1098 395E  
                                   l1266 12B4                                     l1347 3C56  
                                   l1291 14B8                                     l1197 3106  
                                   l1299 3AB0                                     l6015 3B32  
                                   l6023 3B0C                      vscp_readStdReg@code 0011  
                                   l7133 234C                                     l7231 37D0  
                                   l7143 236C                vscp_getManufacturerId@idx 000A  
                                   l7233 37DA                                     l7225 37B4  
                                   l7161 23B8                                     l7081 2298  
                                   l7065 2258                                     l8025 3484  
                                   l7235 37E4                                     l7227 37BC  
                                   l7243 37FC                                     l7075 2282  
                                   l7083 22A2                                     l7237 37EA  
                                   l7229 37C6                                     l7239 37F0  
                                   l7183 2414                                     l7257 2E32  
                                   l7169 23E4                                     l7177 23FE  
                                   l7089 22A6                                     l7521 3ABC  
                                   l7195 3CD0                                     l7529 3AD2  
                                   l9401 2834                                     l6907 3C0A  
                                   l6941 3750                                     l8533 38BC  
                                   l7719 3BA4                                     l9351 2644  
                                   l8527 38B2                                     l6953 3A3A  
                                   l9601 2A32                                     l8537 38C4  
                                   l8651 1974                                     l9363 26AC  
                                   l8805 35FE                                     l7925 31AE  
                                   l7909 3120                                     l6957 3A3E  
                                   l7919 314A                                     l9607 2A42  
                                   l8671 1B0C                                     l7929 31F8  
                                   l9641 2AF6                                     l9481 366A  
                                   l8771 3562                                     l9635 2AC8  
                                   l9619 2A6C                                     l7971 3402  
                                   l7955 33DE                                     l9715 3956  
                                   l9811 28E8                                     l9803 28D2  
                                   l8691 1BAC                                     l8667 1A98  
                                   l8659 1A86                                     l7891 1916  
                                   l8781 3580                                     l9629 2AAC  
                                   l9661 2B3C                                     l8685 1B2A  
                                   l9469 3608                                     l8791 35A8  
                                   l8783 3588                                     l8775 3572  
                                   l9655 2B36                                     l9815 28F4  
                                   l9807 28DC                                     l9751 3CA4  
                                   l8695 1BC2                                     l9399 2814  
                                   l9487 3696                                     l8793 35B0  
                                   l8785 3590                                     l9649 2B14  
                                   l9585 3A04                                     l7993 343C  
                                   l7969 33FC                                     l9761 2852  
                                   l8689 1BA4                                     l8787 3598  
                                   l9659 2B3A                                     l7995 3440  
                                   l9819 2900                                     l8789 35A0  
                                   l8797 35BC                                     l9677 2F3E  
                                   l7989 3438                                     l9845 29A8  
                                   l9829 294A                                     l9781 2888  
                                   l9773 2870                                     l9765 285C  
                                   l9917 30EC                                     l9909 30D8  
                                   l8799 35E0                                     l9839 2992  
                                   l9927 3108                                     l9785 2894  
                                   l9777 287C                                     l9769 2866  
                                   l9849 29B8                                     l9873 3030  
                                   l9795 28BA                                     l9789 28A4  
                                   l9893 308A                                     l9885 306C  
                                   l9981 3338                                     l9799 28C6  
                                   l9895 308E                                     l9879 3050  
                                   l9991 334E                                     l9967 330E  
                                   l9897 30A4                                     l9993 3354  
                                   l9985 3340                                     l9989 334A  
            __size_of_vscp_getMatrixInfo 0020                                     u4275 39CC  
                                   u4276 39CE                           sendCANFrame@id 0037  
                                   u7115 2260                                     u7117 2262  
                                   u7435 2DFA                                     u7445 2E0A  
                                   u8254 3170                                     u8255 316C  
                                   u7455 2E36                                     u6940 37A0  
                                   u9404 1AF6                                     u9405 1AF4  
                                   u6945 3796                                     u9434 1B60  
                                   u9370 1AB8                                     u9435 1B5C  
                                   u9355 19CC                                     u9444 1B78  
                                   u9380 1AE0                                     u9445 1B74  
                                   u9375 1AAE                                     u9464 1B8E  
                                   u9465 1B8C                                     u9385 1AD6  
                       ??_ECANInitialize 0009                             __CFG_PWRT$ON 000000  
              vscp_setManufacturerId@idx 000D                                     _doDM 243A  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 32FA                                     _init 3960  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 0622                              _vscp_minute 0090  
                            _vscp_second 0095                                     prodh 000FF4  
                                   prodl 000FF3                                     start 00B8  
                   doActionPulse@dmflags 000F            __size_of_vscp_doOneSecondWork 004E  
                      vscp_getUserID@idx 000A                    __size_of_vscp_setGUID 0026  
                       _vscp_writeStdReg 3006                          _doActionDisable 3602  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 37AE              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 000A                         __RegsToCANID@ptr 0008  
                   __size_of_getCANFrame 002C                                    l10001 336E  
                                  l10101 0F74                                    l10005 3378  
                                  l10007 3390                                    l10041 0EF6  
                                  l10033 33D6                                    l10017 33BA  
                                  l11003 0BA6                                    l10211 117A  
                                  l10131 0FDC                                    l10115 0F80  
                                  l10043 0EFC                                    l11021 0C4A  
                                  l11005 0BCE                                    l10221 119E  
                                  l10213 1184                                    l10141 1010  
                                  l10045 0F02                                    l10029 33CE  
                                  l11103 0E34                                    l11023 0C6A  
                                  l11015 0BF0                                    l10303 1264  
                                  l10151 1044                                    l10047 0F08  
                                  l10039 0EF0                                    l11025 0C8A  
                                  l11017 0C0C                                    l11033 0CF6  
                                  l10401 1354                                    l10321 1294  
                                  l10209 1178                                    l10161 1078  
                                  l10081 0F4E                                    l10065 0F40  
                                  l11201 2D2E                                    l11107 0E48  
                                  l11027 0CAA                                    l11019 0C2A  
                                  l11035 0D1C                                    l10307 126C  
                                  l10227 11CA                                    l10067 0F46  
                                  l11203 2D38                                    l11029 0CCA  
                                  l10413 139C                                    l10405 136E  
                                  l10317 127A                                    l10173 10B0  
                                  l11117 1F9E                                    l11221 2D92  
                                  l11205 2D42                                    l11213 2D60  
                                  l11063 0D6A                                    l10431 13E0  
                                  l10423 13C6                                    l10343 12B6  
                                  l10271 121C                                    l10255 11FC  
                                  l10239 11DC                                    l10183 10F6  
                                  l10175 10CE                                    l11207 2D4C  
                                  l11215 2D7C                                    l11231 2DCA  
                                  l11303 2C8E                                    l10511 25C6  
                                  l10503 2578                                    _B0CON 000E20  
                                  l11073 0DB2                                    l11065 0D9C  
                                  l10409 1384                                    l10193 1152  
                                  l11129 2006                                    l11209 2D56  
                                  l11241 2B4E                                    l10505 2592  
                                  l10601 1EE8                                    l11075 0DBE  
                                  l11059 0D3E                                    l11315 3BF2  
                                  l10435 1408                                    l10291 123E  
                                  l10179 10DE                                    l11227 2DB8  
                                  l10611 1F22                                    l10701 06FA  
                                  l10357 12DE                                    l10189 113C  
                                  l11165 21E0                                    l11173 2228  
                                  l11253 2BB4                                    l10509 25AC  
                                  l10517 25E0                                    l10613 1F44  
                                  l10525 1D02                                    l10703 06FE  
                                  l11087 0DDA                                    l10383 133E  
                                  l10367 1300                                    l10623 3218  
                                  l11183 2CA0                                    l10519 260A  
                                  l10607 1F0E                                    _B1CON 000E30  
                                  l11097 0E0A                                    l10385 1344  
                                  l10457 1458                                    l11169 2216  
                                  l11257 2BD4                                    l10473 2446  
                                  l10529 1D0A                                    ?_doDM 0001  
                                  l10803 08E0                                    l10723 0750  
                                  l10715 0726                                    l10379 132C  
                                  l10299 125C                                    l10643 32B0  
                                  l10635 327A                                    l10651 32F0  
                                  l11195 2D04                                    l10483 2494  
                                  l10547 1D7A                                    l10901 0A78  
                                  l11197 2D1A                                    l11293 2C56  
                                  l11285 2C24                                    l10549 1DB2  
                                  l10815 0908                                    l10743 07B4  
                                  l10735 0778                                    l10647 32DE  
                                  l11199 2D24                                    l11287 2C40  
                                  l10495 2544                                    l10559 1DF4  
                                  _B2CON 000E40                                    l10905 0A7E  
                                  l10833 097C                                    l10825 0944  
                                  l10763 0818                                    l10755 07DC  
                                  l10683 0698                                    l10827 096E  
                                  l10675 0672                                    l10667 0650  
                                  l11299 2C7C                                    l10499 255E  
                                  l10587 1E44                                    l10925 0AC2  
                                  l10853 09BC                                    l10597 1ED6  
                                  l10589 1E60                                    l10943 0B06  
                                  l10919 0ABC                                    l10871 09FE  
                                  l10847 09B6                                    l10783 087C  
                                  l10775 0840                                    l10695 06C0  
                                  _B3CON 000E50                                    l10953 0B12  
                                  l10929 0AC8                                    l10881 0A34  
                                  l10857 09C2                                    l10795 08A4  
                                  l10973 0B56                                    l10949 0B0C  
                                  l10877 0A04                                    l10991 0B9A  
                                  l10967 0B50                                    l10895 0A72  
                                  _B4CON 000E60                                    l10977 0B5C  
          __size_of_SendInformationEvent 006C            __size_of_vscp_getMajorVersion 0002  
                                  l10997 0BA0                                    _B5CON 000E70  
             __end_of_vscp_goActiveState 3C3C            ??_vscp_writeNicknamePermanent 000C  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                            i1_WriteTimer0 3D7E  
                                  _EEADR 000FA9                          __end_of___lbmod 3ADA  
                _vscp_handleDropNickname 39D2                                    _BSEL0 000DF8  
                                  u10215 34D2                                    u10404 2654  
                                  u10405 2650                                    u11320 298A  
                                  _T0CON 000FD5                                    u10604 3618  
                                  u11325 2988                                    u10605 3614  
                                  u11290 2940                                    u13214 1FAE  
                                  u11295 293E                                    u13215 1FAA  
                                  u12364 1D58                                    u12365 1D54  
                                  u13504 2B5E                                    u12384 1DC2  
                                  u13505 2B5A                                    u12385 1DBE  
                                  u12554 3228                                    u12555 3224  
                                  u10975 2F18                                    u13384 2CB0  
                                  u10985 2F28                                    u13385 2CAC  
                                  u10995 2F46                                    i1l141 0086  
                                  i1l142 0088                                    i1l143 00A8  
                                  i1l144 009C                                    i1l139 0062  
                                  i1l147 00AA                          sendCANFrame@dlc 003B  
                                  _MSEL0 000DF0                                    _MSEL1 000DF1  
                                  _MSEL2 000DF2                                    _IRXIF 007D27  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 3DC2               _vscp_readNicknamePermanent 3DB8  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                       ?_vscp_getSubzone 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                             _vscp_getGUID 3D46  
                                  doDM@i 00DD                            __CFG_WRTD$OFF 000000  
                         Read_b_eep@badd 0008                           __CFG_EBTRB$OFF 000000  
                 Write_b_eep@GIE_BIT_VAL 000B                             _vscp_getZone 3D9A  
                     vscp_writeAppReg@rv 00CC                                    _hours 0088  
              _vscp_getRegisterPagesUsed 3DE0                   __size_of_vscp_getEvent 002A  
                           _vscp_setGUID 3B26                                    tablat 000FF5  
                _vscp_getSubMinorVersion 3DE6                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 3B00  
                   _ECANSetOperationMode 3CC4                          __initialization 3BBA  
                           __end_of_doDM 2616                             __end_of_main 33DC  
                           __end_of_init 399E                         ?_vscp_readAppReg 0001  
                             _Read_b_eep 3D6C                  _interrupt_at_low_vector 0018  
                       __end_of_Busy_eep 3DDA                           doDM@class_mask 00D2  
                         __CFG_OSC$HSPLL 000000                        ??_ECANSendMessage 001A  
                         ?i1_WriteTimer0 0001                                   ??_doDM 00CD  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 001E  
                 ??_vscp_restoreDefaults 0048                                   ??_main 0052  
                                 ??_init 000D            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 000A                 ??_vscp_setManufacturerId 000D  
               _vscp_handleProtocolEvent 0EE6                            __activetblptr 000002  
                      __RegsToCANID@type 000B               ECANReceiveMessage@msgFlags 0011  
          doApplicationOneSecondWork@bOn 00CF                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                 __size_of_doActionPulse 0200               ECANReceiveMessage@savedPtr 0012  
                                 _CANCON 000F6F                                   _EEDATA 000FA8  
                                 _EECON2 000FA7                                   _CIOCON 000F73  
                          doDM@type_mask 00D5                       vscp_writeStdReg@rv 004D  
                          ?_init_app_ram 0001                                   _MDSEL0 007BBE  
                                 _MDSEL1 007BBF                               _OpenTimer0 3C3C  
                                 i1l7541 0038                                   i1l7551 005C  
                                 i1l7543 003E                                   i1l7561 0082  
                                 i1l7553 0060                                   i1l7545 0042  
                                 i1l7537 0024                                   i1l7563 008C  
                                 i1l7555 0064                                   i1l7547 0052  
                                 i1l7539 002C                                   i1l7565 0096  
                                 i1l7557 0070                                   i1l7549 0054  
                                 i1l7567 00A4                                   i1l7559 007A  
                        _init_app_eeprom 14FE                                   _RXB0IF 007D20  
                                 _RXB1IF 007D21                  __end_of_doActionDisable 36A0  
                                 _RXF1EN 006EA1                   ECANReceiveMessage@data 000F  
                 ECANReceiveMessage@mode 0016                   ECANReceiveMessage@temp 0017  
                      getVSCPFrame@pData 0022                        getVSCPFrame@pSize 0021  
                     _vscp_newNodeOnline 3A5E                    ?_ECANSetOperationMode 0001  
                     __CANIDToRegs@Value 0011   vscp_handleProtocolEvent@page_save_1294 00DA  
                         getCANFrame@pid 001C                           __CFG_STVREN$ON 000000  
                              ??___lbmod 0009                            _vscp_getEvent 3A88  
                                 _doWork 3DDE                         OpenTimer0@config 0008  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 000D  
                    vscp_writeAppReg@bOn 00CD          calculateSetFilterMask@rowfilter 003E  
             calculateSetFilterMask@mask 0036                      vscp_writeAppReg@reg 00CE  
             __end_of_vscp_setSegmentCRC 3D08                      vscp_writeAppReg@val 0051  
                                 clear_0 3BC0                                   clear_1 3BCC  
                          ?_sendCANFrame 0037             vscp_handleProtocolEvent@byte 00E7  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 0091  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 000C                ??_vscp_getSubMinorVersion 0008  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 000A  
                   ??_vscp_newNodeOnline 004C                          ___lbmod@divisor 0008  
                        doActionToggle@i 00CC                               __accesstop 0060  
                __end_of__initialization 3BD2                          ___lbmod@counter 000A  
          __size_of_vscp_getMinorVersion 0002                          doActionStatus@i 00CC  
                  __size_of_getVSCPFrame 0078                       _vscp_writeRegister 3BDC  
              ??_interrupt_at_low_vector 0005                  __size_of_vscp_sendEvent 0026  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
                          _doActionPulse 263E              __end_of_vscp_check_pstorage 3BBA  
                __size_of_vscp_setUserID 001C                              ?_Read_b_eep 0008  
                        ??i1_WriteTimer0 0003                      ?_vscp_writeRegister 00CF  
                             __end_ofPL2 2630                               __end_ofPL4 0E60  
                             __end_ofPL6 0E70                               __end_ofPL8 1C5C  
                         ??_sendCANFrame 003E                               _doActionOn 1F98  
                ?_calculateSetFilterMask 0001            calculateSetFilterMask@lastOID 0035  
             __end_of_vscp_getFamilyCode 3DB8                            ?__RegsToCANID 0008  
            __size_of_ECANReceiveMessage 01FA                       sendVSCPFrame@pData 0045  
             __end_of_vscp_getFamilyType 3DAE          __size_of_vscp_getManufacturerId 0014  
                vscp_writeRegister@value 00CF          __size_of_vscp_setManufacturerId 0026  
               __end_of_vscp_writeAppReg 0E4C                   getVSCPFrame@pvscpclass 0027  
                __end_of_init_app_eeprom 1962              __end_of_vscp_setControlByte 3CF2  
               __end_of_vscp_writeStdReg 310C            calculateSetFilterMask@rowmask 0031  
                     __RegsToCANID@Value 000E                     ??_vscp_writeRegister 0052  
        __end_of_vscp_handleDropNickname 3A02                             _getVSCPFrame 3736  
                             __pbssBANK0 0060                              ?_OpenTimer0 0001  
             __end_of_vscp_getBufferSize 3DE4                                ?_Busy_eep 0001  
                       ?_doActionDisable 000C                    vscp_writeRegister@reg 00D0  
                 ??_ECANSetOperationMode 0008       __size_of_vscp_getRegisterPagesUsed 0002  
                         ?_doActionPulse 000A          __end_of_vscp_getSubMinorVersion 3DE8  
               ECANSetOperationMode@mode 0008                                  _B0RXFUL 007107  
                                _B1RXFUL 007187                     __ECANRxFilterHitInfo 0054  
                                _B2RXFUL 007207                                  _B3RXFUL 007287  
                                _B4RXFUL 007307                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 000C                                  _B5RXFUL 007387  
         __end_of_calculateSetFilterMask 1C1E                  __size_of_doActionToggle 0152  
                       WriteTimer0@timer 000A                  __size_of_doActionStatus 013C  
                                _ECANCON 000F77                            ??_WriteTimer0 000A  
                         ??__RegsToCANID 000C                            ??_Write_b_eep 000B  
                  sendVSCPFrame@priority 0043                                  _BRGCON1 000F70  
                                _BRGCON2 000F71                                  _BRGCON3 000F72  
         SendInformationEvent@eventClass 00C5                      vscp_writeStdReg@reg 004E  
           __end_of_vscp_doOneSecondWork 38DE              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0041                            ??_doActionOff 00C7  
        __end_of_interrupt_at_low_vector 00B8                 vscp_readStdReg@code_1267 0015  
                      sendCANFrame@pdata 003C                    _vscp_handleProbeState 33DC  
                                _RXB0CON 000F60                                  _RXB1CON 000F50  
                                _RXB0FUL 007B07                         __ECANPointBuffer 37AE  
             __end_of_vscp_getMatrixInfo 3C1E                                  _TXB0CON 000F40  
                                _TXB1CON 000F30                                  _TXB2CON 000F20  
                                _RXFCON0 000DD4                                  _RXFCON1 000DD5  
                  doActionStatus@dmflags 00C9                       _vscp_goActiveState 3C1E  
                 __size_of_sendVSCPFrame 00B6             __end_of_SendInformationEvent 3890  
           __end_of_vscp_getMajorVersion 3DEC                      __size_of_Read_b_eep 0012  
                     __size_of_vscp_init 0044                               ??_Busy_eep 0008  
                SendInformationEvent@idx 0050                   _vscp_getManufacturerId 3D1E  
                 _vscp_setManufacturerId 3B00                          _ECANSendMessage 29DC  
                    ?_vscp_goActiveState 0001                                  __Hparam 0000  
                        ??_vscp_getEvent 002C                                  __Lparam 0000  
                     _vscp_node_substate 0093               __end_of_vscp_getSegmentCRC 3DCC  
             ??_vscp_handleProtocolEvent 00D1                            ??_getCANFrame 001C  
                           doActionOff@i 00CB        __end_of_vscp_getRegisterPagesUsed 3DE2  
               __size_of_vscp_getMDF_URL 0018                                  ___lbmod 3AB2  
                        getCANFrame@pdlc 001A                  vscp_writeAppReg@val_682 00CB  
                              _FIFOEMPTY 007BA7                          __size_of_doWork 0002  
                           __psmallconst 0600                     __end_of_init_app_ram 3202  
                     _vscp_sendHeartBeat 3ADA                                  __pcinit 3BBA  
                         _vscp_deviceURL 0600                              ?_doActionOn 0051  
                                __ramtop 0600                      __size_of_OpenTimer0 001E  
                                __ptext0 32FA                                  __ptext1 3DDE  
                                __ptext2 1CFE                                  __ptext3 3890  
                                __ptext4 3ADA                                  __ptext5 3D90  
                                __ptext6 3D9A                                  __ptext7 3DDA  
                                __ptext8 243A                                  __ptext9 2B46  
                         _vscp_getUserID 3D32                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 004C                         doActionDisable@i 0011  
                  vscp_writeStdReg@value 0048                      ?_vscp_sendHeartBeat 00C5  
               ??_vscp_handleSetNickname 000D                                  _minutes 0089  
                                _seconds 008B                      __end_of_WriteTimer0 3D6C  
                       ?_init_app_eeprom 0001                      __end_of_Write_b_eep 39D2  
                      vscp_readAppReg@rv 000A                       vscp_getMDF_URL@idx 0009  
          vscp_handleProtocolEvent@bytes 00DE                     end_of_initialization 3BD2  
                    __end_of_doActionOff 32FA             __end_of_vscp_handleHeartbeat 3960  
               __size_of_vscp_getSubzone 000A                            __Lmediumconst 0000  
                   __end_of_sendCANFrame 3A32                vscp_handleProtocolEvent@i 00EB  
              vscp_handleProtocolEvent@j 00EC                vscp_handleProtocolEvent@k 00E5  
                        ??_doActionPulse 000B                   doActionDisable@dmflags 0010  
                   ??_vscp_sendHeartBeat 004C                           _vscp_sendEvent 3B4C  
                      ECANSendMessage@id 0012                        ECANSendMessage@pb 001B  
                                postdec2 000FDD                  __size_of_ECANInitialize 0096  
                         _vscp_setUserID 3C5A                                  postinc0 000FEE  
                                postinc2 000FDE                   __end_of_vscp_deviceURL 0620  
    __end_of_vscp_writeNicknamePermanent 3D1E              _vscp_writeNicknamePermanent 3D08  
                     __ECANPointBuffer@b 000B                            _sendVSCPFrame 3496  
                 __end_of_vscp_getUserID 3D46             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0078CB                        __end_of_vscp_init 3922  
                         _vscp_probe_cnt 0094                                _PORTCbits 000F82  
                    __end_of_getCANFrame 3A5E            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                 __size_of_vscp_readAppReg 00B6  
                       ___lbmod@dividend 0009                         doActionPulse@arg 000A  
                         _vscp_statuscnt 0058                 __size_of_vscp_readStdReg 017E  
                       doActionPulse@val 000E                       _vscp_setSegmentCRC 3CF2  
             vscp_handleProtocolEvent@cb 00E3                  __end_of_ECANSendMessage 2B46  
                      vscp_readStdReg@rv 001B                              ___lbmod@rem 000B  
                          ?__CANIDToRegs 0008                              doDM@dmflags 00DC  
                   __end_of__RegsToCANID 2E98                      __size_of_doActionOn 029A  
                    ?_vscp_setSegmentCRC 0001                   __end_of_vscp_sendEvent 3B72  
                             _vscp_error 3DDA                     _vscp_doOneSecondWork 3890  
                     i1WriteTimer0@timer 0003                               _vscp_timer 0086  
                 __end_of_vscp_setUserID 3C76                   vscp_sendHeartBeat@zone 004C  
                           ??_Read_b_eep 000A                           ?_sendVSCPFrame 003F  
            doApplicationOneSecondWork@i 00D1                           _doActionToggle 2B46  
                         _doActionStatus 2C98                          ?_vscp_getUserID 0001  
                         __end_of_doWork 3DE0             __end_of_vscp_getMinorVersion 3DEA  
                            _WriteTimer0 3D5A                     _SendInformationEvent 3824  
                   _vscp_getMajorVersion 3DEA                              _Write_b_eep 399E  
                   ??_vscp_setSegmentCRC 000C                        ??_vscp_getMDF_URL 0008  
          ??_vscp_getBootLoaderAlgorithm 0008                              __end_ofPL10 1C74  
                            __end_ofPL20 1F58                              __end_ofPL12 1CA8  
                      ?_vscp_writeAppReg 0051                              __end_ofPL30 2FE8  
                            __end_ofPL22 1F66                              __end_ofPL14 1CD8  
                            __end_ofPL40 2ECC                              __end_ofPL32 1F74  
                            __end_ofPL24 2EA6                              __end_ofPL16 263E  
                            __end_ofPL50 2EF2                              __end_ofPL42 2EE0  
                            __end_ofPL34 2EBA                              __end_ofPL26 2FD6  
                            __end_ofPL18 2FC6                              __end_ofPL60 0EA6  
                            __end_ofPL52 1F86                              __end_ofPL44 1CEC  
                            __end_ofPL36 14E6                              __end_ofPL28 14D2  
                            __end_ofPL70 243A                              __end_ofPL62 0EB6  
                            __end_ofPL54 1F98                              __end_ofPL46 2FFC  
                            __end_ofPL38 0E84                              __end_ofPL80 14FE  
                            __end_ofPL72 14F4                              __end_ofPL64 0EC6  
                            __end_ofPL56 0E96                              __end_ofPL48 29D0  
                            __end_ofPL82 1CFE                              __end_ofPL74 3006  
                            __end_ofPL66 0ED6                              __end_ofPL58 3212  
                            __end_ofPL76 29DC                              __end_ofPL68 0EE6  
                            __end_ofPL78 1CF6                      start_initialization 3BBA  
                            _doActionOff 3212          __size_of_vscp_handleSetNickname 0024  
                     ??_vscp_writeAppReg 00C7                        ?_vscp_writeStdReg 0048  
                 _relay_protection_timer 0060                      __CFG_BOREN$BOACTIVE 000000  
            __size_of_vscp_newNodeOnline 002A                             ??_OpenTimer0 0008  
                     ??_vscp_writeStdReg 0049                       _vscp_getFamilyCode 3DAE  
                         ??__CANIDToRegs 000F                       _vscp_getFamilyType 3DA4  
                       doDM@class_filter 00D0                       __end_of_Read_b_eep 3D7E  
                    sendVSCPFrame@nodeid 0042                        _vscp_readRegister 3C92  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 00E2  
                  ?_vscp_doOneSecondWork 0001                        __size_of_Busy_eep 0006  
                  ECANReceiveMessage@ptr 0018                      ?_vscp_getFamilyCode 0008  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 14BA  
                              _doDM$2152 00D6                          ?_vscp_setUserID 000C  
                              _doDM$2153 00D7                                _doDM$2154 00D8  
                              _doDM$2155 00D9                                _doDM$2156 00DA  
                              _doDM$2157 00DB                      ?_vscp_getFamilyType 0008  
                  __size_of_init_app_ram 00F6                 ?_vscp_handleDropNickname 0001  
                 __end_of_doActionToggle 2C98                        ??_vscp_getSubzone 000A  
                 __end_of_doActionStatus 2DD4                 __end_of__ECANPointBuffer 3824  
                      __CANIDToRegs@type 000E                              _getCANFrame 3A32  
                               ??_doWork 0008                       _vscp_getBufferSize 3DE2  
            vscp_handleProtocolEvent@len 00DF                           doActionOff@arg 0051  
            vscp_handleProtocolEvent@pos 00DD               __end_of_ECANReceiveMessage 242C  
                         doActionOff@val 00CA                      ??_vscp_readRegister 001D  
         __size_of_vscp_goBootloaderMode 001C                    ?_SendInformationEvent 00C5  
                  ?_vscp_getMajorVersion 0001                    __end_ofi1_WriteTimer0 3D90  
          __end_of_vscp_goBootloaderMode 3C92                     _vscp_handleHeartbeat 3922  
                     __end_of_OpenTimer0 3C5A      __size_of_doApplicationOneSecondWork 024C  
                    ?_vscp_getBufferSize 0001                           doActionPulse@i 0010  
           __size_of_vscp_check_pstorage 0024                     ??_vscp_getFamilyCode 000C  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0052  
                   ??_vscp_getFamilyType 000C                            ?_vscp_getGUID 0001  
                          __pcstackBANK0 00B1                         _vscp_alarmstatus 0055  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 0030  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 000C  
                          ?_vscp_setGUID 000C              __size_of_vscp_writeRegister 0022  
                       ?_ECANSendMessage 0012                        ??_vscp_readAppReg 000A  
                      sendVSCPFrame@size 0044                __end_of_vscp_readRegister 3CAC  
                      _relay_pulse_flags 008A                             _init_app_ram 310C  
                      _relay_pulse_timer 0070             __size_of_vscp_setControlByte 0016  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 000C  
                   ??_vscp_getBufferSize 0008                              ?_vscp_error 0001  
                     _vscp_getMatrixInfo 3BFE                   _vscp_handleSetNickname 3B72  
          __size_of_ECANSetOperationMode 0018                          ??_sendVSCPFrame 00B1  
                        ?_doActionToggle 0051                           _ECANInitialize 36A0  
                        ?_doActionStatus 0051                 __size_of_doActionDisable 009E  
                               ?___lbmod 0008                      ?_vscp_getMatrixInfo 0001  
                calculateSetFilterMask@i 0043                  calculateSetFilterMask@j 0042  
                        vscp_getGUID@idx 000A                              __pintcodelo 0018  
                           ??_doActionOn 00C7                    ?_vscp_handleHeartbeat 0001  
       vscp_handleProtocolEvent@len_1284 00E1                  vscp_readStdReg@idx_1268 001A  
             vscp_setManufacturerId@data 000C                             _sendCANFrame 3A02  
                            __smallconst 0600                        WriteTimer0@timer0 0008  
                     _vscp_getSegmentCRC 3DC2                           ??_vscp_getGUID 000A  
                         ??_vscp_getZone 000A                              doActionOn@i 00CC  
         __end_of_vscp_getManufacturerId 3D32           __end_of_vscp_setManufacturerId 3B26  
                  __size_of__RegsToCANID 00C4         vscp_handleProtocolEvent@pos_1283 00E0  
                        doDM@type_filter 00D4                           ??_vscp_setGUID 000D  
                    ?_vscp_getSegmentCRC 0001                     ??_vscp_getMatrixInfo 0008  
                       _vscp_configtimer 0084                       doActionDisable@arg 000C  
                     doActionDisable@val 000F          SendInformationEvent@eventTypeId 00C6  
                 ??_vscp_doOneSecondWork 004D                   sendVSCPFrame@vscpclass 003F  
                               _LATBbits 000F8A                     _vscp_getMinorVersion 3DE8  
                               _LATCbits 000F8B                                _sendTimer 008C  
                     __end_of_doActionOn 2232                   __end_of_ECANInitialize 3736  
                               i1u802_20 002C                                 i1u802_21 002A  
                               i1u803_20 005C                                 i1u803_21 005A  
                               i1u804_20 0070                                 i1u804_21 006E  
                               i1u805_20 007A                                 i1u805_21 0078  
                               i1u806_20 0082                                 i1u806_21 0080  
                               i1u807_20 0096                                 i1u807_21 0094  
                               i1u808_20 00A4                                 i1u808_21 00A2  
                       ECANSendMessage@i 0034                         ECANSendMessage@j 002F  
                  __end_of_vscp_getEvent 3AB2                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 002C  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 000A                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                   ??_SendInformationEvent 004B  
                               _RXM1SIDH 000F1C                   ??_vscp_getMajorVersion 0008  
                               _RXM1SIDL 000F1D               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 004C                       vscp_setUserID@data 000C  
                   __end_of__CANIDToRegs 2FB2                             __RegsToCANID 2DD4  
                     _vscp_probe_address 0057                          Write_b_eep@badd 0008  
                        Write_b_eep@bdat 000A                       doActionOff@dmflags 00C9  
            __size_of_vscp_goActiveState 001E                      getVSCPFrame@pNodeId 001F  
                              _vscp_init 38DE                                _vscp_imsg 0096  
                              _vscp_hour 008E                                _vscp_omsg 00A4  
                       vscp_setGUID@data 000C        __size_of_vscp_handleProtocolEvent 05D4  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
               SendInformationEvent@data 004D     __size_of_vscp_writeNicknamePermanent 0016  
     __end_of_doApplicationOneSecondWork 1F4A               _doApplicationOneSecondWork 1CFE  
                       _vscp_page_select 0052               __size_of_vscp_readRegister 001A  
                      _measurement_clock 0080                                 _Busy_eep 3DD4  
                  ?_vscp_getMinorVersion 0001                 __size_of_init_app_eeprom 0464  
           __end_of_vscp_restoreDefaults 3DD4                               _EECON1bits 000FA6  
                        ?_ECANInitialize 0001                 ??_calculateSetFilterMask 0012  
                               __Hrparam 0000                     ECANReceiveMessage@id 0014  
            __size_of_vscp_sendHeartBeat 0026                         ??_vscp_getUserID 000A  
                        _vscp_getMDF_URL 3CAC                                 __Lrparam 0000  
                  __end_of_doActionPulse 283E                         __CANIDToRegs@val 000A  
                       __CANIDToRegs@ptr 0008                            doActionOn@arg 0051  
                          doActionOn@val 00CB                         _vscp_initledfunc 0056  
                       __size_of___lbmod 0028                   ??_vscp_handleHeartbeat 000D  
                       getCANFrame@flags 001D                             ?_WriteTimer0 0008  
                       getCANFrame@pdata 001B                             ?_Write_b_eep 0008  
                      ??_doActionDisable 000D               vscp_writeAppReg@bInfoEvent 00CA  
                             ?_vscp_init 0001                             ?_doActionOff 0051  
                               __ptext10 3602                                 __ptext11 2C98  
                               __ptext20 14FE                                 __ptext12 263E  
                               __ptext21 3C5A                                 __ptext13 1F98  
                               __ptext30 3DA4                                 __ptext22 3B00  
                               __ptext14 3212                                 __ptext31 3DAE  
                               __ptext23 3B26                                 __ptext15 0EE6  
                               __ptext40 3DEA                                 __ptext32 3DE2  
                               __ptext24 0622                                 __ptext16 3AB2  
                               __ptext41 3A5E                                 __ptext33 3DE4  
                               __ptext25 3824                                 __ptext17 3BDC  
                               __ptext50 3C1E                                 __ptext42 39D2  
                               __ptext34 3D1E                                 __ptext26 1962  
                               __ptext18 3006                                 __ptext51 3B4C  
                               __ptext43 38DE                                 __ptext35 3D32  
                               __ptext27 3C92                                 __ptext19 3DCC  
                               __ptext60 2DD4                                 __ptext52 3496  
                               __ptext44 3DB8                                 __ptext36 3CAC  
                               __ptext28 283E                                 __ptext61 37AE  
                               __ptext53 3A02                                 __ptext45 3B72  
                               __ptext37 3D46                                 __ptext29 3DE0  
                               __ptext70 36A0                                 __ptext62 3B96  
                               __ptext54 29DC                                 __ptext46 3922  
                               __ptext38 3DE6                                 __ptext71 3CC4  
                               __ptext63 3CDC                                 __ptext55 2EF2  
                               __ptext47 3BFE                                 __ptext39 3DE8  
                               __ptext72 3C3C                                 __ptext64 3CF2  
                               __ptext56 3A88                                 __ptext48 3C76  
                               __ptext73 310C                                 __ptext65 3DC2  
                               __ptext57 3736                                 __ptext49 33DC  
                               __ptext74 3D5A                                 __ptext66 3D08  
                               __ptext58 3A32                                 __ptext75 3D6C  
                               __ptext67 399E                                 __ptext59 2232  
                               __ptext76 354C                                 __ptext68 3DD4  
                               __ptext69 3960                                 __ptext78 3D7E  
         vscp_goBootloaderMode@algorithm 000C                vscp_sendHeartBeat@subzone 00C5  
                          ?_getVSCPFrame 001E                         ??_vscp_sendEvent 004B  
                        _vscp_getSubzone 3D90             calculateSetFilterMask@filter 003A  
                       ??_vscp_setUserID 000D                            __size_of_doDM 01DC  
                          __size_of_main 00E2                            __size_of_init 003E  
              __size_of_vscp_writeAppReg 082A                      _vscp_check_pstorage 3B96  
                          init_app_ram@i 000C           vscp_handleProtocolEvent@i_1282 00E6  
         vscp_handleProtocolEvent@i_1285 00EA           vscp_handleProtocolEvent@i_1293 00E4  
                   __end_of_vscp_getGUID 3D5A                __size_of_vscp_writeStdReg 0106  
                    ECANSendMessage@data 0016                 ECANSendMessage@tempBSEL0 0030  
                           ?_getCANFrame 001A                      ECANSendMessage@mode 002D  
                   __end_of_vscp_getZone 3DA4                      ECANSendMessage@temp 0033  
                      ?__ECANPointBuffer 0008                        doActionOn@dmflags 00CA  
                      vscp_setUserID@idx 000D                     __end_of_vscp_setGUID 3B4C  
                     vscp_readAppReg@reg 000B                       ??__ECANPointBuffer 000B  
         vscp_handleProtocolEvent@offset 00DC                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 000D                         init_app_eeprom@i 0046  
                       init_app_eeprom@j 0047                      _vscp_setControlByte 3CDC  
            __size_of_vscp_setSegmentCRC 0016                          _vscp_readAppReg 354C  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F50  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
           ??_vscp_readNicknamePermanent 000A                      ECANReceiveMessage@i 0015  
                        _vscp_guid_reset 008D                          _vscp_readStdReg 283E  
           vscp_handleDropNickname@bytes 000D               __end_of_vscp_newNodeOnline 3A88  
                     _ECANReceiveMessage 2232                           ??_getVSCPFrame 0023  
                        _vscp_initbtncnt 008F                          sendVSCPFrame@id 0047  
                               intlevel1 0000                   ??_vscp_getMinorVersion 0008  
                vscp_getMatrixInfo@pData 0001                  __end_of_vscp_getMDF_URL 3CC4  
                   ?_vscp_setControlByte 0001                      ?_ECANReceiveMessage 000F  
                ?_vscp_handleSetNickname 0001                         ??_doActionToggle 00C7  
       __size_of_vscp_getSubMinorVersion 0002                         ??_doActionStatus 00C7  
                        _vscp_node_state 0092                             ??_vscp_error 0008  
                ECANSendMessage@msgFlags 0019                      vscp_getMatrixInfo@i 0008  
        __size_of_calculateSetFilterMask 02BC                  vscp_setControlByte@ctrl 000C  
                     ECANSendMessage@ptr 0035                        ??_init_app_eeprom 0044  
                  __size_of__CANIDToRegs 00C0      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 3DE6              _vscp_getBootLoaderAlgorithm 3DE4  
       __size_of_interrupt_at_low_vector 00A0                   ECANSendMessage@dataLen 0018  
                    __ECANPointBuffer@pt 000C                     ??_ECANReceiveMessage 0012  
                  ??_vscp_check_pstorage 000D                   ECANSendMessage@buffers 002E  
                  _vscp_goBootloaderMode 3C76             __end_of_ECANSetOperationMode 3CDC  
                   _vscp_restoreDefaults 3DCC              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 000A                  __end_of_vscp_getSubzone 3D9A  
            __size_of_vscp_getFamilyType 000A                               _RXM1EXIDEN 0078EB  
             __end_of_vscp_writeRegister 3BFE                       __end_of_vscp_error 3DDE  
                 ECANSendMessage@tempPtr 0031           __end_of_vscp_handleSetNickname 3B96  
     vscp_handleProtocolEvent@bytes_1289 00E8                    ??_vscp_setControlByte 000C  
                   vscp_readRegister@reg 001D             ??_doApplicationOneSecondWork 00CC  
                           __CANIDToRegs 2EF2                   __size_ofi1_WriteTimer0 0012  
      vscp_handleProtocolEvent@page_save 00D8              __size_of_vscp_getBufferSize 0002  
      doApplicationOneSecondWork@ctrlreg 00D0                 __size_of_ECANSendMessage 016A  
                      doActionToggle@bOn 00CB                        doActionToggle@arg 0051  
