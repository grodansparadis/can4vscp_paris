

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Sun Sep 13 18:07:34 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	text74,global,reloc=2,class=CODE,delta=1
    86                           	psect	text75,global,reloc=2,class=CODE,delta=1
    87                           	psect	text76,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    89                           	psect	text78,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    92                           	psect	pa_nodes,global,class=CODE,delta=1
    93  0000                     tblptrh	equ	0xFF7
    94                           tblptrl	equ	0xFF6
    95                           tablat	equ	0xFF5
    96                           prodh	equ	0xFF4
    97                           prodl	equ	0xFF3
    98                           intcon	equ	0xFF2
    99                           wreg	equ	0xFE8
   100                           indf1	equ	0xFE7
   101                           fsr1h	equ	0xFE2
   102                           fsr1l	equ	0xFE1
   103                           indf2	equ	0xFDF
   104                           postinc2	equ	0xFDE
   105                           postdec2	equ	0xFDD
   106                           plusw2	equ	0xFDB
   107                           fsr2h	equ	0xFDA
   108                           fsr2l	equ	0xFD9
   109                           status	equ	0xFD8
   110                           
   111                           	psect	smallconst
   112  000600                     __psmallconst:
   113                           	opt stack 0
   114  000600                     _vscp_deviceURL:
   115                           	opt stack 0
   116  000600  77                 	db	119
   117  000601  77                 	db	119
   118  000602  77                 	db	119
   119  000603  2E                 	db	46
   120  000604  65                 	db	101
   121  000605  75                 	db	117
   122  000606  72                 	db	114
   123  000607  6F                 	db	111
   124  000608  73                 	db	115
   125  000609  6F                 	db	111
   126  00060A  75                 	db	117
   127  00060B  72                 	db	114
   128  00060C  63                 	db	99
   129  00060D  65                 	db	101
   130  00060E  2E                 	db	46
   131  00060F  73                 	db	115
   132  000610  65                 	db	101
   133  000611  2F                 	db	47
   134  000612  70                 	db	112
   135  000613  61                 	db	97
   136  000614  72                 	db	114
   137  000615  69                 	db	105
   138  000616  73                 	db	115
   139  000617  5F                 	db	95
   140  000618  30                 	db	48
   141  000619  31                 	db	49
   142  00061A  30                 	db	48
   143  00061B  2E                 	db	46
   144  00061C  78                 	db	120
   145  00061D  6D                 	db	109
   146  00061E  6C                 	db	108
   147  00061F  00                 	db	0
   148  000620                     __end_of_vscp_deviceURL:
   149                           	opt stack 0
   150  0000                     _BRGCON1	set	3952
   151  0000                     _BRGCON2	set	3953
   152  0000                     _BRGCON3	set	3954
   153  0000                     _BSEL0	set	3576
   154  0000                     _CANCON	set	3951
   155  0000                     _CIOCON	set	3955
   156  0000                     _ECANCON	set	3959
   157  0000                     _EEADR	set	4009
   158  0000                     _EECON1bits	set	4006
   159  0000                     _EECON2	set	4007
   160  0000                     _EEDATA	set	4008
   161  0000                     _INTCONbits	set	4082
   162  0000                     _LATBbits	set	3978
   163  0000                     _LATCbits	set	3979
   164  0000                     _MSEL0	set	3568
   165  0000                     _MSEL1	set	3569
   166  0000                     _MSEL2	set	3570
   167  0000                     _PORTA	set	3968
   168  0000                     _PORTB	set	3969
   169  0000                     _PORTC	set	3970
   170  0000                     _PORTCbits	set	3970
   171  0000                     _RXB1CONbits	set	3920
   172  0000                     _RXF0EIDH	set	3842
   173  0000                     _RXF0EIDL	set	3843
   174  0000                     _RXF0SIDH	set	3840
   175  0000                     _RXF0SIDL	set	3841
   176  0000                     _RXF1EIDH	set	3846
   177  0000                     _RXF1EIDL	set	3847
   178  0000                     _RXF1SIDL	set	3845
   179  0000                     _RXFBCON0	set	3552
   180  0000                     _RXFBCON1	set	3553
   181  0000                     _RXFBCON2	set	3554
   182  0000                     _RXFBCON3	set	3555
   183  0000                     _RXFBCON4	set	3556
   184  0000                     _RXFBCON5	set	3557
   185  0000                     _RXFBCON6	set	3558
   186  0000                     _RXFBCON7	set	3559
   187  0000                     _RXFCON0	set	3540
   188  0000                     _RXFCON1	set	3541
   189  0000                     _RXM0EIDH	set	3866
   190  0000                     _RXM0EIDL	set	3867
   191  0000                     _RXM0SIDH	set	3864
   192  0000                     _RXM0SIDL	set	3865
   193  0000                     _RXM1EIDH	set	3870
   194  0000                     _RXM1EIDL	set	3871
   195  0000                     _RXM1SIDL	set	3869
   196  0000                     _T0CON	set	4053
   197  0000                     _T0CONbits	set	4053
   198  0000                     _TMR0H	set	4055
   199  0000                     _TMR0L	set	4054
   200  0000                     _TRISA	set	3986
   201  0000                     _TRISB	set	3987
   202  0000                     _TRISC	set	3988
   203  0000                     _B0RXFUL	set	28935
   204  0000                     _B0TXEN	set	28610
   205  0000                     _B1RXFUL	set	29063
   206  0000                     _B1TXEN	set	28611
   207  0000                     _B2RXFUL	set	29191
   208  0000                     _B2TXEN	set	28612
   209  0000                     _B3RXFUL	set	29319
   210  0000                     _B3TXEN	set	28613
   211  0000                     _B4RXFUL	set	29447
   212  0000                     _B4TXEN	set	28614
   213  0000                     _B5RXFUL	set	29575
   214  0000                     _B5TXEN	set	28615
   215  0000                     _FIFOEMPTY	set	31655
   216  0000                     _IRXIF	set	32039
   217  0000                     _MDSEL0	set	31678
   218  0000                     _MDSEL1	set	31679
   219  0000                     _RXB0FILHIT0	set	31488
   220  0000                     _RXB0FUL	set	31495
   221  0000                     _RXB0IF	set	32032
   222  0000                     _RXB0OVFL	set	31655
   223  0000                     _RXB1IF	set	32033
   224  0000                     _RXB1OVFL	set	31654
   225  0000                     _RXF1EN	set	28321
   226  0000                     _RXM0EXIDM	set	30923
   227  0000                     _RXM1EXIDEN	set	30955
   228  0000                     _B0CON	set	3616
   229  0000                     _B1CON	set	3632
   230  0000                     _B2CON	set	3648
   231  0000                     _B3CON	set	3664
   232  0000                     _B4CON	set	3680
   233  0000                     _B5CON	set	3696
   234  0000                     _RXB0CON	set	3936
   235  0000                     _RXB1CON	set	3920
   236  0000                     _RXF1SIDH	set	3844
   237  0000                     _RXM1SIDH	set	3868
   238  0000                     _TXB0CON	set	3904
   239  0000                     _TXB1CON	set	3888
   240  0000                     _TXB2CON	set	3872
   241                           
   242                           ; #config settings
   243  000620  00                 	db	0	; dummy byte at the end
   244  0000                     tblptrh	equ	0xFF7
   245                           tblptrl	equ	0xFF6
   246                           tablat	equ	0xFF5
   247                           prodh	equ	0xFF4
   248                           prodl	equ	0xFF3
   249                           intcon	equ	0xFF2
   250                           wreg	equ	0xFE8
   251                           indf1	equ	0xFE7
   252                           fsr1h	equ	0xFE2
   253                           fsr1l	equ	0xFE1
   254                           indf2	equ	0xFDF
   255                           postinc2	equ	0xFDE
   256                           postdec2	equ	0xFDD
   257                           plusw2	equ	0xFDB
   258                           fsr2h	equ	0xFDA
   259                           fsr2l	equ	0xFD9
   260                           status	equ	0xFD8
   261                           
   262                           	psect	cinit
   263  003BB8                     __pcinit:
   264                           	opt stack 0
   265  003BB8                     start_initialization:
   266                           	opt stack 0
   267  003BB8                     __initialization:
   268                           	opt stack 0
   269                           
   270                           ; Clear objects allocated to BANK0 (81 bytes)
   271  003BB8  EE00  F060         	lfsr	0,__pbssBANK0
   272  003BBC  0E51               	movlw	81
   273  003BBE                     clear_0:
   274  003BBE  6AEE               	clrf	postinc0,c
   275  003BC0  06E8               	decf	wreg,f,c
   276  003BC2  E1FD               	bnz	clear_0
   277                           
   278                           ; Clear objects allocated to COMRAM (7 bytes)
   279  003BC4  EE00  F052         	lfsr	0,__pbssCOMRAM
   280  003BC8  0E07               	movlw	7
   281  003BCA                     clear_1:
   282  003BCA  6AEE               	clrf	postinc0,c
   283  003BCC  06E8               	decf	wreg,f,c
   284  003BCE  E1FD               	bnz	clear_1
   285  003BD0                     end_of_initialization:
   286                           	opt stack 0
   287  003BD0                     __end_of__initialization:
   288                           	opt stack 0
   289  003BD0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   290  003BD2  6EF8               	movwf	tblptru,c
   291  003BD4  0100               	movlb	0
   292  003BD6  EF7C  F019         	goto	_main	;jump to C main() function
   293                           tblptru	equ	0xFF8
   294                           tblptrh	equ	0xFF7
   295                           tblptrl	equ	0xFF6
   296                           tablat	equ	0xFF5
   297                           prodh	equ	0xFF4
   298                           prodl	equ	0xFF3
   299                           intcon	equ	0xFF2
   300                           postinc0	equ	0xFEE
   301                           wreg	equ	0xFE8
   302                           indf1	equ	0xFE7
   303                           fsr1h	equ	0xFE2
   304                           fsr1l	equ	0xFE1
   305                           indf2	equ	0xFDF
   306                           postinc2	equ	0xFDE
   307                           postdec2	equ	0xFDD
   308                           plusw2	equ	0xFDB
   309                           fsr2h	equ	0xFDA
   310                           fsr2l	equ	0xFD9
   311                           status	equ	0xFD8
   312                           
   313                           	psect	bssCOMRAM
   314  000052                     __pbssCOMRAM:
   315                           	opt stack 0
   316  000052                     _vscp_page_select:
   317                           	opt stack 0
   318  000052                     	ds	2
   319  000054                     __ECANRxFilterHitInfo:
   320                           	opt stack 0
   321  000054                     	ds	1
   322  000055                     _vscp_alarmstatus:
   323                           	opt stack 0
   324  000055                     	ds	1
   325  000056                     _vscp_initledfunc:
   326                           	opt stack 0
   327  000056                     	ds	1
   328  000057                     _vscp_probe_address:
   329                           	opt stack 0
   330  000057                     	ds	1
   331  000058                     _vscp_statuscnt:
   332                           	opt stack 0
   333  000058                     	ds	1
   334                           tblptru	equ	0xFF8
   335                           tblptrh	equ	0xFF7
   336                           tblptrl	equ	0xFF6
   337                           tablat	equ	0xFF5
   338                           prodh	equ	0xFF4
   339                           prodl	equ	0xFF3
   340                           intcon	equ	0xFF2
   341                           postinc0	equ	0xFEE
   342                           wreg	equ	0xFE8
   343                           indf1	equ	0xFE7
   344                           fsr1h	equ	0xFE2
   345                           fsr1l	equ	0xFE1
   346                           indf2	equ	0xFDF
   347                           postinc2	equ	0xFDE
   348                           postdec2	equ	0xFDD
   349                           plusw2	equ	0xFDB
   350                           fsr2h	equ	0xFDA
   351                           fsr2l	equ	0xFD9
   352                           status	equ	0xFD8
   353                           
   354                           	psect	bssBANK0
   355  000060                     __pbssBANK0:
   356                           	opt stack 0
   357  000060                     _relay_protection_timer:
   358                           	opt stack 0
   359  000060                     	ds	16
   360  000070                     _relay_pulse_timer:
   361                           	opt stack 0
   362  000070                     	ds	16
   363  000080                     _measurement_clock:
   364                           	opt stack 0
   365  000080                     	ds	4
   366  000084                     _vscp_configtimer:
   367                           	opt stack 0
   368  000084                     	ds	2
   369  000086                     _vscp_timer:
   370                           	opt stack 0
   371  000086                     	ds	2
   372  000088                     _hours:
   373                           	opt stack 0
   374  000088                     	ds	1
   375  000089                     _minutes:
   376                           	opt stack 0
   377  000089                     	ds	1
   378  00008A                     _relay_pulse_flags:
   379                           	opt stack 0
   380  00008A                     	ds	1
   381  00008B                     _seconds:
   382                           	opt stack 0
   383  00008B                     	ds	1
   384  00008C                     _sendTimer:
   385                           	opt stack 0
   386  00008C                     	ds	1
   387  00008D                     _vscp_guid_reset:
   388                           	opt stack 0
   389  00008D                     	ds	1
   390  00008E                     _vscp_hour:
   391                           	opt stack 0
   392  00008E                     	ds	1
   393  00008F                     _vscp_initbtncnt:
   394                           	opt stack 0
   395  00008F                     	ds	1
   396  000090                     _vscp_minute:
   397                           	opt stack 0
   398  000090                     	ds	1
   399  000091                     _vscp_nickname:
   400                           	opt stack 0
   401  000091                     	ds	1
   402  000092                     _vscp_node_state:
   403                           	opt stack 0
   404  000092                     	ds	1
   405  000093                     _vscp_node_substate:
   406                           	opt stack 0
   407  000093                     	ds	1
   408  000094                     _vscp_probe_cnt:
   409                           	opt stack 0
   410  000094                     	ds	1
   411  000095                     _vscp_second:
   412                           	opt stack 0
   413  000095                     	ds	1
   414  000096                     _vscp_imsg:
   415                           	opt stack 0
   416  000096                     	ds	14
   417  0000A4                     _vscp_omsg:
   418                           	opt stack 0
   419  0000A4                     	ds	13
   420                           tblptru	equ	0xFF8
   421                           tblptrh	equ	0xFF7
   422                           tblptrl	equ	0xFF6
   423                           tablat	equ	0xFF5
   424                           prodh	equ	0xFF4
   425                           prodl	equ	0xFF3
   426                           intcon	equ	0xFF2
   427                           postinc0	equ	0xFEE
   428                           wreg	equ	0xFE8
   429                           indf1	equ	0xFE7
   430                           fsr1h	equ	0xFE2
   431                           fsr1l	equ	0xFE1
   432                           indf2	equ	0xFDF
   433                           postinc2	equ	0xFDE
   434                           postdec2	equ	0xFDD
   435                           plusw2	equ	0xFDB
   436                           fsr2h	equ	0xFDA
   437                           fsr2l	equ	0xFD9
   438                           status	equ	0xFD8
   439                           
   440                           	psect	cstackBANK0
   441  0000B1                     __pcstackBANK0:
   442                           	opt stack 0
   443  0000B1                     ??_sendVSCPFrame:
   444                           
   445                           ; 0 bytes @ 0x0
   446  0000B1                     	ds	20
   447  0000C5                     ?_SendInformationEvent:
   448                           	opt stack 0
   449  0000C5                     ?_vscp_sendHeartBeat:
   450                           	opt stack 0
   451  0000C5                     SendInformationEvent@eventClass:
   452                           	opt stack 0
   453  0000C5                     vscp_sendHeartBeat@subzone:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x14
   457  0000C5                     	ds	1
   458  0000C6                     SendInformationEvent@eventTypeId:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0x15
   462  0000C6                     	ds	1
   463  0000C7                     ??_doActionOff:
   464  0000C7                     ??_doActionOn:
   465  0000C7                     ??_doActionStatus:
   466  0000C7                     ??_doActionToggle:
   467  0000C7                     ??_vscp_writeAppReg:
   468                           
   469                           ; 0 bytes @ 0x16
   470  0000C7                     	ds	2
   471  0000C9                     doActionOff@dmflags:
   472                           	opt stack 0
   473  0000C9                     doActionStatus@dmflags:
   474                           	opt stack 0
   475  0000C9                     doActionToggle@dmflags:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x18
   479  0000C9                     	ds	1
   480  0000CA                     vscp_writeAppReg@bInfoEvent:
   481                           	opt stack 0
   482  0000CA                     doActionOn@dmflags:
   483                           	opt stack 0
   484  0000CA                     doActionOff@val:
   485                           	opt stack 0
   486  0000CA                     doActionStatus@bOn:
   487                           	opt stack 0
   488  0000CA                     doActionToggle@val:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x19
   492  0000CA                     	ds	1
   493  0000CB                     vscp_writeAppReg@val_682:
   494                           	opt stack 0
   495  0000CB                     doActionOn@val:
   496                           	opt stack 0
   497  0000CB                     doActionOff@i:
   498                           	opt stack 0
   499  0000CB                     doActionStatus@val:
   500                           	opt stack 0
   501  0000CB                     doActionToggle@bOn:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x1A
   505  0000CB                     	ds	1
   506  0000CC                     ??_doApplicationOneSecondWork:
   507  0000CC                     vscp_writeAppReg@rv:
   508                           	opt stack 0
   509  0000CC                     doActionOn@i:
   510                           	opt stack 0
   511  0000CC                     doActionStatus@i:
   512                           	opt stack 0
   513  0000CC                     doActionToggle@i:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x1B
   517  0000CC                     	ds	1
   518  0000CD                     ??_doDM:
   519  0000CD                     vscp_writeAppReg@bOn:
   520                           	opt stack 0
   521                           
   522                           ; 1 bytes @ 0x1C
   523  0000CD                     	ds	1
   524  0000CE                     vscp_writeAppReg@reg:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x1D
   528  0000CE                     	ds	1
   529  0000CF                     ?_vscp_writeRegister:
   530                           	opt stack 0
   531  0000CF                     doApplicationOneSecondWork@bOn:
   532                           	opt stack 0
   533  0000CF                     vscp_writeRegister@value:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x1E
   537  0000CF                     	ds	1
   538  0000D0                     doApplicationOneSecondWork@ctrlreg:
   539                           	opt stack 0
   540  0000D0                     vscp_writeRegister@reg:
   541                           	opt stack 0
   542  0000D0                     doDM@class_filter:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x1F
   546  0000D0                     	ds	1
   547  0000D1                     ??_vscp_handleProtocolEvent:
   548  0000D1                     doApplicationOneSecondWork@i:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x20
   552  0000D1                     	ds	1
   553  0000D2                     doDM@class_mask:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x21
   557  0000D2                     	ds	2
   558  0000D4                     doDM@type_filter:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x23
   562  0000D4                     	ds	1
   563  0000D5                     doDM@type_mask:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0x24
   567  0000D5                     	ds	1
   568  0000D6                     _doDM$2152:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x25
   572  0000D6                     	ds	1
   573  0000D7                     _doDM$2153:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x26
   577  0000D7                     	ds	1
   578  0000D8                     _doDM$2154:
   579                           	opt stack 0
   580  0000D8                     vscp_handleProtocolEvent@page_save:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x27
   584  0000D8                     	ds	1
   585  0000D9                     _doDM$2155:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x28
   589  0000D9                     	ds	1
   590  0000DA                     _doDM$2156:
   591                           	opt stack 0
   592  0000DA                     vscp_handleProtocolEvent@page_save_1294:
   593                           	opt stack 0
   594                           
   595                           ; 2 bytes @ 0x29
   596  0000DA                     	ds	1
   597  0000DB                     _doDM$2157:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x2A
   601  0000DB                     	ds	1
   602  0000DC                     doDM@dmflags:
   603                           	opt stack 0
   604  0000DC                     vscp_handleProtocolEvent@offset:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x2B
   608  0000DC                     	ds	1
   609  0000DD                     doDM@i:
   610                           	opt stack 0
   611  0000DD                     vscp_handleProtocolEvent@pos:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x2C
   615  0000DD                     	ds	1
   616  0000DE                     vscp_handleProtocolEvent@bytes:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x2D
   620  0000DE                     	ds	1
   621  0000DF                     vscp_handleProtocolEvent@len:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x2E
   625  0000DF                     	ds	1
   626  0000E0                     vscp_handleProtocolEvent@pos_1283:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x2F
   630  0000E0                     	ds	1
   631  0000E1                     vscp_handleProtocolEvent@len_1284:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x30
   635  0000E1                     	ds	1
   636  0000E2                     vscp_handleProtocolEvent@bytes_this_time:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x31
   640  0000E2                     	ds	1
   641  0000E3                     vscp_handleProtocolEvent@cb:
   642                           	opt stack 0
   643                           
   644                           ; 1 bytes @ 0x32
   645  0000E3                     	ds	1
   646  0000E4                     vscp_handleProtocolEvent@i_1293:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x33
   650  0000E4                     	ds	1
   651  0000E5                     vscp_handleProtocolEvent@k:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0x34
   655  0000E5                     	ds	1
   656  0000E6                     vscp_handleProtocolEvent@i_1282:
   657                           	opt stack 0
   658                           
   659                           ; 1 bytes @ 0x35
   660  0000E6                     	ds	1
   661  0000E7                     vscp_handleProtocolEvent@byte:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0x36
   665  0000E7                     	ds	1
   666  0000E8                     vscp_handleProtocolEvent@bytes_1289:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x37
   670  0000E8                     	ds	2
   671  0000EA                     vscp_handleProtocolEvent@i_1285:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x39
   675  0000EA                     	ds	1
   676  0000EB                     vscp_handleProtocolEvent@i:
   677                           	opt stack 0
   678                           
   679                           ; 1 bytes @ 0x3A
   680  0000EB                     	ds	1
   681  0000EC                     vscp_handleProtocolEvent@j:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x3B
   685  0000EC                     	ds	1
   686                           tblptru	equ	0xFF8
   687                           tblptrh	equ	0xFF7
   688                           tblptrl	equ	0xFF6
   689                           tablat	equ	0xFF5
   690                           prodh	equ	0xFF4
   691                           prodl	equ	0xFF3
   692                           intcon	equ	0xFF2
   693                           postinc0	equ	0xFEE
   694                           wreg	equ	0xFE8
   695                           indf1	equ	0xFE7
   696                           fsr1h	equ	0xFE2
   697                           fsr1l	equ	0xFE1
   698                           indf2	equ	0xFDF
   699                           postinc2	equ	0xFDE
   700                           postdec2	equ	0xFDD
   701                           plusw2	equ	0xFDB
   702                           fsr2h	equ	0xFDA
   703                           fsr2l	equ	0xFD9
   704                           status	equ	0xFD8
   705                           
   706                           	psect	cstackCOMRAM
   707  000001                     __pcstackCOMRAM:
   708                           	opt stack 0
   709  000001                     ?i1_WriteTimer0:
   710                           	opt stack 0
   711  000001                     i1WriteTimer0@timer0:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x0
   715  000001                     	ds	2
   716  000003                     i1WriteTimer0@timer:
   717                           	opt stack 0
   718                           
   719                           ; 2 bytes @ 0x2
   720  000003                     	ds	2
   721  000005                     ??_interrupt_at_low_vector:
   722                           
   723                           ; 0 bytes @ 0x4
   724  000005                     	ds	3
   725  000008                     ?_WriteTimer0:
   726                           	opt stack 0
   727  000008                     ?_Write_b_eep:
   728                           	opt stack 0
   729  000008                     ?__CANIDToRegs:
   730                           	opt stack 0
   731  000008                     ?__RegsToCANID:
   732                           	opt stack 0
   733  000008                     ??_vscp_getMDF_URL:
   734  000008                     ?_Read_b_eep:
   735                           	opt stack 0
   736  000008                     ?___lbmod:
   737                           	opt stack 0
   738  000008                     ?__ECANPointBuffer:
   739                           	opt stack 0
   740  000008                     ?_vscp_getFamilyCode:
   741                           	opt stack 0
   742  000008                     ?_vscp_getFamilyType:
   743                           	opt stack 0
   744  000008                     vscp_getMatrixInfo@i:
   745                           	opt stack 0
   746  000008                     ECANSetOperationMode@mode:
   747                           	opt stack 0
   748  000008                     OpenTimer0@config:
   749                           	opt stack 0
   750  000008                     ___lbmod@divisor:
   751                           	opt stack 0
   752  000008                     __CANIDToRegs@ptr:
   753                           	opt stack 0
   754  000008                     __RegsToCANID@ptr:
   755                           	opt stack 0
   756  000008                     Read_b_eep@badd:
   757                           	opt stack 0
   758  000008                     Write_b_eep@badd:
   759                           	opt stack 0
   760  000008                     WriteTimer0@timer0:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x7
   764  000008                     	ds	1
   765  000009                     vscp_getMDF_URL@idx:
   766                           	opt stack 0
   767  000009                     ___lbmod@dividend:
   768                           	opt stack 0
   769                           
   770                           ; 1 bytes @ 0x8
   771  000009                     	ds	1
   772  00000A                     ??_init_app_ram:
   773  00000A                     ?_doActionPulse:
   774                           	opt stack 0
   775  00000A                     vscp_readAppReg@rv:
   776                           	opt stack 0
   777  00000A                     doActionPulse@arg:
   778                           	opt stack 0
   779  00000A                     vscp_getGUID@idx:
   780                           	opt stack 0
   781  00000A                     vscp_getUserID@idx:
   782                           	opt stack 0
   783  00000A                     vscp_getManufacturerId@idx:
   784                           	opt stack 0
   785  00000A                     __RegsToCANID@val:
   786                           	opt stack 0
   787  00000A                     Write_b_eep@bdat:
   788                           	opt stack 0
   789  00000A                     ___lbmod@counter:
   790                           	opt stack 0
   791  00000A                     WriteTimer0@timer:
   792                           	opt stack 0
   793  00000A                     __CANIDToRegs@val:
   794                           	opt stack 0
   795                           
   796                           ; 4 bytes @ 0x9
   797  00000A                     	ds	1
   798  00000B                     ??_doActionPulse:
   799  00000B                     vscp_readAppReg@reg:
   800                           	opt stack 0
   801  00000B                     __RegsToCANID@type:
   802                           	opt stack 0
   803  00000B                     __ECANPointBuffer@b:
   804                           	opt stack 0
   805  00000B                     Write_b_eep@GIE_BIT_VAL:
   806                           	opt stack 0
   807  00000B                     ___lbmod@rem:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0xA
   811  00000B                     	ds	1
   812  00000C                     ??_init_app_eeprom:
   813  00000C                     ?_doActionDisable:
   814                           	opt stack 0
   815  00000C                     ??__RegsToCANID:
   816  00000C                     ??_vscp_readStdReg:
   817  00000C                     ?_vscp_setGUID:
   818                           	opt stack 0
   819  00000C                     ?_vscp_setManufacturerId:
   820                           	opt stack 0
   821  00000C                     ?_vscp_setUserID:
   822                           	opt stack 0
   823  00000C                     init_app_ram@i:
   824                           	opt stack 0
   825  00000C                     vscp_setGUID@data:
   826                           	opt stack 0
   827  00000C                     vscp_setManufacturerId@data:
   828                           	opt stack 0
   829  00000C                     vscp_writeNicknamePermanent@nickname:
   830                           	opt stack 0
   831  00000C                     doActionDisable@arg:
   832                           	opt stack 0
   833  00000C                     vscp_setUserID@data:
   834                           	opt stack 0
   835  00000C                     vscp_setSegmentCRC@crc:
   836                           	opt stack 0
   837  00000C                     vscp_setControlByte@ctrl:
   838                           	opt stack 0
   839  00000C                     vscp_goBootloaderMode@algorithm:
   840                           	opt stack 0
   841  00000C                     __ECANPointBuffer@pt:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0xB
   845  00000C                     	ds	1
   846  00000D                     ??_doActionDisable:
   847  00000D                     vscp_setGUID@idx:
   848                           	opt stack 0
   849  00000D                     vscp_setManufacturerId@idx:
   850                           	opt stack 0
   851  00000D                     vscp_setUserID@idx:
   852                           	opt stack 0
   853  00000D                     vscp_handleDropNickname@bytes:
   854                           	opt stack 0
   855                           
   856                           ; 1 bytes @ 0xC
   857  00000D                     	ds	1
   858  00000E                     init_app_eeprom@i:
   859                           	opt stack 0
   860  00000E                     doActionPulse@val:
   861                           	opt stack 0
   862  00000E                     __CANIDToRegs@type:
   863                           	opt stack 0
   864  00000E                     __RegsToCANID@Value:
   865                           	opt stack 0
   866                           
   867                           ; 1 bytes @ 0xD
   868  00000E                     	ds	1
   869  00000F                     ??__CANIDToRegs:
   870  00000F                     ?_ECANReceiveMessage:
   871                           	opt stack 0
   872  00000F                     init_app_eeprom@j:
   873                           	opt stack 0
   874  00000F                     doActionPulse@dmflags:
   875                           	opt stack 0
   876  00000F                     doActionDisable@val:
   877                           	opt stack 0
   878  00000F                     ECANReceiveMessage@data:
   879                           	opt stack 0
   880                           
   881                           ; 1 bytes @ 0xE
   882  00000F                     	ds	1
   883  000010                     ?_vscp_writeStdReg:
   884                           	opt stack 0
   885  000010                     doActionPulse@i:
   886                           	opt stack 0
   887  000010                     doActionDisable@dmflags:
   888                           	opt stack 0
   889  000010                     ECANReceiveMessage@dataLen:
   890                           	opt stack 0
   891  000010                     vscp_writeStdReg@value:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0xF
   895  000010                     	ds	1
   896  000011                     ??_vscp_writeStdReg:
   897  000011                     doActionDisable@i:
   898                           	opt stack 0
   899  000011                     ECANReceiveMessage@msgFlags:
   900                           	opt stack 0
   901  000011                     __CANIDToRegs@Value:
   902                           	opt stack 0
   903  000011                     vscp_readStdReg@code:
   904                           	opt stack 0
   905                           
   906                           ; 4 bytes @ 0x10
   907  000011                     	ds	1
   908  000012                     ??_calculateSetFilterMask:
   909  000012                     ?_ECANSendMessage:
   910                           	opt stack 0
   911  000012                     ECANReceiveMessage@savedPtr:
   912                           	opt stack 0
   913  000012                     ECANSendMessage@id:
   914                           	opt stack 0
   915                           
   916                           ; 4 bytes @ 0x11
   917  000012                     	ds	2
   918  000014                     ECANReceiveMessage@id:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x13
   922  000014                     	ds	1
   923  000015                     ECANReceiveMessage@i:
   924                           	opt stack 0
   925  000015                     vscp_writeStdReg@rv:
   926                           	opt stack 0
   927  000015                     vscp_readStdReg@code_1267:
   928                           	opt stack 0
   929                           
   930                           ; 4 bytes @ 0x14
   931  000015                     	ds	1
   932  000016                     ECANReceiveMessage@mode:
   933                           	opt stack 0
   934  000016                     vscp_writeStdReg@reg:
   935                           	opt stack 0
   936  000016                     ECANSendMessage@data:
   937                           	opt stack 0
   938                           
   939                           ; 2 bytes @ 0x15
   940  000016                     	ds	1
   941  000017                     ECANReceiveMessage@temp:
   942                           	opt stack 0
   943                           
   944                           ; 1 bytes @ 0x16
   945  000017                     	ds	1
   946  000018                     ECANSendMessage@dataLen:
   947                           	opt stack 0
   948  000018                     ECANReceiveMessage@ptr:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x17
   952  000018                     	ds	1
   953  000019                     ECANSendMessage@msgFlags:
   954                           	opt stack 0
   955  000019                     vscp_readStdReg@idx:
   956                           	opt stack 0
   957                           
   958                           ; 1 bytes @ 0x18
   959  000019                     	ds	1
   960  00001A                     ??_ECANSendMessage:
   961  00001A                     ?_getCANFrame:
   962                           	opt stack 0
   963  00001A                     getCANFrame@pdlc:
   964                           	opt stack 0
   965  00001A                     vscp_readStdReg@idx_1268:
   966                           	opt stack 0
   967                           
   968                           ; 1 bytes @ 0x19
   969  00001A                     	ds	1
   970  00001B                     getCANFrame@pdata:
   971                           	opt stack 0
   972  00001B                     vscp_readStdReg@rv:
   973                           	opt stack 0
   974  00001B                     ECANSendMessage@pb:
   975                           	opt stack 0
   976                           
   977                           ; 18 bytes @ 0x1A
   978  00001B                     	ds	1
   979  00001C                     getCANFrame@pid:
   980                           	opt stack 0
   981  00001C                     vscp_readStdReg@reg:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x1B
   985  00001C                     	ds	1
   986  00001D                     getCANFrame@flags:
   987                           	opt stack 0
   988  00001D                     vscp_readRegister@reg:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x1C
   992  00001D                     	ds	1
   993  00001E                     ?_getVSCPFrame:
   994                           	opt stack 0
   995  00001E                     getVSCPFrame@pvscptype:
   996                           	opt stack 0
   997                           
   998                           ; 1 bytes @ 0x1D
   999  00001E                     	ds	1
  1000  00001F                     getVSCPFrame@pNodeId:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x1E
  1004  00001F                     	ds	1
  1005  000020                     getVSCPFrame@pPriority:
  1006                           	opt stack 0
  1007                           
  1008                           ; 1 bytes @ 0x1F
  1009  000020                     	ds	1
  1010  000021                     getVSCPFrame@pSize:
  1011                           	opt stack 0
  1012                           
  1013                           ; 1 bytes @ 0x20
  1014  000021                     	ds	1
  1015  000022                     getVSCPFrame@pData:
  1016                           	opt stack 0
  1017                           
  1018                           ; 1 bytes @ 0x21
  1019  000022                     	ds	1
  1020  000023                     ??_getVSCPFrame:
  1021                           
  1022                           ; 0 bytes @ 0x22
  1023  000023                     	ds	4
  1024  000027                     getVSCPFrame@pvscpclass:
  1025                           	opt stack 0
  1026                           
  1027                           ; 1 bytes @ 0x26
  1028  000027                     	ds	1
  1029  000028                     getVSCPFrame@id:
  1030                           	opt stack 0
  1031                           
  1032                           ; 4 bytes @ 0x27
  1033  000028                     	ds	4
  1034  00002C                     vscp_getEvent@rv:
  1035                           	opt stack 0
  1036                           
  1037                           ; 1 bytes @ 0x2B
  1038  00002C                     	ds	1
  1039  00002D                     ECANSendMessage@mode:
  1040                           	opt stack 0
  1041                           
  1042                           ; 1 bytes @ 0x2C
  1043  00002D                     	ds	1
  1044  00002E                     ECANSendMessage@buffers:
  1045                           	opt stack 0
  1046                           
  1047                           ; 1 bytes @ 0x2D
  1048  00002E                     	ds	1
  1049  00002F                     ECANSendMessage@j:
  1050                           	opt stack 0
  1051                           
  1052                           ; 1 bytes @ 0x2E
  1053  00002F                     	ds	1
  1054  000030                     ECANSendMessage@tempBSEL0:
  1055                           	opt stack 0
  1056                           
  1057                           ; 1 bytes @ 0x2F
  1058  000030                     	ds	1
  1059  000031                     ECANSendMessage@tempPtr:
  1060                           	opt stack 0
  1061  000031                     calculateSetFilterMask@rowmask:
  1062                           	opt stack 0
  1063                           
  1064                           ; 4 bytes @ 0x30
  1065  000031                     	ds	2
  1066  000033                     ECANSendMessage@temp:
  1067                           	opt stack 0
  1068                           
  1069                           ; 1 bytes @ 0x32
  1070  000033                     	ds	1
  1071  000034                     ECANSendMessage@i:
  1072                           	opt stack 0
  1073                           
  1074                           ; 1 bytes @ 0x33
  1075  000034                     	ds	1
  1076  000035                     calculateSetFilterMask@lastOID:
  1077                           	opt stack 0
  1078  000035                     ECANSendMessage@ptr:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x34
  1082  000035                     	ds	1
  1083  000036                     calculateSetFilterMask@mask:
  1084                           	opt stack 0
  1085                           
  1086                           ; 4 bytes @ 0x35
  1087  000036                     	ds	1
  1088  000037                     ?_sendCANFrame:
  1089                           	opt stack 0
  1090  000037                     sendCANFrame@id:
  1091                           	opt stack 0
  1092                           
  1093                           ; 4 bytes @ 0x36
  1094  000037                     	ds	3
  1095  00003A                     calculateSetFilterMask@filter:
  1096                           	opt stack 0
  1097                           
  1098                           ; 4 bytes @ 0x39
  1099  00003A                     	ds	1
  1100  00003B                     sendCANFrame@dlc:
  1101                           	opt stack 0
  1102                           
  1103                           ; 1 bytes @ 0x3A
  1104  00003B                     	ds	1
  1105  00003C                     sendCANFrame@pdata:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0x3B
  1109  00003C                     	ds	2
  1110  00003E                     calculateSetFilterMask@rowfilter:
  1111                           	opt stack 0
  1112                           
  1113                           ; 4 bytes @ 0x3D
  1114  00003E                     	ds	1
  1115  00003F                     ?_sendVSCPFrame:
  1116                           	opt stack 0
  1117  00003F                     sendVSCPFrame@vscpclass:
  1118                           	opt stack 0
  1119                           
  1120                           ; 2 bytes @ 0x3E
  1121  00003F                     	ds	2
  1122  000041                     sendVSCPFrame@vscptype:
  1123                           	opt stack 0
  1124                           
  1125                           ; 1 bytes @ 0x40
  1126  000041                     	ds	1
  1127  000042                     sendVSCPFrame@nodeid:
  1128                           	opt stack 0
  1129  000042                     calculateSetFilterMask@j:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0x41
  1133  000042                     	ds	1
  1134  000043                     sendVSCPFrame@priority:
  1135                           	opt stack 0
  1136  000043                     calculateSetFilterMask@i:
  1137                           	opt stack 0
  1138                           
  1139                           ; 1 bytes @ 0x42
  1140  000043                     	ds	1
  1141  000044                     sendVSCPFrame@size:
  1142                           	opt stack 0
  1143                           
  1144                           ; 1 bytes @ 0x43
  1145  000044                     	ds	1
  1146  000045                     sendVSCPFrame@pData:
  1147                           	opt stack 0
  1148                           
  1149                           ; 2 bytes @ 0x44
  1150  000045                     	ds	2
  1151  000047                     sendVSCPFrame@id:
  1152                           	opt stack 0
  1153                           
  1154                           ; 4 bytes @ 0x46
  1155  000047                     	ds	4
  1156  00004B                     ??_SendInformationEvent:
  1157  00004B                     
  1158                           ; 0 bytes @ 0x4A
  1159  00004B                     	ds	1
  1160  00004C                     ??_vscp_newNodeOnline:
  1161  00004C                     vscp_sendHeartBeat@zone:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0x4B
  1165  00004C                     	ds	1
  1166  00004D                     ??_vscp_doOneSecondWork:
  1167  00004D                     SendInformationEvent@data:
  1168                           	opt stack 0
  1169                           
  1170                           ; 3 bytes @ 0x4C
  1171  00004D                     	ds	3
  1172  000050                     SendInformationEvent@idx:
  1173                           	opt stack 0
  1174                           
  1175                           ; 1 bytes @ 0x4F
  1176  000050                     	ds	1
  1177  000051                     ?_doActionOff:
  1178                           	opt stack 0
  1179  000051                     ?_doActionOn:
  1180                           	opt stack 0
  1181  000051                     ?_doActionStatus:
  1182                           	opt stack 0
  1183  000051                     ?_doActionToggle:
  1184                           	opt stack 0
  1185  000051                     ?_vscp_writeAppReg:
  1186                           	opt stack 0
  1187  000051                     vscp_writeAppReg@val:
  1188                           	opt stack 0
  1189  000051                     doActionOn@arg:
  1190                           	opt stack 0
  1191  000051                     doActionOff@arg:
  1192                           	opt stack 0
  1193  000051                     doActionStatus@arg:
  1194                           	opt stack 0
  1195  000051                     doActionToggle@arg:
  1196                           	opt stack 0
  1197                           
  1198                           ; 1 bytes @ 0x50
  1199  000051                     	ds	1
  1200  000052                     tblptru	equ	0xFF8
  1201                           tblptrh	equ	0xFF7
  1202                           tblptrl	equ	0xFF6
  1203                           tablat	equ	0xFF5
  1204                           prodh	equ	0xFF4
  1205                           prodl	equ	0xFF3
  1206                           intcon	equ	0xFF2
  1207                           postinc0	equ	0xFEE
  1208                           wreg	equ	0xFE8
  1209                           indf1	equ	0xFE7
  1210                           fsr1h	equ	0xFE2
  1211                           fsr1l	equ	0xFE1
  1212                           indf2	equ	0xFDF
  1213                           postinc2	equ	0xFDE
  1214                           postdec2	equ	0xFDD
  1215                           plusw2	equ	0xFDB
  1216                           fsr2h	equ	0xFDA
  1217                           fsr2l	equ	0xFD9
  1218                           status	equ	0xFD8
  1219                           
  1220                           ; 0 bytes @ 0x51
  1221 ;;
  1222 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1223 ;;
  1224 ;; *************** function _main *****************
  1225 ;; Defined at:
  1226 ;;		line 190 in file "../main.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;		None
  1229 ;; Auto vars:     Size  Location     Type
  1230 ;;		None
  1231 ;; Return value:  Size  Location     Type
  1232 ;;		None               void
  1233 ;; Registers used:
  1234 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : F/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1240 ;;      Params:         0       0       0       0       0       0       0
  1241 ;;      Locals:         0       0       0       0       0       0       0
  1242 ;;      Temps:          0       0       0       0       0       0       0
  1243 ;;      Totals:         0       0       0       0       0       0       0
  1244 ;;Total ram usage:        0 bytes
  1245 ;; Hardware stack levels required when called:   10
  1246 ;; This function calls:
  1247 ;;		_init
  1248 ;;		_vscp_check_pstorage
  1249 ;;		_init_app_eeprom
  1250 ;;		_init_app_ram
  1251 ;;		_vscp_init
  1252 ;;		_Busy_eep
  1253 ;;		_Write_b_eep
  1254 ;;		_vscp_getEvent
  1255 ;;		_vscp_goActiveState
  1256 ;;		_vscp_handleProbeState
  1257 ;;		_vscp_handleProtocolEvent
  1258 ;;		_doDM
  1259 ;;		_vscp_error
  1260 ;;		_vscp_doOneSecondWork
  1261 ;;		_doApplicationOneSecondWork
  1262 ;;		_doWork
  1263 ;; This function is called by:
  1264 ;;		Startup code after reset
  1265 ;; This function uses a non-reentrant model
  1266 ;;
  1267                           
  1268                           	psect	text0
  1269  0032F8                     __ptext0:
  1270                           	opt stack 0
  1271  0032F8                     _main:
  1272                           	opt stack 21
  1273                           
  1274                           ;main.c: 191: init();
  1275                           
  1276                           ;incstack = 0
  1277                           ;incstack = 0
  1278  0032F8  ECAF  F01C         	call	_init	;wreg free
  1279                           
  1280                           ;main.c: 195: if ( !vscp_check_pstorage() ) {
  1281  0032FC  ECCA  F01D         	call	_vscp_check_pstorage	;wreg free
  1282  003300  0900               	iorlw	0
  1283  003302  E104               	bnz	l9785
  1284                           
  1285                           ;main.c: 198: init_app_eeprom();
  1286  003304  EC7F  F00A         	call	_init_app_eeprom	;wreg free
  1287                           
  1288                           ;main.c: 199: init_app_ram();
  1289  003308  EC85  F018         	call	_init_app_ram	;wreg free
  1290  00330C                     l9785:
  1291                           
  1292                           ;main.c: 202: }
  1293                           ;main.c: 204: vscp_init();
  1294  00330C  EC6E  F01C         	call	_vscp_init	;wreg free
  1295  003310                     l151:
  1296                           
  1297                           ; BSR set to: 0
  1298  003310  0004               	clrwdt		;# 
  1299                           
  1300                           ;main.c: 210: if ( ( vscp_initbtncnt > 250 ) &&
  1301                           ;main.c: 211: ( 0x01 != vscp_node_state ) ) {
  1302  003312  0EFA               	movlw	250
  1303  003314  0100               	movlb	0	; () banked
  1304  003316  658F               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1305  003318  D00E               	goto	l9799
  1306                           
  1307                           ; BSR set to: 0
  1308  00331A  0592               	decf	_vscp_node_state& (0+255),w,b
  1309  00331C  E00C               	bz	l9799
  1310                           
  1311                           ; BSR set to: 0
  1312                           ;main.c: 214: vscp_nickname = 0xff;
  1313  00331E  6991               	setf	_vscp_nickname& (0+255),b
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;main.c: 215: (Busy_eep(), Write_b_eep(0x01,0xff));
  1317  003320  ECE9  F01E         	call	_Busy_eep	;wreg free
  1318  003324  6A09               	clrf	?_Write_b_eep+1,c
  1319  003326  0E01               	movlw	1
  1320  003328  6E08               	movwf	?_Write_b_eep,c
  1321  00332A  0EFF               	movlw	255
  1322  00332C  680A               	setf	?_Write_b_eep+2,c
  1323  00332E  ECCE  F01C         	call	_Write_b_eep	;wreg free
  1324                           
  1325                           ;main.c: 216: vscp_init();
  1326  003332  EC6E  F01C         	call	_vscp_init	;wreg free
  1327  003336                     l9799:
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;main.c: 218: }
  1331                           ;main.c: 221: vscp_imsg.flags = 0;
  1332  003336  6B96               	clrf	_vscp_imsg& (0+255),b
  1333                           
  1334                           ; BSR set to: 0
  1335                           ;main.c: 222: vscp_getEvent();
  1336  003338  EC43  F01D         	call	_vscp_getEvent	;wreg free
  1337                           
  1338                           ;main.c: 224: switch ( vscp_node_state ) {
  1339  00333C  D01C               	goto	l9823
  1340  00333E                     l9803:
  1341                           
  1342                           ; BSR set to: 0
  1343                           ;main.c: 229: if (0xff == vscp_nickname) {
  1344  00333E  2991               	incf	_vscp_nickname& (0+255),w,b
  1345  003340  E103               	bnz	l9807
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;main.c: 231: vscp_node_state = 0x01;
  1349  003342  0E01               	movlw	1
  1350  003344  6F92               	movwf	_vscp_node_state& (0+255),b
  1351                           
  1352                           ;main.c: 232: } else {
  1353  003346  D023               	goto	l9825
  1354  003348                     l9807:
  1355                           
  1356                           ; BSR set to: 0
  1357                           ;main.c: 234: vscp_node_state = 0x03;
  1358  003348  0E03               	movlw	3
  1359  00334A  6F92               	movwf	_vscp_node_state& (0+255),b
  1360  00334C                     l9809:
  1361                           
  1362                           ; BSR set to: 0
  1363                           ;main.c: 235: vscp_goActiveState();
  1364  00334C  EC0E  F01E         	call	_vscp_goActiveState	;wreg free
  1365  003350  D01E               	goto	l9825
  1366  003352                     l9811:
  1367                           
  1368                           ; BSR set to: 0
  1369                           ;main.c: 240: vscp_handleProbeState();
  1370  003352  ECED  F019         	call	_vscp_handleProbeState	;wreg free
  1371                           
  1372                           ;main.c: 241: break;
  1373  003356  D01B               	goto	l9825
  1374  003358                     l160:
  1375                           
  1376                           ; BSR set to: 0
  1377                           ;main.c: 250: if (vscp_imsg.flags & 0x80) {
  1378  003358  AF96               	btfss	_vscp_imsg& (0+255),7,b
  1379  00335A  D019               	goto	l9825
  1380                           
  1381                           ; BSR set to: 0
  1382                           ;main.c: 252: if ( 0 == vscp_imsg.vscp_class ) {
  1383  00335C  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  1384  00335E  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1385  003360  B4D8               	btfsc	status,2,c
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;main.c: 255: vscp_handleProtocolEvent();
  1389  003362  EC73  F007         	call	_vscp_handleProtocolEvent	;wreg free
  1390                           
  1391                           ;main.c: 257: }
  1392                           ;main.c: 259: doDM();
  1393  003366  EC1C  F012         	call	_doDM	;wreg free
  1394  00336A  D011               	goto	l9825
  1395  00336C                     l9819:
  1396                           
  1397                           ; BSR set to: 0
  1398                           ;main.c: 265: vscp_error();
  1399  00336C  ECEC  F01E         	call	_vscp_error	;wreg free
  1400                           
  1401                           ;main.c: 266: break;
  1402  003370  D00E               	goto	l9825
  1403  003372                     l164:
  1404                           
  1405                           ; BSR set to: 0
  1406                           ;main.c: 269: vscp_node_state = 0x00;
  1407  003372  6B92               	clrf	_vscp_node_state& (0+255),b
  1408                           
  1409                           ;main.c: 270: break;
  1410  003374  D00C               	goto	l9825
  1411  003376                     l9823:
  1412  003376  0100               	movlb	0	; () banked
  1413  003378  5192               	movf	_vscp_node_state& (0+255),w,b
  1414                           
  1415                           ; Switch size 1, requested type "space"
  1416                           ; Number of cases is 5, Range of values is 0 to 4
  1417                           ; switch strategies available:
  1418                           ; Name         Instructions Cycles
  1419                           ; simple_byte           16     9 (average)
  1420                           ;	Chosen strategy is simple_byte
  1421  00337A  E0E1               	bz	l9803
  1422  00337C  0A01               	xorlw	1	; case 1
  1423  00337E  E0E9               	bz	l9811
  1424  003380  0A03               	xorlw	3	; case 2
  1425  003382  E0E4               	bz	l9809
  1426  003384  0A01               	xorlw	1	; case 3
  1427  003386  E0E8               	bz	l160
  1428  003388  0A07               	xorlw	7	; case 4
  1429  00338A  E0F0               	bz	l9819
  1430  00338C  D7F2               	goto	l164
  1431  00338E                     l9825:
  1432                           
  1433                           ;main.c: 275: if ( measurement_clock > 1000 ) {
  1434  00338E  0EE9               	movlw	233
  1435  003390  0100               	movlb	0	; () banked
  1436  003392  5D80               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1437  003394  0E03               	movlw	3
  1438  003396  5981               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1439  003398  0E00               	movlw	0
  1440  00339A  5982               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1441  00339C  0E00               	movlw	0
  1442  00339E  5983               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1443  0033A0  E30B               	bnc	l9835
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;main.c: 277: measurement_clock = 0;
  1447  0033A2  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
  1448  0033A4  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1449  0033A6  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1450  0033A8  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;main.c: 280: vscp_doOneSecondWork();
  1454  0033AA  EC47  F01C         	call	_vscp_doOneSecondWork	;wreg free
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;main.c: 284: if ( 0x03 == vscp_node_state ) {
  1458  0033AE  5192               	movf	_vscp_node_state& (0+255),w,b
  1459  0033B0  0A03               	xorlw	3
  1460  0033B2  B4D8               	btfsc	status,2,c
  1461                           
  1462                           ; BSR set to: 0
  1463                           ;main.c: 287: doApplicationOneSecondWork();
  1464  0033B4  EC7E  F00E         	call	_doApplicationOneSecondWork	;wreg free
  1465  0033B8                     l9835:
  1466                           
  1467                           ; BSR set to: 0
  1468                           ;main.c: 289: }
  1469                           ;main.c: 291: }
  1470                           ;main.c: 294: if ( seconds > 59 ) {
  1471  0033B8  0E3B               	movlw	59
  1472  0033BA  658B               	cpfsgt	_seconds& (0+255),b
  1473  0033BC  D00B               	goto	l9851
  1474                           
  1475                           ; BSR set to: 0
  1476                           ;main.c: 296: seconds = 0;
  1477  0033BE  6B8B               	clrf	_seconds& (0+255),b
  1478                           
  1479                           ; BSR set to: 0
  1480                           ;main.c: 297: minutes++;
  1481  0033C0  2B89               	incf	_minutes& (0+255),f,b
  1482                           
  1483                           ; BSR set to: 0
  1484                           ;main.c: 299: if ( minutes > 59 ) {
  1485  0033C2  0E3B               	movlw	59
  1486  0033C4  6589               	cpfsgt	_minutes& (0+255),b
  1487  0033C6  D002               	goto	l9847
  1488                           
  1489                           ; BSR set to: 0
  1490                           ;main.c: 300: minutes = 0;
  1491  0033C8  6B89               	clrf	_minutes& (0+255),b
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;main.c: 301: hours++;
  1495  0033CA  2B88               	incf	_hours& (0+255),f,b
  1496  0033CC                     l9847:
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;main.c: 302: }
  1500                           ;main.c: 304: if ( hours > 23 ) hours = 0;
  1501  0033CC  0E17               	movlw	23
  1502  0033CE  6588               	cpfsgt	_hours& (0+255),b
  1503  0033D0  D001               	goto	l9851
  1504                           
  1505                           ; BSR set to: 0
  1506  0033D2  6B88               	clrf	_hours& (0+255),b
  1507  0033D4                     l9851:
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;main.c: 306: }
  1511                           ;main.c: 308: doWork();
  1512  0033D4  ECEE  F01E         	call	_doWork	;wreg free
  1513  0033D8  D79B               	goto	l151
  1514  0033DA                     __end_of_main:
  1515                           	opt stack 0
  1516                           tblptru	equ	0xFF8
  1517                           tblptrh	equ	0xFF7
  1518                           tblptrl	equ	0xFF6
  1519                           tablat	equ	0xFF5
  1520                           prodh	equ	0xFF4
  1521                           prodl	equ	0xFF3
  1522                           intcon	equ	0xFF2
  1523                           postinc0	equ	0xFEE
  1524                           wreg	equ	0xFE8
  1525                           indf1	equ	0xFE7
  1526                           fsr1h	equ	0xFE2
  1527                           fsr1l	equ	0xFE1
  1528                           indf2	equ	0xFDF
  1529                           postinc2	equ	0xFDE
  1530                           postdec2	equ	0xFDD
  1531                           plusw2	equ	0xFDB
  1532                           fsr2h	equ	0xFDA
  1533                           fsr2l	equ	0xFD9
  1534                           status	equ	0xFD8
  1535                           
  1536 ;; *************** function _doWork *****************
  1537 ;; Defined at:
  1538 ;;		line 885 in file "../main.c"
  1539 ;; Parameters:    Size  Location     Type
  1540 ;;		None
  1541 ;; Auto vars:     Size  Location     Type
  1542 ;;		None
  1543 ;; Return value:  Size  Location     Type
  1544 ;;		None               void
  1545 ;; Registers used:
  1546 ;;		wreg, status,2, status,0
  1547 ;; Tracked objects:
  1548 ;;		On entry : F/0
  1549 ;;		On exit  : F/0
  1550 ;;		Unchanged: F/0
  1551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1552 ;;      Params:         0       0       0       0       0       0       0
  1553 ;;      Locals:         0       0       0       0       0       0       0
  1554 ;;      Temps:          0       0       0       0       0       0       0
  1555 ;;      Totals:         0       0       0       0       0       0       0
  1556 ;;Total ram usage:        0 bytes
  1557 ;; Hardware stack levels used:    1
  1558 ;; Hardware stack levels required when called:    2
  1559 ;; This function calls:
  1560 ;;		Nothing
  1561 ;; This function is called by:
  1562 ;;		_main
  1563 ;; This function uses a non-reentrant model
  1564 ;;
  1565                           
  1566                           	psect	text1
  1567  003DDC                     __ptext1:
  1568                           	opt stack 0
  1569  003DDC                     _doWork:
  1570                           	opt stack 28
  1571                           
  1572                           ; BSR set to: 0
  1573                           
  1574                           ; BSR set to: 0
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;incstack = 0
  1578                           ;incstack = 0
  1579  003DDC  0012               	return	
  1580  003DDE                     __end_of_doWork:
  1581                           	opt stack 0
  1582                           tblptru	equ	0xFF8
  1583                           tblptrh	equ	0xFF7
  1584                           tblptrl	equ	0xFF6
  1585                           tablat	equ	0xFF5
  1586                           prodh	equ	0xFF4
  1587                           prodl	equ	0xFF3
  1588                           intcon	equ	0xFF2
  1589                           postinc0	equ	0xFEE
  1590                           wreg	equ	0xFE8
  1591                           indf1	equ	0xFE7
  1592                           fsr1h	equ	0xFE2
  1593                           fsr1l	equ	0xFE1
  1594                           indf2	equ	0xFDF
  1595                           postinc2	equ	0xFDE
  1596                           postdec2	equ	0xFDD
  1597                           plusw2	equ	0xFDB
  1598                           fsr2h	equ	0xFDA
  1599                           fsr2l	equ	0xFD9
  1600                           status	equ	0xFD8
  1601                           
  1602 ;; *************** function _doApplicationOneSecondWork *****************
  1603 ;; Defined at:
  1604 ;;		line 590 in file "../main.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;		None
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;  i               1   32[BANK0 ] unsigned char 
  1609 ;;  ctrlreg         1   31[BANK0 ] unsigned char 
  1610 ;;  bOn             1   30[BANK0 ] enum E15660
  1611 ;; Return value:  Size  Location     Type
  1612 ;;		None               void
  1613 ;; Registers used:
  1614 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1615 ;; Tracked objects:
  1616 ;;		On entry : F/0
  1617 ;;		On exit  : F/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1620 ;;      Params:         0       0       0       0       0       0       0
  1621 ;;      Locals:         0       3       0       0       0       0       0
  1622 ;;      Temps:          0       3       0       0       0       0       0
  1623 ;;      Totals:         0       6       0       0       0       0       0
  1624 ;;Total ram usage:        6 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    8
  1627 ;; This function calls:
  1628 ;;		_Read_b_eep
  1629 ;;		_doActionOff
  1630 ;;		_SendInformationEvent
  1631 ;; This function is called by:
  1632 ;;		_main
  1633 ;; This function uses a non-reentrant model
  1634 ;;
  1635                           
  1636                           	psect	text2
  1637  001CFC                     __ptext2:
  1638                           	opt stack 0
  1639  001CFC                     _doApplicationOneSecondWork:
  1640                           	opt stack 22
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;main.c: 592: uint8_t i;
  1644                           ;main.c: 593: uint8_t ctrlreg;
  1645                           ;main.c: 594: BOOL bOn = 0;
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;incstack = 0
  1649                           ;incstack = 0
  1650  001CFC  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1651                           
  1652                           ;main.c: 596: for ( i = 0; i < 8; i++ ) {
  1653  001CFE  6BD1               	clrf	doApplicationOneSecondWork@i& (0+255),b
  1654  001D00                     l10343:
  1655                           
  1656                           ; BSR set to: 0
  1657  001D00  0E07               	movlw	7
  1658  001D02  65D1               	cpfsgt	doApplicationOneSecondWork@i& (0+255),b
  1659  001D04  D001               	goto	l10347
  1660  001D06  D11F               	goto	l236
  1661  001D08                     l10347:
  1662                           
  1663                           ; BSR set to: 0
  1664                           ;main.c: 599: ctrlreg = Read_b_eep(0x43 + 10 + i);
  1665  001D08  D92D               	call	PL32	;call to abstracted procedure
  1666  001D0A  ECB5  F01E         	call	_Read_b_eep	;wreg free
  1667  001D0E  0100               	movlb	0	; () banked
  1668  001D10  6FD0               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  1669                           
  1670                           ; BSR set to: 0
  1671                           ;main.c: 602: if ( !( ctrlreg & 0x80 ) ) continue;
  1672  001D12  AFD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  1673  001D14  D116               	goto	l10431
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;main.c: 606: if ( relay_protection_timer[ i ] ) {
  1677                           
  1678                           ; BSR set to: 0
  1679  001D16  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1680  001D18  0D02               	mullw	2
  1681  001D1A  50F3               	movf	prodl,w,c
  1682  001D1C  0F60               	addlw	low _relay_protection_timer
  1683  001D1E  6ED9               	movwf	fsr2l,c
  1684  001D20  6ADA               	clrf	fsr2h,c
  1685  001D22  50DE               	movf	postinc2,w,c
  1686  001D24  10DD               	iorwf	postdec2,w,c
  1687  001D26  E028               	bz	l10365
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;main.c: 608: relay_protection_timer[ i ]--;
  1691  001D28  D916               	call	PL22	;call to abstracted procedure
  1692  001D2A  06DE               	decf	postinc2,f,c
  1693  001D2C  0E00               	movlw	0
  1694  001D2E  5ADD               	subwfb	postdec2,f,c
  1695                           
  1696                           ;main.c: 611: if ( !relay_protection_timer[ i ] &&
  1697                           ;main.c: 612: ( Read_b_eep(0x43 + 10 + i) &
  1698                           ;main.c: 613: 0x04 ) ) {
  1699  001D30  D912               	call	PL22	;call to abstracted procedure
  1700  001D32  50DE               	movf	postinc2,w,c
  1701  001D34  10DD               	iorwf	postdec2,w,c
  1702  001D36  E13C               	bnz	l10367
  1703                           
  1704                           ; BSR set to: 0
  1705  001D38  D915               	call	PL32	;call to abstracted procedure
  1706  001D3A  ECB5  F01E         	call	_Read_b_eep	;wreg free
  1707  001D3E  0100               	movlb	0	; () banked
  1708  001D40  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1709  001D42  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1710  001D44  D035               	goto	l10367
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;main.c: 616: doActionOff( 0, (1 << i) );
  1714  001D46  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1715  001D4A  0E01               	movlw	1
  1716  001D4C  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1717  001D4E  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1718  001D50  D002               	goto	u12344
  1719  001D52                     u12345:
  1720  001D52  90D8               	bcf	status,0,c
  1721  001D54  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1722  001D56                     u12344:
  1723  001D56  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1724  001D58  D7FC               	goto	u12345
  1725  001D5A  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1726  001D5C  6E51               	movwf	?_doActionOff,c
  1727  001D5E  0E00               	movlw	0
  1728  001D60  EC08  F019         	call	_doActionOff
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;main.c: 619: if ( ctrlreg & 0x02 ) {
  1732  001D64  A3D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  1733  001D66  D024               	goto	l10367
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;main.c: 620: SendInformationEvent( i, 1,
  1737                           ;main.c: 621: 2 );
  1738  001D68  0E01               	movlw	1
  1739  001D6A  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1740  001D6C  0E02               	movlw	2
  1741  001D6E  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1742  001D70  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1743  001D72  EC11  F01C         	call	_SendInformationEvent
  1744  001D76  D01C               	goto	l10367
  1745  001D78                     l10365:
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;main.c: 626: else {
  1749                           ;main.c: 628: relay_protection_timer[ i ] =
  1750                           ;main.c: 629: Read_b_eep(0x43 + 34 + i) * 256 +
  1751                           ;main.c: 630: Read_b_eep(0x43 + 35 + i);
  1752  001D78  0E65               	movlw	101
  1753  001D7A  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1754  001D7C  6E08               	movwf	?_Read_b_eep,c
  1755  001D7E  6A09               	clrf	?_Read_b_eep+1,c
  1756  001D80  0E00               	movlw	0
  1757  001D82  2209               	addwfc	?_Read_b_eep+1,f,c
  1758  001D84  ECB5  F01E         	call	_Read_b_eep	;wreg free
  1759  001D88  0100               	movlb	0	; () banked
  1760  001D8A  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1761  001D8C  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1762  001D8E  0E66               	movlw	102
  1763  001D90  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1764  001D92  6E08               	movwf	?_Read_b_eep,c
  1765  001D94  6A09               	clrf	?_Read_b_eep+1,c
  1766  001D96  0E00               	movlw	0
  1767  001D98  2209               	addwfc	?_Read_b_eep+1,f,c
  1768  001D9A  ECB5  F01E         	call	_Read_b_eep	;wreg free
  1769  001D9E  0100               	movlb	0	; () banked
  1770  001DA0  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1771  001DA2  0E00               	movlw	0
  1772  001DA4  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1773  001DA6  D8D7               	call	PL22	;call to abstracted procedure
  1774  001DA8  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1775  001DAC  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1776  001DB0                     l10367:
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;main.c: 631: }
  1780                           ;main.c: 634: if ( relay_pulse_flags & (1 << i) ) {
  1781  001DB0  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1782  001DB4  0E01               	movlw	1
  1783  001DB6  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1784  001DB8  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1785  001DBA  D002               	goto	u12364
  1786  001DBC                     u12365:
  1787  001DBC  90D8               	bcf	status,0,c
  1788  001DBE  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1789  001DC0                     u12364:
  1790  001DC0  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1791  001DC2  D7FC               	goto	u12365
  1792  001DC4  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1793  001DC6  158A               	andwf	_relay_pulse_flags& (0+255),w,b
  1794  001DC8  E101 D0BB          	bz	l10431
  1795                           
  1796                           ; BSR set to: 0
  1797                           ;main.c: 636: if ( relay_pulse_timer[ i ] ) {
  1798  001DCC  D8BD               	call	PL20	;call to abstracted procedure
  1799  001DCE  50DE               	movf	postinc2,w,c
  1800  001DD0  10DD               	iorwf	postdec2,w,c
  1801  001DD2  E101 D0A5          	bz	l10429
  1802                           
  1803                           ; BSR set to: 0
  1804                           ;main.c: 638: relay_pulse_timer[ i ]--;
  1805  001DD6  D8B8               	call	PL20	;call to abstracted procedure
  1806  001DD8  06DE               	decf	postinc2,f,c
  1807  001DDA  0E00               	movlw	0
  1808  001DDC  5ADD               	subwfb	postdec2,f,c
  1809                           
  1810                           ;main.c: 641: if ( !relay_pulse_timer[ i ] ) {
  1811  001DDE  D8B4               	call	PL20	;call to abstracted procedure
  1812  001DE0  50DE               	movf	postinc2,w,c
  1813  001DE2  10DD               	iorwf	postdec2,w,c
  1814  001DE4  E02E               	bz	l10405
  1815  001DE6  D0AD               	goto	l10431
  1816  001DE8                     l206:
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;main.c: 646: if ( LATBbits.LATB4 ) {
  1820  001DE8  A88A               	btfss	3978,4,c	;volatile
  1821  001DEA  D002               	goto	l207
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;main.c: 647: LATBbits.LATB4 = 0;
  1825  001DEC  988A               	bcf	3978,4,c	;volatile
  1826  001DEE  D025               	goto	L6
  1827  001DF0                     l207:
  1828                           
  1829                           ; BSR set to: 0
  1830                           ;main.c: 650: LATBbits.LATB4 = 1;
  1831  001DF0  888A               	bsf	3978,4,c	;volatile
  1832  001DF2                     l10377:
  1833                           
  1834                           ; BSR set to: 0
  1835                           ;main.c: 651: bOn = 1;
  1836  001DF2  0E01               	movlw	1
  1837  001DF4  6FCF               	movwf	doApplicationOneSecondWork@bOn& (0+255),b
  1838  001DF6  D033               	goto	l10407
  1839  001DF8                     l210:
  1840                           
  1841                           ; BSR set to: 0
  1842                           ;main.c: 656: if ( LATBbits.LATB1 ) {
  1843  001DF8  A28A               	btfss	3978,1,c	;volatile
  1844  001DFA  D002               	goto	l211
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;main.c: 657: LATBbits.LATB1 = 0;
  1848  001DFC  928A               	bcf	3978,1,c	;volatile
  1849  001DFE  D01D               	goto	L6
  1850  001E00                     l211:
  1851                           
  1852                           ; BSR set to: 0
  1853                           ;main.c: 660: LATBbits.LATB1 = 1;
  1854  001E00  828A               	bsf	3978,1,c	;volatile
  1855  001E02  D7F7               	goto	l10377
  1856  001E04                     l213:
  1857                           
  1858                           ; BSR set to: 0
  1859                           ;main.c: 666: if ( LATBbits.LATB0 ) {
  1860  001E04  A08A               	btfss	3978,0,c	;volatile
  1861  001E06  D002               	goto	l214
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;main.c: 667: LATBbits.LATB0 = 0;
  1865  001E08  908A               	bcf	3978,0,c	;volatile
  1866  001E0A  D017               	goto	L6
  1867  001E0C                     l214:
  1868                           
  1869                           ; BSR set to: 0
  1870                           ;main.c: 670: LATBbits.LATB0 = 1;
  1871  001E0C  808A               	bsf	3978,0,c	;volatile
  1872  001E0E  D7F1               	goto	l10377
  1873  001E10                     l216:
  1874                           
  1875                           ; BSR set to: 0
  1876                           ;main.c: 676: if ( LATCbits.LATC7 ) {
  1877  001E10  AE8B               	btfss	3979,7,c	;volatile
  1878  001E12  D002               	goto	l217
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;main.c: 677: LATCbits.LATC7 = 0;
  1882  001E14  9E8B               	bcf	3979,7,c	;volatile
  1883  001E16  D011               	goto	L6
  1884  001E18                     l217:
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;main.c: 680: LATCbits.LATC7 = 1;
  1888  001E18  8E8B               	bsf	3979,7,c	;volatile
  1889  001E1A  D7EB               	goto	l10377
  1890  001E1C                     l219:
  1891                           
  1892                           ; BSR set to: 0
  1893                           ;main.c: 686: if ( LATCbits.LATC6 ) {
  1894  001E1C  AC8B               	btfss	3979,6,c	;volatile
  1895  001E1E  D002               	goto	l220
  1896                           
  1897                           ; BSR set to: 0
  1898                           ;main.c: 687: LATCbits.LATC6 = 0;
  1899  001E20  9C8B               	bcf	3979,6,c	;volatile
  1900  001E22  D00B               	goto	L6
  1901  001E24                     l220:
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;main.c: 690: LATCbits.LATC6 = 1;
  1905  001E24  8C8B               	bsf	3979,6,c	;volatile
  1906  001E26  D7E5               	goto	l10377
  1907  001E28                     l222:
  1908                           
  1909                           ; BSR set to: 0
  1910                           ;main.c: 696: if ( LATCbits.LATC5 ) {
  1911  001E28  AA8B               	btfss	3979,5,c	;volatile
  1912  001E2A  D002               	goto	l223
  1913                           
  1914                           ; BSR set to: 0
  1915                           ;main.c: 697: LATCbits.LATC5 = 0;
  1916  001E2C  9A8B               	bcf	3979,5,c	;volatile
  1917  001E2E  D005               	goto	L6
  1918  001E30                     l223:
  1919                           
  1920                           ; BSR set to: 0
  1921                           ;main.c: 700: LATCbits.LATC5 = 1;
  1922  001E30  8A8B               	bsf	3979,5,c	;volatile
  1923  001E32  D7DF               	goto	l10377
  1924  001E34                     l225:
  1925                           
  1926                           ; BSR set to: 0
  1927                           ;main.c: 706: if ( LATCbits.LATC4 ) {
  1928  001E34  A88B               	btfss	3979,4,c	;volatile
  1929  001E36  D003               	goto	l226
  1930                           
  1931                           ; BSR set to: 0
  1932                           ;main.c: 707: LATCbits.LATC4 = 0;
  1933  001E38  988B               	bcf	3979,4,c	;volatile
  1934  001E3A                     L6:
  1935                           
  1936                           ;main.c: 708: bOn = 0;
  1937  001E3A  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1938                           
  1939                           ;main.c: 709: } else {
  1940  001E3C  D010               	goto	l10407
  1941  001E3E                     l226:
  1942                           
  1943                           ; BSR set to: 0
  1944                           ;main.c: 710: LATCbits.LATC4 = 1;
  1945  001E3E  888B               	bsf	3979,4,c	;volatile
  1946  001E40  D7D8               	goto	l10377
  1947  001E42                     l10405:
  1948                           
  1949                           ; BSR set to: 0
  1950  001E42  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1951                           
  1952                           ; Switch size 1, requested type "space"
  1953                           ; Number of cases is 7, Range of values is 0 to 6
  1954                           ; switch strategies available:
  1955                           ; Name         Instructions Cycles
  1956                           ; simple_byte           22    12 (average)
  1957                           ;	Chosen strategy is simple_byte
  1958  001E44  E0D1               	bz	l206
  1959  001E46  0A01               	xorlw	1	; case 1
  1960  001E48  E0D7               	bz	l210
  1961  001E4A  0A03               	xorlw	3	; case 2
  1962  001E4C  E0DB               	bz	l213
  1963  001E4E  0A01               	xorlw	1	; case 3
  1964  001E50  E0DF               	bz	l216
  1965  001E52  0A07               	xorlw	7	; case 4
  1966  001E54  E0E3               	bz	l219
  1967  001E56  0A01               	xorlw	1	; case 5
  1968  001E58  E0E7               	bz	l222
  1969  001E5A  0A03               	xorlw	3	; case 6
  1970  001E5C  E0EB               	bz	l225
  1971  001E5E                     l10407:
  1972                           
  1973                           ; BSR set to: 0
  1974                           ;main.c: 718: relay_pulse_timer[ i ] =
  1975                           ;main.c: 719: Read_b_eep(0x43 + 18 + 2*i) * 256 +
  1976                           ;main.c: 721: Read_b_eep(0x43 + 19 + 2*i);
  1977  001E5E  D889               	call	PL52	;call to abstracted procedure
  1978  001E60  ECB5  F01E         	call	_Read_b_eep	;wreg free
  1979  001E64  0100               	movlb	0	; () banked
  1980  001E66  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1981  001E68  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1982  001E6A  D88C               	call	PL54	;call to abstracted procedure
  1983  001E6C  ECB5  F01E         	call	_Read_b_eep	;wreg free
  1984  001E70  0100               	movlb	0	; () banked
  1985  001E72  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1986  001E74  0E00               	movlw	0
  1987  001E76  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1988  001E78  D867               	call	PL20	;call to abstracted procedure
  1989  001E7A  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1990  001E7E  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1991                           
  1992                           ; BSR set to: 0
  1993                           ;main.c: 724: if ( bOn ) {
  1994  001E82  51CF               	movf	doApplicationOneSecondWork@bOn& (0+255),w,b
  1995  001E84  E03A               	bz	l228
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;main.c: 727: if ( Read_b_eep(0x43 + 10 + i) & 0x04 ) {
  1999  001E86  D86E               	call	PL32	;call to abstracted procedure
  2000  001E88  ECB5  F01E         	call	_Read_b_eep	;wreg free
  2001  001E8C  0100               	movlb	0	; () banked
  2002  001E8E  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2003  001E90  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  2004  001E92  D020               	goto	l10415
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;main.c: 728: relay_protection_timer[ i ] =
  2008                           ;main.c: 729: Read_b_eep(0x43 + 34 + 2*i) * 256 +
  2009                           ;main.c: 730: Read_b_eep(0x43 + 35 + 2*i);
  2010  001E94  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2011  001E96  0D02               	mullw	2
  2012  001E98  0E65               	movlw	101
  2013  001E9A  24F3               	addwf	prodl,w,c
  2014  001E9C  6E08               	movwf	?_Read_b_eep,c
  2015  001E9E  0E00               	movlw	0
  2016  001EA0  20F4               	addwfc	prodh,w,c
  2017  001EA2  6E09               	movwf	?_Read_b_eep+1,c
  2018  001EA4  ECB5  F01E         	call	_Read_b_eep	;wreg free
  2019  001EA8  0100               	movlb	0	; () banked
  2020  001EAA  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2021  001EAC  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  2022  001EAE  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2023  001EB0  0D02               	mullw	2
  2024  001EB2  0E66               	movlw	102
  2025  001EB4  24F3               	addwf	prodl,w,c
  2026  001EB6  6E08               	movwf	?_Read_b_eep,c
  2027  001EB8  0E00               	movlw	0
  2028  001EBA  20F4               	addwfc	prodh,w,c
  2029  001EBC  6E09               	movwf	?_Read_b_eep+1,c
  2030  001EBE  ECB5  F01E         	call	_Read_b_eep	;wreg free
  2031  001EC2  0100               	movlb	0	; () banked
  2032  001EC4  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  2033  001EC6  0E00               	movlw	0
  2034  001EC8  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  2035  001ECA  D845               	call	PL22	;call to abstracted procedure
  2036  001ECC  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  2037  001ED0  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  2038  001ED4                     l10415:
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;main.c: 731: }
  2042                           ;main.c: 733: if ( ctrlreg & 0x08 ) {
  2043  001ED4  A7D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  2044  001ED6  D007               	goto	l10419
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;main.c: 734: SendInformationEvent( i, 20,
  2048                           ;main.c: 735: 3 );
  2049  001ED8  0E14               	movlw	20
  2050  001EDA  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2051  001EDC  0E03               	movlw	3
  2052  001EDE  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2053  001EE0  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2054  001EE2  EC11  F01C         	call	_SendInformationEvent
  2055  001EE6                     l10419:
  2056                           
  2057                           ; BSR set to: 0
  2058                           ;main.c: 736: }
  2059                           ;main.c: 738: if ( ctrlreg & 0x20 ) {
  2060  001EE6  ABD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  2061  001EE8  D02C               	goto	l10431
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;main.c: 739: SendInformationEvent( i, 20,
  2065                           ;main.c: 740: 25 );
  2066  001EEA  0E14               	movlw	20
  2067  001EEC  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2068  001EEE  0E19               	movlw	25
  2069  001EF0  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2070  001EF2  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2071  001EF4  EC11  F01C         	call	_SendInformationEvent
  2072  001EF8  D024               	goto	l10431
  2073  001EFA                     l228:
  2074                           
  2075                           ; BSR set to: 0
  2076                           ;main.c: 745: if ( ctrlreg & 0x10 ) {
  2077  001EFA  A9D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  2078  001EFC  D007               	goto	l10425
  2079                           
  2080                           ; BSR set to: 0
  2081                           ;main.c: 746: SendInformationEvent( i, 20,
  2082                           ;main.c: 747: 4 );
  2083  001EFE  0E14               	movlw	20
  2084  001F00  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2085  001F02  0E04               	movlw	4
  2086  001F04  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2087  001F06  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2088  001F08  EC11  F01C         	call	_SendInformationEvent
  2089  001F0C                     l10425:
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;main.c: 748: }
  2093                           ;main.c: 750: if (ctrlreg & 0x40) {
  2094  001F0C  ADD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),6,b
  2095  001F0E  D019               	goto	l10431
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;main.c: 751: SendInformationEvent( i, 20,
  2099                           ;main.c: 752: 24 );
  2100  001F10  0E14               	movlw	20
  2101  001F12  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2102  001F14  0E18               	movlw	24
  2103  001F16  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2104  001F18  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2105  001F1A  EC11  F01C         	call	_SendInformationEvent
  2106  001F1E  D011               	goto	l10431
  2107  001F20                     l10429:
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;main.c: 759: else {
  2111                           ;main.c: 761: relay_pulse_timer[ 0 ] =
  2112                           ;main.c: 762: Read_b_eep(0x43 + 18 + 2*i) * 256 +
  2113                           ;main.c: 763: Read_b_eep(0x43 + 19 + 2*i);
  2114  001F20  D831               	call	PL54	;call to abstracted procedure
  2115  001F22  ECB5  F01E         	call	_Read_b_eep	;wreg free
  2116  001F26  0100               	movlb	0	; () banked
  2117  001F28  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2118  001F2A  D823               	call	PL52	;call to abstracted procedure
  2119  001F2C  ECB5  F01E         	call	_Read_b_eep	;wreg free
  2120  001F30  0100               	movlb	0	; () banked
  2121  001F32  6FCE               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  2122  001F34  6BCD               	clrf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2123  001F36  51CC               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  2124  001F38  25CD               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2125  001F3A  6F70               	movwf	_relay_pulse_timer& (0+255),b
  2126  001F3C  0E00               	movlw	0
  2127  001F3E  21CE               	addwfc	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2128  001F40  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  2129  001F42                     l10431:
  2130                           
  2131                           ; BSR set to: 0
  2132  001F42  2BD1               	incf	doApplicationOneSecondWork@i& (0+255),f,b
  2133  001F44  D6DD               	goto	l10343
  2134  001F46                     l236:
  2135                           
  2136                           ; BSR set to: 0
  2137  001F46  0012               	return	
  2138  001F48                     __end_of_doApplicationOneSecondWork:
  2139                           	opt stack 0
  2140  001F48                     PL20:
  2141                           	opt stack 22
  2142  001F48  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2143  001F4A  0D02               	mullw	2
  2144  001F4C  50F3               	movf	prodl,w,c
  2145  001F4E  0F70               	addlw	low _relay_pulse_timer
  2146  001F50  6ED9               	movwf	fsr2l,c
  2147  001F52  6ADA               	clrf	fsr2h,c
  2148  001F54  0012               	return	
  2149  001F56                     __end_ofPL20:
  2150                           	opt stack 0
  2151  001F56                     PL22:
  2152                           	opt stack 22
  2153  001F56  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2154  001F58  0D02               	mullw	2
  2155  001F5A  50F3               	movf	prodl,w,c
  2156  001F5C  0F60               	addlw	low _relay_protection_timer
  2157  001F5E  6ED9               	movwf	fsr2l,c
  2158  001F60  6ADA               	clrf	fsr2h,c
  2159  001F62  0012               	return	
  2160  001F64                     __end_ofPL22:
  2161                           	opt stack 0
  2162  001F64                     PL32:
  2163                           	opt stack 22
  2164  001F64  0E4D               	movlw	77
  2165  001F66  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  2166  001F68  6E08               	movwf	?_Read_b_eep,c
  2167  001F6A  6A09               	clrf	?_Read_b_eep+1,c
  2168  001F6C  0E00               	movlw	0
  2169  001F6E  2209               	addwfc	?_Read_b_eep+1,f,c
  2170  001F70  0C00               	retlw	0
  2171  001F72                     __end_ofPL32:
  2172                           	opt stack 0
  2173  001F72                     PL52:
  2174                           	opt stack 22
  2175  001F72  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2176  001F74  0D02               	mullw	2
  2177  001F76  0E55               	movlw	85
  2178  001F78  24F3               	addwf	prodl,w,c
  2179  001F7A  6E08               	movwf	?_Read_b_eep,c
  2180  001F7C  0E00               	movlw	0
  2181  001F7E  20F4               	addwfc	prodh,w,c
  2182  001F80  6E09               	movwf	?_Read_b_eep+1,c
  2183  001F82  0012               	return	
  2184  001F84                     __end_ofPL52:
  2185                           	opt stack 0
  2186  001F84                     PL54:
  2187                           	opt stack 22
  2188  001F84  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2189  001F86  0D02               	mullw	2
  2190  001F88  0E56               	movlw	86
  2191  001F8A  24F3               	addwf	prodl,w,c
  2192  001F8C  6E08               	movwf	?_Read_b_eep,c
  2193  001F8E  0E00               	movlw	0
  2194  001F90  20F4               	addwfc	prodh,w,c
  2195  001F92  6E09               	movwf	?_Read_b_eep+1,c
  2196  001F94  0012               	return	
  2197  001F96                     __end_ofPL54:
  2198                           	opt stack 0
  2199                           tblptru	equ	0xFF8
  2200                           tblptrh	equ	0xFF7
  2201                           tblptrl	equ	0xFF6
  2202                           tablat	equ	0xFF5
  2203                           prodh	equ	0xFF4
  2204                           prodl	equ	0xFF3
  2205                           intcon	equ	0xFF2
  2206                           postinc0	equ	0xFEE
  2207                           wreg	equ	0xFE8
  2208                           indf1	equ	0xFE7
  2209                           fsr1h	equ	0xFE2
  2210                           fsr1l	equ	0xFE1
  2211                           indf2	equ	0xFDF
  2212                           postinc2	equ	0xFDE
  2213                           postdec2	equ	0xFDD
  2214                           plusw2	equ	0xFDB
  2215                           fsr2h	equ	0xFDA
  2216                           fsr2l	equ	0xFD9
  2217                           status	equ	0xFD8
  2218                           
  2219 ;; *************** function _vscp_doOneSecondWork *****************
  2220 ;; Defined at:
  2221 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;		None
  2224 ;; Auto vars:     Size  Location     Type
  2225 ;;		None
  2226 ;; Return value:  Size  Location     Type
  2227 ;;		None               void
  2228 ;; Registers used:
  2229 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2230 ;; Tracked objects:
  2231 ;;		On entry : F/0
  2232 ;;		On exit  : F/0
  2233 ;;		Unchanged: 0/0
  2234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2235 ;;      Params:         0       0       0       0       0       0       0
  2236 ;;      Locals:         0       0       0       0       0       0       0
  2237 ;;      Temps:          1       0       0       0       0       0       0
  2238 ;;      Totals:         1       0       0       0       0       0       0
  2239 ;;Total ram usage:        1 bytes
  2240 ;; Hardware stack levels used:    1
  2241 ;; Hardware stack levels required when called:    8
  2242 ;; This function calls:
  2243 ;;		_vscp_getZone
  2244 ;;		_vscp_getSubzone
  2245 ;;		_vscp_sendHeartBeat
  2246 ;; This function is called by:
  2247 ;;		_main
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text3
  2252  00388E                     __ptext3:
  2253                           	opt stack 0
  2254  00388E                     _vscp_doOneSecondWork:
  2255                           	opt stack 22
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;vscp_firmware.c: 526: ++vscp_second;
  2259                           
  2260                           ; BSR set to: 0
  2261                           ;incstack = 0
  2262                           ;incstack = 0
  2263  00388E  2B95               	incf	_vscp_second& (0+255),f,b
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  2267  003890  0E3B               	movlw	59
  2268  003892  6595               	cpfsgt	_vscp_second& (0+255),b
  2269  003894  D00D               	goto	l8345
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;vscp_firmware.c: 529: vscp_second = 0;
  2273  003896  6B95               	clrf	_vscp_second& (0+255),b
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;vscp_firmware.c: 530: vscp_minute++;
  2277  003898  2B90               	incf	_vscp_minute& (0+255),f,b
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  2281  00389A  5192               	movf	_vscp_node_state& (0+255),w,b
  2282  00389C  0A03               	xorlw	3
  2283  00389E  E108               	bnz	l8345
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  2287                           ;vscp_firmware.c: 535: vscp_getSubzone());
  2288  0038A0  ECC7  F01E         	call	_vscp_getSubzone	;wreg free
  2289  0038A4  0100               	movlb	0	; () banked
  2290  0038A6  6FC5               	movwf	?_vscp_sendHeartBeat& (0+255),b
  2291  0038A8  ECCC  F01E         	call	_vscp_getZone	;wreg free
  2292  0038AC  EC6C  F01D         	call	_vscp_sendHeartBeat
  2293  0038B0                     l8345:
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;vscp_firmware.c: 536: }
  2297                           ;vscp_firmware.c: 537: }
  2298                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  2299  0038B0  0E3B               	movlw	59
  2300  0038B2  6590               	cpfsgt	_vscp_minute& (0+255),b
  2301  0038B4  D002               	goto	l8351
  2302                           
  2303                           ; BSR set to: 0
  2304                           ;vscp_firmware.c: 540: vscp_minute = 0;
  2305  0038B6  6B90               	clrf	_vscp_minute& (0+255),b
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;vscp_firmware.c: 541: vscp_hour++;
  2309  0038B8  2B8E               	incf	_vscp_hour& (0+255),f,b
  2310  0038BA                     l8351:
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;vscp_firmware.c: 542: }
  2314                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  2315  0038BA  0E17               	movlw	23
  2316  0038BC  658E               	cpfsgt	_vscp_hour& (0+255),b
  2317  0038BE  D001               	goto	l8355
  2318                           
  2319                           ; BSR set to: 0
  2320  0038C0  6B8E               	clrf	_vscp_hour& (0+255),b
  2321  0038C2                     l8355:
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  2325  0038C2  5192               	movf	_vscp_node_state& (0+255),w,b
  2326  0038C4  0A03               	xorlw	3
  2327  0038C6  E109               	bnz	l1122
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  2331  0038C8  2B8D               	incf	_vscp_guid_reset& (0+255),f,b
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  2335  0038CA  C08D  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  2336  0038CE  0E0F               	movlw	15
  2337  0038D0  164D               	andwf	??_vscp_doOneSecondWork,f,c
  2338  0038D2  0E02               	movlw	2
  2339  0038D4  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  2340  0038D6  B0D8               	btfsc	status,0,c
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  2344  0038D8  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  2345  0038DA                     l1122:
  2346                           
  2347                           ; BSR set to: 0
  2348  0038DA  0012               	return	
  2349  0038DC                     __end_of_vscp_doOneSecondWork:
  2350                           	opt stack 0
  2351                           tblptru	equ	0xFF8
  2352                           tblptrh	equ	0xFF7
  2353                           tblptrl	equ	0xFF6
  2354                           tablat	equ	0xFF5
  2355                           prodh	equ	0xFF4
  2356                           prodl	equ	0xFF3
  2357                           intcon	equ	0xFF2
  2358                           postinc0	equ	0xFEE
  2359                           wreg	equ	0xFE8
  2360                           indf1	equ	0xFE7
  2361                           fsr1h	equ	0xFE2
  2362                           fsr1l	equ	0xFE1
  2363                           indf2	equ	0xFDF
  2364                           postinc2	equ	0xFDE
  2365                           postdec2	equ	0xFDD
  2366                           plusw2	equ	0xFDB
  2367                           fsr2h	equ	0xFDA
  2368                           fsr2l	equ	0xFD9
  2369                           status	equ	0xFD8
  2370                           
  2371 ;; *************** function _vscp_sendHeartBeat *****************
  2372 ;; Defined at:
  2373 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  2374 ;; Parameters:    Size  Location     Type
  2375 ;;  zone            1    wreg     unsigned char 
  2376 ;;  subzone         1   20[BANK0 ] unsigned char 
  2377 ;; Auto vars:     Size  Location     Type
  2378 ;;  zone            1   75[COMRAM] unsigned char 
  2379 ;; Return value:  Size  Location     Type
  2380 ;;		None               void
  2381 ;; Registers used:
  2382 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2383 ;; Tracked objects:
  2384 ;;		On entry : 0/0
  2385 ;;		On exit  : F/0
  2386 ;;		Unchanged: 0/0
  2387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2388 ;;      Params:         0       1       0       0       0       0       0
  2389 ;;      Locals:         1       0       0       0       0       0       0
  2390 ;;      Temps:          0       0       0       0       0       0       0
  2391 ;;      Totals:         1       1       0       0       0       0       0
  2392 ;;Total ram usage:        2 bytes
  2393 ;; Hardware stack levels used:    1
  2394 ;; Hardware stack levels required when called:    7
  2395 ;; This function calls:
  2396 ;;		_vscp_sendEvent
  2397 ;; This function is called by:
  2398 ;;		_vscp_doOneSecondWork
  2399 ;; This function uses a non-reentrant model
  2400 ;;
  2401                           
  2402                           	psect	text4
  2403  003AD8                     __ptext4:
  2404                           	opt stack 0
  2405  003AD8                     _vscp_sendHeartBeat:
  2406                           	opt stack 22
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;incstack = 0
  2410                           ;incstack = 0
  2411                           ;vscp_sendHeartBeat@zone stored from wreg
  2412  003AD8  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  2413                           
  2414                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  2415  003ADC  0E83               	movlw	131
  2416  003ADE  0100               	movlb	0	; () banked
  2417  003AE0  6FA4               	movwf	_vscp_omsg& (0+255),b
  2418                           
  2419                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  2420  003AE2  0E07               	movlw	7
  2421  003AE4  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  2422                           
  2423                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  2424  003AE6  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  2425  003AE8  0E14               	movlw	20
  2426  003AEA  6FA6               	movwf	(_vscp_omsg+2)& (0+255),b
  2427                           
  2428                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  2429  003AEC  0E09               	movlw	9
  2430  003AEE  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  2434  003AF0  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  2438  003AF2  C04C  F0AA         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  2439                           
  2440                           ; BSR set to: 0
  2441                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  2442  003AF6  C0C5  F0AB         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  2443                           
  2444                           ; BSR set to: 0
  2445                           ;vscp_firmware.c: 388: vscp_sendEvent();
  2446  003AFA  EFA5  F01D         	goto	_vscp_sendEvent	;wreg free
  2447  003AFE                     __end_of_vscp_sendHeartBeat:
  2448                           	opt stack 0
  2449                           tblptru	equ	0xFF8
  2450                           tblptrh	equ	0xFF7
  2451                           tblptrl	equ	0xFF6
  2452                           tablat	equ	0xFF5
  2453                           prodh	equ	0xFF4
  2454                           prodl	equ	0xFF3
  2455                           intcon	equ	0xFF2
  2456                           postinc0	equ	0xFEE
  2457                           wreg	equ	0xFE8
  2458                           indf1	equ	0xFE7
  2459                           fsr1h	equ	0xFE2
  2460                           fsr1l	equ	0xFE1
  2461                           indf2	equ	0xFDF
  2462                           postinc2	equ	0xFDE
  2463                           postdec2	equ	0xFDD
  2464                           plusw2	equ	0xFDB
  2465                           fsr2h	equ	0xFDA
  2466                           fsr2l	equ	0xFD9
  2467                           status	equ	0xFD8
  2468                           
  2469 ;; *************** function _vscp_getSubzone *****************
  2470 ;; Defined at:
  2471 ;;		line 874 in file "../main.c"
  2472 ;; Parameters:    Size  Location     Type
  2473 ;;		None
  2474 ;; Auto vars:     Size  Location     Type
  2475 ;;		None
  2476 ;; Return value:  Size  Location     Type
  2477 ;;                  1    wreg      unsigned char 
  2478 ;; Registers used:
  2479 ;;		wreg, status,2, cstack
  2480 ;; Tracked objects:
  2481 ;;		On entry : F/0
  2482 ;;		On exit  : 0/0
  2483 ;;		Unchanged: 0/0
  2484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2485 ;;      Params:         0       0       0       0       0       0       0
  2486 ;;      Locals:         0       0       0       0       0       0       0
  2487 ;;      Temps:          0       0       0       0       0       0       0
  2488 ;;      Totals:         0       0       0       0       0       0       0
  2489 ;;Total ram usage:        0 bytes
  2490 ;; Hardware stack levels used:    1
  2491 ;; Hardware stack levels required when called:    3
  2492 ;; This function calls:
  2493 ;;		_Read_b_eep
  2494 ;; This function is called by:
  2495 ;;		_vscp_doOneSecondWork
  2496 ;; This function uses a non-reentrant model
  2497 ;;
  2498                           
  2499                           	psect	text5
  2500  003D8E                     __ptext5:
  2501                           	opt stack 0
  2502  003D8E                     _vscp_getSubzone:
  2503                           	opt stack 26
  2504                           
  2505                           ; BSR set to: 0
  2506                           ;main.c: 875: return Read_b_eep(0x43 + 1);
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;incstack = 0
  2510                           ;incstack = 0
  2511  003D8E  6A09               	clrf	?_Read_b_eep+1,c
  2512  003D90  0E44               	movlw	68
  2513  003D92  6E08               	movwf	?_Read_b_eep,c
  2514  003D94  EFB5  F01E         	goto	_Read_b_eep	;wreg free
  2515  003D98                     __end_of_vscp_getSubzone:
  2516                           	opt stack 0
  2517                           tblptru	equ	0xFF8
  2518                           tblptrh	equ	0xFF7
  2519                           tblptrl	equ	0xFF6
  2520                           tablat	equ	0xFF5
  2521                           prodh	equ	0xFF4
  2522                           prodl	equ	0xFF3
  2523                           intcon	equ	0xFF2
  2524                           postinc0	equ	0xFEE
  2525                           wreg	equ	0xFE8
  2526                           indf1	equ	0xFE7
  2527                           fsr1h	equ	0xFE2
  2528                           fsr1l	equ	0xFE1
  2529                           indf2	equ	0xFDF
  2530                           postinc2	equ	0xFDE
  2531                           postdec2	equ	0xFDD
  2532                           plusw2	equ	0xFDB
  2533                           fsr2h	equ	0xFDA
  2534                           fsr2l	equ	0xFD9
  2535                           status	equ	0xFD8
  2536                           
  2537 ;; *************** function _vscp_getZone *****************
  2538 ;; Defined at:
  2539 ;;		line 865 in file "../main.c"
  2540 ;; Parameters:    Size  Location     Type
  2541 ;;		None
  2542 ;; Auto vars:     Size  Location     Type
  2543 ;;		None
  2544 ;; Return value:  Size  Location     Type
  2545 ;;                  1    wreg      unsigned char 
  2546 ;; Registers used:
  2547 ;;		wreg, status,2, cstack
  2548 ;; Tracked objects:
  2549 ;;		On entry : F/0
  2550 ;;		On exit  : 0/0
  2551 ;;		Unchanged: 0/0
  2552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2553 ;;      Params:         0       0       0       0       0       0       0
  2554 ;;      Locals:         0       0       0       0       0       0       0
  2555 ;;      Temps:          0       0       0       0       0       0       0
  2556 ;;      Totals:         0       0       0       0       0       0       0
  2557 ;;Total ram usage:        0 bytes
  2558 ;; Hardware stack levels used:    1
  2559 ;; Hardware stack levels required when called:    3
  2560 ;; This function calls:
  2561 ;;		_Read_b_eep
  2562 ;; This function is called by:
  2563 ;;		_vscp_doOneSecondWork
  2564 ;; This function uses a non-reentrant model
  2565 ;;
  2566                           
  2567                           	psect	text6
  2568  003D98                     __ptext6:
  2569                           	opt stack 0
  2570  003D98                     _vscp_getZone:
  2571                           	opt stack 26
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;main.c: 866: return Read_b_eep(0x43 + 0);
  2575                           
  2576                           ;incstack = 0
  2577                           ;incstack = 0
  2578  003D98  6A09               	clrf	?_Read_b_eep+1,c
  2579  003D9A  0E43               	movlw	67
  2580  003D9C  6E08               	movwf	?_Read_b_eep,c
  2581  003D9E  EFB5  F01E         	goto	_Read_b_eep	;wreg free
  2582  003DA2                     __end_of_vscp_getZone:
  2583                           	opt stack 0
  2584                           tblptru	equ	0xFF8
  2585                           tblptrh	equ	0xFF7
  2586                           tblptrl	equ	0xFF6
  2587                           tablat	equ	0xFF5
  2588                           prodh	equ	0xFF4
  2589                           prodl	equ	0xFF3
  2590                           intcon	equ	0xFF2
  2591                           postinc0	equ	0xFEE
  2592                           wreg	equ	0xFE8
  2593                           indf1	equ	0xFE7
  2594                           fsr1h	equ	0xFE2
  2595                           fsr1l	equ	0xFE1
  2596                           indf2	equ	0xFDF
  2597                           postinc2	equ	0xFDE
  2598                           postdec2	equ	0xFDD
  2599                           plusw2	equ	0xFDB
  2600                           fsr2h	equ	0xFDA
  2601                           fsr2l	equ	0xFD9
  2602                           status	equ	0xFD8
  2603                           
  2604 ;; *************** function _vscp_error *****************
  2605 ;; Defined at:
  2606 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;		None
  2609 ;; Auto vars:     Size  Location     Type
  2610 ;;		None
  2611 ;; Return value:  Size  Location     Type
  2612 ;;		None               void
  2613 ;; Registers used:
  2614 ;;		None
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2620 ;;      Params:         0       0       0       0       0       0       0
  2621 ;;      Locals:         0       0       0       0       0       0       0
  2622 ;;      Temps:          0       0       0       0       0       0       0
  2623 ;;      Totals:         0       0       0       0       0       0       0
  2624 ;;Total ram usage:        0 bytes
  2625 ;; Hardware stack levels used:    1
  2626 ;; Hardware stack levels required when called:    2
  2627 ;; This function calls:
  2628 ;;		Nothing
  2629 ;; This function is called by:
  2630 ;;		_main
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           	psect	text7
  2635  003DD8                     __ptext7:
  2636                           	opt stack 0
  2637  003DD8                     _vscp_error:
  2638                           	opt stack 28
  2639                           
  2640                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  2641                           
  2642                           ;incstack = 0
  2643                           ;incstack = 0
  2644  003DD8  6A56               	clrf	_vscp_initledfunc,c
  2645  003DDA  0012               	return	
  2646  003DDC                     __end_of_vscp_error:
  2647                           	opt stack 0
  2648                           tblptru	equ	0xFF8
  2649                           tblptrh	equ	0xFF7
  2650                           tblptrl	equ	0xFF6
  2651                           tablat	equ	0xFF5
  2652                           prodh	equ	0xFF4
  2653                           prodl	equ	0xFF3
  2654                           intcon	equ	0xFF2
  2655                           postinc0	equ	0xFEE
  2656                           wreg	equ	0xFE8
  2657                           indf1	equ	0xFE7
  2658                           fsr1h	equ	0xFE2
  2659                           fsr1l	equ	0xFE1
  2660                           indf2	equ	0xFDF
  2661                           postinc2	equ	0xFDE
  2662                           postdec2	equ	0xFDD
  2663                           plusw2	equ	0xFDB
  2664                           fsr2h	equ	0xFDA
  2665                           fsr2l	equ	0xFD9
  2666                           status	equ	0xFD8
  2667                           
  2668 ;; *************** function _doDM *****************
  2669 ;; Defined at:
  2670 ;;		line 1630 in file "../main.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;		None
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;  class_mask      2   33[BANK0 ] unsigned short 
  2675 ;;  class_filter    2   31[BANK0 ] unsigned short 
  2676 ;;  i               1   44[BANK0 ] unsigned char 
  2677 ;;  dmflags         1   43[BANK0 ] unsigned char 
  2678 ;;  type_mask       1   36[BANK0 ] unsigned char 
  2679 ;;  type_filter     1   35[BANK0 ] unsigned char 
  2680 ;; Return value:  Size  Location     Type
  2681 ;;		None               void
  2682 ;; Registers used:
  2683 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2684 ;; Tracked objects:
  2685 ;;		On entry : 0/0
  2686 ;;		On exit  : F/0
  2687 ;;		Unchanged: 0/0
  2688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2689 ;;      Params:         0       0       0       0       0       0       0
  2690 ;;      Locals:         0      14       0       0       0       0       0
  2691 ;;      Temps:          0       3       0       0       0       0       0
  2692 ;;      Totals:         0      17       0       0       0       0       0
  2693 ;;Total ram usage:       17 bytes
  2694 ;; Hardware stack levels used:    1
  2695 ;; Hardware stack levels required when called:    8
  2696 ;; This function calls:
  2697 ;;		_Read_b_eep
  2698 ;;		_doActionOff
  2699 ;;		_doActionOn
  2700 ;;		_doActionPulse
  2701 ;;		_doActionStatus
  2702 ;;		_doActionDisable
  2703 ;;		_doActionToggle
  2704 ;; This function is called by:
  2705 ;;		_main
  2706 ;; This function uses a non-reentrant model
  2707 ;;
  2708                           
  2709                           	psect	text8
  2710  002438                     __ptext8:
  2711                           	opt stack 0
  2712  002438                     _doDM:
  2713                           	opt stack 22
  2714                           
  2715                           ;main.c: 1631: unsigned char i;
  2716                           ;main.c: 1632: unsigned char dmflags;
  2717                           ;main.c: 1633: unsigned short class_filter;
  2718                           ;main.c: 1634: unsigned short class_mask;
  2719                           ;main.c: 1635: unsigned char type_filter;
  2720                           ;main.c: 1636: unsigned char type_mask;
  2721                           ;main.c: 1639: if ( 0 == vscp_imsg.vscp_class ) return;
  2722                           
  2723                           ;incstack = 0
  2724                           ;incstack = 0
  2725  002438  0100               	movlb	0	; () banked
  2726  00243A  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  2727  00243C  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  2728  00243E  E101 D0E8          	bz	l420
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;main.c: 1641: for (i = 0; i < 7; i++) {
  2732  002442  6BDD               	clrf	doDM@i& (0+255),b
  2733  002444                     l10291:
  2734                           
  2735                           ; BSR set to: 0
  2736                           ;main.c: 1644: dmflags = Read_b_eep(0x43 + 72 + 1 + (8 * i));
  2737  002444  D8E7               	call	PL2	;call to abstracted procedure
  2738  002446  0E8C               	movlw	140
  2739  002448  25CD               	addwf	??_doDM& (0+255),w,b
  2740  00244A  6E08               	movwf	?_Read_b_eep,c
  2741  00244C  0E00               	movlw	0
  2742  00244E  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2743  002450  6E09               	movwf	?_Read_b_eep+1,c
  2744  002452  ECB5  F01E         	call	_Read_b_eep	;wreg free
  2745  002456  0100               	movlb	0	; () banked
  2746  002458  6FDC               	movwf	doDM@dmflags& (0+255),b
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;main.c: 1647: if ( dmflags & 0x80 ) {
  2750  00245A  AFDC               	btfss	doDM@dmflags& (0+255),7,b
  2751  00245C  D0D5               	goto	l10337
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;main.c: 1650: if ( ( dmflags & 0x40 ) &&
  2755                           ;main.c: 1651: ( vscp_imsg.oaddr != Read_b_eep(0x43 + 72 + (8 * i)) ) ) {
  2756  00245E  ADDC               	btfss	doDM@dmflags& (0+255),6,b
  2757  002460  D018               	goto	l10301
  2758                           
  2759                           ; BSR set to: 0
  2760  002462  51DD               	movf	doDM@i& (0+255),w,b
  2761  002464  6FCD               	movwf	??_doDM& (0+255),b
  2762  002466  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2763  002468  90D8               	bcf	status,0,c
  2764  00246A  37CD               	rlcf	??_doDM& (0+255),f,b
  2765  00246C  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2766  00246E  90D8               	bcf	status,0,c
  2767  002470  37CD               	rlcf	??_doDM& (0+255),f,b
  2768  002472  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2769  002474  90D8               	bcf	status,0,c
  2770  002476  37CD               	rlcf	??_doDM& (0+255),f,b
  2771  002478  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2772  00247A  0E8B               	movlw	139
  2773  00247C  25CD               	addwf	??_doDM& (0+255),w,b
  2774  00247E  6E08               	movwf	?_Read_b_eep,c
  2775  002480  0E00               	movlw	0
  2776  002482  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2777  002484  6E09               	movwf	?_Read_b_eep+1,c
  2778  002486  ECB5  F01E         	call	_Read_b_eep	;wreg free
  2779  00248A  0100               	movlb	0	; () banked
  2780  00248C  199B               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  2781  00248E  E001 D0BB          	bnz	l10337
  2782  002492                     l10301:
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;main.c: 1653: }
  2786                           ;main.c: 1677: class_filter = ( dmflags & 0x01)*256 +
  2787                           ;main.c: 1678: Read_b_eep(0x43 + 72 + (8 * i) + 3);
  2788  002492  51DD               	movf	doDM@i& (0+255),w,b
  2789  002494  0D08               	mullw	8
  2790  002496  0E8E               	movlw	142
  2791  002498  24F3               	addwf	prodl,w,c
  2792  00249A  6E08               	movwf	?_Read_b_eep,c
  2793  00249C  0E00               	movlw	0
  2794  00249E  20F4               	addwfc	prodh,w,c
  2795  0024A0  6E09               	movwf	?_Read_b_eep+1,c
  2796  0024A2  ECB5  F01E         	call	_Read_b_eep	;wreg free
  2797  0024A6  0100               	movlb	0	; () banked
  2798  0024A8  6FCD               	movwf	??_doDM& (0+255),b
  2799  0024AA  51DC               	movf	doDM@dmflags& (0+255),w,b
  2800  0024AC  0B01               	andlw	1
  2801  0024AE  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2802  0024B0  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2803  0024B2  51CD               	movf	??_doDM& (0+255),w,b
  2804  0024B4  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2805  0024B6  6FD0               	movwf	doDM@class_filter& (0+255),b
  2806  0024B8  0E00               	movlw	0
  2807  0024BA  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2808  0024BC  6FD1               	movwf	(doDM@class_filter+1)& (0+255),b
  2809                           
  2810                           ;main.c: 1682: class_mask = ( dmflags & 0x02)*256 +
  2811                           ;main.c: 1683: Read_b_eep(0x43 + 72 + (8 * i) + 2);
  2812  0024BE  51DD               	movf	doDM@i& (0+255),w,b
  2813  0024C0  0D08               	mullw	8
  2814  0024C2  0E8D               	movlw	141
  2815  0024C4  24F3               	addwf	prodl,w,c
  2816  0024C6  6E08               	movwf	?_Read_b_eep,c
  2817  0024C8  0E00               	movlw	0
  2818  0024CA  20F4               	addwfc	prodh,w,c
  2819  0024CC  6E09               	movwf	?_Read_b_eep+1,c
  2820  0024CE  ECB5  F01E         	call	_Read_b_eep	;wreg free
  2821  0024D2  0100               	movlb	0	; () banked
  2822  0024D4  6FCD               	movwf	??_doDM& (0+255),b
  2823  0024D6  51DC               	movf	doDM@dmflags& (0+255),w,b
  2824  0024D8  0B02               	andlw	2
  2825  0024DA  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2826  0024DC  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2827  0024DE  51CD               	movf	??_doDM& (0+255),w,b
  2828  0024E0  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2829  0024E2  6FD2               	movwf	doDM@class_mask& (0+255),b
  2830  0024E4  0E00               	movlw	0
  2831  0024E6  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2832  0024E8  6FD3               	movwf	(doDM@class_mask+1)& (0+255),b
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;main.c: 1687: type_filter = Read_b_eep(0x43 + 72 + (8 * i) + 5);
  2836  0024EA  D894               	call	PL2	;call to abstracted procedure
  2837  0024EC  0E90               	movlw	144
  2838  0024EE  25CD               	addwf	??_doDM& (0+255),w,b
  2839  0024F0  6E08               	movwf	?_Read_b_eep,c
  2840  0024F2  0E00               	movlw	0
  2841  0024F4  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2842  0024F6  6E09               	movwf	?_Read_b_eep+1,c
  2843  0024F8  ECB5  F01E         	call	_Read_b_eep	;wreg free
  2844  0024FC  0100               	movlb	0	; () banked
  2845  0024FE  6FD4               	movwf	doDM@type_filter& (0+255),b
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;main.c: 1691: type_mask = Read_b_eep(0x43 + 72 + (8 * i) + 4);
  2849  002500  D889               	call	PL2	;call to abstracted procedure
  2850  002502  0E8F               	movlw	143
  2851  002504  25CD               	addwf	??_doDM& (0+255),w,b
  2852  002506  6E08               	movwf	?_Read_b_eep,c
  2853  002508  0E00               	movlw	0
  2854  00250A  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2855  00250C  6E09               	movwf	?_Read_b_eep+1,c
  2856  00250E  ECB5  F01E         	call	_Read_b_eep	;wreg free
  2857  002512  0100               	movlb	0	; () banked
  2858  002514  6FD5               	movwf	doDM@type_mask& (0+255),b
  2859                           
  2860                           ; BSR set to: 0
  2861                           ;main.c: 1696: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2862                           ;main.c: 1697: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2863  002516  EE20  F098         	lfsr	2,_vscp_imsg+2
  2864  00251A  CFDE F0CD          	movff	postinc2,??_doDM
  2865  00251E  CFDD F0CE          	movff	postdec2,??_doDM+1
  2866  002522  51D0               	movf	doDM@class_filter& (0+255),w,b
  2867  002524  1BCD               	xorwf	??_doDM& (0+255),f,b
  2868  002526  51D1               	movf	(doDM@class_filter+1)& (0+255),w,b
  2869  002528  1BCE               	xorwf	(??_doDM+1)& (0+255),f,b
  2870  00252A  51D2               	movf	doDM@class_mask& (0+255),w,b
  2871  00252C  17CD               	andwf	??_doDM& (0+255),f,b
  2872  00252E  51D3               	movf	(doDM@class_mask+1)& (0+255),w,b
  2873  002530  17CE               	andwf	(??_doDM+1)& (0+255),f,b
  2874  002532  51CE               	movf	(??_doDM+1)& (0+255),w,b
  2875  002534  11CD               	iorwf	??_doDM& (0+255),w,b
  2876  002536  E168               	bnz	l10337
  2877                           
  2878                           ; BSR set to: 0
  2879  002538  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  2880  00253A  19D4               	xorwf	doDM@type_filter& (0+255),w,b
  2881  00253C  15D5               	andwf	doDM@type_mask& (0+255),w,b
  2882  00253E  E04F               	bz	l10335
  2883  002540  D063               	goto	l10337
  2884  002542                     l10313:
  2885                           
  2886                           ;main.c: 1703: doActionOn( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2887  002542  0100               	movlb	0	; () banked
  2888  002544  D867               	call	PL2	;call to abstracted procedure
  2889  002546  D873               	call	PL16	;call to abstracted procedure
  2890  002548  ECB5  F01E         	call	_Read_b_eep	;wreg free
  2891  00254C  0100               	movlb	0	; () banked
  2892  00254E  6FD6               	movwf	_doDM$2152& (0+255),b
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;main.c: 1703: doActionOn( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2896  002550  C0D6  F051         	movff	_doDM$2152,?_doActionOn
  2897  002554  51DC               	movf	doDM@dmflags& (0+255),w,b
  2898  002556  ECCB  F00F         	call	_doActionOn
  2899                           
  2900                           ;main.c: 1704: break;
  2901  00255A  D056               	goto	l10337
  2902  00255C                     l10317:
  2903                           
  2904                           ;main.c: 1707: doActionOff( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2905  00255C  0100               	movlb	0	; () banked
  2906  00255E  D85A               	call	PL2	;call to abstracted procedure
  2907  002560  D866               	call	PL16	;call to abstracted procedure
  2908  002562  ECB5  F01E         	call	_Read_b_eep	;wreg free
  2909  002566  0100               	movlb	0	; () banked
  2910  002568  6FD7               	movwf	_doDM$2153& (0+255),b
  2911                           
  2912                           ; BSR set to: 0
  2913                           ;main.c: 1707: doActionOff( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2914  00256A  C0D7  F051         	movff	_doDM$2153,?_doActionOff
  2915  00256E  51DC               	movf	doDM@dmflags& (0+255),w,b
  2916  002570  EC08  F019         	call	_doActionOff
  2917                           
  2918                           ;main.c: 1708: break;
  2919  002574  D049               	goto	l10337
  2920  002576                     l10321:
  2921                           
  2922                           ;main.c: 1711: doActionPulse( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2923  002576  0100               	movlb	0	; () banked
  2924  002578  D84D               	call	PL2	;call to abstracted procedure
  2925  00257A  D859               	call	PL16	;call to abstracted procedure
  2926  00257C  ECB5  F01E         	call	_Read_b_eep	;wreg free
  2927  002580  0100               	movlb	0	; () banked
  2928  002582  6FD8               	movwf	_doDM$2154& (0+255),b
  2929                           
  2930                           ;main.c: 1711: doActionPulse( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2931  002584  C0D8  F00A         	movff	_doDM$2154,?_doActionPulse
  2932  002588  51DC               	movf	doDM@dmflags& (0+255),w,b
  2933  00258A  EC1E  F013         	call	_doActionPulse
  2934                           
  2935                           ;main.c: 1712: break;
  2936  00258E  D03C               	goto	l10337
  2937  002590                     l10323:
  2938                           
  2939                           ;main.c: 1715: doActionStatus( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2940  002590  0100               	movlb	0	; () banked
  2941  002592  D840               	call	PL2	;call to abstracted procedure
  2942  002594  D84C               	call	PL16	;call to abstracted procedure
  2943  002596  ECB5  F01E         	call	_Read_b_eep	;wreg free
  2944  00259A  0100               	movlb	0	; () banked
  2945  00259C  6FD9               	movwf	_doDM$2155& (0+255),b
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;main.c: 1715: doActionStatus( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2949  00259E  C0D9  F051         	movff	_doDM$2155,?_doActionStatus
  2950  0025A2  51DC               	movf	doDM@dmflags& (0+255),w,b
  2951  0025A4  EC4B  F016         	call	_doActionStatus
  2952                           
  2953                           ;main.c: 1716: break;
  2954  0025A8  D02F               	goto	l10337
  2955  0025AA                     l10327:
  2956                           
  2957                           ;main.c: 1719: doActionDisable( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2958  0025AA  0100               	movlb	0	; () banked
  2959  0025AC  D833               	call	PL2	;call to abstracted procedure
  2960  0025AE  D83F               	call	PL16	;call to abstracted procedure
  2961  0025B0  ECB5  F01E         	call	_Read_b_eep	;wreg free
  2962  0025B4  0100               	movlb	0	; () banked
  2963  0025B6  6FDA               	movwf	_doDM$2156& (0+255),b
  2964                           
  2965                           ;main.c: 1719: doActionDisable( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2966  0025B8  C0DA  F00C         	movff	_doDM$2156,?_doActionDisable
  2967  0025BC  51DC               	movf	doDM@dmflags& (0+255),w,b
  2968  0025BE  EC00  F01B         	call	_doActionDisable
  2969                           
  2970                           ;main.c: 1720: break;
  2971  0025C2  D022               	goto	l10337
  2972  0025C4                     l10329:
  2973                           
  2974                           ;main.c: 1723: doActionToggle( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2975  0025C4  0100               	movlb	0	; () banked
  2976  0025C6  D826               	call	PL2	;call to abstracted procedure
  2977  0025C8  D832               	call	PL16	;call to abstracted procedure
  2978  0025CA  ECB5  F01E         	call	_Read_b_eep	;wreg free
  2979  0025CE  0100               	movlb	0	; () banked
  2980  0025D0  6FDB               	movwf	_doDM$2157& (0+255),b
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;main.c: 1723: doActionToggle( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2984  0025D2  C0DB  F051         	movff	_doDM$2157,?_doActionToggle
  2985  0025D6  51DC               	movf	doDM@dmflags& (0+255),w,b
  2986  0025D8  ECA2  F015         	call	_doActionToggle
  2987                           
  2988                           ;main.c: 1724: break;
  2989  0025DC  D015               	goto	l10337
  2990  0025DE                     l10335:
  2991                           
  2992                           ; BSR set to: 0
  2993  0025DE  D81A               	call	PL2	;call to abstracted procedure
  2994  0025E0  0E91               	movlw	145
  2995  0025E2  25CD               	addwf	??_doDM& (0+255),w,b
  2996  0025E4  6E08               	movwf	?_Read_b_eep,c
  2997  0025E6  0E00               	movlw	0
  2998  0025E8  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2999  0025EA  6E09               	movwf	?_Read_b_eep+1,c
  3000  0025EC  ECB5  F01E         	call	_Read_b_eep	;wreg free
  3001                           
  3002                           ; Switch size 1, requested type "space"
  3003                           ; Number of cases is 6, Range of values is 1 to 16
  3004                           ; switch strategies available:
  3005                           ; Name         Instructions Cycles
  3006                           ; simple_byte           19    10 (average)
  3007                           ;	Chosen strategy is simple_byte
  3008  0025F0  0A01               	xorlw	1	; case 1
  3009  0025F2  E0A7               	bz	l10313
  3010  0025F4  0A03               	xorlw	3	; case 2
  3011  0025F6  E0B2               	bz	l10317
  3012  0025F8  0A01               	xorlw	1	; case 3
  3013  0025FA  E0BD               	bz	l10321
  3014  0025FC  0A07               	xorlw	7	; case 4
  3015  0025FE  E0E2               	bz	l10329
  3016  002600  0A0E               	xorlw	14	; case 10
  3017  002602  E0C6               	bz	l10323
  3018  002604  0A1A               	xorlw	26	; case 16
  3019  002606  E0D1               	bz	l10327
  3020  002608                     l10337:
  3021  002608  0100               	movlb	0	; () banked
  3022  00260A  2BDD               	incf	doDM@i& (0+255),f,b
  3023                           
  3024                           ; BSR set to: 0
  3025  00260C  0E06               	movlw	6
  3026  00260E  65DD               	cpfsgt	doDM@i& (0+255),b
  3027  002610  D719               	goto	l10291
  3028  002612                     l420:
  3029                           
  3030                           ; BSR set to: 0
  3031  002612  0012               	return	
  3032  002614                     __end_of_doDM:
  3033                           	opt stack 0
  3034  002614                     PL2:
  3035                           	opt stack 22
  3036  002614  51DD               	movf	doDM@i& (0+255),w,b
  3037  002616  6FCD               	movwf	??_doDM& (0+255),b
  3038  002618  6BCE               	clrf	(??_doDM+1)& (0+255),b
  3039  00261A  90D8               	bcf	status,0,c
  3040  00261C  37CD               	rlcf	??_doDM& (0+255),f,b
  3041  00261E  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  3042  002620  90D8               	bcf	status,0,c
  3043  002622  37CD               	rlcf	??_doDM& (0+255),f,b
  3044  002624  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  3045  002626  90D8               	bcf	status,0,c
  3046  002628  37CD               	rlcf	??_doDM& (0+255),f,b
  3047  00262A  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  3048  00262C  0012               	return	
  3049  00262E                     __end_ofPL2:
  3050                           	opt stack 0
  3051  00262E                     PL16:
  3052                           	opt stack 22
  3053  00262E  0E92               	movlw	146
  3054  002630  25CD               	addwf	??_doDM& (0+255),w,b
  3055  002632  6E08               	movwf	?_Read_b_eep,c
  3056  002634  0E00               	movlw	0
  3057  002636  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  3058  002638  6E09               	movwf	?_Read_b_eep+1,c
  3059  00263A  0012               	return	
  3060  00263C                     __end_ofPL16:
  3061                           	opt stack 0
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           prodh	equ	0xFF4
  3067                           prodl	equ	0xFF3
  3068                           intcon	equ	0xFF2
  3069                           postinc0	equ	0xFEE
  3070                           wreg	equ	0xFE8
  3071                           indf1	equ	0xFE7
  3072                           fsr1h	equ	0xFE2
  3073                           fsr1l	equ	0xFE1
  3074                           indf2	equ	0xFDF
  3075                           postinc2	equ	0xFDE
  3076                           postdec2	equ	0xFDD
  3077                           plusw2	equ	0xFDB
  3078                           fsr2h	equ	0xFDA
  3079                           fsr2l	equ	0xFD9
  3080                           status	equ	0xFD8
  3081                           
  3082 ;; *************** function _doActionToggle *****************
  3083 ;; Defined at:
  3084 ;;		line 2170 in file "../main.c"
  3085 ;; Parameters:    Size  Location     Type
  3086 ;;  dmflags         1    wreg     unsigned char 
  3087 ;;  arg             1   80[COMRAM] unsigned char 
  3088 ;; Auto vars:     Size  Location     Type
  3089 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3090 ;;  i               1   27[BANK0 ] unsigned char 
  3091 ;;  bOn             1   26[BANK0 ] enum E15660
  3092 ;;  val             1   25[BANK0 ] unsigned char 
  3093 ;; Return value:  Size  Location     Type
  3094 ;;		None               void
  3095 ;; Registers used:
  3096 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3097 ;; Tracked objects:
  3098 ;;		On entry : F/0
  3099 ;;		On exit  : F/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3102 ;;      Params:         1       0       0       0       0       0       0
  3103 ;;      Locals:         0       4       0       0       0       0       0
  3104 ;;      Temps:          0       2       0       0       0       0       0
  3105 ;;      Totals:         1       6       0       0       0       0       0
  3106 ;;Total ram usage:        7 bytes
  3107 ;; Hardware stack levels used:    1
  3108 ;; Hardware stack levels required when called:    7
  3109 ;; This function calls:
  3110 ;;		_Read_b_eep
  3111 ;;		_SendInformationEvent
  3112 ;; This function is called by:
  3113 ;;		_doDM
  3114 ;; This function uses a non-reentrant model
  3115 ;;
  3116                           
  3117                           	psect	text9
  3118  002B44                     __ptext9:
  3119                           	opt stack 0
  3120  002B44                     _doActionToggle:
  3121                           	opt stack 22
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;incstack = 0
  3125                           ;incstack = 0
  3126                           ;doActionToggle@dmflags stored from wreg
  3127  002B44  CFE8 F0C9          	movff	wreg,doActionToggle@dmflags
  3128                           
  3129                           ; BSR set to: 0
  3130                           ;main.c: 2172: unsigned char i;
  3131                           ;main.c: 2173: unsigned char val;
  3132                           ;main.c: 2174: BOOL bOn = 0;
  3133  002B48  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3134                           
  3135                           ;main.c: 2176: for ( i = 0; i < 8; i++ ) {
  3136  002B4A  6BCC               	clrf	doActionToggle@i& (0+255),b
  3137  002B4C                     l11059:
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;main.c: 2179: if ( !( arg & (1 << i) ) ) continue;
  3141  002B4C  C0CC  F0C7         	movff	doActionToggle@i,??_doActionToggle
  3142  002B50  0E01               	movlw	1
  3143  002B52  6FC8               	movwf	(??_doActionToggle+1)& (0+255),b
  3144  002B54  2BC7               	incf	??_doActionToggle& (0+255),f,b
  3145  002B56  D002               	goto	u13484
  3146  002B58                     u13485:
  3147  002B58  90D8               	bcf	status,0,c
  3148  002B5A  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3149  002B5C                     u13484:
  3150  002B5C  2FC7               	decfsz	??_doActionToggle& (0+255),f,b
  3151  002B5E  D7FC               	goto	u13485
  3152  002B60  51C8               	movf	(??_doActionToggle+1)& (0+255),w,b
  3153  002B62  1451               	andwf	doActionToggle@arg,w,c
  3154  002B64  E101 D092          	bz	l11121
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;main.c: 2182: if ( dmflags & 0x10 ) {
  3158  002B68  A9C9               	btfss	doActionToggle@dmflags& (0+255),4,b
  3159  002B6A  D011               	goto	l552
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;main.c: 2183: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3163  002B6C  90D8               	bcf	status,0,c
  3164  002B6E  35CC               	rlcf	doActionToggle@i& (0+255),w,b
  3165  002B70  6FC7               	movwf	??_doActionToggle& (0+255),b
  3166  002B72  6BC8               	clrf	(??_doActionToggle+1)& (0+255),b
  3167  002B74  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3168  002B76  0E75               	movlw	117
  3169  002B78  25C7               	addwf	??_doActionToggle& (0+255),w,b
  3170  002B7A  6E08               	movwf	?_Read_b_eep,c
  3171  002B7C  0E00               	movlw	0
  3172  002B7E  21C8               	addwfc	(??_doActionToggle+1)& (0+255),w,b
  3173  002B80  6E09               	movwf	?_Read_b_eep+1,c
  3174  002B82  ECB5  F01E         	call	_Read_b_eep	;wreg free
  3175  002B86  0100               	movlb	0	; () banked
  3176  002B88  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3177  002B8A  E001 D07F          	bnz	l11121
  3178  002B8E                     l552:
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;main.c: 2186: }
  3182                           ;main.c: 2187: }
  3183                           ;main.c: 2190: if ( dmflags & 0x08 ) {
  3184  002B8E  A7C9               	btfss	doActionToggle@dmflags& (0+255),3,b
  3185  002B90  D010               	goto	l11071
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;main.c: 2191: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  3189  002B92  90D8               	bcf	status,0,c
  3190  002B94  35CC               	rlcf	doActionToggle@i& (0+255),w,b
  3191  002B96  6FC7               	movwf	??_doActionToggle& (0+255),b
  3192  002B98  6BC8               	clrf	(??_doActionToggle+1)& (0+255),b
  3193  002B9A  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3194  002B9C  0E76               	movlw	118
  3195  002B9E  25C7               	addwf	??_doActionToggle& (0+255),w,b
  3196  002BA0  6E08               	movwf	?_Read_b_eep,c
  3197  002BA2  0E00               	movlw	0
  3198  002BA4  21C8               	addwfc	(??_doActionToggle+1)& (0+255),w,b
  3199  002BA6  6E09               	movwf	?_Read_b_eep+1,c
  3200  002BA8  ECB5  F01E         	call	_Read_b_eep	;wreg free
  3201  002BAC  0100               	movlb	0	; () banked
  3202  002BAE  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3203  002BB0  E16D               	bnz	l11121
  3204  002BB2                     l11071:
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;main.c: 2194: }
  3208                           ;main.c: 2195: }
  3209                           ;main.c: 2197: val = Read_b_eep(0x43 + 10 + i);
  3210  002BB2  0E4D               	movlw	77
  3211  002BB4  25CC               	addwf	doActionToggle@i& (0+255),w,b
  3212  002BB6  6E08               	movwf	?_Read_b_eep,c
  3213  002BB8  6A09               	clrf	?_Read_b_eep+1,c
  3214  002BBA  0E00               	movlw	0
  3215  002BBC  2209               	addwfc	?_Read_b_eep+1,f,c
  3216  002BBE  ECB5  F01E         	call	_Read_b_eep	;wreg free
  3217  002BC2  0100               	movlb	0	; () banked
  3218  002BC4  6FCA               	movwf	doActionToggle@val& (0+255),b
  3219                           
  3220                           ;main.c: 2199: switch ( i ) {
  3221  002BC6  D02D               	goto	l11103
  3222  002BC8                     l557:
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;main.c: 2202: if ( LATBbits.LATB4 ) {
  3226  002BC8  A88A               	btfss	3978,4,c	;volatile
  3227  002BCA  D002               	goto	l558
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;main.c: 2203: LATBbits.LATB4 = 0;
  3231  002BCC  988A               	bcf	3978,4,c	;volatile
  3232  002BCE  D025               	goto	L12
  3233  002BD0                     l558:
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;main.c: 2206: LATBbits.LATB4 = 1;
  3237  002BD0  888A               	bsf	3978,4,c	;volatile
  3238  002BD2                     l11075:
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;main.c: 2207: bOn = 1;
  3242  002BD2  0E01               	movlw	1
  3243  002BD4  6FCB               	movwf	doActionToggle@bOn& (0+255),b
  3244  002BD6  D033               	goto	l11105
  3245  002BD8                     l561:
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;main.c: 2212: if ( LATBbits.LATB1 ) {
  3249  002BD8  A28A               	btfss	3978,1,c	;volatile
  3250  002BDA  D002               	goto	l562
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;main.c: 2213: LATBbits.LATB1 = 0;
  3254  002BDC  928A               	bcf	3978,1,c	;volatile
  3255  002BDE  D01D               	goto	L12
  3256  002BE0                     l562:
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;main.c: 2216: LATBbits.LATB1 = 1;
  3260  002BE0  828A               	bsf	3978,1,c	;volatile
  3261  002BE2  D7F7               	goto	l11075
  3262  002BE4                     l564:
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;main.c: 2222: if ( LATBbits.LATB0 ) {
  3266  002BE4  A08A               	btfss	3978,0,c	;volatile
  3267  002BE6  D002               	goto	l565
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;main.c: 2223: LATBbits.LATB0 = 0;
  3271  002BE8  908A               	bcf	3978,0,c	;volatile
  3272  002BEA  D017               	goto	L12
  3273  002BEC                     l565:
  3274                           
  3275                           ; BSR set to: 0
  3276                           ;main.c: 2226: LATBbits.LATB0 = 1;
  3277  002BEC  808A               	bsf	3978,0,c	;volatile
  3278  002BEE  D7F1               	goto	l11075
  3279  002BF0                     l567:
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;main.c: 2232: if ( LATCbits.LATC7 ) {
  3283  002BF0  AE8B               	btfss	3979,7,c	;volatile
  3284  002BF2  D002               	goto	l568
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;main.c: 2233: LATCbits.LATC7 = 0;
  3288  002BF4  9E8B               	bcf	3979,7,c	;volatile
  3289  002BF6  D011               	goto	L12
  3290  002BF8                     l568:
  3291                           
  3292                           ; BSR set to: 0
  3293                           ;main.c: 2236: LATCbits.LATC7 = 1;
  3294  002BF8  8E8B               	bsf	3979,7,c	;volatile
  3295  002BFA  D7EB               	goto	l11075
  3296  002BFC                     l570:
  3297                           
  3298                           ; BSR set to: 0
  3299                           ;main.c: 2242: if ( LATCbits.LATC6 ) {
  3300  002BFC  AC8B               	btfss	3979,6,c	;volatile
  3301  002BFE  D002               	goto	l571
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;main.c: 2243: LATCbits.LATC6 = 0;
  3305  002C00  9C8B               	bcf	3979,6,c	;volatile
  3306  002C02  D00B               	goto	L12
  3307  002C04                     l571:
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;main.c: 2246: LATCbits.LATC6 = 1;
  3311  002C04  8C8B               	bsf	3979,6,c	;volatile
  3312  002C06  D7E5               	goto	l11075
  3313  002C08                     l573:
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;main.c: 2252: if ( LATCbits.LATC5 ) {
  3317  002C08  AA8B               	btfss	3979,5,c	;volatile
  3318  002C0A  D002               	goto	l574
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;main.c: 2253: LATCbits.LATC5 = 0;
  3322  002C0C  9A8B               	bcf	3979,5,c	;volatile
  3323  002C0E  D005               	goto	L12
  3324  002C10                     l574:
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;main.c: 2256: LATCbits.LATC5 = 1;
  3328  002C10  8A8B               	bsf	3979,5,c	;volatile
  3329  002C12  D7DF               	goto	l11075
  3330  002C14                     l576:
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;main.c: 2262: if ( LATCbits.LATC4 ) {
  3334  002C14  A88B               	btfss	3979,4,c	;volatile
  3335  002C16  D003               	goto	l577
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;main.c: 2263: LATCbits.LATC4 = 0;
  3339  002C18  988B               	bcf	3979,4,c	;volatile
  3340  002C1A                     L12:
  3341                           
  3342                           ;main.c: 2264: bOn = 0;
  3343  002C1A  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3344                           
  3345                           ;main.c: 2265: } else {
  3346  002C1C  D010               	goto	l11105
  3347  002C1E                     l577:
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;main.c: 2266: LATCbits.LATC4 = 1;
  3351  002C1E  888B               	bsf	3979,4,c	;volatile
  3352  002C20  D7D8               	goto	l11075
  3353  002C22                     l11103:
  3354                           
  3355                           ; BSR set to: 0
  3356  002C22  51CC               	movf	doActionToggle@i& (0+255),w,b
  3357                           
  3358                           ; Switch size 1, requested type "space"
  3359                           ; Number of cases is 7, Range of values is 0 to 6
  3360                           ; switch strategies available:
  3361                           ; Name         Instructions Cycles
  3362                           ; simple_byte           22    12 (average)
  3363                           ;	Chosen strategy is simple_byte
  3364  002C24  E0D1               	bz	l557
  3365  002C26  0A01               	xorlw	1	; case 1
  3366  002C28  E0D7               	bz	l561
  3367  002C2A  0A03               	xorlw	3	; case 2
  3368  002C2C  E0DB               	bz	l564
  3369  002C2E  0A01               	xorlw	1	; case 3
  3370  002C30  E0DF               	bz	l567
  3371  002C32  0A07               	xorlw	7	; case 4
  3372  002C34  E0E3               	bz	l570
  3373  002C36  0A01               	xorlw	1	; case 5
  3374  002C38  E0E7               	bz	l573
  3375  002C3A  0A03               	xorlw	3	; case 6
  3376  002C3C  E0EB               	bz	l576
  3377  002C3E                     l11105:
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;main.c: 2273: if ( bOn ) {
  3381  002C3E  51CB               	movf	doActionToggle@bOn& (0+255),w,b
  3382  002C40  E013               	bz	l579
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;main.c: 2276: if ( val & 0x08 ) {
  3386  002C42  A7CA               	btfss	doActionToggle@val& (0+255),3,b
  3387  002C44  D007               	goto	l11111
  3388                           
  3389                           ; BSR set to: 0
  3390                           ;main.c: 2277: SendInformationEvent( i, 20, 3 );
  3391  002C46  0E14               	movlw	20
  3392  002C48  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3393  002C4A  0E03               	movlw	3
  3394  002C4C  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3395  002C4E  51CC               	movf	doActionToggle@i& (0+255),w,b
  3396  002C50  EC11  F01C         	call	_SendInformationEvent
  3397  002C54                     l11111:
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;main.c: 2278: }
  3401                           ;main.c: 2281: if ( val & 0x20 ) {
  3402  002C54  ABCA               	btfss	doActionToggle@val& (0+255),5,b
  3403  002C56  D01A               	goto	l11121
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;main.c: 2282: SendInformationEvent( i, 20, 25 );
  3407  002C58  0E14               	movlw	20
  3408  002C5A  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3409  002C5C  0E19               	movlw	25
  3410  002C5E  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3411  002C60  51CC               	movf	doActionToggle@i& (0+255),w,b
  3412  002C62  EC11  F01C         	call	_SendInformationEvent
  3413  002C66  D012               	goto	l11121
  3414  002C68                     l579:
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;main.c: 2286: else {
  3418                           ;main.c: 2289: if ( val & 0x10 ) {
  3419  002C68  A9CA               	btfss	doActionToggle@val& (0+255),4,b
  3420  002C6A  D007               	goto	l11117
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;main.c: 2290: SendInformationEvent( i, 20, 4 );
  3424  002C6C  0E14               	movlw	20
  3425  002C6E  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3426  002C70  0E04               	movlw	4
  3427  002C72  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3428  002C74  51CC               	movf	doActionToggle@i& (0+255),w,b
  3429  002C76  EC11  F01C         	call	_SendInformationEvent
  3430  002C7A                     l11117:
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;main.c: 2291: }
  3434                           ;main.c: 2294: if (val & 0x40 ) {
  3435  002C7A  ADCA               	btfss	doActionToggle@val& (0+255),6,b
  3436  002C7C  D007               	goto	l11121
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;main.c: 2295: SendInformationEvent( i, 20, 24 );
  3440  002C7E  0E14               	movlw	20
  3441  002C80  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3442  002C82  0E18               	movlw	24
  3443  002C84  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3444  002C86  51CC               	movf	doActionToggle@i& (0+255),w,b
  3445  002C88  EC11  F01C         	call	_SendInformationEvent
  3446  002C8C                     l11121:
  3447                           
  3448                           ; BSR set to: 0
  3449  002C8C  2BCC               	incf	doActionToggle@i& (0+255),f,b
  3450                           
  3451                           ; BSR set to: 0
  3452  002C8E  0E07               	movlw	7
  3453  002C90  65CC               	cpfsgt	doActionToggle@i& (0+255),b
  3454  002C92  D75C               	goto	l11059
  3455                           
  3456                           ; BSR set to: 0
  3457  002C94  0C07               	retlw	7
  3458  002C96                     __end_of_doActionToggle:
  3459                           	opt stack 0
  3460                           tblptru	equ	0xFF8
  3461                           tblptrh	equ	0xFF7
  3462                           tblptrl	equ	0xFF6
  3463                           tablat	equ	0xFF5
  3464                           prodh	equ	0xFF4
  3465                           prodl	equ	0xFF3
  3466                           intcon	equ	0xFF2
  3467                           postinc0	equ	0xFEE
  3468                           wreg	equ	0xFE8
  3469                           indf1	equ	0xFE7
  3470                           fsr1h	equ	0xFE2
  3471                           fsr1l	equ	0xFE1
  3472                           indf2	equ	0xFDF
  3473                           postinc2	equ	0xFDE
  3474                           postdec2	equ	0xFDD
  3475                           plusw2	equ	0xFDB
  3476                           fsr2h	equ	0xFDA
  3477                           fsr2l	equ	0xFD9
  3478                           status	equ	0xFD8
  3479                           
  3480 ;; *************** function _doActionDisable *****************
  3481 ;; Defined at:
  3482 ;;		line 2133 in file "../main.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;  dmflags         1    wreg     unsigned char 
  3485 ;;  arg             1   11[COMRAM] unsigned char 
  3486 ;; Auto vars:     Size  Location     Type
  3487 ;;  dmflags         1   15[COMRAM] unsigned char 
  3488 ;;  i               1   16[COMRAM] unsigned char 
  3489 ;;  val             1   14[COMRAM] unsigned char 
  3490 ;; Return value:  Size  Location     Type
  3491 ;;		None               void
  3492 ;; Registers used:
  3493 ;;		wreg, status,2, status,0, cstack
  3494 ;; Tracked objects:
  3495 ;;		On entry : F/0
  3496 ;;		On exit  : 0/0
  3497 ;;		Unchanged: 0/0
  3498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3499 ;;      Params:         1       0       0       0       0       0       0
  3500 ;;      Locals:         3       0       0       0       0       0       0
  3501 ;;      Temps:          2       0       0       0       0       0       0
  3502 ;;      Totals:         6       0       0       0       0       0       0
  3503 ;;Total ram usage:        6 bytes
  3504 ;; Hardware stack levels used:    1
  3505 ;; Hardware stack levels required when called:    3
  3506 ;; This function calls:
  3507 ;;		_Busy_eep
  3508 ;;		_Write_b_eep
  3509 ;;		_Read_b_eep
  3510 ;; This function is called by:
  3511 ;;		_doDM
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           	psect	text10
  3516  003600                     __ptext10:
  3517                           	opt stack 0
  3518  003600                     _doActionDisable:
  3519                           	opt stack 26
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;incstack = 0
  3523                           ;incstack = 0
  3524                           ;doActionDisable@dmflags stored from wreg
  3525  003600  CFE8 F010          	movff	wreg,doActionDisable@dmflags
  3526                           
  3527                           ; BSR set to: 0
  3528                           ;main.c: 2135: unsigned char i;
  3529                           ;main.c: 2136: unsigned char val;
  3530                           ;main.c: 2138: for ( i = 0; i < 8; i++ ) {
  3531  003604  6A11               	clrf	doActionDisable@i,c
  3532  003606                     l9287:
  3533                           
  3534                           ;main.c: 2141: if ( !( arg & (1 << i) ) ) continue;
  3535  003606  C011  F00D         	movff	doActionDisable@i,??_doActionDisable
  3536  00360A  0E01               	movlw	1
  3537  00360C  6E0E               	movwf	(??_doActionDisable+1)& (0+255),c
  3538  00360E  2A0D               	incf	??_doActionDisable,f,c
  3539  003610  D002               	goto	u10584
  3540  003612                     u10585:
  3541  003612  90D8               	bcf	status,0,c
  3542  003614  360E               	rlcf	??_doActionDisable+1,f,c
  3543  003616                     u10584:
  3544  003616  2E0D               	decfsz	??_doActionDisable,f,c
  3545  003618  D7FC               	goto	u10585
  3546  00361A  500E               	movf	??_doActionDisable+1,w,c
  3547  00361C  140C               	andwf	doActionDisable@arg,w,c
  3548  00361E  E03A               	bz	l9305
  3549                           
  3550                           ;main.c: 2144: if ( dmflags & 0x10 ) {
  3551  003620  A810               	btfss	doActionDisable@dmflags,4,c
  3552  003622  D010               	goto	l541
  3553                           
  3554                           ;main.c: 2145: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3555  003624  90D8               	bcf	status,0,c
  3556  003626  3411               	rlcf	doActionDisable@i,w,c
  3557  003628  6E0D               	movwf	??_doActionDisable& (0+255),c
  3558  00362A  6A0E               	clrf	(??_doActionDisable+1)& (0+255),c
  3559  00362C  360E               	rlcf	(??_doActionDisable+1)& (0+255),f,c
  3560  00362E  0E75               	movlw	117
  3561  003630  240D               	addwf	??_doActionDisable,w,c
  3562  003632  6E08               	movwf	?_Read_b_eep,c
  3563  003634  0E00               	movlw	0
  3564  003636  200E               	addwfc	??_doActionDisable+1,w,c
  3565  003638  6E09               	movwf	?_Read_b_eep+1,c
  3566  00363A  ECB5  F01E         	call	_Read_b_eep	;wreg free
  3567  00363E  0100               	movlb	0	; () banked
  3568  003640  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3569  003642  E128               	bnz	l9305
  3570  003644                     l541:
  3571                           
  3572                           ;main.c: 2148: }
  3573                           ;main.c: 2149: }
  3574                           ;main.c: 2152: if ( dmflags & 0x08 ) {
  3575  003644  A610               	btfss	doActionDisable@dmflags,3,c
  3576  003646  D010               	goto	l9299
  3577                           
  3578                           ;main.c: 2153: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  3579  003648  90D8               	bcf	status,0,c
  3580  00364A  3411               	rlcf	doActionDisable@i,w,c
  3581  00364C  6E0D               	movwf	??_doActionDisable& (0+255),c
  3582  00364E  6A0E               	clrf	(??_doActionDisable+1)& (0+255),c
  3583  003650  360E               	rlcf	(??_doActionDisable+1)& (0+255),f,c
  3584  003652  0E76               	movlw	118
  3585  003654  240D               	addwf	??_doActionDisable,w,c
  3586  003656  6E08               	movwf	?_Read_b_eep,c
  3587  003658  0E00               	movlw	0
  3588  00365A  200E               	addwfc	??_doActionDisable+1,w,c
  3589  00365C  6E09               	movwf	?_Read_b_eep+1,c
  3590  00365E  ECB5  F01E         	call	_Read_b_eep	;wreg free
  3591  003662  0100               	movlb	0	; () banked
  3592  003664  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3593  003666  E116               	bnz	l9305
  3594  003668                     l9299:
  3595                           
  3596                           ;main.c: 2156: }
  3597                           ;main.c: 2157: }
  3598                           ;main.c: 2159: val = Read_b_eep(0x43 + 10 + i);
  3599  003668  0E4D               	movlw	77
  3600  00366A  2411               	addwf	doActionDisable@i,w,c
  3601  00366C  6E08               	movwf	?_Read_b_eep,c
  3602  00366E  6A09               	clrf	?_Read_b_eep+1,c
  3603  003670  0E00               	movlw	0
  3604  003672  2209               	addwfc	?_Read_b_eep+1,f,c
  3605  003674  ECB5  F01E         	call	_Read_b_eep	;wreg free
  3606  003678  6E0F               	movwf	doActionDisable@val,c
  3607                           
  3608                           ;main.c: 2160: (Busy_eep(), Write_b_eep(0x43 + 10 + i,val & ~0x80));
  3609  00367A  ECE9  F01E         	call	_Busy_eep	;wreg free
  3610  00367E  0E4D               	movlw	77
  3611  003680  2411               	addwf	doActionDisable@i,w,c
  3612  003682  6E08               	movwf	?_Write_b_eep,c
  3613  003684  6A09               	clrf	?_Write_b_eep+1,c
  3614  003686  0E00               	movlw	0
  3615  003688  2209               	addwfc	?_Write_b_eep+1,f,c
  3616  00368A  500F               	movf	doActionDisable@val,w,c
  3617  00368C  0B7F               	andlw	127
  3618  00368E  6E0A               	movwf	?_Write_b_eep+2,c
  3619  003690  ECCE  F01C         	call	_Write_b_eep	;wreg free
  3620  003694                     l9305:
  3621  003694  2A11               	incf	doActionDisable@i,f,c
  3622  003696  0E07               	movlw	7
  3623  003698  6411               	cpfsgt	doActionDisable@i,c
  3624  00369A  D7B5               	goto	l9287
  3625  00369C  0C07               	retlw	7
  3626  00369E                     __end_of_doActionDisable:
  3627                           	opt stack 0
  3628                           tblptru	equ	0xFF8
  3629                           tblptrh	equ	0xFF7
  3630                           tblptrl	equ	0xFF6
  3631                           tablat	equ	0xFF5
  3632                           prodh	equ	0xFF4
  3633                           prodl	equ	0xFF3
  3634                           intcon	equ	0xFF2
  3635                           postinc0	equ	0xFEE
  3636                           wreg	equ	0xFE8
  3637                           indf1	equ	0xFE7
  3638                           fsr1h	equ	0xFE2
  3639                           fsr1l	equ	0xFE1
  3640                           indf2	equ	0xFDF
  3641                           postinc2	equ	0xFDE
  3642                           postdec2	equ	0xFDD
  3643                           plusw2	equ	0xFDB
  3644                           fsr2h	equ	0xFDA
  3645                           fsr2l	equ	0xFD9
  3646                           status	equ	0xFD8
  3647                           
  3648 ;; *************** function _doActionStatus *****************
  3649 ;; Defined at:
  3650 ;;		line 2037 in file "../main.c"
  3651 ;; Parameters:    Size  Location     Type
  3652 ;;  dmflags         1    wreg     unsigned char 
  3653 ;;  arg             1   80[COMRAM] unsigned char 
  3654 ;; Auto vars:     Size  Location     Type
  3655 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3656 ;;  i               1   27[BANK0 ] unsigned char 
  3657 ;;  val             1   26[BANK0 ] unsigned char 
  3658 ;;  bOn             1   25[BANK0 ] enum E15660
  3659 ;; Return value:  Size  Location     Type
  3660 ;;		None               void
  3661 ;; Registers used:
  3662 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3663 ;; Tracked objects:
  3664 ;;		On entry : F/0
  3665 ;;		On exit  : F/0
  3666 ;;		Unchanged: 0/0
  3667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3668 ;;      Params:         1       0       0       0       0       0       0
  3669 ;;      Locals:         0       4       0       0       0       0       0
  3670 ;;      Temps:          0       2       0       0       0       0       0
  3671 ;;      Totals:         1       6       0       0       0       0       0
  3672 ;;Total ram usage:        7 bytes
  3673 ;; Hardware stack levels used:    1
  3674 ;; Hardware stack levels required when called:    7
  3675 ;; This function calls:
  3676 ;;		_Read_b_eep
  3677 ;;		_SendInformationEvent
  3678 ;; This function is called by:
  3679 ;;		_doDM
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           	psect	text11
  3684  002C96                     __ptext11:
  3685                           	opt stack 0
  3686  002C96                     _doActionStatus:
  3687                           	opt stack 22
  3688                           
  3689                           ;incstack = 0
  3690                           ;incstack = 0
  3691                           ;doActionStatus@dmflags stored from wreg
  3692  002C96  CFE8 F0C9          	movff	wreg,doActionStatus@dmflags
  3693                           
  3694                           ; BSR set to: 0
  3695                           ;main.c: 2039: unsigned char i;
  3696                           ;main.c: 2040: unsigned char val;
  3697                           ;main.c: 2041: BOOL bOn = 0;
  3698  002C9A  6BCA               	clrf	doActionStatus@bOn& (0+255),b
  3699                           
  3700                           ;main.c: 2043: for (i = 0; i < 8; i++) {
  3701  002C9C  6BCC               	clrf	doActionStatus@i& (0+255),b
  3702  002C9E                     l11001:
  3703                           
  3704                           ; BSR set to: 0
  3705                           ;main.c: 2046: if (!(arg & (1 << i))) continue;
  3706  002C9E  C0CC  F0C7         	movff	doActionStatus@i,??_doActionStatus
  3707  002CA2  0E01               	movlw	1
  3708  002CA4  6FC8               	movwf	(??_doActionStatus+1)& (0+255),b
  3709  002CA6  2BC7               	incf	??_doActionStatus& (0+255),f,b
  3710  002CA8  D002               	goto	u13364
  3711  002CAA                     u13365:
  3712  002CAA  90D8               	bcf	status,0,c
  3713  002CAC  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3714  002CAE                     u13364:
  3715  002CAE  2FC7               	decfsz	??_doActionStatus& (0+255),f,b
  3716  002CB0  D7FC               	goto	u13365
  3717  002CB2  51C8               	movf	(??_doActionStatus+1)& (0+255),w,b
  3718  002CB4  1451               	andwf	doActionStatus@arg,w,c
  3719  002CB6  E101 D087          	bz	l11049
  3720                           
  3721                           ; BSR set to: 0
  3722                           ;main.c: 2049: if ( dmflags & 0x10 ) {
  3723  002CBA  A9C9               	btfss	doActionStatus@dmflags& (0+255),4,b
  3724  002CBC  D010               	goto	l515
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;main.c: 2050: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  3728  002CBE  90D8               	bcf	status,0,c
  3729  002CC0  35CC               	rlcf	doActionStatus@i& (0+255),w,b
  3730  002CC2  6FC7               	movwf	??_doActionStatus& (0+255),b
  3731  002CC4  6BC8               	clrf	(??_doActionStatus+1)& (0+255),b
  3732  002CC6  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3733  002CC8  0E75               	movlw	117
  3734  002CCA  25C7               	addwf	??_doActionStatus& (0+255),w,b
  3735  002CCC  6E08               	movwf	?_Read_b_eep,c
  3736  002CCE  0E00               	movlw	0
  3737  002CD0  21C8               	addwfc	(??_doActionStatus+1)& (0+255),w,b
  3738  002CD2  6E09               	movwf	?_Read_b_eep+1,c
  3739  002CD4  ECB5  F01E         	call	_Read_b_eep	;wreg free
  3740  002CD8  0100               	movlb	0	; () banked
  3741  002CDA  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3742  002CDC  E175               	bnz	l11049
  3743  002CDE                     l515:
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;main.c: 2053: }
  3747                           ;main.c: 2054: }
  3748                           ;main.c: 2057: if ( dmflags & 0x08 ) {
  3749  002CDE  A7C9               	btfss	doActionStatus@dmflags& (0+255),3,b
  3750  002CE0  D010               	goto	l11013
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;main.c: 2058: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  3754  002CE2  90D8               	bcf	status,0,c
  3755  002CE4  35CC               	rlcf	doActionStatus@i& (0+255),w,b
  3756  002CE6  6FC7               	movwf	??_doActionStatus& (0+255),b
  3757  002CE8  6BC8               	clrf	(??_doActionStatus+1)& (0+255),b
  3758  002CEA  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3759  002CEC  0E76               	movlw	118
  3760  002CEE  25C7               	addwf	??_doActionStatus& (0+255),w,b
  3761  002CF0  6E08               	movwf	?_Read_b_eep,c
  3762  002CF2  0E00               	movlw	0
  3763  002CF4  21C8               	addwfc	(??_doActionStatus+1)& (0+255),w,b
  3764  002CF6  6E09               	movwf	?_Read_b_eep+1,c
  3765  002CF8  ECB5  F01E         	call	_Read_b_eep	;wreg free
  3766  002CFC  0100               	movlb	0	; () banked
  3767  002CFE  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3768  002D00  E163               	bnz	l11049
  3769  002D02                     l11013:
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;main.c: 2061: }
  3773                           ;main.c: 2062: }
  3774                           ;main.c: 2064: val = Read_b_eep(0x43 + 10 + i);
  3775  002D02  0E4D               	movlw	77
  3776  002D04  25CC               	addwf	doActionStatus@i& (0+255),w,b
  3777  002D06  6E08               	movwf	?_Read_b_eep,c
  3778  002D08  6A09               	clrf	?_Read_b_eep+1,c
  3779  002D0A  0E00               	movlw	0
  3780  002D0C  2209               	addwfc	?_Read_b_eep+1,f,c
  3781  002D0E  ECB5  F01E         	call	_Read_b_eep	;wreg free
  3782  002D12  0100               	movlb	0	; () banked
  3783  002D14  6FCB               	movwf	doActionStatus@val& (0+255),b
  3784                           
  3785                           ;main.c: 2066: switch (i) {
  3786  002D16  D023               	goto	l11031
  3787  002D18                     l11015:
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;main.c: 2069: bOn = LATBbits.LATB4;
  3791  002D18  0E00               	movlw	0
  3792  002D1A  B88A               	btfsc	3978,4,c	;volatile
  3793  002D1C  0E01               	movlw	1
  3794  002D1E  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3795                           
  3796                           ;main.c: 2070: break;
  3797  002D20  D02C               	goto	l11033
  3798  002D22                     l11017:
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;main.c: 2073: bOn = LATBbits.LATB1;
  3802  002D22  0E00               	movlw	0
  3803  002D24  B28A               	btfsc	3978,1,c	;volatile
  3804  002D26  0E01               	movlw	1
  3805  002D28  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3806                           
  3807                           ;main.c: 2074: break;
  3808  002D2A  D027               	goto	l11033
  3809  002D2C                     l11019:
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;main.c: 2077: bOn = LATBbits.LATB0;
  3813  002D2C  0E00               	movlw	0
  3814  002D2E  B08A               	btfsc	3978,0,c	;volatile
  3815  002D30  0E01               	movlw	1
  3816  002D32  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3817                           
  3818                           ;main.c: 2078: break;
  3819  002D34  D022               	goto	l11033
  3820  002D36                     l11021:
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;main.c: 2081: bOn = LATCbits.LATC7;
  3824  002D36  0E00               	movlw	0
  3825  002D38  BE8B               	btfsc	3979,7,c	;volatile
  3826  002D3A  0E01               	movlw	1
  3827  002D3C  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3828                           
  3829                           ;main.c: 2082: break;
  3830  002D3E  D01D               	goto	l11033
  3831  002D40                     l11023:
  3832                           
  3833                           ; BSR set to: 0
  3834                           ;main.c: 2085: bOn = LATCbits.LATC6;
  3835  002D40  0E00               	movlw	0
  3836  002D42  BC8B               	btfsc	3979,6,c	;volatile
  3837  002D44  0E01               	movlw	1
  3838  002D46  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3839                           
  3840                           ;main.c: 2086: break;
  3841  002D48  D018               	goto	l11033
  3842  002D4A                     l11025:
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;main.c: 2089: bOn = LATCbits.LATC5;
  3846  002D4A  0E00               	movlw	0
  3847  002D4C  BA8B               	btfsc	3979,5,c	;volatile
  3848  002D4E  0E01               	movlw	1
  3849  002D50  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3850                           
  3851                           ;main.c: 2090: break;
  3852  002D52  D013               	goto	l11033
  3853  002D54                     l11027:
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;main.c: 2093: bOn = LATCbits.LATC4;
  3857  002D54  0E00               	movlw	0
  3858  002D56  B88B               	btfsc	3979,4,c	;volatile
  3859  002D58  0E01               	movlw	1
  3860  002D5A  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3861                           
  3862                           ;main.c: 2094: break;
  3863  002D5C  D00E               	goto	l11033
  3864  002D5E                     l11031:
  3865                           
  3866                           ; BSR set to: 0
  3867  002D5E  51CC               	movf	doActionStatus@i& (0+255),w,b
  3868                           
  3869                           ; Switch size 1, requested type "space"
  3870                           ; Number of cases is 7, Range of values is 0 to 6
  3871                           ; switch strategies available:
  3872                           ; Name         Instructions Cycles
  3873                           ; simple_byte           22    12 (average)
  3874                           ;	Chosen strategy is simple_byte
  3875  002D60  E0DB               	bz	l11015
  3876  002D62  0A01               	xorlw	1	; case 1
  3877  002D64  E0DE               	bz	l11017
  3878  002D66  0A03               	xorlw	3	; case 2
  3879  002D68  E0E1               	bz	l11019
  3880  002D6A  0A01               	xorlw	1	; case 3
  3881  002D6C  E0E4               	bz	l11021
  3882  002D6E  0A07               	xorlw	7	; case 4
  3883  002D70  E0E7               	bz	l11023
  3884  002D72  0A01               	xorlw	1	; case 5
  3885  002D74  E0EA               	bz	l11025
  3886  002D76  0A03               	xorlw	3	; case 6
  3887  002D78  E0ED               	bz	l11027
  3888  002D7A                     l11033:
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;main.c: 2098: if (bOn) {
  3892  002D7A  51CA               	movf	doActionStatus@bOn& (0+255),w,b
  3893  002D7C  E013               	bz	l528
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;main.c: 2101: if ( val & 0x10 ) {
  3897  002D7E  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3898  002D80  D007               	goto	l11039
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;main.c: 2102: SendInformationEvent( i, 20, 4 );
  3902  002D82  0E14               	movlw	20
  3903  002D84  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3904  002D86  0E04               	movlw	4
  3905  002D88  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3906  002D8A  51CC               	movf	doActionStatus@i& (0+255),w,b
  3907  002D8C  EC11  F01C         	call	_SendInformationEvent
  3908  002D90                     l11039:
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;main.c: 2103: }
  3912                           ;main.c: 2106: if ( val & 0x40 ) {
  3913  002D90  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3914  002D92  D01A               	goto	l11049
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;main.c: 2107: SendInformationEvent( i, 20, 24 );
  3918  002D94  0E14               	movlw	20
  3919  002D96  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3920  002D98  0E18               	movlw	24
  3921  002D9A  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3922  002D9C  51CC               	movf	doActionStatus@i& (0+255),w,b
  3923  002D9E  EC11  F01C         	call	_SendInformationEvent
  3924  002DA2  D012               	goto	l11049
  3925  002DA4                     l528:
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;main.c: 2111: else {
  3929                           ;main.c: 2114: if ( val & 0x10 ) {
  3930  002DA4  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3931  002DA6  D007               	goto	l11045
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;main.c: 2115: SendInformationEvent( i, 20, 4 );
  3935  002DA8  0E14               	movlw	20
  3936  002DAA  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3937  002DAC  0E04               	movlw	4
  3938  002DAE  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3939  002DB0  51CC               	movf	doActionStatus@i& (0+255),w,b
  3940  002DB2  EC11  F01C         	call	_SendInformationEvent
  3941  002DB6                     l11045:
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;main.c: 2116: }
  3945                           ;main.c: 2119: if ( val & 0x40 ) {
  3946  002DB6  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3947  002DB8  D007               	goto	l11049
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;main.c: 2120: SendInformationEvent( i, 20, 24 );
  3951  002DBA  0E14               	movlw	20
  3952  002DBC  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3953  002DBE  0E18               	movlw	24
  3954  002DC0  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3955  002DC2  51CC               	movf	doActionStatus@i& (0+255),w,b
  3956  002DC4  EC11  F01C         	call	_SendInformationEvent
  3957  002DC8                     l11049:
  3958                           
  3959                           ; BSR set to: 0
  3960  002DC8  2BCC               	incf	doActionStatus@i& (0+255),f,b
  3961                           
  3962                           ; BSR set to: 0
  3963  002DCA  0E07               	movlw	7
  3964  002DCC  65CC               	cpfsgt	doActionStatus@i& (0+255),b
  3965  002DCE  D767               	goto	l11001
  3966                           
  3967                           ; BSR set to: 0
  3968  002DD0  0C07               	retlw	7
  3969  002DD2                     __end_of_doActionStatus:
  3970                           	opt stack 0
  3971                           tblptru	equ	0xFF8
  3972                           tblptrh	equ	0xFF7
  3973                           tblptrl	equ	0xFF6
  3974                           tablat	equ	0xFF5
  3975                           prodh	equ	0xFF4
  3976                           prodl	equ	0xFF3
  3977                           intcon	equ	0xFF2
  3978                           postinc0	equ	0xFEE
  3979                           wreg	equ	0xFE8
  3980                           indf1	equ	0xFE7
  3981                           fsr1h	equ	0xFE2
  3982                           fsr1l	equ	0xFE1
  3983                           indf2	equ	0xFDF
  3984                           postinc2	equ	0xFDE
  3985                           postdec2	equ	0xFDD
  3986                           plusw2	equ	0xFDB
  3987                           fsr2h	equ	0xFDA
  3988                           fsr2l	equ	0xFD9
  3989                           status	equ	0xFD8
  3990                           
  3991 ;; *************** function _doActionPulse *****************
  3992 ;; Defined at:
  3993 ;;		line 1939 in file "../main.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;  dmflags         1    wreg     unsigned char 
  3996 ;;  arg             1    9[COMRAM] unsigned char 
  3997 ;; Auto vars:     Size  Location     Type
  3998 ;;  dmflags         1   14[COMRAM] unsigned char 
  3999 ;;  i               1   15[COMRAM] unsigned char 
  4000 ;;  val             1   13[COMRAM] unsigned char 
  4001 ;; Return value:  Size  Location     Type
  4002 ;;		None               void
  4003 ;; Registers used:
  4004 ;;		wreg, status,2, status,0, cstack
  4005 ;; Tracked objects:
  4006 ;;		On entry : F/0
  4007 ;;		On exit  : 0/0
  4008 ;;		Unchanged: 0/0
  4009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4010 ;;      Params:         1       0       0       0       0       0       0
  4011 ;;      Locals:         3       0       0       0       0       0       0
  4012 ;;      Temps:          3       0       0       0       0       0       0
  4013 ;;      Totals:         7       0       0       0       0       0       0
  4014 ;;Total ram usage:        7 bytes
  4015 ;; Hardware stack levels used:    1
  4016 ;; Hardware stack levels required when called:    3
  4017 ;; This function calls:
  4018 ;;		_Read_b_eep
  4019 ;; This function is called by:
  4020 ;;		_doDM
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024                           	psect	text12
  4025  00263C                     __ptext12:
  4026                           	opt stack 0
  4027  00263C                     _doActionPulse:
  4028                           	opt stack 26
  4029                           
  4030                           ; BSR set to: 0
  4031                           ;incstack = 0
  4032                           ;incstack = 0
  4033                           ;doActionPulse@dmflags stored from wreg
  4034  00263C  CFE8 F00F          	movff	wreg,doActionPulse@dmflags
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;main.c: 1941: unsigned char i;
  4038                           ;main.c: 1942: unsigned char val;
  4039                           ;main.c: 1944: for ( i = 0; i < 8; i++ ) {
  4040  002640  6A10               	clrf	doActionPulse@i,c
  4041  002642                     l9169:
  4042                           
  4043                           ;main.c: 1947: if ( !( arg & ( 1 << i ) ) ) continue;
  4044  002642  C010  F00B         	movff	doActionPulse@i,??_doActionPulse
  4045  002646  0E01               	movlw	1
  4046  002648  6E0C               	movwf	(??_doActionPulse+1)& (0+255),c
  4047  00264A  2A0B               	incf	??_doActionPulse,f,c
  4048  00264C  D002               	goto	u10384
  4049  00264E                     u10385:
  4050  00264E  90D8               	bcf	status,0,c
  4051  002650  360C               	rlcf	??_doActionPulse+1,f,c
  4052  002652                     u10384:
  4053  002652  2E0B               	decfsz	??_doActionPulse,f,c
  4054  002654  D7FC               	goto	u10385
  4055  002656  500C               	movf	??_doActionPulse+1,w,c
  4056  002658  140A               	andwf	doActionPulse@arg,w,c
  4057  00265A  E101 D0EA          	bz	l9219
  4058                           
  4059                           ;main.c: 1950: if ( dmflags & 0x10 ) {
  4060  00265E  A80F               	btfss	doActionPulse@dmflags,4,c
  4061  002660  D011               	goto	l494
  4062                           
  4063                           ;main.c: 1951: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  4064  002662  90D8               	bcf	status,0,c
  4065  002664  3410               	rlcf	doActionPulse@i,w,c
  4066  002666  6E0B               	movwf	??_doActionPulse& (0+255),c
  4067  002668  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4068  00266A  360C               	rlcf	(??_doActionPulse+1)& (0+255),f,c
  4069  00266C  0E75               	movlw	117
  4070  00266E  240B               	addwf	??_doActionPulse,w,c
  4071  002670  6E08               	movwf	?_Read_b_eep,c
  4072  002672  0E00               	movlw	0
  4073  002674  200C               	addwfc	??_doActionPulse+1,w,c
  4074  002676  6E09               	movwf	?_Read_b_eep+1,c
  4075  002678  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4076  00267C  0100               	movlb	0	; () banked
  4077  00267E  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  4078  002680  E001 D0D7          	bnz	l9219
  4079  002684                     l494:
  4080                           
  4081                           ;main.c: 1954: }
  4082                           ;main.c: 1955: }
  4083                           ;main.c: 1958: if ( dmflags & 0x08 ) {
  4084  002684  A60F               	btfss	doActionPulse@dmflags,3,c
  4085  002686  D011               	goto	l9181
  4086                           
  4087                           ;main.c: 1959: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  4088  002688  90D8               	bcf	status,0,c
  4089  00268A  3410               	rlcf	doActionPulse@i,w,c
  4090  00268C  6E0B               	movwf	??_doActionPulse& (0+255),c
  4091  00268E  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4092  002690  360C               	rlcf	(??_doActionPulse+1)& (0+255),f,c
  4093  002692  0E76               	movlw	118
  4094  002694  240B               	addwf	??_doActionPulse,w,c
  4095  002696  6E08               	movwf	?_Read_b_eep,c
  4096  002698  0E00               	movlw	0
  4097  00269A  200C               	addwfc	??_doActionPulse+1,w,c
  4098  00269C  6E09               	movwf	?_Read_b_eep+1,c
  4099  00269E  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4100  0026A2  0100               	movlb	0	; () banked
  4101  0026A4  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4102  0026A6  E001 D0C4          	bnz	l9219
  4103  0026AA                     l9181:
  4104                           
  4105                           ;main.c: 1962: }
  4106                           ;main.c: 1963: }
  4107                           ;main.c: 1965: val = Read_b_eep(0x43 + 10 + i);
  4108  0026AA  0E4D               	movlw	77
  4109  0026AC  2410               	addwf	doActionPulse@i,w,c
  4110  0026AE  6E08               	movwf	?_Read_b_eep,c
  4111  0026B0  6A09               	clrf	?_Read_b_eep+1,c
  4112  0026B2  0E00               	movlw	0
  4113  0026B4  2209               	addwfc	?_Read_b_eep+1,f,c
  4114  0026B6  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4115  0026BA  6E0E               	movwf	doActionPulse@val,c
  4116                           
  4117                           ;main.c: 1968: if ( !( val & 0x80 ) ) continue;
  4118  0026BC  AE0E               	btfss	doActionPulse@val,7,c
  4119  0026BE  D0B9               	goto	l9219
  4120  0026C0  D0A8               	goto	l9217
  4121  0026C2                     l500:
  4122                           
  4123                           ;main.c: 1973: LATBbits.LATB4 = 0;
  4124  0026C2  988A               	bcf	3978,4,c	;volatile
  4125                           
  4126                           ;main.c: 1974: relay_pulse_flags |= 0x01;
  4127  0026C4  0100               	movlb	0	; () banked
  4128  0026C6  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;main.c: 1975: relay_pulse_timer[ 0 ] =
  4132                           ;main.c: 1976: Read_b_eep(0x43 + 18) * 256 +
  4133                           ;main.c: 1977: Read_b_eep(0x43 + 19);
  4134  0026C8  6A09               	clrf	?_Read_b_eep+1,c
  4135  0026CA  0E56               	movlw	86
  4136  0026CC  6E08               	movwf	?_Read_b_eep,c
  4137  0026CE  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4138  0026D2  6E0B               	movwf	??_doActionPulse& (0+255),c
  4139  0026D4  6A09               	clrf	?_Read_b_eep+1,c
  4140  0026D6  0E55               	movlw	85
  4141  0026D8  6E08               	movwf	?_Read_b_eep,c
  4142  0026DA  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4143  0026DE  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4144  0026E0  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4145  0026E2  500B               	movf	??_doActionPulse,w,c
  4146  0026E4  240C               	addwf	??_doActionPulse+1,w,c
  4147  0026E6  0100               	movlb	0	; () banked
  4148  0026E8  6F70               	movwf	_relay_pulse_timer& (0+255),b
  4149  0026EA  0E00               	movlw	0
  4150  0026EC  200D               	addwfc	??_doActionPulse+2,w,c
  4151  0026EE  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  4152                           
  4153                           ;main.c: 1978: break;
  4154  0026F0  D0A0               	goto	l9219
  4155  0026F2                     l502:
  4156                           
  4157                           ;main.c: 1981: LATBbits.LATB1 = 0;
  4158  0026F2  928A               	bcf	3978,1,c	;volatile
  4159                           
  4160                           ;main.c: 1982: relay_pulse_flags |= 0x02;
  4161  0026F4  0100               	movlb	0	; () banked
  4162  0026F6  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  4163                           
  4164                           ; BSR set to: 0
  4165                           ;main.c: 1983: relay_pulse_timer[ 1 ] =
  4166                           ;main.c: 1984: Read_b_eep(0x43 + 20) * 256 +
  4167                           ;main.c: 1985: Read_b_eep(0x43 + 21);
  4168  0026F8  6A09               	clrf	?_Read_b_eep+1,c
  4169  0026FA  0E58               	movlw	88
  4170  0026FC  6E08               	movwf	?_Read_b_eep,c
  4171  0026FE  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4172  002702  6E0B               	movwf	??_doActionPulse& (0+255),c
  4173  002704  6A09               	clrf	?_Read_b_eep+1,c
  4174  002706  0E57               	movlw	87
  4175  002708  6E08               	movwf	?_Read_b_eep,c
  4176  00270A  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4177  00270E  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4178  002710  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4179  002712  500B               	movf	??_doActionPulse,w,c
  4180  002714  240C               	addwf	??_doActionPulse+1,w,c
  4181  002716  0100               	movlb	0	; () banked
  4182  002718  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  4183  00271A  0E00               	movlw	0
  4184  00271C  200D               	addwfc	??_doActionPulse+2,w,c
  4185  00271E  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  4186                           
  4187                           ;main.c: 1986: break;
  4188  002720  D088               	goto	l9219
  4189  002722                     l503:
  4190                           
  4191                           ;main.c: 1989: LATBbits.LATB0 = 0;
  4192  002722  908A               	bcf	3978,0,c	;volatile
  4193                           
  4194                           ;main.c: 1990: relay_pulse_flags |= 0x04;
  4195  002724  0100               	movlb	0	; () banked
  4196  002726  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;main.c: 1991: relay_pulse_timer[ 2 ] =
  4200                           ;main.c: 1992: Read_b_eep(0x43 + 22) * 256 +
  4201                           ;main.c: 1993: Read_b_eep(0x43 + 23);
  4202  002728  6A09               	clrf	?_Read_b_eep+1,c
  4203  00272A  0E5A               	movlw	90
  4204  00272C  6E08               	movwf	?_Read_b_eep,c
  4205  00272E  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4206  002732  6E0B               	movwf	??_doActionPulse& (0+255),c
  4207  002734  6A09               	clrf	?_Read_b_eep+1,c
  4208  002736  0E59               	movlw	89
  4209  002738  6E08               	movwf	?_Read_b_eep,c
  4210  00273A  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4211  00273E  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4212  002740  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4213  002742  500B               	movf	??_doActionPulse,w,c
  4214  002744  240C               	addwf	??_doActionPulse+1,w,c
  4215  002746  0100               	movlb	0	; () banked
  4216  002748  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  4217  00274A  0E00               	movlw	0
  4218  00274C  200D               	addwfc	??_doActionPulse+2,w,c
  4219  00274E  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  4220                           
  4221                           ;main.c: 1994: break;
  4222  002750  D070               	goto	l9219
  4223  002752                     l504:
  4224                           
  4225                           ;main.c: 1997: LATCbits.LATC7 = 0;
  4226  002752  9E8B               	bcf	3979,7,c	;volatile
  4227                           
  4228                           ;main.c: 1998: relay_pulse_flags |= 0x08;
  4229  002754  0100               	movlb	0	; () banked
  4230  002756  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;main.c: 1999: relay_pulse_timer[ 3 ] =
  4234                           ;main.c: 2000: Read_b_eep(0x43 + 24) * 256 +
  4235                           ;main.c: 2001: Read_b_eep(0x43 + 25);
  4236  002758  6A09               	clrf	?_Read_b_eep+1,c
  4237  00275A  0E5C               	movlw	92
  4238  00275C  6E08               	movwf	?_Read_b_eep,c
  4239  00275E  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4240  002762  6E0B               	movwf	??_doActionPulse& (0+255),c
  4241  002764  6A09               	clrf	?_Read_b_eep+1,c
  4242  002766  0E5B               	movlw	91
  4243  002768  6E08               	movwf	?_Read_b_eep,c
  4244  00276A  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4245  00276E  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4246  002770  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4247  002772  500B               	movf	??_doActionPulse,w,c
  4248  002774  240C               	addwf	??_doActionPulse+1,w,c
  4249  002776  0100               	movlb	0	; () banked
  4250  002778  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  4251  00277A  0E00               	movlw	0
  4252  00277C  200D               	addwfc	??_doActionPulse+2,w,c
  4253  00277E  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  4254                           
  4255                           ;main.c: 2002: break;
  4256  002780  D058               	goto	l9219
  4257  002782                     l505:
  4258                           
  4259                           ;main.c: 2005: LATCbits.LATC6 = 0;
  4260  002782  9C8B               	bcf	3979,6,c	;volatile
  4261                           
  4262                           ;main.c: 2006: relay_pulse_flags |= 0x10;
  4263  002784  0100               	movlb	0	; () banked
  4264  002786  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  4265                           
  4266                           ; BSR set to: 0
  4267                           ;main.c: 2007: relay_pulse_timer[ 4 ] =
  4268                           ;main.c: 2008: Read_b_eep(0x43 + 26) * 256 +
  4269                           ;main.c: 2009: Read_b_eep(0x43 + 27);
  4270  002788  6A09               	clrf	?_Read_b_eep+1,c
  4271  00278A  0E5E               	movlw	94
  4272  00278C  6E08               	movwf	?_Read_b_eep,c
  4273  00278E  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4274  002792  6E0B               	movwf	??_doActionPulse& (0+255),c
  4275  002794  6A09               	clrf	?_Read_b_eep+1,c
  4276  002796  0E5D               	movlw	93
  4277  002798  6E08               	movwf	?_Read_b_eep,c
  4278  00279A  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4279  00279E  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4280  0027A0  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4281  0027A2  500B               	movf	??_doActionPulse,w,c
  4282  0027A4  240C               	addwf	??_doActionPulse+1,w,c
  4283  0027A6  0100               	movlb	0	; () banked
  4284  0027A8  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  4285  0027AA  0E00               	movlw	0
  4286  0027AC  200D               	addwfc	??_doActionPulse+2,w,c
  4287  0027AE  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  4288                           
  4289                           ;main.c: 2010: break;
  4290  0027B0  D040               	goto	l9219
  4291  0027B2                     l506:
  4292                           
  4293                           ;main.c: 2013: LATCbits.LATC5 = 0;
  4294  0027B2  9A8B               	bcf	3979,5,c	;volatile
  4295                           
  4296                           ;main.c: 2014: relay_pulse_flags |= 0x20;
  4297  0027B4  0100               	movlb	0	; () banked
  4298  0027B6  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  4299                           
  4300                           ; BSR set to: 0
  4301                           ;main.c: 2015: relay_pulse_timer[ 5 ] =
  4302                           ;main.c: 2016: Read_b_eep(0x43 + 28) * 256 +
  4303                           ;main.c: 2017: Read_b_eep(0x43 + 29);
  4304  0027B8  6A09               	clrf	?_Read_b_eep+1,c
  4305  0027BA  0E60               	movlw	96
  4306  0027BC  6E08               	movwf	?_Read_b_eep,c
  4307  0027BE  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4308  0027C2  6E0B               	movwf	??_doActionPulse& (0+255),c
  4309  0027C4  6A09               	clrf	?_Read_b_eep+1,c
  4310  0027C6  0E5F               	movlw	95
  4311  0027C8  6E08               	movwf	?_Read_b_eep,c
  4312  0027CA  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4313  0027CE  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4314  0027D0  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4315  0027D2  500B               	movf	??_doActionPulse,w,c
  4316  0027D4  240C               	addwf	??_doActionPulse+1,w,c
  4317  0027D6  0100               	movlb	0	; () banked
  4318  0027D8  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  4319  0027DA  0E00               	movlw	0
  4320  0027DC  200D               	addwfc	??_doActionPulse+2,w,c
  4321  0027DE  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  4322                           
  4323                           ;main.c: 2018: break;
  4324  0027E0  D028               	goto	l9219
  4325  0027E2                     l507:
  4326                           
  4327                           ;main.c: 2021: LATCbits.LATC4 = 0;
  4328  0027E2  988B               	bcf	3979,4,c	;volatile
  4329                           
  4330                           ;main.c: 2022: relay_pulse_flags |= 0x40;
  4331  0027E4  0100               	movlb	0	; () banked
  4332  0027E6  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  4333                           
  4334                           ; BSR set to: 0
  4335                           ;main.c: 2023: relay_pulse_timer[ 6 ] =
  4336                           ;main.c: 2024: Read_b_eep(0x43 + 30) * 256 +
  4337                           ;main.c: 2025: Read_b_eep(0x43 + 31);
  4338  0027E8  6A09               	clrf	?_Read_b_eep+1,c
  4339  0027EA  0E62               	movlw	98
  4340  0027EC  6E08               	movwf	?_Read_b_eep,c
  4341  0027EE  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4342  0027F2  6E0B               	movwf	??_doActionPulse& (0+255),c
  4343  0027F4  6A09               	clrf	?_Read_b_eep+1,c
  4344  0027F6  0E61               	movlw	97
  4345  0027F8  6E08               	movwf	?_Read_b_eep,c
  4346  0027FA  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4347  0027FE  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4348  002800  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4349  002802  500B               	movf	??_doActionPulse,w,c
  4350  002804  240C               	addwf	??_doActionPulse+1,w,c
  4351  002806  0100               	movlb	0	; () banked
  4352  002808  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  4353  00280A  0E00               	movlw	0
  4354  00280C  200D               	addwfc	??_doActionPulse+2,w,c
  4355  00280E  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  4356                           
  4357                           ;main.c: 2026: break;
  4358  002810  D010               	goto	l9219
  4359  002812                     l9217:
  4360  002812  5010               	movf	doActionPulse@i,w,c
  4361                           
  4362                           ; Switch size 1, requested type "space"
  4363                           ; Number of cases is 7, Range of values is 0 to 6
  4364                           ; switch strategies available:
  4365                           ; Name         Instructions Cycles
  4366                           ; simple_byte           22    12 (average)
  4367                           ;	Chosen strategy is simple_byte
  4368  002814  E101 D755          	bz	l500
  4369  002818  0A01               	xorlw	1	; case 1
  4370  00281A  E101 D76A          	bz	l502
  4371  00281E  0A03               	xorlw	3	; case 2
  4372  002820  E080               	bz	l503
  4373  002822  0A01               	xorlw	1	; case 3
  4374  002824  E096               	bz	l504
  4375  002826  0A07               	xorlw	7	; case 4
  4376  002828  E0AC               	bz	l505
  4377  00282A  0A01               	xorlw	1	; case 5
  4378  00282C  E0C2               	bz	l506
  4379  00282E  0A03               	xorlw	3	; case 6
  4380  002830  E0D8               	bz	l507
  4381  002832                     l9219:
  4382  002832  2A10               	incf	doActionPulse@i,f,c
  4383  002834  0E07               	movlw	7
  4384  002836  6410               	cpfsgt	doActionPulse@i,c
  4385  002838  D704               	goto	l9169
  4386  00283A  0C07               	retlw	7
  4387  00283C                     __end_of_doActionPulse:
  4388                           	opt stack 0
  4389                           tblptru	equ	0xFF8
  4390                           tblptrh	equ	0xFF7
  4391                           tblptrl	equ	0xFF6
  4392                           tablat	equ	0xFF5
  4393                           prodh	equ	0xFF4
  4394                           prodl	equ	0xFF3
  4395                           intcon	equ	0xFF2
  4396                           postinc0	equ	0xFEE
  4397                           wreg	equ	0xFE8
  4398                           indf1	equ	0xFE7
  4399                           fsr1h	equ	0xFE2
  4400                           fsr1l	equ	0xFE1
  4401                           indf2	equ	0xFDF
  4402                           postinc2	equ	0xFDE
  4403                           postdec2	equ	0xFDD
  4404                           plusw2	equ	0xFDB
  4405                           fsr2h	equ	0xFDA
  4406                           fsr2l	equ	0xFD9
  4407                           status	equ	0xFD8
  4408                           
  4409 ;; *************** function _doActionOn *****************
  4410 ;; Defined at:
  4411 ;;		line 1737 in file "../main.c"
  4412 ;; Parameters:    Size  Location     Type
  4413 ;;  dmflags         1    wreg     unsigned char 
  4414 ;;  arg             1   80[COMRAM] unsigned char 
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;  dmflags         1   25[BANK0 ] unsigned char 
  4417 ;;  i               1   27[BANK0 ] unsigned char 
  4418 ;;  val             1   26[BANK0 ] unsigned char 
  4419 ;; Return value:  Size  Location     Type
  4420 ;;		None               void
  4421 ;; Registers used:
  4422 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4423 ;; Tracked objects:
  4424 ;;		On entry : F/0
  4425 ;;		On exit  : F/0
  4426 ;;		Unchanged: 0/0
  4427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4428 ;;      Params:         1       0       0       0       0       0       0
  4429 ;;      Locals:         0       3       0       0       0       0       0
  4430 ;;      Temps:          0       3       0       0       0       0       0
  4431 ;;      Totals:         1       6       0       0       0       0       0
  4432 ;;Total ram usage:        7 bytes
  4433 ;; Hardware stack levels used:    1
  4434 ;; Hardware stack levels required when called:    7
  4435 ;; This function calls:
  4436 ;;		_Read_b_eep
  4437 ;;		_SendInformationEvent
  4438 ;; This function is called by:
  4439 ;;		_doDM
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443                           	psect	text13
  4444  001F96                     __ptext13:
  4445                           	opt stack 0
  4446  001F96                     _doActionOn:
  4447                           	opt stack 22
  4448                           
  4449                           ;incstack = 0
  4450                           ;incstack = 0
  4451                           ;doActionOn@dmflags stored from wreg
  4452  001F96  CFE8 F0CA          	movff	wreg,doActionOn@dmflags
  4453                           
  4454                           ; BSR set to: 0
  4455                           ;main.c: 1739: unsigned char i;
  4456                           ;main.c: 1740: unsigned char val;
  4457                           ;main.c: 1742: for (i = 0; i < 8; i++) {
  4458  001F9A  6BCC               	clrf	doActionOn@i& (0+255),b
  4459  001F9C                     l10935:
  4460                           
  4461                           ; BSR set to: 0
  4462                           ;main.c: 1745: if ( !( arg & ( 1 << i ) ) ) continue;
  4463  001F9C  C0CC  F0C7         	movff	doActionOn@i,??_doActionOn
  4464  001FA0  0E01               	movlw	1
  4465  001FA2  6FC8               	movwf	(??_doActionOn+1)& (0+255),b
  4466  001FA4  2BC7               	incf	??_doActionOn& (0+255),f,b
  4467  001FA6  D002               	goto	u13194
  4468  001FA8                     u13195:
  4469  001FA8  90D8               	bcf	status,0,c
  4470  001FAA  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4471  001FAC                     u13194:
  4472  001FAC  2FC7               	decfsz	??_doActionOn& (0+255),f,b
  4473  001FAE  D7FC               	goto	u13195
  4474  001FB0  51C8               	movf	(??_doActionOn+1)& (0+255),w,b
  4475  001FB2  1451               	andwf	doActionOn@arg,w,c
  4476  001FB4  E101 D137          	bz	l10991
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;main.c: 1748: if ( dmflags & 0x10 ) {
  4480  001FB8  A9CA               	btfss	doActionOn@dmflags& (0+255),4,b
  4481  001FBA  D011               	goto	l441
  4482                           
  4483                           ; BSR set to: 0
  4484                           ;main.c: 1749: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  4485  001FBC  90D8               	bcf	status,0,c
  4486  001FBE  35CC               	rlcf	doActionOn@i& (0+255),w,b
  4487  001FC0  6FC7               	movwf	??_doActionOn& (0+255),b
  4488  001FC2  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4489  001FC4  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4490  001FC6  0E75               	movlw	117
  4491  001FC8  25C7               	addwf	??_doActionOn& (0+255),w,b
  4492  001FCA  6E08               	movwf	?_Read_b_eep,c
  4493  001FCC  0E00               	movlw	0
  4494  001FCE  21C8               	addwfc	(??_doActionOn+1)& (0+255),w,b
  4495  001FD0  6E09               	movwf	?_Read_b_eep+1,c
  4496  001FD2  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4497  001FD6  0100               	movlb	0	; () banked
  4498  001FD8  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  4499  001FDA  E001 D124          	bnz	l10991
  4500  001FDE                     l441:
  4501                           
  4502                           ; BSR set to: 0
  4503                           ;main.c: 1752: }
  4504                           ;main.c: 1753: }
  4505                           ;main.c: 1756: if ( dmflags & 0x08 ) {
  4506  001FDE  A7CA               	btfss	doActionOn@dmflags& (0+255),3,b
  4507  001FE0  D011               	goto	l10947
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;main.c: 1757: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  4511  001FE2  90D8               	bcf	status,0,c
  4512  001FE4  35CC               	rlcf	doActionOn@i& (0+255),w,b
  4513  001FE6  6FC7               	movwf	??_doActionOn& (0+255),b
  4514  001FE8  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4515  001FEA  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4516  001FEC  0E76               	movlw	118
  4517  001FEE  25C7               	addwf	??_doActionOn& (0+255),w,b
  4518  001FF0  6E08               	movwf	?_Read_b_eep,c
  4519  001FF2  0E00               	movlw	0
  4520  001FF4  21C8               	addwfc	(??_doActionOn+1)& (0+255),w,b
  4521  001FF6  6E09               	movwf	?_Read_b_eep+1,c
  4522  001FF8  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4523  001FFC  0100               	movlb	0	; () banked
  4524  001FFE  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4525  002000  E001 D111          	bnz	l10991
  4526  002004                     l10947:
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;main.c: 1760: }
  4530                           ;main.c: 1761: }
  4531                           ;main.c: 1763: val = Read_b_eep(0x43 + 10 + i);
  4532  002004  0E4D               	movlw	77
  4533  002006  25CC               	addwf	doActionOn@i& (0+255),w,b
  4534  002008  6E08               	movwf	?_Read_b_eep,c
  4535  00200A  6A09               	clrf	?_Read_b_eep+1,c
  4536  00200C  0E00               	movlw	0
  4537  00200E  2209               	addwfc	?_Read_b_eep+1,f,c
  4538  002010  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4539  002014  0100               	movlb	0	; () banked
  4540  002016  6FCB               	movwf	doActionOn@val& (0+255),b
  4541                           
  4542                           ; BSR set to: 0
  4543                           ;main.c: 1766: if ( !( val & 0x80 ) ) continue;
  4544  002018  AFCB               	btfss	doActionOn@val& (0+255),7,b
  4545  00201A  D105               	goto	l10991
  4546  00201C  D0E0               	goto	l10983
  4547  00201E                     l447:
  4548                           
  4549                           ; BSR set to: 0
  4550                           ;main.c: 1771: LATBbits.LATB4 = 1;
  4551  00201E  888A               	bsf	3978,4,c	;volatile
  4552                           
  4553                           ; BSR set to: 0
  4554                           ;main.c: 1773: if (Read_b_eep(0x43 + 10) & 0x04 ) {
  4555  002020  6A09               	clrf	?_Read_b_eep+1,c
  4556  002022  0E4D               	movlw	77
  4557  002024  6E08               	movwf	?_Read_b_eep,c
  4558  002026  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4559  00202A  0100               	movlb	0	; () banked
  4560  00202C  6FC7               	movwf	??_doActionOn& (0+255),b
  4561  00202E  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4562  002030  D0E8               	goto	l449
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;main.c: 1774: relay_protection_timer[ 0 ] =
  4566                           ;main.c: 1775: Read_b_eep(0x43 + 34) * 256 +
  4567                           ;main.c: 1776: Read_b_eep(0x43 + 35);
  4568  002032  6A09               	clrf	?_Read_b_eep+1,c
  4569  002034  0E66               	movlw	102
  4570  002036  6E08               	movwf	?_Read_b_eep,c
  4571  002038  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4572  00203C  0100               	movlb	0	; () banked
  4573  00203E  6FC7               	movwf	??_doActionOn& (0+255),b
  4574  002040  6A09               	clrf	?_Read_b_eep+1,c
  4575  002042  0E65               	movlw	101
  4576  002044  6E08               	movwf	?_Read_b_eep,c
  4577  002046  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4578  00204A  0100               	movlb	0	; () banked
  4579  00204C  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4580  00204E  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4581  002050  51C7               	movf	??_doActionOn& (0+255),w,b
  4582  002052  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4583  002054  6F60               	movwf	_relay_protection_timer& (0+255),b
  4584  002056  0E00               	movlw	0
  4585  002058  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4586  00205A  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  4587  00205C  D0D2               	goto	l449
  4588  00205E                     l450:
  4589                           
  4590                           ; BSR set to: 0
  4591                           ;main.c: 1781: LATBbits.LATB1 = 1;
  4592  00205E  828A               	bsf	3978,1,c	;volatile
  4593                           
  4594                           ; BSR set to: 0
  4595                           ;main.c: 1783: if (Read_b_eep(0x43 + 11) & 0x04 ) {
  4596  002060  6A09               	clrf	?_Read_b_eep+1,c
  4597  002062  0E4E               	movlw	78
  4598  002064  6E08               	movwf	?_Read_b_eep,c
  4599  002066  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4600  00206A  0100               	movlb	0	; () banked
  4601  00206C  6FC7               	movwf	??_doActionOn& (0+255),b
  4602  00206E  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4603  002070  D0C8               	goto	l449
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;main.c: 1784: relay_protection_timer[ 1 ] =
  4607                           ;main.c: 1785: Read_b_eep(0x43 + 36) * 256 +
  4608                           ;main.c: 1786: Read_b_eep(0x43 + 37);
  4609  002072  6A09               	clrf	?_Read_b_eep+1,c
  4610  002074  0E68               	movlw	104
  4611  002076  6E08               	movwf	?_Read_b_eep,c
  4612  002078  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4613  00207C  0100               	movlb	0	; () banked
  4614  00207E  6FC7               	movwf	??_doActionOn& (0+255),b
  4615  002080  6A09               	clrf	?_Read_b_eep+1,c
  4616  002082  0E67               	movlw	103
  4617  002084  6E08               	movwf	?_Read_b_eep,c
  4618  002086  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4619  00208A  0100               	movlb	0	; () banked
  4620  00208C  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4621  00208E  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4622  002090  51C7               	movf	??_doActionOn& (0+255),w,b
  4623  002092  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4624  002094  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  4625  002096  0E00               	movlw	0
  4626  002098  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4627  00209A  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  4628  00209C  D0B2               	goto	l449
  4629  00209E                     l452:
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;main.c: 1791: LATBbits.LATB0 = 1;
  4633  00209E  808A               	bsf	3978,0,c	;volatile
  4634                           
  4635                           ; BSR set to: 0
  4636                           ;main.c: 1793: if (Read_b_eep(0x43 + 12) & 0x04 ) {
  4637  0020A0  6A09               	clrf	?_Read_b_eep+1,c
  4638  0020A2  0E4F               	movlw	79
  4639  0020A4  6E08               	movwf	?_Read_b_eep,c
  4640  0020A6  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4641  0020AA  0100               	movlb	0	; () banked
  4642  0020AC  6FC7               	movwf	??_doActionOn& (0+255),b
  4643  0020AE  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4644  0020B0  D0A8               	goto	l449
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;main.c: 1794: relay_protection_timer[ 2 ] =
  4648                           ;main.c: 1795: Read_b_eep(0x43 + 38) * 256 +
  4649                           ;main.c: 1796: Read_b_eep(0x43 + 39);
  4650  0020B2  6A09               	clrf	?_Read_b_eep+1,c
  4651  0020B4  0E6A               	movlw	106
  4652  0020B6  6E08               	movwf	?_Read_b_eep,c
  4653  0020B8  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4654  0020BC  0100               	movlb	0	; () banked
  4655  0020BE  6FC7               	movwf	??_doActionOn& (0+255),b
  4656  0020C0  6A09               	clrf	?_Read_b_eep+1,c
  4657  0020C2  0E69               	movlw	105
  4658  0020C4  6E08               	movwf	?_Read_b_eep,c
  4659  0020C6  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4660  0020CA  0100               	movlb	0	; () banked
  4661  0020CC  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4662  0020CE  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4663  0020D0  51C7               	movf	??_doActionOn& (0+255),w,b
  4664  0020D2  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4665  0020D4  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  4666  0020D6  0E00               	movlw	0
  4667  0020D8  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4668  0020DA  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  4669  0020DC  D092               	goto	l449
  4670  0020DE                     l454:
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;main.c: 1801: LATCbits.LATC7 = 1;
  4674  0020DE  8E8B               	bsf	3979,7,c	;volatile
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;main.c: 1803: if ( Read_b_eep(0x43 + 13) & 0x04 ) {
  4678  0020E0  6A09               	clrf	?_Read_b_eep+1,c
  4679  0020E2  0E50               	movlw	80
  4680  0020E4  6E08               	movwf	?_Read_b_eep,c
  4681  0020E6  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4682  0020EA  0100               	movlb	0	; () banked
  4683  0020EC  6FC7               	movwf	??_doActionOn& (0+255),b
  4684  0020EE  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4685  0020F0  D088               	goto	l449
  4686                           
  4687                           ; BSR set to: 0
  4688                           ;main.c: 1804: relay_protection_timer[ 3 ] =
  4689                           ;main.c: 1805: Read_b_eep(0x43 + 40) * 256 +
  4690                           ;main.c: 1806: Read_b_eep(0x43 + 41);
  4691  0020F2  6A09               	clrf	?_Read_b_eep+1,c
  4692  0020F4  0E6C               	movlw	108
  4693  0020F6  6E08               	movwf	?_Read_b_eep,c
  4694  0020F8  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4695  0020FC  0100               	movlb	0	; () banked
  4696  0020FE  6FC7               	movwf	??_doActionOn& (0+255),b
  4697  002100  6A09               	clrf	?_Read_b_eep+1,c
  4698  002102  0E6B               	movlw	107
  4699  002104  6E08               	movwf	?_Read_b_eep,c
  4700  002106  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4701  00210A  0100               	movlb	0	; () banked
  4702  00210C  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4703  00210E  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4704  002110  51C7               	movf	??_doActionOn& (0+255),w,b
  4705  002112  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4706  002114  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  4707  002116  0E00               	movlw	0
  4708  002118  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4709  00211A  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  4710  00211C  D072               	goto	l449
  4711  00211E                     l456:
  4712                           
  4713                           ; BSR set to: 0
  4714                           ;main.c: 1811: LATCbits.LATC6 = 1;
  4715  00211E  8C8B               	bsf	3979,6,c	;volatile
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;main.c: 1813: if (Read_b_eep(0x43 + 14) & 0x04 ) {
  4719  002120  6A09               	clrf	?_Read_b_eep+1,c
  4720  002122  0E51               	movlw	81
  4721  002124  6E08               	movwf	?_Read_b_eep,c
  4722  002126  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4723  00212A  0100               	movlb	0	; () banked
  4724  00212C  6FC7               	movwf	??_doActionOn& (0+255),b
  4725  00212E  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4726  002130  D068               	goto	l449
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;main.c: 1814: relay_protection_timer[ 4 ] =
  4730                           ;main.c: 1815: Read_b_eep(0x43 + 42) * 256 +
  4731                           ;main.c: 1816: Read_b_eep(0x43 + 43);
  4732  002132  6A09               	clrf	?_Read_b_eep+1,c
  4733  002134  0E6E               	movlw	110
  4734  002136  6E08               	movwf	?_Read_b_eep,c
  4735  002138  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4736  00213C  0100               	movlb	0	; () banked
  4737  00213E  6FC7               	movwf	??_doActionOn& (0+255),b
  4738  002140  6A09               	clrf	?_Read_b_eep+1,c
  4739  002142  0E6D               	movlw	109
  4740  002144  6E08               	movwf	?_Read_b_eep,c
  4741  002146  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4742  00214A  0100               	movlb	0	; () banked
  4743  00214C  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4744  00214E  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4745  002150  51C7               	movf	??_doActionOn& (0+255),w,b
  4746  002152  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4747  002154  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  4748  002156  0E00               	movlw	0
  4749  002158  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4750  00215A  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  4751  00215C  D052               	goto	l449
  4752  00215E                     l458:
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;main.c: 1821: LATCbits.LATC5 = 1;
  4756  00215E  8A8B               	bsf	3979,5,c	;volatile
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;main.c: 1823: if (Read_b_eep(0x43 + 15) & 0x04) {
  4760  002160  6A09               	clrf	?_Read_b_eep+1,c
  4761  002162  0E52               	movlw	82
  4762  002164  6E08               	movwf	?_Read_b_eep,c
  4763  002166  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4764  00216A  0100               	movlb	0	; () banked
  4765  00216C  6FC7               	movwf	??_doActionOn& (0+255),b
  4766  00216E  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4767  002170  D048               	goto	l449
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;main.c: 1824: relay_protection_timer[ 5 ] =
  4771                           ;main.c: 1825: Read_b_eep(0x43 + 44) * 256 +
  4772                           ;main.c: 1826: Read_b_eep(0x43 + 45);
  4773  002172  6A09               	clrf	?_Read_b_eep+1,c
  4774  002174  0E70               	movlw	112
  4775  002176  6E08               	movwf	?_Read_b_eep,c
  4776  002178  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4777  00217C  0100               	movlb	0	; () banked
  4778  00217E  6FC7               	movwf	??_doActionOn& (0+255),b
  4779  002180  6A09               	clrf	?_Read_b_eep+1,c
  4780  002182  0E6F               	movlw	111
  4781  002184  6E08               	movwf	?_Read_b_eep,c
  4782  002186  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4783  00218A  0100               	movlb	0	; () banked
  4784  00218C  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4785  00218E  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4786  002190  51C7               	movf	??_doActionOn& (0+255),w,b
  4787  002192  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4788  002194  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  4789  002196  0E00               	movlw	0
  4790  002198  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4791  00219A  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  4792  00219C  D032               	goto	l449
  4793  00219E                     l460:
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;main.c: 1831: LATCbits.LATC4 = 1;
  4797  00219E  888B               	bsf	3979,4,c	;volatile
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;main.c: 1833: if ( Read_b_eep(0x43 + 16) & 0x04) {
  4801  0021A0  6A09               	clrf	?_Read_b_eep+1,c
  4802  0021A2  0E53               	movlw	83
  4803  0021A4  6E08               	movwf	?_Read_b_eep,c
  4804  0021A6  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4805  0021AA  0100               	movlb	0	; () banked
  4806  0021AC  6FC7               	movwf	??_doActionOn& (0+255),b
  4807  0021AE  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4808  0021B0  D028               	goto	l449
  4809                           
  4810                           ; BSR set to: 0
  4811                           ;main.c: 1834: relay_protection_timer[ 6 ] =
  4812                           ;main.c: 1835: Read_b_eep(0x43 + 46) * 256 +
  4813                           ;main.c: 1836: Read_b_eep(0x43 + 47);
  4814  0021B2  6A09               	clrf	?_Read_b_eep+1,c
  4815  0021B4  0E72               	movlw	114
  4816  0021B6  6E08               	movwf	?_Read_b_eep,c
  4817  0021B8  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4818  0021BC  0100               	movlb	0	; () banked
  4819  0021BE  6FC7               	movwf	??_doActionOn& (0+255),b
  4820  0021C0  6A09               	clrf	?_Read_b_eep+1,c
  4821  0021C2  0E71               	movlw	113
  4822  0021C4  6E08               	movwf	?_Read_b_eep,c
  4823  0021C6  ECB5  F01E         	call	_Read_b_eep	;wreg free
  4824  0021CA  0100               	movlb	0	; () banked
  4825  0021CC  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4826  0021CE  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4827  0021D0  51C7               	movf	??_doActionOn& (0+255),w,b
  4828  0021D2  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4829  0021D4  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  4830  0021D6  0E00               	movlw	0
  4831  0021D8  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4832  0021DA  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  4833  0021DC  D012               	goto	l449
  4834  0021DE                     l10983:
  4835                           
  4836                           ; BSR set to: 0
  4837  0021DE  51CC               	movf	doActionOn@i& (0+255),w,b
  4838                           
  4839                           ; Switch size 1, requested type "space"
  4840                           ; Number of cases is 7, Range of values is 0 to 6
  4841                           ; switch strategies available:
  4842                           ; Name         Instructions Cycles
  4843                           ; simple_byte           22    12 (average)
  4844                           ;	Chosen strategy is simple_byte
  4845  0021E0  E101 D71D          	bz	l447
  4846  0021E4  0A01               	xorlw	1	; case 1
  4847  0021E6  E101 D73A          	bz	l450
  4848  0021EA  0A03               	xorlw	3	; case 2
  4849  0021EC  E101 D757          	bz	l452
  4850  0021F0  0A01               	xorlw	1	; case 3
  4851  0021F2  E101 D774          	bz	l454
  4852  0021F6  0A07               	xorlw	7	; case 4
  4853  0021F8  E092               	bz	l456
  4854  0021FA  0A01               	xorlw	1	; case 5
  4855  0021FC  E0B0               	bz	l458
  4856  0021FE  0A03               	xorlw	3	; case 6
  4857  002200  E0CE               	bz	l460
  4858  002202                     l449:
  4859                           
  4860                           ; BSR set to: 0
  4861                           ;main.c: 1843: if ( val & 0x08 ) {
  4862  002202  A7CB               	btfss	doActionOn@val& (0+255),3,b
  4863  002204  D007               	goto	l10987
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;main.c: 1844: SendInformationEvent( i, 20, 3 );
  4867  002206  0E14               	movlw	20
  4868  002208  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4869  00220A  0E03               	movlw	3
  4870  00220C  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4871  00220E  51CC               	movf	doActionOn@i& (0+255),w,b
  4872  002210  EC11  F01C         	call	_SendInformationEvent
  4873  002214                     l10987:
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;main.c: 1845: }
  4877                           ;main.c: 1848: if ( val & 0x20 ) {
  4878  002214  ABCB               	btfss	doActionOn@val& (0+255),5,b
  4879  002216  D007               	goto	l10991
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;main.c: 1849: SendInformationEvent( i, 20, 25 );
  4883  002218  0E14               	movlw	20
  4884  00221A  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4885  00221C  0E19               	movlw	25
  4886  00221E  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4887  002220  51CC               	movf	doActionOn@i& (0+255),w,b
  4888  002222  EC11  F01C         	call	_SendInformationEvent
  4889  002226                     l10991:
  4890                           
  4891                           ; BSR set to: 0
  4892  002226  2BCC               	incf	doActionOn@i& (0+255),f,b
  4893                           
  4894                           ; BSR set to: 0
  4895  002228  0E07               	movlw	7
  4896  00222A  65CC               	cpfsgt	doActionOn@i& (0+255),b
  4897  00222C  D6B7               	goto	l10935
  4898                           
  4899                           ; BSR set to: 0
  4900  00222E  0C07               	retlw	7
  4901  002230                     __end_of_doActionOn:
  4902                           	opt stack 0
  4903                           tblptru	equ	0xFF8
  4904                           tblptrh	equ	0xFF7
  4905                           tblptrl	equ	0xFF6
  4906                           tablat	equ	0xFF5
  4907                           prodh	equ	0xFF4
  4908                           prodl	equ	0xFF3
  4909                           intcon	equ	0xFF2
  4910                           postinc0	equ	0xFEE
  4911                           wreg	equ	0xFE8
  4912                           indf1	equ	0xFE7
  4913                           fsr1h	equ	0xFE2
  4914                           fsr1l	equ	0xFE1
  4915                           indf2	equ	0xFDF
  4916                           postinc2	equ	0xFDE
  4917                           postdec2	equ	0xFDD
  4918                           plusw2	equ	0xFDB
  4919                           fsr2h	equ	0xFDA
  4920                           fsr2l	equ	0xFD9
  4921                           status	equ	0xFD8
  4922                           
  4923 ;; *************** function _doActionOff *****************
  4924 ;; Defined at:
  4925 ;;		line 1859 in file "../main.c"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;  dmflags         1    wreg     unsigned char 
  4928 ;;  arg             1   80[COMRAM] unsigned char 
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;  dmflags         1   24[BANK0 ] unsigned char 
  4931 ;;  i               1   26[BANK0 ] unsigned char 
  4932 ;;  val             1   25[BANK0 ] unsigned char 
  4933 ;; Return value:  Size  Location     Type
  4934 ;;		None               void
  4935 ;; Registers used:
  4936 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4937 ;; Tracked objects:
  4938 ;;		On entry : F/0
  4939 ;;		On exit  : F/0
  4940 ;;		Unchanged: 0/0
  4941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4942 ;;      Params:         1       0       0       0       0       0       0
  4943 ;;      Locals:         0       3       0       0       0       0       0
  4944 ;;      Temps:          0       2       0       0       0       0       0
  4945 ;;      Totals:         1       5       0       0       0       0       0
  4946 ;;Total ram usage:        6 bytes
  4947 ;; Hardware stack levels used:    1
  4948 ;; Hardware stack levels required when called:    7
  4949 ;; This function calls:
  4950 ;;		_Read_b_eep
  4951 ;;		_SendInformationEvent
  4952 ;; This function is called by:
  4953 ;;		_doApplicationOneSecondWork
  4954 ;;		_doDM
  4955 ;; This function uses a non-reentrant model
  4956 ;;
  4957                           
  4958                           	psect	text14
  4959  003210                     __ptext14:
  4960                           	opt stack 0
  4961  003210                     _doActionOff:
  4962                           	opt stack 22
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;incstack = 0
  4966                           ;incstack = 0
  4967                           ;doActionOff@dmflags stored from wreg
  4968  003210  CFE8 F0C9          	movff	wreg,doActionOff@dmflags
  4969                           
  4970                           ; BSR set to: 0
  4971                           ;main.c: 1861: unsigned char i;
  4972                           ;main.c: 1862: unsigned char val;
  4973                           ;main.c: 1864: for ( i = 0; i < 8; i++ ) {
  4974  003214  6BCB               	clrf	doActionOff@i& (0+255),b
  4975  003216                     l10441:
  4976                           
  4977                           ; BSR set to: 0
  4978                           ;main.c: 1867: if ( !( arg & ( 1 << i ) ) ) continue;
  4979  003216  C0CB  F0C7         	movff	doActionOff@i,??_doActionOff
  4980  00321A  0E01               	movlw	1
  4981  00321C  6FC8               	movwf	(??_doActionOff+1)& (0+255),b
  4982  00321E  2BC7               	incf	??_doActionOff& (0+255),f,b
  4983  003220  D002               	goto	u12534
  4984  003222                     u12535:
  4985  003222  90D8               	bcf	status,0,c
  4986  003224  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4987  003226                     u12534:
  4988  003226  2FC7               	decfsz	??_doActionOff& (0+255),f,b
  4989  003228  D7FC               	goto	u12535
  4990  00322A  51C8               	movf	(??_doActionOff+1)& (0+255),w,b
  4991  00322C  1451               	andwf	doActionOff@arg,w,c
  4992  00322E  E05F               	bz	l10469
  4993                           
  4994                           ; BSR set to: 0
  4995                           ;main.c: 1870: if ( dmflags & 0x10 ) {
  4996  003230  A9C9               	btfss	doActionOff@dmflags& (0+255),4,b
  4997  003232  D010               	goto	l471
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;main.c: 1871: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 50 + i*2) ) {
  5001  003234  90D8               	bcf	status,0,c
  5002  003236  35CB               	rlcf	doActionOff@i& (0+255),w,b
  5003  003238  6FC7               	movwf	??_doActionOff& (0+255),b
  5004  00323A  6BC8               	clrf	(??_doActionOff+1)& (0+255),b
  5005  00323C  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  5006  00323E  0E75               	movlw	117
  5007  003240  25C7               	addwf	??_doActionOff& (0+255),w,b
  5008  003242  6E08               	movwf	?_Read_b_eep,c
  5009  003244  0E00               	movlw	0
  5010  003246  21C8               	addwfc	(??_doActionOff+1)& (0+255),w,b
  5011  003248  6E09               	movwf	?_Read_b_eep+1,c
  5012  00324A  ECB5  F01E         	call	_Read_b_eep	;wreg free
  5013  00324E  0100               	movlb	0	; () banked
  5014  003250  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5015  003252  E14D               	bnz	l10469
  5016  003254                     l471:
  5017                           
  5018                           ; BSR set to: 0
  5019                           ;main.c: 1874: }
  5020                           ;main.c: 1875: }
  5021                           ;main.c: 1878: if ( dmflags & 0x08 ) {
  5022  003254  A7C9               	btfss	doActionOff@dmflags& (0+255),3,b
  5023  003256  D010               	goto	l10453
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;main.c: 1879: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 51 + i*2) ) {
  5027  003258  90D8               	bcf	status,0,c
  5028  00325A  35CB               	rlcf	doActionOff@i& (0+255),w,b
  5029  00325C  6FC7               	movwf	??_doActionOff& (0+255),b
  5030  00325E  6BC8               	clrf	(??_doActionOff+1)& (0+255),b
  5031  003260  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  5032  003262  0E76               	movlw	118
  5033  003264  25C7               	addwf	??_doActionOff& (0+255),w,b
  5034  003266  6E08               	movwf	?_Read_b_eep,c
  5035  003268  0E00               	movlw	0
  5036  00326A  21C8               	addwfc	(??_doActionOff+1)& (0+255),w,b
  5037  00326C  6E09               	movwf	?_Read_b_eep+1,c
  5038  00326E  ECB5  F01E         	call	_Read_b_eep	;wreg free
  5039  003272  0100               	movlb	0	; () banked
  5040  003274  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5041  003276  E13B               	bnz	l10469
  5042  003278                     l10453:
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;main.c: 1882: }
  5046                           ;main.c: 1883: }
  5047                           ;main.c: 1885: val = Read_b_eep(0x43 + 10 + i);
  5048  003278  0E4D               	movlw	77
  5049  00327A  25CB               	addwf	doActionOff@i& (0+255),w,b
  5050  00327C  6E08               	movwf	?_Read_b_eep,c
  5051  00327E  6A09               	clrf	?_Read_b_eep+1,c
  5052  003280  0E00               	movlw	0
  5053  003282  2209               	addwfc	?_Read_b_eep+1,f,c
  5054  003284  ECB5  F01E         	call	_Read_b_eep	;wreg free
  5055  003288  0100               	movlb	0	; () banked
  5056  00328A  6FCA               	movwf	doActionOff@val& (0+255),b
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;main.c: 1888: if ( !( val & 0x80 ) ) continue;
  5060  00328C  AFCA               	btfss	doActionOff@val& (0+255),7,b
  5061  00328E  D02F               	goto	l10469
  5062  003290  D00E               	goto	l10461
  5063  003292                     l477:
  5064                           
  5065                           ; BSR set to: 0
  5066                           ;main.c: 1893: LATBbits.LATB4 = 0;
  5067  003292  988A               	bcf	3978,4,c	;volatile
  5068                           
  5069                           ;main.c: 1894: break;
  5070  003294  D01A               	goto	l478
  5071  003296                     l479:
  5072                           
  5073                           ; BSR set to: 0
  5074                           ;main.c: 1897: LATBbits.LATB1 = 0;
  5075  003296  928A               	bcf	3978,1,c	;volatile
  5076                           
  5077                           ;main.c: 1898: break;
  5078  003298  D018               	goto	l478
  5079  00329A                     l480:
  5080                           
  5081                           ; BSR set to: 0
  5082                           ;main.c: 1901: LATBbits.LATB0 = 0;
  5083  00329A  908A               	bcf	3978,0,c	;volatile
  5084                           
  5085                           ;main.c: 1902: break;
  5086  00329C  D016               	goto	l478
  5087  00329E                     l481:
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;main.c: 1905: LATCbits.LATC7 = 0;
  5091  00329E  9E8B               	bcf	3979,7,c	;volatile
  5092                           
  5093                           ;main.c: 1906: break;
  5094  0032A0  D014               	goto	l478
  5095  0032A2                     l482:
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;main.c: 1909: LATCbits.LATC6 = 0;
  5099  0032A2  9C8B               	bcf	3979,6,c	;volatile
  5100                           
  5101                           ;main.c: 1910: break;
  5102  0032A4  D012               	goto	l478
  5103  0032A6                     l483:
  5104                           
  5105                           ; BSR set to: 0
  5106                           ;main.c: 1913: LATCbits.LATC5 = 0;
  5107  0032A6  9A8B               	bcf	3979,5,c	;volatile
  5108                           
  5109                           ;main.c: 1914: break;
  5110  0032A8  D010               	goto	l478
  5111  0032AA                     l484:
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;main.c: 1917: LATCbits.LATC4 = 0;
  5115  0032AA  988B               	bcf	3979,4,c	;volatile
  5116                           
  5117                           ;main.c: 1918: break;
  5118  0032AC  D00E               	goto	l478
  5119  0032AE                     l10461:
  5120                           
  5121                           ; BSR set to: 0
  5122  0032AE  51CB               	movf	doActionOff@i& (0+255),w,b
  5123                           
  5124                           ; Switch size 1, requested type "space"
  5125                           ; Number of cases is 7, Range of values is 0 to 6
  5126                           ; switch strategies available:
  5127                           ; Name         Instructions Cycles
  5128                           ; simple_byte           22    12 (average)
  5129                           ;	Chosen strategy is simple_byte
  5130  0032B0  E0F0               	bz	l477
  5131  0032B2  0A01               	xorlw	1	; case 1
  5132  0032B4  E0F0               	bz	l479
  5133  0032B6  0A03               	xorlw	3	; case 2
  5134  0032B8  E0F0               	bz	l480
  5135  0032BA  0A01               	xorlw	1	; case 3
  5136  0032BC  E0F0               	bz	l481
  5137  0032BE  0A07               	xorlw	7	; case 4
  5138  0032C0  E0F0               	bz	l482
  5139  0032C2  0A01               	xorlw	1	; case 5
  5140  0032C4  E0F0               	bz	l483
  5141  0032C6  0A03               	xorlw	3	; case 6
  5142  0032C8  E0F0               	bz	l484
  5143  0032CA                     l478:
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;main.c: 1923: if ( val & 0x10 ) {
  5147  0032CA  A9CA               	btfss	doActionOff@val& (0+255),4,b
  5148  0032CC  D007               	goto	l10465
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;main.c: 1924: SendInformationEvent( i, 20, 4 );
  5152  0032CE  0E14               	movlw	20
  5153  0032D0  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  5154  0032D2  0E04               	movlw	4
  5155  0032D4  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5156  0032D6  51CB               	movf	doActionOff@i& (0+255),w,b
  5157  0032D8  EC11  F01C         	call	_SendInformationEvent
  5158  0032DC                     l10465:
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;main.c: 1925: }
  5162                           ;main.c: 1928: if ( val & 0x40 ) {
  5163  0032DC  ADCA               	btfss	doActionOff@val& (0+255),6,b
  5164  0032DE  D007               	goto	l10469
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;main.c: 1929: SendInformationEvent( i, 20, 24 );
  5168  0032E0  0E14               	movlw	20
  5169  0032E2  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  5170  0032E4  0E18               	movlw	24
  5171  0032E6  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5172  0032E8  51CB               	movf	doActionOff@i& (0+255),w,b
  5173  0032EA  EC11  F01C         	call	_SendInformationEvent
  5174  0032EE                     l10469:
  5175                           
  5176                           ; BSR set to: 0
  5177  0032EE  2BCB               	incf	doActionOff@i& (0+255),f,b
  5178                           
  5179                           ; BSR set to: 0
  5180  0032F0  0E07               	movlw	7
  5181  0032F2  65CB               	cpfsgt	doActionOff@i& (0+255),b
  5182  0032F4  D790               	goto	l10441
  5183                           
  5184                           ; BSR set to: 0
  5185  0032F6  0C07               	retlw	7
  5186  0032F8                     __end_of_doActionOff:
  5187                           	opt stack 0
  5188                           tblptru	equ	0xFF8
  5189                           tblptrh	equ	0xFF7
  5190                           tblptrl	equ	0xFF6
  5191                           tablat	equ	0xFF5
  5192                           prodh	equ	0xFF4
  5193                           prodl	equ	0xFF3
  5194                           intcon	equ	0xFF2
  5195                           postinc0	equ	0xFEE
  5196                           wreg	equ	0xFE8
  5197                           indf1	equ	0xFE7
  5198                           fsr1h	equ	0xFE2
  5199                           fsr1l	equ	0xFE1
  5200                           indf2	equ	0xFDF
  5201                           postinc2	equ	0xFDE
  5202                           postdec2	equ	0xFDD
  5203                           plusw2	equ	0xFDB
  5204                           fsr2h	equ	0xFDA
  5205                           fsr2l	equ	0xFD9
  5206                           status	equ	0xFD8
  5207                           
  5208 ;; *************** function _vscp_handleProtocolEvent *****************
  5209 ;; Defined at:
  5210 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  5211 ;; Parameters:    Size  Location     Type
  5212 ;;		None
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;  bytes           1   45[BANK0 ] unsigned char 
  5215 ;;  page_save       2   41[BANK0 ] unsigned short 
  5216 ;;  i               1   51[BANK0 ] unsigned char 
  5217 ;;  bytes           2   55[BANK0 ] unsigned short 
  5218 ;;  page_save       2   39[BANK0 ] unsigned short 
  5219 ;;  byte            1   54[BANK0 ] unsigned char 
  5220 ;;  cb              1   50[BANK0 ] unsigned char 
  5221 ;;  bytes_this_t    1   49[BANK0 ] unsigned char 
  5222 ;;  j               1   59[BANK0 ] unsigned char 
  5223 ;;  i               1   57[BANK0 ] unsigned char 
  5224 ;;  k               1   52[BANK0 ] unsigned char 
  5225 ;;  i               1   53[BANK0 ] unsigned char 
  5226 ;;  len             1   48[BANK0 ] unsigned char 
  5227 ;;  pos             1   47[BANK0 ] unsigned char 
  5228 ;;  i               1   58[BANK0 ] unsigned char 
  5229 ;;  len             1   46[BANK0 ] unsigned char 
  5230 ;;  pos             1   44[BANK0 ] unsigned char 
  5231 ;;  offset          1   43[BANK0 ] unsigned char 
  5232 ;; Return value:  Size  Location     Type
  5233 ;;		None               void
  5234 ;; Registers used:
  5235 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5236 ;; Tracked objects:
  5237 ;;		On entry : F/0
  5238 ;;		On exit  : 0/0
  5239 ;;		Unchanged: 0/0
  5240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5241 ;;      Params:         0       0       0       0       0       0       0
  5242 ;;      Locals:         0      21       0       0       0       0       0
  5243 ;;      Temps:          0       7       0       0       0       0       0
  5244 ;;      Totals:         0      28       0       0       0       0       0
  5245 ;;Total ram usage:       28 bytes
  5246 ;; Hardware stack levels used:    1
  5247 ;; Hardware stack levels required when called:    9
  5248 ;; This function calls:
  5249 ;;		_vscp_init
  5250 ;;		_vscp_readAppReg
  5251 ;;		_vscp_writeAppReg
  5252 ;;		_vscp_sendEvent
  5253 ;;		_vscp_getGUID
  5254 ;;		_vscp_getMDF_URL
  5255 ;;		_vscp_goBootloaderMode
  5256 ;;		_vscp_getMatrixInfo
  5257 ;;		_vscp_handleHeartbeat
  5258 ;;		_vscp_handleSetNickname
  5259 ;;		_vscp_handleDropNickname
  5260 ;;		_vscp_newNodeOnline
  5261 ;;		_vscp_readRegister
  5262 ;;		_vscp_readStdReg
  5263 ;;		_vscp_writeRegister
  5264 ;;		_vscp_writeStdReg
  5265 ;;		___lbmod
  5266 ;; This function is called by:
  5267 ;;		_main
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           	psect	text15
  5272  000EE6                     __ptext15:
  5273                           	opt stack 0
  5274  000EE6                     _vscp_handleProtocolEvent:
  5275                           	opt stack 21
  5276                           
  5277                           ; BSR set to: 0
  5278                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  5279                           
  5280                           ; BSR set to: 0
  5281                           ;incstack = 0
  5282                           ;incstack = 0
  5283  000EE6  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  5284  000EE8  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  5285  000EEA  E101 D2B5          	bz	l10275
  5286  000EEE  D2E4               	goto	l1291
  5287  000EF0                     l9857:
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  5291  000EF0  EC90  F01C         	call	_vscp_handleHeartbeat	;wreg free
  5292                           
  5293                           ;vscp_firmware.c: 807: break;
  5294  000EF4  D2E1               	goto	l1291
  5295  000EF6                     l9859:
  5296                           
  5297                           ; BSR set to: 0
  5298                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  5299  000EF6  EC2E  F01D         	call	_vscp_newNodeOnline	;wreg free
  5300                           
  5301                           ;vscp_firmware.c: 812: break;
  5302  000EFA  D2DE               	goto	l1291
  5303  000EFC                     l9861:
  5304                           
  5305                           ; BSR set to: 0
  5306                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  5307  000EFC  ECB8  F01D         	call	_vscp_handleSetNickname	;wreg free
  5308                           
  5309                           ;vscp_firmware.c: 817: break;
  5310  000F00  D2DB               	goto	l1291
  5311  000F02                     l9863:
  5312                           
  5313                           ; BSR set to: 0
  5314                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  5315  000F02  ECE8  F01C         	call	_vscp_handleDropNickname	;wreg free
  5316                           
  5317                           ;vscp_firmware.c: 822: break;
  5318  000F06  D2D8               	goto	l1291
  5319  000F08                     l9865:
  5320                           
  5321                           ; BSR set to: 0
  5322                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  5323                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5324  000F08  5196               	movf	_vscp_imsg& (0+255),w,b
  5325  000F0A  0B0F               	andlw	15
  5326  000F0C  0A02               	xorlw	2
  5327  000F0E  E001 D2D3          	bnz	l1291
  5328                           
  5329                           ; BSR set to: 0
  5330  000F12  5191               	movf	_vscp_nickname& (0+255),w,b
  5331  000F14  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5332  000F18  62DF               	cpfseq	indf2,c
  5333  000F1A  D2CE               	goto	l1291
  5334                           
  5335                           ; BSR set to: 0
  5336                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  5337  000F1C  0E80               	movlw	128
  5338  000F1E  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5339  000F20  D012               	goto	l9885
  5340                           
  5341                           ; BSR set to: 0
  5342                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  5343  000F22  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5344  000F24  ECA5  F01A         	call	_vscp_readAppReg
  5345  000F28                     L13:
  5346  000F28  0100               	movlb	0	; () banked
  5347  000F2A                     L14:
  5348  000F2A  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
  5349                           
  5350                           ; BSR set to: 0
  5351                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  5352  000F2C  C09D  F0A9         	movff	_vscp_imsg+7,_vscp_omsg+5
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  5356  000F30  0E03               	movlw	3
  5357  000F32  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5358                           
  5359                           ; BSR set to: 0
  5360                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  5361  000F34  0E82               	movlw	130
  5362  000F36  6FA4               	movwf	_vscp_omsg& (0+255),b
  5363                           
  5364                           ; BSR set to: 0
  5365                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  5366  000F38  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5367  000F3A  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5368                           
  5369                           ; BSR set to: 0
  5370                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  5371  000F3C  0E0A               	movlw	10
  5372  000F3E  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5373  000F40                     l9883:
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;vscp_firmware.c: 843: vscp_sendEvent();
  5377  000F40  ECA5  F01D         	call	_vscp_sendEvent	;wreg free
  5378                           
  5379                           ;vscp_firmware.c: 844: }
  5380  000F44  D2B9               	goto	l1291
  5381  000F46                     l9885:
  5382                           
  5383                           ; BSR set to: 0
  5384                           ;vscp_firmware.c: 845: else {
  5385                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  5386                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  5387  000F46  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5388  000F48  EC1E  F014         	call	_vscp_readStdReg
  5389  000F4C  D7ED               	goto	L13
  5390  000F4E                     l9899:
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  5394                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5395  000F4E  5196               	movf	_vscp_imsg& (0+255),w,b
  5396  000F50  0B0F               	andlw	15
  5397  000F52  0A03               	xorlw	3
  5398  000F54  E001 D2B0          	bnz	l1291
  5399                           
  5400                           ; BSR set to: 0
  5401  000F58  5191               	movf	_vscp_nickname& (0+255),w,b
  5402  000F5A  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5403  000F5E  62DF               	cpfseq	indf2,c
  5404  000F60  D2AB               	goto	l1291
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  5408  000F62  0E80               	movlw	128
  5409  000F64  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5410  000F66  D006               	goto	l9919
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  5414                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5415  000F68  C09E  F051         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  5416  000F6C  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5417  000F6E  EC11  F003         	call	_vscp_writeAppReg
  5418  000F72  D7DB               	goto	L14
  5419  000F74                     l9919:
  5420                           
  5421                           ; BSR set to: 0
  5422                           ;vscp_firmware.c: 888: else {
  5423                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  5424                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5425  000F74  C09E  F010         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  5426  000F78  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5427  000F7A  EC02  F018         	call	_vscp_writeStdReg
  5428  000F7E  D7D4               	goto	L13
  5429  000F80                     l9933:
  5430                           
  5431                           ; BSR set to: 0
  5432                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  5433                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  5434                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  5435                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  5436                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  5437                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  5438                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  5439  000F80  5191               	movf	_vscp_nickname& (0+255),w,b
  5440  000F82  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5441  000F86  62DF               	cpfseq	indf2,c
  5442  000F88  D297               	goto	l1291
  5443                           
  5444                           ; BSR set to: 0
  5445  000F8A  0E00               	movlw	0
  5446  000F8C  ECA2  F01E         	call	_vscp_getGUID
  5447  000F90  0100               	movlb	0	; () banked
  5448  000F92  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5449  000F94  E001 D290          	bnz	l1291
  5450                           
  5451                           ; BSR set to: 0
  5452  000F98  0E03               	movlw	3
  5453  000F9A  ECA2  F01E         	call	_vscp_getGUID
  5454  000F9E  0100               	movlb	0	; () banked
  5455  000FA0  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5456  000FA2  E001 D289          	bnz	l1291
  5457                           
  5458                           ; BSR set to: 0
  5459  000FA6  0E05               	movlw	5
  5460  000FA8  ECA2  F01E         	call	_vscp_getGUID
  5461  000FAC  0100               	movlb	0	; () banked
  5462  000FAE  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5463  000FB0  E001 D282          	bnz	l1291
  5464                           
  5465                           ; BSR set to: 0
  5466  000FB4  0E07               	movlw	7
  5467  000FB6  ECA2  F01E         	call	_vscp_getGUID
  5468  000FBA  0100               	movlb	0	; () banked
  5469  000FBC  19A1               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  5470  000FBE  E001 D27B          	bnz	l1291
  5471                           
  5472                           ; BSR set to: 0
  5473  000FC2  5053               	movf	_vscp_page_select+1,w,c
  5474  000FC4  19A2               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  5475  000FC6  E001 D277          	bnz	l1291
  5476                           
  5477                           ; BSR set to: 0
  5478  000FCA  5052               	movf	_vscp_page_select,w,c
  5479  000FCC  EE20  F0A3         	lfsr	2,_vscp_imsg+13
  5480  000FD0  62DF               	cpfseq	indf2,c
  5481  000FD2  D272               	goto	l1291
  5482                           
  5483                           ; BSR set to: 0
  5484                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  5485  000FD4  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5486  000FD6  EC3A  F01E         	call	_vscp_goBootloaderMode
  5487  000FDA  D26E               	goto	l1291
  5488  000FDC                     l9949:
  5489                           
  5490                           ; BSR set to: 0
  5491                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  5492                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  5493                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  5494                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  5495  000FDC  0E00               	movlw	0
  5496  000FDE  ECA2  F01E         	call	_vscp_getGUID
  5497  000FE2  0100               	movlb	0	; () banked
  5498  000FE4  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5499  000FE6  E173               	bnz	l9993
  5500                           
  5501                           ; BSR set to: 0
  5502  000FE8  0E01               	movlw	1
  5503  000FEA  ECA2  F01E         	call	_vscp_getGUID
  5504  000FEE  0100               	movlb	0	; () banked
  5505  000FF0  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5506  000FF2  E16D               	bnz	l9993
  5507                           
  5508                           ; BSR set to: 0
  5509  000FF4  0E02               	movlw	2
  5510  000FF6  ECA2  F01E         	call	_vscp_getGUID
  5511  000FFA  0100               	movlb	0	; () banked
  5512  000FFC  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5513  000FFE  E167               	bnz	l9993
  5514                           
  5515                           ; BSR set to: 0
  5516  001000  0E03               	movlw	3
  5517  001002  ECA2  F01E         	call	_vscp_getGUID
  5518  001006  0100               	movlb	0	; () banked
  5519  001008  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5520  00100A  E161               	bnz	l9993
  5521                           
  5522                           ; BSR set to: 0
  5523                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  5524  00100C  898D               	bsf	_vscp_guid_reset& (0+255),4,b
  5525  00100E  D05F               	goto	l9993
  5526  001010                     l9959:
  5527                           
  5528                           ; BSR set to: 0
  5529                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  5530                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  5531                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  5532                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  5533  001010  0E04               	movlw	4
  5534  001012  ECA2  F01E         	call	_vscp_getGUID
  5535  001016  0100               	movlb	0	; () banked
  5536  001018  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5537  00101A  E159               	bnz	l9993
  5538                           
  5539                           ; BSR set to: 0
  5540  00101C  0E05               	movlw	5
  5541  00101E  ECA2  F01E         	call	_vscp_getGUID
  5542  001022  0100               	movlb	0	; () banked
  5543  001024  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5544  001026  E153               	bnz	l9993
  5545                           
  5546                           ; BSR set to: 0
  5547  001028  0E06               	movlw	6
  5548  00102A  ECA2  F01E         	call	_vscp_getGUID
  5549  00102E  0100               	movlb	0	; () banked
  5550  001030  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5551  001032  E14D               	bnz	l9993
  5552                           
  5553                           ; BSR set to: 0
  5554  001034  0E07               	movlw	7
  5555  001036  ECA2  F01E         	call	_vscp_getGUID
  5556  00103A  0100               	movlb	0	; () banked
  5557  00103C  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5558  00103E  E147               	bnz	l9993
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  5562  001040  8B8D               	bsf	_vscp_guid_reset& (0+255),5,b
  5563  001042  D045               	goto	l9993
  5564  001044                     l9969:
  5565                           
  5566                           ; BSR set to: 0
  5567                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  5568                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  5569                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  5570                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  5571  001044  0E08               	movlw	8
  5572  001046  ECA2  F01E         	call	_vscp_getGUID
  5573  00104A  0100               	movlb	0	; () banked
  5574  00104C  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5575  00104E  E13F               	bnz	l9993
  5576                           
  5577                           ; BSR set to: 0
  5578  001050  0E09               	movlw	9
  5579  001052  ECA2  F01E         	call	_vscp_getGUID
  5580  001056  0100               	movlb	0	; () banked
  5581  001058  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5582  00105A  E139               	bnz	l9993
  5583                           
  5584                           ; BSR set to: 0
  5585  00105C  0E0A               	movlw	10
  5586  00105E  ECA2  F01E         	call	_vscp_getGUID
  5587  001062  0100               	movlb	0	; () banked
  5588  001064  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5589  001066  E133               	bnz	l9993
  5590                           
  5591                           ; BSR set to: 0
  5592  001068  0E0B               	movlw	11
  5593  00106A  ECA2  F01E         	call	_vscp_getGUID
  5594  00106E  0100               	movlb	0	; () banked
  5595  001070  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5596  001072  E12D               	bnz	l9993
  5597                           
  5598                           ; BSR set to: 0
  5599                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  5600  001074  8D8D               	bsf	_vscp_guid_reset& (0+255),6,b
  5601  001076  D02B               	goto	l9993
  5602  001078                     l9979:
  5603                           
  5604                           ; BSR set to: 0
  5605                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  5606                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  5607                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  5608                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  5609  001078  0E0C               	movlw	12
  5610  00107A  ECA2  F01E         	call	_vscp_getGUID
  5611  00107E  0100               	movlb	0	; () banked
  5612  001080  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5613  001082  E125               	bnz	l9993
  5614                           
  5615                           ; BSR set to: 0
  5616  001084  0E0D               	movlw	13
  5617  001086  ECA2  F01E         	call	_vscp_getGUID
  5618  00108A  0100               	movlb	0	; () banked
  5619  00108C  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5620  00108E  E11F               	bnz	l9993
  5621                           
  5622                           ; BSR set to: 0
  5623  001090  0E0E               	movlw	14
  5624  001092  ECA2  F01E         	call	_vscp_getGUID
  5625  001096  0100               	movlb	0	; () banked
  5626  001098  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5627  00109A  E119               	bnz	l9993
  5628                           
  5629                           ; BSR set to: 0
  5630  00109C  0E0F               	movlw	15
  5631  00109E  ECA2  F01E         	call	_vscp_getGUID
  5632  0010A2  0100               	movlb	0	; () banked
  5633  0010A4  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5634  0010A6  E113               	bnz	l9993
  5635                           
  5636                           ; BSR set to: 0
  5637                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  5638  0010A8  8F8D               	bsf	_vscp_guid_reset& (0+255),7,b
  5639  0010AA  D011               	goto	l9993
  5640  0010AC                     l1231:
  5641                           
  5642                           ; BSR set to: 0
  5643                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  5644  0010AC  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  5645                           
  5646                           ;vscp_firmware.c: 965: break;
  5647  0010AE  D00F               	goto	l9993
  5648  0010B0                     l9991:
  5649                           
  5650                           ; BSR set to: 0
  5651  0010B0  399C               	swapf	(_vscp_imsg+6)& (0+255),w,b
  5652  0010B2  0B0F               	andlw	15
  5653  0010B4  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5654  0010B6  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5655                           
  5656                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5657                           ; Switch size 1, requested type "space"
  5658                           ; Number of cases is 1, Range of values is 0 to 0
  5659                           ; switch strategies available:
  5660                           ; Name         Instructions Cycles
  5661                           ; simple_byte            4     3 (average)
  5662                           ;	Chosen strategy is simple_byte
  5663  0010B8  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5664  0010BA  E1F8               	bnz	l1231
  5665                           
  5666                           ; BSR set to: 0
  5667                           ; Switch size 1, requested type "space"
  5668                           ; Number of cases is 4, Range of values is 0 to 3
  5669                           ; switch strategies available:
  5670                           ; Name         Instructions Cycles
  5671                           ; simple_byte           13     7 (average)
  5672                           ;	Chosen strategy is simple_byte
  5673  0010BC  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5674  0010BE  E08E               	bz	l9949
  5675  0010C0  0A01               	xorlw	1	; case 1
  5676  0010C2  E0A6               	bz	l9959
  5677  0010C4  0A03               	xorlw	3	; case 2
  5678  0010C6  E0BE               	bz	l9969
  5679  0010C8  0A01               	xorlw	1	; case 3
  5680  0010CA  E0D6               	bz	l9979
  5681  0010CC  D7EF               	goto	l1231
  5682  0010CE                     l9993:
  5683                           
  5684                           ; BSR set to: 0
  5685                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  5686  0010CE  518D               	movf	_vscp_guid_reset& (0+255),w,b
  5687  0010D0  0BF0               	andlw	240
  5688  0010D2  0AF0               	xorlw	240
  5689  0010D4  E001 D1F0          	bnz	l1291
  5690                           
  5691                           ; BSR set to: 0
  5692                           ;vscp_firmware.c: 970: vscp_init();
  5693  0010D8  EC6E  F01C         	call	_vscp_init	;wreg free
  5694  0010DC  D1ED               	goto	l1291
  5695  0010DE                     l9997:
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5699  0010DE  5191               	movf	_vscp_nickname& (0+255),w,b
  5700  0010E0  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5701  0010E4  62DF               	cpfseq	indf2,c
  5702  0010E6  D1E8               	goto	l1291
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;vscp_firmware.c: 978: uint8_t i;
  5706                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  5707  0010E8  6BDD               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  5708                           
  5709                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  5710  0010EA  C09D  F0DC         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  5711                           
  5712                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  5713  0010EE  C09E  F0DF         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  5714                           
  5715                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  5716  0010F2  6BEB               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  5717  0010F4  D042               	goto	l10029
  5718  0010F6                     l10001:
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  5722  0010F6  0E07               	movlw	7
  5723  0010F8  6E08               	movwf	?___lbmod,c
  5724  0010FA  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5725  0010FC  EC58  F01D         	call	___lbmod
  5726  001100  0100               	movlb	0	; () banked
  5727  001102  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5728  001104  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5729  001106  0FAA               	addlw	low (_vscp_omsg+6)
  5730  001108  6ED9               	movwf	fsr2l,c
  5731  00110A  6ADA               	clrf	fsr2h,c
  5732  00110C  51DC               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  5733  00110E  25EB               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5734  001110  EC48  F01E         	call	_vscp_readRegister
  5735  001114  6EDF               	movwf	indf2,c
  5736                           
  5737                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  5738  001116  0E07               	movlw	7
  5739  001118  6E08               	movwf	?___lbmod,c
  5740  00111A  0100               	movlb	0	; () banked
  5741  00111C  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5742  00111E  EC58  F01D         	call	___lbmod
  5743  001122  0A06               	xorlw	6
  5744  001124  E00B               	bz	l10007
  5745  001126  0EFF               	movlw	255
  5746  001128  0100               	movlb	0	; () banked
  5747  00112A  25DF               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  5748  00112C  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5749  00112E  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5750  001130  0EFF               	movlw	255
  5751  001132  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  5752  001134  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5753  001136  19D1               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5754  001138  11D2               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5755  00113A  E11E               	bnz	l10027
  5756  00113C                     l10007:
  5757                           
  5758                           ;vscp_firmware.c: 988: uint8_t bytes;
  5759                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  5760  00113C  0E07               	movlw	7
  5761  00113E  6E08               	movwf	?___lbmod,c
  5762  001140  0100               	movlb	0	; () banked
  5763  001142  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5764  001144  EC58  F01D         	call	___lbmod
  5765  001148  0A06               	xorlw	6
  5766  00114A  E103               	bnz	l10011
  5767                           
  5768                           ;vscp_firmware.c: 991: bytes = 7;
  5769  00114C  0E07               	movlw	7
  5770  00114E  0100               	movlb	0	; () banked
  5771  001150  D009               	goto	L15
  5772  001152                     l10011:
  5773                           
  5774                           ;vscp_firmware.c: 993: else {
  5775                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  5776  001152  0E07               	movlw	7
  5777  001154  6E08               	movwf	?___lbmod,c
  5778  001156  0100               	movlb	0	; () banked
  5779  001158  51EB               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5780  00115A  EC58  F01D         	call	___lbmod
  5781  00115E  0100               	movlb	0	; () banked
  5782  001160  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5783  001162  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5784  001164                     L15:
  5785  001164  6FDE               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;vscp_firmware.c: 995: }
  5789                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  5790  001166  51DE               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  5791  001168  0F81               	addlw	129
  5792  00116A  6FA4               	movwf	_vscp_omsg& (0+255),b
  5793                           
  5794                           ; BSR set to: 0
  5795                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  5796                           
  5797                           ; BSR set to: 0
  5798                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  5799                           
  5800                           ; BSR set to: 0
  5801                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  5802  00116C  D9BC               	call	PL72	;call to abstracted procedure
  5803                           
  5804                           ; BSR set to: 0
  5805                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  5806  00116E  C0DD  F0A9         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  5807                           
  5808                           ; BSR set to: 0
  5809                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  5810  001172  ECA5  F01D         	call	_vscp_sendEvent	;wreg free
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;vscp_firmware.c: 1005: pos++;
  5814  001176  2BDD               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  5815  001178                     l10027:
  5816                           
  5817                           ; BSR set to: 0
  5818  001178  2BEB               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  5819  00117A                     l10029:
  5820                           
  5821                           ; BSR set to: 0
  5822  00117A  51DF               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  5823  00117C  5DEB               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5824  00117E  E301 D19B          	bc	l1291
  5825  001182  D7B9               	goto	l10001
  5826  001184                     l10031:
  5827                           
  5828                           ; BSR set to: 0
  5829                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5830  001184  5191               	movf	_vscp_nickname& (0+255),w,b
  5831  001186  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5832  00118A  62DF               	cpfseq	indf2,c
  5833  00118C  D195               	goto	l1291
  5834                           
  5835                           ; BSR set to: 0
  5836                           ;vscp_firmware.c: 1014: uint8_t i;
  5837                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  5838  00118E  C09D  F0E0         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1283
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  5842  001192  5196               	movf	_vscp_imsg& (0+255),w,b
  5843  001194  0FFE               	addlw	254
  5844  001196  0B07               	andlw	7
  5845  001198  6FE1               	movwf	vscp_handleProtocolEvent@len_1284& (0+255),b
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  5849  00119A  6BE6               	clrf	vscp_handleProtocolEvent@i_1282& (0+255),b
  5850  00119C  D016               	goto	l10045
  5851  00119E                     l10039:
  5852                           
  5853                           ; BSR set to: 0
  5854                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  5855  00119E  51E6               	movf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5856  0011A0  0F9E               	addlw	low (_vscp_imsg+8)
  5857  0011A2  6ED9               	movwf	fsr2l,c
  5858  0011A4  6ADA               	clrf	fsr2h,c
  5859  0011A6  50DF               	movf	indf2,w,c
  5860  0011A8  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  5861  0011AA  51E0               	movf	vscp_handleProtocolEvent@pos_1283& (0+255),w,b
  5862  0011AC  25E6               	addwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5863  0011AE  ECED  F01D         	call	_vscp_writeRegister
  5864                           
  5865                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  5866  0011B2  0100               	movlb	0	; () banked
  5867  0011B4  51E6               	movf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5868  0011B6  0FAA               	addlw	low (_vscp_omsg+6)
  5869  0011B8  6ED9               	movwf	fsr2l,c
  5870  0011BA  6ADA               	clrf	fsr2h,c
  5871  0011BC  51E0               	movf	vscp_handleProtocolEvent@pos_1283& (0+255),w,b
  5872  0011BE  25E6               	addwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5873  0011C0  EC48  F01E         	call	_vscp_readRegister
  5874  0011C4  6EDF               	movwf	indf2,c
  5875  0011C6  0100               	movlb	0	; () banked
  5876  0011C8  2BE6               	incf	vscp_handleProtocolEvent@i_1282& (0+255),f,b
  5877  0011CA                     l10045:
  5878                           
  5879                           ; BSR set to: 0
  5880  0011CA  51E1               	movf	vscp_handleProtocolEvent@len_1284& (0+255),w,b
  5881  0011CC  5DE6               	subwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5882  0011CE  E3E7               	bnc	l10039
  5883                           
  5884                           ; BSR set to: 0
  5885                           ;vscp_firmware.c: 1022: }
  5886                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  5887                           
  5888                           ; BSR set to: 0
  5889                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  5890                           
  5891                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  5892  0011D0  D98A               	call	PL72	;call to abstracted procedure
  5893                           
  5894                           ; BSR set to: 0
  5895                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  5896  0011D2  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  5897                           
  5898                           ; BSR set to: 0
  5899                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  5900  0011D4  51E1               	movf	vscp_handleProtocolEvent@len_1284& (0+255),w,b
  5901  0011D6  0F81               	addlw	129
  5902  0011D8  6FA4               	movwf	_vscp_omsg& (0+255),b
  5903  0011DA  D6B2               	goto	l9883
  5904  0011DC                     l10057:
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5908  0011DC  5191               	movf	_vscp_nickname& (0+255),w,b
  5909  0011DE  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5910  0011E2  62DF               	cpfseq	indf2,c
  5911  0011E4  D169               	goto	l1291
  5912                           
  5913                           ; BSR set to: 0
  5914                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5915                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  5916                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  5917  0011E6  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5918  0011E8  ECA5  F01A         	call	_vscp_readAppReg
  5919  0011EC  0100               	movlb	0	; () banked
  5920  0011EE  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5921  0011F0  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5922  0011F2  6E51               	movwf	?_vscp_writeAppReg,c
  5923  0011F4  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5924  0011F6  EC11  F003         	call	_vscp_writeAppReg
  5925  0011FA  D697               	goto	L14
  5926  0011FC                     l10073:
  5927                           
  5928                           ; BSR set to: 0
  5929                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5930  0011FC  5191               	movf	_vscp_nickname& (0+255),w,b
  5931  0011FE  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5932  001202  62DF               	cpfseq	indf2,c
  5933  001204  D159               	goto	l1291
  5934                           
  5935                           ; BSR set to: 0
  5936                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5937                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  5938                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  5939  001206  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5940  001208  ECA5  F01A         	call	_vscp_readAppReg
  5941  00120C  0100               	movlb	0	; () banked
  5942  00120E  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5943  001210  05D1               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  5944  001212  6E51               	movwf	?_vscp_writeAppReg,c
  5945  001214  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5946  001216  EC11  F003         	call	_vscp_writeAppReg
  5947  00121A  D687               	goto	L14
  5948  00121C                     l10089:
  5949                           
  5950                           ; BSR set to: 0
  5951                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  5952                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  5953  00121C  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
  5954  00121E  1991               	xorwf	_vscp_nickname& (0+255),w,b
  5955  001220  E003               	bz	l1255
  5956                           
  5957                           ; BSR set to: 0
  5958  001222  299C               	incf	(_vscp_imsg+6)& (0+255),w,b
  5959  001224  E001 D148          	bnz	l1291
  5960  001228                     l1255:
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  5964  001228  6BE5               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  5965                           
  5966                           ; BSR set to: 0
  5967                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  5968  00122A  0E03               	movlw	3
  5969  00122C  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5970                           
  5971                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  5972  00122E  0E88               	movlw	136
  5973  001230  6FA4               	movwf	_vscp_omsg& (0+255),b
  5974                           
  5975                           ; BSR set to: 0
  5976                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  5977  001232  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5978  001234  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5979                           
  5980                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  5981  001236  0E20               	movlw	32
  5982  001238  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5983                           
  5984                           ; BSR set to: 0
  5985                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  5986  00123A  6BEA               	clrf	vscp_handleProtocolEvent@i_1285& (0+255),b
  5987  00123C                     l1256:
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;vscp_firmware.c: 1091: {
  5991                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  5992                           
  5993                           ; BSR set to: 0
  5994                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  5995  00123C  D95B               	call	PL80	;call to abstracted procedure
  5996  00123E                     l10109:
  5997                           
  5998                           ; BSR set to: 0
  5999                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  6000  00123E  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  6001  001240  0FA9               	addlw	low (_vscp_omsg+5)
  6002  001242  6ED9               	movwf	fsr2l,c
  6003  001244  6ADA               	clrf	fsr2h,c
  6004  001246  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  6005  001248  080F               	sublw	15
  6006  00124A  ECA2  F01E         	call	_vscp_getGUID
  6007  00124E  6EDF               	movwf	indf2,c
  6008  001250  0100               	movlb	0	; () banked
  6009  001252  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  6010                           
  6011                           ; BSR set to: 0
  6012                           ;vscp_firmware.c: 1096: if (k > 16)
  6013  001254  0E10               	movlw	16
  6014  001256  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  6015  001258  D001               	goto	l10117
  6016  00125A  D004               	goto	l10121
  6017  00125C                     l10117:
  6018                           
  6019                           ; BSR set to: 0
  6020  00125C  2BEC               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  6021                           
  6022                           ; BSR set to: 0
  6023  00125E  0E07               	movlw	7
  6024  001260  65EC               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  6025  001262  D7ED               	goto	l10109
  6026  001264                     l10121:
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;vscp_firmware.c: 1098: }
  6030                           ;vscp_firmware.c: 1100: if (k > 16)
  6031  001264  0E10               	movlw	16
  6032  001266  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  6033  001268  D001               	goto	l10125
  6034  00126A  D006               	goto	l1257
  6035  00126C                     l10125:
  6036                           
  6037                           ; BSR set to: 0
  6038                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  6039  00126C  ECA5  F01D         	call	_vscp_sendEvent	;wreg free
  6040                           
  6041                           ; BSR set to: 0
  6042  001270  2BEA               	incf	vscp_handleProtocolEvent@i_1285& (0+255),f,b
  6043                           
  6044                           ; BSR set to: 0
  6045  001272  0E02               	movlw	2
  6046  001274  65EA               	cpfsgt	vscp_handleProtocolEvent@i_1285& (0+255),b
  6047  001276  D7E2               	goto	l1256
  6048  001278                     l1257:
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;vscp_firmware.c: 1104: }
  6052                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  6053  001278  6BEC               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  6054  00127A                     l10135:
  6055                           
  6056                           ; BSR set to: 0
  6057                           ;vscp_firmware.c: 1107: {
  6058                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  6059  00127A  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  6060  00127C  EC55  F01E         	call	_vscp_getMDF_URL
  6061  001280  0900               	iorlw	0
  6062  001282  E008               	bz	l10139
  6063                           
  6064                           ; BSR set to: 0
  6065                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  6066  001284  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  6067  001286  0FAC               	addlw	low (_vscp_omsg+8)
  6068  001288  6ED9               	movwf	fsr2l,c
  6069  00128A  6ADA               	clrf	fsr2h,c
  6070  00128C  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  6071  00128E  EC55  F01E         	call	_vscp_getMDF_URL
  6072  001292  D005               	goto	L16
  6073  001294                     l10139:
  6074                           
  6075                           ; BSR set to: 0
  6076                           ;vscp_firmware.c: 1110: else
  6077                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  6078  001294  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  6079  001296  0FAC               	addlw	low (_vscp_omsg+8)
  6080  001298  6ED9               	movwf	fsr2l,c
  6081  00129A  6ADA               	clrf	fsr2h,c
  6082  00129C  0E00               	movlw	0
  6083  00129E                     L16:
  6084  00129E  6EDF               	movwf	indf2,c
  6085                           
  6086                           ; BSR set to: 0
  6087  0012A0  2BEC               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  6088                           
  6089                           ; BSR set to: 0
  6090  0012A2  0E04               	movlw	4
  6091  0012A4  65EC               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  6092  0012A6  D7E9               	goto	l10135
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;vscp_firmware.c: 1112: }
  6096                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  6097  0012A8  ECA5  F01D         	call	_vscp_sendEvent	;wreg free
  6098                           
  6099                           ; BSR set to: 0
  6100                           ;vscp_firmware.c: 1116: k = 5;
  6101  0012AC  0E05               	movlw	5
  6102  0012AE  6FE5               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  6103                           
  6104                           ; BSR set to: 0
  6105                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  6106  0012B0  0E03               	movlw	3
  6107  0012B2  6FEA               	movwf	vscp_handleProtocolEvent@i_1285& (0+255),b
  6108  0012B4                     l1266:
  6109                           
  6110                           ; BSR set to: 0
  6111                           ;vscp_firmware.c: 1118: {
  6112                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  6116  0012B4  D91F               	call	PL80	;call to abstracted procedure
  6117  0012B6                     l10161:
  6118                           
  6119                           ; BSR set to: 0
  6120                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  6121  0012B6  51EC               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  6122  0012B8  0FA9               	addlw	low (_vscp_omsg+5)
  6123  0012BA  6ED9               	movwf	fsr2l,c
  6124  0012BC  6ADA               	clrf	fsr2h,c
  6125  0012BE  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  6126  0012C0  EC55  F01E         	call	_vscp_getMDF_URL
  6127  0012C4  6EDF               	movwf	indf2,c
  6128                           
  6129                           ; BSR set to: 0
  6130  0012C6  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  6131                           
  6132                           ; BSR set to: 0
  6133  0012C8  2BEC               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  6134                           
  6135                           ; BSR set to: 0
  6136  0012CA  0E07               	movlw	7
  6137  0012CC  65EC               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  6138  0012CE  D7F3               	goto	l10161
  6139                           
  6140                           ; BSR set to: 0
  6141                           ;vscp_firmware.c: 1123: }
  6142                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  6143  0012D0  ECA5  F01D         	call	_vscp_sendEvent	;wreg free
  6144                           
  6145                           ; BSR set to: 0
  6146  0012D4  2BEA               	incf	vscp_handleProtocolEvent@i_1285& (0+255),f,b
  6147                           
  6148                           ; BSR set to: 0
  6149  0012D6  0E06               	movlw	6
  6150  0012D8  65EA               	cpfsgt	vscp_handleProtocolEvent@i_1285& (0+255),b
  6151  0012DA  D7EC               	goto	l1266
  6152  0012DC  D0ED               	goto	l1291
  6153  0012DE                     l10175:
  6154                           
  6155                           ; BSR set to: 0
  6156                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  6157  0012DE  5191               	movf	_vscp_nickname& (0+255),w,b
  6158  0012E0  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6159  0012E4  62DF               	cpfseq	indf2,c
  6160  0012E6  D0E8               	goto	l1291
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  6164  0012E8  0E03               	movlw	3
  6165  0012EA  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6166                           
  6167                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  6168  0012EC  0E87               	movlw	135
  6169  0012EE  6FA4               	movwf	_vscp_omsg& (0+255),b
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  6173  0012F0  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6174  0012F2  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6175                           
  6176                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  6177  0012F4  0E22               	movlw	34
  6178  0012F6  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  6182  0012F8  0EA9               	movlw	(_vscp_omsg+5)& (0+255)
  6183  0012FA  ECFE  F01D         	call	_vscp_getMatrixInfo
  6184  0012FE  D620               	goto	l9883
  6185  001300                     l10185:
  6186                           
  6187                           ; BSR set to: 0
  6188                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  6189  001300  5191               	movf	_vscp_nickname& (0+255),w,b
  6190  001302  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6191  001306  62DF               	cpfseq	indf2,c
  6192  001308  D0D7               	goto	l1291
  6193                           
  6194                           ; BSR set to: 0
  6195                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  6196  00130A  6BE7               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  6197                           
  6198                           ; BSR set to: 0
  6199                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  6200                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  6201  00130C  C096  F0D1         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  6202  001310  0E0F               	movlw	15
  6203  001312  17D1               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6204  001314  0E04               	movlw	4
  6205  001316  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6206  001318  E312               	bnc	l10201
  6207                           
  6208                           ; BSR set to: 0
  6209                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  6210  00131A  C0A0  F0E8         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1289
  6211  00131E  6BE9               	clrf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6212                           
  6213                           ; BSR set to: 0
  6214                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  6215  001320  51E9               	movf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6216  001322  11E8               	iorwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6217  001324  E103               	bnz	l10197
  6218                           
  6219                           ; BSR set to: 0
  6220  001326  0E01               	movlw	1
  6221  001328  6FE9               	movwf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6222  00132A  6BE8               	clrf	vscp_handleProtocolEvent@bytes_1289& (0+255),b
  6223  00132C                     l10197:
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  6227  00132C  0E01               	movlw	1
  6228  00132E  5DE8               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6229  001330  0E01               	movlw	1
  6230  001332  59E9               	subwfb	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6231  001334  E307               	bnc	l10203
  6232                           
  6233                           ; BSR set to: 0
  6234  001336  0E01               	movlw	1
  6235  001338  6FE9               	movwf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6236  00133A  0E00               	movlw	0
  6237  00133C  D002               	goto	L18
  6238  00133E                     l10201:
  6239                           
  6240                           ; BSR set to: 0
  6241                           ;vscp_firmware.c: 1173: else {
  6242                           ;vscp_firmware.c: 1174: bytes = 1;
  6243  00133E  6BE9               	clrf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6244  001340  0E01               	movlw	1
  6245  001342                     L18:
  6246  001342  6FE8               	movwf	vscp_handleProtocolEvent@bytes_1289& (0+255),b
  6247  001344                     l10203:
  6248                           
  6249                           ; BSR set to: 0
  6250                           ;vscp_firmware.c: 1175: }
  6251                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  6252  001344  C052  F0D8         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  6253  001348  C053  F0D9         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  6254                           
  6255                           ; BSR set to: 0
  6256                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  6257  00134C  D8B6               	call	PL28	;call to abstracted procedure
  6258                           
  6259                           ; BSR set to: 0
  6260                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  6261  00134E  0E07               	movlw	7
  6262  001350  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6263                           
  6264                           ; BSR set to: 0
  6265                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  6275                           
  6276                           ; BSR set to: 0
  6277                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  6278  001352  D8BF               	call	PL36	;call to abstracted procedure
  6279  001354                     l10219:
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  6283  001354  51E7               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6284  001356  5DE8               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6285  001358  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6286  00135A  0E00               	movlw	0
  6287  00135C  59E9               	subwfb	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6288  00135E  6FD2               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6289  001360  0E04               	movlw	4
  6290  001362  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6291  001364  0E00               	movlw	0
  6292  001366  59D2               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6293  001368  E302               	bnc	l10223
  6294                           
  6295                           ; BSR set to: 0
  6296                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  6297  00136A  0E04               	movlw	4
  6298  00136C  D002               	goto	L19
  6299  00136E                     l10223:
  6300                           
  6301                           ; BSR set to: 0
  6302                           ;vscp_firmware.c: 1198: else {
  6303                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  6304  00136E  51E7               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6305  001370  5DE8               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6306  001372                     L19:
  6307  001372  6FE2               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  6308                           
  6309                           ; BSR set to: 0
  6310                           ;vscp_firmware.c: 1200: }
  6311                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  6312  001374  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6313  001376  0F84               	addlw	132
  6314  001378  6FA4               	movwf	_vscp_omsg& (0+255),b
  6315                           
  6316                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  6317                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  6318  00137A  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6319  00137C  25E7               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6320  00137E  6FAC               	movwf	(_vscp_omsg+8)& (0+255),b
  6321                           
  6322                           ; BSR set to: 0
  6323                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  6324  001380  6BE3               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  6325  001382  D00C               	goto	l10231
  6326  001384                     l10227:
  6327                           
  6328                           ; BSR set to: 0
  6329                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  6330                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  6331  001384  51E3               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6332  001386  0FAD               	addlw	low (_vscp_omsg+9)
  6333  001388  6ED9               	movwf	fsr2l,c
  6334  00138A  6ADA               	clrf	fsr2h,c
  6335  00138C  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6336  00138E  25E7               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6337  001390  25E3               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6338  001392  EC48  F01E         	call	_vscp_readRegister
  6339  001396  6EDF               	movwf	indf2,c
  6340  001398  0100               	movlb	0	; () banked
  6341  00139A  2BE3               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  6342  00139C                     l10231:
  6343                           
  6344                           ; BSR set to: 0
  6345  00139C  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6346  00139E  5DE3               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6347  0013A0  E3F1               	bnc	l10227
  6348                           
  6349                           ; BSR set to: 0
  6350                           ;vscp_firmware.c: 1211: }
  6351                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  6352  0013A2  ECA5  F01D         	call	_vscp_sendEvent	;wreg free
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  6356  0013A6  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6357  0013A8  27E7               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  6358                           
  6359                           ; BSR set to: 0
  6360                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  6361  0013AA  2BA9               	incf	(_vscp_omsg+5)& (0+255),f,b
  6362                           
  6363                           ; BSR set to: 0
  6364                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  6365  0013AC  51E7               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6366  0013AE  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6367  0013B0  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6368  0013B2  51E8               	movf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6369  0013B4  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6370  0013B6  51E9               	movf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6371  0013B8  59D2               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6372  0013BA  E3CC               	bnc	l10219
  6373                           
  6374                           ; BSR set to: 0
  6375                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  6376  0013BC  C0D8  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  6377  0013C0  C0D9  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  6378  0013C4  D079               	goto	l1291
  6379  0013C6                     l10241:
  6380                           
  6381                           ; BSR set to: 0
  6382                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  6383  0013C6  5191               	movf	_vscp_nickname& (0+255),w,b
  6384  0013C8  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6385  0013CC  62DF               	cpfseq	indf2,c
  6386  0013CE  D074               	goto	l1291
  6387                           
  6388                           ; BSR set to: 0
  6389                           ;vscp_firmware.c: 1234: uint8_t i;
  6390                           ;vscp_firmware.c: 1235: uint16_t page_save;
  6391                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  6392  0013D0  C052  F0DA         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1294
  6393  0013D4  C053  F0DB         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1294+1
  6394                           
  6395                           ; BSR set to: 0
  6396                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  6397  0013D8  D870               	call	PL28	;call to abstracted procedure
  6398                           
  6399                           ; BSR set to: 0
  6400                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  6401  0013DA  C09F  F0E4         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1293
  6402                           
  6403                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  6404                           ;vscp_firmware.c: 1248: i++) {
  6405  0013DE  D014               	goto	l10253
  6406  0013E0                     l10249:
  6407                           
  6408                           ; BSR set to: 0
  6409                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  6410                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  6411  0013E0  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6412  0013E2  08A0               	sublw	low (_vscp_imsg+10)
  6413  0013E4  25E4               	addwf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6414  0013E6  6ED9               	movwf	fsr2l,c
  6415  0013E8  6ADA               	clrf	fsr2h,c
  6416  0013EA  50DF               	movf	indf2,w,c
  6417  0013EC  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  6418  0013EE  51E4               	movf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6419  0013F0  ECED  F01D         	call	_vscp_writeRegister
  6420  0013F4  0100               	movlb	0	; () banked
  6421  0013F6  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6422  0013F8  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6423  0013FA  08AD               	sublw	low (_vscp_omsg+9)
  6424  0013FC  25E4               	addwf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6425  0013FE  6ED9               	movwf	fsr2l,c
  6426  001400  6ADA               	clrf	fsr2h,c
  6427  001402  C0D1  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  6428                           
  6429                           ; BSR set to: 0
  6430  001406  2BE4               	incf	vscp_handleProtocolEvent@i_1293& (0+255),f,b
  6431  001408                     l10253:
  6432                           
  6433                           ; BSR set to: 0
  6434  001408  5196               	movf	_vscp_imsg& (0+255),w,b
  6435  00140A  0B0F               	andlw	15
  6436  00140C  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6437  00140E  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6438  001410  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6439  001412  27D1               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6440  001414  0E00               	movlw	0
  6441  001416  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6442  001418  0EFC               	movlw	252
  6443  00141A  25D1               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6444  00141C  6FD3               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  6445  00141E  0EFF               	movlw	255
  6446  001420  21D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6447  001422  6FD4               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  6448  001424  51E4               	movf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6449  001426  6FD5               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  6450  001428  6BD6               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  6451  00142A  51D6               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  6452  00142C  0A80               	xorlw	128
  6453  00142E  6FD7               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  6454  001430  51D3               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  6455  001432  5DD5               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  6456  001434  51D4               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  6457  001436  0A80               	xorlw	128
  6458  001438  59D7               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  6459  00143A  E3D2               	bnc	l10249
  6460                           
  6461                           ; BSR set to: 0
  6462                           ;vscp_firmware.c: 1251: }
  6463                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  6464  00143C  C0DA  F052         	movff	vscp_handleProtocolEvent@page_save_1294,_vscp_page_select
  6465  001440  C0DB  F053         	movff	vscp_handleProtocolEvent@page_save_1294+1,_vscp_page_select+1
  6466                           
  6467                           ; BSR set to: 0
  6468                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  6469  001444  0E07               	movlw	7
  6470  001446  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  6474  001448  5196               	movf	_vscp_imsg& (0+255),w,b
  6475  00144A  0B0F               	andlw	15
  6476  00144C  0F80               	addlw	128
  6477  00144E  6FA4               	movwf	_vscp_omsg& (0+255),b
  6478                           
  6479                           ; BSR set to: 0
  6480                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  6481                           
  6482                           ; BSR set to: 0
  6483                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  6484                           
  6485                           ; BSR set to: 0
  6486                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  6487                           
  6488                           ; BSR set to: 0
  6489                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  6490                           
  6491                           ; BSR set to: 0
  6492                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  6493  001450  D840               	call	PL36	;call to abstracted procedure
  6494                           
  6495                           ; BSR set to: 0
  6496                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  6497  001452  C09F  F0AC         	movff	_vscp_imsg+9,_vscp_omsg+8
  6498  001456  D574               	goto	l9883
  6499  001458                     l10275:
  6500                           
  6501                           ; BSR set to: 0
  6502  001458  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  6503                           
  6504                           ; Switch size 1, requested type "space"
  6505                           ; Number of cases is 16, Range of values is 1 to 38
  6506                           ; switch strategies available:
  6507                           ; Name         Instructions Cycles
  6508                           ; simple_byte           49    25 (average)
  6509                           ;	Chosen strategy is simple_byte
  6510  00145A  0A01               	xorlw	1	; case 1
  6511  00145C  E101 D548          	bz	l9857
  6512  001460  0A03               	xorlw	3	; case 2
  6513  001462  E101 D548          	bz	l9859
  6514  001466  0A04               	xorlw	4	; case 6
  6515  001468  E101 D548          	bz	l9861
  6516  00146C  0A0E               	xorlw	14	; case 8
  6517  00146E  E101 D548          	bz	l9863
  6518  001472  0A01               	xorlw	1	; case 9
  6519  001474  E101 D548          	bz	l9865
  6520  001478  0A02               	xorlw	2	; case 11
  6521  00147A  E101 D568          	bz	l9899
  6522  00147E  0A07               	xorlw	7	; case 12
  6523  001480  E101 D57E          	bz	l9933
  6524  001484  0A1B               	xorlw	27	; case 23
  6525  001486  E101 D613          	bz	l9991
  6526  00148A  0A0F               	xorlw	15	; case 24
  6527  00148C  E101 D627          	bz	l9997
  6528  001490  0A01               	xorlw	1	; case 25
  6529  001492  E101 D677          	bz	l10031
  6530  001496  0A04               	xorlw	4	; case 29
  6531  001498  E101 D6A0          	bz	l10057
  6532  00149C  0A03               	xorlw	3	; case 30
  6533  00149E  E101 D6AD          	bz	l10073
  6534  0014A2  0A01               	xorlw	1	; case 31
  6535  0014A4  E101 D6BA          	bz	l10089
  6536  0014A8  0A3E               	xorlw	62	; case 33
  6537  0014AA  E101 D718          	bz	l10175
  6538  0014AE  0A04               	xorlw	4	; case 37
  6539  0014B0  E101 D726          	bz	l10185
  6540  0014B4  0A03               	xorlw	3	; case 38
  6541  0014B6  E087               	bz	l10241
  6542  0014B8                     l1291:
  6543  0014B8  0012               	return	
  6544  0014BA                     __end_of_vscp_handleProtocolEvent:
  6545                           	opt stack 0
  6546  0014BA                     PL28:
  6547                           	opt stack 21
  6548  0014BA  519E               	movf	(_vscp_imsg+8)& (0+255),w,b
  6549  0014BC  C09D  F0D1         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6550  0014C0  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6551  0014C2  C0D1  F0D2         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6552  0014C6  6BD1               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6553  0014C8  11D1               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6554  0014CA  6E52               	movwf	_vscp_page_select,c
  6555  0014CC  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6556  0014CE  6E53               	movwf	_vscp_page_select+1,c
  6557  0014D0  0012               	return	
  6558  0014D2                     __end_ofPL28:
  6559                           	opt stack 0
  6560  0014D2                     PL36:
  6561                           	opt stack 21
  6562  0014D2  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6563  0014D4  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6564  0014D6  0E27               	movlw	39
  6565  0014D8  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6566  0014DA  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  6567  0014DC  C09D  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+6
  6568  0014E0  C09E  F0AB         	movff	_vscp_imsg+8,_vscp_omsg+7
  6569  0014E4  0012               	return	
  6570  0014E6                     __end_ofPL36:
  6571                           	opt stack 0
  6572  0014E6                     PL72:
  6573                           	opt stack 21
  6574  0014E6  0E07               	movlw	7
  6575  0014E8  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6576  0014EA  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6577  0014EC  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6578  0014EE  0E1A               	movlw	26
  6579  0014F0  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6580  0014F2  0C1A               	retlw	26
  6581  0014F4                     __end_ofPL72:
  6582                           	opt stack 0
  6583  0014F4                     PL80:
  6584                           	opt stack 21
  6585  0014F4  C0EA  F0A9         	movff	vscp_handleProtocolEvent@i_1285,_vscp_omsg+5
  6586  0014F8  0E01               	movlw	1
  6587  0014FA  6FEC               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  6588  0014FC  0C01               	retlw	1
  6589  0014FE                     __end_ofPL80:
  6590                           	opt stack 0
  6591                           tblptru	equ	0xFF8
  6592                           tblptrh	equ	0xFF7
  6593                           tblptrl	equ	0xFF6
  6594                           tablat	equ	0xFF5
  6595                           prodh	equ	0xFF4
  6596                           prodl	equ	0xFF3
  6597                           intcon	equ	0xFF2
  6598                           postinc0	equ	0xFEE
  6599                           wreg	equ	0xFE8
  6600                           indf1	equ	0xFE7
  6601                           fsr1h	equ	0xFE2
  6602                           fsr1l	equ	0xFE1
  6603                           indf2	equ	0xFDF
  6604                           postinc2	equ	0xFDE
  6605                           postdec2	equ	0xFDD
  6606                           plusw2	equ	0xFDB
  6607                           fsr2h	equ	0xFDA
  6608                           fsr2l	equ	0xFD9
  6609                           status	equ	0xFD8
  6610                           
  6611 ;; *************** function ___lbmod *****************
  6612 ;; Defined at:
  6613 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  6614 ;; Parameters:    Size  Location     Type
  6615 ;;  dividend        1    wreg     unsigned char 
  6616 ;;  divisor         1    7[COMRAM] unsigned char 
  6617 ;; Auto vars:     Size  Location     Type
  6618 ;;  dividend        1    8[COMRAM] unsigned char 
  6619 ;;  rem             1   10[COMRAM] unsigned char 
  6620 ;;  counter         1    9[COMRAM] unsigned char 
  6621 ;; Return value:  Size  Location     Type
  6622 ;;                  1    wreg      unsigned char 
  6623 ;; Registers used:
  6624 ;;		wreg, status,2, status,0
  6625 ;; Tracked objects:
  6626 ;;		On entry : F/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6630 ;;      Params:         1       0       0       0       0       0       0
  6631 ;;      Locals:         3       0       0       0       0       0       0
  6632 ;;      Temps:          0       0       0       0       0       0       0
  6633 ;;      Totals:         4       0       0       0       0       0       0
  6634 ;;Total ram usage:        4 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; Hardware stack levels required when called:    2
  6637 ;; This function calls:
  6638 ;;		Nothing
  6639 ;; This function is called by:
  6640 ;;		_vscp_handleProtocolEvent
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           	psect	text16
  6645  003AB0                     __ptext16:
  6646                           	opt stack 0
  6647  003AB0                     ___lbmod:
  6648                           	opt stack 27
  6649                           
  6650                           ;incstack = 0
  6651                           ;incstack = 0
  6652                           ;___lbmod@dividend stored from wreg
  6653  003AB0  CFE8 F009          	movff	wreg,___lbmod@dividend
  6654                           
  6655                           ; BSR set to: 0
  6656  003AB4  0E08               	movlw	8
  6657  003AB6  6E0A               	movwf	___lbmod@counter,c
  6658                           
  6659                           ; BSR set to: 0
  6660  003AB8  6A0B               	clrf	___lbmod@rem,c
  6661  003ABA                     l7517:
  6662  003ABA  90D8               	bcf	status,0,c
  6663  003ABC  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  6664  003ABE  340B               	rlcf	___lbmod@rem& (0+255),w,c
  6665  003AC0  6E0B               	movwf	___lbmod@rem,c
  6666  003AC2  90D8               	bcf	status,0,c
  6667  003AC4  3609               	rlcf	___lbmod@dividend,f,c
  6668  003AC6  5008               	movf	___lbmod@divisor,w,c
  6669  003AC8  5C0B               	subwf	___lbmod@rem,w,c
  6670  003ACA  E302               	bnc	l7525
  6671  003ACC  5008               	movf	___lbmod@divisor,w,c
  6672  003ACE  5E0B               	subwf	___lbmod@rem,f,c
  6673  003AD0                     l7525:
  6674  003AD0  2E0A               	decfsz	___lbmod@counter,f,c
  6675  003AD2  D7F3               	goto	l7517
  6676  003AD4  500B               	movf	___lbmod@rem,w,c
  6677  003AD6  0012               	return	
  6678  003AD8                     __end_of___lbmod:
  6679                           	opt stack 0
  6680                           tblptru	equ	0xFF8
  6681                           tblptrh	equ	0xFF7
  6682                           tblptrl	equ	0xFF6
  6683                           tablat	equ	0xFF5
  6684                           prodh	equ	0xFF4
  6685                           prodl	equ	0xFF3
  6686                           intcon	equ	0xFF2
  6687                           postinc0	equ	0xFEE
  6688                           wreg	equ	0xFE8
  6689                           indf1	equ	0xFE7
  6690                           fsr1h	equ	0xFE2
  6691                           fsr1l	equ	0xFE1
  6692                           indf2	equ	0xFDF
  6693                           postinc2	equ	0xFDE
  6694                           postdec2	equ	0xFDD
  6695                           plusw2	equ	0xFDB
  6696                           fsr2h	equ	0xFDA
  6697                           fsr2l	equ	0xFD9
  6698                           status	equ	0xFD8
  6699                           
  6700 ;; *************** function _vscp_writeRegister *****************
  6701 ;; Defined at:
  6702 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  6703 ;; Parameters:    Size  Location     Type
  6704 ;;  reg             1    wreg     unsigned char 
  6705 ;;  value           1   30[BANK0 ] unsigned char 
  6706 ;; Auto vars:     Size  Location     Type
  6707 ;;  reg             1   31[BANK0 ] unsigned char 
  6708 ;; Return value:  Size  Location     Type
  6709 ;;                  1    wreg      unsigned char 
  6710 ;; Registers used:
  6711 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6712 ;; Tracked objects:
  6713 ;;		On entry : F/0
  6714 ;;		On exit  : 0/0
  6715 ;;		Unchanged: 0/0
  6716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6717 ;;      Params:         0       1       0       0       0       0       0
  6718 ;;      Locals:         0       1       0       0       0       0       0
  6719 ;;      Temps:          0       0       0       0       0       0       0
  6720 ;;      Totals:         0       2       0       0       0       0       0
  6721 ;;Total ram usage:        2 bytes
  6722 ;; Hardware stack levels used:    1
  6723 ;; Hardware stack levels required when called:    8
  6724 ;; This function calls:
  6725 ;;		_vscp_writeAppReg
  6726 ;;		_vscp_writeStdReg
  6727 ;; This function is called by:
  6728 ;;		_vscp_handleProtocolEvent
  6729 ;; This function uses a non-reentrant model
  6730 ;;
  6731                           
  6732                           	psect	text17
  6733  003BDA                     __ptext17:
  6734                           	opt stack 0
  6735  003BDA                     _vscp_writeRegister:
  6736                           	opt stack 21
  6737                           
  6738                           ;incstack = 0
  6739                           ;incstack = 0
  6740                           ;vscp_writeRegister@reg stored from wreg
  6741  003BDA  CFE8 F0D0          	movff	wreg,vscp_writeRegister@reg
  6742                           
  6743                           ; BSR set to: 0
  6744                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  6745  003BDE  0E7F               	movlw	127
  6746  003BE0  65D0               	cpfsgt	vscp_writeRegister@reg& (0+255),b
  6747  003BE2  D006               	goto	l11133
  6748                           
  6749                           ; BSR set to: 0
  6750                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  6751  003BE4  C0CF  F010         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  6752  003BE8  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6753  003BEA  EC02  F018         	call	_vscp_writeStdReg
  6754  003BEE  D005               	goto	l1171
  6755  003BF0                     l11133:
  6756                           
  6757                           ; BSR set to: 0
  6758                           ;vscp_firmware.c: 705: else {
  6759                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  6760  003BF0  C0CF  F051         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  6761  003BF4  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6762  003BF6  EC11  F003         	call	_vscp_writeAppReg
  6763  003BFA                     l1171:
  6764  003BFA  0012               	return	
  6765  003BFC                     __end_of_vscp_writeRegister:
  6766                           	opt stack 0
  6767                           tblptru	equ	0xFF8
  6768                           tblptrh	equ	0xFF7
  6769                           tblptrl	equ	0xFF6
  6770                           tablat	equ	0xFF5
  6771                           prodh	equ	0xFF4
  6772                           prodl	equ	0xFF3
  6773                           intcon	equ	0xFF2
  6774                           postinc0	equ	0xFEE
  6775                           wreg	equ	0xFE8
  6776                           indf1	equ	0xFE7
  6777                           fsr1h	equ	0xFE2
  6778                           fsr1l	equ	0xFE1
  6779                           indf2	equ	0xFDF
  6780                           postinc2	equ	0xFDE
  6781                           postdec2	equ	0xFDD
  6782                           plusw2	equ	0xFDB
  6783                           fsr2h	equ	0xFDA
  6784                           fsr2l	equ	0xFD9
  6785                           status	equ	0xFD8
  6786                           
  6787 ;; *************** function _vscp_writeStdReg *****************
  6788 ;; Defined at:
  6789 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;  reg             1    wreg     unsigned char 
  6792 ;;  value           1   15[COMRAM] unsigned char 
  6793 ;; Auto vars:     Size  Location     Type
  6794 ;;  reg             1   21[COMRAM] unsigned char 
  6795 ;;  rv              1   20[COMRAM] unsigned char 
  6796 ;; Return value:  Size  Location     Type
  6797 ;;                  1    wreg      unsigned char 
  6798 ;; Registers used:
  6799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6800 ;; Tracked objects:
  6801 ;;		On entry : F/0
  6802 ;;		On exit  : 0/0
  6803 ;;		Unchanged: 0/0
  6804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6805 ;;      Params:         1       0       0       0       0       0       0
  6806 ;;      Locals:         2       0       0       0       0       0       0
  6807 ;;      Temps:          4       0       0       0       0       0       0
  6808 ;;      Totals:         7       0       0       0       0       0       0
  6809 ;;Total ram usage:        7 bytes
  6810 ;; Hardware stack levels used:    1
  6811 ;; Hardware stack levels required when called:    5
  6812 ;; This function calls:
  6813 ;;		_vscp_setGUID
  6814 ;;		_vscp_setManufacturerId
  6815 ;;		_vscp_getGUID
  6816 ;;		_vscp_getUserID
  6817 ;;		_vscp_setUserID
  6818 ;;		_vscp_getManufacturerId
  6819 ;;		_vscp_restoreDefaults
  6820 ;; This function is called by:
  6821 ;;		_vscp_writeRegister
  6822 ;;		_vscp_handleProtocolEvent
  6823 ;; This function uses a non-reentrant model
  6824 ;;
  6825                           
  6826                           	psect	text18
  6827  003004                     __ptext18:
  6828                           	opt stack 0
  6829  003004                     _vscp_writeStdReg:
  6830                           	opt stack 24
  6831                           
  6832                           ;incstack = 0
  6833                           ;incstack = 0
  6834                           ;vscp_writeStdReg@reg stored from wreg
  6835  003004  CFE8 F016          	movff	wreg,vscp_writeStdReg@reg
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  6839  003008  1C10               	comf	vscp_writeStdReg@value,w,c
  6840  00300A  6E15               	movwf	vscp_writeStdReg@rv,c
  6841                           
  6842                           ; BSR set to: 0
  6843                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  6844                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  6845  00300C  0E83               	movlw	131
  6846  00300E  6416               	cpfsgt	vscp_writeStdReg@reg,c
  6847  003010  D00E               	goto	l9691
  6848                           
  6849                           ; BSR set to: 0
  6850  003012  0E89               	movlw	137
  6851  003014  6016               	cpfslt	vscp_writeStdReg@reg,c
  6852  003016  D00B               	goto	l9691
  6853                           
  6854                           ; BSR set to: 0
  6855                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  6856  003018  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  6857  00301C  5016               	movf	vscp_writeStdReg@reg,w,c
  6858  00301E  0F7C               	addlw	124
  6859  003020  EC2C  F01E         	call	_vscp_setUserID
  6860                           
  6861                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  6862  003024  5016               	movf	vscp_writeStdReg@reg,w,c
  6863  003026  0F7C               	addlw	124
  6864  003028  EC98  F01E         	call	_vscp_getUserID
  6865  00302C  D069               	goto	L25
  6866  00302E                     l9691:
  6867                           
  6868                           ; BSR set to: 0
  6869                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  6870  00302E  5016               	movf	vscp_writeStdReg@reg,w,c
  6871  003030  0A92               	xorlw	146
  6872  003032  E10D               	bnz	l9697
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  6876  003034  5010               	movf	vscp_writeStdReg@value,w,c
  6877  003036  6E12               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6878  003038  6A11               	clrf	??_vscp_writeStdReg& (0+255),c
  6879  00303A  5052               	movf	_vscp_page_select,w,c
  6880  00303C  6E13               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  6881  00303E  6A14               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  6882  003040  1011               	iorwf	??_vscp_writeStdReg,w,c
  6883  003042  6E52               	movwf	_vscp_page_select,c
  6884  003044  5012               	movf	??_vscp_writeStdReg+1,w,c
  6885  003046  1014               	iorwf	??_vscp_writeStdReg+3,w,c
  6886  003048  6E53               	movwf	_vscp_page_select+1,c
  6887                           
  6888                           ; BSR set to: 0
  6889                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  6890  00304A  5053               	movf	_vscp_page_select+1,w,c
  6891  00304C  D059               	goto	L25
  6892  00304E                     l9697:
  6893                           
  6894                           ; BSR set to: 0
  6895                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  6896  00304E  5016               	movf	vscp_writeStdReg@reg,w,c
  6897  003050  0A93               	xorlw	147
  6898  003052  E10B               	bnz	l9703
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  6902  003054  6A11               	clrf	??_vscp_writeStdReg& (0+255),c
  6903  003056  5053               	movf	_vscp_page_select+1,w,c
  6904  003058  6E12               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6905  00305A  5010               	movf	vscp_writeStdReg@value,w,c
  6906  00305C  1011               	iorwf	??_vscp_writeStdReg,w,c
  6907  00305E  6E52               	movwf	_vscp_page_select,c
  6908  003060  5012               	movf	??_vscp_writeStdReg+1,w,c
  6909  003062  6E53               	movwf	_vscp_page_select+1,c
  6910                           
  6911                           ; BSR set to: 0
  6912                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  6913  003064  C052  F015         	movff	_vscp_page_select,vscp_writeStdReg@rv
  6914                           
  6915                           ;vscp_firmware.c: 737: }
  6916  003068  D04E               	goto	l9745
  6917  00306A                     l9703:
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  6921  00306A  0E88               	movlw	136
  6922  00306C  6416               	cpfsgt	vscp_writeStdReg@reg,c
  6923  00306E  D019               	goto	l9715
  6924                           
  6925                           ; BSR set to: 0
  6926  003070  0E91               	movlw	145
  6927  003072  6016               	cpfslt	vscp_writeStdReg@reg,c
  6928  003074  D016               	goto	l9715
  6929                           
  6930                           ; BSR set to: 0
  6931                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6932                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  6933  003076  C053  F011         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6934  00307A  C011  F012         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6935  00307E  6A13               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6936  003080  2812               	incf	??_vscp_writeStdReg+1,w,c
  6937  003082  E102               	bnz	l9711
  6938                           
  6939                           ; BSR set to: 0
  6940  003084  2852               	incf	_vscp_page_select,w,c
  6941  003086  E002               	bz	l9713
  6942  003088                     l9711:
  6943                           
  6944                           ; BSR set to: 0
  6945                           ;vscp_firmware.c: 747: rv = ~value;
  6946  003088  1C10               	comf	vscp_writeStdReg@value,w,c
  6947  00308A  D03A               	goto	L25
  6948  00308C                     l9713:
  6949                           
  6950                           ; BSR set to: 0
  6951                           ;vscp_firmware.c: 749: else {
  6952                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  6953  00308C  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  6954  003090  5016               	movf	vscp_writeStdReg@reg,w,c
  6955  003092  0F77               	addlw	119
  6956  003094  EC7F  F01D         	call	_vscp_setManufacturerId
  6957                           
  6958                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  6959  003098  5016               	movf	vscp_writeStdReg@reg,w,c
  6960  00309A  0F77               	addlw	119
  6961  00309C  EC8E  F01E         	call	_vscp_getManufacturerId
  6962  0030A0  D02F               	goto	L25
  6963  0030A2                     l9715:
  6964                           
  6965                           ; BSR set to: 0
  6966                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  6967  0030A2  0ECF               	movlw	207
  6968  0030A4  6416               	cpfsgt	vscp_writeStdReg@reg,c
  6969  0030A6  D017               	goto	l9727
  6970                           
  6971                           ; BSR set to: 0
  6972  0030A8  0EE0               	movlw	224
  6973  0030AA  6016               	cpfslt	vscp_writeStdReg@reg,c
  6974  0030AC  D014               	goto	l9727
  6975                           
  6976                           ; BSR set to: 0
  6977                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6978                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  6979  0030AE  C053  F011         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6980  0030B2  C011  F012         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6981  0030B6  6A13               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6982  0030B8  2812               	incf	??_vscp_writeStdReg+1,w,c
  6983  0030BA  E1E6               	bnz	l9711
  6984                           
  6985                           ; BSR set to: 0
  6986  0030BC  2852               	incf	_vscp_page_select,w,c
  6987  0030BE  E1E4               	bnz	l9711
  6988                           
  6989                           ; BSR set to: 0
  6990                           ;vscp_firmware.c: 762: else {
  6991                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  6992  0030C0  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  6993  0030C4  5016               	movf	vscp_writeStdReg@reg,w,c
  6994  0030C6  0F30               	addlw	48
  6995  0030C8  EC92  F01D         	call	_vscp_setGUID
  6996                           
  6997                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  6998  0030CC  5016               	movf	vscp_writeStdReg@reg,w,c
  6999  0030CE  0F30               	addlw	48
  7000  0030D0  ECA2  F01E         	call	_vscp_getGUID
  7001  0030D4  D015               	goto	L25
  7002  0030D6                     l9727:
  7003                           
  7004                           ; BSR set to: 0
  7005                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  7006  0030D6  5016               	movf	vscp_writeStdReg@reg,w,c
  7007  0030D8  0AA2               	xorlw	162
  7008  0030DA  E1D6               	bnz	l9711
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  7012  0030DC  5010               	movf	vscp_writeStdReg@value,w,c
  7013  0030DE  0A55               	xorlw	85
  7014  0030E0  E104               	bnz	l9735
  7015                           
  7016                           ; BSR set to: 0
  7017                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  7018  0030E2  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
  7019  0030E4  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  7020                           
  7021                           ; BSR set to: 0
  7022                           ;vscp_firmware.c: 771: rv = 0x55;
  7023  0030E6  0E55               	movlw	85
  7024  0030E8  D00B               	goto	L25
  7025  0030EA                     l9735:
  7026                           
  7027                           ; BSR set to: 0
  7028                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  7029  0030EA  5010               	movf	vscp_writeStdReg@value,w,c
  7030  0030EC  0AAA               	xorlw	170
  7031  0030EE  E10B               	bnz	l9745
  7032                           
  7033                           ; BSR set to: 0
  7034                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  7035  0030F0  0EE8               	movlw	232
  7036  0030F2  5D84               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  7037  0030F4  0E03               	movlw	3
  7038  0030F6  5985               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  7039  0030F8  E205               	bc	l1197
  7040                           
  7041                           ; BSR set to: 0
  7042                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  7043  0030FA  ECE5  F01E         	call	_vscp_restoreDefaults	;wreg free
  7044                           
  7045                           ;vscp_firmware.c: 776: rv = 0xaa;
  7046  0030FE  0EAA               	movlw	170
  7047  003100                     L25:
  7048  003100  6E15               	movwf	vscp_writeStdReg@rv,c
  7049                           
  7050                           ;vscp_firmware.c: 777: }
  7051  003102  D001               	goto	l9745
  7052  003104                     l1197:
  7053                           
  7054                           ; BSR set to: 0
  7055                           ;vscp_firmware.c: 778: else {
  7056                           ;vscp_firmware.c: 779: rv = 0;
  7057  003104  6A15               	clrf	vscp_writeStdReg@rv,c
  7058  003106                     l9745:
  7059                           
  7060                           ;vscp_firmware.c: 787: }
  7061                           ;vscp_firmware.c: 789: return rv;
  7062  003106  5015               	movf	vscp_writeStdReg@rv,w,c
  7063  003108  0012               	return	
  7064  00310A                     __end_of_vscp_writeStdReg:
  7065                           	opt stack 0
  7066                           tblptru	equ	0xFF8
  7067                           tblptrh	equ	0xFF7
  7068                           tblptrl	equ	0xFF6
  7069                           tablat	equ	0xFF5
  7070                           prodh	equ	0xFF4
  7071                           prodl	equ	0xFF3
  7072                           intcon	equ	0xFF2
  7073                           postinc0	equ	0xFEE
  7074                           wreg	equ	0xFE8
  7075                           indf1	equ	0xFE7
  7076                           fsr1h	equ	0xFE2
  7077                           fsr1l	equ	0xFE1
  7078                           indf2	equ	0xFDF
  7079                           postinc2	equ	0xFDE
  7080                           postdec2	equ	0xFDD
  7081                           plusw2	equ	0xFDB
  7082                           fsr2h	equ	0xFDA
  7083                           fsr2l	equ	0xFD9
  7084                           status	equ	0xFD8
  7085                           
  7086 ;; *************** function _vscp_restoreDefaults *****************
  7087 ;; Defined at:
  7088 ;;		line 2560 in file "../main.c"
  7089 ;; Parameters:    Size  Location     Type
  7090 ;;		None
  7091 ;; Auto vars:     Size  Location     Type
  7092 ;;		None
  7093 ;; Return value:  Size  Location     Type
  7094 ;;		None               void
  7095 ;; Registers used:
  7096 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7097 ;; Tracked objects:
  7098 ;;		On entry : F/0
  7099 ;;		On exit  : 0/0
  7100 ;;		Unchanged: 0/0
  7101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7102 ;;      Params:         0       0       0       0       0       0       0
  7103 ;;      Locals:         0       0       0       0       0       0       0
  7104 ;;      Temps:          0       0       0       0       0       0       0
  7105 ;;      Totals:         0       0       0       0       0       0       0
  7106 ;;Total ram usage:        0 bytes
  7107 ;; Hardware stack levels used:    1
  7108 ;; Hardware stack levels required when called:    4
  7109 ;; This function calls:
  7110 ;;		_init_app_eeprom
  7111 ;;		_init_app_ram
  7112 ;; This function is called by:
  7113 ;;		_vscp_writeStdReg
  7114 ;; This function uses a non-reentrant model
  7115 ;;
  7116                           
  7117                           	psect	text19
  7118  003DCA                     __ptext19:
  7119                           	opt stack 0
  7120  003DCA                     _vscp_restoreDefaults:
  7121                           	opt stack 24
  7122                           
  7123                           ; BSR set to: 0
  7124                           ;main.c: 2561: init_app_eeprom();
  7125                           
  7126                           ;incstack = 0
  7127                           ;incstack = 0
  7128  003DCA  EC7F  F00A         	call	_init_app_eeprom	;wreg free
  7129                           
  7130                           ;main.c: 2562: init_app_ram();
  7131  003DCE  EF85  F018         	goto	_init_app_ram	;wreg free
  7132  003DD2                     __end_of_vscp_restoreDefaults:
  7133                           	opt stack 0
  7134                           tblptru	equ	0xFF8
  7135                           tblptrh	equ	0xFF7
  7136                           tblptrl	equ	0xFF6
  7137                           tablat	equ	0xFF5
  7138                           prodh	equ	0xFF4
  7139                           prodl	equ	0xFF3
  7140                           intcon	equ	0xFF2
  7141                           postinc0	equ	0xFEE
  7142                           wreg	equ	0xFE8
  7143                           indf1	equ	0xFE7
  7144                           fsr1h	equ	0xFE2
  7145                           fsr1l	equ	0xFE1
  7146                           indf2	equ	0xFDF
  7147                           postinc2	equ	0xFDE
  7148                           postdec2	equ	0xFDD
  7149                           plusw2	equ	0xFDB
  7150                           fsr2h	equ	0xFDA
  7151                           fsr2l	equ	0xFD9
  7152                           status	equ	0xFD8
  7153                           
  7154 ;; *************** function _init_app_eeprom *****************
  7155 ;; Defined at:
  7156 ;;		line 478 in file "../main.c"
  7157 ;; Parameters:    Size  Location     Type
  7158 ;;		None
  7159 ;; Auto vars:     Size  Location     Type
  7160 ;;  j               1   14[COMRAM] unsigned char 
  7161 ;;  i               1   13[COMRAM] unsigned char 
  7162 ;; Return value:  Size  Location     Type
  7163 ;;		None               void
  7164 ;; Registers used:
  7165 ;;		wreg, status,2, status,0, cstack
  7166 ;; Tracked objects:
  7167 ;;		On entry : 0/0
  7168 ;;		On exit  : 0/0
  7169 ;;		Unchanged: 0/0
  7170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7171 ;;      Params:         0       0       0       0       0       0       0
  7172 ;;      Locals:         2       0       0       0       0       0       0
  7173 ;;      Temps:          2       0       0       0       0       0       0
  7174 ;;      Totals:         4       0       0       0       0       0       0
  7175 ;;Total ram usage:        4 bytes
  7176 ;; Hardware stack levels used:    1
  7177 ;; Hardware stack levels required when called:    3
  7178 ;; This function calls:
  7179 ;;		_Busy_eep
  7180 ;;		_Write_b_eep
  7181 ;; This function is called by:
  7182 ;;		_main
  7183 ;;		_vscp_restoreDefaults
  7184 ;; This function uses a non-reentrant model
  7185 ;;
  7186                           
  7187                           	psect	text20
  7188  0014FE                     __ptext20:
  7189                           	opt stack 0
  7190  0014FE                     _init_app_eeprom:
  7191                           	opt stack 24
  7192                           
  7193                           ;main.c: 479: unsigned char i, j;
  7194                           ;main.c: 481: (Busy_eep(), Write_b_eep(0x43 + 0,0));
  7195                           
  7196                           ;incstack = 0
  7197                           ;incstack = 0
  7198  0014FE  ECE9  F01E         	call	_Busy_eep	;wreg free
  7199  001502  6A09               	clrf	?_Write_b_eep+1,c
  7200  001504  0E43               	movlw	67
  7201  001506  6E08               	movwf	?_Write_b_eep,c
  7202  001508  0E00               	movlw	0
  7203  00150A  6A0A               	clrf	?_Write_b_eep+2,c
  7204  00150C  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7205                           
  7206                           ;main.c: 482: (Busy_eep(), Write_b_eep(0x43 + 1,0));
  7207  001510  ECE9  F01E         	call	_Busy_eep	;wreg free
  7208  001514  6A09               	clrf	?_Write_b_eep+1,c
  7209  001516  0E44               	movlw	68
  7210  001518  6E08               	movwf	?_Write_b_eep,c
  7211  00151A  0E00               	movlw	0
  7212  00151C  6A0A               	clrf	?_Write_b_eep+2,c
  7213  00151E  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7214                           
  7215                           ;main.c: 484: (Busy_eep(), Write_b_eep(0x43 + 10,0x08 | 0x10 | 0x80));
  7216  001522  ECE9  F01E         	call	_Busy_eep	;wreg free
  7217  001526  6A09               	clrf	?_Write_b_eep+1,c
  7218  001528  0E4D               	movlw	77
  7219  00152A  6E08               	movwf	?_Write_b_eep,c
  7220  00152C  0E98               	movlw	152
  7221  00152E  6E0A               	movwf	?_Write_b_eep+2,c
  7222  001530  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7223                           
  7224                           ;main.c: 489: (Busy_eep(), Write_b_eep(0x43 + 11,0x08 | 0x10 | 0x80));
  7225  001534  ECE9  F01E         	call	_Busy_eep	;wreg free
  7226  001538  6A09               	clrf	?_Write_b_eep+1,c
  7227  00153A  0E4E               	movlw	78
  7228  00153C  6E08               	movwf	?_Write_b_eep,c
  7229  00153E  0E98               	movlw	152
  7230  001540  6E0A               	movwf	?_Write_b_eep+2,c
  7231  001542  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7232                           
  7233                           ;main.c: 494: (Busy_eep(), Write_b_eep(0x43 + 12,0x08 | 0x10 | 0x80));
  7234  001546  ECE9  F01E         	call	_Busy_eep	;wreg free
  7235  00154A  6A09               	clrf	?_Write_b_eep+1,c
  7236  00154C  0E4F               	movlw	79
  7237  00154E  6E08               	movwf	?_Write_b_eep,c
  7238  001550  0E98               	movlw	152
  7239  001552  6E0A               	movwf	?_Write_b_eep+2,c
  7240  001554  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7241                           
  7242                           ;main.c: 499: (Busy_eep(), Write_b_eep(0x43 + 13,0x08 | 0x10 | 0x80));
  7243  001558  ECE9  F01E         	call	_Busy_eep	;wreg free
  7244  00155C  6A09               	clrf	?_Write_b_eep+1,c
  7245  00155E  0E50               	movlw	80
  7246  001560  6E08               	movwf	?_Write_b_eep,c
  7247  001562  0E98               	movlw	152
  7248  001564  6E0A               	movwf	?_Write_b_eep+2,c
  7249  001566  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7250                           
  7251                           ;main.c: 504: (Busy_eep(), Write_b_eep(0x43 + 14,0x08 | 0x10 | 0x80));
  7252  00156A  ECE9  F01E         	call	_Busy_eep	;wreg free
  7253  00156E  6A09               	clrf	?_Write_b_eep+1,c
  7254  001570  0E51               	movlw	81
  7255  001572  6E08               	movwf	?_Write_b_eep,c
  7256  001574  0E98               	movlw	152
  7257  001576  6E0A               	movwf	?_Write_b_eep+2,c
  7258  001578  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7259                           
  7260                           ;main.c: 509: (Busy_eep(), Write_b_eep(0x43 + 15,0x08 | 0x10 | 0x80));
  7261  00157C  ECE9  F01E         	call	_Busy_eep	;wreg free
  7262  001580  6A09               	clrf	?_Write_b_eep+1,c
  7263  001582  0E52               	movlw	82
  7264  001584  6E08               	movwf	?_Write_b_eep,c
  7265  001586  0E98               	movlw	152
  7266  001588  6E0A               	movwf	?_Write_b_eep+2,c
  7267  00158A  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7268                           
  7269                           ;main.c: 514: (Busy_eep(), Write_b_eep(0x43 + 16,0x08 | 0x10 | 0x80));
  7270  00158E  ECE9  F01E         	call	_Busy_eep	;wreg free
  7271  001592  6A09               	clrf	?_Write_b_eep+1,c
  7272  001594  0E53               	movlw	83
  7273  001596  6E08               	movwf	?_Write_b_eep,c
  7274  001598  0E98               	movlw	152
  7275  00159A  6E0A               	movwf	?_Write_b_eep+2,c
  7276  00159C  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7277                           
  7278                           ;main.c: 519: (Busy_eep(), Write_b_eep(0x43 + 17,0x08 | 0x10 | 0x80));
  7279  0015A0  ECE9  F01E         	call	_Busy_eep	;wreg free
  7280  0015A4  6A09               	clrf	?_Write_b_eep+1,c
  7281  0015A6  0E54               	movlw	84
  7282  0015A8  6E08               	movwf	?_Write_b_eep,c
  7283  0015AA  0E98               	movlw	152
  7284  0015AC  6E0A               	movwf	?_Write_b_eep+2,c
  7285  0015AE  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7286                           
  7287                           ;main.c: 524: (Busy_eep(), Write_b_eep(0x43 + 18,0));
  7288  0015B2  ECE9  F01E         	call	_Busy_eep	;wreg free
  7289  0015B6  6A09               	clrf	?_Write_b_eep+1,c
  7290  0015B8  0E55               	movlw	85
  7291  0015BA  6E08               	movwf	?_Write_b_eep,c
  7292  0015BC  0E00               	movlw	0
  7293  0015BE  6A0A               	clrf	?_Write_b_eep+2,c
  7294  0015C0  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7295                           
  7296                           ;main.c: 525: (Busy_eep(), Write_b_eep(0x43 + 19,0));
  7297  0015C4  ECE9  F01E         	call	_Busy_eep	;wreg free
  7298  0015C8  6A09               	clrf	?_Write_b_eep+1,c
  7299  0015CA  0E56               	movlw	86
  7300  0015CC  6E08               	movwf	?_Write_b_eep,c
  7301  0015CE  0E00               	movlw	0
  7302  0015D0  6A0A               	clrf	?_Write_b_eep+2,c
  7303  0015D2  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7304                           
  7305                           ;main.c: 526: (Busy_eep(), Write_b_eep(0x43 + 20,0));
  7306  0015D6  ECE9  F01E         	call	_Busy_eep	;wreg free
  7307  0015DA  6A09               	clrf	?_Write_b_eep+1,c
  7308  0015DC  0E57               	movlw	87
  7309  0015DE  6E08               	movwf	?_Write_b_eep,c
  7310  0015E0  0E00               	movlw	0
  7311  0015E2  6A0A               	clrf	?_Write_b_eep+2,c
  7312  0015E4  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7313                           
  7314                           ;main.c: 527: (Busy_eep(), Write_b_eep(0x43 + 21,0));
  7315  0015E8  ECE9  F01E         	call	_Busy_eep	;wreg free
  7316  0015EC  6A09               	clrf	?_Write_b_eep+1,c
  7317  0015EE  0E58               	movlw	88
  7318  0015F0  6E08               	movwf	?_Write_b_eep,c
  7319  0015F2  0E00               	movlw	0
  7320  0015F4  6A0A               	clrf	?_Write_b_eep+2,c
  7321  0015F6  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7322                           
  7323                           ;main.c: 528: (Busy_eep(), Write_b_eep(0x43 + 22,0));
  7324  0015FA  ECE9  F01E         	call	_Busy_eep	;wreg free
  7325  0015FE  6A09               	clrf	?_Write_b_eep+1,c
  7326  001600  0E59               	movlw	89
  7327  001602  6E08               	movwf	?_Write_b_eep,c
  7328  001604  0E00               	movlw	0
  7329  001606  6A0A               	clrf	?_Write_b_eep+2,c
  7330  001608  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7331                           
  7332                           ;main.c: 529: (Busy_eep(), Write_b_eep(0x43 + 23,0));
  7333  00160C  ECE9  F01E         	call	_Busy_eep	;wreg free
  7334  001610  6A09               	clrf	?_Write_b_eep+1,c
  7335  001612  0E5A               	movlw	90
  7336  001614  6E08               	movwf	?_Write_b_eep,c
  7337  001616  0E00               	movlw	0
  7338  001618  6A0A               	clrf	?_Write_b_eep+2,c
  7339  00161A  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7340                           
  7341                           ;main.c: 530: (Busy_eep(), Write_b_eep(0x43 + 24,0));
  7342  00161E  ECE9  F01E         	call	_Busy_eep	;wreg free
  7343  001622  6A09               	clrf	?_Write_b_eep+1,c
  7344  001624  0E5B               	movlw	91
  7345  001626  6E08               	movwf	?_Write_b_eep,c
  7346  001628  0E00               	movlw	0
  7347  00162A  6A0A               	clrf	?_Write_b_eep+2,c
  7348  00162C  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7349                           
  7350                           ;main.c: 531: (Busy_eep(), Write_b_eep(0x43 + 25,0));
  7351  001630  ECE9  F01E         	call	_Busy_eep	;wreg free
  7352  001634  6A09               	clrf	?_Write_b_eep+1,c
  7353  001636  0E5C               	movlw	92
  7354  001638  6E08               	movwf	?_Write_b_eep,c
  7355  00163A  0E00               	movlw	0
  7356  00163C  6A0A               	clrf	?_Write_b_eep+2,c
  7357  00163E  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7358                           
  7359                           ;main.c: 532: (Busy_eep(), Write_b_eep(0x43 + 26,0));
  7360  001642  ECE9  F01E         	call	_Busy_eep	;wreg free
  7361  001646  6A09               	clrf	?_Write_b_eep+1,c
  7362  001648  0E5D               	movlw	93
  7363  00164A  6E08               	movwf	?_Write_b_eep,c
  7364  00164C  0E00               	movlw	0
  7365  00164E  6A0A               	clrf	?_Write_b_eep+2,c
  7366  001650  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7367                           
  7368                           ;main.c: 533: (Busy_eep(), Write_b_eep(0x43 + 27,0));
  7369  001654  ECE9  F01E         	call	_Busy_eep	;wreg free
  7370  001658  6A09               	clrf	?_Write_b_eep+1,c
  7371  00165A  0E5E               	movlw	94
  7372  00165C  6E08               	movwf	?_Write_b_eep,c
  7373  00165E  0E00               	movlw	0
  7374  001660  6A0A               	clrf	?_Write_b_eep+2,c
  7375  001662  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7376                           
  7377                           ;main.c: 534: (Busy_eep(), Write_b_eep(0x43 + 28,0));
  7378  001666  ECE9  F01E         	call	_Busy_eep	;wreg free
  7379  00166A  6A09               	clrf	?_Write_b_eep+1,c
  7380  00166C  0E5F               	movlw	95
  7381  00166E  6E08               	movwf	?_Write_b_eep,c
  7382  001670  0E00               	movlw	0
  7383  001672  6A0A               	clrf	?_Write_b_eep+2,c
  7384  001674  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7385                           
  7386                           ;main.c: 535: (Busy_eep(), Write_b_eep(0x43 + 29,0));
  7387  001678  ECE9  F01E         	call	_Busy_eep	;wreg free
  7388  00167C  6A09               	clrf	?_Write_b_eep+1,c
  7389  00167E  0E60               	movlw	96
  7390  001680  6E08               	movwf	?_Write_b_eep,c
  7391  001682  0E00               	movlw	0
  7392  001684  6A0A               	clrf	?_Write_b_eep+2,c
  7393  001686  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7394                           
  7395                           ;main.c: 536: (Busy_eep(), Write_b_eep(0x43 + 30,0));
  7396  00168A  ECE9  F01E         	call	_Busy_eep	;wreg free
  7397  00168E  6A09               	clrf	?_Write_b_eep+1,c
  7398  001690  0E61               	movlw	97
  7399  001692  6E08               	movwf	?_Write_b_eep,c
  7400  001694  0E00               	movlw	0
  7401  001696  6A0A               	clrf	?_Write_b_eep+2,c
  7402  001698  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7403                           
  7404                           ;main.c: 537: (Busy_eep(), Write_b_eep(0x43 + 31,0));
  7405  00169C  ECE9  F01E         	call	_Busy_eep	;wreg free
  7406  0016A0  6A09               	clrf	?_Write_b_eep+1,c
  7407  0016A2  0E62               	movlw	98
  7408  0016A4  6E08               	movwf	?_Write_b_eep,c
  7409  0016A6  0E00               	movlw	0
  7410  0016A8  6A0A               	clrf	?_Write_b_eep+2,c
  7411  0016AA  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7412                           
  7413                           ;main.c: 538: (Busy_eep(), Write_b_eep(0x43 + 32,0));
  7414  0016AE  ECE9  F01E         	call	_Busy_eep	;wreg free
  7415  0016B2  6A09               	clrf	?_Write_b_eep+1,c
  7416  0016B4  0E63               	movlw	99
  7417  0016B6  6E08               	movwf	?_Write_b_eep,c
  7418  0016B8  0E00               	movlw	0
  7419  0016BA  6A0A               	clrf	?_Write_b_eep+2,c
  7420  0016BC  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7421                           
  7422                           ;main.c: 539: (Busy_eep(), Write_b_eep(0x43 + 33,0));
  7423  0016C0  ECE9  F01E         	call	_Busy_eep	;wreg free
  7424  0016C4  6A09               	clrf	?_Write_b_eep+1,c
  7425  0016C6  0E64               	movlw	100
  7426  0016C8  6E08               	movwf	?_Write_b_eep,c
  7427  0016CA  0E00               	movlw	0
  7428  0016CC  6A0A               	clrf	?_Write_b_eep+2,c
  7429  0016CE  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7430                           
  7431                           ;main.c: 541: (Busy_eep(), Write_b_eep(0x43 + 34,0));
  7432  0016D2  ECE9  F01E         	call	_Busy_eep	;wreg free
  7433  0016D6  6A09               	clrf	?_Write_b_eep+1,c
  7434  0016D8  0E65               	movlw	101
  7435  0016DA  6E08               	movwf	?_Write_b_eep,c
  7436  0016DC  0E00               	movlw	0
  7437  0016DE  6A0A               	clrf	?_Write_b_eep+2,c
  7438  0016E0  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7439                           
  7440                           ;main.c: 542: (Busy_eep(), Write_b_eep(0x43 + 35,0));
  7441  0016E4  ECE9  F01E         	call	_Busy_eep	;wreg free
  7442  0016E8  6A09               	clrf	?_Write_b_eep+1,c
  7443  0016EA  0E66               	movlw	102
  7444  0016EC  6E08               	movwf	?_Write_b_eep,c
  7445  0016EE  0E00               	movlw	0
  7446  0016F0  6A0A               	clrf	?_Write_b_eep+2,c
  7447  0016F2  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7448                           
  7449                           ;main.c: 543: (Busy_eep(), Write_b_eep(0x43 + 36,0));
  7450  0016F6  ECE9  F01E         	call	_Busy_eep	;wreg free
  7451  0016FA  6A09               	clrf	?_Write_b_eep+1,c
  7452  0016FC  0E67               	movlw	103
  7453  0016FE  6E08               	movwf	?_Write_b_eep,c
  7454  001700  0E00               	movlw	0
  7455  001702  6A0A               	clrf	?_Write_b_eep+2,c
  7456  001704  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7457                           
  7458                           ;main.c: 544: (Busy_eep(), Write_b_eep(0x43 + 37,0));
  7459  001708  ECE9  F01E         	call	_Busy_eep	;wreg free
  7460  00170C  6A09               	clrf	?_Write_b_eep+1,c
  7461  00170E  0E68               	movlw	104
  7462  001710  6E08               	movwf	?_Write_b_eep,c
  7463  001712  0E00               	movlw	0
  7464  001714  6A0A               	clrf	?_Write_b_eep+2,c
  7465  001716  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7466                           
  7467                           ;main.c: 545: (Busy_eep(), Write_b_eep(0x43 + 38,0));
  7468  00171A  ECE9  F01E         	call	_Busy_eep	;wreg free
  7469  00171E  6A09               	clrf	?_Write_b_eep+1,c
  7470  001720  0E69               	movlw	105
  7471  001722  6E08               	movwf	?_Write_b_eep,c
  7472  001724  0E00               	movlw	0
  7473  001726  6A0A               	clrf	?_Write_b_eep+2,c
  7474  001728  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7475                           
  7476                           ;main.c: 546: (Busy_eep(), Write_b_eep(0x43 + 39,0));
  7477  00172C  ECE9  F01E         	call	_Busy_eep	;wreg free
  7478  001730  6A09               	clrf	?_Write_b_eep+1,c
  7479  001732  0E6A               	movlw	106
  7480  001734  6E08               	movwf	?_Write_b_eep,c
  7481  001736  0E00               	movlw	0
  7482  001738  6A0A               	clrf	?_Write_b_eep+2,c
  7483  00173A  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7484                           
  7485                           ;main.c: 547: (Busy_eep(), Write_b_eep(0x43 + 40,0));
  7486  00173E  ECE9  F01E         	call	_Busy_eep	;wreg free
  7487  001742  6A09               	clrf	?_Write_b_eep+1,c
  7488  001744  0E6B               	movlw	107
  7489  001746  6E08               	movwf	?_Write_b_eep,c
  7490  001748  0E00               	movlw	0
  7491  00174A  6A0A               	clrf	?_Write_b_eep+2,c
  7492  00174C  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7493                           
  7494                           ;main.c: 548: (Busy_eep(), Write_b_eep(0x43 + 41,0));
  7495  001750  ECE9  F01E         	call	_Busy_eep	;wreg free
  7496  001754  6A09               	clrf	?_Write_b_eep+1,c
  7497  001756  0E6C               	movlw	108
  7498  001758  6E08               	movwf	?_Write_b_eep,c
  7499  00175A  0E00               	movlw	0
  7500  00175C  6A0A               	clrf	?_Write_b_eep+2,c
  7501  00175E  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7502                           
  7503                           ;main.c: 549: (Busy_eep(), Write_b_eep(0x43 + 42,0));
  7504  001762  ECE9  F01E         	call	_Busy_eep	;wreg free
  7505  001766  6A09               	clrf	?_Write_b_eep+1,c
  7506  001768  0E6D               	movlw	109
  7507  00176A  6E08               	movwf	?_Write_b_eep,c
  7508  00176C  0E00               	movlw	0
  7509  00176E  6A0A               	clrf	?_Write_b_eep+2,c
  7510  001770  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7511                           
  7512                           ;main.c: 550: (Busy_eep(), Write_b_eep(0x43 + 43,0));
  7513  001774  ECE9  F01E         	call	_Busy_eep	;wreg free
  7514  001778  6A09               	clrf	?_Write_b_eep+1,c
  7515  00177A  0E6E               	movlw	110
  7516  00177C  6E08               	movwf	?_Write_b_eep,c
  7517  00177E  0E00               	movlw	0
  7518  001780  6A0A               	clrf	?_Write_b_eep+2,c
  7519  001782  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7520                           
  7521                           ;main.c: 551: (Busy_eep(), Write_b_eep(0x43 + 44,0));
  7522  001786  ECE9  F01E         	call	_Busy_eep	;wreg free
  7523  00178A  6A09               	clrf	?_Write_b_eep+1,c
  7524  00178C  0E6F               	movlw	111
  7525  00178E  6E08               	movwf	?_Write_b_eep,c
  7526  001790  0E00               	movlw	0
  7527  001792  6A0A               	clrf	?_Write_b_eep+2,c
  7528  001794  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7529                           
  7530                           ;main.c: 552: (Busy_eep(), Write_b_eep(0x43 + 45,0));
  7531  001798  ECE9  F01E         	call	_Busy_eep	;wreg free
  7532  00179C  6A09               	clrf	?_Write_b_eep+1,c
  7533  00179E  0E70               	movlw	112
  7534  0017A0  6E08               	movwf	?_Write_b_eep,c
  7535  0017A2  0E00               	movlw	0
  7536  0017A4  6A0A               	clrf	?_Write_b_eep+2,c
  7537  0017A6  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7538                           
  7539                           ;main.c: 553: (Busy_eep(), Write_b_eep(0x43 + 46,0));
  7540  0017AA  ECE9  F01E         	call	_Busy_eep	;wreg free
  7541  0017AE  6A09               	clrf	?_Write_b_eep+1,c
  7542  0017B0  0E71               	movlw	113
  7543  0017B2  6E08               	movwf	?_Write_b_eep,c
  7544  0017B4  0E00               	movlw	0
  7545  0017B6  6A0A               	clrf	?_Write_b_eep+2,c
  7546  0017B8  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7547                           
  7548                           ;main.c: 554: (Busy_eep(), Write_b_eep(0x43 + 47,0));
  7549  0017BC  ECE9  F01E         	call	_Busy_eep	;wreg free
  7550  0017C0  6A09               	clrf	?_Write_b_eep+1,c
  7551  0017C2  0E72               	movlw	114
  7552  0017C4  6E08               	movwf	?_Write_b_eep,c
  7553  0017C6  0E00               	movlw	0
  7554  0017C8  6A0A               	clrf	?_Write_b_eep+2,c
  7555  0017CA  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7556                           
  7557                           ;main.c: 555: (Busy_eep(), Write_b_eep(0x43 + 48,0));
  7558  0017CE  ECE9  F01E         	call	_Busy_eep	;wreg free
  7559  0017D2  6A09               	clrf	?_Write_b_eep+1,c
  7560  0017D4  0E73               	movlw	115
  7561  0017D6  6E08               	movwf	?_Write_b_eep,c
  7562  0017D8  0E00               	movlw	0
  7563  0017DA  6A0A               	clrf	?_Write_b_eep+2,c
  7564  0017DC  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7565                           
  7566                           ;main.c: 556: (Busy_eep(), Write_b_eep(0x43 + 49,0));
  7567  0017E0  ECE9  F01E         	call	_Busy_eep	;wreg free
  7568  0017E4  6A09               	clrf	?_Write_b_eep+1,c
  7569  0017E6  0E74               	movlw	116
  7570  0017E8  6E08               	movwf	?_Write_b_eep,c
  7571  0017EA  0E00               	movlw	0
  7572  0017EC  6A0A               	clrf	?_Write_b_eep+2,c
  7573  0017EE  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7574                           
  7575                           ;main.c: 558: (Busy_eep(), Write_b_eep(0x43 + 50,0));
  7576  0017F2  ECE9  F01E         	call	_Busy_eep	;wreg free
  7577  0017F6  6A09               	clrf	?_Write_b_eep+1,c
  7578  0017F8  0E75               	movlw	117
  7579  0017FA  6E08               	movwf	?_Write_b_eep,c
  7580  0017FC  0E00               	movlw	0
  7581  0017FE  6A0A               	clrf	?_Write_b_eep+2,c
  7582  001800  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7583                           
  7584                           ;main.c: 559: (Busy_eep(), Write_b_eep(0x43 + 51,0));
  7585  001804  ECE9  F01E         	call	_Busy_eep	;wreg free
  7586  001808  6A09               	clrf	?_Write_b_eep+1,c
  7587  00180A  0E76               	movlw	118
  7588  00180C  6E08               	movwf	?_Write_b_eep,c
  7589  00180E  0E00               	movlw	0
  7590  001810  6A0A               	clrf	?_Write_b_eep+2,c
  7591  001812  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7592                           
  7593                           ;main.c: 560: (Busy_eep(), Write_b_eep(0x43 + 52,0));
  7594  001816  ECE9  F01E         	call	_Busy_eep	;wreg free
  7595  00181A  6A09               	clrf	?_Write_b_eep+1,c
  7596  00181C  0E77               	movlw	119
  7597  00181E  6E08               	movwf	?_Write_b_eep,c
  7598  001820  0E00               	movlw	0
  7599  001822  6A0A               	clrf	?_Write_b_eep+2,c
  7600  001824  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7601                           
  7602                           ;main.c: 561: (Busy_eep(), Write_b_eep(0x43 + 53,0));
  7603  001828  ECE9  F01E         	call	_Busy_eep	;wreg free
  7604  00182C  6A09               	clrf	?_Write_b_eep+1,c
  7605  00182E  0E78               	movlw	120
  7606  001830  6E08               	movwf	?_Write_b_eep,c
  7607  001832  0E00               	movlw	0
  7608  001834  6A0A               	clrf	?_Write_b_eep+2,c
  7609  001836  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7610                           
  7611                           ;main.c: 562: (Busy_eep(), Write_b_eep(0x43 + 54,0));
  7612  00183A  ECE9  F01E         	call	_Busy_eep	;wreg free
  7613  00183E  6A09               	clrf	?_Write_b_eep+1,c
  7614  001840  0E79               	movlw	121
  7615  001842  6E08               	movwf	?_Write_b_eep,c
  7616  001844  0E00               	movlw	0
  7617  001846  6A0A               	clrf	?_Write_b_eep+2,c
  7618  001848  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7619                           
  7620                           ;main.c: 563: (Busy_eep(), Write_b_eep(0x43 + 55,0));
  7621  00184C  ECE9  F01E         	call	_Busy_eep	;wreg free
  7622  001850  6A09               	clrf	?_Write_b_eep+1,c
  7623  001852  0E7A               	movlw	122
  7624  001854  6E08               	movwf	?_Write_b_eep,c
  7625  001856  0E00               	movlw	0
  7626  001858  6A0A               	clrf	?_Write_b_eep+2,c
  7627  00185A  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7628                           
  7629                           ;main.c: 564: (Busy_eep(), Write_b_eep(0x43 + 56,0));
  7630  00185E  ECE9  F01E         	call	_Busy_eep	;wreg free
  7631  001862  6A09               	clrf	?_Write_b_eep+1,c
  7632  001864  0E7B               	movlw	123
  7633  001866  6E08               	movwf	?_Write_b_eep,c
  7634  001868  0E00               	movlw	0
  7635  00186A  6A0A               	clrf	?_Write_b_eep+2,c
  7636  00186C  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7637                           
  7638                           ;main.c: 565: (Busy_eep(), Write_b_eep(0x43 + 57,0));
  7639  001870  ECE9  F01E         	call	_Busy_eep	;wreg free
  7640  001874  6A09               	clrf	?_Write_b_eep+1,c
  7641  001876  0E7C               	movlw	124
  7642  001878  6E08               	movwf	?_Write_b_eep,c
  7643  00187A  0E00               	movlw	0
  7644  00187C  6A0A               	clrf	?_Write_b_eep+2,c
  7645  00187E  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7646                           
  7647                           ;main.c: 566: (Busy_eep(), Write_b_eep(0x43 + 58,0));
  7648  001882  ECE9  F01E         	call	_Busy_eep	;wreg free
  7649  001886  6A09               	clrf	?_Write_b_eep+1,c
  7650  001888  0E7D               	movlw	125
  7651  00188A  6E08               	movwf	?_Write_b_eep,c
  7652  00188C  0E00               	movlw	0
  7653  00188E  6A0A               	clrf	?_Write_b_eep+2,c
  7654  001890  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7655                           
  7656                           ;main.c: 567: (Busy_eep(), Write_b_eep(0x43 + 59,0));
  7657  001894  ECE9  F01E         	call	_Busy_eep	;wreg free
  7658  001898  6A09               	clrf	?_Write_b_eep+1,c
  7659  00189A  0E7E               	movlw	126
  7660  00189C  6E08               	movwf	?_Write_b_eep,c
  7661  00189E  0E00               	movlw	0
  7662  0018A0  6A0A               	clrf	?_Write_b_eep+2,c
  7663  0018A2  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7664                           
  7665                           ;main.c: 568: (Busy_eep(), Write_b_eep(0x43 + 60,0));
  7666  0018A6  ECE9  F01E         	call	_Busy_eep	;wreg free
  7667  0018AA  6A09               	clrf	?_Write_b_eep+1,c
  7668  0018AC  0E7F               	movlw	127
  7669  0018AE  6E08               	movwf	?_Write_b_eep,c
  7670  0018B0  0E00               	movlw	0
  7671  0018B2  6A0A               	clrf	?_Write_b_eep+2,c
  7672  0018B4  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7673                           
  7674                           ;main.c: 569: (Busy_eep(), Write_b_eep(0x43 + 61,0));
  7675  0018B8  ECE9  F01E         	call	_Busy_eep	;wreg free
  7676  0018BC  6A09               	clrf	?_Write_b_eep+1,c
  7677  0018BE  0E80               	movlw	128
  7678  0018C0  6E08               	movwf	?_Write_b_eep,c
  7679  0018C2  0E00               	movlw	0
  7680  0018C4  6A0A               	clrf	?_Write_b_eep+2,c
  7681  0018C6  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7682                           
  7683                           ;main.c: 570: (Busy_eep(), Write_b_eep(0x43 + 62,0));
  7684  0018CA  ECE9  F01E         	call	_Busy_eep	;wreg free
  7685  0018CE  6A09               	clrf	?_Write_b_eep+1,c
  7686  0018D0  0E81               	movlw	129
  7687  0018D2  6E08               	movwf	?_Write_b_eep,c
  7688  0018D4  0E00               	movlw	0
  7689  0018D6  6A0A               	clrf	?_Write_b_eep+2,c
  7690  0018D8  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7691                           
  7692                           ;main.c: 571: (Busy_eep(), Write_b_eep(0x43 + 63,0));
  7693  0018DC  ECE9  F01E         	call	_Busy_eep	;wreg free
  7694  0018E0  6A09               	clrf	?_Write_b_eep+1,c
  7695  0018E2  0E82               	movlw	130
  7696  0018E4  6E08               	movwf	?_Write_b_eep,c
  7697  0018E6  0E00               	movlw	0
  7698  0018E8  6A0A               	clrf	?_Write_b_eep+2,c
  7699  0018EA  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7700                           
  7701                           ;main.c: 572: (Busy_eep(), Write_b_eep(0x43 + 64,0));
  7702  0018EE  ECE9  F01E         	call	_Busy_eep	;wreg free
  7703  0018F2  6A09               	clrf	?_Write_b_eep+1,c
  7704  0018F4  0E83               	movlw	131
  7705  0018F6  6E08               	movwf	?_Write_b_eep,c
  7706  0018F8  0E00               	movlw	0
  7707  0018FA  6A0A               	clrf	?_Write_b_eep+2,c
  7708  0018FC  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7709                           
  7710                           ;main.c: 573: (Busy_eep(), Write_b_eep(0x43 + 65,0));
  7711  001900  ECE9  F01E         	call	_Busy_eep	;wreg free
  7712  001904  6A09               	clrf	?_Write_b_eep+1,c
  7713  001906  0E84               	movlw	132
  7714  001908  6E08               	movwf	?_Write_b_eep,c
  7715  00190A  0E00               	movlw	0
  7716  00190C  6A0A               	clrf	?_Write_b_eep+2,c
  7717  00190E  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7718                           
  7719                           ;main.c: 577: for ( i = 0; i < 7; i++ ) {
  7720  001912  6A0E               	clrf	init_app_eeprom@i,c
  7721  001914                     l187:
  7722                           
  7723                           ;main.c: 578: for ( j = 0; j < 8; j++ ) {
  7724  001914  6A0F               	clrf	init_app_eeprom@j,c
  7725  001916                     l5011:
  7726                           
  7727                           ;main.c: 579: (Busy_eep(), Write_b_eep(0x43 + 72 + i * 8 + j,0));
  7728  001916  ECE9  F01E         	call	_Busy_eep	;wreg free
  7729  00191A  500F               	movf	init_app_eeprom@j,w,c
  7730  00191C  C00E  F00C         	movff	init_app_eeprom@i,??_init_app_eeprom
  7731  001920  6A0D               	clrf	(??_init_app_eeprom+1)& (0+255),c
  7732  001922  90D8               	bcf	status,0,c
  7733  001924  360C               	rlcf	??_init_app_eeprom,f,c
  7734  001926  360D               	rlcf	??_init_app_eeprom+1,f,c
  7735  001928  90D8               	bcf	status,0,c
  7736  00192A  360C               	rlcf	??_init_app_eeprom,f,c
  7737  00192C  360D               	rlcf	??_init_app_eeprom+1,f,c
  7738  00192E  90D8               	bcf	status,0,c
  7739  001930  360C               	rlcf	??_init_app_eeprom,f,c
  7740  001932  360D               	rlcf	??_init_app_eeprom+1,f,c
  7741  001934  260C               	addwf	??_init_app_eeprom,f,c
  7742  001936  0E00               	movlw	0
  7743  001938  220D               	addwfc	??_init_app_eeprom+1,f,c
  7744  00193A  0E8B               	movlw	139
  7745  00193C  240C               	addwf	??_init_app_eeprom,w,c
  7746  00193E  6E08               	movwf	?_Write_b_eep,c
  7747  001940  0E00               	movlw	0
  7748  001942  200D               	addwfc	??_init_app_eeprom+1,w,c
  7749  001944  6E09               	movwf	?_Write_b_eep+1,c
  7750  001946  0E00               	movlw	0
  7751  001948  6A0A               	clrf	?_Write_b_eep+2,c
  7752  00194A  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7753  00194E  2A0F               	incf	init_app_eeprom@j,f,c
  7754  001950  0E07               	movlw	7
  7755  001952  640F               	cpfsgt	init_app_eeprom@j,c
  7756  001954  D7E0               	goto	l5011
  7757  001956  2A0E               	incf	init_app_eeprom@i,f,c
  7758  001958  0E06               	movlw	6
  7759  00195A  640E               	cpfsgt	init_app_eeprom@i,c
  7760  00195C  D7DB               	goto	l187
  7761  00195E  0C06               	retlw	6
  7762  001960                     __end_of_init_app_eeprom:
  7763                           	opt stack 0
  7764                           tblptru	equ	0xFF8
  7765                           tblptrh	equ	0xFF7
  7766                           tblptrl	equ	0xFF6
  7767                           tablat	equ	0xFF5
  7768                           prodh	equ	0xFF4
  7769                           prodl	equ	0xFF3
  7770                           intcon	equ	0xFF2
  7771                           postinc0	equ	0xFEE
  7772                           wreg	equ	0xFE8
  7773                           indf1	equ	0xFE7
  7774                           fsr1h	equ	0xFE2
  7775                           fsr1l	equ	0xFE1
  7776                           indf2	equ	0xFDF
  7777                           postinc2	equ	0xFDE
  7778                           postdec2	equ	0xFDD
  7779                           plusw2	equ	0xFDB
  7780                           fsr2h	equ	0xFDA
  7781                           fsr2l	equ	0xFD9
  7782                           status	equ	0xFD8
  7783                           
  7784 ;; *************** function _vscp_setUserID *****************
  7785 ;; Defined at:
  7786 ;;		line 2375 in file "../main.c"
  7787 ;; Parameters:    Size  Location     Type
  7788 ;;  idx             1    wreg     unsigned char 
  7789 ;;  data            1   11[COMRAM] unsigned char 
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;  idx             1   12[COMRAM] unsigned char 
  7792 ;; Return value:  Size  Location     Type
  7793 ;;		None               void
  7794 ;; Registers used:
  7795 ;;		wreg, status,2, status,0, cstack
  7796 ;; Tracked objects:
  7797 ;;		On entry : F/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7801 ;;      Params:         1       0       0       0       0       0       0
  7802 ;;      Locals:         1       0       0       0       0       0       0
  7803 ;;      Temps:          0       0       0       0       0       0       0
  7804 ;;      Totals:         2       0       0       0       0       0       0
  7805 ;;Total ram usage:        2 bytes
  7806 ;; Hardware stack levels used:    1
  7807 ;; Hardware stack levels required when called:    3
  7808 ;; This function calls:
  7809 ;;		_Busy_eep
  7810 ;;		_Write_b_eep
  7811 ;; This function is called by:
  7812 ;;		_vscp_writeStdReg
  7813 ;; This function uses a non-reentrant model
  7814 ;;
  7815                           
  7816                           	psect	text21
  7817  003C58                     __ptext21:
  7818                           	opt stack 0
  7819  003C58                     _vscp_setUserID:
  7820                           	opt stack 25
  7821                           
  7822                           ;incstack = 0
  7823                           ;incstack = 0
  7824                           ;vscp_setUserID@idx stored from wreg
  7825  003C58  CFE8 F00D          	movff	wreg,vscp_setUserID@idx
  7826                           
  7827                           ; BSR set to: 0
  7828                           ;main.c: 2376: (Busy_eep(), Write_b_eep(idx + 0x06,data));
  7829  003C5C  ECE9  F01E         	call	_Busy_eep	;wreg free
  7830  003C60  0E06               	movlw	6
  7831  003C62  240D               	addwf	vscp_setUserID@idx,w,c
  7832  003C64  6E08               	movwf	?_Write_b_eep,c
  7833  003C66  6A09               	clrf	?_Write_b_eep+1,c
  7834  003C68  0E00               	movlw	0
  7835  003C6A  2209               	addwfc	?_Write_b_eep+1,f,c
  7836  003C6C  C00C  F00A         	movff	vscp_setUserID@data,?_Write_b_eep+2
  7837  003C70  EFCE  F01C         	goto	_Write_b_eep	;wreg free
  7838  003C74                     __end_of_vscp_setUserID:
  7839                           	opt stack 0
  7840                           tblptru	equ	0xFF8
  7841                           tblptrh	equ	0xFF7
  7842                           tblptrl	equ	0xFF6
  7843                           tablat	equ	0xFF5
  7844                           prodh	equ	0xFF4
  7845                           prodl	equ	0xFF3
  7846                           intcon	equ	0xFF2
  7847                           postinc0	equ	0xFEE
  7848                           wreg	equ	0xFE8
  7849                           indf1	equ	0xFE7
  7850                           fsr1h	equ	0xFE2
  7851                           fsr1l	equ	0xFE1
  7852                           indf2	equ	0xFDF
  7853                           postinc2	equ	0xFDE
  7854                           postdec2	equ	0xFDD
  7855                           plusw2	equ	0xFDB
  7856                           fsr2h	equ	0xFDA
  7857                           fsr2l	equ	0xFD9
  7858                           status	equ	0xFD8
  7859                           
  7860 ;; *************** function _vscp_setManufacturerId *****************
  7861 ;; Defined at:
  7862 ;;		line 818 in file "../main.c"
  7863 ;; Parameters:    Size  Location     Type
  7864 ;;  idx             1    wreg     unsigned char 
  7865 ;;  data            1   11[COMRAM] unsigned char 
  7866 ;; Auto vars:     Size  Location     Type
  7867 ;;  idx             1   12[COMRAM] unsigned char 
  7868 ;; Return value:  Size  Location     Type
  7869 ;;		None               void
  7870 ;; Registers used:
  7871 ;;		wreg, status,2, status,0, cstack
  7872 ;; Tracked objects:
  7873 ;;		On entry : F/0
  7874 ;;		On exit  : 0/0
  7875 ;;		Unchanged: 0/0
  7876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7877 ;;      Params:         1       0       0       0       0       0       0
  7878 ;;      Locals:         1       0       0       0       0       0       0
  7879 ;;      Temps:          0       0       0       0       0       0       0
  7880 ;;      Totals:         2       0       0       0       0       0       0
  7881 ;;Total ram usage:        2 bytes
  7882 ;; Hardware stack levels used:    1
  7883 ;; Hardware stack levels required when called:    3
  7884 ;; This function calls:
  7885 ;;		_Busy_eep
  7886 ;;		_Write_b_eep
  7887 ;; This function is called by:
  7888 ;;		_vscp_writeStdReg
  7889 ;; This function uses a non-reentrant model
  7890 ;;
  7891                           
  7892                           	psect	text22
  7893  003AFE                     __ptext22:
  7894                           	opt stack 0
  7895  003AFE                     _vscp_setManufacturerId:
  7896                           	opt stack 25
  7897                           
  7898                           ;incstack = 0
  7899                           ;incstack = 0
  7900                           ;vscp_setManufacturerId@idx stored from wreg
  7901  003AFE  CFE8 F00D          	movff	wreg,vscp_setManufacturerId@idx
  7902                           
  7903                           ; BSR set to: 0
  7904                           ;main.c: 819: if ( idx>7 ) return;
  7905  003B02  0E07               	movlw	7
  7906  003B04  640D               	cpfsgt	vscp_setManufacturerId@idx,c
  7907  003B06  D001               	goto	l5957
  7908  003B08  D00C               	goto	l253
  7909  003B0A                     l5957:
  7910                           
  7911                           ; BSR set to: 0
  7912                           ;main.c: 820: (Busy_eep(), Write_b_eep(0x0B + idx,data));
  7913  003B0A  ECE9  F01E         	call	_Busy_eep	;wreg free
  7914  003B0E  0E0B               	movlw	11
  7915  003B10  240D               	addwf	vscp_setManufacturerId@idx,w,c
  7916  003B12  6E08               	movwf	?_Write_b_eep,c
  7917  003B14  6A09               	clrf	?_Write_b_eep+1,c
  7918  003B16  0E00               	movlw	0
  7919  003B18  2209               	addwfc	?_Write_b_eep+1,f,c
  7920  003B1A  C00C  F00A         	movff	vscp_setManufacturerId@data,?_Write_b_eep+2
  7921  003B1E  ECCE  F01C         	call	_Write_b_eep	;wreg free
  7922  003B22                     l253:
  7923  003B22  0012               	return	
  7924  003B24                     __end_of_vscp_setManufacturerId:
  7925                           	opt stack 0
  7926                           tblptru	equ	0xFF8
  7927                           tblptrh	equ	0xFF7
  7928                           tblptrl	equ	0xFF6
  7929                           tablat	equ	0xFF5
  7930                           prodh	equ	0xFF4
  7931                           prodl	equ	0xFF3
  7932                           intcon	equ	0xFF2
  7933                           postinc0	equ	0xFEE
  7934                           wreg	equ	0xFE8
  7935                           indf1	equ	0xFE7
  7936                           fsr1h	equ	0xFE2
  7937                           fsr1l	equ	0xFE1
  7938                           indf2	equ	0xFDF
  7939                           postinc2	equ	0xFDE
  7940                           postdec2	equ	0xFDD
  7941                           plusw2	equ	0xFDB
  7942                           fsr2h	equ	0xFDA
  7943                           fsr2l	equ	0xFD9
  7944                           status	equ	0xFD8
  7945                           
  7946 ;; *************** function _vscp_setGUID *****************
  7947 ;; Defined at:
  7948 ;;		line 806 in file "../main.c"
  7949 ;; Parameters:    Size  Location     Type
  7950 ;;  idx             1    wreg     unsigned char 
  7951 ;;  data            1   11[COMRAM] unsigned char 
  7952 ;; Auto vars:     Size  Location     Type
  7953 ;;  idx             1   12[COMRAM] unsigned char 
  7954 ;; Return value:  Size  Location     Type
  7955 ;;		None               void
  7956 ;; Registers used:
  7957 ;;		wreg, status,2, status,0, cstack
  7958 ;; Tracked objects:
  7959 ;;		On entry : F/0
  7960 ;;		On exit  : 0/0
  7961 ;;		Unchanged: 0/0
  7962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7963 ;;      Params:         1       0       0       0       0       0       0
  7964 ;;      Locals:         1       0       0       0       0       0       0
  7965 ;;      Temps:          0       0       0       0       0       0       0
  7966 ;;      Totals:         2       0       0       0       0       0       0
  7967 ;;Total ram usage:        2 bytes
  7968 ;; Hardware stack levels used:    1
  7969 ;; Hardware stack levels required when called:    3
  7970 ;; This function calls:
  7971 ;;		_Busy_eep
  7972 ;;		_Write_b_eep
  7973 ;; This function is called by:
  7974 ;;		_vscp_writeStdReg
  7975 ;; This function uses a non-reentrant model
  7976 ;;
  7977                           
  7978                           	psect	text23
  7979  003B24                     __ptext23:
  7980                           	opt stack 0
  7981  003B24                     _vscp_setGUID:
  7982                           	opt stack 25
  7983                           
  7984                           ;incstack = 0
  7985                           ;incstack = 0
  7986                           ;vscp_setGUID@idx stored from wreg
  7987  003B24  CFE8 F00D          	movff	wreg,vscp_setGUID@idx
  7988                           
  7989                           ; BSR set to: 0
  7990                           ;main.c: 807: if ( idx>15 ) return;
  7991  003B28  0E0F               	movlw	15
  7992  003B2A  640D               	cpfsgt	vscp_setGUID@idx,c
  7993  003B2C  D001               	goto	l5949
  7994  003B2E  D00C               	goto	l249
  7995  003B30                     l5949:
  7996                           
  7997                           ; BSR set to: 0
  7998                           ;main.c: 808: (Busy_eep(), Write_b_eep(0x13 + idx,data));
  7999  003B30  ECE9  F01E         	call	_Busy_eep	;wreg free
  8000  003B34  0E13               	movlw	19
  8001  003B36  240D               	addwf	vscp_setGUID@idx,w,c
  8002  003B38  6E08               	movwf	?_Write_b_eep,c
  8003  003B3A  6A09               	clrf	?_Write_b_eep+1,c
  8004  003B3C  0E00               	movlw	0
  8005  003B3E  2209               	addwfc	?_Write_b_eep+1,f,c
  8006  003B40  C00C  F00A         	movff	vscp_setGUID@data,?_Write_b_eep+2
  8007  003B44  ECCE  F01C         	call	_Write_b_eep	;wreg free
  8008  003B48                     l249:
  8009  003B48  0012               	return	
  8010  003B4A                     __end_of_vscp_setGUID:
  8011                           	opt stack 0
  8012                           tblptru	equ	0xFF8
  8013                           tblptrh	equ	0xFF7
  8014                           tblptrl	equ	0xFF6
  8015                           tablat	equ	0xFF5
  8016                           prodh	equ	0xFF4
  8017                           prodl	equ	0xFF3
  8018                           intcon	equ	0xFF2
  8019                           postinc0	equ	0xFEE
  8020                           wreg	equ	0xFE8
  8021                           indf1	equ	0xFE7
  8022                           fsr1h	equ	0xFE2
  8023                           fsr1l	equ	0xFE1
  8024                           indf2	equ	0xFDF
  8025                           postinc2	equ	0xFDE
  8026                           postdec2	equ	0xFDD
  8027                           plusw2	equ	0xFDB
  8028                           fsr2h	equ	0xFDA
  8029                           fsr2l	equ	0xFD9
  8030                           status	equ	0xFD8
  8031                           
  8032 ;; *************** function _vscp_writeAppReg *****************
  8033 ;; Defined at:
  8034 ;;		line 970 in file "../main.c"
  8035 ;; Parameters:    Size  Location     Type
  8036 ;;  reg             1    wreg     unsigned char 
  8037 ;;  val             1   80[COMRAM] unsigned char 
  8038 ;; Auto vars:     Size  Location     Type
  8039 ;;  reg             1   29[BANK0 ] unsigned char 
  8040 ;;  val             1   26[BANK0 ] unsigned char 
  8041 ;;  bOn             1   28[BANK0 ] enum E15660
  8042 ;;  rv              1   27[BANK0 ] unsigned char 
  8043 ;;  bInfoEvent      1   25[BANK0 ] enum E15660
  8044 ;; Return value:  Size  Location     Type
  8045 ;;                  1    wreg      unsigned char 
  8046 ;; Registers used:
  8047 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8048 ;; Tracked objects:
  8049 ;;		On entry : F/0
  8050 ;;		On exit  : F/0
  8051 ;;		Unchanged: 0/0
  8052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8053 ;;      Params:         1       0       0       0       0       0       0
  8054 ;;      Locals:         0       5       0       0       0       0       0
  8055 ;;      Temps:          0       3       0       0       0       0       0
  8056 ;;      Totals:         1       8       0       0       0       0       0
  8057 ;;Total ram usage:        9 bytes
  8058 ;; Hardware stack levels used:    1
  8059 ;; Hardware stack levels required when called:    7
  8060 ;; This function calls:
  8061 ;;		_Busy_eep
  8062 ;;		_Write_b_eep
  8063 ;;		_Read_b_eep
  8064 ;;		_SendInformationEvent
  8065 ;;		_calculateSetFilterMask
  8066 ;; This function is called by:
  8067 ;;		_vscp_writeRegister
  8068 ;;		_vscp_handleProtocolEvent
  8069 ;; This function uses a non-reentrant model
  8070 ;;
  8071                           
  8072                           	psect	text24
  8073  000622                     __ptext24:
  8074                           	opt stack 0
  8075  000622                     _vscp_writeAppReg:
  8076                           	opt stack 21
  8077                           
  8078                           ;incstack = 0
  8079                           ;incstack = 0
  8080                           ;vscp_writeAppReg@reg stored from wreg
  8081  000622  CFE8 F0CE          	movff	wreg,vscp_writeAppReg@reg
  8082                           
  8083                           ; BSR set to: 0
  8084                           ;main.c: 971: uint8_t rv;
  8085                           ;main.c: 972: BOOL bInfoEvent = 0;
  8086  000626  6BCA               	clrf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8087                           
  8088                           ;main.c: 973: BOOL bOn = 0;
  8089  000628  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8090                           
  8091                           ; BSR set to: 0
  8092                           ;main.c: 975: rv = ~val;
  8093  00062A  1C51               	comf	vscp_writeAppReg@val,w,c
  8094  00062C  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8095                           
  8096                           ; BSR set to: 0
  8097                           ;main.c: 978: if ( reg == 0 ) {
  8098  00062E  67CE               	tstfsz	vscp_writeAppReg@reg& (0+255),b
  8099  000630  D00F               	goto	l10485
  8100                           
  8101                           ; BSR set to: 0
  8102                           ;main.c: 979: (Busy_eep(), Write_b_eep(0x43 + 0,val));
  8103  000632  ECE9  F01E         	call	_Busy_eep	;wreg free
  8104  000636  6A09               	clrf	?_Write_b_eep+1,c
  8105  000638  0E43               	movlw	67
  8106  00063A  6E08               	movwf	?_Write_b_eep,c
  8107  00063C  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8108  000640  ECCE  F01C         	call	_Write_b_eep	;wreg free
  8109                           
  8110                           ;main.c: 980: rv = Read_b_eep(0x43 + 0);
  8111  000644  6A09               	clrf	?_Read_b_eep+1,c
  8112  000646  0E43               	movlw	67
  8113  000648  6E08               	movwf	?_Read_b_eep,c
  8114  00064A  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8115  00064E  D3B4               	goto	L27
  8116  000650                     l10485:
  8117                           
  8118                           ; BSR set to: 0
  8119                           ;main.c: 982: else if ( reg == 1 ) {
  8120  000650  05CE               	decf	vscp_writeAppReg@reg& (0+255),w,b
  8121  000652  E10F               	bnz	l10493
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;main.c: 984: (Busy_eep(), Write_b_eep(0x43 + 1,val));
  8125  000654  ECE9  F01E         	call	_Busy_eep	;wreg free
  8126  000658  6A09               	clrf	?_Write_b_eep+1,c
  8127  00065A  0E44               	movlw	68
  8128  00065C  6E08               	movwf	?_Write_b_eep,c
  8129  00065E  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  8130  000662  ECCE  F01C         	call	_Write_b_eep	;wreg free
  8131                           
  8132                           ;main.c: 985: rv = Read_b_eep(0x43 + 1);
  8133  000666  6A09               	clrf	?_Read_b_eep+1,c
  8134  000668  0E44               	movlw	68
  8135  00066A  6E08               	movwf	?_Read_b_eep,c
  8136  00066C  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8137  000670  D3A3               	goto	L27
  8138  000672                     l10493:
  8139                           
  8140                           ; BSR set to: 0
  8141                           ;main.c: 988: else if ( (reg >= 2) && (reg <= 9) ) {
  8142  000672  0E01               	movlw	1
  8143  000674  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8144  000676  D17B               	goto	l10645
  8145                           
  8146                           ; BSR set to: 0
  8147  000678  0E0A               	movlw	10
  8148  00067A  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8149  00067C  D178               	goto	l10645
  8150                           
  8151                           ; BSR set to: 0
  8152                           ;main.c: 990: if ( Read_b_eep(0x43 + 10 + reg - 2) &
  8153                           ;main.c: 992: 0x80 ) {
  8154  00067E  0E4B               	movlw	75
  8155  000680  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8156  000682  6E08               	movwf	?_Read_b_eep,c
  8157  000684  6A09               	clrf	?_Read_b_eep+1,c
  8158  000686  0E00               	movlw	0
  8159  000688  2209               	addwfc	?_Read_b_eep+1,f,c
  8160  00068A  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8161  00068E  0100               	movlb	0	; () banked
  8162  000690  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8163  000692  BFC7               	btfsc	??_vscp_writeAppReg& (0+255),7,b
  8164  000694  D157               	goto	l10643
  8165  000696  D3A1               	goto	l10905
  8166  000698                     l10501:
  8167                           
  8168                           ; BSR set to: 0
  8169                           ;main.c: 999: bInfoEvent = 1;
  8170  000698  0E01               	movlw	1
  8171  00069A  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8172                           
  8173                           ; BSR set to: 0
  8174                           ;main.c: 1001: if ( 1 == val ) {
  8175  00069C  0451               	decf	vscp_writeAppReg@val,w,c
  8176  00069E  E126               	bnz	l306
  8177                           
  8178                           ; BSR set to: 0
  8179                           ;main.c: 1003: LATBbits.LATB4 = 1;
  8180  0006A0  888A               	bsf	3978,4,c	;volatile
  8181                           
  8182                           ; BSR set to: 0
  8183                           ;main.c: 1004: rv = LATBbits.LATB4;
  8184  0006A2  0E00               	movlw	0
  8185  0006A4  B88A               	btfsc	3978,4,c	;volatile
  8186  0006A6  0E01               	movlw	1
  8187  0006A8  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8188                           
  8189                           ; BSR set to: 0
  8190                           ;main.c: 1005: bOn = 1;
  8191  0006AA  0E01               	movlw	1
  8192  0006AC  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8193                           
  8194                           ; BSR set to: 0
  8195                           ;main.c: 1008: if ( Read_b_eep(0x43 + 10) & 0x04 ) {
  8196  0006AE  6A09               	clrf	?_Read_b_eep+1,c
  8197  0006B0  0E4D               	movlw	77
  8198  0006B2  6E08               	movwf	?_Read_b_eep,c
  8199  0006B4  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8200  0006B8  0100               	movlb	0	; () banked
  8201  0006BA  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8202  0006BC  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8203  0006BE  D38D               	goto	l10905
  8204  0006C0                     l10513:
  8205                           
  8206                           ; BSR set to: 0
  8207                           ;main.c: 1009: relay_protection_timer[ 0 ] =
  8208                           ;main.c: 1010: Read_b_eep(0x43 + 34) * 256 +
  8209                           ;main.c: 1011: Read_b_eep(0x43 + 35);
  8210  0006C0  6A09               	clrf	?_Read_b_eep+1,c
  8211  0006C2  0E66               	movlw	102
  8212  0006C4  6E08               	movwf	?_Read_b_eep,c
  8213  0006C6  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8214  0006CA  0100               	movlb	0	; () banked
  8215  0006CC  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8216  0006CE  6A09               	clrf	?_Read_b_eep+1,c
  8217  0006D0  0E65               	movlw	101
  8218  0006D2  6E08               	movwf	?_Read_b_eep,c
  8219  0006D4  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8220  0006D8  0100               	movlb	0	; () banked
  8221  0006DA  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8222  0006DC  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8223  0006DE  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8224  0006E0  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8225  0006E2  6F60               	movwf	_relay_protection_timer& (0+255),b
  8226  0006E4  0E00               	movlw	0
  8227  0006E6  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8228  0006E8  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  8229  0006EA  D377               	goto	l10905
  8230  0006EC                     l306:
  8231                           
  8232                           ; BSR set to: 0
  8233                           ;main.c: 1015: else if (0 == val) {
  8234  0006EC  6651               	tstfsz	vscp_writeAppReg@val,c
  8235  0006EE  D375               	goto	l10905
  8236                           
  8237                           ; BSR set to: 0
  8238                           ;main.c: 1016: LATBbits.LATB4 = 0;
  8239  0006F0  988A               	bcf	3978,4,c	;volatile
  8240                           
  8241                           ; BSR set to: 0
  8242                           ;main.c: 1017: rv = LATBbits.LATB4;
  8243  0006F2  0E00               	movlw	0
  8244  0006F4  B88A               	btfsc	3978,4,c	;volatile
  8245  0006F6  0E01               	movlw	1
  8246  0006F8  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8247  0006FA                     l10519:
  8248                           
  8249                           ; BSR set to: 0
  8250                           ;main.c: 1018: bOn = 0;
  8251  0006FA  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8252  0006FC  D36E               	goto	l10905
  8253  0006FE                     l10521:
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;main.c: 1025: bInfoEvent = 1;
  8257  0006FE  0E01               	movlw	1
  8258  000700  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8259                           
  8260                           ; BSR set to: 0
  8261                           ;main.c: 1027: if (1 == val) {
  8262  000702  0451               	decf	vscp_writeAppReg@val,w,c
  8263  000704  E11D               	bnz	l312
  8264                           
  8265                           ; BSR set to: 0
  8266                           ;main.c: 1029: LATBbits.LATB1 = 1;
  8267  000706  828A               	bsf	3978,1,c	;volatile
  8268                           
  8269                           ; BSR set to: 0
  8270                           ;main.c: 1030: rv = LATBbits.LATB1;
  8271  000708  0E00               	movlw	0
  8272  00070A  B28A               	btfsc	3978,1,c	;volatile
  8273  00070C  0E01               	movlw	1
  8274  00070E  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8275                           
  8276                           ; BSR set to: 0
  8277                           ;main.c: 1031: bOn = 1;
  8278  000710  0E01               	movlw	1
  8279  000712  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8280                           
  8281                           ; BSR set to: 0
  8282                           ;main.c: 1033: if (Read_b_eep(0x43 + 11) & 0x04) {
  8283  000714  6A09               	clrf	?_Read_b_eep+1,c
  8284  000716  0E4E               	movlw	78
  8285  000718  6E08               	movwf	?_Read_b_eep,c
  8286  00071A  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8287  00071E  0100               	movlb	0	; () banked
  8288  000720  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8289  000722  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8290  000724  D35A               	goto	l10905
  8291  000726                     l10533:
  8292                           
  8293                           ; BSR set to: 0
  8294                           ;main.c: 1034: relay_protection_timer[ 1 ] =
  8295                           ;main.c: 1035: Read_b_eep(0x43 + 36) * 256 +
  8296                           ;main.c: 1036: Read_b_eep(0x43 + 37);
  8297  000726  6A09               	clrf	?_Read_b_eep+1,c
  8298  000728  0E68               	movlw	104
  8299  00072A  6E08               	movwf	?_Read_b_eep,c
  8300  00072C  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8301  000730  0100               	movlb	0	; () banked
  8302  000732  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8303  000734  6A09               	clrf	?_Read_b_eep+1,c
  8304  000736  0E67               	movlw	103
  8305  000738  6E08               	movwf	?_Read_b_eep,c
  8306  00073A  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8307  00073E  D170               	goto	L28
  8308  000740                     l312:
  8309                           
  8310                           ; BSR set to: 0
  8311                           ;main.c: 1040: else if (0 == val) {
  8312  000740  6651               	tstfsz	vscp_writeAppReg@val,c
  8313  000742  D34B               	goto	l10905
  8314                           
  8315                           ; BSR set to: 0
  8316                           ;main.c: 1041: LATBbits.LATB1 = 0;
  8317  000744  928A               	bcf	3978,1,c	;volatile
  8318                           
  8319                           ; BSR set to: 0
  8320                           ;main.c: 1042: rv = LATBbits.LATB1;
  8321  000746  0E00               	movlw	0
  8322  000748  B28A               	btfsc	3978,1,c	;volatile
  8323  00074A  0E01               	movlw	1
  8324  00074C  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8325  00074E  D7D5               	goto	l10519
  8326  000750                     l10541:
  8327                           
  8328                           ; BSR set to: 0
  8329                           ;main.c: 1050: bInfoEvent = 1;
  8330  000750  0E01               	movlw	1
  8331  000752  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8332                           
  8333                           ; BSR set to: 0
  8334                           ;main.c: 1052: if (1 == val) {
  8335  000754  0451               	decf	vscp_writeAppReg@val,w,c
  8336  000756  E126               	bnz	l317
  8337                           
  8338                           ; BSR set to: 0
  8339                           ;main.c: 1054: LATBbits.LATB0 = 1;
  8340  000758  808A               	bsf	3978,0,c	;volatile
  8341                           
  8342                           ; BSR set to: 0
  8343                           ;main.c: 1055: rv = LATBbits.LATB0;
  8344  00075A  0E00               	movlw	0
  8345  00075C  B08A               	btfsc	3978,0,c	;volatile
  8346  00075E  0E01               	movlw	1
  8347  000760  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8348                           
  8349                           ; BSR set to: 0
  8350                           ;main.c: 1056: bOn = 1;
  8351  000762  0E01               	movlw	1
  8352  000764  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8353                           
  8354                           ; BSR set to: 0
  8355                           ;main.c: 1058: if ( Read_b_eep(0x43 + 12) & 0x04) {
  8356  000766  6A09               	clrf	?_Read_b_eep+1,c
  8357  000768  0E4F               	movlw	79
  8358  00076A  6E08               	movwf	?_Read_b_eep,c
  8359  00076C  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8360  000770  0100               	movlb	0	; () banked
  8361  000772  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8362  000774  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8363  000776  D331               	goto	l10905
  8364  000778                     l10553:
  8365                           
  8366                           ; BSR set to: 0
  8367                           ;main.c: 1059: relay_protection_timer[ 2 ] =
  8368                           ;main.c: 1060: Read_b_eep(0x43 + 38) * 256 +
  8369                           ;main.c: 1061: Read_b_eep(0x43 + 39);
  8370  000778  6A09               	clrf	?_Read_b_eep+1,c
  8371  00077A  0E6A               	movlw	106
  8372  00077C  6E08               	movwf	?_Read_b_eep,c
  8373  00077E  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8374  000782  0100               	movlb	0	; () banked
  8375  000784  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8376  000786  6A09               	clrf	?_Read_b_eep+1,c
  8377  000788  0E69               	movlw	105
  8378  00078A  6E08               	movwf	?_Read_b_eep,c
  8379  00078C  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8380  000790  0100               	movlb	0	; () banked
  8381  000792  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8382  000794  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8383  000796  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8384  000798  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8385  00079A  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  8386  00079C  0E00               	movlw	0
  8387  00079E  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8388  0007A0  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  8389  0007A2  D31B               	goto	l10905
  8390  0007A4                     l317:
  8391                           
  8392                           ; BSR set to: 0
  8393                           ;main.c: 1065: else if (0 == val) {
  8394  0007A4  6651               	tstfsz	vscp_writeAppReg@val,c
  8395  0007A6  D319               	goto	l10905
  8396                           
  8397                           ; BSR set to: 0
  8398                           ;main.c: 1066: LATBbits.LATB0 = 0;
  8399  0007A8  908A               	bcf	3978,0,c	;volatile
  8400                           
  8401                           ; BSR set to: 0
  8402                           ;main.c: 1067: rv = LATBbits.LATB0;
  8403  0007AA  0E00               	movlw	0
  8404  0007AC  B08A               	btfsc	3978,0,c	;volatile
  8405  0007AE  0E01               	movlw	1
  8406  0007B0  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8407  0007B2  D7A3               	goto	l10519
  8408  0007B4                     l10561:
  8409                           
  8410                           ; BSR set to: 0
  8411                           ;main.c: 1076: bInfoEvent = 1;
  8412  0007B4  0E01               	movlw	1
  8413  0007B6  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8414                           
  8415                           ; BSR set to: 0
  8416                           ;main.c: 1078: if (1 == val) {
  8417  0007B8  0451               	decf	vscp_writeAppReg@val,w,c
  8418  0007BA  E126               	bnz	l322
  8419                           
  8420                           ; BSR set to: 0
  8421                           ;main.c: 1080: LATCbits.LATC7 = 1;
  8422  0007BC  8E8B               	bsf	3979,7,c	;volatile
  8423                           
  8424                           ; BSR set to: 0
  8425                           ;main.c: 1081: rv = LATCbits.LATC7;
  8426  0007BE  0E00               	movlw	0
  8427  0007C0  BE8B               	btfsc	3979,7,c	;volatile
  8428  0007C2  0E01               	movlw	1
  8429  0007C4  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8430                           
  8431                           ; BSR set to: 0
  8432                           ;main.c: 1082: bOn = 1;
  8433  0007C6  0E01               	movlw	1
  8434  0007C8  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8435                           
  8436                           ; BSR set to: 0
  8437                           ;main.c: 1084: if (Read_b_eep(0x43 + 13) & 0x04) {
  8438  0007CA  6A09               	clrf	?_Read_b_eep+1,c
  8439  0007CC  0E50               	movlw	80
  8440  0007CE  6E08               	movwf	?_Read_b_eep,c
  8441  0007D0  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8442  0007D4  0100               	movlb	0	; () banked
  8443  0007D6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8444  0007D8  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8445  0007DA  D2FF               	goto	l10905
  8446  0007DC                     l10573:
  8447                           
  8448                           ; BSR set to: 0
  8449                           ;main.c: 1085: relay_protection_timer[ 3 ] =
  8450                           ;main.c: 1086: Read_b_eep(0x43 + 40) * 256 +
  8451                           ;main.c: 1087: Read_b_eep(0x43 + 41);
  8452  0007DC  6A09               	clrf	?_Read_b_eep+1,c
  8453  0007DE  0E6C               	movlw	108
  8454  0007E0  6E08               	movwf	?_Read_b_eep,c
  8455  0007E2  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8456  0007E6  0100               	movlb	0	; () banked
  8457  0007E8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8458  0007EA  6A09               	clrf	?_Read_b_eep+1,c
  8459  0007EC  0E6B               	movlw	107
  8460  0007EE  6E08               	movwf	?_Read_b_eep,c
  8461  0007F0  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8462  0007F4  0100               	movlb	0	; () banked
  8463  0007F6  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8464  0007F8  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8465  0007FA  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8466  0007FC  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8467  0007FE  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  8468  000800  0E00               	movlw	0
  8469  000802  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8470  000804  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  8471  000806  D2E9               	goto	l10905
  8472  000808                     l322:
  8473                           
  8474                           ; BSR set to: 0
  8475                           ;main.c: 1091: else if (0 == val) {
  8476  000808  6651               	tstfsz	vscp_writeAppReg@val,c
  8477  00080A  D2E7               	goto	l10905
  8478                           
  8479                           ; BSR set to: 0
  8480                           ;main.c: 1092: LATCbits.LATC7 = 0;
  8481  00080C  9E8B               	bcf	3979,7,c	;volatile
  8482                           
  8483                           ; BSR set to: 0
  8484                           ;main.c: 1093: rv = LATCbits.LATC7;
  8485  00080E  0E00               	movlw	0
  8486  000810  BE8B               	btfsc	3979,7,c	;volatile
  8487  000812  0E01               	movlw	1
  8488  000814  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8489  000816  D771               	goto	l10519
  8490  000818                     l10581:
  8491                           
  8492                           ; BSR set to: 0
  8493                           ;main.c: 1102: bInfoEvent = 1;
  8494  000818  0E01               	movlw	1
  8495  00081A  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8496                           
  8497                           ; BSR set to: 0
  8498                           ;main.c: 1104: if (1 == val) {
  8499  00081C  0451               	decf	vscp_writeAppReg@val,w,c
  8500  00081E  E126               	bnz	l327
  8501                           
  8502                           ; BSR set to: 0
  8503                           ;main.c: 1106: LATCbits.LATC6 = 1;
  8504  000820  8C8B               	bsf	3979,6,c	;volatile
  8505                           
  8506                           ; BSR set to: 0
  8507                           ;main.c: 1107: rv = LATCbits.LATC6;
  8508  000822  0E00               	movlw	0
  8509  000824  BC8B               	btfsc	3979,6,c	;volatile
  8510  000826  0E01               	movlw	1
  8511  000828  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8512                           
  8513                           ; BSR set to: 0
  8514                           ;main.c: 1108: bOn = 1;
  8515  00082A  0E01               	movlw	1
  8516  00082C  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8517                           
  8518                           ; BSR set to: 0
  8519                           ;main.c: 1110: if (Read_b_eep(0x43 + 14) & 0x04) {
  8520  00082E  6A09               	clrf	?_Read_b_eep+1,c
  8521  000830  0E51               	movlw	81
  8522  000832  6E08               	movwf	?_Read_b_eep,c
  8523  000834  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8524  000838  0100               	movlb	0	; () banked
  8525  00083A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8526  00083C  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8527  00083E  D2CD               	goto	l10905
  8528  000840                     l10593:
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;main.c: 1111: relay_protection_timer[ 4 ] =
  8532                           ;main.c: 1112: Read_b_eep(0x43 + 42) * 256 +
  8533                           ;main.c: 1113: Read_b_eep(0x43 + 43);
  8534  000840  6A09               	clrf	?_Read_b_eep+1,c
  8535  000842  0E6E               	movlw	110
  8536  000844  6E08               	movwf	?_Read_b_eep,c
  8537  000846  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8538  00084A  0100               	movlb	0	; () banked
  8539  00084C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8540  00084E  6A09               	clrf	?_Read_b_eep+1,c
  8541  000850  0E6D               	movlw	109
  8542  000852  6E08               	movwf	?_Read_b_eep,c
  8543  000854  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8544  000858  0100               	movlb	0	; () banked
  8545  00085A  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8546  00085C  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8547  00085E  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8548  000860  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8549  000862  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  8550  000864  0E00               	movlw	0
  8551  000866  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8552  000868  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  8553  00086A  D2B7               	goto	l10905
  8554  00086C                     l327:
  8555                           
  8556                           ; BSR set to: 0
  8557                           ;main.c: 1117: else if (0 == val) {
  8558  00086C  6651               	tstfsz	vscp_writeAppReg@val,c
  8559  00086E  D2B5               	goto	l10905
  8560                           
  8561                           ; BSR set to: 0
  8562                           ;main.c: 1118: LATCbits.LATC6 = 0;
  8563  000870  9C8B               	bcf	3979,6,c	;volatile
  8564                           
  8565                           ; BSR set to: 0
  8566                           ;main.c: 1119: rv = LATCbits.LATC6;
  8567  000872  0E00               	movlw	0
  8568  000874  BC8B               	btfsc	3979,6,c	;volatile
  8569  000876  0E01               	movlw	1
  8570  000878  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8571  00087A  D73F               	goto	l10519
  8572  00087C                     l10601:
  8573                           
  8574                           ; BSR set to: 0
  8575                           ;main.c: 1128: bInfoEvent = 1;
  8576  00087C  0E01               	movlw	1
  8577  00087E  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8578                           
  8579                           ; BSR set to: 0
  8580                           ;main.c: 1130: if (1 == val) {
  8581  000880  0451               	decf	vscp_writeAppReg@val,w,c
  8582  000882  E126               	bnz	l332
  8583                           
  8584                           ; BSR set to: 0
  8585                           ;main.c: 1132: LATCbits.LATC5 = 1;
  8586  000884  8A8B               	bsf	3979,5,c	;volatile
  8587                           
  8588                           ; BSR set to: 0
  8589                           ;main.c: 1133: rv = LATCbits.LATC5;
  8590  000886  0E00               	movlw	0
  8591  000888  BA8B               	btfsc	3979,5,c	;volatile
  8592  00088A  0E01               	movlw	1
  8593  00088C  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8594                           
  8595                           ; BSR set to: 0
  8596                           ;main.c: 1134: bOn = 1;
  8597  00088E  0E01               	movlw	1
  8598  000890  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;main.c: 1136: if (Read_b_eep(0x43 + 15) & 0x04) {
  8602  000892  6A09               	clrf	?_Read_b_eep+1,c
  8603  000894  0E52               	movlw	82
  8604  000896  6E08               	movwf	?_Read_b_eep,c
  8605  000898  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8606  00089C  0100               	movlb	0	; () banked
  8607  00089E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8608  0008A0  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8609  0008A2  D29B               	goto	l10905
  8610  0008A4                     l10613:
  8611                           
  8612                           ; BSR set to: 0
  8613                           ;main.c: 1137: relay_protection_timer[ 5 ] =
  8614                           ;main.c: 1138: Read_b_eep(0x43 + 44) * 256 +
  8615                           ;main.c: 1139: Read_b_eep(0x43 + 45);
  8616  0008A4  6A09               	clrf	?_Read_b_eep+1,c
  8617  0008A6  0E70               	movlw	112
  8618  0008A8  6E08               	movwf	?_Read_b_eep,c
  8619  0008AA  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8620  0008AE  0100               	movlb	0	; () banked
  8621  0008B0  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8622  0008B2  6A09               	clrf	?_Read_b_eep+1,c
  8623  0008B4  0E6F               	movlw	111
  8624  0008B6  6E08               	movwf	?_Read_b_eep,c
  8625  0008B8  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8626  0008BC  0100               	movlb	0	; () banked
  8627  0008BE  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8628  0008C0  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8629  0008C2  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8630  0008C4  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8631  0008C6  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  8632  0008C8  0E00               	movlw	0
  8633  0008CA  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8634  0008CC  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  8635  0008CE  D285               	goto	l10905
  8636  0008D0                     l332:
  8637                           
  8638                           ; BSR set to: 0
  8639                           ;main.c: 1143: else if (0 == val) {
  8640  0008D0  6651               	tstfsz	vscp_writeAppReg@val,c
  8641  0008D2  D283               	goto	l10905
  8642                           
  8643                           ; BSR set to: 0
  8644                           ;main.c: 1144: LATCbits.LATC5 = 0;
  8645  0008D4  9A8B               	bcf	3979,5,c	;volatile
  8646                           
  8647                           ; BSR set to: 0
  8648                           ;main.c: 1145: rv = LATCbits.LATC5;
  8649  0008D6  0E00               	movlw	0
  8650  0008D8  BA8B               	btfsc	3979,5,c	;volatile
  8651  0008DA  0E01               	movlw	1
  8652  0008DC  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8653  0008DE  D70D               	goto	l10519
  8654  0008E0                     l10621:
  8655                           
  8656                           ; BSR set to: 0
  8657                           ;main.c: 1153: bInfoEvent = 1;
  8658  0008E0  0E01               	movlw	1
  8659  0008E2  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8660                           
  8661                           ; BSR set to: 0
  8662                           ;main.c: 1155: if (1 == val) {
  8663  0008E4  0451               	decf	vscp_writeAppReg@val,w,c
  8664  0008E6  E126               	bnz	l337
  8665                           
  8666                           ; BSR set to: 0
  8667                           ;main.c: 1157: LATCbits.LATC4 = 1;
  8668  0008E8  888B               	bsf	3979,4,c	;volatile
  8669                           
  8670                           ; BSR set to: 0
  8671                           ;main.c: 1158: rv = LATCbits.LATC4;
  8672  0008EA  0E00               	movlw	0
  8673  0008EC  B88B               	btfsc	3979,4,c	;volatile
  8674  0008EE  0E01               	movlw	1
  8675  0008F0  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8676                           
  8677                           ; BSR set to: 0
  8678                           ;main.c: 1159: bOn = 1;
  8679  0008F2  0E01               	movlw	1
  8680  0008F4  6FCD               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8681                           
  8682                           ; BSR set to: 0
  8683                           ;main.c: 1161: if (Read_b_eep(0x43 + 16) & 0x04) {
  8684  0008F6  6A09               	clrf	?_Read_b_eep+1,c
  8685  0008F8  0E53               	movlw	83
  8686  0008FA  6E08               	movwf	?_Read_b_eep,c
  8687  0008FC  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8688  000900  0100               	movlb	0	; () banked
  8689  000902  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8690  000904  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8691  000906  D269               	goto	l10905
  8692  000908                     l10633:
  8693                           
  8694                           ; BSR set to: 0
  8695                           ;main.c: 1162: relay_protection_timer[ 6 ] =
  8696                           ;main.c: 1163: Read_b_eep(0x43 + 46) * 256 +
  8697                           ;main.c: 1164: Read_b_eep(0x43 + 47);
  8698  000908  6A09               	clrf	?_Read_b_eep+1,c
  8699  00090A  0E72               	movlw	114
  8700  00090C  6E08               	movwf	?_Read_b_eep,c
  8701  00090E  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8702  000912  0100               	movlb	0	; () banked
  8703  000914  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8704  000916  6A09               	clrf	?_Read_b_eep+1,c
  8705  000918  0E71               	movlw	113
  8706  00091A  6E08               	movwf	?_Read_b_eep,c
  8707  00091C  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8708  000920  0100               	movlb	0	; () banked
  8709  000922  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8710  000924  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8711  000926  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8712  000928  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8713  00092A  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  8714  00092C  0E00               	movlw	0
  8715  00092E  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8716  000930  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  8717  000932  D253               	goto	l10905
  8718  000934                     l337:
  8719                           
  8720                           ; BSR set to: 0
  8721                           ;main.c: 1168: else if (0 == val) {
  8722  000934  6651               	tstfsz	vscp_writeAppReg@val,c
  8723  000936  D251               	goto	l10905
  8724                           
  8725                           ; BSR set to: 0
  8726                           ;main.c: 1169: LATCbits.LATC4 = 0;
  8727  000938  988B               	bcf	3979,4,c	;volatile
  8728                           
  8729                           ; BSR set to: 0
  8730                           ;main.c: 1170: rv = LATCbits.LATC4;
  8731  00093A  0E00               	movlw	0
  8732  00093C  B88B               	btfsc	3979,4,c	;volatile
  8733  00093E  0E01               	movlw	1
  8734  000940  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8735  000942  D6DB               	goto	l10519
  8736  000944                     l10643:
  8737                           
  8738                           ; BSR set to: 0
  8739  000944  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  8740                           
  8741                           ; Switch size 1, requested type "space"
  8742                           ; Number of cases is 7, Range of values is 2 to 8
  8743                           ; switch strategies available:
  8744                           ; Name         Instructions Cycles
  8745                           ; simple_byte           22    12 (average)
  8746                           ;	Chosen strategy is simple_byte
  8747  000946  0A02               	xorlw	2	; case 2
  8748  000948  E101 D6A6          	bz	l10501
  8749  00094C  0A01               	xorlw	1	; case 3
  8750  00094E  E101 D6D6          	bz	l10521
  8751  000952  0A07               	xorlw	7	; case 4
  8752  000954  E101 D6FC          	bz	l10541
  8753  000958  0A01               	xorlw	1	; case 5
  8754  00095A  E101 D72B          	bz	l10561
  8755  00095E  0A03               	xorlw	3	; case 6
  8756  000960  E101 D75A          	bz	l10581
  8757  000964  0A01               	xorlw	1	; case 7
  8758  000966  E08A               	bz	l10601
  8759  000968  0A0F               	xorlw	15	; case 8
  8760  00096A  E0BA               	bz	l10621
  8761                           
  8762                           ; BSR set to: 0
  8763                           ;main.c: 1176: }
  8764                           ;main.c: 1177: }
  8765  00096C  D236               	goto	l10905
  8766  00096E                     l10645:
  8767                           
  8768                           ; BSR set to: 0
  8769                           ;main.c: 1180: else if ( (reg >= 10 ) &&
  8770                           ;main.c: 1181: (reg <= 17) ) {
  8771  00096E  0E09               	movlw	9
  8772  000970  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8773  000972  D12D               	goto	l10823
  8774                           
  8775                           ; BSR set to: 0
  8776  000974  0E12               	movlw	18
  8777  000976  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8778  000978  D12A               	goto	l10823
  8779  00097A  D115               	goto	l10821
  8780  00097C                     l10651:
  8781                           
  8782                           ; BSR set to: 0
  8783                           ;main.c: 1187: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8784  00097C  ECE9  F01E         	call	_Busy_eep	;wreg free
  8785  000980  DA65               	call	PL4	;call to abstracted procedure
  8786  000982  ECCE  F01C         	call	_Write_b_eep	;wreg free
  8787                           
  8788                           ;main.c: 1188: rv = Read_b_eep(0x43 + reg);
  8789  000986  DA6C               	call	PL6	;call to abstracted procedure
  8790  000988  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8791  00098C  0100               	movlb	0	; () banked
  8792  00098E  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8793                           
  8794                           ; BSR set to: 0
  8795                           ;main.c: 1190: if ( val & 0x01 ) {
  8796  000990  A051               	btfss	vscp_writeAppReg@val,0,c
  8797  000992  D011               	goto	l10665
  8798                           
  8799                           ; BSR set to: 0
  8800                           ;main.c: 1192: LATBbits.LATB4 = 0;
  8801  000994  988A               	bcf	3978,4,c	;volatile
  8802                           
  8803                           ;main.c: 1193: bOn = 0;
  8804  000996  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8805                           
  8806                           ; BSR set to: 0
  8807                           ;main.c: 1195: relay_pulse_flags |= 0x01;
  8808  000998  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  8809                           
  8810                           ; BSR set to: 0
  8811                           ;main.c: 1196: relay_pulse_timer[ 0 ] =
  8812                           ;main.c: 1197: Read_b_eep(0x43 + 18) * 256 +
  8813                           ;main.c: 1198: Read_b_eep(0x43 + 19);
  8814  00099A  6A09               	clrf	?_Read_b_eep+1,c
  8815  00099C  0E56               	movlw	86
  8816  00099E  6E08               	movwf	?_Read_b_eep,c
  8817  0009A0  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8818  0009A4  0100               	movlb	0	; () banked
  8819  0009A6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8820  0009A8  6A09               	clrf	?_Read_b_eep+1,c
  8821  0009AA  0E55               	movlw	85
  8822  0009AC  6E08               	movwf	?_Read_b_eep,c
  8823  0009AE  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8824  0009B2  DA5E               	call	PL38	;call to abstracted procedure
  8825                           
  8826                           ;main.c: 1199: }
  8827  0009B4  D003               	goto	l10671
  8828  0009B6                     l10665:
  8829                           
  8830                           ; BSR set to: 0
  8831                           ;main.c: 1200: else {
  8832                           ;main.c: 1201: relay_pulse_flags &= 0b11111110;
  8833  0009B6  918A               	bcf	_relay_pulse_flags& (0+255),0,b
  8834                           
  8835                           ; BSR set to: 0
  8836                           ;main.c: 1202: LATBbits.LATB4 = 0;
  8837  0009B8  988A               	bcf	3978,4,c	;volatile
  8838                           
  8839                           ; BSR set to: 0
  8840                           ;main.c: 1203: bOn = 0;
  8841  0009BA  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8842  0009BC                     l10671:
  8843                           
  8844                           ; BSR set to: 0
  8845                           ;main.c: 1204: }
  8846                           ;main.c: 1206: if ( val & 0x04 ) {
  8847  0009BC  B451               	btfsc	vscp_writeAppReg@val,2,c
  8848  0009BE  D680               	goto	l10513
  8849  0009C0  D20C               	goto	l10905
  8850  0009C2                     l10675:
  8851                           
  8852                           ; BSR set to: 0
  8853                           ;main.c: 1215: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8854  0009C2  ECE9  F01E         	call	_Busy_eep	;wreg free
  8855  0009C6  DA42               	call	PL4	;call to abstracted procedure
  8856  0009C8  ECCE  F01C         	call	_Write_b_eep	;wreg free
  8857                           
  8858                           ;main.c: 1216: rv = Read_b_eep(0x43 + reg);
  8859  0009CC  DA49               	call	PL6	;call to abstracted procedure
  8860  0009CE  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8861  0009D2  0100               	movlb	0	; () banked
  8862  0009D4  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8863                           
  8864                           ; BSR set to: 0
  8865                           ;main.c: 1218: if ( val & 0x01 ) {
  8866  0009D6  A051               	btfss	vscp_writeAppReg@val,0,c
  8867  0009D8  D012               	goto	l10689
  8868                           
  8869                           ; BSR set to: 0
  8870                           ;main.c: 1220: LATBbits.LATB1 = 0;
  8871  0009DA  928A               	bcf	3978,1,c	;volatile
  8872                           
  8873                           ;main.c: 1221: bOn = 0;
  8874  0009DC  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8875                           
  8876                           ; BSR set to: 0
  8877                           ;main.c: 1223: relay_pulse_flags |= 0x02;
  8878  0009DE  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  8879                           
  8880                           ; BSR set to: 0
  8881                           ;main.c: 1224: relay_pulse_timer[ 1 ] =
  8882                           ;main.c: 1225: Read_b_eep(0x43 + 18) * 256 +
  8883                           ;main.c: 1226: Read_b_eep(0x43 + 19);
  8884  0009E0  6A09               	clrf	?_Read_b_eep+1,c
  8885  0009E2  0E56               	movlw	86
  8886  0009E4  6E08               	movwf	?_Read_b_eep,c
  8887  0009E6  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8888  0009EA  0100               	movlb	0	; () banked
  8889  0009EC  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8890  0009EE  6A09               	clrf	?_Read_b_eep+1,c
  8891  0009F0  0E55               	movlw	85
  8892  0009F2  6E08               	movwf	?_Read_b_eep,c
  8893  0009F4  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8894  0009F8  0100               	movlb	0	; () banked
  8895  0009FA  DA44               	call	PL56	;call to abstracted procedure
  8896                           
  8897                           ;main.c: 1227: }
  8898  0009FC  D003               	goto	l10695
  8899  0009FE                     l10689:
  8900                           
  8901                           ; BSR set to: 0
  8902                           ;main.c: 1228: else {
  8903                           ;main.c: 1229: relay_pulse_flags &= 0b11111101;
  8904  0009FE  938A               	bcf	_relay_pulse_flags& (0+255),1,b
  8905                           
  8906                           ; BSR set to: 0
  8907                           ;main.c: 1230: LATBbits.LATB1 = 0;
  8908  000A00  928A               	bcf	3978,1,c	;volatile
  8909                           
  8910                           ; BSR set to: 0
  8911                           ;main.c: 1231: bOn = 0;
  8912  000A02  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8913  000A04                     l10695:
  8914                           
  8915                           ; BSR set to: 0
  8916                           ;main.c: 1232: }
  8917                           ;main.c: 1234: if ( val & 0x04 ) {
  8918  000A04  A451               	btfss	vscp_writeAppReg@val,2,c
  8919  000A06  D1E9               	goto	l10905
  8920                           
  8921                           ; BSR set to: 0
  8922                           ;main.c: 1235: relay_protection_timer[ 1 ] =
  8923                           ;main.c: 1236: Read_b_eep(0x43 + 34) * 256 +
  8924                           ;main.c: 1237: Read_b_eep(0x43 + 35);
  8925  000A08  6A09               	clrf	?_Read_b_eep+1,c
  8926  000A0A  0E66               	movlw	102
  8927  000A0C  6E08               	movwf	?_Read_b_eep,c
  8928  000A0E  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8929  000A12  0100               	movlb	0	; () banked
  8930  000A14  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8931  000A16  6A09               	clrf	?_Read_b_eep+1,c
  8932  000A18  0E65               	movlw	101
  8933  000A1A  6E08               	movwf	?_Read_b_eep,c
  8934  000A1C  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8935  000A20                     L28:
  8936  000A20  0100               	movlb	0	; () banked
  8937  000A22  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8938  000A24  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8939  000A26  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8940  000A28  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8941  000A2A  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  8942  000A2C  0E00               	movlw	0
  8943  000A2E  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8944  000A30  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  8945  000A32  D1D3               	goto	l10905
  8946  000A34                     l10699:
  8947                           
  8948                           ; BSR set to: 0
  8949                           ;main.c: 1243: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8950  000A34  ECE9  F01E         	call	_Busy_eep	;wreg free
  8951  000A38  DA09               	call	PL4	;call to abstracted procedure
  8952  000A3A  ECCE  F01C         	call	_Write_b_eep	;wreg free
  8953                           
  8954                           ;main.c: 1244: rv = Read_b_eep(0x43 + reg);
  8955  000A3E  DA10               	call	PL6	;call to abstracted procedure
  8956  000A40  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8957  000A44  0100               	movlb	0	; () banked
  8958  000A46  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  8959                           
  8960                           ; BSR set to: 0
  8961                           ;main.c: 1246: if ( val & 0x01 ) {
  8962  000A48  A051               	btfss	vscp_writeAppReg@val,0,c
  8963  000A4A  D013               	goto	l10713
  8964                           
  8965                           ; BSR set to: 0
  8966                           ;main.c: 1248: LATBbits.LATB0 = 0;
  8967  000A4C  908A               	bcf	3978,0,c	;volatile
  8968                           
  8969                           ;main.c: 1249: bOn = 0;
  8970  000A4E  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8971                           
  8972                           ; BSR set to: 0
  8973                           ;main.c: 1251: relay_pulse_flags |= 0x04;
  8974  000A50  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  8975                           
  8976                           ; BSR set to: 0
  8977                           ;main.c: 1252: relay_pulse_timer[ 2 ] =
  8978                           ;main.c: 1253: Read_b_eep(0x43 + 22) * 256 +
  8979                           ;main.c: 1254: Read_b_eep(0x43 + 23);
  8980  000A52  6A09               	clrf	?_Read_b_eep+1,c
  8981  000A54  0E5A               	movlw	90
  8982  000A56  6E08               	movwf	?_Read_b_eep,c
  8983  000A58  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8984  000A5C  0100               	movlb	0	; () banked
  8985  000A5E  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8986  000A60  6A09               	clrf	?_Read_b_eep+1,c
  8987  000A62  0E59               	movlw	89
  8988  000A64  6E08               	movwf	?_Read_b_eep,c
  8989  000A66  ECB5  F01E         	call	_Read_b_eep	;wreg free
  8990  000A6A  0100               	movlb	0	; () banked
  8991  000A6C  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8992  000A6E  DA23               	call	PL64	;call to abstracted procedure
  8993                           
  8994                           ;main.c: 1255: }
  8995  000A70  D003               	goto	l10719
  8996  000A72                     l10713:
  8997                           
  8998                           ; BSR set to: 0
  8999                           ;main.c: 1256: else {
  9000                           ;main.c: 1257: relay_pulse_flags &= 0b11111011;
  9001  000A72  958A               	bcf	_relay_pulse_flags& (0+255),2,b
  9002                           
  9003                           ; BSR set to: 0
  9004                           ;main.c: 1258: LATBbits.LATB0 = 0;
  9005  000A74  908A               	bcf	3978,0,c	;volatile
  9006                           
  9007                           ; BSR set to: 0
  9008                           ;main.c: 1259: bOn = 0;
  9009  000A76  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9010  000A78                     l10719:
  9011                           
  9012                           ; BSR set to: 0
  9013                           ;main.c: 1260: }
  9014                           ;main.c: 1262: if ( val & 0x04 ) {
  9015  000A78  B451               	btfsc	vscp_writeAppReg@val,2,c
  9016  000A7A  D67E               	goto	l10553
  9017  000A7C  D1AE               	goto	l10905
  9018  000A7E                     l10723:
  9019                           
  9020                           ; BSR set to: 0
  9021                           ;main.c: 1271: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9022  000A7E  ECE9  F01E         	call	_Busy_eep	;wreg free
  9023  000A82  D9E4               	call	PL4	;call to abstracted procedure
  9024  000A84  ECCE  F01C         	call	_Write_b_eep	;wreg free
  9025                           
  9026                           ;main.c: 1272: rv = Read_b_eep(0x43 + reg);
  9027  000A88  D9EB               	call	PL6	;call to abstracted procedure
  9028  000A8A  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9029  000A8E  0100               	movlb	0	; () banked
  9030  000A90  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9031                           
  9032                           ; BSR set to: 0
  9033                           ;main.c: 1274: if ( val & 0x01 ) {
  9034  000A92  A051               	btfss	vscp_writeAppReg@val,0,c
  9035  000A94  D013               	goto	l10737
  9036                           
  9037                           ; BSR set to: 0
  9038                           ;main.c: 1276: LATCbits.LATC7 = 0;
  9039  000A96  9E8B               	bcf	3979,7,c	;volatile
  9040                           
  9041                           ;main.c: 1277: bOn = 0;
  9042  000A98  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9043                           
  9044                           ; BSR set to: 0
  9045                           ;main.c: 1279: relay_pulse_flags |= 0x08;
  9046  000A9A  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  9047                           
  9048                           ; BSR set to: 0
  9049                           ;main.c: 1280: relay_pulse_timer[ 3 ] =
  9050                           ;main.c: 1281: Read_b_eep(0x43 + 24) * 256 +
  9051                           ;main.c: 1282: Read_b_eep(0x43 + 25);
  9052  000A9C  6A09               	clrf	?_Read_b_eep+1,c
  9053  000A9E  0E5C               	movlw	92
  9054  000AA0  6E08               	movwf	?_Read_b_eep,c
  9055  000AA2  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9056  000AA6  0100               	movlb	0	; () banked
  9057  000AA8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9058  000AAA  6A09               	clrf	?_Read_b_eep+1,c
  9059  000AAC  0E5B               	movlw	91
  9060  000AAE  6E08               	movwf	?_Read_b_eep,c
  9061  000AB0  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9062  000AB4  0100               	movlb	0	; () banked
  9063  000AB6  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9064  000AB8  DA06               	call	PL66	;call to abstracted procedure
  9065                           
  9066                           ;main.c: 1283: }
  9067  000ABA  D003               	goto	l10743
  9068  000ABC                     l10737:
  9069                           
  9070                           ; BSR set to: 0
  9071                           ;main.c: 1284: else {
  9072                           ;main.c: 1285: relay_pulse_flags &= 0b11110111;
  9073  000ABC  978A               	bcf	_relay_pulse_flags& (0+255),3,b
  9074                           
  9075                           ; BSR set to: 0
  9076                           ;main.c: 1286: LATCbits.LATC7 = 0;
  9077  000ABE  9E8B               	bcf	3979,7,c	;volatile
  9078                           
  9079                           ; BSR set to: 0
  9080                           ;main.c: 1287: bOn = 0;
  9081  000AC0  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9082  000AC2                     l10743:
  9083                           
  9084                           ; BSR set to: 0
  9085                           ;main.c: 1288: }
  9086                           ;main.c: 1290: if ( val & 0x04 ) {
  9087  000AC2  B451               	btfsc	vscp_writeAppReg@val,2,c
  9088  000AC4  D68B               	goto	l10573
  9089  000AC6  D189               	goto	l10905
  9090  000AC8                     l10747:
  9091                           
  9092                           ; BSR set to: 0
  9093                           ;main.c: 1299: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9094  000AC8  ECE9  F01E         	call	_Busy_eep	;wreg free
  9095  000ACC  D9BF               	call	PL4	;call to abstracted procedure
  9096  000ACE  ECCE  F01C         	call	_Write_b_eep	;wreg free
  9097                           
  9098                           ;main.c: 1300: rv = Read_b_eep(0x43 + reg);
  9099  000AD2  D9C6               	call	PL6	;call to abstracted procedure
  9100  000AD4  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9101  000AD8  0100               	movlb	0	; () banked
  9102  000ADA  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9103                           
  9104                           ; BSR set to: 0
  9105                           ;main.c: 1302: if ( val & 0x01 ) {
  9106  000ADC  A051               	btfss	vscp_writeAppReg@val,0,c
  9107  000ADE  D013               	goto	l10761
  9108                           
  9109                           ; BSR set to: 0
  9110                           ;main.c: 1304: LATCbits.LATC6 = 0;
  9111  000AE0  9C8B               	bcf	3979,6,c	;volatile
  9112                           
  9113                           ;main.c: 1305: bOn = 0;
  9114  000AE2  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9115                           
  9116                           ; BSR set to: 0
  9117                           ;main.c: 1307: relay_pulse_flags |= 0x10;
  9118  000AE4  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  9119                           
  9120                           ; BSR set to: 0
  9121                           ;main.c: 1308: relay_pulse_timer[ 4 ] =
  9122                           ;main.c: 1309: Read_b_eep(0x43 + 26) * 256 +
  9123                           ;main.c: 1310: Read_b_eep(0x43 + 27);
  9124  000AE6  6A09               	clrf	?_Read_b_eep+1,c
  9125  000AE8  0E5E               	movlw	94
  9126  000AEA  6E08               	movwf	?_Read_b_eep,c
  9127  000AEC  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9128  000AF0  0100               	movlb	0	; () banked
  9129  000AF2  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9130  000AF4  6A09               	clrf	?_Read_b_eep+1,c
  9131  000AF6  0E5D               	movlw	93
  9132  000AF8  6E08               	movwf	?_Read_b_eep,c
  9133  000AFA  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9134  000AFE  0100               	movlb	0	; () banked
  9135  000B00  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9136  000B02  D9D1               	call	PL62	;call to abstracted procedure
  9137                           
  9138                           ;main.c: 1311: }
  9139  000B04  D003               	goto	l10767
  9140  000B06                     l10761:
  9141                           
  9142                           ; BSR set to: 0
  9143                           ;main.c: 1312: else {
  9144                           ;main.c: 1313: relay_pulse_flags &= 0b11101111;
  9145  000B06  998A               	bcf	_relay_pulse_flags& (0+255),4,b
  9146                           
  9147                           ; BSR set to: 0
  9148                           ;main.c: 1314: LATCbits.LATC6 = 0;
  9149  000B08  9C8B               	bcf	3979,6,c	;volatile
  9150                           
  9151                           ; BSR set to: 0
  9152                           ;main.c: 1315: bOn = 0;
  9153  000B0A  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9154  000B0C                     l10767:
  9155                           
  9156                           ; BSR set to: 0
  9157                           ;main.c: 1316: }
  9158                           ;main.c: 1318: if ( val & 0x04 ) {
  9159  000B0C  B451               	btfsc	vscp_writeAppReg@val,2,c
  9160  000B0E  D698               	goto	l10593
  9161  000B10  D164               	goto	l10905
  9162  000B12                     l10771:
  9163                           
  9164                           ; BSR set to: 0
  9165                           ;main.c: 1327: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9166  000B12  ECE9  F01E         	call	_Busy_eep	;wreg free
  9167  000B16  D99A               	call	PL4	;call to abstracted procedure
  9168  000B18  ECCE  F01C         	call	_Write_b_eep	;wreg free
  9169                           
  9170                           ;main.c: 1328: rv = Read_b_eep(0x43 + reg);
  9171  000B1C  D9A1               	call	PL6	;call to abstracted procedure
  9172  000B1E  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9173  000B22  0100               	movlb	0	; () banked
  9174  000B24  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9175                           
  9176                           ; BSR set to: 0
  9177                           ;main.c: 1330: if ( val & 0x01 ) {
  9178  000B26  A051               	btfss	vscp_writeAppReg@val,0,c
  9179  000B28  D013               	goto	l10785
  9180                           
  9181                           ; BSR set to: 0
  9182                           ;main.c: 1332: LATCbits.LATC5 = 0;
  9183  000B2A  9A8B               	bcf	3979,5,c	;volatile
  9184                           
  9185                           ;main.c: 1333: bOn = 0;
  9186  000B2C  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9187                           
  9188                           ; BSR set to: 0
  9189                           ;main.c: 1335: relay_pulse_flags |= 0x20;
  9190  000B2E  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  9191                           
  9192                           ; BSR set to: 0
  9193                           ;main.c: 1336: relay_pulse_timer[ 5 ] =
  9194                           ;main.c: 1337: Read_b_eep(0x43 + 28) * 256 +
  9195                           ;main.c: 1338: Read_b_eep(0x43 + 29);
  9196  000B30  6A09               	clrf	?_Read_b_eep+1,c
  9197  000B32  0E60               	movlw	96
  9198  000B34  6E08               	movwf	?_Read_b_eep,c
  9199  000B36  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9200  000B3A  0100               	movlb	0	; () banked
  9201  000B3C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9202  000B3E  6A09               	clrf	?_Read_b_eep+1,c
  9203  000B40  0E5F               	movlw	95
  9204  000B42  6E08               	movwf	?_Read_b_eep,c
  9205  000B44  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9206  000B48  0100               	movlb	0	; () banked
  9207  000B4A  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9208  000B4C  D9A4               	call	PL60	;call to abstracted procedure
  9209                           
  9210                           ;main.c: 1339: }
  9211  000B4E  D003               	goto	l10791
  9212  000B50                     l10785:
  9213                           
  9214                           ; BSR set to: 0
  9215                           ;main.c: 1340: else {
  9216                           ;main.c: 1341: relay_pulse_flags &= 0b11011111;
  9217  000B50  9B8A               	bcf	_relay_pulse_flags& (0+255),5,b
  9218                           
  9219                           ; BSR set to: 0
  9220                           ;main.c: 1342: LATCbits.LATC5 = 0;
  9221  000B52  9A8B               	bcf	3979,5,c	;volatile
  9222                           
  9223                           ; BSR set to: 0
  9224                           ;main.c: 1343: bOn = 0;
  9225  000B54  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9226  000B56                     l10791:
  9227                           
  9228                           ; BSR set to: 0
  9229                           ;main.c: 1344: }
  9230                           ;main.c: 1346: if ( val & 0x04 ) {
  9231  000B56  B451               	btfsc	vscp_writeAppReg@val,2,c
  9232  000B58  D6A5               	goto	l10613
  9233  000B5A  D13F               	goto	l10905
  9234  000B5C                     l10795:
  9235                           
  9236                           ; BSR set to: 0
  9237                           ;main.c: 1355: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9238  000B5C  ECE9  F01E         	call	_Busy_eep	;wreg free
  9239  000B60  D975               	call	PL4	;call to abstracted procedure
  9240  000B62  ECCE  F01C         	call	_Write_b_eep	;wreg free
  9241                           
  9242                           ;main.c: 1356: rv = Read_b_eep(0x43 + reg);
  9243  000B66  D97C               	call	PL6	;call to abstracted procedure
  9244  000B68  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9245  000B6C  0100               	movlb	0	; () banked
  9246  000B6E  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9247                           
  9248                           ; BSR set to: 0
  9249                           ;main.c: 1358: if ( val & 0x01 ) {
  9250  000B70  A051               	btfss	vscp_writeAppReg@val,0,c
  9251  000B72  D013               	goto	l10809
  9252                           
  9253                           ; BSR set to: 0
  9254                           ;main.c: 1360: LATCbits.LATC4 = 0;
  9255  000B74  988B               	bcf	3979,4,c	;volatile
  9256                           
  9257                           ;main.c: 1361: bOn = 0;
  9258  000B76  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9259                           
  9260                           ; BSR set to: 0
  9261                           ;main.c: 1363: relay_pulse_flags |= 0x40;
  9262  000B78  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  9263                           
  9264                           ; BSR set to: 0
  9265                           ;main.c: 1364: relay_pulse_timer[ 6 ] =
  9266                           ;main.c: 1365: Read_b_eep(0x43 + 30) * 256 +
  9267                           ;main.c: 1366: Read_b_eep(0x43 + 31);
  9268  000B7A  6A09               	clrf	?_Read_b_eep+1,c
  9269  000B7C  0E62               	movlw	98
  9270  000B7E  6E08               	movwf	?_Read_b_eep,c
  9271  000B80  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9272  000B84  0100               	movlb	0	; () banked
  9273  000B86  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9274  000B88  6A09               	clrf	?_Read_b_eep+1,c
  9275  000B8A  0E61               	movlw	97
  9276  000B8C  6E08               	movwf	?_Read_b_eep,c
  9277  000B8E  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9278  000B92  0100               	movlb	0	; () banked
  9279  000B94  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9280  000B96  D99F               	call	PL68	;call to abstracted procedure
  9281                           
  9282                           ;main.c: 1367: }
  9283  000B98  D003               	goto	l10815
  9284  000B9A                     l10809:
  9285                           
  9286                           ; BSR set to: 0
  9287                           ;main.c: 1368: else {
  9288                           ;main.c: 1369: relay_pulse_flags &= 0b10111111;
  9289  000B9A  9D8A               	bcf	_relay_pulse_flags& (0+255),6,b
  9290                           
  9291                           ; BSR set to: 0
  9292                           ;main.c: 1370: LATCbits.LATC7 = 0;
  9293  000B9C  9E8B               	bcf	3979,7,c	;volatile
  9294                           
  9295                           ; BSR set to: 0
  9296                           ;main.c: 1371: bOn = 0;
  9297  000B9E  6BCD               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9298  000BA0                     l10815:
  9299                           
  9300                           ; BSR set to: 0
  9301                           ;main.c: 1372: }
  9302                           ;main.c: 1374: if ( val & 0x04 ) {
  9303  000BA0  B451               	btfsc	vscp_writeAppReg@val,2,c
  9304  000BA2  D6B2               	goto	l10633
  9305  000BA4  D11A               	goto	l10905
  9306  000BA6                     l10821:
  9307                           
  9308                           ; BSR set to: 0
  9309  000BA6  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9310                           
  9311                           ; Switch size 1, requested type "space"
  9312                           ; Number of cases is 7, Range of values is 10 to 16
  9313                           ; switch strategies available:
  9314                           ; Name         Instructions Cycles
  9315                           ; simple_byte           22    12 (average)
  9316                           ;	Chosen strategy is simple_byte
  9317  000BA8  0A0A               	xorlw	10	; case 10
  9318  000BAA  E101 D6E7          	bz	l10651
  9319  000BAE  0A01               	xorlw	1	; case 11
  9320  000BB0  E101 D707          	bz	l10675
  9321  000BB4  0A07               	xorlw	7	; case 12
  9322  000BB6  E101 D73D          	bz	l10699
  9323  000BBA  0A01               	xorlw	1	; case 13
  9324  000BBC  E101 D75F          	bz	l10723
  9325  000BC0  0A03               	xorlw	3	; case 14
  9326  000BC2  E082               	bz	l10747
  9327  000BC4  0A01               	xorlw	1	; case 15
  9328  000BC6  E0A5               	bz	l10771
  9329  000BC8  0A1F               	xorlw	31	; case 16
  9330  000BCA  E0C8               	bz	l10795
  9331  000BCC  D106               	goto	l10905
  9332  000BCE                     l10823:
  9333                           
  9334                           ; BSR set to: 0
  9335                           ;main.c: 1385: else if ( (reg >= 18 ) &&
  9336                           ;main.c: 1386: (reg <= 33 ) ) {
  9337  000BCE  0E11               	movlw	17
  9338  000BD0  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9339  000BD2  D0A4               	goto	l10853
  9340                           
  9341                           ; BSR set to: 0
  9342  000BD4  0E22               	movlw	34
  9343  000BD6  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9344  000BD8  D0A1               	goto	l10853
  9345                           
  9346                           ; BSR set to: 0
  9347                           ;main.c: 1389: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9348  000BDA  ECE9  F01E         	call	_Busy_eep	;wreg free
  9349  000BDE  D936               	call	PL4	;call to abstracted procedure
  9350  000BE0  ECCE  F01C         	call	_Write_b_eep	;wreg free
  9351                           
  9352                           ;main.c: 1390: rv = Read_b_eep(0x43 + reg);
  9353  000BE4  D93D               	call	PL6	;call to abstracted procedure
  9354  000BE6  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9355  000BEA  0100               	movlb	0	; () banked
  9356  000BEC  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9357                           
  9358                           ;main.c: 1394: switch ( reg ) {
  9359  000BEE  D083               	goto	l10851
  9360  000BF0                     l10833:
  9361                           
  9362                           ; BSR set to: 0
  9363                           ;main.c: 1397: relay_pulse_timer[ 0 ] =
  9364                           ;main.c: 1398: Read_b_eep(0x43 + 18) * 256 +
  9365                           ;main.c: 1399: Read_b_eep(0x43 + 19);
  9366  000BF0  6A09               	clrf	?_Read_b_eep+1,c
  9367  000BF2  0E56               	movlw	86
  9368  000BF4  6E08               	movwf	?_Read_b_eep,c
  9369  000BF6  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9370  000BFA  0100               	movlb	0	; () banked
  9371  000BFC  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9372  000BFE  6A09               	clrf	?_Read_b_eep+1,c
  9373  000C00  0E55               	movlw	85
  9374  000C02  6E08               	movwf	?_Read_b_eep,c
  9375  000C04  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9376  000C08  D933               	call	PL38	;call to abstracted procedure
  9377                           
  9378                           ;main.c: 1400: break;
  9379  000C0A  D0E7               	goto	l10905
  9380  000C0C                     l10835:
  9381                           
  9382                           ; BSR set to: 0
  9383                           ;main.c: 1403: relay_pulse_timer[ 1 ] =
  9384                           ;main.c: 1404: Read_b_eep(0x43 + 20) * 256 +
  9385                           ;main.c: 1405: Read_b_eep(0x43 + 21);
  9386  000C0C  6A09               	clrf	?_Read_b_eep+1,c
  9387  000C0E  0E58               	movlw	88
  9388  000C10  6E08               	movwf	?_Read_b_eep,c
  9389  000C12  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9390  000C16  0100               	movlb	0	; () banked
  9391  000C18  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9392  000C1A  6A09               	clrf	?_Read_b_eep+1,c
  9393  000C1C  0E57               	movlw	87
  9394  000C1E  6E08               	movwf	?_Read_b_eep,c
  9395  000C20  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9396  000C24  0100               	movlb	0	; () banked
  9397  000C26  D92E               	call	PL56	;call to abstracted procedure
  9398                           
  9399                           ;main.c: 1406: break;
  9400  000C28  D0D8               	goto	l10905
  9401  000C2A                     l10837:
  9402                           
  9403                           ; BSR set to: 0
  9404                           ;main.c: 1409: relay_pulse_timer[ 2 ] =
  9405                           ;main.c: 1410: Read_b_eep(0x43 + 22) * 256 +
  9406                           ;main.c: 1411: Read_b_eep(0x43 + 23);
  9407  000C2A  6A09               	clrf	?_Read_b_eep+1,c
  9408  000C2C  0E5A               	movlw	90
  9409  000C2E  6E08               	movwf	?_Read_b_eep,c
  9410  000C30  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9411  000C34  0100               	movlb	0	; () banked
  9412  000C36  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9413  000C38  6A09               	clrf	?_Read_b_eep+1,c
  9414  000C3A  0E59               	movlw	89
  9415  000C3C  6E08               	movwf	?_Read_b_eep,c
  9416  000C3E  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9417  000C42  0100               	movlb	0	; () banked
  9418  000C44  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9419  000C46  D937               	call	PL64	;call to abstracted procedure
  9420                           
  9421                           ;main.c: 1412: break;
  9422  000C48  D0C8               	goto	l10905
  9423  000C4A                     l10839:
  9424                           
  9425                           ; BSR set to: 0
  9426                           ;main.c: 1415: relay_pulse_timer[ 3 ] =
  9427                           ;main.c: 1416: Read_b_eep(0x43 + 24) * 256 +
  9428                           ;main.c: 1417: Read_b_eep(0x43 + 25);
  9429  000C4A  6A09               	clrf	?_Read_b_eep+1,c
  9430  000C4C  0E5C               	movlw	92
  9431  000C4E  6E08               	movwf	?_Read_b_eep,c
  9432  000C50  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9433  000C54  0100               	movlb	0	; () banked
  9434  000C56  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9435  000C58  6A09               	clrf	?_Read_b_eep+1,c
  9436  000C5A  0E5B               	movlw	91
  9437  000C5C  6E08               	movwf	?_Read_b_eep,c
  9438  000C5E  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9439  000C62  0100               	movlb	0	; () banked
  9440  000C64  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9441  000C66  D92F               	call	PL66	;call to abstracted procedure
  9442                           
  9443                           ;main.c: 1418: break;
  9444  000C68  D0B8               	goto	l10905
  9445  000C6A                     l10841:
  9446                           
  9447                           ; BSR set to: 0
  9448                           ;main.c: 1421: relay_pulse_timer[ 4 ] =
  9449                           ;main.c: 1422: Read_b_eep(0x43 + 26) * 256 +
  9450                           ;main.c: 1423: Read_b_eep(0x43 + 27);
  9451  000C6A  6A09               	clrf	?_Read_b_eep+1,c
  9452  000C6C  0E5E               	movlw	94
  9453  000C6E  6E08               	movwf	?_Read_b_eep,c
  9454  000C70  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9455  000C74  0100               	movlb	0	; () banked
  9456  000C76  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9457  000C78  6A09               	clrf	?_Read_b_eep+1,c
  9458  000C7A  0E5D               	movlw	93
  9459  000C7C  6E08               	movwf	?_Read_b_eep,c
  9460  000C7E  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9461  000C82  0100               	movlb	0	; () banked
  9462  000C84  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9463  000C86  D90F               	call	PL62	;call to abstracted procedure
  9464                           
  9465                           ;main.c: 1424: break;
  9466  000C88  D0A8               	goto	l10905
  9467  000C8A                     l10843:
  9468                           
  9469                           ; BSR set to: 0
  9470                           ;main.c: 1427: relay_pulse_timer[ 5 ] =
  9471                           ;main.c: 1428: Read_b_eep(0x43 + 28) * 256 +
  9472                           ;main.c: 1429: Read_b_eep(0x43 + 29);
  9473  000C8A  6A09               	clrf	?_Read_b_eep+1,c
  9474  000C8C  0E60               	movlw	96
  9475  000C8E  6E08               	movwf	?_Read_b_eep,c
  9476  000C90  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9477  000C94  0100               	movlb	0	; () banked
  9478  000C96  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9479  000C98  6A09               	clrf	?_Read_b_eep+1,c
  9480  000C9A  0E5F               	movlw	95
  9481  000C9C  6E08               	movwf	?_Read_b_eep,c
  9482  000C9E  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9483  000CA2  0100               	movlb	0	; () banked
  9484  000CA4  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9485  000CA6  D8F7               	call	PL60	;call to abstracted procedure
  9486                           
  9487                           ;main.c: 1430: break;
  9488  000CA8  D098               	goto	l10905
  9489  000CAA                     l10845:
  9490                           
  9491                           ; BSR set to: 0
  9492                           ;main.c: 1433: relay_pulse_timer[ 6 ] =
  9493                           ;main.c: 1434: Read_b_eep(0x43 + 30) * 256 +
  9494                           ;main.c: 1435: Read_b_eep(0x43 + 31);
  9495  000CAA  6A09               	clrf	?_Read_b_eep+1,c
  9496  000CAC  0E62               	movlw	98
  9497  000CAE  6E08               	movwf	?_Read_b_eep,c
  9498  000CB0  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9499  000CB4  0100               	movlb	0	; () banked
  9500  000CB6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9501  000CB8  6A09               	clrf	?_Read_b_eep+1,c
  9502  000CBA  0E61               	movlw	97
  9503  000CBC  6E08               	movwf	?_Read_b_eep,c
  9504  000CBE  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9505  000CC2  0100               	movlb	0	; () banked
  9506  000CC4  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9507  000CC6  D907               	call	PL68	;call to abstracted procedure
  9508                           
  9509                           ;main.c: 1436: break;
  9510  000CC8  D088               	goto	l10905
  9511  000CCA                     l10847:
  9512                           
  9513                           ; BSR set to: 0
  9514                           ;main.c: 1439: relay_pulse_timer[ 7 ] =
  9515                           ;main.c: 1440: Read_b_eep(0x43 + 32) * 256 +
  9516                           ;main.c: 1441: Read_b_eep(0x43 + 33);
  9517  000CCA  6A09               	clrf	?_Read_b_eep+1,c
  9518  000CCC  0E64               	movlw	100
  9519  000CCE  6E08               	movwf	?_Read_b_eep,c
  9520  000CD0  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9521  000CD4  0100               	movlb	0	; () banked
  9522  000CD6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9523  000CD8  6A09               	clrf	?_Read_b_eep+1,c
  9524  000CDA  0E63               	movlw	99
  9525  000CDC  6E08               	movwf	?_Read_b_eep,c
  9526  000CDE  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9527  000CE2  0100               	movlb	0	; () banked
  9528  000CE4  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9529  000CE6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9530  000CE8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9531  000CEA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9532  000CEC  6F7E               	movwf	(_relay_pulse_timer+14)& (0+255),b
  9533  000CEE  0E00               	movlw	0
  9534  000CF0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9535  000CF2  6F7F               	movwf	(_relay_pulse_timer+15)& (0+255),b
  9536                           
  9537                           ;main.c: 1442: break;
  9538  000CF4  D072               	goto	l10905
  9539  000CF6                     l10851:
  9540                           
  9541                           ; BSR set to: 0
  9542  000CF6  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9543                           
  9544                           ; Switch size 1, requested type "space"
  9545                           ; Number of cases is 8, Range of values is 19 to 33
  9546                           ; switch strategies available:
  9547                           ; Name         Instructions Cycles
  9548                           ; simple_byte           25    13 (average)
  9549                           ;	Chosen strategy is simple_byte
  9550  000CF8  0A13               	xorlw	19	; case 19
  9551  000CFA  E101 D779          	bz	l10833
  9552  000CFE  0A06               	xorlw	6	; case 21
  9553  000D00  E085               	bz	l10835
  9554  000D02  0A02               	xorlw	2	; case 23
  9555  000D04  E092               	bz	l10837
  9556  000D06  0A0E               	xorlw	14	; case 25
  9557  000D08  E0A0               	bz	l10839
  9558  000D0A  0A02               	xorlw	2	; case 27
  9559  000D0C  E0AE               	bz	l10841
  9560  000D0E  0A06               	xorlw	6	; case 29
  9561  000D10  E0BC               	bz	l10843
  9562  000D12  0A02               	xorlw	2	; case 31
  9563  000D14  E0CA               	bz	l10845
  9564  000D16  0A3E               	xorlw	62	; case 33
  9565  000D18  E0D8               	bz	l10847
  9566  000D1A  D05F               	goto	l10905
  9567  000D1C                     l10853:
  9568                           
  9569                           ; BSR set to: 0
  9570                           ;main.c: 1450: else if ( ( reg >= 34 ) &&
  9571                           ;main.c: 1451: ( reg <= 49 ) ) {
  9572  000D1C  0E21               	movlw	33
  9573  000D1E  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9574  000D20  D03D               	goto	l10883
  9575                           
  9576                           ; BSR set to: 0
  9577  000D22  0E32               	movlw	50
  9578  000D24  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9579  000D26  D03A               	goto	l10883
  9580                           
  9581                           ; BSR set to: 0
  9582                           ;main.c: 1454: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9583  000D28  ECE9  F01E         	call	_Busy_eep	;wreg free
  9584  000D2C  D88F               	call	PL4	;call to abstracted procedure
  9585  000D2E  ECCE  F01C         	call	_Write_b_eep	;wreg free
  9586                           
  9587                           ;main.c: 1455: rv = Read_b_eep(0x43 + reg);
  9588  000D32  D896               	call	PL6	;call to abstracted procedure
  9589  000D34  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9590  000D38  0100               	movlb	0	; () banked
  9591  000D3A  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9592                           
  9593                           ;main.c: 1457: switch ( reg ) {
  9594  000D3C  D016               	goto	l10881
  9595  000D3E                     l10877:
  9596                           
  9597                           ; BSR set to: 0
  9598                           ;main.c: 1502: relay_protection_timer[ 7 ] =
  9599                           ;main.c: 1503: Read_b_eep(0x43 + 48) * 256 +
  9600                           ;main.c: 1504: Read_b_eep(0x43 + 49);
  9601  000D3E  6A09               	clrf	?_Read_b_eep+1,c
  9602  000D40  0E74               	movlw	116
  9603  000D42  6E08               	movwf	?_Read_b_eep,c
  9604  000D44  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9605  000D48  0100               	movlb	0	; () banked
  9606  000D4A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9607  000D4C  6A09               	clrf	?_Read_b_eep+1,c
  9608  000D4E  0E73               	movlw	115
  9609  000D50  6E08               	movwf	?_Read_b_eep,c
  9610  000D52  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9611  000D56  0100               	movlb	0	; () banked
  9612  000D58  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9613  000D5A  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9614  000D5C  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9615  000D5E  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9616  000D60  6F6E               	movwf	(_relay_protection_timer+14)& (0+255),b
  9617  000D62  0E00               	movlw	0
  9618  000D64  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9619  000D66  6F6F               	movwf	(_relay_protection_timer+15)& (0+255),b
  9620                           
  9621                           ;main.c: 1505: break;
  9622  000D68  D038               	goto	l10905
  9623  000D6A                     l10881:
  9624                           
  9625                           ; BSR set to: 0
  9626  000D6A  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9627                           
  9628                           ; Switch size 1, requested type "space"
  9629                           ; Number of cases is 8, Range of values is 35 to 49
  9630                           ; switch strategies available:
  9631                           ; Name         Instructions Cycles
  9632                           ; simple_byte           25    13 (average)
  9633                           ;	Chosen strategy is simple_byte
  9634  000D6C  0A23               	xorlw	35	; case 35
  9635  000D6E  E101 D4A7          	bz	l10513
  9636  000D72  0A06               	xorlw	6	; case 37
  9637  000D74  E101 D4D7          	bz	l10533
  9638  000D78  0A02               	xorlw	2	; case 39
  9639  000D7A  E101 D4FD          	bz	l10553
  9640  000D7E  0A0E               	xorlw	14	; case 41
  9641  000D80  E101 D52C          	bz	l10573
  9642  000D84  0A02               	xorlw	2	; case 43
  9643  000D86  E101 D55B          	bz	l10593
  9644  000D8A  0A06               	xorlw	6	; case 45
  9645  000D8C  E101 D58A          	bz	l10613
  9646  000D90  0A02               	xorlw	2	; case 47
  9647  000D92  E101 D5B9          	bz	l10633
  9648  000D96  0A1E               	xorlw	30	; case 49
  9649  000D98  E0D2               	bz	l10877
  9650  000D9A  D01F               	goto	l10905
  9651  000D9C                     l10883:
  9652                           
  9653                           ; BSR set to: 0
  9654                           ;main.c: 1513: else if ( (reg >= 50 ) && (reg <= 65) ) {
  9655  000D9C  0E31               	movlw	49
  9656  000D9E  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9657  000DA0  D00E               	goto	l10893
  9658                           
  9659                           ; BSR set to: 0
  9660  000DA2  0E42               	movlw	66
  9661  000DA4  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9662  000DA6  D00B               	goto	l10893
  9663                           
  9664                           ; BSR set to: 0
  9665                           ;main.c: 1516: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9666  000DA8  ECE9  F01E         	call	_Busy_eep	;wreg free
  9667  000DAC  D84F               	call	PL4	;call to abstracted procedure
  9668  000DAE  ECCE  F01C         	call	_Write_b_eep	;wreg free
  9669  000DB2                     l10891:
  9670                           
  9671                           ;main.c: 1517: rv = Read_b_eep(0x43 + reg);
  9672  000DB2  D856               	call	PL6	;call to abstracted procedure
  9673  000DB4  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9674  000DB8                     L27:
  9675  000DB8  0100               	movlb	0	; () banked
  9676  000DBA  6FCC               	movwf	vscp_writeAppReg@rv& (0+255),b
  9677                           
  9678                           ;main.c: 1519: }
  9679  000DBC  D00E               	goto	l10905
  9680  000DBE                     l10893:
  9681                           
  9682                           ; BSR set to: 0
  9683                           ;main.c: 1520: else if ( (reg >= 72) &&
  9684                           ;main.c: 1521: (reg < (72 + 7 * 8)) ) {
  9685  000DBE  0E47               	movlw	71
  9686  000DC0  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9687  000DC2  D00B               	goto	l10905
  9688                           
  9689                           ; BSR set to: 0
  9690  000DC4  0E80               	movlw	128
  9691  000DC6  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9692  000DC8  D008               	goto	l10905
  9693                           
  9694                           ; BSR set to: 0
  9695                           ;main.c: 1522: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9696  000DCA  ECE9  F01E         	call	_Busy_eep	;wreg free
  9697  000DCE  D83E               	call	PL4	;call to abstracted procedure
  9698  000DD0  ECCE  F01C         	call	_Write_b_eep	;wreg free
  9699                           
  9700                           ;main.c: 1523: calculateSetFilterMask();
  9701  000DD4  ECB0  F00C         	call	_calculateSetFilterMask	;wreg free
  9702  000DD8  D7EC               	goto	l10891
  9703  000DDA                     l10905:
  9704                           
  9705                           ; BSR set to: 0
  9706                           ;main.c: 1525: }
  9707                           ;main.c: 1531: if ( bInfoEvent ) {
  9708  000DDA  51CA               	movf	vscp_writeAppReg@bInfoEvent& (0+255),w,b
  9709  000DDC  E035               	bz	l10925
  9710                           
  9711                           ; BSR set to: 0
  9712                           ;main.c: 1533: unsigned char val;
  9713                           ;main.c: 1534: val = Read_b_eep(0x43 + 10 + (reg - 2));
  9714  000DDE  0E4B               	movlw	75
  9715  000DE0  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9716  000DE2  6E08               	movwf	?_Read_b_eep,c
  9717  000DE4  6A09               	clrf	?_Read_b_eep+1,c
  9718  000DE6  0E00               	movlw	0
  9719  000DE8  2209               	addwfc	?_Read_b_eep+1,f,c
  9720  000DEA  ECB5  F01E         	call	_Read_b_eep	;wreg free
  9721  000DEE  0100               	movlb	0	; () banked
  9722  000DF0  6FCB               	movwf	vscp_writeAppReg@val_682& (0+255),b
  9723                           
  9724                           ; BSR set to: 0
  9725                           ;main.c: 1537: if ( bOn ) {
  9726  000DF2  51CD               	movf	vscp_writeAppReg@bOn& (0+255),w,b
  9727  000DF4  E015               	bz	l404
  9728                           
  9729                           ; BSR set to: 0
  9730                           ;main.c: 1539: if ( val & 0x08 ) {
  9731  000DF6  A7CB               	btfss	vscp_writeAppReg@val_682& (0+255),3,b
  9732  000DF8  D008               	goto	l10915
  9733                           
  9734                           ; BSR set to: 0
  9735                           ;main.c: 1540: SendInformationEvent( reg - 2,
  9736                           ;main.c: 1541: 20,
  9737                           ;main.c: 1542: 3 );
  9738  000DFA  0E14               	movlw	20
  9739  000DFC  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9740  000DFE  0E03               	movlw	3
  9741  000E00  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9742  000E02  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9743  000E04  0FFE               	addlw	254
  9744  000E06  EC11  F01C         	call	_SendInformationEvent
  9745  000E0A                     l10915:
  9746                           
  9747                           ; BSR set to: 0
  9748                           ;main.c: 1543: }
  9749                           ;main.c: 1545: if ( val & 0x20 ) {
  9750  000E0A  ABCB               	btfss	vscp_writeAppReg@val_682& (0+255),5,b
  9751  000E0C  D01D               	goto	l10925
  9752                           
  9753                           ; BSR set to: 0
  9754                           ;main.c: 1546: SendInformationEvent( reg - 2,
  9755                           ;main.c: 1547: 20,
  9756                           ;main.c: 1548: 25 );
  9757  000E0E  0E14               	movlw	20
  9758  000E10  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9759  000E12  0E19               	movlw	25
  9760  000E14  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9761  000E16  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9762  000E18  0FFE               	addlw	254
  9763  000E1A  EC11  F01C         	call	_SendInformationEvent
  9764  000E1E  D014               	goto	l10925
  9765  000E20                     l404:
  9766                           
  9767                           ; BSR set to: 0
  9768                           ;main.c: 1552: else {
  9769                           ;main.c: 1554: if ( val & 0x10 ) {
  9770  000E20  A9CB               	btfss	vscp_writeAppReg@val_682& (0+255),4,b
  9771  000E22  D008               	goto	l10921
  9772                           
  9773                           ; BSR set to: 0
  9774                           ;main.c: 1555: SendInformationEvent( reg - 2,
  9775                           ;main.c: 1556: 20,
  9776                           ;main.c: 1557: 4 );
  9777  000E24  0E14               	movlw	20
  9778  000E26  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9779  000E28  0E04               	movlw	4
  9780  000E2A  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9781  000E2C  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9782  000E2E  0FFE               	addlw	254
  9783  000E30  EC11  F01C         	call	_SendInformationEvent
  9784  000E34                     l10921:
  9785                           
  9786                           ; BSR set to: 0
  9787                           ;main.c: 1558: }
  9788                           ;main.c: 1560: if ( val & 0x40 ) {
  9789  000E34  ADCB               	btfss	vscp_writeAppReg@val_682& (0+255),6,b
  9790  000E36  D008               	goto	l10925
  9791                           
  9792                           ; BSR set to: 0
  9793                           ;main.c: 1561: SendInformationEvent( reg - 2,
  9794                           ;main.c: 1562: 20,
  9795                           ;main.c: 1563: 24 );
  9796  000E38  0E14               	movlw	20
  9797  000E3A  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9798  000E3C  0E18               	movlw	24
  9799  000E3E  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9800  000E40  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9801  000E42  0FFE               	addlw	254
  9802  000E44  EC11  F01C         	call	_SendInformationEvent
  9803  000E48                     l10925:
  9804                           
  9805                           ; BSR set to: 0
  9806                           ;main.c: 1564: }
  9807                           ;main.c: 1565: }
  9808                           ;main.c: 1566: }
  9809                           ;main.c: 1568: return rv;
  9810  000E48  51CC               	movf	vscp_writeAppReg@rv& (0+255),w,b
  9811                           
  9812                           ; BSR set to: 0
  9813  000E4A  0012               	return	
  9814  000E4C                     __end_of_vscp_writeAppReg:
  9815                           	opt stack 0
  9816  000E4C                     PL4:
  9817                           	opt stack 21
  9818  000E4C  0E43               	movlw	67
  9819  000E4E  0100               	movlb	0	; () banked
  9820  000E50  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9821  000E52  6E08               	movwf	?_Write_b_eep,c
  9822  000E54  6A09               	clrf	?_Write_b_eep+1,c
  9823  000E56  0E00               	movlw	0
  9824  000E58  2209               	addwfc	?_Write_b_eep+1,f,c
  9825  000E5A  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9826  000E5E  0C00               	retlw	0
  9827  000E60                     __end_ofPL4:
  9828                           	opt stack 0
  9829  000E60                     PL6:
  9830                           	opt stack 21
  9831  000E60  0E43               	movlw	67
  9832  000E62  0100               	movlb	0	; () banked
  9833  000E64  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9834  000E66  6E08               	movwf	?_Read_b_eep,c
  9835  000E68  6A09               	clrf	?_Read_b_eep+1,c
  9836  000E6A  0E00               	movlw	0
  9837  000E6C  2209               	addwfc	?_Read_b_eep+1,f,c
  9838  000E6E  0C00               	retlw	0
  9839  000E70                     __end_ofPL6:
  9840                           	opt stack 0
  9841  000E70                     PL38:
  9842                           	opt stack 21
  9843  000E70  0100               	movlb	0	; () banked
  9844  000E72  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9845  000E74  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9846  000E76  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9847  000E78  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9848  000E7A  6F70               	movwf	_relay_pulse_timer& (0+255),b
  9849  000E7C  0E00               	movlw	0
  9850  000E7E  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9851  000E80  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  9852  000E82  0012               	return	
  9853  000E84                     __end_ofPL38:
  9854                           	opt stack 0
  9855  000E84                     PL56:
  9856                           	opt stack 21
  9857  000E84  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9858  000E86  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9859  000E88  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9860  000E8A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9861  000E8C  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  9862  000E8E  0E00               	movlw	0
  9863  000E90  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9864  000E92  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  9865  000E94  0012               	return	
  9866  000E96                     __end_ofPL56:
  9867                           	opt stack 0
  9868  000E96                     PL60:
  9869                           	opt stack 21
  9870  000E96  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9871  000E98  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9872  000E9A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9873  000E9C  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9874  000E9E  0E00               	movlw	0
  9875  000EA0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9876  000EA2  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9877  000EA4  0012               	return	
  9878  000EA6                     __end_ofPL60:
  9879                           	opt stack 0
  9880  000EA6                     PL62:
  9881                           	opt stack 21
  9882  000EA6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9883  000EA8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9884  000EAA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9885  000EAC  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9886  000EAE  0E00               	movlw	0
  9887  000EB0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9888  000EB2  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9889  000EB4  0012               	return	
  9890  000EB6                     __end_ofPL62:
  9891                           	opt stack 0
  9892  000EB6                     PL64:
  9893                           	opt stack 21
  9894  000EB6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9895  000EB8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9896  000EBA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9897  000EBC  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  9898  000EBE  0E00               	movlw	0
  9899  000EC0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9900  000EC2  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  9901  000EC4  0012               	return	
  9902  000EC6                     __end_ofPL64:
  9903                           	opt stack 0
  9904  000EC6                     PL66:
  9905                           	opt stack 21
  9906  000EC6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9907  000EC8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9908  000ECA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9909  000ECC  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  9910  000ECE  0E00               	movlw	0
  9911  000ED0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9912  000ED2  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  9913  000ED4  0012               	return	
  9914  000ED6                     __end_ofPL66:
  9915                           	opt stack 0
  9916  000ED6                     PL68:
  9917                           	opt stack 21
  9918  000ED6  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9919  000ED8  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9920  000EDA  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9921  000EDC  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9922  000EDE  0E00               	movlw	0
  9923  000EE0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9924  000EE2  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9925  000EE4  0012               	return	
  9926  000EE6                     __end_ofPL68:
  9927                           	opt stack 0
  9928                           tblptru	equ	0xFF8
  9929                           tblptrh	equ	0xFF7
  9930                           tblptrl	equ	0xFF6
  9931                           tablat	equ	0xFF5
  9932                           prodh	equ	0xFF4
  9933                           prodl	equ	0xFF3
  9934                           intcon	equ	0xFF2
  9935                           postinc0	equ	0xFEE
  9936                           wreg	equ	0xFE8
  9937                           indf1	equ	0xFE7
  9938                           fsr1h	equ	0xFE2
  9939                           fsr1l	equ	0xFE1
  9940                           indf2	equ	0xFDF
  9941                           postinc2	equ	0xFDE
  9942                           postdec2	equ	0xFDD
  9943                           plusw2	equ	0xFDB
  9944                           fsr2h	equ	0xFDA
  9945                           fsr2l	equ	0xFD9
  9946                           status	equ	0xFD8
  9947                           
  9948 ;; *************** function _calculateSetFilterMask *****************
  9949 ;; Defined at:
  9950 ;;		line 2681 in file "../main.c"
  9951 ;; Parameters:    Size  Location     Type
  9952 ;;		None
  9953 ;; Auto vars:     Size  Location     Type
  9954 ;;  rowfilter       4   61[COMRAM] unsigned long 
  9955 ;;  filter          4   57[COMRAM] unsigned long 
  9956 ;;  mask            4   53[COMRAM] unsigned long 
  9957 ;;  rowmask         4   48[COMRAM] unsigned long 
  9958 ;;  i               1   66[COMRAM] unsigned char 
  9959 ;;  j               1   65[COMRAM] unsigned char 
  9960 ;;  lastOID         1   52[COMRAM] unsigned char 
  9961 ;; Return value:  Size  Location     Type
  9962 ;;		None               void
  9963 ;; Registers used:
  9964 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9965 ;; Tracked objects:
  9966 ;;		On entry : 0/0
  9967 ;;		On exit  : 0/0
  9968 ;;		Unchanged: 0/0
  9969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9970 ;;      Params:         0       0       0       0       0       0       0
  9971 ;;      Locals:        19       0       0       0       0       0       0
  9972 ;;      Temps:         31       0       0       0       0       0       0
  9973 ;;      Totals:        50       0       0       0       0       0       0
  9974 ;;Total ram usage:       50 bytes
  9975 ;; Hardware stack levels used:    1
  9976 ;; Hardware stack levels required when called:    3
  9977 ;; This function calls:
  9978 ;;		_Read_b_eep
  9979 ;;		_ECANSetOperationMode
  9980 ;;		__CANIDToRegs
  9981 ;; This function is called by:
  9982 ;;		_vscp_writeAppReg
  9983 ;; This function uses a non-reentrant model
  9984 ;;
  9985                           
  9986                           	psect	text25
  9987  001960                     __ptext25:
  9988                           	opt stack 0
  9989  001960                     _calculateSetFilterMask:
  9990                           	opt stack 24
  9991                           
  9992                           ;main.c: 2682: uint8_t i,j;
  9993                           ;main.c: 2683: uint8_t lastOID;
  9994                           ;main.c: 2684: uint32_t rowmask;
  9995                           ;main.c: 2685: uint32_t rowfilter;
  9996                           ;main.c: 2688: uint32_t mask = 0xffffffff;
  9997                           
  9998                           ; BSR set to: 0
  9999                           ;incstack = 0
 10000                           ;incstack = 0
 10001  001960  6836               	setf	calculateSetFilterMask@mask,c
 10002  001962  6837               	setf	calculateSetFilterMask@mask+1,c
 10003  001964  6838               	setf	calculateSetFilterMask@mask+2,c
 10004  001966  6839               	setf	calculateSetFilterMask@mask+3,c
 10005                           
 10006                           ;main.c: 2689: uint32_t filter = 0;
 10007  001968  6A3A               	clrf	calculateSetFilterMask@filter,c
 10008  00196A  6A3B               	clrf	calculateSetFilterMask@filter+1,c
 10009  00196C  6A3C               	clrf	calculateSetFilterMask@filter+2,c
 10010  00196E  6A3D               	clrf	calculateSetFilterMask@filter+3,c
 10011                           
 10012                           ;main.c: 2692: for ( i=0; i < 7; i++ ) {
 10013  001970  6A43               	clrf	calculateSetFilterMask@i,c
 10014  001972                     l9027:
 10015                           
 10016                           ;main.c: 2695: if ( Read_b_eep(0x43 + 8*i + 1) & 0x80 ) {
 10017  001972  5043               	movf	calculateSetFilterMask@i,w,c
 10018  001974  D972               	call	PL10	;call to abstracted procedure
 10019  001976  0E44               	movlw	68
 10020  001978  2412               	addwf	??_calculateSetFilterMask,w,c
 10021  00197A  6E08               	movwf	?_Read_b_eep,c
 10022  00197C  0E00               	movlw	0
 10023  00197E  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10024  001980  6E09               	movwf	?_Read_b_eep+1,c
 10025  001982  ECB5  F01E         	call	_Read_b_eep	;wreg free
 10026  001986  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 10027  001988  AE14               	btfss	??_calculateSetFilterMask+2,7,c
 10028  00198A  D11A               	goto	l9071
 10029                           
 10030                           ;main.c: 2704: rowmask =
 10031                           ;main.c: 2706: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 2 ) << 23 ) |
 10032                           ;main.c: 2708: ( (uint32_t)Read_b_eep(0x43 + 8*i + 2) << 16 ) |
 10033                           ;main.c: 2710: ( (uint32_t)Read_b_eep(0x43 + 8*i + 4) << 8 ) |
 10034                           ;main.c: 2712: 0xff;
 10035  00198C  5043               	movf	calculateSetFilterMask@i,w,c
 10036  00198E  D965               	call	PL10	;call to abstracted procedure
 10037  001990  0E47               	movlw	71
 10038  001992  2412               	addwf	??_calculateSetFilterMask,w,c
 10039  001994  6E08               	movwf	?_Read_b_eep,c
 10040  001996  0E00               	movlw	0
 10041  001998  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10042  00199A  6E09               	movwf	?_Read_b_eep+1,c
 10043  00199C  ECB5  F01E         	call	_Read_b_eep	;wreg free
 10044  0019A0  D968               	call	PL12	;call to abstracted procedure
 10045  0019A2  0E45               	movlw	69
 10046  0019A4  2419               	addwf	??_calculateSetFilterMask+7,w,c
 10047  0019A6  6E08               	movwf	?_Read_b_eep,c
 10048  0019A8  0E00               	movlw	0
 10049  0019AA  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 10050  0019AC  6E09               	movwf	?_Read_b_eep+1,c
 10051  0019AE  ECB5  F01E         	call	_Read_b_eep	;wreg free
 10052  0019B2  D934               	call	PL8	;call to abstracted procedure
 10053  0019B4  ECB5  F01E         	call	_Read_b_eep	;wreg free
 10054  0019B8  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 10055  0019BA  0E02               	movlw	2
 10056  0019BC  1622               	andwf	??_calculateSetFilterMask+16,f,c
 10057  0019BE  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 10058  0019C2  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 10059  0019C4  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 10060  0019C6  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 10061  0019C8  0E17               	movlw	23
 10062  0019CA                     u10055:
 10063  0019CA  90D8               	bcf	status,0,c
 10064  0019CC  3623               	rlcf	??_calculateSetFilterMask+17,f,c
 10065  0019CE  3624               	rlcf	??_calculateSetFilterMask+18,f,c
 10066  0019D0  3625               	rlcf	??_calculateSetFilterMask+19,f,c
 10067  0019D2  3626               	rlcf	??_calculateSetFilterMask+20,f,c
 10068  0019D4  2EE8               	decfsz	wreg,f,c
 10069  0019D6  D7F9               	goto	u10055
 10070  0019D8  501C               	movf	??_calculateSetFilterMask+10,w,c
 10071  0019DA  D965               	call	PL14	;call to abstracted procedure
 10072  0019DC  0EFF               	movlw	255
 10073  0019DE  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 10074  0019E0  6E31               	movwf	calculateSetFilterMask@rowmask,c
 10075  0019E2  502C               	movf	??_calculateSetFilterMask+26,w,c
 10076  0019E4  6E32               	movwf	calculateSetFilterMask@rowmask+1,c
 10077  0019E6  502D               	movf	??_calculateSetFilterMask+27,w,c
 10078  0019E8  6E33               	movwf	calculateSetFilterMask@rowmask+2,c
 10079  0019EA  502E               	movf	??_calculateSetFilterMask+28,w,c
 10080  0019EC  6E34               	movwf	calculateSetFilterMask@rowmask+3,c
 10081                           
 10082                           ;main.c: 2713: ;
 10083                           ;main.c: 2718: rowfilter =
 10084                           ;main.c: 2720: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 1 ) << 24 ) |
 10085                           ;main.c: 2722: ( (uint32_t)Read_b_eep(0x43 + 8*i + 3) << 16 ) |
 10086                           ;main.c: 2724: ( (uint32_t)Read_b_eep(0x43 + 8*i + 5) << 8 ) |
 10087                           ;main.c: 2727: Read_b_eep(0x43 + 8*i);
 10088  0019EE  5043               	movf	calculateSetFilterMask@i,w,c
 10089  0019F0  D934               	call	PL10	;call to abstracted procedure
 10090  0019F2  0E48               	movlw	72
 10091  0019F4  2412               	addwf	??_calculateSetFilterMask,w,c
 10092  0019F6  6E08               	movwf	?_Read_b_eep,c
 10093  0019F8  0E00               	movlw	0
 10094  0019FA  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10095  0019FC  6E09               	movwf	?_Read_b_eep+1,c
 10096  0019FE  ECB5  F01E         	call	_Read_b_eep	;wreg free
 10097  001A02  D937               	call	PL12	;call to abstracted procedure
 10098  001A04  0E46               	movlw	70
 10099  001A06  2419               	addwf	??_calculateSetFilterMask+7,w,c
 10100  001A08  6E08               	movwf	?_Read_b_eep,c
 10101  001A0A  0E00               	movlw	0
 10102  001A0C  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 10103  001A0E  6E09               	movwf	?_Read_b_eep+1,c
 10104  001A10  ECB5  F01E         	call	_Read_b_eep	;wreg free
 10105  001A14  D903               	call	PL8	;call to abstracted procedure
 10106  001A16  ECB5  F01E         	call	_Read_b_eep	;wreg free
 10107  001A1A  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 10108  001A1C  0E01               	movlw	1
 10109  001A1E  1622               	andwf	??_calculateSetFilterMask+16,f,c
 10110  001A20  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 10111  001A24  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 10112  001A26  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 10113  001A28  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 10114  001A2A  C023  F026         	movff	??_calculateSetFilterMask+17,??_calculateSetFilterMask+20
 10115  001A2E  6A25               	clrf	??_calculateSetFilterMask+19,c
 10116  001A30  6A24               	clrf	??_calculateSetFilterMask+18,c
 10117  001A32  6A23               	clrf	??_calculateSetFilterMask+17,c
 10118  001A34  501C               	movf	??_calculateSetFilterMask+10,w,c
 10119  001A36  D937               	call	PL14	;call to abstracted procedure
 10120  001A38  5043               	movf	calculateSetFilterMask@i,w,c
 10121  001A3A  6E2F               	movwf	(??_calculateSetFilterMask+29)& (0+255),c
 10122  001A3C  6A30               	clrf	(??_calculateSetFilterMask+30)& (0+255),c
 10123  001A3E  90D8               	bcf	status,0,c
 10124  001A40  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10125  001A42  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10126  001A44  90D8               	bcf	status,0,c
 10127  001A46  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10128  001A48  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10129  001A4A  90D8               	bcf	status,0,c
 10130  001A4C  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10131  001A4E  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10132  001A50  0E43               	movlw	67
 10133  001A52  242F               	addwf	??_calculateSetFilterMask+29,w,c
 10134  001A54  6E08               	movwf	?_Read_b_eep,c
 10135  001A56  0E00               	movlw	0
 10136  001A58  2030               	addwfc	??_calculateSetFilterMask+30,w,c
 10137  001A5A  6E09               	movwf	?_Read_b_eep+1,c
 10138  001A5C  ECB5  F01E         	call	_Read_b_eep	;wreg free
 10139  001A60  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 10140  001A62  6E3E               	movwf	calculateSetFilterMask@rowfilter,c
 10141  001A64  502C               	movf	??_calculateSetFilterMask+26,w,c
 10142  001A66  6E3F               	movwf	calculateSetFilterMask@rowfilter+1,c
 10143  001A68  502D               	movf	??_calculateSetFilterMask+27,w,c
 10144  001A6A  6E40               	movwf	calculateSetFilterMask@rowfilter+2,c
 10145  001A6C  502E               	movf	??_calculateSetFilterMask+28,w,c
 10146  001A6E  6E41               	movwf	calculateSetFilterMask@rowfilter+3,c
 10147                           
 10148                           ;main.c: 2729: if ( 0 == i ) filter = rowfilter;
 10149  001A70  6643               	tstfsz	calculateSetFilterMask@i,c
 10150  001A72  D008               	goto	l9035
 10151  001A74  C03E  F03A         	movff	calculateSetFilterMask@rowfilter,calculateSetFilterMask@filter
 10152  001A78  C03F  F03B         	movff	calculateSetFilterMask@rowfilter+1,calculateSetFilterMask@filter+1
 10153  001A7C  C040  F03C         	movff	calculateSetFilterMask@rowfilter+2,calculateSetFilterMask@filter+2
 10154  001A80  C041  F03D         	movff	calculateSetFilterMask@rowfilter+3,calculateSetFilterMask@filter+3
 10155  001A84                     l9035:
 10156                           
 10157                           ;main.c: 2733: mask &= rowmask;
 10158  001A84  5031               	movf	calculateSetFilterMask@rowmask,w,c
 10159  001A86  1636               	andwf	calculateSetFilterMask@mask,f,c
 10160  001A88  5032               	movf	calculateSetFilterMask@rowmask+1,w,c
 10161  001A8A  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10162  001A8C  5033               	movf	calculateSetFilterMask@rowmask+2,w,c
 10163  001A8E  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10164  001A90  5034               	movf	calculateSetFilterMask@rowmask+3,w,c
 10165  001A92  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10166                           
 10167                           ;main.c: 2738: for ( j=0; j<32; j++ ) {
 10168  001A94  6A42               	clrf	calculateSetFilterMask@j,c
 10169  001A96                     l9043:
 10170                           
 10171                           ;main.c: 2740: if ( ( ( filter >> j ) & 1 ) != ( ( rowfilter >> j ) & 1 ) ) {
 10172  001A96  5042               	movf	calculateSetFilterMask@j,w,c
 10173  001A98  C03E  F012         	movff	calculateSetFilterMask@rowfilter,??_calculateSetFilterMask
 10174  001A9C  C03F  F013         	movff	calculateSetFilterMask@rowfilter+1,??_calculateSetFilterMask+1
 10175  001AA0  C040  F014         	movff	calculateSetFilterMask@rowfilter+2,??_calculateSetFilterMask+2
 10176  001AA4  C041  F015         	movff	calculateSetFilterMask@rowfilter+3,??_calculateSetFilterMask+3
 10177  001AA8  2AE8               	incf	wreg,f,c
 10178  001AAA  D005               	goto	u10070
 10179  001AAC                     u10075:
 10180  001AAC  90D8               	bcf	status,0,c
 10181  001AAE  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10182  001AB0  3214               	rrcf	??_calculateSetFilterMask+2,f,c
 10183  001AB2  3213               	rrcf	??_calculateSetFilterMask+1,f,c
 10184  001AB4  3212               	rrcf	??_calculateSetFilterMask,f,c
 10185  001AB6                     u10070:
 10186  001AB6  2EE8               	decfsz	wreg,f,c
 10187  001AB8  D7F9               	goto	u10075
 10188  001ABA  0E01               	movlw	1
 10189  001ABC  1612               	andwf	??_calculateSetFilterMask,f,c
 10190  001ABE  5042               	movf	calculateSetFilterMask@j,w,c
 10191  001AC0  C03A  F016         	movff	calculateSetFilterMask@filter,??_calculateSetFilterMask+4
 10192  001AC4  C03B  F017         	movff	calculateSetFilterMask@filter+1,??_calculateSetFilterMask+5
 10193  001AC8  C03C  F018         	movff	calculateSetFilterMask@filter+2,??_calculateSetFilterMask+6
 10194  001ACC  C03D  F019         	movff	calculateSetFilterMask@filter+3,??_calculateSetFilterMask+7
 10195  001AD0  2AE8               	incf	wreg,f,c
 10196  001AD2  D005               	goto	u10080
 10197  001AD4                     u10085:
 10198  001AD4  90D8               	bcf	status,0,c
 10199  001AD6  3219               	rrcf	??_calculateSetFilterMask+7,f,c
 10200  001AD8  3218               	rrcf	??_calculateSetFilterMask+6,f,c
 10201  001ADA  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10202  001ADC  3216               	rrcf	??_calculateSetFilterMask+4,f,c
 10203  001ADE                     u10080:
 10204  001ADE  2EE8               	decfsz	wreg,f,c
 10205  001AE0  D7F9               	goto	u10085
 10206  001AE2  5016               	movf	??_calculateSetFilterMask+4,w,c
 10207  001AE4  0B01               	andlw	1
 10208  001AE6  1812               	xorwf	??_calculateSetFilterMask,w,c
 10209  001AE8  E010               	bz	l9047
 10210                           
 10211                           ;main.c: 2741: mask &= ~(1<<j);
 10212  001AEA  C042  F012         	movff	calculateSetFilterMask@j,??_calculateSetFilterMask
 10213  001AEE  D8FD               	call	PL78	;call to abstracted procedure
 10214  001AF0  D001               	goto	u10104
 10215  001AF2                     u10105:
 10216  001AF2  D900               	call	PL82	;call to abstracted procedure
 10217  001AF4                     u10104:
 10218  001AF4  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10219  001AF6  D7FD               	goto	u10105
 10220  001AF8  1C13               	comf	??_calculateSetFilterMask+1,w,c
 10221  001AFA  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10222  001AFC  1C14               	comf	??_calculateSetFilterMask+2,w,c
 10223  001AFE  6E16               	movwf	(??_calculateSetFilterMask+4)& (0+255),c
 10224  001B00  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10225  001B02  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10226  001B04  0617               	decf	(??_calculateSetFilterMask+5)& (0+255),f,c
 10227  001B06  5017               	movf	(??_calculateSetFilterMask+5)& (0+255),w,c
 10228  001B08  D8E6               	call	PL44	;call to abstracted procedure
 10229  001B0A                     l9047:
 10230  001B0A  2A42               	incf	calculateSetFilterMask@j,f,c
 10231  001B0C  0E1F               	movlw	31
 10232  001B0E  6442               	cpfsgt	calculateSetFilterMask@j,c
 10233  001B10  D7C2               	goto	l9043
 10234                           
 10235                           ;main.c: 2742: }
 10236                           ;main.c: 2743: }
 10237                           ;main.c: 2749: filter &= rowfilter;
 10238  001B12  503E               	movf	calculateSetFilterMask@rowfilter,w,c
 10239  001B14  163A               	andwf	calculateSetFilterMask@filter,f,c
 10240  001B16  503F               	movf	calculateSetFilterMask@rowfilter+1,w,c
 10241  001B18  163B               	andwf	calculateSetFilterMask@filter+1,f,c
 10242  001B1A  5040               	movf	calculateSetFilterMask@rowfilter+2,w,c
 10243  001B1C  163C               	andwf	calculateSetFilterMask@filter+2,f,c
 10244  001B1E  5041               	movf	calculateSetFilterMask@rowfilter+3,w,c
 10245  001B20  163D               	andwf	calculateSetFilterMask@filter+3,f,c
 10246                           
 10247                           ;main.c: 2757: }
 10248                           ;main.c: 2759: if (i) {
 10249                           
 10250                           ;main.c: 2752: if ( !Read_b_eep(0x43 + 8*i + 1) & 0x40 ) {
 10251  001B22  5043               	movf	calculateSetFilterMask@i,w,c
 10252  001B24  E042               	bz	l9067
 10253                           
 10254                           ;main.c: 2762: for (j = 0; j < 8; j++) {
 10255  001B26  6A42               	clrf	calculateSetFilterMask@j,c
 10256  001B28                     l9061:
 10257                           
 10258                           ;main.c: 2763: if ((lastOID >> i & 1)
 10259                           ;main.c: 2764: != (Read_b_eep(0x43 + 8 * i) >> i & 1)) {
 10260  001B28  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10261  001B2C  5043               	movf	calculateSetFilterMask@i,w,c
 10262  001B2E  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10263  001B30  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10264  001B32  90D8               	bcf	status,0,c
 10265  001B34  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10266  001B36  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10267  001B38  90D8               	bcf	status,0,c
 10268  001B3A  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10269  001B3C  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10270  001B3E  90D8               	bcf	status,0,c
 10271  001B40  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10272  001B42  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10273  001B44  0E43               	movlw	67
 10274  001B46  2413               	addwf	??_calculateSetFilterMask+1,w,c
 10275  001B48  6E08               	movwf	?_Read_b_eep,c
 10276  001B4A  0E00               	movlw	0
 10277  001B4C  2014               	addwfc	??_calculateSetFilterMask+2,w,c
 10278  001B4E  6E09               	movwf	?_Read_b_eep+1,c
 10279  001B50  ECB5  F01E         	call	_Read_b_eep	;wreg free
 10280  001B54  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10281  001B56  2A12               	incf	??_calculateSetFilterMask,f,c
 10282  001B58  D002               	goto	u10134
 10283  001B5A                     u10135:
 10284  001B5A  90D8               	bcf	status,0,c
 10285  001B5C  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10286  001B5E                     u10134:
 10287  001B5E  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10288  001B60  D7FC               	goto	u10135
 10289  001B62  0E01               	movlw	1
 10290  001B64  1615               	andwf	??_calculateSetFilterMask+3,f,c
 10291  001B66  C043  F016         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask+4
 10292  001B6A  C035  F017         	movff	calculateSetFilterMask@lastOID,??_calculateSetFilterMask+5
 10293  001B6E  2A16               	incf	??_calculateSetFilterMask+4,f,c
 10294  001B70  D002               	goto	u10144
 10295  001B72                     u10145:
 10296  001B72  90D8               	bcf	status,0,c
 10297  001B74  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10298  001B76                     u10144:
 10299  001B76  2E16               	decfsz	??_calculateSetFilterMask+4,f,c
 10300  001B78  D7FC               	goto	u10145
 10301  001B7A  5017               	movf	??_calculateSetFilterMask+5,w,c
 10302  001B7C  0B01               	andlw	1
 10303  001B7E  1815               	xorwf	??_calculateSetFilterMask+3,w,c
 10304  001B80  E010               	bz	l9065
 10305                           
 10306                           ;main.c: 2765: mask &= (1 << i);
 10307  001B82  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10308  001B86  D8B1               	call	PL78	;call to abstracted procedure
 10309  001B88  D001               	goto	u10164
 10310  001B8A                     u10165:
 10311  001B8A  D8B4               	call	PL82	;call to abstracted procedure
 10312  001B8C                     u10164:
 10313  001B8C  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10314  001B8E  D7FD               	goto	u10165
 10315  001B90  C013  F015         	movff	??_calculateSetFilterMask+1,??_calculateSetFilterMask+3
 10316  001B94  C014  F016         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+4
 10317  001B98  0E00               	movlw	0
 10318  001B9A  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10319  001B9C  0EFF               	movlw	255
 10320  001B9E  6E17               	movwf	(??_calculateSetFilterMask+5)& (0+255),c
 10321  001BA0  D89A               	call	PL44	;call to abstracted procedure
 10322  001BA2                     l9065:
 10323  001BA2  2A42               	incf	calculateSetFilterMask@j,f,c
 10324  001BA4  0E07               	movlw	7
 10325  001BA6  6442               	cpfsgt	calculateSetFilterMask@j,c
 10326  001BA8  D7BF               	goto	l9061
 10327  001BAA                     l9067:
 10328                           
 10329                           ;main.c: 2766: }
 10330                           ;main.c: 2767: }
 10331                           ;main.c: 2769: lastOID = Read_b_eep(0x43 + 8 * i);
 10332  001BAA  5043               	movf	calculateSetFilterMask@i,w,c
 10333  001BAC  D856               	call	PL10	;call to abstracted procedure
 10334  001BAE  0E43               	movlw	67
 10335  001BB0  2412               	addwf	??_calculateSetFilterMask,w,c
 10336  001BB2  6E08               	movwf	?_Read_b_eep,c
 10337  001BB4  0E00               	movlw	0
 10338  001BB6  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10339  001BB8  6E09               	movwf	?_Read_b_eep+1,c
 10340  001BBA  ECB5  F01E         	call	_Read_b_eep	;wreg free
 10341  001BBE  6E35               	movwf	calculateSetFilterMask@lastOID,c
 10342  001BC0                     l9071:
 10343  001BC0  2A43               	incf	calculateSetFilterMask@i,f,c
 10344  001BC2  0E06               	movlw	6
 10345  001BC4  6443               	cpfsgt	calculateSetFilterMask@i,c
 10346  001BC6  D6D5               	goto	l9027
 10347                           
 10348                           ;main.c: 2775: }
 10349                           ;main.c: 2777: }
 10350                           ;main.c: 2778: }
 10351                           ;main.c: 2781: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 10352  001BC8  0E80               	movlw	128
 10353  001BCA  EC61  F01E         	call	_ECANSetOperationMode
 10354                           
 10355                           ;main.c: 2784: _CANIDToRegs((BYTE*)&RXM1SIDH, mask, 1);
 10356  001BCE  010F               	movlb	15	; () banked
 10357  001BD0  0E0F               	movlw	15	;volatile
 10358  001BD2  6E09               	movwf	?__CANIDToRegs+1,c
 10359  001BD4  0E1C               	movlw	28	;volatile
 10360  001BD6  6E08               	movwf	?__CANIDToRegs,c
 10361  001BD8  C036  F00A         	movff	calculateSetFilterMask@mask,?__CANIDToRegs+2
 10362  001BDC  C037  F00B         	movff	calculateSetFilterMask@mask+1,?__CANIDToRegs+3
 10363  001BE0  C038  F00C         	movff	calculateSetFilterMask@mask+2,?__CANIDToRegs+4
 10364  001BE4  C039  F00D         	movff	calculateSetFilterMask@mask+3,?__CANIDToRegs+5
 10365  001BE8  0E01               	movlw	1
 10366  001BEA  6E0E               	movwf	?__CANIDToRegs+6,c
 10367  001BEC  EC78  F017         	call	__CANIDToRegs	;wreg free
 10368                           
 10369                           ;main.c: 2787: RXF1EN = 1; _CANIDToRegs((BYTE*)&RXF1SIDH, filter, 1);;
 10370  001BF0  010D               	movlb	13	; () banked
 10371  001BF2  83D4               	bsf	212,1,b	;volatile
 10372                           
 10373                           ; BSR set to: 13
 10374  001BF4  010F               	movlb	15	; () banked
 10375  001BF6  0E0F               	movlw	15	;volatile
 10376  001BF8  6E09               	movwf	?__CANIDToRegs+1,c
 10377  001BFA  0E04               	movlw	4	;volatile
 10378  001BFC  6E08               	movwf	?__CANIDToRegs,c
 10379  001BFE  C03A  F00A         	movff	calculateSetFilterMask@filter,?__CANIDToRegs+2
 10380  001C02  C03B  F00B         	movff	calculateSetFilterMask@filter+1,?__CANIDToRegs+3
 10381  001C06  C03C  F00C         	movff	calculateSetFilterMask@filter+2,?__CANIDToRegs+4
 10382  001C0A  C03D  F00D         	movff	calculateSetFilterMask@filter+3,?__CANIDToRegs+5
 10383  001C0E  0E01               	movlw	1
 10384  001C10  6E0E               	movwf	?__CANIDToRegs+6,c
 10385  001C12  EC78  F017         	call	__CANIDToRegs	;wreg free
 10386                           
 10387                           ;main.c: 2790: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
 10388  001C16  0E00               	movlw	0
 10389  001C18  EF61  F01E         	goto	_ECANSetOperationMode
 10390  001C1C                     __end_of_calculateSetFilterMask:
 10391                           	opt stack 0
 10392  001C1C                     PL8:
 10393                           	opt stack 24
 10394  001C1C  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
 10395  001C1E  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 10396  001C22  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 10397  001C24  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 10398  001C26  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 10399  001C28  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 10400  001C2C  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 10401  001C30  6A1D               	clrf	??_calculateSetFilterMask+11,c
 10402  001C32  6A1C               	clrf	??_calculateSetFilterMask+10,c
 10403  001C34  5043               	movf	calculateSetFilterMask@i,w,c
 10404  001C36  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 10405  001C38  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 10406  001C3A  90D8               	bcf	status,0,c
 10407  001C3C  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10408  001C3E  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10409  001C40  90D8               	bcf	status,0,c
 10410  001C42  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10411  001C44  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10412  001C46  90D8               	bcf	status,0,c
 10413  001C48  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10414  001C4A  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10415  001C4C  0E44               	movlw	68
 10416  001C4E  2420               	addwf	??_calculateSetFilterMask+14,w,c
 10417  001C50  6E08               	movwf	?_Read_b_eep,c
 10418  001C52  0E00               	movlw	0
 10419  001C54  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 10420  001C56  6E09               	movwf	?_Read_b_eep+1,c
 10421  001C58  0012               	return	
 10422  001C5A                     __end_ofPL8:
 10423                           	opt stack 0
 10424  001C5A                     PL10:
 10425                           	opt stack 24
 10426  001C5A  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10427  001C5C  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10428  001C5E  90D8               	bcf	status,0,c
 10429  001C60  3612               	rlcf	??_calculateSetFilterMask,f,c
 10430  001C62  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10431  001C64  90D8               	bcf	status,0,c
 10432  001C66  3612               	rlcf	??_calculateSetFilterMask,f,c
 10433  001C68  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10434  001C6A  90D8               	bcf	status,0,c
 10435  001C6C  3612               	rlcf	??_calculateSetFilterMask,f,c
 10436  001C6E  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10437  001C70  0012               	return	
 10438  001C72                     __end_ofPL10:
 10439                           	opt stack 0
 10440  001C72                     PL12:
 10441                           	opt stack 24
 10442  001C72  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 10443  001C74  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
 10444  001C78  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
 10445  001C7A  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10446  001C7C  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
 10447  001C7E  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
 10448  001C82  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
 10449  001C86  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
 10450  001C8A  6A15               	clrf	??_calculateSetFilterMask+3,c
 10451  001C8C  5043               	movf	calculateSetFilterMask@i,w,c
 10452  001C8E  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
 10453  001C90  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
 10454  001C92  90D8               	bcf	status,0,c
 10455  001C94  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10456  001C96  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10457  001C98  90D8               	bcf	status,0,c
 10458  001C9A  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10459  001C9C  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10460  001C9E  90D8               	bcf	status,0,c
 10461  001CA0  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10462  001CA2  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10463  001CA4  0012               	return	
 10464  001CA6                     __end_ofPL12:
 10465                           	opt stack 0
 10466  001CA6                     PL14:
 10467                           	opt stack 24
 10468  001CA6  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 10469  001CA8  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 10470  001CAA  501D               	movf	??_calculateSetFilterMask+11,w,c
 10471  001CAC  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 10472  001CAE  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 10473  001CB0  501E               	movf	??_calculateSetFilterMask+12,w,c
 10474  001CB2  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 10475  001CB4  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 10476  001CB6  501F               	movf	??_calculateSetFilterMask+13,w,c
 10477  001CB8  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 10478  001CBA  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 10479  001CBC  5015               	movf	??_calculateSetFilterMask+3,w,c
 10480  001CBE  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 10481  001CC0  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 10482  001CC2  5016               	movf	??_calculateSetFilterMask+4,w,c
 10483  001CC4  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 10484  001CC6  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 10485  001CC8  5017               	movf	??_calculateSetFilterMask+5,w,c
 10486  001CCA  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 10487  001CCC  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 10488  001CCE  5018               	movf	??_calculateSetFilterMask+6,w,c
 10489  001CD0  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 10490  001CD2  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 10491  001CD4  0012               	return	
 10492  001CD6                     __end_ofPL14:
 10493                           	opt stack 0
 10494  001CD6                     PL44:
 10495                           	opt stack 24
 10496  001CD6  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10497  001CD8  5015               	movf	??_calculateSetFilterMask+3,w,c
 10498  001CDA  1636               	andwf	calculateSetFilterMask@mask,f,c
 10499  001CDC  5016               	movf	??_calculateSetFilterMask+4,w,c
 10500  001CDE  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10501  001CE0  5017               	movf	??_calculateSetFilterMask+5,w,c
 10502  001CE2  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10503  001CE4  5018               	movf	??_calculateSetFilterMask+6,w,c
 10504  001CE6  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10505  001CE8  0012               	return	
 10506  001CEA                     __end_ofPL44:
 10507                           	opt stack 0
 10508  001CEA                     PL78:
 10509                           	opt stack 24
 10510  001CEA  0E01               	movlw	1
 10511  001CEC  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10512  001CEE  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10513  001CF0  2A12               	incf	??_calculateSetFilterMask,f,c
 10514  001CF2  0012               	return	
 10515  001CF4                     __end_ofPL78:
 10516                           	opt stack 0
 10517  001CF4                     PL82:
 10518                           	opt stack 24
 10519  001CF4  90D8               	bcf	status,0,c
 10520  001CF6  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10521  001CF8  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10522  001CFA  0012               	return	
 10523  001CFC                     __end_ofPL82:
 10524                           	opt stack 0
 10525                           tblptru	equ	0xFF8
 10526                           tblptrh	equ	0xFF7
 10527                           tblptrl	equ	0xFF6
 10528                           tablat	equ	0xFF5
 10529                           prodh	equ	0xFF4
 10530                           prodl	equ	0xFF3
 10531                           intcon	equ	0xFF2
 10532                           postinc0	equ	0xFEE
 10533                           wreg	equ	0xFE8
 10534                           indf1	equ	0xFE7
 10535                           fsr1h	equ	0xFE2
 10536                           fsr1l	equ	0xFE1
 10537                           indf2	equ	0xFDF
 10538                           postinc2	equ	0xFDE
 10539                           postdec2	equ	0xFDD
 10540                           plusw2	equ	0xFDB
 10541                           fsr2h	equ	0xFDA
 10542                           fsr2l	equ	0xFD9
 10543                           status	equ	0xFD8
 10544                           
 10545 ;; *************** function _SendInformationEvent *****************
 10546 ;; Defined at:
 10547 ;;		line 1598 in file "../main.c"
 10548 ;; Parameters:    Size  Location     Type
 10549 ;;  idx             1    wreg     unsigned char 
 10550 ;;  eventClass      1   20[BANK0 ] unsigned char 
 10551 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
 10552 ;; Auto vars:     Size  Location     Type
 10553 ;;  idx             1   79[COMRAM] unsigned char 
 10554 ;;  data            3   76[COMRAM] unsigned char [3]
 10555 ;; Return value:  Size  Location     Type
 10556 ;;		None               void
 10557 ;; Registers used:
 10558 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 10559 ;; Tracked objects:
 10560 ;;		On entry : F/0
 10561 ;;		On exit  : F/0
 10562 ;;		Unchanged: 0/0
 10563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10564 ;;      Params:         0       2       0       0       0       0       0
 10565 ;;      Locals:         4       0       0       0       0       0       0
 10566 ;;      Temps:          2       0       0       0       0       0       0
 10567 ;;      Totals:         6       2       0       0       0       0       0
 10568 ;;Total ram usage:        8 bytes
 10569 ;; Hardware stack levels used:    1
 10570 ;; Hardware stack levels required when called:    6
 10571 ;; This function calls:
 10572 ;;		_Read_b_eep
 10573 ;;		_sendVSCPFrame
 10574 ;; This function is called by:
 10575 ;;		_doApplicationOneSecondWork
 10576 ;;		_vscp_writeAppReg
 10577 ;;		_doActionOn
 10578 ;;		_doActionOff
 10579 ;;		_doActionStatus
 10580 ;;		_doActionToggle
 10581 ;; This function uses a non-reentrant model
 10582 ;;
 10583                           
 10584                           	psect	text26
 10585  003822                     __ptext26:
 10586                           	opt stack 0
 10587  003822                     _SendInformationEvent:
 10588                           	opt stack 23
 10589                           
 10590                           ;incstack = 0
 10591                           ;incstack = 0
 10592                           ;SendInformationEvent@idx stored from wreg
 10593  003822  CFE8 F050          	movff	wreg,SendInformationEvent@idx
 10594                           
 10595                           ; BSR set to: 0
 10596                           ;main.c: 1599: uint8_t data[3];
 10597                           ;main.c: 1612: data[ 0 ] = idx;
 10598  003826  C050  F04D         	movff	SendInformationEvent@idx,SendInformationEvent@data
 10599                           
 10600                           ; BSR set to: 0
 10601                           ;main.c: 1613: data[ 1 ] = Read_b_eep(0x43 + 50 + 2*idx);
 10602  00382A  90D8               	bcf	status,0,c
 10603  00382C  3450               	rlcf	SendInformationEvent@idx,w,c
 10604  00382E  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10605  003830  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10606  003832  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10607  003834  0E75               	movlw	117
 10608  003836  244B               	addwf	??_SendInformationEvent,w,c
 10609  003838  6E08               	movwf	?_Read_b_eep,c
 10610  00383A  0E00               	movlw	0
 10611  00383C  204C               	addwfc	??_SendInformationEvent+1,w,c
 10612  00383E  6E09               	movwf	?_Read_b_eep+1,c
 10613  003840  ECB5  F01E         	call	_Read_b_eep	;wreg free
 10614  003844  6E4E               	movwf	SendInformationEvent@data+1,c
 10615                           
 10616                           ;main.c: 1614: data[ 2 ] = Read_b_eep(0x43 + 51 + 2*idx);
 10617  003846  90D8               	bcf	status,0,c
 10618  003848  3450               	rlcf	SendInformationEvent@idx,w,c
 10619  00384A  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10620  00384C  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10621  00384E  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10622  003850  0E76               	movlw	118
 10623  003852  244B               	addwf	??_SendInformationEvent,w,c
 10624  003854  6E08               	movwf	?_Read_b_eep,c
 10625  003856  0E00               	movlw	0
 10626  003858  204C               	addwfc	??_SendInformationEvent+1,w,c
 10627  00385A  6E09               	movwf	?_Read_b_eep+1,c
 10628  00385C  ECB5  F01E         	call	_Read_b_eep	;wreg free
 10629  003860  6E4F               	movwf	SendInformationEvent@data+2,c
 10630                           
 10631                           ;main.c: 1615: sendVSCPFrame( eventClass,
 10632                           ;main.c: 1616: eventTypeId,
 10633                           ;main.c: 1617: vscp_nickname,
 10634                           ;main.c: 1618: 0x03,
 10635                           ;main.c: 1619: 3,
 10636                           ;main.c: 1620: data );
 10637  003862  0100               	movlb	0	; () banked
 10638  003864  C0C5  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
 10639  003868  6A40               	clrf	?_sendVSCPFrame+1,c
 10640  00386A  C0C6  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
 10641  00386E  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 10642  003872  0E03               	movlw	3
 10643  003874  6E43               	movwf	?_sendVSCPFrame+4,c
 10644  003876  6E44               	movwf	?_sendVSCPFrame+5,c
 10645  003878  0E4D               	movlw	low SendInformationEvent@data
 10646  00387A  6E45               	movwf	?_sendVSCPFrame+6,c
 10647  00387C  0E00               	movlw	high SendInformationEvent@data
 10648  00387E  6E46               	movwf	?_sendVSCPFrame+7,c
 10649  003880  0E0F               	movlw	15
 10650  003882  6E46               	movwf	?_sendVSCPFrame+7,c
 10651  003884  0E5F               	movlw	__accesstop+-1
 10652  003886  6445               	cpfsgt	?_sendVSCPFrame+6,c
 10653  003888  6A46               	clrf	?_sendVSCPFrame+7,c
 10654  00388A  EF4A  F01A         	goto	_sendVSCPFrame	;wreg free
 10655  00388E                     __end_of_SendInformationEvent:
 10656                           	opt stack 0
 10657                           tblptru	equ	0xFF8
 10658                           tblptrh	equ	0xFF7
 10659                           tblptrl	equ	0xFF6
 10660                           tablat	equ	0xFF5
 10661                           prodh	equ	0xFF4
 10662                           prodl	equ	0xFF3
 10663                           intcon	equ	0xFF2
 10664                           postinc0	equ	0xFEE
 10665                           wreg	equ	0xFE8
 10666                           indf1	equ	0xFE7
 10667                           fsr1h	equ	0xFE2
 10668                           fsr1l	equ	0xFE1
 10669                           indf2	equ	0xFDF
 10670                           postinc2	equ	0xFDE
 10671                           postdec2	equ	0xFDD
 10672                           plusw2	equ	0xFDB
 10673                           fsr2h	equ	0xFDA
 10674                           fsr2l	equ	0xFD9
 10675                           status	equ	0xFD8
 10676                           
 10677 ;; *************** function _vscp_readRegister *****************
 10678 ;; Defined at:
 10679 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 10680 ;; Parameters:    Size  Location     Type
 10681 ;;  reg             1    wreg     unsigned char 
 10682 ;; Auto vars:     Size  Location     Type
 10683 ;;  reg             1   28[COMRAM] unsigned char 
 10684 ;; Return value:  Size  Location     Type
 10685 ;;                  1    wreg      unsigned char 
 10686 ;; Registers used:
 10687 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10688 ;; Tracked objects:
 10689 ;;		On entry : F/0
 10690 ;;		On exit  : 0/0
 10691 ;;		Unchanged: 0/0
 10692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10693 ;;      Params:         0       0       0       0       0       0       0
 10694 ;;      Locals:         1       0       0       0       0       0       0
 10695 ;;      Temps:          0       0       0       0       0       0       0
 10696 ;;      Totals:         1       0       0       0       0       0       0
 10697 ;;Total ram usage:        1 bytes
 10698 ;; Hardware stack levels used:    1
 10699 ;; Hardware stack levels required when called:    5
 10700 ;; This function calls:
 10701 ;;		_vscp_readAppReg
 10702 ;;		_vscp_readStdReg
 10703 ;; This function is called by:
 10704 ;;		_vscp_handleProtocolEvent
 10705 ;; This function uses a non-reentrant model
 10706 ;;
 10707                           
 10708                           	psect	text27
 10709  003C90                     __ptext27:
 10710                           	opt stack 0
 10711  003C90                     _vscp_readRegister:
 10712                           	opt stack 24
 10713                           
 10714                           ; BSR set to: 0
 10715                           ;incstack = 0
 10716                           ;incstack = 0
 10717                           ;vscp_readRegister@reg stored from wreg
 10718  003C90  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
 10719                           
 10720                           ; BSR set to: 0
 10721                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 10722  003C94  0E7F               	movlw	127
 10723  003C96  641D               	cpfsgt	vscp_readRegister@reg,c
 10724  003C98  D004               	goto	l9569
 10725                           
 10726                           ; BSR set to: 0
 10727                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 10728  003C9A  501D               	movf	vscp_readRegister@reg,w,c
 10729  003C9C  EC1E  F014         	call	_vscp_readStdReg
 10730  003CA0  D003               	goto	l1126
 10731  003CA2                     l9569:
 10732                           
 10733                           ; BSR set to: 0
 10734                           ;vscp_firmware.c: 565: else {
 10735                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 10736  003CA2  501D               	movf	vscp_readRegister@reg,w,c
 10737  003CA4  ECA5  F01A         	call	_vscp_readAppReg
 10738  003CA8                     l1126:
 10739  003CA8  0012               	return	
 10740  003CAA                     __end_of_vscp_readRegister:
 10741                           	opt stack 0
 10742                           tblptru	equ	0xFF8
 10743                           tblptrh	equ	0xFF7
 10744                           tblptrl	equ	0xFF6
 10745                           tablat	equ	0xFF5
 10746                           prodh	equ	0xFF4
 10747                           prodl	equ	0xFF3
 10748                           intcon	equ	0xFF2
 10749                           postinc0	equ	0xFEE
 10750                           wreg	equ	0xFE8
 10751                           indf1	equ	0xFE7
 10752                           fsr1h	equ	0xFE2
 10753                           fsr1l	equ	0xFE1
 10754                           indf2	equ	0xFDF
 10755                           postinc2	equ	0xFDE
 10756                           postdec2	equ	0xFDD
 10757                           plusw2	equ	0xFDB
 10758                           fsr2h	equ	0xFDA
 10759                           fsr2l	equ	0xFD9
 10760                           status	equ	0xFD8
 10761                           
 10762 ;; *************** function _vscp_readStdReg *****************
 10763 ;; Defined at:
 10764 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 10765 ;; Parameters:    Size  Location     Type
 10766 ;;  reg             1    wreg     unsigned char 
 10767 ;; Auto vars:     Size  Location     Type
 10768 ;;  reg             1   27[COMRAM] unsigned char 
 10769 ;;  code            4   20[COMRAM] unsigned long 
 10770 ;;  idx             1   25[COMRAM] unsigned char 
 10771 ;;  code            4   16[COMRAM] unsigned long 
 10772 ;;  idx             1   24[COMRAM] unsigned char 
 10773 ;;  rv              1   26[COMRAM] unsigned char 
 10774 ;; Return value:  Size  Location     Type
 10775 ;;                  1    wreg      unsigned char 
 10776 ;; Registers used:
 10777 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10778 ;; Tracked objects:
 10779 ;;		On entry : F/0
 10780 ;;		On exit  : 0/0
 10781 ;;		Unchanged: 0/0
 10782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10783 ;;      Params:         0       0       0       0       0       0       0
 10784 ;;      Locals:        12       0       0       0       0       0       0
 10785 ;;      Temps:          5       0       0       0       0       0       0
 10786 ;;      Totals:        17       0       0       0       0       0       0
 10787 ;;Total ram usage:       17 bytes
 10788 ;; Hardware stack levels used:    1
 10789 ;; Hardware stack levels required when called:    4
 10790 ;; This function calls:
 10791 ;;		_vscp_getMajorVersion
 10792 ;;		_vscp_getMinorVersion
 10793 ;;		_vscp_getSubMinorVersion
 10794 ;;		_vscp_getGUID
 10795 ;;		_vscp_getMDF_URL
 10796 ;;		_vscp_getUserID
 10797 ;;		_vscp_getManufacturerId
 10798 ;;		_vscp_getBootLoaderAlgorithm
 10799 ;;		_vscp_getBufferSize
 10800 ;;		_vscp_getFamilyCode
 10801 ;;		_vscp_getFamilyType
 10802 ;;		_vscp_getRegisterPagesUsed
 10803 ;; This function is called by:
 10804 ;;		_vscp_readRegister
 10805 ;;		_vscp_handleProtocolEvent
 10806 ;; This function uses a non-reentrant model
 10807 ;;
 10808                           
 10809                           	psect	text28
 10810  00283C                     __ptext28:
 10811                           	opt stack 0
 10812  00283C                     _vscp_readStdReg:
 10813                           	opt stack 25
 10814                           
 10815                           ;incstack = 0
 10816                           ;incstack = 0
 10817                           ;vscp_readStdReg@reg stored from wreg
 10818  00283C  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
 10819                           
 10820                           ; BSR set to: 0
 10821                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 10822  002840  6A1B               	clrf	vscp_readStdReg@rv,c
 10823                           
 10824                           ; BSR set to: 0
 10825                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 10826  002842  501C               	movf	vscp_readStdReg@reg,w,c
 10827  002844  0A80               	xorlw	128
 10828  002846  E104               	bnz	l9579
 10829                           
 10830                           ; BSR set to: 0
 10831                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 10832  002848  C055  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 10833                           
 10834                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 10835  00284C  6A55               	clrf	_vscp_alarmstatus,c
 10836                           
 10837                           ;vscp_firmware.c: 584: }
 10838  00284E  D0B3               	goto	l9667
 10839  002850                     l9579:
 10840                           
 10841                           ; BSR set to: 0
 10842                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 10843  002850  501C               	movf	vscp_readStdReg@reg,w,c
 10844  002852  0A81               	xorlw	129
 10845  002854  E102               	bnz	l9583
 10846                           
 10847                           ; BSR set to: 0
 10848                           ;vscp_firmware.c: 588: rv = 1;
 10849  002856  0E01               	movlw	1
 10850  002858  D075               	goto	L39
 10851  00285A                     l9583:
 10852                           
 10853                           ; BSR set to: 0
 10854                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 10855  00285A  501C               	movf	vscp_readStdReg@reg,w,c
 10856  00285C  0A82               	xorlw	130
 10857  00285E  E102               	bnz	l9587
 10858                           
 10859                           ; BSR set to: 0
 10860                           ;vscp_firmware.c: 594: rv = 5;
 10861  002860  0E05               	movlw	5
 10862  002862  D070               	goto	L39
 10863  002864                     l9587:
 10864                           
 10865                           ; BSR set to: 0
 10866                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 10867  002864  501C               	movf	vscp_readStdReg@reg,w,c
 10868  002866  0A83               	xorlw	131
 10869  002868  E102               	bnz	l9591
 10870                           
 10871                           ; BSR set to: 0
 10872                           ;vscp_firmware.c: 600: rv = 0;
 10873  00286A  6A1B               	clrf	vscp_readStdReg@rv,c
 10874                           
 10875                           ;vscp_firmware.c: 602: }
 10876  00286C  D0A4               	goto	l9667
 10877  00286E                     l9591:
 10878                           
 10879                           ; BSR set to: 0
 10880                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 10881  00286E  501C               	movf	vscp_readStdReg@reg,w,c
 10882  002870  0A94               	xorlw	148
 10883  002872  E103               	bnz	l9595
 10884                           
 10885                           ; BSR set to: 0
 10886                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 10887  002874  ECF4  F01E         	call	_vscp_getMajorVersion	;wreg free
 10888  002878  D065               	goto	L39
 10889  00287A                     l9595:
 10890                           
 10891                           ; BSR set to: 0
 10892                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 10893  00287A  501C               	movf	vscp_readStdReg@reg,w,c
 10894  00287C  0A95               	xorlw	149
 10895  00287E  E103               	bnz	l9599
 10896                           
 10897                           ; BSR set to: 0
 10898                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 10899  002880  ECF3  F01E         	call	_vscp_getMinorVersion	;wreg free
 10900  002884  D05F               	goto	L39
 10901  002886                     l9599:
 10902                           
 10903                           ; BSR set to: 0
 10904                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 10905  002886  501C               	movf	vscp_readStdReg@reg,w,c
 10906  002888  0A96               	xorlw	150
 10907  00288A  E103               	bnz	l9603
 10908                           
 10909                           ; BSR set to: 0
 10910                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 10911  00288C  ECF2  F01E         	call	_vscp_getSubMinorVersion	;wreg free
 10912  002890  D059               	goto	L39
 10913  002892                     l9603:
 10914                           
 10915                           ; BSR set to: 0
 10916                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 10917  002892  0E89               	movlw	137
 10918  002894  601C               	cpfslt	vscp_readStdReg@reg,c
 10919  002896  D005               	goto	l9607
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 10923  002898  501C               	movf	vscp_readStdReg@reg,w,c
 10924  00289A  0F7C               	addlw	124
 10925  00289C  EC98  F01E         	call	_vscp_getUserID
 10926  0028A0  D051               	goto	L39
 10927  0028A2                     l9607:
 10928                           
 10929                           ; BSR set to: 0
 10930                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 10931                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 10932  0028A2  0E88               	movlw	136
 10933  0028A4  641C               	cpfsgt	vscp_readStdReg@reg,c
 10934  0028A6  D008               	goto	l9613
 10935                           
 10936                           ; BSR set to: 0
 10937  0028A8  0E91               	movlw	145
 10938  0028AA  601C               	cpfslt	vscp_readStdReg@reg,c
 10939  0028AC  D005               	goto	l9613
 10940                           
 10941                           ; BSR set to: 0
 10942                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 10943  0028AE  501C               	movf	vscp_readStdReg@reg,w,c
 10944  0028B0  0F77               	addlw	119
 10945  0028B2  EC8E  F01E         	call	_vscp_getManufacturerId
 10946  0028B6  D046               	goto	L39
 10947  0028B8                     l9613:
 10948                           
 10949                           ; BSR set to: 0
 10950                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 10951  0028B8  501C               	movf	vscp_readStdReg@reg,w,c
 10952  0028BA  0A91               	xorlw	145
 10953  0028BC  E103               	bnz	l9617
 10954                           
 10955                           ; BSR set to: 0
 10956                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 10957  0028BE  C091  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
 10958                           
 10959                           ;vscp_firmware.c: 639: }
 10960  0028C2  D079               	goto	l9667
 10961  0028C4                     l9617:
 10962                           
 10963                           ; BSR set to: 0
 10964                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 10965  0028C4  501C               	movf	vscp_readStdReg@reg,w,c
 10966  0028C6  0A93               	xorlw	147
 10967  0028C8  E103               	bnz	l9621
 10968                           
 10969                           ; BSR set to: 0
 10970                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 10971  0028CA  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
 10972                           
 10973                           ;vscp_firmware.c: 645: }
 10974  0028CE  D073               	goto	l9667
 10975  0028D0                     l9621:
 10976                           
 10977                           ; BSR set to: 0
 10978                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 10979  0028D0  501C               	movf	vscp_readStdReg@reg,w,c
 10980  0028D2  0A92               	xorlw	146
 10981  0028D4  E102               	bnz	l9625
 10982                           
 10983                           ; BSR set to: 0
 10984                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 10985  0028D6  5053               	movf	_vscp_page_select+1,w,c
 10986  0028D8  D035               	goto	L39
 10987  0028DA                     l9625:
 10988                           
 10989                           ; BSR set to: 0
 10990                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 10991  0028DA  501C               	movf	vscp_readStdReg@reg,w,c
 10992  0028DC  0A97               	xorlw	151
 10993  0028DE  E103               	bnz	l9629
 10994                           
 10995                           ; BSR set to: 0
 10996                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 10997  0028E0  ECF1  F01E         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 10998  0028E4  D02F               	goto	L39
 10999  0028E6                     l9629:
 11000                           
 11001                           ; BSR set to: 0
 11002                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 11003  0028E6  501C               	movf	vscp_readStdReg@reg,w,c
 11004  0028E8  0A98               	xorlw	152
 11005  0028EA  E103               	bnz	l9633
 11006                           
 11007                           ; BSR set to: 0
 11008                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 11009  0028EC  ECF0  F01E         	call	_vscp_getBufferSize	;wreg free
 11010  0028F0  D029               	goto	L39
 11011  0028F2                     l9633:
 11012                           
 11013                           ; BSR set to: 0
 11014                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 11015  0028F2  501C               	movf	vscp_readStdReg@reg,w,c
 11016  0028F4  0A99               	xorlw	153
 11017  0028F6  E103               	bnz	l9637
 11018                           
 11019                           ; BSR set to: 0
 11020                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 11021  0028F8  ECEF  F01E         	call	_vscp_getRegisterPagesUsed	;wreg free
 11022  0028FC  D023               	goto	L39
 11023  0028FE                     l9637:
 11024                           
 11025                           ; BSR set to: 0
 11026                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 11027                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 11028  0028FE  0E99               	movlw	153
 11029  002900  641C               	cpfsgt	vscp_readStdReg@reg,c
 11030  002902  D022               	goto	l9647
 11031                           
 11032                           ; BSR set to: 0
 11033  002904  0E9E               	movlw	158
 11034  002906  601C               	cpfslt	vscp_readStdReg@reg,c
 11035  002908  D01F               	goto	l9647
 11036                           
 11037                           ; BSR set to: 0
 11038                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 11039  00290A  ECD6  F01E         	call	_vscp_getFamilyCode	;wreg free
 11040  00290E  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 11041  002912  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 11042  002916  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 11043  00291A  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 11044                           
 11045                           ; BSR set to: 0
 11046                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 11047  00291E  501C               	movf	vscp_readStdReg@reg,w,c
 11048  002920  0F66               	addlw	102
 11049  002922  6E19               	movwf	vscp_readStdReg@idx,c
 11050                           
 11051                           ; BSR set to: 0
 11052                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 11053  002924  5019               	movf	vscp_readStdReg@idx,w,c
 11054  002926  D849               	call	PL48	;call to abstracted procedure
 11055  002928  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 11056  00292C  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 11057  002930  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 11058  002934  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 11059  002938  2AE8               	incf	wreg,f,c
 11060  00293A  D001               	goto	u11270
 11061  00293C                     u11275:
 11062  00293C  D848               	call	PL76	;call to abstracted procedure
 11063  00293E                     u11270:
 11064  00293E  2EE8               	decfsz	wreg,f,c
 11065  002940  D7FD               	goto	u11275
 11066  002942  D024               	goto	L40
 11067  002944                     L39:
 11068  002944  6E1B               	movwf	vscp_readStdReg@rv,c
 11069                           
 11070                           ;vscp_firmware.c: 671: }
 11071  002946  D037               	goto	l9667
 11072  002948                     l9647:
 11073                           
 11074                           ; BSR set to: 0
 11075                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 11076                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 11077  002948  0E9D               	movlw	157
 11078  00294A  641C               	cpfsgt	vscp_readStdReg@reg,c
 11079  00294C  D021               	goto	l9657
 11080                           
 11081                           ; BSR set to: 0
 11082  00294E  0EA2               	movlw	162
 11083  002950  601C               	cpfslt	vscp_readStdReg@reg,c
 11084  002952  D01E               	goto	l9657
 11085                           
 11086                           ; BSR set to: 0
 11087                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 11088  002954  ECD1  F01E         	call	_vscp_getFamilyType	;wreg free
 11089  002958  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1267+3
 11090  00295C  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1267+2
 11091  002960  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1267+1
 11092  002964  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1267
 11093                           
 11094                           ; BSR set to: 0
 11095                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 11096  002968  501C               	movf	vscp_readStdReg@reg,w,c
 11097  00296A  0F62               	addlw	98
 11098  00296C  6E1A               	movwf	vscp_readStdReg@idx_1268,c
 11099                           
 11100                           ; BSR set to: 0
 11101                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 11102  00296E  501A               	movf	vscp_readStdReg@idx_1268,w,c
 11103  002970  D824               	call	PL48	;call to abstracted procedure
 11104  002972  C015  F00D         	movff	vscp_readStdReg@code_1267,??_vscp_readStdReg+1
 11105  002976  C016  F00E         	movff	vscp_readStdReg@code_1267+1,??_vscp_readStdReg+2
 11106  00297A  C017  F00F         	movff	vscp_readStdReg@code_1267+2,??_vscp_readStdReg+3
 11107  00297E  C018  F010         	movff	vscp_readStdReg@code_1267+3,??_vscp_readStdReg+4
 11108  002982  2AE8               	incf	wreg,f,c
 11109  002984  D001               	goto	u11300
 11110  002986                     u11305:
 11111  002986  D823               	call	PL76	;call to abstracted procedure
 11112  002988                     u11300:
 11113  002988  2EE8               	decfsz	wreg,f,c
 11114  00298A  D7FD               	goto	u11305
 11115  00298C                     L40:
 11116  00298C  500D               	movf	??_vscp_readStdReg+1,w,c
 11117  00298E  D7DA               	goto	L39
 11118  002990                     l9657:
 11119                           
 11120                           ; BSR set to: 0
 11121                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 11122                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 11123  002990  0ECF               	movlw	207
 11124  002992  641C               	cpfsgt	vscp_readStdReg@reg,c
 11125  002994  D008               	goto	l9663
 11126                           
 11127                           ; BSR set to: 0
 11128  002996  0EE0               	movlw	224
 11129  002998  601C               	cpfslt	vscp_readStdReg@reg,c
 11130  00299A  D005               	goto	l9663
 11131                           
 11132                           ; BSR set to: 0
 11133                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 11134  00299C  501C               	movf	vscp_readStdReg@reg,w,c
 11135  00299E  0F30               	addlw	48
 11136  0029A0  ECA2  F01E         	call	_vscp_getGUID
 11137  0029A4  D7CF               	goto	L39
 11138  0029A6                     l9663:
 11139                           
 11140                           ; BSR set to: 0
 11141                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 11142  0029A6  0EDF               	movlw	223
 11143  0029A8  641C               	cpfsgt	vscp_readStdReg@reg,c
 11144  0029AA  D005               	goto	l9667
 11145                           
 11146                           ; BSR set to: 0
 11147                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 11148  0029AC  501C               	movf	vscp_readStdReg@reg,w,c
 11149  0029AE  0F20               	addlw	32
 11150  0029B0  EC55  F01E         	call	_vscp_getMDF_URL
 11151  0029B4  D7C7               	goto	L39
 11152  0029B6                     l9667:
 11153                           
 11154                           ;vscp_firmware.c: 691: }
 11155                           ;vscp_firmware.c: 693: return rv;
 11156  0029B6  501B               	movf	vscp_readStdReg@rv,w,c
 11157  0029B8  0012               	return	
 11158  0029BA                     __end_of_vscp_readStdReg:
 11159                           	opt stack 0
 11160  0029BA                     PL48:
 11161                           	opt stack 25
 11162  0029BA  0803               	sublw	3
 11163  0029BC  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
 11164  0029BE  90D8               	bcf	status,0,c
 11165  0029C0  360C               	rlcf	??_vscp_readStdReg,f,c
 11166  0029C2  90D8               	bcf	status,0,c
 11167  0029C4  360C               	rlcf	??_vscp_readStdReg,f,c
 11168  0029C6  90D8               	bcf	status,0,c
 11169  0029C8  360C               	rlcf	??_vscp_readStdReg,f,c
 11170  0029CA  500C               	movf	??_vscp_readStdReg,w,c
 11171  0029CC  0012               	return	
 11172  0029CE                     __end_ofPL48:
 11173                           	opt stack 0
 11174  0029CE                     PL76:
 11175                           	opt stack 25
 11176  0029CE  90D8               	bcf	status,0,c
 11177  0029D0  3210               	rrcf	??_vscp_readStdReg+4,f,c
 11178  0029D2  320F               	rrcf	??_vscp_readStdReg+3,f,c
 11179  0029D4  320E               	rrcf	??_vscp_readStdReg+2,f,c
 11180  0029D6  320D               	rrcf	??_vscp_readStdReg+1,f,c
 11181  0029D8  0012               	return	
 11182  0029DA                     __end_ofPL76:
 11183                           	opt stack 0
 11184                           tblptru	equ	0xFF8
 11185                           tblptrh	equ	0xFF7
 11186                           tblptrl	equ	0xFF6
 11187                           tablat	equ	0xFF5
 11188                           prodh	equ	0xFF4
 11189                           prodl	equ	0xFF3
 11190                           intcon	equ	0xFF2
 11191                           postinc0	equ	0xFEE
 11192                           wreg	equ	0xFE8
 11193                           indf1	equ	0xFE7
 11194                           fsr1h	equ	0xFE2
 11195                           fsr1l	equ	0xFE1
 11196                           indf2	equ	0xFDF
 11197                           postinc2	equ	0xFDE
 11198                           postdec2	equ	0xFDD
 11199                           plusw2	equ	0xFDB
 11200                           fsr2h	equ	0xFDA
 11201                           fsr2l	equ	0xFD9
 11202                           status	equ	0xFD8
 11203                           
 11204 ;; *************** function _vscp_getRegisterPagesUsed *****************
 11205 ;; Defined at:
 11206 ;;		line 2571 in file "../main.c"
 11207 ;; Parameters:    Size  Location     Type
 11208 ;;		None
 11209 ;; Auto vars:     Size  Location     Type
 11210 ;;		None
 11211 ;; Return value:  Size  Location     Type
 11212 ;;                  1    wreg      unsigned char 
 11213 ;; Registers used:
 11214 ;;		wreg
 11215 ;; Tracked objects:
 11216 ;;		On entry : F/0
 11217 ;;		On exit  : F/0
 11218 ;;		Unchanged: F/0
 11219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11220 ;;      Params:         0       0       0       0       0       0       0
 11221 ;;      Locals:         0       0       0       0       0       0       0
 11222 ;;      Temps:          0       0       0       0       0       0       0
 11223 ;;      Totals:         0       0       0       0       0       0       0
 11224 ;;Total ram usage:        0 bytes
 11225 ;; Hardware stack levels used:    1
 11226 ;; Hardware stack levels required when called:    2
 11227 ;; This function calls:
 11228 ;;		Nothing
 11229 ;; This function is called by:
 11230 ;;		_vscp_readStdReg
 11231 ;; This function uses a non-reentrant model
 11232 ;;
 11233                           
 11234                           	psect	text29
 11235  003DDE                     __ptext29:
 11236                           	opt stack 0
 11237  003DDE                     _vscp_getRegisterPagesUsed:
 11238                           	opt stack 26
 11239                           
 11240                           ; BSR set to: 0
 11241                           
 11242                           ; BSR set to: 0
 11243                           ;main.c: 2572: return 1;
 11244                           
 11245                           ;incstack = 0
 11246                           ;incstack = 0
 11247  003DDE  0C01               	retlw	1
 11248  003DE0                     __end_of_vscp_getRegisterPagesUsed:
 11249                           	opt stack 0
 11250                           tblptru	equ	0xFF8
 11251                           tblptrh	equ	0xFF7
 11252                           tblptrl	equ	0xFF6
 11253                           tablat	equ	0xFF5
 11254                           prodh	equ	0xFF4
 11255                           prodl	equ	0xFF3
 11256                           intcon	equ	0xFF2
 11257                           postinc0	equ	0xFEE
 11258                           wreg	equ	0xFE8
 11259                           indf1	equ	0xFE7
 11260                           fsr1h	equ	0xFE2
 11261                           fsr1l	equ	0xFE1
 11262                           indf2	equ	0xFDF
 11263                           postinc2	equ	0xFDE
 11264                           postdec2	equ	0xFDD
 11265                           plusw2	equ	0xFDB
 11266                           fsr2h	equ	0xFDA
 11267                           fsr2l	equ	0xFD9
 11268                           status	equ	0xFD8
 11269                           
 11270 ;; *************** function _vscp_getFamilyType *****************
 11271 ;; Defined at:
 11272 ;;		line 2552 in file "../main.c"
 11273 ;; Parameters:    Size  Location     Type
 11274 ;;		None
 11275 ;; Auto vars:     Size  Location     Type
 11276 ;;		None
 11277 ;; Return value:  Size  Location     Type
 11278 ;;                  4    7[COMRAM] unsigned long 
 11279 ;; Registers used:
 11280 ;;		None
 11281 ;; Tracked objects:
 11282 ;;		On entry : F/0
 11283 ;;		On exit  : F/0
 11284 ;;		Unchanged: F/0
 11285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11286 ;;      Params:         4       0       0       0       0       0       0
 11287 ;;      Locals:         0       0       0       0       0       0       0
 11288 ;;      Temps:          0       0       0       0       0       0       0
 11289 ;;      Totals:         4       0       0       0       0       0       0
 11290 ;;Total ram usage:        4 bytes
 11291 ;; Hardware stack levels used:    1
 11292 ;; Hardware stack levels required when called:    2
 11293 ;; This function calls:
 11294 ;;		Nothing
 11295 ;; This function is called by:
 11296 ;;		_vscp_readStdReg
 11297 ;; This function uses a non-reentrant model
 11298 ;;
 11299                           
 11300                           	psect	text30
 11301  003DA2                     __ptext30:
 11302                           	opt stack 0
 11303  003DA2                     _vscp_getFamilyType:
 11304                           	opt stack 26
 11305                           
 11306                           ; BSR set to: 0
 11307                           ;main.c: 2553: return 0;
 11308                           
 11309                           ; BSR set to: 0
 11310                           ;incstack = 0
 11311                           ;incstack = 0
 11312  003DA2  6A08               	clrf	?_vscp_getFamilyType,c
 11313  003DA4  6A09               	clrf	?_vscp_getFamilyType+1,c
 11314  003DA6  6A0A               	clrf	?_vscp_getFamilyType+2,c
 11315  003DA8  6A0B               	clrf	?_vscp_getFamilyType+3,c
 11316                           
 11317                           ; BSR set to: 0
 11318  003DAA  0012               	return	
 11319  003DAC                     __end_of_vscp_getFamilyType:
 11320                           	opt stack 0
 11321                           tblptru	equ	0xFF8
 11322                           tblptrh	equ	0xFF7
 11323                           tblptrl	equ	0xFF6
 11324                           tablat	equ	0xFF5
 11325                           prodh	equ	0xFF4
 11326                           prodl	equ	0xFF3
 11327                           intcon	equ	0xFF2
 11328                           postinc0	equ	0xFEE
 11329                           wreg	equ	0xFE8
 11330                           indf1	equ	0xFE7
 11331                           fsr1h	equ	0xFE2
 11332                           fsr1l	equ	0xFE1
 11333                           indf2	equ	0xFDF
 11334                           postinc2	equ	0xFDE
 11335                           postdec2	equ	0xFDD
 11336                           plusw2	equ	0xFDB
 11337                           fsr2h	equ	0xFDA
 11338                           fsr2l	equ	0xFD9
 11339                           status	equ	0xFD8
 11340                           
 11341 ;; *************** function _vscp_getFamilyCode *****************
 11342 ;; Defined at:
 11343 ;;		line 2543 in file "../main.c"
 11344 ;; Parameters:    Size  Location     Type
 11345 ;;		None
 11346 ;; Auto vars:     Size  Location     Type
 11347 ;;		None
 11348 ;; Return value:  Size  Location     Type
 11349 ;;                  4    7[COMRAM] unsigned long 
 11350 ;; Registers used:
 11351 ;;		None
 11352 ;; Tracked objects:
 11353 ;;		On entry : F/0
 11354 ;;		On exit  : F/0
 11355 ;;		Unchanged: F/0
 11356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11357 ;;      Params:         4       0       0       0       0       0       0
 11358 ;;      Locals:         0       0       0       0       0       0       0
 11359 ;;      Temps:          0       0       0       0       0       0       0
 11360 ;;      Totals:         4       0       0       0       0       0       0
 11361 ;;Total ram usage:        4 bytes
 11362 ;; Hardware stack levels used:    1
 11363 ;; Hardware stack levels required when called:    2
 11364 ;; This function calls:
 11365 ;;		Nothing
 11366 ;; This function is called by:
 11367 ;;		_vscp_readStdReg
 11368 ;; This function uses a non-reentrant model
 11369 ;;
 11370                           
 11371                           	psect	text31
 11372  003DAC                     __ptext31:
 11373                           	opt stack 0
 11374  003DAC                     _vscp_getFamilyCode:
 11375                           	opt stack 26
 11376                           
 11377                           ; BSR set to: 0
 11378                           ;main.c: 2544: return 0L;
 11379                           
 11380                           ; BSR set to: 0
 11381                           ;incstack = 0
 11382                           ;incstack = 0
 11383  003DAC  6A08               	clrf	?_vscp_getFamilyCode,c
 11384  003DAE  6A09               	clrf	?_vscp_getFamilyCode+1,c
 11385  003DB0  6A0A               	clrf	?_vscp_getFamilyCode+2,c
 11386  003DB2  6A0B               	clrf	?_vscp_getFamilyCode+3,c
 11387                           
 11388                           ; BSR set to: 0
 11389  003DB4  0012               	return	
 11390  003DB6                     __end_of_vscp_getFamilyCode:
 11391                           	opt stack 0
 11392                           tblptru	equ	0xFF8
 11393                           tblptrh	equ	0xFF7
 11394                           tblptrl	equ	0xFF6
 11395                           tablat	equ	0xFF5
 11396                           prodh	equ	0xFF4
 11397                           prodl	equ	0xFF3
 11398                           intcon	equ	0xFF2
 11399                           postinc0	equ	0xFEE
 11400                           wreg	equ	0xFE8
 11401                           indf1	equ	0xFE7
 11402                           fsr1h	equ	0xFE2
 11403                           fsr1l	equ	0xFE1
 11404                           indf2	equ	0xFDF
 11405                           postinc2	equ	0xFDE
 11406                           postdec2	equ	0xFDD
 11407                           plusw2	equ	0xFDB
 11408                           fsr2h	equ	0xFDA
 11409                           fsr2l	equ	0xFD9
 11410                           status	equ	0xFD8
 11411                           
 11412 ;; *************** function _vscp_getBufferSize *****************
 11413 ;; Defined at:
 11414 ;;		line 2404 in file "../main.c"
 11415 ;; Parameters:    Size  Location     Type
 11416 ;;		None
 11417 ;; Auto vars:     Size  Location     Type
 11418 ;;		None
 11419 ;; Return value:  Size  Location     Type
 11420 ;;                  1    wreg      unsigned char 
 11421 ;; Registers used:
 11422 ;;		wreg
 11423 ;; Tracked objects:
 11424 ;;		On entry : F/0
 11425 ;;		On exit  : F/0
 11426 ;;		Unchanged: F/0
 11427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11428 ;;      Params:         0       0       0       0       0       0       0
 11429 ;;      Locals:         0       0       0       0       0       0       0
 11430 ;;      Temps:          0       0       0       0       0       0       0
 11431 ;;      Totals:         0       0       0       0       0       0       0
 11432 ;;Total ram usage:        0 bytes
 11433 ;; Hardware stack levels used:    1
 11434 ;; Hardware stack levels required when called:    2
 11435 ;; This function calls:
 11436 ;;		Nothing
 11437 ;; This function is called by:
 11438 ;;		_vscp_readStdReg
 11439 ;; This function uses a non-reentrant model
 11440 ;;
 11441                           
 11442                           	psect	text32
 11443  003DE0                     __ptext32:
 11444                           	opt stack 0
 11445  003DE0                     _vscp_getBufferSize:
 11446                           	opt stack 26
 11447                           
 11448                           ; BSR set to: 0
 11449                           
 11450                           ; BSR set to: 0
 11451                           ;main.c: 2405: return 8;
 11452                           
 11453                           ; BSR set to: 0
 11454                           ;incstack = 0
 11455                           ;incstack = 0
 11456  003DE0  0C08               	retlw	8
 11457  003DE2                     __end_of_vscp_getBufferSize:
 11458                           	opt stack 0
 11459                           tblptru	equ	0xFF8
 11460                           tblptrh	equ	0xFF7
 11461                           tblptrl	equ	0xFF6
 11462                           tablat	equ	0xFF5
 11463                           prodh	equ	0xFF4
 11464                           prodl	equ	0xFF3
 11465                           intcon	equ	0xFF2
 11466                           postinc0	equ	0xFEE
 11467                           wreg	equ	0xFE8
 11468                           indf1	equ	0xFE7
 11469                           fsr1h	equ	0xFE2
 11470                           fsr1l	equ	0xFE1
 11471                           indf2	equ	0xFDF
 11472                           postinc2	equ	0xFDE
 11473                           postdec2	equ	0xFDD
 11474                           plusw2	equ	0xFDB
 11475                           fsr2h	equ	0xFDA
 11476                           fsr2l	equ	0xFD9
 11477                           status	equ	0xFD8
 11478                           
 11479 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 11480 ;; Defined at:
 11481 ;;		line 2395 in file "../main.c"
 11482 ;; Parameters:    Size  Location     Type
 11483 ;;		None
 11484 ;; Auto vars:     Size  Location     Type
 11485 ;;		None
 11486 ;; Return value:  Size  Location     Type
 11487 ;;                  1    wreg      unsigned char 
 11488 ;; Registers used:
 11489 ;;		wreg
 11490 ;; Tracked objects:
 11491 ;;		On entry : F/0
 11492 ;;		On exit  : F/0
 11493 ;;		Unchanged: F/0
 11494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11495 ;;      Params:         0       0       0       0       0       0       0
 11496 ;;      Locals:         0       0       0       0       0       0       0
 11497 ;;      Temps:          0       0       0       0       0       0       0
 11498 ;;      Totals:         0       0       0       0       0       0       0
 11499 ;;Total ram usage:        0 bytes
 11500 ;; Hardware stack levels used:    1
 11501 ;; Hardware stack levels required when called:    2
 11502 ;; This function calls:
 11503 ;;		Nothing
 11504 ;; This function is called by:
 11505 ;;		_vscp_readStdReg
 11506 ;; This function uses a non-reentrant model
 11507 ;;
 11508                           
 11509                           	psect	text33
 11510  003DE2                     __ptext33:
 11511                           	opt stack 0
 11512  003DE2                     _vscp_getBootLoaderAlgorithm:
 11513                           	opt stack 26
 11514                           
 11515                           ; BSR set to: 0
 11516                           
 11517                           ; BSR set to: 0
 11518                           ;main.c: 2396: return 0x01;
 11519                           
 11520                           ; BSR set to: 0
 11521                           ;incstack = 0
 11522                           ;incstack = 0
 11523  003DE2  0C01               	retlw	1
 11524  003DE4                     __end_of_vscp_getBootLoaderAlgorithm:
 11525                           	opt stack 0
 11526                           tblptru	equ	0xFF8
 11527                           tblptrh	equ	0xFF7
 11528                           tblptrl	equ	0xFF6
 11529                           tablat	equ	0xFF5
 11530                           prodh	equ	0xFF4
 11531                           prodl	equ	0xFF3
 11532                           intcon	equ	0xFF2
 11533                           postinc0	equ	0xFEE
 11534                           wreg	equ	0xFE8
 11535                           indf1	equ	0xFE7
 11536                           fsr1h	equ	0xFE2
 11537                           fsr1l	equ	0xFE1
 11538                           indf2	equ	0xFDF
 11539                           postinc2	equ	0xFDE
 11540                           postdec2	equ	0xFDD
 11541                           plusw2	equ	0xFDB
 11542                           fsr2h	equ	0xFDA
 11543                           fsr2l	equ	0xFD9
 11544                           status	equ	0xFD8
 11545                           
 11546 ;; *************** function _vscp_getManufacturerId *****************
 11547 ;; Defined at:
 11548 ;;		line 2386 in file "../main.c"
 11549 ;; Parameters:    Size  Location     Type
 11550 ;;  idx             1    wreg     unsigned char 
 11551 ;; Auto vars:     Size  Location     Type
 11552 ;;  idx             1    9[COMRAM] unsigned char 
 11553 ;; Return value:  Size  Location     Type
 11554 ;;                  1    wreg      unsigned char 
 11555 ;; Registers used:
 11556 ;;		wreg, status,2, status,0, cstack
 11557 ;; Tracked objects:
 11558 ;;		On entry : 0/0
 11559 ;;		On exit  : 0/0
 11560 ;;		Unchanged: 0/0
 11561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11562 ;;      Params:         0       0       0       0       0       0       0
 11563 ;;      Locals:         1       0       0       0       0       0       0
 11564 ;;      Temps:          0       0       0       0       0       0       0
 11565 ;;      Totals:         1       0       0       0       0       0       0
 11566 ;;Total ram usage:        1 bytes
 11567 ;; Hardware stack levels used:    1
 11568 ;; Hardware stack levels required when called:    3
 11569 ;; This function calls:
 11570 ;;		_Read_b_eep
 11571 ;; This function is called by:
 11572 ;;		_vscp_readStdReg
 11573 ;;		_vscp_writeStdReg
 11574 ;; This function uses a non-reentrant model
 11575 ;;
 11576                           
 11577                           	psect	text34
 11578  003D1C                     __ptext34:
 11579                           	opt stack 0
 11580  003D1C                     _vscp_getManufacturerId:
 11581                           	opt stack 25
 11582                           
 11583                           ; BSR set to: 0
 11584                           ;incstack = 0
 11585                           ;incstack = 0
 11586                           ;vscp_getManufacturerId@idx stored from wreg
 11587  003D1C  CFE8 F00A          	movff	wreg,vscp_getManufacturerId@idx
 11588                           
 11589                           ;main.c: 2387: return Read_b_eep(0x0B + idx);
 11590  003D20  0E0B               	movlw	11
 11591  003D22  240A               	addwf	vscp_getManufacturerId@idx,w,c
 11592  003D24  6E08               	movwf	?_Read_b_eep,c
 11593  003D26  6A09               	clrf	?_Read_b_eep+1,c
 11594  003D28  0E00               	movlw	0
 11595  003D2A  2209               	addwfc	?_Read_b_eep+1,f,c
 11596  003D2C  EFB5  F01E         	goto	_Read_b_eep	;wreg free
 11597  003D30                     __end_of_vscp_getManufacturerId:
 11598                           	opt stack 0
 11599                           tblptru	equ	0xFF8
 11600                           tblptrh	equ	0xFF7
 11601                           tblptrl	equ	0xFF6
 11602                           tablat	equ	0xFF5
 11603                           prodh	equ	0xFF4
 11604                           prodl	equ	0xFF3
 11605                           intcon	equ	0xFF2
 11606                           postinc0	equ	0xFEE
 11607                           wreg	equ	0xFE8
 11608                           indf1	equ	0xFE7
 11609                           fsr1h	equ	0xFE2
 11610                           fsr1l	equ	0xFE1
 11611                           indf2	equ	0xFDF
 11612                           postinc2	equ	0xFDE
 11613                           postdec2	equ	0xFDD
 11614                           plusw2	equ	0xFDB
 11615                           fsr2h	equ	0xFDA
 11616                           fsr2l	equ	0xFD9
 11617                           status	equ	0xFD8
 11618                           
 11619 ;; *************** function _vscp_getUserID *****************
 11620 ;; Defined at:
 11621 ;;		line 2366 in file "../main.c"
 11622 ;; Parameters:    Size  Location     Type
 11623 ;;  idx             1    wreg     unsigned char 
 11624 ;; Auto vars:     Size  Location     Type
 11625 ;;  idx             1    9[COMRAM] unsigned char 
 11626 ;; Return value:  Size  Location     Type
 11627 ;;                  1    wreg      unsigned char 
 11628 ;; Registers used:
 11629 ;;		wreg, status,2, status,0, cstack
 11630 ;; Tracked objects:
 11631 ;;		On entry : 0/0
 11632 ;;		On exit  : 0/0
 11633 ;;		Unchanged: 0/0
 11634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11635 ;;      Params:         0       0       0       0       0       0       0
 11636 ;;      Locals:         1       0       0       0       0       0       0
 11637 ;;      Temps:          0       0       0       0       0       0       0
 11638 ;;      Totals:         1       0       0       0       0       0       0
 11639 ;;Total ram usage:        1 bytes
 11640 ;; Hardware stack levels used:    1
 11641 ;; Hardware stack levels required when called:    3
 11642 ;; This function calls:
 11643 ;;		_Read_b_eep
 11644 ;; This function is called by:
 11645 ;;		_vscp_readStdReg
 11646 ;;		_vscp_writeStdReg
 11647 ;; This function uses a non-reentrant model
 11648 ;;
 11649                           
 11650                           	psect	text35
 11651  003D30                     __ptext35:
 11652                           	opt stack 0
 11653  003D30                     _vscp_getUserID:
 11654                           	opt stack 25
 11655                           
 11656                           ;incstack = 0
 11657                           ;incstack = 0
 11658                           ;vscp_getUserID@idx stored from wreg
 11659  003D30  CFE8 F00A          	movff	wreg,vscp_getUserID@idx
 11660                           
 11661                           ;main.c: 2367: return Read_b_eep(0x06 + idx);
 11662  003D34  0E06               	movlw	6
 11663  003D36  240A               	addwf	vscp_getUserID@idx,w,c
 11664  003D38  6E08               	movwf	?_Read_b_eep,c
 11665  003D3A  6A09               	clrf	?_Read_b_eep+1,c
 11666  003D3C  0E00               	movlw	0
 11667  003D3E  2209               	addwfc	?_Read_b_eep+1,f,c
 11668  003D40  EFB5  F01E         	goto	_Read_b_eep	;wreg free
 11669  003D44                     __end_of_vscp_getUserID:
 11670                           	opt stack 0
 11671                           tblptru	equ	0xFF8
 11672                           tblptrh	equ	0xFF7
 11673                           tblptrl	equ	0xFF6
 11674                           tablat	equ	0xFF5
 11675                           prodh	equ	0xFF4
 11676                           prodl	equ	0xFF3
 11677                           intcon	equ	0xFF2
 11678                           postinc0	equ	0xFEE
 11679                           wreg	equ	0xFE8
 11680                           indf1	equ	0xFE7
 11681                           fsr1h	equ	0xFE2
 11682                           fsr1l	equ	0xFE1
 11683                           indf2	equ	0xFDF
 11684                           postinc2	equ	0xFDE
 11685                           postdec2	equ	0xFDD
 11686                           plusw2	equ	0xFDB
 11687                           fsr2h	equ	0xFDA
 11688                           fsr2l	equ	0xFD9
 11689                           status	equ	0xFD8
 11690                           
 11691 ;; *************** function _vscp_getMDF_URL *****************
 11692 ;; Defined at:
 11693 ;;		line 2357 in file "../main.c"
 11694 ;; Parameters:    Size  Location     Type
 11695 ;;  idx             1    wreg     unsigned char 
 11696 ;; Auto vars:     Size  Location     Type
 11697 ;;  idx             1    8[COMRAM] unsigned char 
 11698 ;; Return value:  Size  Location     Type
 11699 ;;                  1    wreg      unsigned char 
 11700 ;; Registers used:
 11701 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11702 ;; Tracked objects:
 11703 ;;		On entry : F/0
 11704 ;;		On exit  : F/0
 11705 ;;		Unchanged: F/0
 11706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11707 ;;      Params:         0       0       0       0       0       0       0
 11708 ;;      Locals:         1       0       0       0       0       0       0
 11709 ;;      Temps:          1       0       0       0       0       0       0
 11710 ;;      Totals:         2       0       0       0       0       0       0
 11711 ;;Total ram usage:        2 bytes
 11712 ;; Hardware stack levels used:    1
 11713 ;; Hardware stack levels required when called:    2
 11714 ;; This function calls:
 11715 ;;		Nothing
 11716 ;; This function is called by:
 11717 ;;		_vscp_readStdReg
 11718 ;;		_vscp_handleProtocolEvent
 11719 ;; This function uses a non-reentrant model
 11720 ;;
 11721                           
 11722                           	psect	text36
 11723  003CAA                     __ptext36:
 11724                           	opt stack 0
 11725  003CAA                     _vscp_getMDF_URL:
 11726                           	opt stack 26
 11727                           
 11728                           ;incstack = 0
 11729                           ;incstack = 0
 11730                           ;vscp_getMDF_URL@idx stored from wreg
 11731  003CAA  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
 11732                           
 11733                           ; BSR set to: 0
 11734                           ;main.c: 2358: return vscp_deviceURL[ idx ];
 11735  003CAE  5009               	movf	vscp_getMDF_URL@idx,w,c
 11736  003CB0  0F00               	addlw	low _vscp_deviceURL
 11737  003CB2  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
 11738  003CB4  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 11739  003CB8  0E06               	movlw	high __smallconst
 11740  003CBA  6EF7               	movwf	tblptrh,c
 11741  003CBC  0008               	tblrd		*
 11742  003CBE  50F5               	movf	tablat,w,c
 11743                           
 11744                           ; BSR set to: 0
 11745  003CC0  0012               	return	
 11746  003CC2                     __end_of_vscp_getMDF_URL:
 11747                           	opt stack 0
 11748                           tblptru	equ	0xFF8
 11749                           tblptrh	equ	0xFF7
 11750                           tblptrl	equ	0xFF6
 11751                           tablat	equ	0xFF5
 11752                           prodh	equ	0xFF4
 11753                           prodl	equ	0xFF3
 11754                           intcon	equ	0xFF2
 11755                           postinc0	equ	0xFEE
 11756                           wreg	equ	0xFE8
 11757                           indf1	equ	0xFE7
 11758                           fsr1h	equ	0xFE2
 11759                           fsr1l	equ	0xFE1
 11760                           indf2	equ	0xFDF
 11761                           postinc2	equ	0xFDE
 11762                           postdec2	equ	0xFDD
 11763                           plusw2	equ	0xFDB
 11764                           fsr2h	equ	0xFDA
 11765                           fsr2l	equ	0xFD9
 11766                           status	equ	0xFD8
 11767                           
 11768 ;; *************** function _vscp_getGUID *****************
 11769 ;; Defined at:
 11770 ;;		line 2345 in file "../main.c"
 11771 ;; Parameters:    Size  Location     Type
 11772 ;;  idx             1    wreg     unsigned char 
 11773 ;; Auto vars:     Size  Location     Type
 11774 ;;  idx             1    9[COMRAM] unsigned char 
 11775 ;; Return value:  Size  Location     Type
 11776 ;;                  1    wreg      unsigned char 
 11777 ;; Registers used:
 11778 ;;		wreg, status,2, status,0, cstack
 11779 ;; Tracked objects:
 11780 ;;		On entry : 0/0
 11781 ;;		On exit  : 0/0
 11782 ;;		Unchanged: 0/0
 11783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11784 ;;      Params:         0       0       0       0       0       0       0
 11785 ;;      Locals:         1       0       0       0       0       0       0
 11786 ;;      Temps:          0       0       0       0       0       0       0
 11787 ;;      Totals:         1       0       0       0       0       0       0
 11788 ;;Total ram usage:        1 bytes
 11789 ;; Hardware stack levels used:    1
 11790 ;; Hardware stack levels required when called:    3
 11791 ;; This function calls:
 11792 ;;		_Read_b_eep
 11793 ;; This function is called by:
 11794 ;;		_vscp_readStdReg
 11795 ;;		_vscp_writeStdReg
 11796 ;;		_vscp_handleProtocolEvent
 11797 ;; This function uses a non-reentrant model
 11798 ;;
 11799                           
 11800                           	psect	text37
 11801  003D44                     __ptext37:
 11802                           	opt stack 0
 11803  003D44                     _vscp_getGUID:
 11804                           	opt stack 25
 11805                           
 11806                           ; BSR set to: 0
 11807                           ;incstack = 0
 11808                           ;incstack = 0
 11809                           ;vscp_getGUID@idx stored from wreg
 11810  003D44  CFE8 F00A          	movff	wreg,vscp_getGUID@idx
 11811                           
 11812                           ;main.c: 2346: return Read_b_eep(0x13 + idx);
 11813  003D48  0E13               	movlw	19
 11814  003D4A  240A               	addwf	vscp_getGUID@idx,w,c
 11815  003D4C  6E08               	movwf	?_Read_b_eep,c
 11816  003D4E  6A09               	clrf	?_Read_b_eep+1,c
 11817  003D50  0E00               	movlw	0
 11818  003D52  2209               	addwfc	?_Read_b_eep+1,f,c
 11819  003D54  EFB5  F01E         	goto	_Read_b_eep	;wreg free
 11820  003D58                     __end_of_vscp_getGUID:
 11821                           	opt stack 0
 11822                           tblptru	equ	0xFF8
 11823                           tblptrh	equ	0xFF7
 11824                           tblptrl	equ	0xFF6
 11825                           tablat	equ	0xFF5
 11826                           prodh	equ	0xFF4
 11827                           prodl	equ	0xFF3
 11828                           intcon	equ	0xFF2
 11829                           postinc0	equ	0xFEE
 11830                           wreg	equ	0xFE8
 11831                           indf1	equ	0xFE7
 11832                           fsr1h	equ	0xFE2
 11833                           fsr1l	equ	0xFE1
 11834                           indf2	equ	0xFDF
 11835                           postinc2	equ	0xFDE
 11836                           postdec2	equ	0xFDD
 11837                           plusw2	equ	0xFDB
 11838                           fsr2h	equ	0xFDA
 11839                           fsr2l	equ	0xFD9
 11840                           status	equ	0xFD8
 11841                           
 11842 ;; *************** function _vscp_getSubMinorVersion *****************
 11843 ;; Defined at:
 11844 ;;		line 2334 in file "../main.c"
 11845 ;; Parameters:    Size  Location     Type
 11846 ;;		None
 11847 ;; Auto vars:     Size  Location     Type
 11848 ;;		None
 11849 ;; Return value:  Size  Location     Type
 11850 ;;                  1    wreg      unsigned char 
 11851 ;; Registers used:
 11852 ;;		wreg
 11853 ;; Tracked objects:
 11854 ;;		On entry : F/0
 11855 ;;		On exit  : F/0
 11856 ;;		Unchanged: F/0
 11857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11858 ;;      Params:         0       0       0       0       0       0       0
 11859 ;;      Locals:         0       0       0       0       0       0       0
 11860 ;;      Temps:          0       0       0       0       0       0       0
 11861 ;;      Totals:         0       0       0       0       0       0       0
 11862 ;;Total ram usage:        0 bytes
 11863 ;; Hardware stack levels used:    1
 11864 ;; Hardware stack levels required when called:    2
 11865 ;; This function calls:
 11866 ;;		Nothing
 11867 ;; This function is called by:
 11868 ;;		_vscp_readStdReg
 11869 ;; This function uses a non-reentrant model
 11870 ;;
 11871                           
 11872                           	psect	text38
 11873  003DE4                     __ptext38:
 11874                           	opt stack 0
 11875  003DE4                     _vscp_getSubMinorVersion:
 11876                           	opt stack 26
 11877                           
 11878                           ; BSR set to: 0
 11879                           
 11880                           ; BSR set to: 0
 11881                           ;main.c: 2335: return 1;
 11882                           
 11883                           ;incstack = 0
 11884                           ;incstack = 0
 11885  003DE4  0C01               	retlw	1
 11886  003DE6                     __end_of_vscp_getSubMinorVersion:
 11887                           	opt stack 0
 11888                           tblptru	equ	0xFF8
 11889                           tblptrh	equ	0xFF7
 11890                           tblptrl	equ	0xFF6
 11891                           tablat	equ	0xFF5
 11892                           prodh	equ	0xFF4
 11893                           prodl	equ	0xFF3
 11894                           intcon	equ	0xFF2
 11895                           postinc0	equ	0xFEE
 11896                           wreg	equ	0xFE8
 11897                           indf1	equ	0xFE7
 11898                           fsr1h	equ	0xFE2
 11899                           fsr1l	equ	0xFE1
 11900                           indf2	equ	0xFDF
 11901                           postinc2	equ	0xFDE
 11902                           postdec2	equ	0xFDD
 11903                           plusw2	equ	0xFDB
 11904                           fsr2h	equ	0xFDA
 11905                           fsr2l	equ	0xFD9
 11906                           status	equ	0xFD8
 11907                           
 11908 ;; *************** function _vscp_getMinorVersion *****************
 11909 ;; Defined at:
 11910 ;;		line 2325 in file "../main.c"
 11911 ;; Parameters:    Size  Location     Type
 11912 ;;		None
 11913 ;; Auto vars:     Size  Location     Type
 11914 ;;		None
 11915 ;; Return value:  Size  Location     Type
 11916 ;;                  1    wreg      unsigned char 
 11917 ;; Registers used:
 11918 ;;		wreg
 11919 ;; Tracked objects:
 11920 ;;		On entry : F/0
 11921 ;;		On exit  : F/0
 11922 ;;		Unchanged: F/0
 11923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11924 ;;      Params:         0       0       0       0       0       0       0
 11925 ;;      Locals:         0       0       0       0       0       0       0
 11926 ;;      Temps:          0       0       0       0       0       0       0
 11927 ;;      Totals:         0       0       0       0       0       0       0
 11928 ;;Total ram usage:        0 bytes
 11929 ;; Hardware stack levels used:    1
 11930 ;; Hardware stack levels required when called:    2
 11931 ;; This function calls:
 11932 ;;		Nothing
 11933 ;; This function is called by:
 11934 ;;		_vscp_readStdReg
 11935 ;; This function uses a non-reentrant model
 11936 ;;
 11937                           
 11938                           	psect	text39
 11939  003DE6                     __ptext39:
 11940                           	opt stack 0
 11941  003DE6                     _vscp_getMinorVersion:
 11942                           	opt stack 26
 11943                           
 11944                           ; BSR set to: 0
 11945                           
 11946                           ; BSR set to: 0
 11947                           ;main.c: 2326: return 1;
 11948                           
 11949                           ; BSR set to: 0
 11950                           ;incstack = 0
 11951                           ;incstack = 0
 11952  003DE6  0C01               	retlw	1
 11953  003DE8                     __end_of_vscp_getMinorVersion:
 11954                           	opt stack 0
 11955                           tblptru	equ	0xFF8
 11956                           tblptrh	equ	0xFF7
 11957                           tblptrl	equ	0xFF6
 11958                           tablat	equ	0xFF5
 11959                           prodh	equ	0xFF4
 11960                           prodl	equ	0xFF3
 11961                           intcon	equ	0xFF2
 11962                           postinc0	equ	0xFEE
 11963                           wreg	equ	0xFE8
 11964                           indf1	equ	0xFE7
 11965                           fsr1h	equ	0xFE2
 11966                           fsr1l	equ	0xFE1
 11967                           indf2	equ	0xFDF
 11968                           postinc2	equ	0xFDE
 11969                           postdec2	equ	0xFDD
 11970                           plusw2	equ	0xFDB
 11971                           fsr2h	equ	0xFDA
 11972                           fsr2l	equ	0xFD9
 11973                           status	equ	0xFD8
 11974                           
 11975 ;; *************** function _vscp_getMajorVersion *****************
 11976 ;; Defined at:
 11977 ;;		line 2316 in file "../main.c"
 11978 ;; Parameters:    Size  Location     Type
 11979 ;;		None
 11980 ;; Auto vars:     Size  Location     Type
 11981 ;;		None
 11982 ;; Return value:  Size  Location     Type
 11983 ;;                  1    wreg      unsigned char 
 11984 ;; Registers used:
 11985 ;;		wreg
 11986 ;; Tracked objects:
 11987 ;;		On entry : F/0
 11988 ;;		On exit  : F/0
 11989 ;;		Unchanged: F/0
 11990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11991 ;;      Params:         0       0       0       0       0       0       0
 11992 ;;      Locals:         0       0       0       0       0       0       0
 11993 ;;      Temps:          0       0       0       0       0       0       0
 11994 ;;      Totals:         0       0       0       0       0       0       0
 11995 ;;Total ram usage:        0 bytes
 11996 ;; Hardware stack levels used:    1
 11997 ;; Hardware stack levels required when called:    2
 11998 ;; This function calls:
 11999 ;;		Nothing
 12000 ;; This function is called by:
 12001 ;;		_vscp_readStdReg
 12002 ;; This function uses a non-reentrant model
 12003 ;;
 12004                           
 12005                           	psect	text40
 12006  003DE8                     __ptext40:
 12007                           	opt stack 0
 12008  003DE8                     _vscp_getMajorVersion:
 12009                           	opt stack 26
 12010                           
 12011                           ; BSR set to: 0
 12012                           
 12013                           ; BSR set to: 0
 12014                           ;main.c: 2317: return 1;
 12015                           
 12016                           ; BSR set to: 0
 12017                           ;incstack = 0
 12018                           ;incstack = 0
 12019  003DE8  0C01               	retlw	1
 12020  003DEA                     __end_of_vscp_getMajorVersion:
 12021                           	opt stack 0
 12022                           tblptru	equ	0xFF8
 12023                           tblptrh	equ	0xFF7
 12024                           tblptrl	equ	0xFF6
 12025                           tablat	equ	0xFF5
 12026                           prodh	equ	0xFF4
 12027                           prodl	equ	0xFF3
 12028                           intcon	equ	0xFF2
 12029                           postinc0	equ	0xFEE
 12030                           wreg	equ	0xFE8
 12031                           indf1	equ	0xFE7
 12032                           fsr1h	equ	0xFE2
 12033                           fsr1l	equ	0xFE1
 12034                           indf2	equ	0xFDF
 12035                           postinc2	equ	0xFDE
 12036                           postdec2	equ	0xFDD
 12037                           plusw2	equ	0xFDB
 12038                           fsr2h	equ	0xFDA
 12039                           fsr2l	equ	0xFD9
 12040                           status	equ	0xFD8
 12041                           
 12042 ;; *************** function _vscp_newNodeOnline *****************
 12043 ;; Defined at:
 12044 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 12045 ;; Parameters:    Size  Location     Type
 12046 ;;		None
 12047 ;; Auto vars:     Size  Location     Type
 12048 ;;		None
 12049 ;; Return value:  Size  Location     Type
 12050 ;;		None               void
 12051 ;; Registers used:
 12052 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12053 ;; Tracked objects:
 12054 ;;		On entry : F/0
 12055 ;;		On exit  : F/0
 12056 ;;		Unchanged: 0/0
 12057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12058 ;;      Params:         0       0       0       0       0       0       0
 12059 ;;      Locals:         0       0       0       0       0       0       0
 12060 ;;      Temps:          1       0       0       0       0       0       0
 12061 ;;      Totals:         1       0       0       0       0       0       0
 12062 ;;Total ram usage:        1 bytes
 12063 ;; Hardware stack levels used:    1
 12064 ;; Hardware stack levels required when called:    7
 12065 ;; This function calls:
 12066 ;;		_vscp_sendEvent
 12067 ;; This function is called by:
 12068 ;;		_vscp_handleProtocolEvent
 12069 ;; This function uses a non-reentrant model
 12070 ;;
 12071                           
 12072                           	psect	text41
 12073  003A5C                     __ptext41:
 12074                           	opt stack 0
 12075  003A5C                     _vscp_newNodeOnline:
 12076                           	opt stack 22
 12077                           
 12078                           ; BSR set to: 0
 12079                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 12080                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12081                           
 12082                           ; BSR set to: 0
 12083                           ;incstack = 0
 12084                           ;incstack = 0
 12085  003A5C  C096  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
 12086  003A60  0E0F               	movlw	15
 12087  003A62  164C               	andwf	??_vscp_newNodeOnline,f,c
 12088  003A64  044C               	decf	??_vscp_newNodeOnline,w,c
 12089  003A66  E10E               	bnz	l1113
 12090                           
 12091                           ; BSR set to: 0
 12092  003A68  5191               	movf	_vscp_nickname& (0+255),w,b
 12093  003A6A  EE20  F09C         	lfsr	2,_vscp_imsg+6
 12094  003A6E  62DF               	cpfseq	indf2,c
 12095  003A70  D009               	goto	l1113
 12096                           
 12097                           ; BSR set to: 0
 12098                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 12099  003A72  0E80               	movlw	128
 12100  003A74  6FA4               	movwf	_vscp_omsg& (0+255),b
 12101                           
 12102                           ; BSR set to: 0
 12103                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 12104  003A76  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12105                           
 12106                           ; BSR set to: 0
 12107                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 12108  003A78  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12109  003A7A  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12110                           
 12111                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 12112  003A7C  0E03               	movlw	3
 12113  003A7E  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12114                           
 12115                           ; BSR set to: 0
 12116                           ;vscp_firmware.c: 514: vscp_sendEvent();
 12117  003A80  ECA5  F01D         	call	_vscp_sendEvent	;wreg free
 12118  003A84                     l1113:
 12119                           
 12120                           ; BSR set to: 0
 12121  003A84  0012               	return	
 12122  003A86                     __end_of_vscp_newNodeOnline:
 12123                           	opt stack 0
 12124                           tblptru	equ	0xFF8
 12125                           tblptrh	equ	0xFF7
 12126                           tblptrl	equ	0xFF6
 12127                           tablat	equ	0xFF5
 12128                           prodh	equ	0xFF4
 12129                           prodl	equ	0xFF3
 12130                           intcon	equ	0xFF2
 12131                           postinc0	equ	0xFEE
 12132                           wreg	equ	0xFE8
 12133                           indf1	equ	0xFE7
 12134                           fsr1h	equ	0xFE2
 12135                           fsr1l	equ	0xFE1
 12136                           indf2	equ	0xFDF
 12137                           postinc2	equ	0xFDE
 12138                           postdec2	equ	0xFDD
 12139                           plusw2	equ	0xFDB
 12140                           fsr2h	equ	0xFDA
 12141                           fsr2l	equ	0xFD9
 12142                           status	equ	0xFD8
 12143                           
 12144 ;; *************** function _vscp_handleDropNickname *****************
 12145 ;; Defined at:
 12146 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 12147 ;; Parameters:    Size  Location     Type
 12148 ;;		None
 12149 ;; Auto vars:     Size  Location     Type
 12150 ;;  bytes           1   12[COMRAM] unsigned char 
 12151 ;; Return value:  Size  Location     Type
 12152 ;;		None               void
 12153 ;; Registers used:
 12154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12155 ;; Tracked objects:
 12156 ;;		On entry : F/0
 12157 ;;		On exit  : F/0
 12158 ;;		Unchanged: 0/0
 12159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12160 ;;      Params:         0       0       0       0       0       0       0
 12161 ;;      Locals:         1       0       0       0       0       0       0
 12162 ;;      Temps:          0       0       0       0       0       0       0
 12163 ;;      Totals:         1       0       0       0       0       0       0
 12164 ;;Total ram usage:        1 bytes
 12165 ;; Hardware stack levels used:    1
 12166 ;; Hardware stack levels required when called:    5
 12167 ;; This function calls:
 12168 ;;		_vscp_init
 12169 ;;		_vscp_writeNicknamePermanent
 12170 ;; This function is called by:
 12171 ;;		_vscp_handleProtocolEvent
 12172 ;; This function uses a non-reentrant model
 12173 ;;
 12174                           
 12175                           	psect	text42
 12176  0039D0                     __ptext42:
 12177                           	opt stack 0
 12178  0039D0                     _vscp_handleDropNickname:
 12179                           	opt stack 24
 12180                           
 12181                           ; BSR set to: 0
 12182                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 12183                           
 12184                           ; BSR set to: 0
 12185                           ;incstack = 0
 12186                           ;incstack = 0
 12187  0039D0  5196               	movf	_vscp_imsg& (0+255),w,b
 12188  0039D2  0B0F               	andlw	15
 12189  0039D4  6E0D               	movwf	vscp_handleDropNickname@bytes,c
 12190                           
 12191                           ; BSR set to: 0
 12192                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12193  0039D6  500D               	movf	vscp_handleDropNickname@bytes,w,c
 12194  0039D8  E012               	bz	l1109
 12195                           
 12196                           ; BSR set to: 0
 12197  0039DA  5191               	movf	_vscp_nickname& (0+255),w,b
 12198  0039DC  EE20  F09C         	lfsr	2,_vscp_imsg+6
 12199  0039E0  62DF               	cpfseq	indf2,c
 12200  0039E2  D00D               	goto	l1109
 12201                           
 12202                           ; BSR set to: 0
 12203                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 12204  0039E4  040D               	decf	vscp_handleDropNickname@bytes,w,c
 12205  0039E6  E005               	bz	l1108
 12206                           
 12207                           ; BSR set to: 0
 12208  0039E8  0E01               	movlw	1
 12209  0039EA  640D               	cpfsgt	vscp_handleDropNickname@bytes,c
 12210  0039EC  D008               	goto	l1109
 12211                           
 12212                           ; BSR set to: 0
 12213  0039EE  679D               	tstfsz	(_vscp_imsg+7)& (0+255),b
 12214  0039F0  D006               	goto	l1109
 12215  0039F2                     l1108:
 12216                           
 12217                           ; BSR set to: 0
 12218                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 12219  0039F2  6991               	setf	_vscp_nickname& (0+255),b
 12220                           
 12221                           ; BSR set to: 0
 12222                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 12223  0039F4  0EFF               	movlw	255
 12224  0039F6  EC83  F01E         	call	_vscp_writeNicknamePermanent
 12225                           
 12226                           ;vscp_firmware.c: 481: vscp_init();
 12227  0039FA  EC6E  F01C         	call	_vscp_init	;wreg free
 12228  0039FE                     l1109:
 12229                           
 12230                           ; BSR set to: 0
 12231  0039FE  0012               	return	
 12232  003A00                     __end_of_vscp_handleDropNickname:
 12233                           	opt stack 0
 12234                           tblptru	equ	0xFF8
 12235                           tblptrh	equ	0xFF7
 12236                           tblptrl	equ	0xFF6
 12237                           tablat	equ	0xFF5
 12238                           prodh	equ	0xFF4
 12239                           prodl	equ	0xFF3
 12240                           intcon	equ	0xFF2
 12241                           postinc0	equ	0xFEE
 12242                           wreg	equ	0xFE8
 12243                           indf1	equ	0xFE7
 12244                           fsr1h	equ	0xFE2
 12245                           fsr1l	equ	0xFE1
 12246                           indf2	equ	0xFDF
 12247                           postinc2	equ	0xFDE
 12248                           postdec2	equ	0xFDD
 12249                           plusw2	equ	0xFDB
 12250                           fsr2h	equ	0xFDA
 12251                           fsr2l	equ	0xFD9
 12252                           status	equ	0xFD8
 12253                           
 12254 ;; *************** function _vscp_init *****************
 12255 ;; Defined at:
 12256 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 12257 ;; Parameters:    Size  Location     Type
 12258 ;;		None
 12259 ;; Auto vars:     Size  Location     Type
 12260 ;;		None
 12261 ;; Return value:  Size  Location     Type
 12262 ;;		None               void
 12263 ;; Registers used:
 12264 ;;		wreg, status,2, cstack
 12265 ;; Tracked objects:
 12266 ;;		On entry : 0/0
 12267 ;;		On exit  : F/0
 12268 ;;		Unchanged: 0/0
 12269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12270 ;;      Params:         0       0       0       0       0       0       0
 12271 ;;      Locals:         0       0       0       0       0       0       0
 12272 ;;      Temps:          0       0       0       0       0       0       0
 12273 ;;      Totals:         0       0       0       0       0       0       0
 12274 ;;Total ram usage:        0 bytes
 12275 ;; Hardware stack levels used:    1
 12276 ;; Hardware stack levels required when called:    4
 12277 ;; This function calls:
 12278 ;;		_vscp_readNicknamePermanent
 12279 ;; This function is called by:
 12280 ;;		_main
 12281 ;;		_vscp_handleDropNickname
 12282 ;;		_vscp_handleProtocolEvent
 12283 ;; This function uses a non-reentrant model
 12284 ;;
 12285                           
 12286                           	psect	text43
 12287  0038DC                     __ptext43:
 12288                           	opt stack 0
 12289  0038DC                     _vscp_init:
 12290                           	opt stack 24
 12291                           
 12292                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 12293                           
 12294                           ; BSR set to: 0
 12295                           ;incstack = 0
 12296                           ;incstack = 0
 12297  0038DC  0E02               	movlw	2
 12298  0038DE  6E56               	movwf	_vscp_initledfunc,c
 12299                           
 12300                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 12301  0038E0  ECDB  F01E         	call	_vscp_readNicknamePermanent	;wreg free
 12302  0038E4  0100               	movlb	0	; () banked
 12303  0038E6  6F91               	movwf	_vscp_nickname& (0+255),b
 12304                           
 12305                           ; BSR set to: 0
 12306                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 12307  0038E8  6791               	tstfsz	_vscp_nickname& (0+255),b
 12308  0038EA  D001               	goto	l1050
 12309                           
 12310                           ; BSR set to: 0
 12311  0038EC  6991               	setf	_vscp_nickname& (0+255),b
 12312  0038EE                     l1050:
 12313                           
 12314                           ; BSR set to: 0
 12315                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 12316  0038EE  6B96               	clrf	_vscp_imsg& (0+255),b
 12317                           
 12318                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 12319  0038F0  6B97               	clrf	(_vscp_imsg+1)& (0+255),b
 12320                           
 12321                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 12322  0038F2  6B98               	clrf	(_vscp_imsg+2)& (0+255),b
 12323  0038F4  6B99               	clrf	(_vscp_imsg+3)& (0+255),b
 12324                           
 12325                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 12326  0038F6  6B9A               	clrf	(_vscp_imsg+4)& (0+255),b
 12327                           
 12328                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 12329  0038F8  6BA4               	clrf	_vscp_omsg& (0+255),b
 12330                           
 12331                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 12332  0038FA  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12333                           
 12334                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 12335  0038FC  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12336  0038FE  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12337                           
 12338                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 12339  003900  6BA8               	clrf	(_vscp_omsg+4)& (0+255),b
 12340                           
 12341                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 12342  003902  6A55               	clrf	_vscp_alarmstatus,c
 12343                           
 12344                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 12345  003904  6A57               	clrf	_vscp_probe_address,c
 12346                           
 12347                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 12348  003906  6B92               	clrf	_vscp_node_state& (0+255),b
 12349                           
 12350                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 12351  003908  6B93               	clrf	_vscp_node_substate& (0+255),b
 12352                           
 12353                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 12354  00390A  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12355                           
 12356                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 12357  00390C  6A52               	clrf	_vscp_page_select,c
 12358  00390E  6A53               	clrf	_vscp_page_select+1,c
 12359                           
 12360                           ;vscp_firmware.c: 153: vscp_timer = 0;
 12361  003910  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12362  003912  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12363                           
 12364                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 12365  003914  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
 12366  003916  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 12367                           
 12368                           ;vscp_firmware.c: 155: vscp_second = 0;
 12369  003918  6B95               	clrf	_vscp_second& (0+255),b
 12370                           
 12371                           ;vscp_firmware.c: 156: vscp_minute = 0;
 12372  00391A  6B90               	clrf	_vscp_minute& (0+255),b
 12373                           
 12374                           ;vscp_firmware.c: 157: vscp_hour = 0;
 12375  00391C  6B8E               	clrf	_vscp_hour& (0+255),b
 12376                           
 12377                           ; BSR set to: 0
 12378  00391E  0012               	return	
 12379  003920                     __end_of_vscp_init:
 12380                           	opt stack 0
 12381                           tblptru	equ	0xFF8
 12382                           tblptrh	equ	0xFF7
 12383                           tblptrl	equ	0xFF6
 12384                           tablat	equ	0xFF5
 12385                           prodh	equ	0xFF4
 12386                           prodl	equ	0xFF3
 12387                           intcon	equ	0xFF2
 12388                           postinc0	equ	0xFEE
 12389                           wreg	equ	0xFE8
 12390                           indf1	equ	0xFE7
 12391                           fsr1h	equ	0xFE2
 12392                           fsr1l	equ	0xFE1
 12393                           indf2	equ	0xFDF
 12394                           postinc2	equ	0xFDE
 12395                           postdec2	equ	0xFDD
 12396                           plusw2	equ	0xFDB
 12397                           fsr2h	equ	0xFDA
 12398                           fsr2l	equ	0xFD9
 12399                           status	equ	0xFD8
 12400                           
 12401 ;; *************** function _vscp_readNicknamePermanent *****************
 12402 ;; Defined at:
 12403 ;;		line 847 in file "../main.c"
 12404 ;; Parameters:    Size  Location     Type
 12405 ;;		None
 12406 ;; Auto vars:     Size  Location     Type
 12407 ;;		None
 12408 ;; Return value:  Size  Location     Type
 12409 ;;                  1    wreg      unsigned char 
 12410 ;; Registers used:
 12411 ;;		wreg, status,2, cstack
 12412 ;; Tracked objects:
 12413 ;;		On entry : 0/0
 12414 ;;		On exit  : 0/0
 12415 ;;		Unchanged: 0/0
 12416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12417 ;;      Params:         0       0       0       0       0       0       0
 12418 ;;      Locals:         0       0       0       0       0       0       0
 12419 ;;      Temps:          0       0       0       0       0       0       0
 12420 ;;      Totals:         0       0       0       0       0       0       0
 12421 ;;Total ram usage:        0 bytes
 12422 ;; Hardware stack levels used:    1
 12423 ;; Hardware stack levels required when called:    3
 12424 ;; This function calls:
 12425 ;;		_Read_b_eep
 12426 ;; This function is called by:
 12427 ;;		_vscp_init
 12428 ;; This function uses a non-reentrant model
 12429 ;;
 12430                           
 12431                           	psect	text44
 12432  003DB6                     __ptext44:
 12433                           	opt stack 0
 12434  003DB6                     _vscp_readNicknamePermanent:
 12435                           	opt stack 24
 12436                           
 12437                           ;main.c: 848: return Read_b_eep(0x01);
 12438                           
 12439                           ; BSR set to: 0
 12440                           ;incstack = 0
 12441                           ;incstack = 0
 12442  003DB6  6A09               	clrf	?_Read_b_eep+1,c
 12443  003DB8  0E01               	movlw	1
 12444  003DBA  6E08               	movwf	?_Read_b_eep,c
 12445  003DBC  EFB5  F01E         	goto	_Read_b_eep	;wreg free
 12446  003DC0                     __end_of_vscp_readNicknamePermanent:
 12447                           	opt stack 0
 12448                           tblptru	equ	0xFF8
 12449                           tblptrh	equ	0xFF7
 12450                           tblptrl	equ	0xFF6
 12451                           tablat	equ	0xFF5
 12452                           prodh	equ	0xFF4
 12453                           prodl	equ	0xFF3
 12454                           intcon	equ	0xFF2
 12455                           postinc0	equ	0xFEE
 12456                           wreg	equ	0xFE8
 12457                           indf1	equ	0xFE7
 12458                           fsr1h	equ	0xFE2
 12459                           fsr1l	equ	0xFE1
 12460                           indf2	equ	0xFDF
 12461                           postinc2	equ	0xFDE
 12462                           postdec2	equ	0xFDD
 12463                           plusw2	equ	0xFDB
 12464                           fsr2h	equ	0xFDA
 12465                           fsr2l	equ	0xFD9
 12466                           status	equ	0xFD8
 12467                           
 12468 ;; *************** function _vscp_handleSetNickname *****************
 12469 ;; Defined at:
 12470 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 12471 ;; Parameters:    Size  Location     Type
 12472 ;;		None
 12473 ;; Auto vars:     Size  Location     Type
 12474 ;;		None
 12475 ;; Return value:  Size  Location     Type
 12476 ;;		None               void
 12477 ;; Registers used:
 12478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12479 ;; Tracked objects:
 12480 ;;		On entry : F/0
 12481 ;;		On exit  : 0/0
 12482 ;;		Unchanged: 0/0
 12483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12484 ;;      Params:         0       0       0       0       0       0       0
 12485 ;;      Locals:         0       0       0       0       0       0       0
 12486 ;;      Temps:          0       0       0       0       0       0       0
 12487 ;;      Totals:         0       0       0       0       0       0       0
 12488 ;;Total ram usage:        0 bytes
 12489 ;; Hardware stack levels used:    1
 12490 ;; Hardware stack levels required when called:    4
 12491 ;; This function calls:
 12492 ;;		_vscp_writeNicknamePermanent
 12493 ;;		_vscp_setSegmentCRC
 12494 ;; This function is called by:
 12495 ;;		_vscp_handleProtocolEvent
 12496 ;; This function uses a non-reentrant model
 12497 ;;
 12498                           
 12499                           	psect	text45
 12500  003B70                     __ptext45:
 12501                           	opt stack 0
 12502  003B70                     _vscp_handleSetNickname:
 12503                           	opt stack 25
 12504                           
 12505                           ; BSR set to: 0
 12506                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 12507                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12508                           
 12509                           ;incstack = 0
 12510                           ;incstack = 0
 12511  003B70  5196               	movf	_vscp_imsg& (0+255),w,b
 12512  003B72  0B0F               	andlw	15
 12513  003B74  0A02               	xorlw	2
 12514  003B76  E10D               	bnz	l1102
 12515                           
 12516                           ; BSR set to: 0
 12517  003B78  5191               	movf	_vscp_nickname& (0+255),w,b
 12518  003B7A  EE20  F09C         	lfsr	2,_vscp_imsg+6
 12519  003B7E  62DF               	cpfseq	indf2,c
 12520  003B80  D008               	goto	l1102
 12521                           
 12522                           ; BSR set to: 0
 12523                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 12524  003B82  C09D  F091         	movff	_vscp_imsg+7,_vscp_nickname
 12525                           
 12526                           ; BSR set to: 0
 12527                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 12528  003B86  5191               	movf	_vscp_nickname& (0+255),w,b
 12529  003B88  EC83  F01E         	call	_vscp_writeNicknamePermanent
 12530                           
 12531                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 12532  003B8C  0E40               	movlw	64
 12533  003B8E  EC78  F01E         	call	_vscp_setSegmentCRC
 12534  003B92                     l1102:
 12535  003B92  0012               	return	
 12536  003B94                     __end_of_vscp_handleSetNickname:
 12537                           	opt stack 0
 12538                           tblptru	equ	0xFF8
 12539                           tblptrh	equ	0xFF7
 12540                           tblptrl	equ	0xFF6
 12541                           tablat	equ	0xFF5
 12542                           prodh	equ	0xFF4
 12543                           prodl	equ	0xFF3
 12544                           intcon	equ	0xFF2
 12545                           postinc0	equ	0xFEE
 12546                           wreg	equ	0xFE8
 12547                           indf1	equ	0xFE7
 12548                           fsr1h	equ	0xFE2
 12549                           fsr1l	equ	0xFE1
 12550                           indf2	equ	0xFDF
 12551                           postinc2	equ	0xFDE
 12552                           postdec2	equ	0xFDD
 12553                           plusw2	equ	0xFDB
 12554                           fsr2h	equ	0xFDA
 12555                           fsr2l	equ	0xFD9
 12556                           status	equ	0xFD8
 12557                           
 12558 ;; *************** function _vscp_handleHeartbeat *****************
 12559 ;; Defined at:
 12560 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 12561 ;; Parameters:    Size  Location     Type
 12562 ;;		None
 12563 ;; Auto vars:     Size  Location     Type
 12564 ;;		None
 12565 ;; Return value:  Size  Location     Type
 12566 ;;		None               void
 12567 ;; Registers used:
 12568 ;;		wreg, status,2, status,0, cstack
 12569 ;; Tracked objects:
 12570 ;;		On entry : F/0
 12571 ;;		On exit  : 0/0
 12572 ;;		Unchanged: 0/0
 12573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12574 ;;      Params:         0       0       0       0       0       0       0
 12575 ;;      Locals:         0       0       0       0       0       0       0
 12576 ;;      Temps:          0       0       0       0       0       0       0
 12577 ;;      Totals:         0       0       0       0       0       0       0
 12578 ;;Total ram usage:        0 bytes
 12579 ;; Hardware stack levels used:    1
 12580 ;; Hardware stack levels required when called:    4
 12581 ;; This function calls:
 12582 ;;		_vscp_writeNicknamePermanent
 12583 ;;		_vscp_getSegmentCRC
 12584 ;;		_vscp_setSegmentCRC
 12585 ;; This function is called by:
 12586 ;;		_vscp_handleProtocolEvent
 12587 ;; This function uses a non-reentrant model
 12588 ;;
 12589                           
 12590                           	psect	text46
 12591  003920                     __ptext46:
 12592                           	opt stack 0
 12593  003920                     _vscp_handleHeartbeat:
 12594                           	opt stack 25
 12595                           
 12596                           ; BSR set to: 0
 12597                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 12598                           
 12599                           ;incstack = 0
 12600                           ;incstack = 0
 12601  003920  ECE0  F01E         	call	_vscp_getSegmentCRC	;wreg free
 12602  003924  0900               	iorlw	0
 12603  003926  E116               	bnz	l9533
 12604                           
 12605                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 12606                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 12607  003928  0100               	movlb	0	; () banked
 12608  00392A  5196               	movf	_vscp_imsg& (0+255),w,b
 12609  00392C  0B0F               	andlw	15
 12610  00392E  0A05               	xorlw	5
 12611  003930  E115               	bnz	l1098
 12612                           
 12613                           ; BSR set to: 0
 12614  003932  ECE0  F01E         	call	_vscp_getSegmentCRC	;wreg free
 12615  003936  0100               	movlb	0	; () banked
 12616  003938  199C               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 12617  00393A  E010               	bz	l1098
 12618                           
 12619                           ; BSR set to: 0
 12620                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12621  00393C  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 12622  00393E  EC78  F01E         	call	_vscp_setSegmentCRC
 12623                           
 12624                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 12625  003942  0100               	movlb	0	; () banked
 12626  003944  6991               	setf	_vscp_nickname& (0+255),b
 12627                           
 12628                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 12629  003946  0EFF               	movlw	255
 12630  003948  EC83  F01E         	call	_vscp_writeNicknamePermanent
 12631                           
 12632                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 12633  00394C  0E01               	movlw	1
 12634  00394E  0100               	movlb	0	; () banked
 12635  003950  6F92               	movwf	_vscp_node_state& (0+255),b
 12636  003952  D004               	goto	l1098
 12637  003954                     l9533:
 12638                           
 12639                           ;vscp_firmware.c: 411: else {
 12640                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12641  003954  0100               	movlb	0	; () banked
 12642  003956  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 12643  003958  EC78  F01E         	call	_vscp_setSegmentCRC
 12644  00395C                     l1098:
 12645  00395C  0012               	return	
 12646  00395E                     __end_of_vscp_handleHeartbeat:
 12647                           	opt stack 0
 12648                           tblptru	equ	0xFF8
 12649                           tblptrh	equ	0xFF7
 12650                           tblptrl	equ	0xFF6
 12651                           tablat	equ	0xFF5
 12652                           prodh	equ	0xFF4
 12653                           prodl	equ	0xFF3
 12654                           intcon	equ	0xFF2
 12655                           postinc0	equ	0xFEE
 12656                           wreg	equ	0xFE8
 12657                           indf1	equ	0xFE7
 12658                           fsr1h	equ	0xFE2
 12659                           fsr1l	equ	0xFE1
 12660                           indf2	equ	0xFDF
 12661                           postinc2	equ	0xFDE
 12662                           postdec2	equ	0xFDD
 12663                           plusw2	equ	0xFDB
 12664                           fsr2h	equ	0xFDA
 12665                           fsr2l	equ	0xFD9
 12666                           status	equ	0xFD8
 12667                           
 12668 ;; *************** function _vscp_getMatrixInfo *****************
 12669 ;; Defined at:
 12670 ;;		line 2526 in file "../main.c"
 12671 ;; Parameters:    Size  Location     Type
 12672 ;;  pData           1    wreg     PTR unsigned char 
 12673 ;;		 -> vscp_omsg(13), 
 12674 ;; Auto vars:     Size  Location     Type
 12675 ;;  pData           1    0[COMRAM] PTR unsigned char 
 12676 ;;		 -> vscp_omsg(13), 
 12677 ;;  i               1    7[COMRAM] unsigned char 
 12678 ;; Return value:  Size  Location     Type
 12679 ;;		None               void
 12680 ;; Registers used:
 12681 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12682 ;; Tracked objects:
 12683 ;;		On entry : F/0
 12684 ;;		On exit  : F/0
 12685 ;;		Unchanged: 0/0
 12686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12687 ;;      Params:         0       0       0       0       0       0       0
 12688 ;;      Locals:         1       0       0       0       0       0       0
 12689 ;;      Temps:          0       0       0       0       0       0       0
 12690 ;;      Totals:         1       0       0       0       0       0       0
 12691 ;;Total ram usage:        1 bytes
 12692 ;; Hardware stack levels used:    1
 12693 ;; Hardware stack levels required when called:    2
 12694 ;; This function calls:
 12695 ;;		Nothing
 12696 ;; This function is called by:
 12697 ;;		_vscp_handleProtocolEvent
 12698 ;; This function uses a non-reentrant model
 12699 ;;
 12700                           
 12701                           	psect	text47
 12702  003BFC                     __ptext47:
 12703                           	opt stack 0
 12704  003BFC                     _vscp_getMatrixInfo:
 12705                           	opt stack 27
 12706                           
 12707                           ; BSR set to: 0
 12708                           ;main.c: 2527: uint8_t i;
 12709                           ;main.c: 2529: vscp_omsg.data[ 0 ] = 7;
 12710                           
 12711                           ;incstack = 0
 12712                           ;incstack = 0
 12713  003BFC  0E07               	movlw	7
 12714  003BFE  6FA9               	movwf	(_vscp_omsg+5)& (0+255),b
 12715                           
 12716                           ;main.c: 2530: vscp_omsg.data[ 1 ] = 72;
 12717  003C00  0E48               	movlw	72
 12718  003C02  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
 12719                           
 12720                           ;main.c: 2533: for ( i = 2; i < 8; i++ ) {
 12721  003C04  0E02               	movlw	2
 12722  003C06  6E08               	movwf	vscp_getMatrixInfo@i,c
 12723  003C08                     l6903:
 12724                           
 12725                           ; BSR set to: 0
 12726                           ;main.c: 2534: vscp_omsg.data[ i ] = 0;
 12727  003C08  5008               	movf	vscp_getMatrixInfo@i,w,c
 12728  003C0A  0FA9               	addlw	low (_vscp_omsg+5)
 12729  003C0C  6ED9               	movwf	fsr2l,c
 12730  003C0E  6ADA               	clrf	fsr2h,c
 12731  003C10  6ADF               	clrf	indf2,c
 12732                           
 12733                           ; BSR set to: 0
 12734  003C12  2A08               	incf	vscp_getMatrixInfo@i,f,c
 12735                           
 12736                           ; BSR set to: 0
 12737  003C14  0E07               	movlw	7
 12738  003C16  6408               	cpfsgt	vscp_getMatrixInfo@i,c
 12739  003C18  D7F7               	goto	l6903
 12740                           
 12741                           ; BSR set to: 0
 12742  003C1A  0C07               	retlw	7
 12743  003C1C                     __end_of_vscp_getMatrixInfo:
 12744                           	opt stack 0
 12745                           tblptru	equ	0xFF8
 12746                           tblptrh	equ	0xFF7
 12747                           tblptrl	equ	0xFF6
 12748                           tablat	equ	0xFF5
 12749                           prodh	equ	0xFF4
 12750                           prodl	equ	0xFF3
 12751                           intcon	equ	0xFF2
 12752                           postinc0	equ	0xFEE
 12753                           wreg	equ	0xFE8
 12754                           indf1	equ	0xFE7
 12755                           fsr1h	equ	0xFE2
 12756                           fsr1l	equ	0xFE1
 12757                           indf2	equ	0xFDF
 12758                           postinc2	equ	0xFDE
 12759                           postdec2	equ	0xFDD
 12760                           plusw2	equ	0xFDB
 12761                           fsr2h	equ	0xFDA
 12762                           fsr2l	equ	0xFD9
 12763                           status	equ	0xFD8
 12764                           
 12765 ;; *************** function _vscp_goBootloaderMode *****************
 12766 ;; Defined at:
 12767 ;;		line 2510 in file "../main.c"
 12768 ;; Parameters:    Size  Location     Type
 12769 ;;  algorithm       1    wreg     unsigned char 
 12770 ;; Auto vars:     Size  Location     Type
 12771 ;;  algorithm       1   11[COMRAM] unsigned char 
 12772 ;; Return value:  Size  Location     Type
 12773 ;;		None               void
 12774 ;; Registers used:
 12775 ;;		wreg, status,2, status,0, cstack
 12776 ;; Tracked objects:
 12777 ;;		On entry : F/0
 12778 ;;		On exit  : 0/0
 12779 ;;		Unchanged: 0/0
 12780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12781 ;;      Params:         0       0       0       0       0       0       0
 12782 ;;      Locals:         1       0       0       0       0       0       0
 12783 ;;      Temps:          0       0       0       0       0       0       0
 12784 ;;      Totals:         1       0       0       0       0       0       0
 12785 ;;Total ram usage:        1 bytes
 12786 ;; Hardware stack levels used:    1
 12787 ;; Hardware stack levels required when called:    3
 12788 ;; This function calls:
 12789 ;;		_Busy_eep
 12790 ;;		_Write_b_eep
 12791 ;; This function is called by:
 12792 ;;		_vscp_handleProtocolEvent
 12793 ;; This function uses a non-reentrant model
 12794 ;;
 12795                           
 12796                           	psect	text48
 12797  003C74                     __ptext48:
 12798                           	opt stack 0
 12799  003C74                     _vscp_goBootloaderMode:
 12800                           	opt stack 26
 12801                           
 12802                           ; BSR set to: 0
 12803                           ;incstack = 0
 12804                           ;incstack = 0
 12805                           ;vscp_goBootloaderMode@algorithm stored from wreg
 12806  003C74  CFE8 F00C          	movff	wreg,vscp_goBootloaderMode@algorithm
 12807                           
 12808                           ; BSR set to: 0
 12809                           ;main.c: 2511: if ( 0x01 != algorithm ) return;
 12810  003C78  040C               	decf	vscp_goBootloaderMode@algorithm,w,c
 12811  003C7A  E109               	bnz	l640
 12812                           
 12813                           ; BSR set to: 0
 12814                           ;main.c: 2515: (Busy_eep(), Write_b_eep(0x00,0xff));
 12815  003C7C  ECE9  F01E         	call	_Busy_eep	;wreg free
 12816  003C80  6A09               	clrf	?_Write_b_eep+1,c
 12817  003C82  6A08               	clrf	?_Write_b_eep,c
 12818  003C84  0EFF               	movlw	255
 12819  003C86  680A               	setf	?_Write_b_eep+2,c
 12820  003C88  ECCE  F01C         	call	_Write_b_eep	;wreg free
 12821  003C8C  00FF               	reset		;# 
 12822  003C8E                     l640:
 12823  003C8E  0012               	return	
 12824  003C90                     __end_of_vscp_goBootloaderMode:
 12825                           	opt stack 0
 12826                           tblptru	equ	0xFF8
 12827                           tblptrh	equ	0xFF7
 12828                           tblptrl	equ	0xFF6
 12829                           tablat	equ	0xFF5
 12830                           prodh	equ	0xFF4
 12831                           prodl	equ	0xFF3
 12832                           intcon	equ	0xFF2
 12833                           postinc0	equ	0xFEE
 12834                           wreg	equ	0xFE8
 12835                           indf1	equ	0xFE7
 12836                           fsr1h	equ	0xFE2
 12837                           fsr1l	equ	0xFE1
 12838                           indf2	equ	0xFDF
 12839                           postinc2	equ	0xFDE
 12840                           postdec2	equ	0xFDD
 12841                           plusw2	equ	0xFDB
 12842                           fsr2h	equ	0xFDA
 12843                           fsr2l	equ	0xFD9
 12844                           status	equ	0xFD8
 12845                           
 12846 ;; *************** function _vscp_handleProbeState *****************
 12847 ;; Defined at:
 12848 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 12849 ;; Parameters:    Size  Location     Type
 12850 ;;		None
 12851 ;; Auto vars:     Size  Location     Type
 12852 ;;		None
 12853 ;; Return value:  Size  Location     Type
 12854 ;;		None               void
 12855 ;; Registers used:
 12856 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12857 ;; Tracked objects:
 12858 ;;		On entry : 0/0
 12859 ;;		On exit  : F/0
 12860 ;;		Unchanged: 0/0
 12861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12862 ;;      Params:         0       0       0       0       0       0       0
 12863 ;;      Locals:         0       0       0       0       0       0       0
 12864 ;;      Temps:          0       0       0       0       0       0       0
 12865 ;;      Totals:         0       0       0       0       0       0       0
 12866 ;;Total ram usage:        0 bytes
 12867 ;; Hardware stack levels used:    1
 12868 ;; Hardware stack levels required when called:    8
 12869 ;; This function calls:
 12870 ;;		_vscp_goActiveState
 12871 ;;		_vscp_writeNicknamePermanent
 12872 ;;		_vscp_sendEvent
 12873 ;;		_vscp_setSegmentCRC
 12874 ;; This function is called by:
 12875 ;;		_main
 12876 ;; This function uses a non-reentrant model
 12877 ;;
 12878                           
 12879                           	psect	text49
 12880  0033DA                     __ptext49:
 12881                           	opt stack 0
 12882  0033DA                     _vscp_handleProbeState:
 12883                           	opt stack 22
 12884                           
 12885                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 12886                           
 12887                           ;incstack = 0
 12888                           ;incstack = 0
 12889  0033DA  D053               	goto	l7843
 12890  0033DC                     l7773:
 12891                           
 12892                           ; BSR set to: 0
 12893                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 12894  0033DC  2857               	incf	_vscp_probe_address,w,c
 12895  0033DE  E010               	bz	l7789
 12896                           
 12897                           ; BSR set to: 0
 12898                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 12899  0033E0  0E81               	movlw	129
 12900  0033E2  6FA4               	movwf	_vscp_omsg& (0+255),b
 12901                           
 12902                           ; BSR set to: 0
 12903                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 12904  0033E4  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12905                           
 12906                           ; BSR set to: 0
 12907                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 12908  0033E6  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12909  0033E8  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12910                           
 12911                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 12912  0033EA  0E02               	movlw	2
 12913  0033EC  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12914                           
 12915                           ; BSR set to: 0
 12916                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 12917  0033EE  C057  F0A9         	movff	_vscp_probe_address,_vscp_omsg+5
 12918                           
 12919                           ; BSR set to: 0
 12920                           ;vscp_firmware.c: 216: vscp_sendEvent();
 12921  0033F2  ECA5  F01D         	call	_vscp_sendEvent	;wreg free
 12922                           
 12923                           ; BSR set to: 0
 12924                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 12925  0033F6  0E01               	movlw	1
 12926  0033F8  6F93               	movwf	_vscp_node_substate& (0+255),b
 12927  0033FA                     l7787:
 12928                           
 12929                           ; BSR set to: 0
 12930                           ;vscp_firmware.c: 219: vscp_timer = 0;
 12931  0033FA  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12932  0033FC  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12933                           
 12934                           ;vscp_firmware.c: 221: }
 12935  0033FE  D048               	goto	l1065
 12936  003400                     l7789:
 12937                           
 12938                           ; BSR set to: 0
 12939                           ;vscp_firmware.c: 222: else {
 12940                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 12941  003400  0E04               	movlw	4
 12942  003402  6F92               	movwf	_vscp_node_state& (0+255),b
 12943                           
 12944                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 12945  003404  0E81               	movlw	129
 12946  003406  6FA4               	movwf	_vscp_omsg& (0+255),b
 12947                           
 12948                           ; BSR set to: 0
 12949                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 12950  003408  69A9               	setf	(_vscp_omsg+5)& (0+255),b
 12951                           
 12952                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 12953  00340A  0E07               	movlw	7
 12954  00340C  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
 12955                           
 12956                           ; BSR set to: 0
 12957                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 12958  00340E  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12959  003410  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12960                           
 12961                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 12962  003412  0E03               	movlw	3
 12963  003414  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12964                           
 12965                           ; BSR set to: 0
 12966                           ;vscp_firmware.c: 235: vscp_sendEvent();
 12967  003416  ECA5  F01D         	call	_vscp_sendEvent	;wreg free
 12968  00341A  D03A               	goto	l1065
 12969  00341C                     l1066:
 12970                           
 12971                           ; BSR set to: 0
 12972                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 12973  00341C  AF96               	btfss	_vscp_imsg& (0+255),7,b
 12974  00341E  D00F               	goto	l7813
 12975                           
 12976                           ; BSR set to: 0
 12977                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 12978                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 12979  003420  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
 12980  003422  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 12981  003424  E135               	bnz	l1065
 12982                           
 12983                           ; BSR set to: 0
 12984  003426  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
 12985  003428  0A03               	xorlw	3
 12986  00342A  E132               	bnz	l1065
 12987                           
 12988                           ; BSR set to: 0
 12989                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 12990  00342C  6657               	tstfsz	_vscp_probe_address,c
 12991  00342E  D003               	goto	l7807
 12992                           
 12993                           ; BSR set to: 0
 12994                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 12995  003430  0E02               	movlw	2
 12996  003432  6F92               	movwf	_vscp_node_state& (0+255),b
 12997  003434  D7E2               	goto	l7787
 12998  003436                     l7807:
 12999                           
 13000                           ; BSR set to: 0
 13001                           ;vscp_firmware.c: 257: else {
 13002                           ;vscp_firmware.c: 260: vscp_probe_address++;
 13003  003436  2A57               	incf	_vscp_probe_address,f,c
 13004                           
 13005                           ; BSR set to: 0
 13006                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 13007  003438  6B93               	clrf	_vscp_node_substate& (0+255),b
 13008  00343A                     l7811:
 13009                           
 13010                           ; BSR set to: 0
 13011                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 13012  00343A  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 13013  00343C  D029               	goto	l1065
 13014  00343E                     l7813:
 13015                           
 13016                           ; BSR set to: 0
 13017                           ;vscp_firmware.c: 267: else {
 13018                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 13019  00343E  0EE9               	movlw	233
 13020  003440  5D86               	subwf	_vscp_timer& (0+255),w,b	;volatile
 13021  003442  0E03               	movlw	3
 13022  003444  5987               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 13023  003446  E324               	bnc	l1065
 13024                           
 13025                           ; BSR set to: 0
 13026                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 13027  003448  2B94               	incf	_vscp_probe_cnt& (0+255),f,b
 13028                           
 13029                           ; BSR set to: 0
 13030                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 13031  00344A  0E02               	movlw	2
 13032  00344C  6594               	cpfsgt	_vscp_probe_cnt& (0+255),b
 13033  00344E  D017               	goto	l1073
 13034                           
 13035                           ; BSR set to: 0
 13036                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 13037  003450  6657               	tstfsz	_vscp_probe_address,c
 13038  003452  D005               	goto	l1074
 13039                           
 13040                           ; BSR set to: 0
 13041                           ;vscp_firmware.c: 279: vscp_probe_address++;
 13042  003454  2A57               	incf	_vscp_probe_address,f,c
 13043                           
 13044                           ; BSR set to: 0
 13045                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 13046  003456  6B93               	clrf	_vscp_node_substate& (0+255),b
 13047                           
 13048                           ; BSR set to: 0
 13049                           ;vscp_firmware.c: 281: vscp_timer = 0;
 13050  003458  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 13051  00345A  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 13052  00345C  D7EE               	goto	l7811
 13053  00345E                     l1074:
 13054                           
 13055                           ; BSR set to: 0
 13056                           ;vscp_firmware.c: 285: else {
 13057                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 13058  00345E  C057  F091         	movff	_vscp_probe_address,_vscp_nickname
 13059                           
 13060                           ; BSR set to: 0
 13061                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 13062  003462  0E03               	movlw	3
 13063  003464  6F92               	movwf	_vscp_node_state& (0+255),b
 13064                           
 13065                           ; BSR set to: 0
 13066                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 13067  003466  6B93               	clrf	_vscp_node_substate& (0+255),b
 13068                           
 13069                           ; BSR set to: 0
 13070                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 13071  003468  5191               	movf	_vscp_nickname& (0+255),w,b
 13072  00346A  EC83  F01E         	call	_vscp_writeNicknamePermanent
 13073                           
 13074                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 13075  00346E  0E40               	movlw	64
 13076  003470  EC78  F01E         	call	_vscp_setSegmentCRC
 13077                           
 13078                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 13079  003474  0100               	movlb	0	; () banked
 13080  003476  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 13081                           
 13082                           ; BSR set to: 0
 13083                           ;vscp_firmware.c: 296: vscp_goActiveState();
 13084  003478  EC0E  F01E         	call	_vscp_goActiveState	;wreg free
 13085  00347C  D009               	goto	l1065
 13086  00347E                     l1073:
 13087                           
 13088                           ; BSR set to: 0
 13089                           ;vscp_firmware.c: 300: else {
 13090                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 13091  00347E  6B93               	clrf	_vscp_node_substate& (0+255),b
 13092  003480  D007               	goto	l1065
 13093  003482                     l7843:
 13094  003482  0100               	movlb	0	; () banked
 13095  003484  5193               	movf	_vscp_node_substate& (0+255),w,b
 13096                           
 13097                           ; Switch size 1, requested type "space"
 13098                           ; Number of cases is 3, Range of values is 0 to 2
 13099                           ; switch strategies available:
 13100                           ; Name         Instructions Cycles
 13101                           ; simple_byte           10     6 (average)
 13102                           ;	Chosen strategy is simple_byte
 13103  003486  E0AA               	bz	l7773
 13104  003488  0A01               	xorlw	1	; case 1
 13105  00348A  E0C8               	bz	l1066
 13106  00348C  0A03               	xorlw	3	; case 2
 13107  00348E  E1F7               	bnz	l1073
 13108  003490                     l1065:
 13109                           
 13110                           ; BSR set to: 0
 13111                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 13112  003490  6B96               	clrf	_vscp_imsg& (0+255),b
 13113                           
 13114                           ; BSR set to: 0
 13115  003492  0012               	return	
 13116  003494                     __end_of_vscp_handleProbeState:
 13117                           	opt stack 0
 13118                           tblptru	equ	0xFF8
 13119                           tblptrh	equ	0xFF7
 13120                           tblptrl	equ	0xFF6
 13121                           tablat	equ	0xFF5
 13122                           prodh	equ	0xFF4
 13123                           prodl	equ	0xFF3
 13124                           intcon	equ	0xFF2
 13125                           postinc0	equ	0xFEE
 13126                           wreg	equ	0xFE8
 13127                           indf1	equ	0xFE7
 13128                           fsr1h	equ	0xFE2
 13129                           fsr1l	equ	0xFE1
 13130                           indf2	equ	0xFDF
 13131                           postinc2	equ	0xFDE
 13132                           postdec2	equ	0xFDD
 13133                           plusw2	equ	0xFDB
 13134                           fsr2h	equ	0xFDA
 13135                           fsr2l	equ	0xFD9
 13136                           status	equ	0xFD8
 13137                           
 13138 ;; *************** function _vscp_goActiveState *****************
 13139 ;; Defined at:
 13140 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 13141 ;; Parameters:    Size  Location     Type
 13142 ;;		None
 13143 ;; Auto vars:     Size  Location     Type
 13144 ;;		None
 13145 ;; Return value:  Size  Location     Type
 13146 ;;		None               void
 13147 ;; Registers used:
 13148 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13149 ;; Tracked objects:
 13150 ;;		On entry : 0/0
 13151 ;;		On exit  : F/0
 13152 ;;		Unchanged: 0/0
 13153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13154 ;;      Params:         0       0       0       0       0       0       0
 13155 ;;      Locals:         0       0       0       0       0       0       0
 13156 ;;      Temps:          0       0       0       0       0       0       0
 13157 ;;      Totals:         0       0       0       0       0       0       0
 13158 ;;Total ram usage:        0 bytes
 13159 ;; Hardware stack levels used:    1
 13160 ;; Hardware stack levels required when called:    7
 13161 ;; This function calls:
 13162 ;;		_vscp_sendEvent
 13163 ;; This function is called by:
 13164 ;;		_main
 13165 ;;		_vscp_handleProbeState
 13166 ;; This function uses a non-reentrant model
 13167 ;;
 13168                           
 13169                           	psect	text50
 13170  003C1C                     __ptext50:
 13171                           	opt stack 0
 13172  003C1C                     _vscp_goActiveState:
 13173                           	opt stack 22
 13174                           
 13175                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 13176                           
 13177                           ; BSR set to: 0
 13178                           ;incstack = 0
 13179                           ;incstack = 0
 13180  003C1C  0E81               	movlw	129
 13181  003C1E  0100               	movlb	0	; () banked
 13182  003C20  6FA4               	movwf	_vscp_omsg& (0+255),b
 13183                           
 13184                           ; BSR set to: 0
 13185                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 13186  003C22  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 13187                           
 13188                           ; BSR set to: 0
 13189                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 13190  003C24  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 13191  003C26  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 13192                           
 13193                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 13194  003C28  0E02               	movlw	2
 13195  003C2A  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 13196                           
 13197                           ; BSR set to: 0
 13198                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 13199  003C2C  C091  F0A9         	movff	_vscp_nickname,_vscp_omsg+5
 13200                           
 13201                           ; BSR set to: 0
 13202                           ;vscp_firmware.c: 366: vscp_sendEvent();
 13203  003C30  ECA5  F01D         	call	_vscp_sendEvent	;wreg free
 13204                           
 13205                           ; BSR set to: 0
 13206                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 13207  003C34  0E01               	movlw	1
 13208  003C36  6E56               	movwf	_vscp_initledfunc,c
 13209                           
 13210                           ; BSR set to: 0
 13211  003C38  0C01               	retlw	1
 13212  003C3A                     __end_of_vscp_goActiveState:
 13213                           	opt stack 0
 13214                           tblptru	equ	0xFF8
 13215                           tblptrh	equ	0xFF7
 13216                           tblptrl	equ	0xFF6
 13217                           tablat	equ	0xFF5
 13218                           prodh	equ	0xFF4
 13219                           prodl	equ	0xFF3
 13220                           intcon	equ	0xFF2
 13221                           postinc0	equ	0xFEE
 13222                           wreg	equ	0xFE8
 13223                           indf1	equ	0xFE7
 13224                           fsr1h	equ	0xFE2
 13225                           fsr1l	equ	0xFE1
 13226                           indf2	equ	0xFDF
 13227                           postinc2	equ	0xFDE
 13228                           postdec2	equ	0xFDD
 13229                           plusw2	equ	0xFDB
 13230                           fsr2h	equ	0xFDA
 13231                           fsr2l	equ	0xFD9
 13232                           status	equ	0xFD8
 13233                           
 13234 ;; *************** function _vscp_sendEvent *****************
 13235 ;; Defined at:
 13236 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 13237 ;; Parameters:    Size  Location     Type
 13238 ;;		None
 13239 ;; Auto vars:     Size  Location     Type
 13240 ;;  rv              1    0        unsigned char 
 13241 ;; Return value:  Size  Location     Type
 13242 ;;                  1    wreg      unsigned char 
 13243 ;; Registers used:
 13244 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13245 ;; Tracked objects:
 13246 ;;		On entry : F/0
 13247 ;;		On exit  : F/0
 13248 ;;		Unchanged: 0/0
 13249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13250 ;;      Params:         0       0       0       0       0       0       0
 13251 ;;      Locals:         1       0       0       0       0       0       0
 13252 ;;      Temps:          0       0       0       0       0       0       0
 13253 ;;      Totals:         1       0       0       0       0       0       0
 13254 ;;Total ram usage:        1 bytes
 13255 ;; Hardware stack levels used:    1
 13256 ;; Hardware stack levels required when called:    6
 13257 ;; This function calls:
 13258 ;;		_sendVSCPFrame
 13259 ;; This function is called by:
 13260 ;;		_vscp_handleProbeState
 13261 ;;		_vscp_goActiveState
 13262 ;;		_vscp_sendHeartBeat
 13263 ;;		_vscp_newNodeOnline
 13264 ;;		_vscp_handleProtocolEvent
 13265 ;; This function uses a non-reentrant model
 13266 ;;
 13267                           
 13268                           	psect	text51
 13269  003B4A                     __ptext51:
 13270                           	opt stack 0
 13271  003B4A                     _vscp_sendEvent:
 13272                           	opt stack 22
 13273                           
 13274                           ; BSR set to: 0
 13275                           
 13276                           ; BSR set to: 0
 13277                           ;incstack = 0
 13278                           ;incstack = 0
 13279  003B4A  C0A6  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
 13280  003B4E  C0A7  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 13281  003B52  C0A8  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 13282  003B56  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 13283  003B5A  C0A5  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 13284  003B5E  51A4               	movf	_vscp_omsg& (0+255),w,b
 13285  003B60  0B0F               	andlw	15
 13286  003B62  6E44               	movwf	?_sendVSCPFrame+5,c
 13287  003B64  0E00               	movlw	high (_vscp_omsg+5)
 13288  003B66  6E46               	movwf	?_sendVSCPFrame+7,c
 13289  003B68  0EA9               	movlw	low (_vscp_omsg+5)
 13290  003B6A  6E45               	movwf	?_sendVSCPFrame+6,c
 13291  003B6C  EF4A  F01A         	goto	_sendVSCPFrame	;wreg free
 13292  003B70                     __end_of_vscp_sendEvent:
 13293                           	opt stack 0
 13294                           tblptru	equ	0xFF8
 13295                           tblptrh	equ	0xFF7
 13296                           tblptrl	equ	0xFF6
 13297                           tablat	equ	0xFF5
 13298                           prodh	equ	0xFF4
 13299                           prodl	equ	0xFF3
 13300                           intcon	equ	0xFF2
 13301                           postinc0	equ	0xFEE
 13302                           wreg	equ	0xFE8
 13303                           indf1	equ	0xFE7
 13304                           fsr1h	equ	0xFE2
 13305                           fsr1l	equ	0xFE1
 13306                           indf2	equ	0xFDF
 13307                           postinc2	equ	0xFDE
 13308                           postdec2	equ	0xFDD
 13309                           plusw2	equ	0xFDB
 13310                           fsr2h	equ	0xFDA
 13311                           fsr2l	equ	0xFD9
 13312                           status	equ	0xFD8
 13313                           
 13314 ;; *************** function _sendVSCPFrame *****************
 13315 ;; Defined at:
 13316 ;;		line 2585 in file "../main.c"
 13317 ;; Parameters:    Size  Location     Type
 13318 ;;  vscpclass       2   62[COMRAM] unsigned short 
 13319 ;;  vscptype        1   64[COMRAM] unsigned char 
 13320 ;;  nodeid          1   65[COMRAM] unsigned char 
 13321 ;;  priority        1   66[COMRAM] unsigned char 
 13322 ;;  size            1   67[COMRAM] unsigned char 
 13323 ;;  pData           2   68[COMRAM] PTR unsigned char 
 13324 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13325 ;; Auto vars:     Size  Location     Type
 13326 ;;  id              4   70[COMRAM] unsigned long 
 13327 ;; Return value:  Size  Location     Type
 13328 ;;                  1    wreg      unsigned char 
 13329 ;; Registers used:
 13330 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13331 ;; Tracked objects:
 13332 ;;		On entry : F/0
 13333 ;;		On exit  : F/0
 13334 ;;		Unchanged: 0/0
 13335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13336 ;;      Params:         8       0       0       0       0       0       0
 13337 ;;      Locals:         4       0       0       0       0       0       0
 13338 ;;      Temps:          0      20       0       0       0       0       0
 13339 ;;      Totals:        12      20       0       0       0       0       0
 13340 ;;Total ram usage:       32 bytes
 13341 ;; Hardware stack levels used:    1
 13342 ;; Hardware stack levels required when called:    5
 13343 ;; This function calls:
 13344 ;;		_sendCANFrame
 13345 ;; This function is called by:
 13346 ;;		_SendInformationEvent
 13347 ;;		_vscp_sendEvent
 13348 ;; This function uses a non-reentrant model
 13349 ;;
 13350                           
 13351                           	psect	text52
 13352  003494                     __ptext52:
 13353                           	opt stack 0
 13354  003494                     _sendVSCPFrame:
 13355                           	opt stack 23
 13356                           
 13357                           ; BSR set to: 0
 13358                           ;main.c: 2586: uint32_t id = ( (uint32_t)priority << 26 ) |
 13359                           ;main.c: 2587: ( (uint32_t)vscpclass << 16 ) |
 13360                           ;main.c: 2588: ( (uint32_t)vscptype << 8 ) |
 13361                           ;main.c: 2589: nodeid;
 13362                           
 13363                           ; BSR set to: 0
 13364                           ;incstack = 0
 13365                           ;incstack = 0
 13366  003494  C041  F0B1         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 13367  003498  6BB2               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 13368  00349A  6BB3               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 13369  00349C  6BB4               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 13370  00349E  C0B3  F0B4         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 13371  0034A2  C0B2  F0B3         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 13372  0034A6  C0B1  F0B2         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 13373  0034AA  6BB1               	clrf	??_sendVSCPFrame& (0+255),b
 13374  0034AC  503F               	movf	sendVSCPFrame@vscpclass,w,c
 13375  0034AE  6FB5               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 13376  0034B0  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
 13377  0034B2  6FB6               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 13378  0034B4  6BB7               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 13379  0034B6  6BB8               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 13380  0034B8  C0B6  F0B8         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 13381  0034BC  C0B5  F0B7         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 13382  0034C0  6BB6               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 13383  0034C2  6BB5               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 13384  0034C4  C043  F0B9         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 13385  0034C8  6BBA               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 13386  0034CA  6BBB               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 13387  0034CC  6BBC               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 13388  0034CE  0E1A               	movlw	26
 13389  0034D0                     u10195:
 13390  0034D0  90D8               	bcf	status,0,c
 13391  0034D2  37B9               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 13392  0034D4  37BA               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 13393  0034D6  37BB               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 13394  0034D8  37BC               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 13395  0034DA  2EE8               	decfsz	wreg,f,c
 13396  0034DC  D7F9               	goto	u10195
 13397  0034DE  51B5               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 13398  0034E0  11B9               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 13399  0034E2  6FBD               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 13400  0034E4  51B6               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 13401  0034E6  11BA               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 13402  0034E8  6FBE               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 13403  0034EA  51B7               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 13404  0034EC  11BB               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 13405  0034EE  6FBF               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 13406  0034F0  51B8               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 13407  0034F2  11BC               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 13408  0034F4  6FC0               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 13409  0034F6  51B1               	movf	??_sendVSCPFrame& (0+255),w,b
 13410  0034F8  11BD               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 13411  0034FA  6FC1               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 13412  0034FC  51B2               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 13413  0034FE  11BE               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 13414  003500  6FC2               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 13415  003502  51B3               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 13416  003504  11BF               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 13417  003506  6FC3               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 13418  003508  51B4               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 13419  00350A  11C0               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 13420  00350C  6FC4               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 13421  00350E  5042               	movf	sendVSCPFrame@nodeid,w,c
 13422  003510  11C1               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 13423  003512  6E47               	movwf	sendVSCPFrame@id,c
 13424  003514  51C2               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 13425  003516  6E48               	movwf	sendVSCPFrame@id+1,c
 13426  003518  51C3               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 13427  00351A  6E49               	movwf	sendVSCPFrame@id+2,c
 13428  00351C  51C4               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 13429  00351E  6E4A               	movwf	sendVSCPFrame@id+3,c
 13430                           
 13431                           ; BSR set to: 0
 13432                           ;main.c: 2591: if ( !sendCANFrame( id, size, pData ) ) {
 13433  003520  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
 13434  003524  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 13435  003528  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 13436  00352C  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 13437  003530  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 13438  003534  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 13439  003538  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 13440  00353C  EC00  F01D         	call	_sendCANFrame	;wreg free
 13441  003540  0900               	iorlw	0
 13442                           
 13443                           ; BSR set to: 0
 13444                           ;main.c: 2592: return 0;
 13445  003542  0E00               	movlw	0
 13446  003544  A4D8               	btfss	status,2,c
 13447                           
 13448                           ; BSR set to: 0
 13449                           ;main.c: 2593: }
 13450                           ;main.c: 2595: return 1;
 13451  003546  0E01               	movlw	1
 13452                           
 13453                           ; BSR set to: 0
 13454  003548  0012               	return	
 13455  00354A                     __end_of_sendVSCPFrame:
 13456                           	opt stack 0
 13457                           tblptru	equ	0xFF8
 13458                           tblptrh	equ	0xFF7
 13459                           tblptrl	equ	0xFF6
 13460                           tablat	equ	0xFF5
 13461                           prodh	equ	0xFF4
 13462                           prodl	equ	0xFF3
 13463                           intcon	equ	0xFF2
 13464                           postinc0	equ	0xFEE
 13465                           wreg	equ	0xFE8
 13466                           indf1	equ	0xFE7
 13467                           fsr1h	equ	0xFE2
 13468                           fsr1l	equ	0xFE1
 13469                           indf2	equ	0xFDF
 13470                           postinc2	equ	0xFDE
 13471                           postdec2	equ	0xFDD
 13472                           plusw2	equ	0xFDB
 13473                           fsr2h	equ	0xFDA
 13474                           fsr2l	equ	0xFD9
 13475                           status	equ	0xFD8
 13476                           
 13477 ;; *************** function _sendCANFrame *****************
 13478 ;; Defined at:
 13479 ;;		line 2630 in file "../main.c"
 13480 ;; Parameters:    Size  Location     Type
 13481 ;;  id              4   54[COMRAM] unsigned long 
 13482 ;;  dlc             1   58[COMRAM] unsigned char 
 13483 ;;  pdata           2   59[COMRAM] PTR unsigned char 
 13484 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13485 ;; Auto vars:     Size  Location     Type
 13486 ;;  rv              1    0        unsigned char 
 13487 ;; Return value:  Size  Location     Type
 13488 ;;                  1    wreg      unsigned char 
 13489 ;; Registers used:
 13490 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13491 ;; Tracked objects:
 13492 ;;		On entry : F/0
 13493 ;;		On exit  : F/0
 13494 ;;		Unchanged: 0/0
 13495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13496 ;;      Params:         7       0       0       0       0       0       0
 13497 ;;      Locals:         1       0       0       0       0       0       0
 13498 ;;      Temps:          0       0       0       0       0       0       0
 13499 ;;      Totals:         8       0       0       0       0       0       0
 13500 ;;Total ram usage:        8 bytes
 13501 ;; Hardware stack levels used:    1
 13502 ;; Hardware stack levels required when called:    4
 13503 ;; This function calls:
 13504 ;;		_ECANSendMessage
 13505 ;; This function is called by:
 13506 ;;		_sendVSCPFrame
 13507 ;; This function uses a non-reentrant model
 13508 ;;
 13509                           
 13510                           	psect	text53
 13511  003A00                     __ptext53:
 13512                           	opt stack 0
 13513  003A00                     _sendCANFrame:
 13514                           	opt stack 23
 13515                           
 13516                           ; BSR set to: 0
 13517                           ;main.c: 2633: sendTimer = 0;
 13518                           
 13519                           ; BSR set to: 0
 13520                           ;incstack = 0
 13521                           ;incstack = 0
 13522  003A00  6B8C               	clrf	_sendTimer& (0+255),b	;volatile
 13523  003A02                     l9403:
 13524                           
 13525                           ;main.c: 2635: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 13526  003A02  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
 13527  003A06  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 13528  003A0A  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 13529  003A0E  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 13530  003A12  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 13531  003A16  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 13532  003A1A  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 13533  003A1E  0E20               	movlw	32
 13534  003A20  6E19               	movwf	?_ECANSendMessage+7,c
 13535  003A22  ECED  F014         	call	_ECANSendMessage	;wreg free
 13536  003A26  0900               	iorlw	0
 13537  003A28  E0EC               	bz	l9403
 13538                           
 13539                           ;main.c: 2638: }
 13540                           ;main.c: 2639: }
 13541                           ;main.c: 2641: vscp_omsg.flags = 0;
 13542                           
 13543                           ;main.c: 2637: break;
 13544  003A2A  0100               	movlb	0	; () banked
 13545  003A2C  6BA4               	clrf	_vscp_omsg& (0+255),b
 13546                           
 13547                           ; BSR set to: 0
 13548                           
 13549                           ; BSR set to: 0
 13550                           ;main.c: 2643: return rv;
 13551  003A2E  0C01               	retlw	1
 13552  003A30                     __end_of_sendCANFrame:
 13553                           	opt stack 0
 13554                           tblptru	equ	0xFF8
 13555                           tblptrh	equ	0xFF7
 13556                           tblptrl	equ	0xFF6
 13557                           tablat	equ	0xFF5
 13558                           prodh	equ	0xFF4
 13559                           prodl	equ	0xFF3
 13560                           intcon	equ	0xFF2
 13561                           postinc0	equ	0xFEE
 13562                           wreg	equ	0xFE8
 13563                           indf1	equ	0xFE7
 13564                           fsr1h	equ	0xFE2
 13565                           fsr1l	equ	0xFE1
 13566                           indf2	equ	0xFDF
 13567                           postinc2	equ	0xFDE
 13568                           postdec2	equ	0xFDD
 13569                           plusw2	equ	0xFDB
 13570                           fsr2h	equ	0xFDA
 13571                           fsr2l	equ	0xFD9
 13572                           status	equ	0xFD8
 13573                           
 13574 ;; *************** function _ECANSendMessage *****************
 13575 ;; Defined at:
 13576 ;;		line 617 in file "../ECAN.c"
 13577 ;; Parameters:    Size  Location     Type
 13578 ;;  id              4   17[COMRAM] unsigned long 
 13579 ;;  data            2   21[COMRAM] PTR unsigned char 
 13580 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13581 ;;  dataLen         1   23[COMRAM] unsigned char 
 13582 ;;  msgFlags        1   24[COMRAM] enum E16306
 13583 ;; Auto vars:     Size  Location     Type
 13584 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
 13585 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13586 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13587 ;;		 -> B0CON(1), 
 13588 ;;  ptr             2   52[COMRAM] PTR unsigned char 
 13589 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13590 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13591 ;;		 -> B0CON(1), 
 13592 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
 13593 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13594 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13595 ;;		 -> B0CON(1), 
 13596 ;;  i               1   51[COMRAM] unsigned char 
 13597 ;;  temp            1   50[COMRAM] unsigned char 
 13598 ;;  tempBSEL0       1   47[COMRAM] struct .
 13599 ;;  j               1   46[COMRAM] unsigned char 
 13600 ;;  buffers         1   45[COMRAM] unsigned char 
 13601 ;;  mode            1   44[COMRAM] unsigned char 
 13602 ;; Return value:  Size  Location     Type
 13603 ;;                  1    wreg      enum E15660
 13604 ;; Registers used:
 13605 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13606 ;; Tracked objects:
 13607 ;;		On entry : 0/0
 13608 ;;		On exit  : 0/0
 13609 ;;		Unchanged: 0/0
 13610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13611 ;;      Params:         8       0       0       0       0       0       0
 13612 ;;      Locals:        28       0       0       0       0       0       0
 13613 ;;      Temps:          1       0       0       0       0       0       0
 13614 ;;      Totals:        37       0       0       0       0       0       0
 13615 ;;Total ram usage:       37 bytes
 13616 ;; Hardware stack levels used:    1
 13617 ;; Hardware stack levels required when called:    3
 13618 ;; This function calls:
 13619 ;;		__CANIDToRegs
 13620 ;; This function is called by:
 13621 ;;		_sendCANFrame
 13622 ;; This function uses a non-reentrant model
 13623 ;;
 13624                           
 13625                           	psect	text54
 13626  0029DA                     __ptext54:
 13627                           	opt stack 0
 13628  0029DA                     _ECANSendMessage:
 13629                           	opt stack 23
 13630                           
 13631                           ;ECAN.c: 619: BYTE mode;
 13632                           ;ECAN.c: 620: BYTE buffers;
 13633                           ;ECAN.c: 628: BYTE i,j;
 13634                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 13635                           ;ECAN.c: 630: BYTE* pb[9];
 13636                           ;ECAN.c: 631: BYTE temp;
 13637                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 13638                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 13639                           
 13640                           ; BSR set to: 0
 13641                           ;incstack = 0
 13642                           ;incstack = 0
 13643  0029DA  0E0F               	movlw	15	;volatile
 13644  0029DC  6E1C               	movwf	ECANSendMessage@pb+1,c
 13645  0029DE  0E40               	movlw	64	;volatile
 13646  0029E0  6E1B               	movwf	ECANSendMessage@pb,c
 13647                           
 13648                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 13649  0029E2  0E0F               	movlw	15	;volatile
 13650  0029E4  6E1E               	movwf	ECANSendMessage@pb+3,c
 13651  0029E6  0E30               	movlw	48	;volatile
 13652  0029E8  6E1D               	movwf	ECANSendMessage@pb+2,c
 13653                           
 13654                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 13655  0029EA  0E0F               	movlw	15	;volatile
 13656  0029EC  6E20               	movwf	ECANSendMessage@pb+5,c
 13657  0029EE  0E20               	movlw	32	;volatile
 13658  0029F0  6E1F               	movwf	ECANSendMessage@pb+4,c
 13659                           
 13660                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 13661  0029F2  0E0E               	movlw	14	;volatile
 13662  0029F4  6E22               	movwf	ECANSendMessage@pb+7,c
 13663  0029F6  0E20               	movlw	32	;volatile
 13664  0029F8  6E21               	movwf	ECANSendMessage@pb+6,c
 13665                           
 13666                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 13667  0029FA  0E0E               	movlw	14	;volatile
 13668  0029FC  6E24               	movwf	ECANSendMessage@pb+9,c
 13669  0029FE  0E30               	movlw	48	;volatile
 13670  002A00  6E23               	movwf	ECANSendMessage@pb+8,c
 13671                           
 13672                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 13673  002A02  0E0E               	movlw	14	;volatile
 13674  002A04  6E26               	movwf	ECANSendMessage@pb+11,c
 13675  002A06  0E40               	movlw	64	;volatile
 13676  002A08  6E25               	movwf	ECANSendMessage@pb+10,c
 13677                           
 13678                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 13679  002A0A  0E0E               	movlw	14	;volatile
 13680  002A0C  6E28               	movwf	ECANSendMessage@pb+13,c
 13681  002A0E  0E50               	movlw	80	;volatile
 13682  002A10  6E27               	movwf	ECANSendMessage@pb+12,c
 13683                           
 13684                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 13685  002A12  0E0E               	movlw	14	;volatile
 13686  002A14  6E2A               	movwf	ECANSendMessage@pb+15,c
 13687  002A16  0E60               	movlw	96	;volatile
 13688  002A18  6E29               	movwf	ECANSendMessage@pb+14,c
 13689                           
 13690                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 13691  002A1A  0E0E               	movlw	14	;volatile
 13692  002A1C  6E2C               	movwf	ECANSendMessage@pb+17,c
 13693  002A1E  0E70               	movlw	112	;volatile
 13694  002A20  6E2B               	movwf	ECANSendMessage@pb+16,c
 13695                           
 13696                           ; BSR set to: 14
 13697                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 13698  002A22  5077               	movf	3959,w,c	;volatile
 13699  002A24  0BC0               	andlw	192
 13700  002A26  6E2D               	movwf	ECANSendMessage@mode,c
 13701                           
 13702                           ; BSR set to: 14
 13703                           ;ECAN.c: 660: if ( mode == 0x00 )
 13704  002A28  662D               	tstfsz	ECANSendMessage@mode,c
 13705  002A2A  D002               	goto	l9419
 13706                           
 13707                           ; BSR set to: 14
 13708                           ;ECAN.c: 661: buffers = 2;
 13709  002A2C  0E02               	movlw	2
 13710  002A2E  D001               	goto	L41
 13711  002A30                     l9419:
 13712                           
 13713                           ; BSR set to: 14
 13714                           ;ECAN.c: 662: else
 13715                           ;ECAN.c: 663: buffers = 8;
 13716  002A30  0E08               	movlw	8
 13717  002A32                     L41:
 13718  002A32  6E2E               	movwf	ECANSendMessage@buffers,c
 13719                           
 13720                           ; BSR set to: 14
 13721                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 13722  002A34  010D               	movlb	13	; () banked
 13723  002A36  90D8               	bcf	status,0,c
 13724  002A38  31F8               	rrcf	248,w,b	;volatile
 13725  002A3A  6E30               	movwf	ECANSendMessage@tempBSEL0,c
 13726                           
 13727                           ; BSR set to: 13
 13728                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 13729  002A3C  6A34               	clrf	ECANSendMessage@i,c
 13730  002A3E  D07D               	goto	l9479
 13731  002A40                     l9425:
 13732                           
 13733                           ;ECAN.c: 688: {
 13734                           ;ECAN.c: 693: ptr = pb[i];
 13735  002A40  5034               	movf	ECANSendMessage@i,w,c
 13736  002A42  0D02               	mullw	2
 13737  002A44  50F3               	movf	prodl,w,c
 13738  002A46  0F1B               	addlw	low ECANSendMessage@pb
 13739  002A48  6ED9               	movwf	fsr2l,c
 13740  002A4A  6ADA               	clrf	fsr2h,c
 13741  002A4C  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
 13742  002A50  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
 13743                           
 13744                           ;ECAN.c: 694: tempPtr = ptr;
 13745  002A54  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 13746  002A58  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 13747                           
 13748                           ;ECAN.c: 702: if ( i > 2 )
 13749  002A5C  0E02               	movlw	2
 13750  002A5E  6434               	cpfsgt	ECANSendMessage@i,c
 13751  002A60  D004               	goto	l9437
 13752                           
 13753                           ;ECAN.c: 703: {
 13754                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 13755  002A62  90D8               	bcf	status,0,c
 13756  002A64  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
 13757                           
 13758                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 13759  002A66  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
 13760  002A68  D067               	goto	l9477
 13761  002A6A                     l9437:
 13762                           
 13763                           ;ECAN.c: 714: }
 13764                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 13765  002A6A  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13766  002A6E  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13767  002A72  50DF               	movf	indf2,w,c
 13768  002A74  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13769  002A76  B61A               	btfsc	??_ECANSendMessage,3,c
 13770  002A78  D05F               	goto	l9477
 13771                           
 13772                           ;ECAN.c: 721: {
 13773                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 13774  002A7A  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13775  002A7E  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13776  002A82  0EFC               	movlw	252
 13777  002A84  16DF               	andwf	indf2,f,c
 13778                           
 13779                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 13780  002A86  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 13781  002A8A  0E03               	movlw	3
 13782  002A8C  161A               	andwf	??_ECANSendMessage,f,c
 13783  002A8E  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13784  002A92  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13785  002A96  501A               	movf	??_ECANSendMessage,w,c
 13786  002A98  12DF               	iorwf	indf2,f,c
 13787                           
 13788                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 13789  002A9A  AC19               	btfss	ECANSendMessage@msgFlags,6,c
 13790  002A9C  D004               	goto	l863
 13791                           
 13792                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 13793  002A9E  5018               	movf	ECANSendMessage@dataLen,w,c
 13794  002AA0  0940               	iorlw	64
 13795  002AA2  6E33               	movwf	ECANSendMessage@temp,c
 13796  002AA4  D002               	goto	l9447
 13797  002AA6                     l863:
 13798                           
 13799                           ;ECAN.c: 729: else
 13800                           ;ECAN.c: 730: temp = dataLen;
 13801  002AA6  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 13802  002AAA                     l9447:
 13803                           
 13804                           ;ECAN.c: 732: *(ptr+5) = temp;
 13805  002AAA  EE20 F005          	lfsr	2,5
 13806  002AAE  5035               	movf	ECANSendMessage@ptr,w,c
 13807  002AB0  26D9               	addwf	fsr2l,f,c
 13808  002AB2  5036               	movf	ECANSendMessage@ptr+1,w,c
 13809  002AB4  22DA               	addwfc	fsr2h,f,c
 13810  002AB6  C033  FFDF         	movff	ECANSendMessage@temp,indf2
 13811                           
 13812                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 13813  002ABA  AA19               	btfss	ECANSendMessage@msgFlags,5,c
 13814  002ABC  D003               	goto	l865
 13815                           
 13816                           ;ECAN.c: 736: temp = 1;
 13817  002ABE  0E01               	movlw	1
 13818  002AC0  6E33               	movwf	ECANSendMessage@temp,c
 13819  002AC2  D001               	goto	l9453
 13820  002AC4                     l865:
 13821                           
 13822                           ;ECAN.c: 738: else
 13823                           ;ECAN.c: 739: temp = 0;
 13824  002AC4  6A33               	clrf	ECANSendMessage@temp,c
 13825  002AC6                     l9453:
 13826                           
 13827                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 13828  002AC6  2835               	incf	ECANSendMessage@ptr,w,c
 13829  002AC8  6E08               	movwf	?__CANIDToRegs,c
 13830  002ACA  0E00               	movlw	0
 13831  002ACC  2036               	addwfc	ECANSendMessage@ptr+1,w,c
 13832  002ACE  6E09               	movwf	?__CANIDToRegs+1,c
 13833  002AD0  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 13834  002AD4  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 13835  002AD8  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 13836  002ADC  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 13837  002AE0  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 13838  002AE4  EC78  F017         	call	__CANIDToRegs	;wreg free
 13839                           
 13840                           ;ECAN.c: 745: ptr += 6;
 13841  002AE8  0E06               	movlw	6
 13842  002AEA  2635               	addwf	ECANSendMessage@ptr,f,c
 13843  002AEC  0E00               	movlw	0
 13844  002AEE  2236               	addwfc	ECANSendMessage@ptr+1,f,c
 13845                           
 13846                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 13847  002AF0  6A2F               	clrf	ECANSendMessage@j,c
 13848  002AF2  D00F               	goto	l9467
 13849  002AF4                     l9459:
 13850                           
 13851                           ;ECAN.c: 748: *ptr++ = *data++;
 13852  002AF4  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
 13853  002AF8  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 13854  002AFC  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 13855  002B00  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 13856  002B04  CFDF FFE7          	movff	indf2,indf1
 13857  002B08  4A16               	infsnz	ECANSendMessage@data,f,c
 13858  002B0A  2A17               	incf	ECANSendMessage@data+1,f,c
 13859  002B0C  4A35               	infsnz	ECANSendMessage@ptr,f,c
 13860  002B0E  2A36               	incf	ECANSendMessage@ptr+1,f,c
 13861  002B10  2A2F               	incf	ECANSendMessage@j,f,c
 13862  002B12                     l9467:
 13863  002B12  5018               	movf	ECANSendMessage@dataLen,w,c
 13864  002B14  5C2F               	subwf	ECANSendMessage@j,w,c
 13865  002B16  E3EE               	bnc	l9459
 13866                           
 13867                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 13868  002B18  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13869  002B1C  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13870  002B20  50DF               	movf	indf2,w,c
 13871  002B22  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13872  002B24  B41A               	btfsc	??_ECANSendMessage,2,c
 13873  002B26  D006               	goto	l9473
 13874                           
 13875                           ;ECAN.c: 753: *tempPtr |= 0x08;
 13876  002B28  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13877  002B2C  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13878  002B30  0E00               	movlw	0
 13879  002B32  86DB               	bsf	plusw2,3,c
 13880  002B34                     l9473:
 13881                           
 13882                           ;ECAN.c: 755: return TRUE;
 13883  002B34  0E01               	movlw	1
 13884  002B36  D005               	goto	l871
 13885  002B38                     l9477:
 13886  002B38  2A34               	incf	ECANSendMessage@i,f,c
 13887  002B3A                     l9479:
 13888  002B3A  502E               	movf	ECANSendMessage@buffers,w,c
 13889  002B3C  5C34               	subwf	ECANSendMessage@i,w,c
 13890  002B3E  E380               	bnc	l9425
 13891                           
 13892                           ;ECAN.c: 756: }
 13893                           ;ECAN.c: 757: }
 13894                           ;ECAN.c: 760: return FALSE;
 13895  002B40  0E00               	movlw	0
 13896  002B42                     l871:
 13897  002B42  0012               	return	
 13898  002B44                     __end_of_ECANSendMessage:
 13899                           	opt stack 0
 13900                           tblptru	equ	0xFF8
 13901                           tblptrh	equ	0xFF7
 13902                           tblptrl	equ	0xFF6
 13903                           tablat	equ	0xFF5
 13904                           prodh	equ	0xFF4
 13905                           prodl	equ	0xFF3
 13906                           intcon	equ	0xFF2
 13907                           postinc0	equ	0xFEE
 13908                           wreg	equ	0xFE8
 13909                           indf1	equ	0xFE7
 13910                           fsr1h	equ	0xFE2
 13911                           fsr1l	equ	0xFE1
 13912                           indf2	equ	0xFDF
 13913                           postinc2	equ	0xFDE
 13914                           postdec2	equ	0xFDD
 13915                           plusw2	equ	0xFDB
 13916                           fsr2h	equ	0xFDA
 13917                           fsr2l	equ	0xFD9
 13918                           status	equ	0xFD8
 13919                           
 13920 ;; *************** function __CANIDToRegs *****************
 13921 ;; Defined at:
 13922 ;;		line 1099 in file "../ECAN.c"
 13923 ;; Parameters:    Size  Location     Type
 13924 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 13925 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13926 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13927 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
 13928 ;;  val             4    9[COMRAM] unsigned long 
 13929 ;;  type            1   13[COMRAM] unsigned char 
 13930 ;; Auto vars:     Size  Location     Type
 13931 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
 13932 ;;		 -> _CANIDToRegs@val(4), 
 13933 ;; Return value:  Size  Location     Type
 13934 ;;		None               void
 13935 ;; Registers used:
 13936 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13937 ;; Tracked objects:
 13938 ;;		On entry : 0/F
 13939 ;;		On exit  : 0/0
 13940 ;;		Unchanged: 0/0
 13941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13942 ;;      Params:         7       0       0       0       0       0       0
 13943 ;;      Locals:         1       0       0       0       0       0       0
 13944 ;;      Temps:          2       0       0       0       0       0       0
 13945 ;;      Totals:        10       0       0       0       0       0       0
 13946 ;;Total ram usage:       10 bytes
 13947 ;; Hardware stack levels used:    1
 13948 ;; Hardware stack levels required when called:    2
 13949 ;; This function calls:
 13950 ;;		Nothing
 13951 ;; This function is called by:
 13952 ;;		_calculateSetFilterMask
 13953 ;;		_ECANSendMessage
 13954 ;; This function uses a non-reentrant model
 13955 ;;
 13956                           
 13957                           	psect	text55
 13958  002EF0                     __ptext55:
 13959                           	opt stack 0
 13960  002EF0                     __CANIDToRegs:
 13961                           	opt stack 23
 13962                           
 13963                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 13964                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 13965                           
 13966                           ;incstack = 0
 13967                           ;incstack = 0
 13968  002EF0  0E0A               	movlw	low __CANIDToRegs@val
 13969  002EF2  6E11               	movwf	__CANIDToRegs@Value,c
 13970                           
 13971                           ;ECAN.c: 1104: if ( type == 0 )
 13972  002EF4  660E               	tstfsz	__CANIDToRegs@type,c
 13973  002EF6  D022               	goto	l9495
 13974                           
 13975                           ;ECAN.c: 1105: {
 13976                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 13977  002EF8  5011               	movf	__CANIDToRegs@Value,w,c
 13978  002EFA  6ED9               	movwf	fsr2l,c
 13979  002EFC  6ADA               	clrf	fsr2h,c
 13980  002EFE  50DF               	movf	indf2,w,c
 13981  002F00  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13982  002F02  90D8               	bcf	status,0,c
 13983  002F04  320F               	rrcf	??__CANIDToRegs,f,c
 13984  002F06  90D8               	bcf	status,0,c
 13985  002F08  320F               	rrcf	??__CANIDToRegs,f,c
 13986  002F0A  90D8               	bcf	status,0,c
 13987  002F0C  300F               	rrcf	??__CANIDToRegs,w,c
 13988                           
 13989                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 13990  002F0E  D862               	call	PL30	;call to abstracted procedure
 13991  002F10  2AD9               	incf	fsr2l,f,c
 13992  002F12  6ADA               	clrf	fsr2h,c
 13993  002F14  D872               	call	PL74	;call to abstracted procedure
 13994  002F16                     u10955:
 13995  002F16  90D8               	bcf	status,0,c
 13996  002F18  360F               	rlcf	??__CANIDToRegs,f,c
 13997  002F1A  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13998  002F1C  D7FC               	goto	u10955
 13999  002F1E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 14000                           
 14001                           ;ECAN.c: 1109: ptr++;
 14002                           
 14003                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 14004  002F22  D846               	call	PL18	;call to abstracted procedure
 14005  002F24  D86A               	call	PL74	;call to abstracted procedure
 14006  002F26                     u10965:
 14007  002F26  90D8               	bcf	status,0,c
 14008  002F28  360F               	rlcf	??__CANIDToRegs,f,c
 14009  002F2A  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 14010  002F2C  D7FC               	goto	u10965
 14011  002F2E  500F               	movf	??__CANIDToRegs,w,c
 14012  002F30  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 14013  002F34  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 14014  002F38  6EDF               	movwf	indf2,c
 14015                           
 14016                           ;ECAN.c: 1111: }
 14017  002F3A  D039               	goto	l925
 14018  002F3C                     l9495:
 14019                           
 14020                           ;ECAN.c: 1112: else
 14021                           ;ECAN.c: 1113: {
 14022                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 14023  002F3C  5011               	movf	__CANIDToRegs@Value,w,c
 14024  002F3E  D842               	call	PL26	;call to abstracted procedure
 14025  002F40  0E05               	movlw	5
 14026  002F42  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 14027  002F44                     u10975:
 14028  002F44  90D8               	bcf	status,0,c
 14029  002F46  320F               	rrcf	??__CANIDToRegs,f,c
 14030  002F48  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 14031  002F4A  D7FC               	goto	u10975
 14032  002F4C  500F               	movf	??__CANIDToRegs,w,c
 14033                           
 14034                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 14035  002F4E  D842               	call	PL30	;call to abstracted procedure
 14036  002F50  0E03               	movlw	3
 14037  002F52  D849               	call	PL46	;call to abstracted procedure
 14038  002F54  360F               	rlcf	??__CANIDToRegs,f,c
 14039  002F56  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 14040                           
 14041                           ;ECAN.c: 1117: ptr++;
 14042                           
 14043                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 14044  002F5A  D82A               	call	PL18	;call to abstracted procedure
 14045  002F5C  0E02               	movlw	2
 14046  002F5E  D843               	call	PL46	;call to abstracted procedure
 14047  002F60  340F               	rlcf	??__CANIDToRegs,w,c
 14048  002F62  0BE0               	andlw	224
 14049  002F64  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 14050  002F68  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 14051  002F6C  6EDF               	movwf	indf2,c
 14052                           
 14053                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 14054  002F6E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 14055  002F72  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 14056  002F76  0E00               	movlw	0
 14057  002F78  86DB               	bsf	plusw2,3,c
 14058                           
 14059                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 14060  002F7A  5011               	movf	__CANIDToRegs@Value,w,c
 14061  002F7C  D823               	call	PL26	;call to abstracted procedure
 14062  002F7E  0E03               	movlw	3
 14063  002F80  160F               	andwf	??__CANIDToRegs,f,c
 14064  002F82  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 14065                           
 14066                           ;ECAN.c: 1122: ptr++;
 14067                           
 14068                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 14069  002F86  D814               	call	PL18	;call to abstracted procedure
 14070  002F88  2AD9               	incf	fsr2l,f,c
 14071  002F8A  6ADA               	clrf	fsr2h,c
 14072  002F8C  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 14073  002F90  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 14074  002F94  CFDF FFE7          	movff	indf2,indf1
 14075                           
 14076                           ;ECAN.c: 1124: ptr++;
 14077  002F98  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 14078  002F9A  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 14079                           
 14080                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 14081  002F9C  5011               	movf	__CANIDToRegs@Value,w,c
 14082  002F9E  6ED9               	movwf	fsr2l,c
 14083  002FA0  6ADA               	clrf	fsr2h,c
 14084  002FA2  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 14085  002FA6  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 14086  002FAA  CFDF FFE7          	movff	indf2,indf1
 14087  002FAE                     l925:
 14088  002FAE  0012               	return	
 14089  002FB0                     __end_of__CANIDToRegs:
 14090                           	opt stack 0
 14091  002FB0                     PL18:
 14092                           	opt stack 23
 14093  002FB0  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 14094  002FB4  500F               	movf	??__CANIDToRegs,w,c
 14095  002FB6  12DF               	iorwf	indf2,f,c
 14096  002FB8  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 14097  002FBA  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 14098  002FBC  5011               	movf	__CANIDToRegs@Value,w,c
 14099  002FBE  6ED9               	movwf	fsr2l,c
 14100  002FC0  6ADA               	clrf	fsr2h,c
 14101  002FC2  0012               	return	
 14102  002FC4                     __end_ofPL18:
 14103                           	opt stack 0
 14104  002FC4                     PL26:
 14105                           	opt stack 23
 14106  002FC4  6ED9               	movwf	fsr2l,c
 14107  002FC6  6ADA               	clrf	fsr2h,c
 14108  002FC8  0E02               	movlw	2
 14109  002FCA  26D9               	addwf	fsr2l,f,c
 14110  002FCC  6ADA               	clrf	fsr2h,c
 14111  002FCE  50DF               	movf	indf2,w,c
 14112  002FD0  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 14113  002FD2  0012               	return	
 14114  002FD4                     __end_ofPL26:
 14115                           	opt stack 0
 14116  002FD4                     PL30:
 14117                           	opt stack 23
 14118  002FD4  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 14119  002FD8  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 14120  002FDC  6EDF               	movwf	indf2,c
 14121  002FDE  5011               	movf	__CANIDToRegs@Value,w,c
 14122  002FE0  6ED9               	movwf	fsr2l,c
 14123  002FE2  6ADA               	clrf	fsr2h,c
 14124  002FE4  0012               	return	
 14125  002FE6                     __end_ofPL30:
 14126                           	opt stack 0
 14127  002FE6                     PL46:
 14128                           	opt stack 23
 14129  002FE6  26D9               	addwf	fsr2l,f,c
 14130  002FE8  6ADA               	clrf	fsr2h,c
 14131  002FEA  50DF               	movf	indf2,w,c
 14132  002FEC  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 14133  002FEE  90D8               	bcf	status,0,c
 14134  002FF0  360F               	rlcf	??__CANIDToRegs,f,c
 14135  002FF2  90D8               	bcf	status,0,c
 14136  002FF4  360F               	rlcf	??__CANIDToRegs,f,c
 14137  002FF6  90D8               	bcf	status,0,c
 14138  002FF8  0012               	return	
 14139  002FFA                     __end_ofPL46:
 14140                           	opt stack 0
 14141  002FFA                     PL74:
 14142                           	opt stack 23
 14143  002FFA  50DF               	movf	indf2,w,c
 14144  002FFC  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 14145  002FFE  0E05               	movlw	5
 14146  003000  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 14147  003002  0C05               	retlw	5
 14148  003004                     __end_ofPL74:
 14149                           	opt stack 0
 14150                           tblptru	equ	0xFF8
 14151                           tblptrh	equ	0xFF7
 14152                           tblptrl	equ	0xFF6
 14153                           tablat	equ	0xFF5
 14154                           prodh	equ	0xFF4
 14155                           prodl	equ	0xFF3
 14156                           intcon	equ	0xFF2
 14157                           postinc0	equ	0xFEE
 14158                           wreg	equ	0xFE8
 14159                           indf1	equ	0xFE7
 14160                           fsr1h	equ	0xFE2
 14161                           fsr1l	equ	0xFE1
 14162                           indf2	equ	0xFDF
 14163                           postinc2	equ	0xFDE
 14164                           postdec2	equ	0xFDD
 14165                           plusw2	equ	0xFDB
 14166                           fsr2h	equ	0xFDA
 14167                           fsr2l	equ	0xFD9
 14168                           status	equ	0xFD8
 14169                           
 14170 ;; *************** function _vscp_getEvent *****************
 14171 ;; Defined at:
 14172 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 14173 ;; Parameters:    Size  Location     Type
 14174 ;;		None
 14175 ;; Auto vars:     Size  Location     Type
 14176 ;;  rv              1   43[COMRAM] unsigned char 
 14177 ;; Return value:  Size  Location     Type
 14178 ;;                  1    wreg      unsigned char 
 14179 ;; Registers used:
 14180 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14181 ;; Tracked objects:
 14182 ;;		On entry : F/0
 14183 ;;		On exit  : 0/0
 14184 ;;		Unchanged: 0/0
 14185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14186 ;;      Params:         0       0       0       0       0       0       0
 14187 ;;      Locals:         1       0       0       0       0       0       0
 14188 ;;      Temps:          0       0       0       0       0       0       0
 14189 ;;      Totals:         1       0       0       0       0       0       0
 14190 ;;Total ram usage:        1 bytes
 14191 ;; Hardware stack levels used:    1
 14192 ;; Hardware stack levels required when called:    6
 14193 ;; This function calls:
 14194 ;;		_getVSCPFrame
 14195 ;; This function is called by:
 14196 ;;		_main
 14197 ;; This function uses a non-reentrant model
 14198 ;;
 14199                           
 14200                           	psect	text56
 14201  003A86                     __ptext56:
 14202                           	opt stack 0
 14203  003A86                     _vscp_getEvent:
 14204                           	opt stack 24
 14205                           
 14206                           ; BSR set to: 0
 14207                           ;vscp_firmware.c: 1309: int8_t rv;
 14208                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 14209                           
 14210                           ;incstack = 0
 14211                           ;incstack = 0
 14212  003A86  BF96               	btfsc	_vscp_imsg& (0+255),7,b
 14213  003A88  D012               	goto	l1299
 14214                           
 14215                           ; BSR set to: 0
 14216                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 14217                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 14218                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 14219                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 14220                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 14221                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
 14222  003A8A  0E9A               	movlw	low (_vscp_imsg+4)
 14223  003A8C  6E1E               	movwf	?_getVSCPFrame,c
 14224  003A8E  0E9B               	movlw	low (_vscp_imsg+5)
 14225  003A90  6E1F               	movwf	?_getVSCPFrame+1,c
 14226  003A92  0E97               	movlw	low (_vscp_imsg+1)
 14227  003A94  6E20               	movwf	?_getVSCPFrame+2,c
 14228  003A96  0E96               	movlw	low _vscp_imsg
 14229  003A98  6E21               	movwf	?_getVSCPFrame+3,c
 14230  003A9A  0E9C               	movlw	low (_vscp_imsg+6)
 14231  003A9C  6E22               	movwf	?_getVSCPFrame+4,c
 14232  003A9E  0E98               	movlw	(_vscp_imsg+2)& (0+255)
 14233  003AA0  EC9A  F01B         	call	_getVSCPFrame
 14234  003AA4  6E2C               	movwf	vscp_getEvent@rv,c
 14235  003AA6  502C               	movf	vscp_getEvent@rv& (0+255),w,c
 14236  003AA8  E002               	bz	l1299
 14237                           
 14238                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 14239  003AAA  0100               	movlb	0	; () banked
 14240  003AAC  8F96               	bsf	_vscp_imsg& (0+255),7,b
 14241  003AAE                     l1299:
 14242  003AAE  0012               	return	
 14243  003AB0                     __end_of_vscp_getEvent:
 14244                           	opt stack 0
 14245                           tblptru	equ	0xFF8
 14246                           tblptrh	equ	0xFF7
 14247                           tblptrl	equ	0xFF6
 14248                           tablat	equ	0xFF5
 14249                           prodh	equ	0xFF4
 14250                           prodl	equ	0xFF3
 14251                           intcon	equ	0xFF2
 14252                           postinc0	equ	0xFEE
 14253                           wreg	equ	0xFE8
 14254                           indf1	equ	0xFE7
 14255                           fsr1h	equ	0xFE2
 14256                           fsr1l	equ	0xFE1
 14257                           indf2	equ	0xFDF
 14258                           postinc2	equ	0xFDE
 14259                           postdec2	equ	0xFDD
 14260                           plusw2	equ	0xFDB
 14261                           fsr2h	equ	0xFDA
 14262                           fsr2l	equ	0xFD9
 14263                           status	equ	0xFD8
 14264                           
 14265 ;; *************** function _getVSCPFrame *****************
 14266 ;; Defined at:
 14267 ;;		line 2609 in file "../main.c"
 14268 ;; Parameters:    Size  Location     Type
 14269 ;;  pvscpclass      1    wreg     PTR unsigned short 
 14270 ;;		 -> vscp_imsg(14), 
 14271 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
 14272 ;;		 -> vscp_imsg(14), 
 14273 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
 14274 ;;		 -> vscp_imsg(14), 
 14275 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
 14276 ;;		 -> vscp_imsg(14), 
 14277 ;;  pSize           1   32[COMRAM] PTR unsigned char 
 14278 ;;		 -> vscp_imsg(14), 
 14279 ;;  pData           1   33[COMRAM] PTR unsigned char 
 14280 ;;		 -> vscp_imsg(14), 
 14281 ;; Auto vars:     Size  Location     Type
 14282 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
 14283 ;;		 -> vscp_imsg(14), 
 14284 ;;  id              4   39[COMRAM] unsigned long 
 14285 ;; Return value:  Size  Location     Type
 14286 ;;                  1    wreg      unsigned char 
 14287 ;; Registers used:
 14288 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14289 ;; Tracked objects:
 14290 ;;		On entry : F/0
 14291 ;;		On exit  : 0/0
 14292 ;;		Unchanged: 0/0
 14293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14294 ;;      Params:         5       0       0       0       0       0       0
 14295 ;;      Locals:         5       0       0       0       0       0       0
 14296 ;;      Temps:          4       0       0       0       0       0       0
 14297 ;;      Totals:        14       0       0       0       0       0       0
 14298 ;;Total ram usage:       14 bytes
 14299 ;; Hardware stack levels used:    1
 14300 ;; Hardware stack levels required when called:    5
 14301 ;; This function calls:
 14302 ;;		_getCANFrame
 14303 ;; This function is called by:
 14304 ;;		_vscp_getEvent
 14305 ;; This function uses a non-reentrant model
 14306 ;;
 14307                           
 14308                           	psect	text57
 14309  003734                     __ptext57:
 14310                           	opt stack 0
 14311  003734                     _getVSCPFrame:
 14312                           	opt stack 24
 14313                           
 14314                           ;incstack = 0
 14315                           ;incstack = 0
 14316                           ;getVSCPFrame@pvscpclass stored from wreg
 14317  003734  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
 14318                           
 14319                           ; BSR set to: 0
 14320                           ;main.c: 2610: uint32_t id;
 14321                           ;main.c: 2612: if ( !getCANFrame(&id, pSize, pData) ) {
 14322  003738  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
 14323  00373C  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
 14324  003740  0E28               	movlw	getVSCPFrame@id& (0+255)
 14325  003742  EC18  F01D         	call	_getCANFrame
 14326  003746  0900               	iorlw	0
 14327  003748  E102               	bnz	l6937
 14328                           
 14329                           ;main.c: 2613: return 0;
 14330  00374A  0E00               	movlw	0
 14331  00374C  D02E               	goto	l665
 14332  00374E                     l6937:
 14333                           
 14334                           ;main.c: 2614: }
 14335                           ;main.c: 2616: *pNodeId = id & 0x0ff;
 14336  00374E  501F               	movf	getVSCPFrame@pNodeId,w,c
 14337  003750  6ED9               	movwf	fsr2l,c
 14338  003752  6ADA               	clrf	fsr2h,c
 14339  003754  C028  FFDF         	movff	getVSCPFrame@id,indf2
 14340                           
 14341                           ;main.c: 2617: *pvscptype = (id >> 8) & 0xff;
 14342  003758  501E               	movf	getVSCPFrame@pvscptype,w,c
 14343  00375A  6ED9               	movwf	fsr2l,c
 14344  00375C  6ADA               	clrf	fsr2h,c
 14345  00375E  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
 14346                           
 14347                           ;main.c: 2618: *pvscpclass = (id >> 16) & 0x1ff;
 14348  003762  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 14349  003764  6E23               	movwf	??_getVSCPFrame& (0+255),c
 14350  003766  0E01               	movlw	1
 14351  003768  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 14352  00376A  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
 14353  00376C  5027               	movf	getVSCPFrame@pvscpclass,w,c
 14354  00376E  6ED9               	movwf	fsr2l,c
 14355  003770  6ADA               	clrf	fsr2h,c
 14356  003772  C023  FFDE         	movff	??_getVSCPFrame,postinc2
 14357  003776  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 14358                           
 14359                           ;main.c: 2619: *pPriority = (uint16_t) (0x07 & (id >> 26));
 14360  00377A  5020               	movf	getVSCPFrame@pPriority,w,c
 14361  00377C  6ED9               	movwf	fsr2l,c
 14362  00377E  6ADA               	clrf	fsr2h,c
 14363  003780  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 14364  003784  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 14365  003788  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 14366  00378C  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 14367  003790  0E1B               	movlw	27
 14368  003792  D005               	goto	u6940
 14369  003794                     u6945:
 14370  003794  90D8               	bcf	status,0,c
 14371  003796  3226               	rrcf	??_getVSCPFrame+3,f,c
 14372  003798  3225               	rrcf	??_getVSCPFrame+2,f,c
 14373  00379A  3224               	rrcf	??_getVSCPFrame+1,f,c
 14374  00379C  3223               	rrcf	??_getVSCPFrame,f,c
 14375  00379E                     u6940:
 14376  00379E  2EE8               	decfsz	wreg,f,c
 14377  0037A0  D7F9               	goto	u6945
 14378  0037A2  5023               	movf	??_getVSCPFrame,w,c
 14379  0037A4  0B07               	andlw	7
 14380  0037A6  6EDF               	movwf	indf2,c
 14381                           
 14382                           ;main.c: 2621: return 1;
 14383  0037A8  0E01               	movlw	1
 14384  0037AA                     l665:
 14385  0037AA  0012               	return	
 14386  0037AC                     __end_of_getVSCPFrame:
 14387                           	opt stack 0
 14388                           tblptru	equ	0xFF8
 14389                           tblptrh	equ	0xFF7
 14390                           tblptrl	equ	0xFF6
 14391                           tablat	equ	0xFF5
 14392                           prodh	equ	0xFF4
 14393                           prodl	equ	0xFF3
 14394                           intcon	equ	0xFF2
 14395                           postinc0	equ	0xFEE
 14396                           wreg	equ	0xFE8
 14397                           indf1	equ	0xFE7
 14398                           fsr1h	equ	0xFE2
 14399                           fsr1l	equ	0xFE1
 14400                           indf2	equ	0xFDF
 14401                           postinc2	equ	0xFDE
 14402                           postdec2	equ	0xFDD
 14403                           plusw2	equ	0xFDB
 14404                           fsr2h	equ	0xFDA
 14405                           fsr2l	equ	0xFD9
 14406                           status	equ	0xFD8
 14407                           
 14408 ;; *************** function _getCANFrame *****************
 14409 ;; Defined at:
 14410 ;;		line 2651 in file "../main.c"
 14411 ;; Parameters:    Size  Location     Type
 14412 ;;  pid             1    wreg     PTR unsigned long 
 14413 ;;		 -> getVSCPFrame@id(4), 
 14414 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 14415 ;;		 -> vscp_imsg(14), 
 14416 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 14417 ;;		 -> vscp_imsg(14), 
 14418 ;; Auto vars:     Size  Location     Type
 14419 ;;  pid             1   27[COMRAM] PTR unsigned long 
 14420 ;;		 -> getVSCPFrame@id(4), 
 14421 ;;  flags           1   28[COMRAM] enum E16332
 14422 ;; Return value:  Size  Location     Type
 14423 ;;                  1    wreg      unsigned char 
 14424 ;; Registers used:
 14425 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14426 ;; Tracked objects:
 14427 ;;		On entry : F/0
 14428 ;;		On exit  : 0/0
 14429 ;;		Unchanged: 0/0
 14430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14431 ;;      Params:         2       0       0       0       0       0       0
 14432 ;;      Locals:         2       0       0       0       0       0       0
 14433 ;;      Temps:          0       0       0       0       0       0       0
 14434 ;;      Totals:         4       0       0       0       0       0       0
 14435 ;;Total ram usage:        4 bytes
 14436 ;; Hardware stack levels used:    1
 14437 ;; Hardware stack levels required when called:    4
 14438 ;; This function calls:
 14439 ;;		_ECANReceiveMessage
 14440 ;; This function is called by:
 14441 ;;		_getVSCPFrame
 14442 ;; This function uses a non-reentrant model
 14443 ;;
 14444                           
 14445                           	psect	text58
 14446  003A30                     __ptext58:
 14447                           	opt stack 0
 14448  003A30                     _getCANFrame:
 14449                           	opt stack 24
 14450                           
 14451                           ;incstack = 0
 14452                           ;incstack = 0
 14453                           ;getCANFrame@pid stored from wreg
 14454  003A30  CFE8 F01C          	movff	wreg,getCANFrame@pid
 14455                           
 14456                           ; BSR set to: 0
 14457                           ;main.c: 2652: ECAN_RX_MSG_FLAGS flags;
 14458                           ;main.c: 2656: if (vscp_imsg.flags & 0x80) return 0;
 14459  003A34  AF96               	btfss	_vscp_imsg& (0+255),7,b
 14460  003A36  D002               	goto	l6953
 14461  003A38                     l6949:
 14462  003A38  0E00               	movlw	0
 14463  003A3A  D00F               	goto	l676
 14464  003A3C                     l6953:
 14465                           
 14466                           ; BSR set to: 0
 14467                           ;main.c: 2658: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 14468  003A3C  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 14469  003A40  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 14470  003A44  0E1D               	movlw	low getCANFrame@flags
 14471  003A46  6E11               	movwf	?_ECANReceiveMessage+2,c
 14472  003A48  501C               	movf	getCANFrame@pid,w,c
 14473  003A4A  EC18  F011         	call	_ECANReceiveMessage
 14474  003A4E  0900               	iorlw	0
 14475  003A50  E0F3               	bz	l6949
 14476                           
 14477                           ;main.c: 2661: if (flags & ECAN_RX_RTR_FRAME) return 0;
 14478  003A52  AC1D               	btfss	getCANFrame@flags,6,c
 14479                           
 14480                           ;main.c: 2664: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 14481  003A54  AA1D               	btfss	getCANFrame@flags,5,c
 14482  003A56  D7F0               	goto	l6949
 14483                           
 14484                           ;main.c: 2666: return 1;
 14485  003A58  0E01               	movlw	1
 14486  003A5A                     l676:
 14487  003A5A  0012               	return	
 14488  003A5C                     __end_of_getCANFrame:
 14489                           	opt stack 0
 14490                           tblptru	equ	0xFF8
 14491                           tblptrh	equ	0xFF7
 14492                           tblptrl	equ	0xFF6
 14493                           tablat	equ	0xFF5
 14494                           prodh	equ	0xFF4
 14495                           prodl	equ	0xFF3
 14496                           intcon	equ	0xFF2
 14497                           postinc0	equ	0xFEE
 14498                           wreg	equ	0xFE8
 14499                           indf1	equ	0xFE7
 14500                           fsr1h	equ	0xFE2
 14501                           fsr1l	equ	0xFE1
 14502                           indf2	equ	0xFDF
 14503                           postinc2	equ	0xFDE
 14504                           postdec2	equ	0xFDD
 14505                           plusw2	equ	0xFDB
 14506                           fsr2h	equ	0xFDA
 14507                           fsr2l	equ	0xFD9
 14508                           status	equ	0xFD8
 14509                           
 14510 ;; *************** function _ECANReceiveMessage *****************
 14511 ;; Defined at:
 14512 ;;		line 803 in file "../ECAN.c"
 14513 ;; Parameters:    Size  Location     Type
 14514 ;;  id              1    wreg     PTR unsigned long 
 14515 ;;		 -> getVSCPFrame@id(4), 
 14516 ;;  data            1   14[COMRAM] PTR unsigned char 
 14517 ;;		 -> vscp_imsg(14), 
 14518 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 14519 ;;		 -> vscp_imsg(14), 
 14520 ;;  msgFlags        1   16[COMRAM] PTR enum E16324
 14521 ;;		 -> getCANFrame@flags(1), 
 14522 ;; Auto vars:     Size  Location     Type
 14523 ;;  id              1   19[COMRAM] PTR unsigned long 
 14524 ;;		 -> getVSCPFrame@id(4), 
 14525 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 14526 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14527 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14528 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
 14529 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14530 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14531 ;;  temp            1   22[COMRAM] struct .
 14532 ;;  mode            1   21[COMRAM] unsigned char 
 14533 ;;  i               1   20[COMRAM] unsigned char 
 14534 ;; Return value:  Size  Location     Type
 14535 ;;                  1    wreg      enum E15660
 14536 ;; Registers used:
 14537 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14538 ;; Tracked objects:
 14539 ;;		On entry : F/0
 14540 ;;		On exit  : 0/0
 14541 ;;		Unchanged: 0/0
 14542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14543 ;;      Params:         3       0       0       0       0       0       0
 14544 ;;      Locals:         8       0       0       0       0       0       0
 14545 ;;      Temps:          0       0       0       0       0       0       0
 14546 ;;      Totals:        11       0       0       0       0       0       0
 14547 ;;Total ram usage:       11 bytes
 14548 ;; Hardware stack levels used:    1
 14549 ;; Hardware stack levels required when called:    3
 14550 ;; This function calls:
 14551 ;;		__ECANPointBuffer
 14552 ;;		__RegsToCANID
 14553 ;; This function is called by:
 14554 ;;		_getCANFrame
 14555 ;; This function uses a non-reentrant model
 14556 ;;
 14557                           
 14558                           	psect	text59
 14559  002230                     __ptext59:
 14560                           	opt stack 0
 14561  002230                     _ECANReceiveMessage:
 14562                           	opt stack 24
 14563                           
 14564                           ;incstack = 0
 14565                           ;incstack = 0
 14566                           ;ECANReceiveMessage@id stored from wreg
 14567  002230  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
 14568                           
 14569                           ; BSR set to: 0
 14570                           ;ECAN.c: 805: BYTE mode;
 14571                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 14572                           ;ECAN.c: 809: char i;
 14573                           ;ECAN.c: 810: BYTE_VAL temp;
 14574                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 14575  002234  6A54               	clrf	__ECANRxFilterHitInfo,c
 14576                           
 14577                           ; BSR set to: 0
 14578                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 14579  002236  5077               	movf	3959,w,c	;volatile
 14580  002238  0BC0               	andlw	192
 14581  00223A  6E16               	movwf	ECANReceiveMessage@mode,c
 14582                           
 14583                           ; BSR set to: 0
 14584                           ;ECAN.c: 816: if ( mode == 0x00 )
 14585  00223C  6616               	tstfsz	ECANReceiveMessage@mode,c
 14586  00223E  D032               	goto	l7085
 14587                           
 14588                           ; BSR set to: 0
 14589                           ;ECAN.c: 822: {
 14590                           ;ECAN.c: 824: if ( RXB0FUL )
 14591  002240  AE60               	btfss	3936,7,c	;volatile
 14592  002242  D012               	goto	l876
 14593                           
 14594                           ; BSR set to: 0
 14595                           ;ECAN.c: 825: {
 14596                           ;ECAN.c: 827: RXB0IF = 0;
 14597  002244  90A4               	bcf	4004,0,c	;volatile
 14598                           
 14599                           ;ECAN.c: 830: if ( RXB0OVFL )
 14600  002246  AE74               	btfss	3956,7,c	;volatile
 14601  002248  D006               	goto	l7061
 14602                           
 14603                           ; BSR set to: 0
 14604                           ;ECAN.c: 831: {
 14605                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 14606  00224A  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14607  00224C  6ED9               	movwf	fsr2l,c
 14608  00224E  6ADA               	clrf	fsr2h,c
 14609  002250  0E00               	movlw	0
 14610  002252  86DB               	bsf	plusw2,3,c
 14611                           
 14612                           ; BSR set to: 0
 14613                           ;ECAN.c: 833: RXB0OVFL = 0;
 14614  002254  9E74               	bcf	3956,7,c	;volatile
 14615  002256                     l7061:
 14616                           
 14617                           ; BSR set to: 0
 14618                           ;ECAN.c: 834: }
 14619                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 14620  002256  A060               	btfss	3936,0,c	;volatile
 14621  002258  D002               	bra	u7115
 14622  00225A  8054               	bsf	__ECANRxFilterHitInfo,0,c
 14623  00225C  D001               	bra	u7117
 14624  00225E                     u7115:
 14625  00225E  9054               	bcf	__ECANRxFilterHitInfo,0,c
 14626  002260                     u7117:
 14627                           
 14628                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 14629  002260  0E0F               	movlw	15	;volatile
 14630  002262  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14631  002264  0E60               	movlw	96	;volatile
 14632  002266  D01A               	goto	L42
 14633  002268                     l876:
 14634                           
 14635                           ; BSR set to: 0
 14636                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 14637  002268  010F               	movlb	15	; () banked
 14638  00226A  AF50               	btfss	80,7,b	;volatile
 14639  00226C  D019               	goto	l7079
 14640                           
 14641                           ; BSR set to: 15
 14642                           ;ECAN.c: 842: {
 14643                           ;ECAN.c: 844: RXB1IF = 0;
 14644  00226E  92A4               	bcf	4004,1,c	;volatile
 14645                           
 14646                           ;ECAN.c: 847: if ( RXB1OVFL )
 14647  002270  AC74               	btfss	3956,6,c	;volatile
 14648  002272  D006               	goto	l7071
 14649                           
 14650                           ; BSR set to: 15
 14651                           ;ECAN.c: 848: {
 14652                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 14653  002274  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14654  002276  6ED9               	movwf	fsr2l,c
 14655  002278  6ADA               	clrf	fsr2h,c
 14656  00227A  0E00               	movlw	0
 14657  00227C  86DB               	bsf	plusw2,3,c
 14658                           
 14659                           ; BSR set to: 15
 14660                           ;ECAN.c: 850: RXB1OVFL = 0;
 14661  00227E  9C74               	bcf	3956,6,c	;volatile
 14662  002280                     l7071:
 14663                           
 14664                           ; BSR set to: 15
 14665                           ;ECAN.c: 851: }
 14666                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 14667  002280  5150               	movf	80,w,b	;volatile
 14668  002282  0B07               	andlw	7
 14669  002284  6E54               	movwf	__ECANRxFilterHitInfo,c
 14670                           
 14671                           ; BSR set to: 15
 14672                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 14673  002286  0E02               	movlw	2
 14674  002288  6054               	cpfslt	__ECANRxFilterHitInfo,c
 14675  00228A  D005               	goto	l7077
 14676                           
 14677                           ; BSR set to: 15
 14678                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 14679  00228C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14680  00228E  6ED9               	movwf	fsr2l,c
 14681  002290  6ADA               	clrf	fsr2h,c
 14682  002292  0E00               	movlw	0
 14683  002294  8EDB               	bsf	plusw2,7,c
 14684  002296                     l7077:
 14685                           
 14686                           ; BSR set to: 15
 14687                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 14688  002296  0E0F               	movlw	15	;volatile
 14689  002298  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14690  00229A  0E50               	movlw	80	;volatile
 14691  00229C                     L42:
 14692  00229C  6E18               	movwf	ECANReceiveMessage@ptr,c
 14693                           
 14694                           ;ECAN.c: 860: }
 14695  00229E  D065               	goto	l7139
 14696  0022A0                     l7079:
 14697                           
 14698                           ;ECAN.c: 861: else
 14699                           ;ECAN.c: 862: return FALSE;
 14700  0022A0  0E00               	movlw	0
 14701  0022A2  D0C2               	goto	l883
 14702  0022A4                     l7085:
 14703                           
 14704                           ; BSR set to: 0
 14705                           ;ECAN.c: 869: else if ( mode == 0x40 )
 14706  0022A4  5016               	movf	ECANReceiveMessage@mode,w,c
 14707  0022A6  0A40               	xorlw	64
 14708  0022A8  E146               	bnz	l886
 14709                           
 14710                           ; BSR set to: 0
 14711                           ;ECAN.c: 875: {
 14712                           ;ECAN.c: 876: if ( RXB0FUL )
 14713  0022AA  AE60               	btfss	3936,7,c	;volatile
 14714  0022AC  D004               	goto	l887
 14715                           
 14716                           ; BSR set to: 0
 14717                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 14718  0022AE  0E0F               	movlw	15	;volatile
 14719  0022B0  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14720  0022B2  0E60               	movlw	96	;volatile
 14721  0022B4  D03E               	goto	L49
 14722  0022B6                     l887:
 14723                           
 14724                           ; BSR set to: 0
 14725                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 14726  0022B6  010F               	movlb	15	; () banked
 14727  0022B8  AF50               	btfss	80,7,b	;volatile
 14728  0022BA  D004               	goto	l889
 14729                           
 14730                           ; BSR set to: 15
 14731                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 14732  0022BC  0E0F               	movlw	15	;volatile
 14733  0022BE  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14734  0022C0  0E50               	movlw	80	;volatile
 14735  0022C2  D037               	goto	L49
 14736  0022C4                     l889:
 14737                           
 14738                           ; BSR set to: 15
 14739                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 14740  0022C4  010D               	movlb	13
 14741  0022C6  B5F8               	btfsc	248,2,b	;volatile
 14742  0022C8  D007               	goto	l891
 14743  0022CA  010E               	movlb	14
 14744  0022CC  AF20               	btfss	32,7,b	;volatile
 14745  0022CE  D004               	goto	l891
 14746                           
 14747                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 14748  0022D0  0E0E               	movlw	14	;volatile
 14749  0022D2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14750  0022D4  0E20               	movlw	32	;volatile
 14751  0022D6  D02D               	goto	L49
 14752  0022D8                     l891:
 14753                           
 14754                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 14755  0022D8  010D               	movlb	13
 14756  0022DA  B7F8               	btfsc	248,3,b	;volatile
 14757  0022DC  D007               	goto	l893
 14758  0022DE  010E               	movlb	14
 14759  0022E0  AF30               	btfss	48,7,b	;volatile
 14760  0022E2  D004               	goto	l893
 14761                           
 14762                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 14763  0022E4  0E0E               	movlw	14	;volatile
 14764  0022E6  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14765  0022E8  0E30               	movlw	48	;volatile
 14766  0022EA  D023               	goto	L49
 14767  0022EC                     l893:
 14768                           
 14769                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 14770  0022EC  010D               	movlb	13
 14771  0022EE  B9F8               	btfsc	248,4,b	;volatile
 14772  0022F0  D007               	goto	l895
 14773  0022F2  010E               	movlb	14
 14774  0022F4  AF40               	btfss	64,7,b	;volatile
 14775  0022F6  D004               	goto	l895
 14776                           
 14777                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 14778  0022F8  0E0E               	movlw	14	;volatile
 14779  0022FA  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14780  0022FC  0E40               	movlw	64	;volatile
 14781  0022FE  D019               	goto	L49
 14782  002300                     l895:
 14783                           
 14784                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 14785  002300  010D               	movlb	13
 14786  002302  BBF8               	btfsc	248,5,b	;volatile
 14787  002304  D005               	goto	l897
 14788  002306  010E               	movlb	14
 14789  002308  AF50               	btfss	80,7,b	;volatile
 14790  00230A  D002               	goto	l897
 14791                           
 14792                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 14793  00230C  0E0E               	movlw	14	;volatile
 14794  00230E  D7D7               	goto	L50
 14795  002310                     l897:
 14796                           
 14797                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 14798  002310  010D               	movlb	13
 14799  002312  BDF8               	btfsc	248,6,b	;volatile
 14800  002314  D005               	goto	l899
 14801  002316  010E               	movlb	14
 14802  002318  AF60               	btfss	96,7,b	;volatile
 14803  00231A  D002               	goto	l899
 14804                           
 14805                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 14806  00231C  0E0E               	movlw	14	;volatile
 14807  00231E  D7C8               	goto	L51
 14808  002320                     l899:
 14809                           
 14810                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 14811  002320  010D               	movlb	13
 14812  002322  BFF8               	btfsc	248,7,b	;volatile
 14813  002324  D7BD               	goto	l7079
 14814  002326  010E               	movlb	14
 14815  002328  AF70               	btfss	112,7,b	;volatile
 14816  00232A  D7BA               	goto	l7079
 14817                           
 14818                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 14819  00232C  0E0E               	movlw	14	;volatile
 14820  00232E  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14821  002330  0E70               	movlw	112	;volatile
 14822  002332                     L49:
 14823  002332  6E18               	movwf	ECANReceiveMessage@ptr,c
 14824  002334  D00A               	goto	l7129
 14825  002336                     l886:
 14826                           
 14827                           ; BSR set to: 0
 14828                           ;ECAN.c: 910: else
 14829                           ;ECAN.c: 915: {
 14830                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 14831  002336  AE74               	btfss	3956,7,c	;volatile
 14832  002338  D7B3               	goto	l7079
 14833                           
 14834                           ; BSR set to: 0
 14835                           ;ECAN.c: 917: {
 14836                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 14837  00233A  506F               	movf	3951,w,c	;volatile
 14838  00233C  0B07               	andlw	7
 14839  00233E  ECD6  F01B         	call	__ECANPointBuffer
 14840  002342  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 14841  002346  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 14842  00234A                     l7129:
 14843                           
 14844                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 14845  00234A  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14846  00234E  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14847  002352  50DF               	movf	indf2,w,c
 14848  002354  0B1F               	andlw	31
 14849  002356  6E54               	movwf	__ECANRxFilterHitInfo,c
 14850                           
 14851                           ;ECAN.c: 932: RXB1IF = 0;
 14852  002358  92A4               	bcf	4004,1,c	;volatile
 14853                           
 14854                           ;ECAN.c: 934: if ( RXB1OVFL )
 14855  00235A  AC74               	btfss	3956,6,c	;volatile
 14856  00235C  D006               	goto	l7139
 14857                           
 14858                           ;ECAN.c: 935: {
 14859                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 14860  00235E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14861  002360  6ED9               	movwf	fsr2l,c
 14862  002362  6ADA               	clrf	fsr2h,c
 14863  002364  0E00               	movlw	0
 14864  002366  86DB               	bsf	plusw2,3,c
 14865                           
 14866                           ;ECAN.c: 937: RXB1OVFL = 0;
 14867  002368  9C74               	bcf	3956,6,c	;volatile
 14868  00236A                     l7139:
 14869                           
 14870                           ;ECAN.c: 942: savedPtr = ptr;
 14871  00236A  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 14872  00236E  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 14873                           
 14874                           ;ECAN.c: 943: *msgFlags = 0;
 14875  002372  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14876  002374  6ED9               	movwf	fsr2l,c
 14877  002376  6ADA               	clrf	fsr2h,c
 14878  002378  6ADF               	clrf	indf2,c
 14879                           
 14880                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 14881  00237A  EE20 F005          	lfsr	2,5
 14882  00237E  D855               	call	PL70	;call to abstracted procedure
 14883                           
 14884                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 14885  002380  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14886  002382  6ED9               	movwf	fsr2l,c
 14887  002384  6ADA               	clrf	fsr2h,c
 14888  002386  5017               	movf	ECANReceiveMessage@temp,w,c
 14889  002388  0B0F               	andlw	15
 14890  00238A  6EDF               	movwf	indf2,c
 14891                           
 14892                           ;ECAN.c: 950: if ( temp.bits.b6 )
 14893  00238C  AC17               	btfss	ECANReceiveMessage@temp,6,c
 14894  00238E  D005               	goto	l907
 14895                           
 14896                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 14897  002390  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14898  002392  6ED9               	movwf	fsr2l,c
 14899  002394  6ADA               	clrf	fsr2h,c
 14900  002396  0E00               	movlw	0
 14901  002398  8CDB               	bsf	plusw2,6,c
 14902  00239A                     l907:
 14903                           
 14904                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 14905  00239A  EE20 F002          	lfsr	2,2
 14906  00239E  D845               	call	PL70	;call to abstracted procedure
 14907                           
 14908                           ;ECAN.c: 955: if ( temp.bits.b3 )
 14909  0023A0  A617               	btfss	ECANReceiveMessage@temp,3,c
 14910  0023A2  D008               	goto	l908
 14911                           
 14912                           ;ECAN.c: 956: {
 14913                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 14914  0023A4  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14915  0023A6  6ED9               	movwf	fsr2l,c
 14916  0023A8  6ADA               	clrf	fsr2h,c
 14917  0023AA  0E00               	movlw	0
 14918  0023AC  8ADB               	bsf	plusw2,5,c
 14919                           
 14920                           ;ECAN.c: 958: temp.Val = 1;
 14921  0023AE  0E01               	movlw	1
 14922  0023B0  6E17               	movwf	ECANReceiveMessage@temp,c
 14923                           
 14924                           ;ECAN.c: 959: }
 14925  0023B2  D001               	goto	l7157
 14926  0023B4                     l908:
 14927                           
 14928                           ;ECAN.c: 960: else
 14929                           ;ECAN.c: 961: temp.Val = 0;
 14930  0023B4  6A17               	clrf	ECANReceiveMessage@temp,c
 14931  0023B6                     l7157:
 14932                           
 14933                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 14934  0023B6  2818               	incf	ECANReceiveMessage@ptr,w,c
 14935  0023B8  6E08               	movwf	?__RegsToCANID,c
 14936  0023BA  0E00               	movlw	0
 14937  0023BC  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 14938  0023BE  6E09               	movwf	?__RegsToCANID+1,c
 14939  0023C0  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 14940  0023C4  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 14941  0023C8  ECE9  F016         	call	__RegsToCANID	;wreg free
 14942                           
 14943                           ;ECAN.c: 966: ptr += 6;
 14944  0023CC  0E06               	movlw	6
 14945  0023CE  2618               	addwf	ECANReceiveMessage@ptr,f,c
 14946  0023D0  0E00               	movlw	0
 14947  0023D2  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 14948                           
 14949                           ;ECAN.c: 967: temp.Val = *dataLen;
 14950  0023D4  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14951  0023D6  6ED9               	movwf	fsr2l,c
 14952  0023D8  6ADA               	clrf	fsr2h,c
 14953  0023DA  50DF               	movf	indf2,w,c
 14954  0023DC  6E17               	movwf	ECANReceiveMessage@temp,c
 14955                           
 14956                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 14957  0023DE  6A15               	clrf	ECANReceiveMessage@i,c
 14958  0023E0  D00D               	goto	l7173
 14959  0023E2                     l7165:
 14960                           
 14961                           ;ECAN.c: 969: *data++ = *ptr++;
 14962  0023E2  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14963  0023E6  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14964  0023EA  500F               	movf	ECANReceiveMessage@data,w,c
 14965  0023EC  6EE1               	movwf	fsr1l,c
 14966  0023EE  6AE2               	clrf	fsr1h,c
 14967  0023F0  CFDF FFE7          	movff	indf2,indf1
 14968  0023F4  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 14969  0023F6  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 14970  0023F8  2A0F               	incf	ECANReceiveMessage@data,f,c
 14971  0023FA  2A15               	incf	ECANReceiveMessage@i,f,c
 14972  0023FC                     l7173:
 14973  0023FC  5017               	movf	ECANReceiveMessage@temp,w,c
 14974  0023FE  5C15               	subwf	ECANReceiveMessage@i,w,c
 14975  002400  E3F0               	bnc	l7165
 14976                           
 14977                           ;ECAN.c: 972: if ( IRXIF )
 14978  002402  AEA4               	btfss	4004,7,c	;volatile
 14979  002404  D006               	goto	l7179
 14980                           
 14981                           ;ECAN.c: 973: {
 14982                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 14983  002406  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14984  002408  6ED9               	movwf	fsr2l,c
 14985  00240A  6ADA               	clrf	fsr2h,c
 14986  00240C  0E00               	movlw	0
 14987  00240E  88DB               	bsf	plusw2,4,c
 14988                           
 14989                           ;ECAN.c: 975: IRXIF = 0;
 14990  002410  9EA4               	bcf	4004,7,c	;volatile
 14991  002412                     l7179:
 14992                           
 14993                           ;ECAN.c: 976: }
 14994                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 14995  002412  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 14996  002416  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 14997  00241A  0E7F               	movlw	127
 14998  00241C  16DF               	andwf	indf2,f,c
 14999                           
 15000                           ;ECAN.c: 983: if ( mode == 0x80 )
 15001  00241E  5016               	movf	ECANReceiveMessage@mode,w,c
 15002  002420  0A80               	xorlw	128
 15003  002422  B4D8               	btfsc	status,2,c
 15004                           
 15005                           ;ECAN.c: 984: FIFOEMPTY = 0;
 15006  002424  9E74               	bcf	3956,7,c	;volatile
 15007                           
 15008                           ;ECAN.c: 990: return TRUE;
 15009  002426  0E01               	movlw	1
 15010  002428                     l883:
 15011  002428  0012               	return	
 15012  00242A                     __end_of_ECANReceiveMessage:
 15013                           	opt stack 0
 15014  00242A                     PL70:
 15015                           	opt stack 24
 15016  00242A  5018               	movf	ECANReceiveMessage@ptr,w,c
 15017  00242C  26D9               	addwf	fsr2l,f,c
 15018  00242E  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 15019  002430  22DA               	addwfc	fsr2h,f,c
 15020  002432  50DF               	movf	indf2,w,c
 15021  002434  6E17               	movwf	ECANReceiveMessage@temp,c
 15022  002436  0012               	return	
 15023  002438                     __end_ofPL70:
 15024                           	opt stack 0
 15025                           tblptru	equ	0xFF8
 15026                           tblptrh	equ	0xFF7
 15027                           tblptrl	equ	0xFF6
 15028                           tablat	equ	0xFF5
 15029                           prodh	equ	0xFF4
 15030                           prodl	equ	0xFF3
 15031                           intcon	equ	0xFF2
 15032                           postinc0	equ	0xFEE
 15033                           wreg	equ	0xFE8
 15034                           indf1	equ	0xFE7
 15035                           fsr1h	equ	0xFE2
 15036                           fsr1l	equ	0xFE1
 15037                           indf2	equ	0xFDF
 15038                           postinc2	equ	0xFDE
 15039                           postdec2	equ	0xFDD
 15040                           plusw2	equ	0xFDB
 15041                           fsr2h	equ	0xFDA
 15042                           fsr2l	equ	0xFD9
 15043                           status	equ	0xFD8
 15044                           
 15045 ;; *************** function __RegsToCANID *****************
 15046 ;; Defined at:
 15047 ;;		line 1156 in file "../ECAN.c"
 15048 ;; Parameters:    Size  Location     Type
 15049 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 15050 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 15051 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 15052 ;;  val             1    9[COMRAM] PTR unsigned long 
 15053 ;;		 -> getVSCPFrame@id(4), 
 15054 ;;  type            1   10[COMRAM] unsigned char 
 15055 ;; Auto vars:     Size  Location     Type
 15056 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 15057 ;;		 -> getVSCPFrame@id(4), 
 15058 ;; Return value:  Size  Location     Type
 15059 ;;		None               void
 15060 ;; Registers used:
 15061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15062 ;; Tracked objects:
 15063 ;;		On entry : 0/0
 15064 ;;		On exit  : 0/0
 15065 ;;		Unchanged: 0/0
 15066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15067 ;;      Params:         4       0       0       0       0       0       0
 15068 ;;      Locals:         1       0       0       0       0       0       0
 15069 ;;      Temps:          2       0       0       0       0       0       0
 15070 ;;      Totals:         7       0       0       0       0       0       0
 15071 ;;Total ram usage:        7 bytes
 15072 ;; Hardware stack levels used:    1
 15073 ;; Hardware stack levels required when called:    2
 15074 ;; This function calls:
 15075 ;;		Nothing
 15076 ;; This function is called by:
 15077 ;;		_ECANReceiveMessage
 15078 ;; This function uses a non-reentrant model
 15079 ;;
 15080                           
 15081                           	psect	text60
 15082  002DD2                     __ptext60:
 15083                           	opt stack 0
 15084  002DD2                     __RegsToCANID:
 15085                           	opt stack 24
 15086                           
 15087                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 15088                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 15089                           
 15090                           ;incstack = 0
 15091                           ;incstack = 0
 15092  002DD2  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 15093                           
 15094                           ;ECAN.c: 1161: if ( type == 0 )
 15095  002DD6  660B               	tstfsz	__RegsToCANID@type,c
 15096  002DD8  D02B               	goto	l7253
 15097                           
 15098                           ;ECAN.c: 1162: {
 15099                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 15100  002DDA  500E               	movf	__RegsToCANID@Value,w,c
 15101  002DDC  6ED9               	movwf	fsr2l,c
 15102  002DDE  D86C               	call	PL40	;call to abstracted procedure
 15103  002DE0  360C               	rlcf	??__RegsToCANID,f,c
 15104  002DE2  90D8               	bcf	status,0,c
 15105  002DE4  360C               	rlcf	??__RegsToCANID,f,c
 15106  002DE6  90D8               	bcf	status,0,c
 15107  002DE8  340C               	rlcf	??__RegsToCANID,w,c
 15108  002DEA  6EDF               	movwf	indf2,c
 15109                           
 15110                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 15111  002DEC  500E               	movf	__RegsToCANID@Value,w,c
 15112  002DEE  6ED9               	movwf	fsr2l,c
 15113  002DF0  6ADA               	clrf	fsr2h,c
 15114  002DF2  2AD9               	incf	fsr2l,f,c
 15115  002DF4  6ADA               	clrf	fsr2h,c
 15116  002DF6  D873               	call	PL50	;call to abstracted procedure
 15117  002DF8                     u7435:
 15118  002DF8  90D8               	bcf	status,0,c
 15119  002DFA  320C               	rrcf	??__RegsToCANID,f,c
 15120  002DFC  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 15121  002DFE  D7FC               	goto	u7435
 15122  002E00  500C               	movf	??__RegsToCANID,w,c
 15123                           
 15124                           ;ECAN.c: 1166: ptr++;
 15125                           
 15126                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 15127  002E02  D863               	call	PL42	;call to abstracted procedure
 15128  002E04  0E05               	movlw	5
 15129  002E06  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 15130  002E08                     u7445:
 15131  002E08  90D8               	bcf	status,0,c
 15132  002E0A  320C               	rrcf	??__RegsToCANID,f,c
 15133  002E0C  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 15134  002E0E  D7FC               	goto	u7445
 15135  002E10  500E               	movf	__RegsToCANID@Value,w,c
 15136  002E12  6ED9               	movwf	fsr2l,c
 15137  002E14  6ADA               	clrf	fsr2h,c
 15138  002E16  500C               	movf	??__RegsToCANID,w,c
 15139  002E18  12DF               	iorwf	indf2,f,c
 15140                           
 15141                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 15142  002E1A  D83D               	call	PL24	;call to abstracted procedure
 15143  002E1C  6ADF               	clrf	indf2,c
 15144                           
 15145                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 15146  002E1E  500E               	movf	__RegsToCANID@Value,w,c
 15147  002E20  6ED9               	movwf	fsr2l,c
 15148  002E22  6ADA               	clrf	fsr2h,c
 15149  002E24  0E03               	movlw	3
 15150  002E26  26D9               	addwf	fsr2l,f,c
 15151  002E28  6ADA               	clrf	fsr2h,c
 15152  002E2A  0E00               	movlw	0
 15153  002E2C  6EDF               	movwf	indf2,c
 15154                           
 15155                           ;ECAN.c: 1170: }
 15156  002E2E  D032               	goto	l930
 15157  002E30                     l7253:
 15158                           
 15159                           ;ECAN.c: 1171: else
 15160                           ;ECAN.c: 1172: {
 15161                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 15162  002E30  D832               	call	PL24	;call to abstracted procedure
 15163  002E32  D855               	call	PL50	;call to abstracted procedure
 15164  002E34                     u7455:
 15165  002E34  90D8               	bcf	status,0,c
 15166  002E36  360C               	rlcf	??__RegsToCANID,f,c
 15167  002E38  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 15168  002E3A  D7FC               	goto	u7455
 15169  002E3C  500C               	movf	??__RegsToCANID,w,c
 15170  002E3E  6EDF               	movwf	indf2,c
 15171                           
 15172                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 15173  002E40  500E               	movf	__RegsToCANID@Value,w,c
 15174  002E42  6ED9               	movwf	fsr2l,c
 15175  002E44  6ADA               	clrf	fsr2h,c
 15176  002E46  0E03               	movlw	3
 15177  002E48  26D9               	addwf	fsr2l,f,c
 15178  002E4A  D836               	call	PL40	;call to abstracted procedure
 15179  002E4C  320C               	rrcf	??__RegsToCANID,f,c
 15180  002E4E  90D8               	bcf	status,0,c
 15181  002E50  320C               	rrcf	??__RegsToCANID,f,c
 15182  002E52  90D8               	bcf	status,0,c
 15183  002E54  300C               	rrcf	??__RegsToCANID,w,c
 15184                           
 15185                           ;ECAN.c: 1176: ptr++;
 15186                           
 15187                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 15188  002E56  D839               	call	PL42	;call to abstracted procedure
 15189  002E58  0E03               	movlw	3
 15190  002E5A  160C               	andwf	??__RegsToCANID,f,c
 15191  002E5C  D81C               	call	PL24	;call to abstracted procedure
 15192  002E5E  500C               	movf	??__RegsToCANID,w,c
 15193  002E60  12DF               	iorwf	indf2,f,c
 15194                           
 15195                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 15196  002E62  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15197  002E66  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15198  002E6A  50DF               	movf	indf2,w,c
 15199  002E6C  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15200  002E6E  90D8               	bcf	status,0,c
 15201  002E70  320C               	rrcf	??__RegsToCANID,f,c
 15202  002E72  90D8               	bcf	status,0,c
 15203  002E74  320C               	rrcf	??__RegsToCANID,f,c
 15204  002E76  90D8               	bcf	status,0,c
 15205  002E78  320C               	rrcf	??__RegsToCANID,f,c
 15206  002E7A  0E1C               	movlw	28
 15207  002E7C  160C               	andwf	??__RegsToCANID,f,c
 15208  002E7E  D80B               	call	PL24	;call to abstracted procedure
 15209  002E80  500C               	movf	??__RegsToCANID,w,c
 15210  002E82  12DF               	iorwf	indf2,f,c
 15211                           
 15212                           ;ECAN.c: 1180: ptr++;
 15213                           
 15214                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 15215  002E84  D80F               	call	PL34	;call to abstracted procedure
 15216  002E86  2AE1               	incf	fsr1l,f,c
 15217  002E88  6AE2               	clrf	fsr1h,c
 15218  002E8A  CFDF FFE7          	movff	indf2,indf1
 15219                           
 15220                           ;ECAN.c: 1182: ptr++;
 15221                           
 15222                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 15223  002E8E  D80A               	call	PL34	;call to abstracted procedure
 15224  002E90  CFDF FFE7          	movff	indf2,indf1
 15225  002E94                     l930:
 15226  002E94  0012               	return	
 15227  002E96                     __end_of__RegsToCANID:
 15228                           	opt stack 0
 15229  002E96                     PL24:
 15230                           	opt stack 24
 15231  002E96  500E               	movf	__RegsToCANID@Value,w,c
 15232  002E98  6ED9               	movwf	fsr2l,c
 15233  002E9A  6ADA               	clrf	fsr2h,c
 15234  002E9C  0E02               	movlw	2
 15235  002E9E  26D9               	addwf	fsr2l,f,c
 15236  002EA0  6ADA               	clrf	fsr2h,c
 15237  002EA2  0012               	return	
 15238  002EA4                     __end_ofPL24:
 15239                           	opt stack 0
 15240  002EA4                     PL34:
 15241                           	opt stack 24
 15242  002EA4  4A08               	infsnz	__RegsToCANID@ptr,f,c
 15243  002EA6  2A09               	incf	__RegsToCANID@ptr+1,f,c
 15244  002EA8  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15245  002EAC  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15246  002EB0  500E               	movf	__RegsToCANID@Value,w,c
 15247  002EB2  6EE1               	movwf	fsr1l,c
 15248  002EB4  6AE2               	clrf	fsr1h,c
 15249  002EB6  0012               	return	
 15250  002EB8                     __end_ofPL34:
 15251                           	opt stack 0
 15252  002EB8                     PL40:
 15253                           	opt stack 24
 15254  002EB8  6ADA               	clrf	fsr2h,c
 15255  002EBA  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 15256  002EBE  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 15257  002EC2  50E7               	movf	indf1,w,c
 15258  002EC4  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15259  002EC6  90D8               	bcf	status,0,c
 15260  002EC8  0012               	return	
 15261  002ECA                     __end_ofPL40:
 15262                           	opt stack 0
 15263  002ECA                     PL42:
 15264                           	opt stack 24
 15265  002ECA  6EDF               	movwf	indf2,c
 15266  002ECC  4A08               	infsnz	__RegsToCANID@ptr,f,c
 15267  002ECE  2A09               	incf	__RegsToCANID@ptr+1,f,c
 15268  002ED0  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15269  002ED4  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15270  002ED8  50DF               	movf	indf2,w,c
 15271  002EDA  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15272  002EDC  0012               	return	
 15273  002EDE                     __end_ofPL42:
 15274                           	opt stack 0
 15275  002EDE                     PL50:
 15276                           	opt stack 24
 15277  002EDE  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 15278  002EE2  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 15279  002EE6  50E7               	movf	indf1,w,c
 15280  002EE8  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15281  002EEA  0E05               	movlw	5
 15282  002EEC  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 15283  002EEE  0C05               	retlw	5
 15284  002EF0                     __end_ofPL50:
 15285                           	opt stack 0
 15286                           tblptru	equ	0xFF8
 15287                           tblptrh	equ	0xFF7
 15288                           tblptrl	equ	0xFF6
 15289                           tablat	equ	0xFF5
 15290                           prodh	equ	0xFF4
 15291                           prodl	equ	0xFF3
 15292                           intcon	equ	0xFF2
 15293                           postinc0	equ	0xFEE
 15294                           wreg	equ	0xFE8
 15295                           indf1	equ	0xFE7
 15296                           fsr1h	equ	0xFE2
 15297                           fsr1l	equ	0xFE1
 15298                           indf2	equ	0xFDF
 15299                           postinc2	equ	0xFDE
 15300                           postdec2	equ	0xFDD
 15301                           plusw2	equ	0xFDB
 15302                           fsr2h	equ	0xFDA
 15303                           fsr2l	equ	0xFD9
 15304                           status	equ	0xFD8
 15305                           
 15306 ;; *************** function __ECANPointBuffer *****************
 15307 ;; Defined at:
 15308 ;;		line 1207 in file "../ECAN.c"
 15309 ;; Parameters:    Size  Location     Type
 15310 ;;  b               1    wreg     unsigned char 
 15311 ;; Auto vars:     Size  Location     Type
 15312 ;;  b               1   10[COMRAM] unsigned char 
 15313 ;;  pt              2   11[COMRAM] PTR unsigned char 
 15314 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 15315 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 15316 ;; Return value:  Size  Location     Type
 15317 ;;                  2    7[COMRAM] PTR unsigned char 
 15318 ;; Registers used:
 15319 ;;		wreg, status,2, status,0
 15320 ;; Tracked objects:
 15321 ;;		On entry : F/0
 15322 ;;		On exit  : 0/0
 15323 ;;		Unchanged: 0/0
 15324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15325 ;;      Params:         3       0       0       0       0       0       0
 15326 ;;      Locals:         3       0       0       0       0       0       0
 15327 ;;      Temps:          0       0       0       0       0       0       0
 15328 ;;      Totals:         6       0       0       0       0       0       0
 15329 ;;Total ram usage:        6 bytes
 15330 ;; Hardware stack levels used:    1
 15331 ;; Hardware stack levels required when called:    2
 15332 ;; This function calls:
 15333 ;;		Nothing
 15334 ;; This function is called by:
 15335 ;;		_ECANReceiveMessage
 15336 ;; This function uses a non-reentrant model
 15337 ;;
 15338                           
 15339                           	psect	text61
 15340  0037AC                     __ptext61:
 15341                           	opt stack 0
 15342  0037AC                     __ECANPointBuffer:
 15343                           	opt stack 24
 15344                           
 15345                           ;incstack = 0
 15346                           ;incstack = 0
 15347                           ;__ECANPointBuffer@b stored from wreg
 15348  0037AC  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 15349                           
 15350                           ; BSR set to: 0
 15351                           ;ECAN.c: 1208: BYTE* pt;
 15352                           ;ECAN.c: 1210: switch(b)
 15353  0037B0  D024               	goto	l7239
 15354  0037B2                     l7221:
 15355                           
 15356                           ; BSR set to: 0
 15357                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 15358  0037B2  0E0F               	movlw	15	;volatile
 15359  0037B4  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15360  0037B6  0E60               	movlw	96	;volatile
 15361  0037B8  D01E               	goto	L58
 15362  0037BA                     l7223:
 15363                           
 15364                           ; BSR set to: 0
 15365                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 15366  0037BA  010F               	movlb	15	; () banked
 15367  0037BC  0E0F               	movlw	15	;volatile
 15368  0037BE  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15369  0037C0  0E50               	movlw	80	;volatile
 15370  0037C2  D019               	goto	L58
 15371  0037C4                     l7225:
 15372                           
 15373                           ; BSR set to: 0
 15374                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 15375  0037C4  010E               	movlb	14	; () banked
 15376  0037C6  0E0E               	movlw	14	;volatile
 15377  0037C8  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15378  0037CA  0E20               	movlw	32	;volatile
 15379  0037CC  D014               	goto	L58
 15380  0037CE                     l7227:
 15381                           
 15382                           ; BSR set to: 0
 15383                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 15384  0037CE  010E               	movlb	14	; () banked
 15385  0037D0  0E0E               	movlw	14	;volatile
 15386  0037D2  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15387  0037D4  0E30               	movlw	48	;volatile
 15388  0037D6  D00F               	goto	L58
 15389  0037D8                     l7229:
 15390                           
 15391                           ; BSR set to: 0
 15392                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 15393  0037D8  010E               	movlb	14	; () banked
 15394  0037DA  0E0E               	movlw	14	;volatile
 15395  0037DC  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15396  0037DE  0E40               	movlw	64	;volatile
 15397  0037E0  D00A               	goto	L58
 15398  0037E2                     l7231:
 15399                           
 15400                           ; BSR set to: 0
 15401                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 15402  0037E2  010E               	movlb	14	; () banked
 15403  0037E4  0E0E               	movlw	14	;volatile
 15404  0037E6  D7EB               	goto	L59
 15405  0037E8                     l7233:
 15406                           
 15407                           ; BSR set to: 0
 15408                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 15409  0037E8  010E               	movlb	14	; () banked
 15410  0037EA  0E0E               	movlw	14	;volatile
 15411  0037EC  D7E3               	goto	L60
 15412  0037EE                     l7235:
 15413                           
 15414                           ; BSR set to: 0
 15415                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 15416  0037EE  010E               	movlb	14	; () banked
 15417  0037F0  0E0E               	movlw	14	;volatile
 15418  0037F2  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15419  0037F4  0E70               	movlw	112	;volatile
 15420  0037F6                     L58:
 15421  0037F6  6E0C               	movwf	__ECANPointBuffer@pt,c
 15422                           
 15423                           ;ECAN.c: 1235: break;
 15424  0037F8  D00F               	goto	l935
 15425  0037FA                     l7239:
 15426                           
 15427                           ; BSR set to: 0
 15428  0037FA  500B               	movf	__ECANPointBuffer@b,w,c
 15429                           
 15430                           ; Switch size 1, requested type "space"
 15431                           ; Number of cases is 7, Range of values is 0 to 6
 15432                           ; switch strategies available:
 15433                           ; Name         Instructions Cycles
 15434                           ; simple_byte           22    12 (average)
 15435                           ;	Chosen strategy is simple_byte
 15436  0037FC  E0DA               	bz	l7221
 15437  0037FE  0A01               	xorlw	1	; case 1
 15438  003800  E0DC               	bz	l7223
 15439  003802  0A03               	xorlw	3	; case 2
 15440  003804  E0DF               	bz	l7225
 15441  003806  0A01               	xorlw	1	; case 3
 15442  003808  E0E2               	bz	l7227
 15443  00380A  0A07               	xorlw	7	; case 4
 15444  00380C  E0E5               	bz	l7229
 15445  00380E  0A01               	xorlw	1	; case 5
 15446  003810  E0E8               	bz	l7231
 15447  003812  0A03               	xorlw	3	; case 6
 15448  003814  E0E9               	bz	l7233
 15449  003816  D7EB               	goto	l7235
 15450  003818                     l935:
 15451                           
 15452                           ;ECAN.c: 1237: return (pt);
 15453  003818  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 15454  00381C  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 15455  003820  0012               	return	
 15456  003822                     __end_of__ECANPointBuffer:
 15457                           	opt stack 0
 15458                           tblptru	equ	0xFF8
 15459                           tblptrh	equ	0xFF7
 15460                           tblptrl	equ	0xFF6
 15461                           tablat	equ	0xFF5
 15462                           prodh	equ	0xFF4
 15463                           prodl	equ	0xFF3
 15464                           intcon	equ	0xFF2
 15465                           postinc0	equ	0xFEE
 15466                           wreg	equ	0xFE8
 15467                           indf1	equ	0xFE7
 15468                           fsr1h	equ	0xFE2
 15469                           fsr1l	equ	0xFE1
 15470                           indf2	equ	0xFDF
 15471                           postinc2	equ	0xFDE
 15472                           postdec2	equ	0xFDD
 15473                           plusw2	equ	0xFDB
 15474                           fsr2h	equ	0xFDA
 15475                           fsr2l	equ	0xFD9
 15476                           status	equ	0xFD8
 15477                           
 15478 ;; *************** function _vscp_check_pstorage *****************
 15479 ;; Defined at:
 15480 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 15481 ;; Parameters:    Size  Location     Type
 15482 ;;		None
 15483 ;; Auto vars:     Size  Location     Type
 15484 ;;		None
 15485 ;; Return value:  Size  Location     Type
 15486 ;;                  1    wreg      unsigned char 
 15487 ;; Registers used:
 15488 ;;		wreg, status,2, status,0, cstack
 15489 ;; Tracked objects:
 15490 ;;		On entry : 0/0
 15491 ;;		On exit  : 0/0
 15492 ;;		Unchanged: 0/0
 15493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15494 ;;      Params:         0       0       0       0       0       0       0
 15495 ;;      Locals:         0       0       0       0       0       0       0
 15496 ;;      Temps:          0       0       0       0       0       0       0
 15497 ;;      Totals:         0       0       0       0       0       0       0
 15498 ;;Total ram usage:        0 bytes
 15499 ;; Hardware stack levels used:    1
 15500 ;; Hardware stack levels required when called:    4
 15501 ;; This function calls:
 15502 ;;		_vscp_writeNicknamePermanent
 15503 ;;		_vscp_getSegmentCRC
 15504 ;;		_vscp_setSegmentCRC
 15505 ;;		_vscp_setControlByte
 15506 ;; This function is called by:
 15507 ;;		_main
 15508 ;; This function uses a non-reentrant model
 15509 ;;
 15510                           
 15511                           	psect	text62
 15512  003B94                     __ptext62:
 15513                           	opt stack 0
 15514  003B94                     _vscp_check_pstorage:
 15515                           	opt stack 26
 15516                           
 15517                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 15518                           
 15519                           ;incstack = 0
 15520                           ;incstack = 0
 15521  003B94  ECE0  F01E         	call	_vscp_getSegmentCRC	;wreg free
 15522  003B98  0BC0               	andlw	192
 15523  003B9A  0A40               	xorlw	64
 15524  003B9C  E102               	bnz	l7715
 15525                           
 15526                           ;vscp_firmware.c: 172: return !0;
 15527  003B9E  0E01               	movlw	1
 15528  003BA0  D00A               	goto	l1055
 15529  003BA2                     l7715:
 15530                           
 15531                           ;vscp_firmware.c: 173: }
 15532                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 15533  003BA2  0EFF               	movlw	255
 15534  003BA4  EC83  F01E         	call	_vscp_writeNicknamePermanent
 15535                           
 15536                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 15537  003BA8  0E00               	movlw	0
 15538  003BAA  EC78  F01E         	call	_vscp_setSegmentCRC
 15539                           
 15540                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 15541  003BAE  0EA0               	movlw	160
 15542  003BB0  EC6D  F01E         	call	_vscp_setControlByte
 15543                           
 15544                           ;vscp_firmware.c: 185: return 0;
 15545  003BB4  0E00               	movlw	0
 15546  003BB6                     l1055:
 15547  003BB6  0012               	return	
 15548  003BB8                     __end_of_vscp_check_pstorage:
 15549                           	opt stack 0
 15550                           tblptru	equ	0xFF8
 15551                           tblptrh	equ	0xFF7
 15552                           tblptrl	equ	0xFF6
 15553                           tablat	equ	0xFF5
 15554                           prodh	equ	0xFF4
 15555                           prodl	equ	0xFF3
 15556                           intcon	equ	0xFF2
 15557                           postinc0	equ	0xFEE
 15558                           wreg	equ	0xFE8
 15559                           indf1	equ	0xFE7
 15560                           fsr1h	equ	0xFE2
 15561                           fsr1l	equ	0xFE1
 15562                           indf2	equ	0xFDF
 15563                           postinc2	equ	0xFDE
 15564                           postdec2	equ	0xFDD
 15565                           plusw2	equ	0xFDB
 15566                           fsr2h	equ	0xFDA
 15567                           fsr2l	equ	0xFD9
 15568                           status	equ	0xFD8
 15569                           
 15570 ;; *************** function _vscp_setControlByte *****************
 15571 ;; Defined at:
 15572 ;;		line 2450 in file "../main.c"
 15573 ;; Parameters:    Size  Location     Type
 15574 ;;  ctrl            1    wreg     unsigned char 
 15575 ;; Auto vars:     Size  Location     Type
 15576 ;;  ctrl            1   11[COMRAM] unsigned char 
 15577 ;; Return value:  Size  Location     Type
 15578 ;;		None               void
 15579 ;; Registers used:
 15580 ;;		wreg, status,2, cstack
 15581 ;; Tracked objects:
 15582 ;;		On entry : 0/0
 15583 ;;		On exit  : 0/0
 15584 ;;		Unchanged: 0/0
 15585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15586 ;;      Params:         0       0       0       0       0       0       0
 15587 ;;      Locals:         1       0       0       0       0       0       0
 15588 ;;      Temps:          0       0       0       0       0       0       0
 15589 ;;      Totals:         1       0       0       0       0       0       0
 15590 ;;Total ram usage:        1 bytes
 15591 ;; Hardware stack levels used:    1
 15592 ;; Hardware stack levels required when called:    3
 15593 ;; This function calls:
 15594 ;;		_Busy_eep
 15595 ;;		_Write_b_eep
 15596 ;; This function is called by:
 15597 ;;		_vscp_check_pstorage
 15598 ;; This function uses a non-reentrant model
 15599 ;;
 15600                           
 15601                           	psect	text63
 15602  003CDA                     __ptext63:
 15603                           	opt stack 0
 15604  003CDA                     _vscp_setControlByte:
 15605                           	opt stack 26
 15606                           
 15607                           ;incstack = 0
 15608                           ;incstack = 0
 15609                           ;vscp_setControlByte@ctrl stored from wreg
 15610  003CDA  CFE8 F00C          	movff	wreg,vscp_setControlByte@ctrl
 15611                           
 15612                           ;main.c: 2451: (Busy_eep(), Write_b_eep(0x03,ctrl));
 15613  003CDE  ECE9  F01E         	call	_Busy_eep	;wreg free
 15614  003CE2  6A09               	clrf	?_Write_b_eep+1,c
 15615  003CE4  0E03               	movlw	3
 15616  003CE6  6E08               	movwf	?_Write_b_eep,c
 15617  003CE8  C00C  F00A         	movff	vscp_setControlByte@ctrl,?_Write_b_eep+2
 15618  003CEC  EFCE  F01C         	goto	_Write_b_eep	;wreg free
 15619  003CF0                     __end_of_vscp_setControlByte:
 15620                           	opt stack 0
 15621                           tblptru	equ	0xFF8
 15622                           tblptrh	equ	0xFF7
 15623                           tblptrl	equ	0xFF6
 15624                           tablat	equ	0xFF5
 15625                           prodh	equ	0xFF4
 15626                           prodl	equ	0xFF3
 15627                           intcon	equ	0xFF2
 15628                           postinc0	equ	0xFEE
 15629                           wreg	equ	0xFE8
 15630                           indf1	equ	0xFE7
 15631                           fsr1h	equ	0xFE2
 15632                           fsr1l	equ	0xFE1
 15633                           indf2	equ	0xFDF
 15634                           postinc2	equ	0xFDE
 15635                           postdec2	equ	0xFDD
 15636                           plusw2	equ	0xFDB
 15637                           fsr2h	equ	0xFDA
 15638                           fsr2l	equ	0xFD9
 15639                           status	equ	0xFD8
 15640                           
 15641 ;; *************** function _vscp_setSegmentCRC *****************
 15642 ;; Defined at:
 15643 ;;		line 2441 in file "../main.c"
 15644 ;; Parameters:    Size  Location     Type
 15645 ;;  crc             1    wreg     unsigned char 
 15646 ;; Auto vars:     Size  Location     Type
 15647 ;;  crc             1   11[COMRAM] unsigned char 
 15648 ;; Return value:  Size  Location     Type
 15649 ;;		None               void
 15650 ;; Registers used:
 15651 ;;		wreg, status,2, cstack
 15652 ;; Tracked objects:
 15653 ;;		On entry : 0/0
 15654 ;;		On exit  : 0/0
 15655 ;;		Unchanged: 0/0
 15656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15657 ;;      Params:         0       0       0       0       0       0       0
 15658 ;;      Locals:         1       0       0       0       0       0       0
 15659 ;;      Temps:          0       0       0       0       0       0       0
 15660 ;;      Totals:         1       0       0       0       0       0       0
 15661 ;;Total ram usage:        1 bytes
 15662 ;; Hardware stack levels used:    1
 15663 ;; Hardware stack levels required when called:    3
 15664 ;; This function calls:
 15665 ;;		_Busy_eep
 15666 ;;		_Write_b_eep
 15667 ;; This function is called by:
 15668 ;;		_vscp_check_pstorage
 15669 ;;		_vscp_handleProbeState
 15670 ;;		_vscp_handleHeartbeat
 15671 ;;		_vscp_handleSetNickname
 15672 ;; This function uses a non-reentrant model
 15673 ;;
 15674                           
 15675                           	psect	text64
 15676  003CF0                     __ptext64:
 15677                           	opt stack 0
 15678  003CF0                     _vscp_setSegmentCRC:
 15679                           	opt stack 25
 15680                           
 15681                           ;incstack = 0
 15682                           ;incstack = 0
 15683                           ;vscp_setSegmentCRC@crc stored from wreg
 15684  003CF0  CFE8 F00C          	movff	wreg,vscp_setSegmentCRC@crc
 15685                           
 15686                           ;main.c: 2442: (Busy_eep(), Write_b_eep(0x02,crc));
 15687  003CF4  ECE9  F01E         	call	_Busy_eep	;wreg free
 15688  003CF8  6A09               	clrf	?_Write_b_eep+1,c
 15689  003CFA  0E02               	movlw	2
 15690  003CFC  6E08               	movwf	?_Write_b_eep,c
 15691  003CFE  C00C  F00A         	movff	vscp_setSegmentCRC@crc,?_Write_b_eep+2
 15692  003D02  EFCE  F01C         	goto	_Write_b_eep	;wreg free
 15693  003D06                     __end_of_vscp_setSegmentCRC:
 15694                           	opt stack 0
 15695                           tblptru	equ	0xFF8
 15696                           tblptrh	equ	0xFF7
 15697                           tblptrl	equ	0xFF6
 15698                           tablat	equ	0xFF5
 15699                           prodh	equ	0xFF4
 15700                           prodl	equ	0xFF3
 15701                           intcon	equ	0xFF2
 15702                           postinc0	equ	0xFEE
 15703                           wreg	equ	0xFE8
 15704                           indf1	equ	0xFE7
 15705                           fsr1h	equ	0xFE2
 15706                           fsr1l	equ	0xFE1
 15707                           indf2	equ	0xFDF
 15708                           postinc2	equ	0xFDE
 15709                           postdec2	equ	0xFDD
 15710                           plusw2	equ	0xFDB
 15711                           fsr2h	equ	0xFDA
 15712                           fsr2l	equ	0xFD9
 15713                           status	equ	0xFD8
 15714                           
 15715 ;; *************** function _vscp_getSegmentCRC *****************
 15716 ;; Defined at:
 15717 ;;		line 2432 in file "../main.c"
 15718 ;; Parameters:    Size  Location     Type
 15719 ;;		None
 15720 ;; Auto vars:     Size  Location     Type
 15721 ;;		None
 15722 ;; Return value:  Size  Location     Type
 15723 ;;                  1    wreg      unsigned char 
 15724 ;; Registers used:
 15725 ;;		wreg, status,2, cstack
 15726 ;; Tracked objects:
 15727 ;;		On entry : 0/0
 15728 ;;		On exit  : 0/0
 15729 ;;		Unchanged: 0/0
 15730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15731 ;;      Params:         0       0       0       0       0       0       0
 15732 ;;      Locals:         0       0       0       0       0       0       0
 15733 ;;      Temps:          0       0       0       0       0       0       0
 15734 ;;      Totals:         0       0       0       0       0       0       0
 15735 ;;Total ram usage:        0 bytes
 15736 ;; Hardware stack levels used:    1
 15737 ;; Hardware stack levels required when called:    3
 15738 ;; This function calls:
 15739 ;;		_Read_b_eep
 15740 ;; This function is called by:
 15741 ;;		_vscp_check_pstorage
 15742 ;;		_vscp_handleHeartbeat
 15743 ;; This function uses a non-reentrant model
 15744 ;;
 15745                           
 15746                           	psect	text65
 15747  003DC0                     __ptext65:
 15748                           	opt stack 0
 15749  003DC0                     _vscp_getSegmentCRC:
 15750                           	opt stack 25
 15751                           
 15752                           ;main.c: 2433: return Read_b_eep(0x02);
 15753                           
 15754                           ;incstack = 0
 15755                           ;incstack = 0
 15756  003DC0  6A09               	clrf	?_Read_b_eep+1,c
 15757  003DC2  0E02               	movlw	2
 15758  003DC4  6E08               	movwf	?_Read_b_eep,c
 15759  003DC6  EFB5  F01E         	goto	_Read_b_eep	;wreg free
 15760  003DCA                     __end_of_vscp_getSegmentCRC:
 15761                           	opt stack 0
 15762                           tblptru	equ	0xFF8
 15763                           tblptrh	equ	0xFF7
 15764                           tblptrl	equ	0xFF6
 15765                           tablat	equ	0xFF5
 15766                           prodh	equ	0xFF4
 15767                           prodl	equ	0xFF3
 15768                           intcon	equ	0xFF2
 15769                           postinc0	equ	0xFEE
 15770                           wreg	equ	0xFE8
 15771                           indf1	equ	0xFE7
 15772                           fsr1h	equ	0xFE2
 15773                           fsr1l	equ	0xFE1
 15774                           indf2	equ	0xFDF
 15775                           postinc2	equ	0xFDE
 15776                           postdec2	equ	0xFDD
 15777                           plusw2	equ	0xFDB
 15778                           fsr2h	equ	0xFDA
 15779                           fsr2l	equ	0xFD9
 15780                           status	equ	0xFD8
 15781                           
 15782 ;; *************** function _vscp_writeNicknamePermanent *****************
 15783 ;; Defined at:
 15784 ;;		line 856 in file "../main.c"
 15785 ;; Parameters:    Size  Location     Type
 15786 ;;  nickname        1    wreg     unsigned char 
 15787 ;; Auto vars:     Size  Location     Type
 15788 ;;  nickname        1   11[COMRAM] unsigned char 
 15789 ;; Return value:  Size  Location     Type
 15790 ;;		None               void
 15791 ;; Registers used:
 15792 ;;		wreg, status,2, cstack
 15793 ;; Tracked objects:
 15794 ;;		On entry : 0/0
 15795 ;;		On exit  : 0/0
 15796 ;;		Unchanged: 0/0
 15797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15798 ;;      Params:         0       0       0       0       0       0       0
 15799 ;;      Locals:         1       0       0       0       0       0       0
 15800 ;;      Temps:          0       0       0       0       0       0       0
 15801 ;;      Totals:         1       0       0       0       0       0       0
 15802 ;;Total ram usage:        1 bytes
 15803 ;; Hardware stack levels used:    1
 15804 ;; Hardware stack levels required when called:    3
 15805 ;; This function calls:
 15806 ;;		_Busy_eep
 15807 ;;		_Write_b_eep
 15808 ;; This function is called by:
 15809 ;;		_vscp_check_pstorage
 15810 ;;		_vscp_handleProbeState
 15811 ;;		_vscp_handleHeartbeat
 15812 ;;		_vscp_handleSetNickname
 15813 ;;		_vscp_handleDropNickname
 15814 ;; This function uses a non-reentrant model
 15815 ;;
 15816                           
 15817                           	psect	text66
 15818  003D06                     __ptext66:
 15819                           	opt stack 0
 15820  003D06                     _vscp_writeNicknamePermanent:
 15821                           	opt stack 25
 15822                           
 15823                           ;incstack = 0
 15824                           ;incstack = 0
 15825                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 15826  003D06  CFE8 F00C          	movff	wreg,vscp_writeNicknamePermanent@nickname
 15827                           
 15828                           ;main.c: 857: (Busy_eep(), Write_b_eep(0x01,nickname));
 15829  003D0A  ECE9  F01E         	call	_Busy_eep	;wreg free
 15830  003D0E  6A09               	clrf	?_Write_b_eep+1,c
 15831  003D10  0E01               	movlw	1
 15832  003D12  6E08               	movwf	?_Write_b_eep,c
 15833  003D14  C00C  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_Write_b_eep+2
 15834  003D18  EFCE  F01C         	goto	_Write_b_eep	;wreg free
 15835  003D1C                     __end_of_vscp_writeNicknamePermanent:
 15836                           	opt stack 0
 15837                           tblptru	equ	0xFF8
 15838                           tblptrh	equ	0xFF7
 15839                           tblptrl	equ	0xFF6
 15840                           tablat	equ	0xFF5
 15841                           prodh	equ	0xFF4
 15842                           prodl	equ	0xFF3
 15843                           intcon	equ	0xFF2
 15844                           postinc0	equ	0xFEE
 15845                           wreg	equ	0xFE8
 15846                           indf1	equ	0xFE7
 15847                           fsr1h	equ	0xFE2
 15848                           fsr1l	equ	0xFE1
 15849                           indf2	equ	0xFDF
 15850                           postinc2	equ	0xFDE
 15851                           postdec2	equ	0xFDD
 15852                           plusw2	equ	0xFDB
 15853                           fsr2h	equ	0xFDA
 15854                           fsr2l	equ	0xFD9
 15855                           status	equ	0xFD8
 15856                           
 15857 ;; *************** function _Write_b_eep *****************
 15858 ;; Defined at:
 15859 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 15860 ;; Parameters:    Size  Location     Type
 15861 ;;  badd            2    7[COMRAM] unsigned int 
 15862 ;;  bdat            1    9[COMRAM] unsigned char 
 15863 ;; Auto vars:     Size  Location     Type
 15864 ;;  GIE_BIT_VAL     1   10[COMRAM] unsigned char 
 15865 ;; Return value:  Size  Location     Type
 15866 ;;		None               void
 15867 ;; Registers used:
 15868 ;;		wreg, status,2
 15869 ;; Tracked objects:
 15870 ;;		On entry : 0/0
 15871 ;;		On exit  : 0/0
 15872 ;;		Unchanged: 0/0
 15873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15874 ;;      Params:         3       0       0       0       0       0       0
 15875 ;;      Locals:         1       0       0       0       0       0       0
 15876 ;;      Temps:          0       0       0       0       0       0       0
 15877 ;;      Totals:         4       0       0       0       0       0       0
 15878 ;;Total ram usage:        4 bytes
 15879 ;; Hardware stack levels used:    1
 15880 ;; Hardware stack levels required when called:    2
 15881 ;; This function calls:
 15882 ;;		Nothing
 15883 ;; This function is called by:
 15884 ;;		_main
 15885 ;;		_init_app_eeprom
 15886 ;;		_vscp_setGUID
 15887 ;;		_vscp_setManufacturerId
 15888 ;;		_vscp_writeNicknamePermanent
 15889 ;;		_vscp_writeAppReg
 15890 ;;		_doActionDisable
 15891 ;;		_vscp_setUserID
 15892 ;;		_vscp_setSegmentCRC
 15893 ;;		_vscp_setControlByte
 15894 ;;		_vscp_goBootloaderMode
 15895 ;; This function uses a non-reentrant model
 15896 ;;
 15897                           
 15898                           	psect	text67
 15899  00399C                     __ptext67:
 15900                           	opt stack 0
 15901  00399C                     _Write_b_eep:
 15902                           	opt stack 26
 15903                           
 15904                           ;incstack = 0
 15905                           ;incstack = 0
 15906  00399C  C008  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 15907  0039A0  C00A  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 15908  0039A4  9EA6               	bcf	4006,7,c	;volatile
 15909  0039A6  9CA6               	bcf	4006,6,c	;volatile
 15910  0039A8  84A6               	bsf	4006,2,c	;volatile
 15911  0039AA  0E00               	movlw	0
 15912  0039AC  BEF2               	btfsc	intcon,7,c	;volatile
 15913  0039AE  0E01               	movlw	1
 15914  0039B0  6E0B               	movwf	Write_b_eep@GIE_BIT_VAL,c
 15915  0039B2  9EF2               	bcf	intcon,7,c	;volatile
 15916  0039B4  0E55               	movlw	85
 15917  0039B6  6EA7               	movwf	4007,c	;volatile
 15918  0039B8  0EAA               	movlw	170
 15919  0039BA  6EA7               	movwf	4007,c	;volatile
 15920  0039BC  82A6               	bsf	4006,1,c	;volatile
 15921  0039BE                     l1330:
 15922  0039BE  B2A6               	btfsc	4006,1,c	;volatile
 15923  0039C0  D7FE               	goto	l1330
 15924  0039C2  B00B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 15925  0039C4  D002               	bra	u4275
 15926  0039C6  9EF2               	bcf	intcon,7,c	;volatile
 15927  0039C8  D001               	bra	u4276
 15928  0039CA                     u4275:
 15929  0039CA  8EF2               	bsf	intcon,7,c	;volatile
 15930  0039CC                     u4276:
 15931  0039CC  94A6               	bcf	4006,2,c	;volatile
 15932  0039CE  0012               	return	
 15933  0039D0                     __end_of_Write_b_eep:
 15934                           	opt stack 0
 15935                           tblptru	equ	0xFF8
 15936                           tblptrh	equ	0xFF7
 15937                           tblptrl	equ	0xFF6
 15938                           tablat	equ	0xFF5
 15939                           prodh	equ	0xFF4
 15940                           prodl	equ	0xFF3
 15941                           intcon	equ	0xFF2
 15942                           postinc0	equ	0xFEE
 15943                           wreg	equ	0xFE8
 15944                           indf1	equ	0xFE7
 15945                           fsr1h	equ	0xFE2
 15946                           fsr1l	equ	0xFE1
 15947                           indf2	equ	0xFDF
 15948                           postinc2	equ	0xFDE
 15949                           postdec2	equ	0xFDD
 15950                           plusw2	equ	0xFDB
 15951                           fsr2h	equ	0xFDA
 15952                           fsr2l	equ	0xFD9
 15953                           status	equ	0xFD8
 15954                           
 15955 ;; *************** function _Busy_eep *****************
 15956 ;; Defined at:
 15957 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 15958 ;; Parameters:    Size  Location     Type
 15959 ;;		None
 15960 ;; Auto vars:     Size  Location     Type
 15961 ;;		None
 15962 ;; Return value:  Size  Location     Type
 15963 ;;		None               void
 15964 ;; Registers used:
 15965 ;;		None
 15966 ;; Tracked objects:
 15967 ;;		On entry : 0/0
 15968 ;;		On exit  : 0/0
 15969 ;;		Unchanged: 0/0
 15970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15971 ;;      Params:         0       0       0       0       0       0       0
 15972 ;;      Locals:         0       0       0       0       0       0       0
 15973 ;;      Temps:          0       0       0       0       0       0       0
 15974 ;;      Totals:         0       0       0       0       0       0       0
 15975 ;;Total ram usage:        0 bytes
 15976 ;; Hardware stack levels used:    1
 15977 ;; Hardware stack levels required when called:    2
 15978 ;; This function calls:
 15979 ;;		Nothing
 15980 ;; This function is called by:
 15981 ;;		_main
 15982 ;;		_init_app_eeprom
 15983 ;;		_vscp_setGUID
 15984 ;;		_vscp_setManufacturerId
 15985 ;;		_vscp_writeNicknamePermanent
 15986 ;;		_vscp_writeAppReg
 15987 ;;		_doActionDisable
 15988 ;;		_vscp_setUserID
 15989 ;;		_vscp_setSegmentCRC
 15990 ;;		_vscp_setControlByte
 15991 ;;		_vscp_goBootloaderMode
 15992 ;; This function uses a non-reentrant model
 15993 ;;
 15994                           
 15995                           	psect	text68
 15996  003DD2                     __ptext68:
 15997                           	opt stack 0
 15998  003DD2                     _Busy_eep:
 15999                           	opt stack 26
 16000  003DD2                     l1305:
 16001  003DD2  A2A6               	btfss	4006,1,c	;volatile
 16002  003DD4  0012               	return	
 16003  003DD6  D7FD               	goto	l1305
 16004  003DD8                     __end_of_Busy_eep:
 16005                           	opt stack 0
 16006                           tblptru	equ	0xFF8
 16007                           tblptrh	equ	0xFF7
 16008                           tblptrl	equ	0xFF6
 16009                           tablat	equ	0xFF5
 16010                           prodh	equ	0xFF4
 16011                           prodl	equ	0xFF3
 16012                           intcon	equ	0xFF2
 16013                           postinc0	equ	0xFEE
 16014                           wreg	equ	0xFE8
 16015                           indf1	equ	0xFE7
 16016                           fsr1h	equ	0xFE2
 16017                           fsr1l	equ	0xFE1
 16018                           indf2	equ	0xFDF
 16019                           postinc2	equ	0xFDE
 16020                           postdec2	equ	0xFDD
 16021                           plusw2	equ	0xFDB
 16022                           fsr2h	equ	0xFDA
 16023                           fsr2l	equ	0xFD9
 16024                           status	equ	0xFD8
 16025                           
 16026 ;; *************** function _init *****************
 16027 ;; Defined at:
 16028 ;;		line 318 in file "../main.c"
 16029 ;; Parameters:    Size  Location     Type
 16030 ;;		None
 16031 ;; Auto vars:     Size  Location     Type
 16032 ;;		None
 16033 ;; Return value:  Size  Location     Type
 16034 ;;		None               void
 16035 ;; Registers used:
 16036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16037 ;; Tracked objects:
 16038 ;;		On entry : 0/0
 16039 ;;		On exit  : 0/0
 16040 ;;		Unchanged: 0/0
 16041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16042 ;;      Params:         0       0       0       0       0       0       0
 16043 ;;      Locals:         0       0       0       0       0       0       0
 16044 ;;      Temps:          0       0       0       0       0       0       0
 16045 ;;      Totals:         0       0       0       0       0       0       0
 16046 ;;Total ram usage:        0 bytes
 16047 ;; Hardware stack levels used:    1
 16048 ;; Hardware stack levels required when called:    4
 16049 ;; This function calls:
 16050 ;;		_WriteTimer0
 16051 ;;		_init_app_ram
 16052 ;;		_OpenTimer0
 16053 ;;		_ECANInitialize
 16054 ;; This function is called by:
 16055 ;;		_main
 16056 ;; This function uses a non-reentrant model
 16057 ;;
 16058                           
 16059                           	psect	text69
 16060  00395E                     __ptext69:
 16061                           	opt stack 0
 16062  00395E                     _init:
 16063                           	opt stack 26
 16064                           
 16065                           ;main.c: 323: init_app_ram();
 16066                           
 16067                           ;incstack = 0
 16068                           ;incstack = 0
 16069  00395E  EC85  F018         	call	_init_app_ram	;wreg free
 16070                           
 16071                           ;main.c: 334: TRISA = 0x00;
 16072  003962  6A92               	clrf	3986,c	;volatile
 16073                           
 16074                           ;main.c: 335: PORTA = 0x00;
 16075  003964  6A80               	clrf	3968,c	;volatile
 16076                           
 16077                           ;main.c: 347: TRISB = 0b00001000;
 16078  003966  0E08               	movlw	8
 16079  003968  6E93               	movwf	3987,c	;volatile
 16080                           
 16081                           ;main.c: 348: PORTB = 0x00;
 16082  00396A  6A81               	clrf	3969,c	;volatile
 16083                           
 16084                           ;main.c: 358: TRISC = 0b00000001;
 16085  00396C  0E01               	movlw	1
 16086  00396E  6E94               	movwf	3988,c	;volatile
 16087                           
 16088                           ;main.c: 359: PORTC = 0x00;
 16089  003970  6A82               	clrf	3970,c	;volatile
 16090                           
 16091                           ;main.c: 385: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 16092  003972  0E92               	movlw	146
 16093  003974  EC1D  F01E         	call	_OpenTimer0
 16094                           
 16095                           ;main.c: 386: WriteTimer0( 0xfb1d );
 16096  003978  0EFB               	movlw	251
 16097  00397A  6E09               	movwf	?_WriteTimer0+1,c
 16098  00397C  0E1D               	movlw	29
 16099  00397E  6E08               	movwf	?_WriteTimer0,c
 16100  003980  ECAC  F01E         	call	_WriteTimer0	;wreg free
 16101                           
 16102                           ;main.c: 389: LATBbits.LATB4 = 0;
 16103  003984  988A               	bcf	3978,4,c	;volatile
 16104                           
 16105                           ;main.c: 390: LATBbits.LATB1 = 0;
 16106  003986  928A               	bcf	3978,1,c	;volatile
 16107                           
 16108                           ;main.c: 391: LATBbits.LATB0 = 0;
 16109  003988  908A               	bcf	3978,0,c	;volatile
 16110                           
 16111                           ;main.c: 392: LATCbits.LATC7 = 0;
 16112  00398A  9E8B               	bcf	3979,7,c	;volatile
 16113                           
 16114                           ;main.c: 393: LATCbits.LATC6 = 0;
 16115  00398C  9C8B               	bcf	3979,6,c	;volatile
 16116                           
 16117                           ;main.c: 394: LATCbits.LATC5 = 0;
 16118  00398E  9A8B               	bcf	3979,5,c	;volatile
 16119                           
 16120                           ;main.c: 395: LATCbits.LATC4 = 0;
 16121  003990  988B               	bcf	3979,4,c	;volatile
 16122                           
 16123                           ;main.c: 398: ECANInitialize();
 16124  003992  EC4F  F01B         	call	_ECANInitialize	;wreg free
 16125                           
 16126                           ;main.c: 419: INTCONbits.PEIE = 1;
 16127  003996  8CF2               	bsf	intcon,6,c	;volatile
 16128                           
 16129                           ;main.c: 422: INTCONbits.GIE = 1;
 16130  003998  8EF2               	bsf	intcon,7,c	;volatile
 16131  00399A  0012               	return	
 16132  00399C                     __end_of_init:
 16133                           	opt stack 0
 16134                           tblptru	equ	0xFF8
 16135                           tblptrh	equ	0xFF7
 16136                           tblptrl	equ	0xFF6
 16137                           tablat	equ	0xFF5
 16138                           prodh	equ	0xFF4
 16139                           prodl	equ	0xFF3
 16140                           intcon	equ	0xFF2
 16141                           postinc0	equ	0xFEE
 16142                           wreg	equ	0xFE8
 16143                           indf1	equ	0xFE7
 16144                           fsr1h	equ	0xFE2
 16145                           fsr1l	equ	0xFE1
 16146                           indf2	equ	0xFDF
 16147                           postinc2	equ	0xFDE
 16148                           postdec2	equ	0xFDD
 16149                           plusw2	equ	0xFDB
 16150                           fsr2h	equ	0xFDA
 16151                           fsr2l	equ	0xFD9
 16152                           status	equ	0xFD8
 16153                           
 16154 ;; *************** function _ECANInitialize *****************
 16155 ;; Defined at:
 16156 ;;		line 168 in file "../ECAN.c"
 16157 ;; Parameters:    Size  Location     Type
 16158 ;;		None
 16159 ;; Auto vars:     Size  Location     Type
 16160 ;;		None
 16161 ;; Return value:  Size  Location     Type
 16162 ;;		None               void
 16163 ;; Registers used:
 16164 ;;		wreg, status,2, status,0, cstack
 16165 ;; Tracked objects:
 16166 ;;		On entry : 0/0
 16167 ;;		On exit  : 0/0
 16168 ;;		Unchanged: 0/0
 16169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16170 ;;      Params:         0       0       0       0       0       0       0
 16171 ;;      Locals:         0       0       0       0       0       0       0
 16172 ;;      Temps:          0       0       0       0       0       0       0
 16173 ;;      Totals:         0       0       0       0       0       0       0
 16174 ;;Total ram usage:        0 bytes
 16175 ;; Hardware stack levels used:    1
 16176 ;; Hardware stack levels required when called:    3
 16177 ;; This function calls:
 16178 ;;		_ECANSetOperationMode
 16179 ;; This function is called by:
 16180 ;;		_init
 16181 ;; This function uses a non-reentrant model
 16182 ;;
 16183                           
 16184                           	psect	text70
 16185  00369E                     __ptext70:
 16186                           	opt stack 0
 16187  00369E                     _ECANInitialize:
 16188                           	opt stack 26
 16189                           
 16190                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 16191                           
 16192                           ;incstack = 0
 16193                           ;incstack = 0
 16194  00369E  0E80               	movlw	128
 16195  0036A0  EC61  F01E         	call	_ECANSetOperationMode
 16196                           
 16197                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 16198  0036A4  0E09               	movlw	9
 16199  0036A6  6E70               	movwf	3952,c	;volatile
 16200                           
 16201                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 16202  0036A8  0EFC               	movlw	252
 16203  0036AA  6E71               	movwf	3953,c	;volatile
 16204                           
 16205                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 16206                           ;ECAN.c: 181: (0 << 6) |
 16207                           ;ECAN.c: 182: (2-1);
 16208  0036AC  0E01               	movlw	1
 16209  0036AE  6E72               	movwf	3954,c	;volatile
 16210                           
 16211                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 16212  0036B0  0E20               	movlw	32
 16213  0036B2  6E73               	movwf	3955,c	;volatile
 16214                           
 16215                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 16216  0036B4  8E77               	bsf	3959,7,c	;volatile
 16217                           
 16218                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 16219  0036B6  9C77               	bcf	3959,6,c	;volatile
 16220                           
 16221                           ;ECAN.c: 205: RXB0CON = 0;
 16222  0036B8  6A60               	clrf	3936,c	;volatile
 16223                           
 16224                           ;ECAN.c: 211: RXB1CON = 0;
 16225  0036BA  010F               	movlb	15	; () banked
 16226  0036BC  6B50               	clrf	80,b	;volatile
 16227                           
 16228                           ; BSR set to: 15
 16229                           ;ECAN.c: 221: B0CON = 0;
 16230  0036BE  010E               	movlb	14	; () banked
 16231  0036C0  6B20               	clrf	32,b	;volatile
 16232                           
 16233                           ; BSR set to: 14
 16234                           ;ECAN.c: 231: B1CON = 0;
 16235  0036C2  6B30               	clrf	48,b	;volatile
 16236                           
 16237                           ; BSR set to: 14
 16238                           ;ECAN.c: 241: B2CON = 0;
 16239  0036C4  6B40               	clrf	64,b	;volatile
 16240                           
 16241                           ; BSR set to: 14
 16242                           ;ECAN.c: 254: B3CON = 0 << 2;
 16243  0036C6  6B50               	clrf	80,b	;volatile
 16244                           
 16245                           ; BSR set to: 14
 16246                           ;ECAN.c: 264: B4CON = 0 << 2;
 16247  0036C8  6B60               	clrf	96,b	;volatile
 16248                           
 16249                           ; BSR set to: 14
 16250                           ;ECAN.c: 274: B5CON = 0 << 2;
 16251  0036CA  6B70               	clrf	112,b	;volatile
 16252                           
 16253                           ; BSR set to: 14
 16254                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 16255  0036CC  0EE0               	movlw	224
 16256  0036CE  010D               	movlb	13	; () banked
 16257  0036D0  6FF8               	movwf	248,b	;volatile
 16258                           
 16259                           ; BSR set to: 13
 16260                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 16261  0036D2  010F               	movlb	15	; () banked
 16262  0036D4  6B00               	clrf	0,b	;volatile
 16263                           
 16264                           ; BSR set to: 15
 16265  0036D6  0E08               	movlw	8
 16266  0036D8  6F01               	movwf	1,b	;volatile
 16267                           
 16268                           ; BSR set to: 15
 16269  0036DA  6B02               	clrf	2,b	;volatile
 16270                           
 16271                           ; BSR set to: 15
 16272  0036DC  6B03               	clrf	3,b	;volatile
 16273                           
 16274                           ; BSR set to: 15
 16275                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 16276  0036DE  6B04               	clrf	4,b	;volatile
 16277                           
 16278                           ; BSR set to: 15
 16279  0036E0  0EE8               	movlw	232
 16280  0036E2  6F05               	movwf	5,b	;volatile
 16281                           
 16282                           ; BSR set to: 15
 16283  0036E4  0E1A               	movlw	26
 16284  0036E6  6F06               	movwf	6,b	;volatile
 16285                           
 16286                           ; BSR set to: 15
 16287  0036E8  6B07               	clrf	7,b	;volatile
 16288                           
 16289                           ; BSR set to: 15
 16290                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 16291  0036EA  0E03               	movlw	3
 16292  0036EC  010D               	movlb	13	; () banked
 16293  0036EE  6FD4               	movwf	212,b	;volatile
 16294                           
 16295                           ; BSR set to: 13
 16296                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 16297  0036F0  6BD5               	clrf	213,b	;volatile
 16298                           
 16299                           ; BSR set to: 13
 16300                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 16301  0036F2  6BE0               	clrf	224,b	;volatile
 16302                           
 16303                           ; BSR set to: 13
 16304                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 16305  0036F4  0E11               	movlw	17
 16306  0036F6  6FE1               	movwf	225,b	;volatile
 16307                           
 16308                           ; BSR set to: 13
 16309                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 16310  0036F8  6FE2               	movwf	226,b	;volatile
 16311                           
 16312                           ; BSR set to: 13
 16313                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 16314  0036FA  6BE3               	clrf	227,b	;volatile
 16315                           
 16316                           ; BSR set to: 13
 16317                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 16318  0036FC  6BE4               	clrf	228,b	;volatile
 16319                           
 16320                           ; BSR set to: 13
 16321                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 16322  0036FE  6BE5               	clrf	229,b	;volatile
 16323                           
 16324                           ; BSR set to: 13
 16325                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 16326  003700  6BE6               	clrf	230,b	;volatile
 16327                           
 16328                           ; BSR set to: 13
 16329                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 16330  003702  6BE7               	clrf	231,b	;volatile
 16331                           
 16332                           ; BSR set to: 13
 16333                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 16334  003704  0E54               	movlw	84
 16335  003706  6FF0               	movwf	240,b	;volatile
 16336                           
 16337                           ; BSR set to: 13
 16338                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 16339  003708  0E05               	movlw	5
 16340  00370A  6FF1               	movwf	241,b	;volatile
 16341                           
 16342                           ; BSR set to: 13
 16343                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 16344  00370C  6BF2               	clrf	242,b	;volatile
 16345                           
 16346                           ; BSR set to: 13
 16347                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 16348  00370E  6BF2               	clrf	242,b	;volatile
 16349                           
 16350                           ; BSR set to: 13
 16351                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 16352  003710  0E0F               	movlw	15
 16353  003712  010F               	movlb	15	; () banked
 16354  003714  6F18               	movwf	24,b	;volatile
 16355                           
 16356                           ; BSR set to: 15
 16357  003716  0EE0               	movlw	224
 16358  003718  6F19               	movwf	25,b	;volatile
 16359                           
 16360                           ; BSR set to: 15
 16361  00371A  6B1A               	clrf	26,b	;volatile
 16362                           
 16363                           ; BSR set to: 15
 16364  00371C  6B1B               	clrf	27,b	;volatile
 16365                           
 16366                           ; BSR set to: 15
 16367                           ;ECAN.c: 482: RXM0EXIDM = 1;
 16368  00371E  8719               	bsf	25,3,b	;volatile
 16369                           
 16370                           ; BSR set to: 15
 16371                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 16372  003720  0E0F               	movlw	15
 16373  003722  6F1C               	movwf	28,b	;volatile
 16374                           
 16375                           ; BSR set to: 15
 16376  003724  0EE0               	movlw	224
 16377  003726  6F1D               	movwf	29,b	;volatile
 16378                           
 16379                           ; BSR set to: 15
 16380  003728  691E               	setf	30,b	;volatile
 16381                           
 16382                           ; BSR set to: 15
 16383  00372A  6B1F               	clrf	31,b	;volatile
 16384                           
 16385                           ; BSR set to: 15
 16386                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 16387  00372C  871D               	bsf	29,3,b	;volatile
 16388                           
 16389                           ; BSR set to: 15
 16390                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 16391  00372E  0E00               	movlw	0
 16392  003730  EF61  F01E         	goto	_ECANSetOperationMode
 16393  003734                     __end_of_ECANInitialize:
 16394                           	opt stack 0
 16395                           tblptru	equ	0xFF8
 16396                           tblptrh	equ	0xFF7
 16397                           tblptrl	equ	0xFF6
 16398                           tablat	equ	0xFF5
 16399                           prodh	equ	0xFF4
 16400                           prodl	equ	0xFF3
 16401                           intcon	equ	0xFF2
 16402                           postinc0	equ	0xFEE
 16403                           wreg	equ	0xFE8
 16404                           indf1	equ	0xFE7
 16405                           fsr1h	equ	0xFE2
 16406                           fsr1l	equ	0xFE1
 16407                           indf2	equ	0xFDF
 16408                           postinc2	equ	0xFDE
 16409                           postdec2	equ	0xFDD
 16410                           plusw2	equ	0xFDB
 16411                           fsr2h	equ	0xFDA
 16412                           fsr2l	equ	0xFD9
 16413                           status	equ	0xFD8
 16414                           
 16415 ;; *************** function _ECANSetOperationMode *****************
 16416 ;; Defined at:
 16417 ;;		line 1012 in file "../ECAN.c"
 16418 ;; Parameters:    Size  Location     Type
 16419 ;;  mode            1    wreg     enum E16337
 16420 ;; Auto vars:     Size  Location     Type
 16421 ;;  mode            1    7[COMRAM] enum E16337
 16422 ;; Return value:  Size  Location     Type
 16423 ;;		None               void
 16424 ;; Registers used:
 16425 ;;		wreg, status,2, status,0
 16426 ;; Tracked objects:
 16427 ;;		On entry : 0/0
 16428 ;;		On exit  : 0/0
 16429 ;;		Unchanged: 0/0
 16430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16431 ;;      Params:         0       0       0       0       0       0       0
 16432 ;;      Locals:         1       0       0       0       0       0       0
 16433 ;;      Temps:          0       0       0       0       0       0       0
 16434 ;;      Totals:         1       0       0       0       0       0       0
 16435 ;;Total ram usage:        1 bytes
 16436 ;; Hardware stack levels used:    1
 16437 ;; Hardware stack levels required when called:    2
 16438 ;; This function calls:
 16439 ;;		Nothing
 16440 ;; This function is called by:
 16441 ;;		_calculateSetFilterMask
 16442 ;;		_ECANInitialize
 16443 ;; This function uses a non-reentrant model
 16444 ;;
 16445                           
 16446                           	psect	text71
 16447  003CC2                     __ptext71:
 16448                           	opt stack 0
 16449  003CC2                     _ECANSetOperationMode:
 16450                           	opt stack 24
 16451                           
 16452                           ;incstack = 0
 16453                           ;incstack = 0
 16454                           ;ECANSetOperationMode@mode stored from wreg
 16455  003CC2  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 16456                           
 16457                           ;ECAN.c: 1013: CANCON &= 0x1F;
 16458  003CC6  0E1F               	movlw	31
 16459  003CC8  166F               	andwf	3951,f,c	;volatile
 16460                           
 16461                           ;ECAN.c: 1014: CANCON |= mode;
 16462  003CCA  5008               	movf	ECANSetOperationMode@mode,w,c
 16463  003CCC  126F               	iorwf	3951,f,c	;volatile
 16464  003CCE                     l7191:
 16465  003CCE  506F               	movf	3951,w,c	;volatile
 16466  003CD0  0BE0               	andlw	224
 16467  003CD2  1808               	xorwf	ECANSetOperationMode@mode,w,c
 16468  003CD4  B4D8               	btfsc	status,2,c
 16469  003CD6  0012               	return	
 16470  003CD8  D7FA               	goto	l7191
 16471  003CDA                     __end_of_ECANSetOperationMode:
 16472                           	opt stack 0
 16473                           tblptru	equ	0xFF8
 16474                           tblptrh	equ	0xFF7
 16475                           tblptrl	equ	0xFF6
 16476                           tablat	equ	0xFF5
 16477                           prodh	equ	0xFF4
 16478                           prodl	equ	0xFF3
 16479                           intcon	equ	0xFF2
 16480                           postinc0	equ	0xFEE
 16481                           wreg	equ	0xFE8
 16482                           indf1	equ	0xFE7
 16483                           fsr1h	equ	0xFE2
 16484                           fsr1l	equ	0xFE1
 16485                           indf2	equ	0xFDF
 16486                           postinc2	equ	0xFDE
 16487                           postdec2	equ	0xFDD
 16488                           plusw2	equ	0xFDB
 16489                           fsr2h	equ	0xFDA
 16490                           fsr2l	equ	0xFD9
 16491                           status	equ	0xFD8
 16492                           
 16493 ;; *************** function _OpenTimer0 *****************
 16494 ;; Defined at:
 16495 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 16496 ;; Parameters:    Size  Location     Type
 16497 ;;  config          1    wreg     unsigned char 
 16498 ;; Auto vars:     Size  Location     Type
 16499 ;;  config          1    7[COMRAM] unsigned char 
 16500 ;; Return value:  Size  Location     Type
 16501 ;;		None               void
 16502 ;; Registers used:
 16503 ;;		wreg, status,2, status,0
 16504 ;; Tracked objects:
 16505 ;;		On entry : 0/0
 16506 ;;		On exit  : 0/0
 16507 ;;		Unchanged: 0/0
 16508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16509 ;;      Params:         0       0       0       0       0       0       0
 16510 ;;      Locals:         1       0       0       0       0       0       0
 16511 ;;      Temps:          0       0       0       0       0       0       0
 16512 ;;      Totals:         1       0       0       0       0       0       0
 16513 ;;Total ram usage:        1 bytes
 16514 ;; Hardware stack levels used:    1
 16515 ;; Hardware stack levels required when called:    2
 16516 ;; This function calls:
 16517 ;;		Nothing
 16518 ;; This function is called by:
 16519 ;;		_init
 16520 ;; This function uses a non-reentrant model
 16521 ;;
 16522                           
 16523                           	psect	text72
 16524  003C3A                     __ptext72:
 16525                           	opt stack 0
 16526  003C3A                     _OpenTimer0:
 16527                           	opt stack 27
 16528                           
 16529                           ;incstack = 0
 16530                           ;incstack = 0
 16531                           ;OpenTimer0@config stored from wreg
 16532  003C3A  CFE8 F008          	movff	wreg,OpenTimer0@config
 16533  003C3E  5008               	movf	OpenTimer0@config,w,c
 16534  003C40  0B7F               	andlw	127
 16535  003C42  6ED5               	movwf	4053,c	;volatile
 16536  003C44  6AD7               	clrf	4055,c	;volatile
 16537  003C46  6AD6               	clrf	4054,c	;volatile
 16538  003C48  94F2               	bcf	intcon,2,c	;volatile
 16539  003C4A  AE08               	btfss	OpenTimer0@config,7,c
 16540  003C4C  D002               	goto	l1346
 16541  003C4E  8AF2               	bsf	intcon,5,c	;volatile
 16542  003C50  D001               	goto	l1347
 16543  003C52                     l1346:
 16544  003C52  9AF2               	bcf	intcon,5,c	;volatile
 16545  003C54                     l1347:
 16546  003C54  8ED5               	bsf	4053,7,c	;volatile
 16547  003C56  0012               	return	
 16548  003C58                     __end_of_OpenTimer0:
 16549                           	opt stack 0
 16550                           tblptru	equ	0xFF8
 16551                           tblptrh	equ	0xFF7
 16552                           tblptrl	equ	0xFF6
 16553                           tablat	equ	0xFF5
 16554                           prodh	equ	0xFF4
 16555                           prodl	equ	0xFF3
 16556                           intcon	equ	0xFF2
 16557                           postinc0	equ	0xFEE
 16558                           wreg	equ	0xFE8
 16559                           indf1	equ	0xFE7
 16560                           fsr1h	equ	0xFE2
 16561                           fsr1l	equ	0xFE1
 16562                           indf2	equ	0xFDF
 16563                           postinc2	equ	0xFDE
 16564                           postdec2	equ	0xFDD
 16565                           plusw2	equ	0xFDB
 16566                           fsr2h	equ	0xFDA
 16567                           fsr2l	equ	0xFD9
 16568                           status	equ	0xFD8
 16569                           
 16570 ;; *************** function _init_app_ram *****************
 16571 ;; Defined at:
 16572 ;;		line 432 in file "../main.c"
 16573 ;; Parameters:    Size  Location     Type
 16574 ;;		None
 16575 ;; Auto vars:     Size  Location     Type
 16576 ;;  i               1   11[COMRAM] unsigned char 
 16577 ;; Return value:  Size  Location     Type
 16578 ;;		None               void
 16579 ;; Registers used:
 16580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16581 ;; Tracked objects:
 16582 ;;		On entry : 0/0
 16583 ;;		On exit  : 0/0
 16584 ;;		Unchanged: 0/0
 16585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16586 ;;      Params:         0       0       0       0       0       0       0
 16587 ;;      Locals:         1       0       0       0       0       0       0
 16588 ;;      Temps:          2       0       0       0       0       0       0
 16589 ;;      Totals:         3       0       0       0       0       0       0
 16590 ;;Total ram usage:        3 bytes
 16591 ;; Hardware stack levels used:    1
 16592 ;; Hardware stack levels required when called:    3
 16593 ;; This function calls:
 16594 ;;		_Read_b_eep
 16595 ;; This function is called by:
 16596 ;;		_main
 16597 ;;		_init
 16598 ;;		_vscp_restoreDefaults
 16599 ;; This function uses a non-reentrant model
 16600 ;;
 16601                           
 16602                           	psect	text73
 16603  00310A                     __ptext73:
 16604                           	opt stack 0
 16605  00310A                     _init_app_ram:
 16606                           	opt stack 24
 16607                           
 16608                           ;main.c: 433: uint8_t i;
 16609                           ;main.c: 435: measurement_clock = 0;
 16610                           
 16611                           ;incstack = 0
 16612                           ;incstack = 0
 16613  00310A  0100               	movlb	0	; () banked
 16614  00310C  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
 16615  00310E  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 16616  003110  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 16617  003112  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 16618                           
 16619                           ;main.c: 437: seconds = 0;
 16620  003114  6B8B               	clrf	_seconds& (0+255),b
 16621                           
 16622                           ;main.c: 438: minutes = 0;
 16623  003116  6B89               	clrf	_minutes& (0+255),b
 16624                           
 16625                           ;main.c: 439: hours = 0;
 16626  003118  6B88               	clrf	_hours& (0+255),b
 16627                           
 16628                           ;main.c: 441: relay_pulse_flags = 0;
 16629  00311A  6B8A               	clrf	_relay_pulse_flags& (0+255),b
 16630                           
 16631                           ;main.c: 444: for ( i = 0; i < 8; i++ ) {
 16632  00311C  6A0C               	clrf	init_app_ram@i,c
 16633  00311E                     l7727:
 16634                           
 16635                           ; BSR set to: 0
 16636                           ;main.c: 445: relay_pulse_timer[ i ] = 0;
 16637  00311E  500C               	movf	init_app_ram@i,w,c
 16638  003120  0D02               	mullw	2
 16639  003122  50F3               	movf	prodl,w,c
 16640  003124  0F70               	addlw	low _relay_pulse_timer
 16641  003126  6ED9               	movwf	fsr2l,c
 16642  003128  6ADA               	clrf	fsr2h,c
 16643  00312A  6ADE               	clrf	postinc2,c
 16644  00312C  6ADD               	clrf	postdec2,c
 16645                           
 16646                           ;main.c: 446: relay_protection_timer[ i ] = 0;
 16647  00312E  500C               	movf	init_app_ram@i,w,c
 16648  003130  0D02               	mullw	2
 16649  003132  50F3               	movf	prodl,w,c
 16650  003134  0F60               	addlw	low _relay_protection_timer
 16651  003136  6ED9               	movwf	fsr2l,c
 16652  003138  6ADA               	clrf	fsr2h,c
 16653  00313A  6ADE               	clrf	postinc2,c
 16654  00313C  6ADD               	clrf	postdec2,c
 16655                           
 16656                           ; BSR set to: 0
 16657  00313E  2A0C               	incf	init_app_ram@i,f,c
 16658                           
 16659                           ; BSR set to: 0
 16660  003140  0E07               	movlw	7
 16661  003142  640C               	cpfsgt	init_app_ram@i,c
 16662  003144  D7EC               	goto	l7727
 16663                           
 16664                           ; BSR set to: 0
 16665                           ;main.c: 447: }
 16666                           ;main.c: 449: for ( i=0; i<7; i++ ) {
 16667  003146  6A0C               	clrf	init_app_ram@i,c
 16668  003148                     l7737:
 16669                           
 16670                           ;main.c: 452: if ( Read_b_eep(0x43 + 10 + i) &
 16671                           ;main.c: 453: 0x01 ) {
 16672  003148  0E4D               	movlw	77
 16673  00314A  240C               	addwf	init_app_ram@i,w,c
 16674  00314C  6E08               	movwf	?_Read_b_eep,c
 16675  00314E  6A09               	clrf	?_Read_b_eep+1,c
 16676  003150  0E00               	movlw	0
 16677  003152  2209               	addwfc	?_Read_b_eep+1,f,c
 16678  003154  ECB5  F01E         	call	_Read_b_eep	;wreg free
 16679  003158  6E0A               	movwf	??_init_app_ram& (0+255),c
 16680  00315A  A00A               	btfss	??_init_app_ram,0,c
 16681  00315C  D027               	goto	l7743
 16682                           
 16683                           ;main.c: 455: relay_pulse_flags |= (1<<i);
 16684  00315E  C00C  F00A         	movff	init_app_ram@i,??_init_app_ram
 16685  003162  0E01               	movlw	1
 16686  003164  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16687  003166  2A0A               	incf	??_init_app_ram,f,c
 16688  003168  D002               	goto	u8234
 16689  00316A                     u8235:
 16690  00316A  90D8               	bcf	status,0,c
 16691  00316C  360B               	rlcf	??_init_app_ram+1,f,c
 16692  00316E                     u8234:
 16693  00316E  2E0A               	decfsz	??_init_app_ram,f,c
 16694  003170  D7FC               	goto	u8235
 16695  003172  500B               	movf	??_init_app_ram+1,w,c
 16696  003174  0100               	movlb	0	; () banked
 16697  003176  138A               	iorwf	_relay_pulse_flags& (0+255),f,b
 16698                           
 16699                           ; BSR set to: 0
 16700                           ;main.c: 456: relay_pulse_timer[ i ] =
 16701                           ;main.c: 457: Read_b_eep(0x43 + 18 + i) * 256 +
 16702                           ;main.c: 458: Read_b_eep(0x43 + 19 + i);
 16703  003178  0E55               	movlw	85
 16704  00317A  240C               	addwf	init_app_ram@i,w,c
 16705  00317C  6E08               	movwf	?_Read_b_eep,c
 16706  00317E  6A09               	clrf	?_Read_b_eep+1,c
 16707  003180  0E00               	movlw	0
 16708  003182  2209               	addwfc	?_Read_b_eep+1,f,c
 16709  003184  ECB5  F01E         	call	_Read_b_eep	;wreg free
 16710  003188  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16711  00318A  6A0A               	clrf	??_init_app_ram& (0+255),c
 16712  00318C  0E56               	movlw	86
 16713  00318E  240C               	addwf	init_app_ram@i,w,c
 16714  003190  6E08               	movwf	?_Read_b_eep,c
 16715  003192  6A09               	clrf	?_Read_b_eep+1,c
 16716  003194  0E00               	movlw	0
 16717  003196  2209               	addwfc	?_Read_b_eep+1,f,c
 16718  003198  ECB5  F01E         	call	_Read_b_eep	;wreg free
 16719  00319C  D831               	call	PL58	;call to abstracted procedure
 16720  00319E  0F70               	addlw	low _relay_pulse_timer
 16721  0031A0  6ED9               	movwf	fsr2l,c
 16722  0031A2  6ADA               	clrf	fsr2h,c
 16723  0031A4  C00A  FFDE         	movff	??_init_app_ram,postinc2
 16724  0031A8  C00B  FFDD         	movff	??_init_app_ram+1,postdec2
 16725  0031AC                     l7743:
 16726                           
 16727                           ;main.c: 459: }
 16728                           ;main.c: 462: if ( Read_b_eep(0x43 + 15 + i) & 0x04) {
 16729  0031AC  0E52               	movlw	82
 16730  0031AE  240C               	addwf	init_app_ram@i,w,c
 16731  0031B0  6E08               	movwf	?_Read_b_eep,c
 16732  0031B2  6A09               	clrf	?_Read_b_eep+1,c
 16733  0031B4  0E00               	movlw	0
 16734  0031B6  2209               	addwfc	?_Read_b_eep+1,f,c
 16735  0031B8  ECB5  F01E         	call	_Read_b_eep	;wreg free
 16736  0031BC  6E0A               	movwf	??_init_app_ram& (0+255),c
 16737  0031BE  A40A               	btfss	??_init_app_ram,2,c
 16738  0031C0  D01A               	goto	l7747
 16739                           
 16740                           ;main.c: 463: relay_protection_timer[ i ] =
 16741                           ;main.c: 464: Read_b_eep(0x43 + 44 + i) * 256 +
 16742                           ;main.c: 465: Read_b_eep(0x43 + 45 + i);
 16743  0031C2  0E6F               	movlw	111
 16744  0031C4  240C               	addwf	init_app_ram@i,w,c
 16745  0031C6  6E08               	movwf	?_Read_b_eep,c
 16746  0031C8  6A09               	clrf	?_Read_b_eep+1,c
 16747  0031CA  0E00               	movlw	0
 16748  0031CC  2209               	addwfc	?_Read_b_eep+1,f,c
 16749  0031CE  ECB5  F01E         	call	_Read_b_eep	;wreg free
 16750  0031D2  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16751  0031D4  6A0A               	clrf	??_init_app_ram& (0+255),c
 16752  0031D6  0E70               	movlw	112
 16753  0031D8  240C               	addwf	init_app_ram@i,w,c
 16754  0031DA  6E08               	movwf	?_Read_b_eep,c
 16755  0031DC  6A09               	clrf	?_Read_b_eep+1,c
 16756  0031DE  0E00               	movlw	0
 16757  0031E0  2209               	addwfc	?_Read_b_eep+1,f,c
 16758  0031E2  ECB5  F01E         	call	_Read_b_eep	;wreg free
 16759  0031E6  D80C               	call	PL58	;call to abstracted procedure
 16760  0031E8  0F60               	addlw	low _relay_protection_timer
 16761  0031EA  6ED9               	movwf	fsr2l,c
 16762  0031EC  6ADA               	clrf	fsr2h,c
 16763  0031EE  C00A  FFDE         	movff	??_init_app_ram,postinc2
 16764  0031F2  C00B  FFDD         	movff	??_init_app_ram+1,postdec2
 16765  0031F6                     l7747:
 16766  0031F6  2A0C               	incf	init_app_ram@i,f,c
 16767  0031F8  0E06               	movlw	6
 16768  0031FA  640C               	cpfsgt	init_app_ram@i,c
 16769  0031FC  D7A5               	goto	l7737
 16770  0031FE  0C06               	retlw	6
 16771  003200                     __end_of_init_app_ram:
 16772                           	opt stack 0
 16773  003200                     PL58:
 16774                           	opt stack 24
 16775  003200  260A               	addwf	??_init_app_ram,f,c
 16776  003202  0E00               	movlw	0
 16777  003204  220B               	addwfc	??_init_app_ram+1,f,c
 16778  003206  500C               	movf	init_app_ram@i,w,c
 16779  003208  0D02               	mullw	2
 16780  00320A  50F3               	movf	prodl,w,c
 16781  00320C  0100               	movlb	0	; () banked
 16782  00320E  0012               	return	
 16783  003210                     __end_ofPL58:
 16784                           	opt stack 0
 16785                           tblptru	equ	0xFF8
 16786                           tblptrh	equ	0xFF7
 16787                           tblptrl	equ	0xFF6
 16788                           tablat	equ	0xFF5
 16789                           prodh	equ	0xFF4
 16790                           prodl	equ	0xFF3
 16791                           intcon	equ	0xFF2
 16792                           postinc0	equ	0xFEE
 16793                           wreg	equ	0xFE8
 16794                           indf1	equ	0xFE7
 16795                           fsr1h	equ	0xFE2
 16796                           fsr1l	equ	0xFE1
 16797                           indf2	equ	0xFDF
 16798                           postinc2	equ	0xFDE
 16799                           postdec2	equ	0xFDD
 16800                           plusw2	equ	0xFDB
 16801                           fsr2h	equ	0xFDA
 16802                           fsr2l	equ	0xFD9
 16803                           status	equ	0xFD8
 16804                           
 16805 ;; *************** function _WriteTimer0 *****************
 16806 ;; Defined at:
 16807 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16808 ;; Parameters:    Size  Location     Type
 16809 ;;  timer0          2    7[COMRAM] unsigned int 
 16810 ;; Auto vars:     Size  Location     Type
 16811 ;;  timer           2    9[COMRAM] struct Timers
 16812 ;; Return value:  Size  Location     Type
 16813 ;;		None               void
 16814 ;; Registers used:
 16815 ;;		None
 16816 ;; Tracked objects:
 16817 ;;		On entry : 0/0
 16818 ;;		On exit  : 0/0
 16819 ;;		Unchanged: 0/0
 16820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16821 ;;      Params:         2       0       0       0       0       0       0
 16822 ;;      Locals:         2       0       0       0       0       0       0
 16823 ;;      Temps:          0       0       0       0       0       0       0
 16824 ;;      Totals:         4       0       0       0       0       0       0
 16825 ;;Total ram usage:        4 bytes
 16826 ;; Hardware stack levels used:    1
 16827 ;; Hardware stack levels required when called:    2
 16828 ;; This function calls:
 16829 ;;		Nothing
 16830 ;; This function is called by:
 16831 ;;		_init
 16832 ;; This function uses a non-reentrant model
 16833 ;;
 16834                           
 16835                           	psect	text74
 16836  003D58                     __ptext74:
 16837                           	opt stack 0
 16838  003D58                     _WriteTimer0:
 16839                           	opt stack 27
 16840                           
 16841                           ;incstack = 0
 16842                           ;incstack = 0
 16843  003D58  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 16844  003D5C  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 16845  003D60  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 16846  003D64  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 16847  003D68  0012               	return	
 16848  003D6A                     __end_of_WriteTimer0:
 16849                           	opt stack 0
 16850                           tblptru	equ	0xFF8
 16851                           tblptrh	equ	0xFF7
 16852                           tblptrl	equ	0xFF6
 16853                           tablat	equ	0xFF5
 16854                           prodh	equ	0xFF4
 16855                           prodl	equ	0xFF3
 16856                           intcon	equ	0xFF2
 16857                           postinc0	equ	0xFEE
 16858                           wreg	equ	0xFE8
 16859                           indf1	equ	0xFE7
 16860                           fsr1h	equ	0xFE2
 16861                           fsr1l	equ	0xFE1
 16862                           indf2	equ	0xFDF
 16863                           postinc2	equ	0xFDE
 16864                           postdec2	equ	0xFDD
 16865                           plusw2	equ	0xFDB
 16866                           fsr2h	equ	0xFDA
 16867                           fsr2l	equ	0xFD9
 16868                           status	equ	0xFD8
 16869                           
 16870 ;; *************** function _Read_b_eep *****************
 16871 ;; Defined at:
 16872 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 16873 ;; Parameters:    Size  Location     Type
 16874 ;;  badd            2    7[COMRAM] unsigned int 
 16875 ;; Auto vars:     Size  Location     Type
 16876 ;;		None
 16877 ;; Return value:  Size  Location     Type
 16878 ;;                  1    wreg      unsigned char 
 16879 ;; Registers used:
 16880 ;;		wreg, status,2
 16881 ;; Tracked objects:
 16882 ;;		On entry : 0/0
 16883 ;;		On exit  : 0/0
 16884 ;;		Unchanged: 0/0
 16885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16886 ;;      Params:         2       0       0       0       0       0       0
 16887 ;;      Locals:         0       0       0       0       0       0       0
 16888 ;;      Temps:          0       0       0       0       0       0       0
 16889 ;;      Totals:         2       0       0       0       0       0       0
 16890 ;;Total ram usage:        2 bytes
 16891 ;; Hardware stack levels used:    1
 16892 ;; Hardware stack levels required when called:    2
 16893 ;; This function calls:
 16894 ;;		Nothing
 16895 ;; This function is called by:
 16896 ;;		_init_app_ram
 16897 ;;		_doApplicationOneSecondWork
 16898 ;;		_vscp_readNicknamePermanent
 16899 ;;		_vscp_getZone
 16900 ;;		_vscp_getSubzone
 16901 ;;		_vscp_readAppReg
 16902 ;;		_vscp_writeAppReg
 16903 ;;		_SendInformationEvent
 16904 ;;		_doDM
 16905 ;;		_doActionOn
 16906 ;;		_doActionOff
 16907 ;;		_doActionPulse
 16908 ;;		_doActionStatus
 16909 ;;		_doActionDisable
 16910 ;;		_doActionToggle
 16911 ;;		_vscp_getGUID
 16912 ;;		_vscp_getUserID
 16913 ;;		_vscp_getManufacturerId
 16914 ;;		_vscp_getSegmentCRC
 16915 ;;		_calculateSetFilterMask
 16916 ;; This function uses a non-reentrant model
 16917 ;;
 16918                           
 16919                           	psect	text75
 16920  003D6A                     __ptext75:
 16921                           	opt stack 0
 16922  003D6A                     _Read_b_eep:
 16923                           	opt stack 26
 16924                           
 16925                           ;incstack = 0
 16926                           ;incstack = 0
 16927  003D6A  C008  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 16928  003D6E  9CA6               	bcf	4006,6,c	;volatile
 16929  003D70  9EA6               	bcf	4006,7,c	;volatile
 16930  003D72  80A6               	bsf	4006,0,c	;volatile
 16931  003D74  F000               	nop		;# 
 16932  003D76  F000               	nop		;# 
 16933  003D78  50A8               	movf	4008,w,c	;volatile
 16934  003D7A  0012               	return	
 16935  003D7C                     __end_of_Read_b_eep:
 16936                           	opt stack 0
 16937                           tblptru	equ	0xFF8
 16938                           tblptrh	equ	0xFF7
 16939                           tblptrl	equ	0xFF6
 16940                           tablat	equ	0xFF5
 16941                           prodh	equ	0xFF4
 16942                           prodl	equ	0xFF3
 16943                           intcon	equ	0xFF2
 16944                           postinc0	equ	0xFEE
 16945                           wreg	equ	0xFE8
 16946                           indf1	equ	0xFE7
 16947                           fsr1h	equ	0xFE2
 16948                           fsr1l	equ	0xFE1
 16949                           indf2	equ	0xFDF
 16950                           postinc2	equ	0xFDE
 16951                           postdec2	equ	0xFDD
 16952                           plusw2	equ	0xFDB
 16953                           fsr2h	equ	0xFDA
 16954                           fsr2l	equ	0xFD9
 16955                           status	equ	0xFD8
 16956                           
 16957 ;; *************** function _vscp_readAppReg *****************
 16958 ;; Defined at:
 16959 ;;		line 896 in file "../main.c"
 16960 ;; Parameters:    Size  Location     Type
 16961 ;;  reg             1    wreg     unsigned char 
 16962 ;; Auto vars:     Size  Location     Type
 16963 ;;  reg             1   10[COMRAM] unsigned char 
 16964 ;;  rv              1    9[COMRAM] unsigned char 
 16965 ;; Return value:  Size  Location     Type
 16966 ;;                  1    wreg      unsigned char 
 16967 ;; Registers used:
 16968 ;;		wreg, status,2, status,0, cstack
 16969 ;; Tracked objects:
 16970 ;;		On entry : F/0
 16971 ;;		On exit  : 0/0
 16972 ;;		Unchanged: 0/0
 16973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16974 ;;      Params:         0       0       0       0       0       0       0
 16975 ;;      Locals:         2       0       0       0       0       0       0
 16976 ;;      Temps:          0       0       0       0       0       0       0
 16977 ;;      Totals:         2       0       0       0       0       0       0
 16978 ;;Total ram usage:        2 bytes
 16979 ;; Hardware stack levels used:    1
 16980 ;; Hardware stack levels required when called:    3
 16981 ;; This function calls:
 16982 ;;		_Read_b_eep
 16983 ;; This function is called by:
 16984 ;;		_vscp_readRegister
 16985 ;;		_vscp_handleProtocolEvent
 16986 ;; This function uses a non-reentrant model
 16987 ;;
 16988                           
 16989                           	psect	text76
 16990  00354A                     __ptext76:
 16991                           	opt stack 0
 16992  00354A                     _vscp_readAppReg:
 16993                           	opt stack 25
 16994                           
 16995                           ;incstack = 0
 16996                           ;incstack = 0
 16997                           ;vscp_readAppReg@reg stored from wreg
 16998  00354A  CFE8 F00B          	movff	wreg,vscp_readAppReg@reg
 16999                           
 17000                           ; BSR set to: 0
 17001                           ;main.c: 897: uint8_t rv;
 17002                           ;main.c: 899: rv = 0x00;
 17003  00354E  6A0A               	clrf	vscp_readAppReg@rv,c
 17004                           
 17005                           ; BSR set to: 0
 17006                           ;main.c: 902: if ( reg == 0x00 ) {
 17007  003550  660B               	tstfsz	vscp_readAppReg@reg,c
 17008  003552  D006               	goto	l8527
 17009                           
 17010                           ; BSR set to: 0
 17011                           ;main.c: 903: rv = Read_b_eep(0x43 + 0);
 17012  003554  6A09               	clrf	?_Read_b_eep+1,c
 17013  003556  0E43               	movlw	67
 17014  003558  6E08               	movwf	?_Read_b_eep,c
 17015  00355A  ECB5  F01E         	call	_Read_b_eep	;wreg free
 17016  00355E  D04D               	goto	L63
 17017  003560                     l8527:
 17018                           
 17019                           ; BSR set to: 0
 17020                           ;main.c: 906: else if ( reg == 0x01 ) {
 17021  003560  040B               	decf	vscp_readAppReg@reg,w,c
 17022  003562  E106               	bnz	l8531
 17023                           
 17024                           ; BSR set to: 0
 17025                           ;main.c: 907: rv = Read_b_eep(0x43 + 1);
 17026  003564  6A09               	clrf	?_Read_b_eep+1,c
 17027  003566  0E44               	movlw	68
 17028  003568  6E08               	movwf	?_Read_b_eep,c
 17029  00356A  ECB5  F01E         	call	_Read_b_eep	;wreg free
 17030  00356E  D045               	goto	L63
 17031  003570                     l8531:
 17032                           
 17033                           ; BSR set to: 0
 17034                           ;main.c: 909: else if ( (reg >= 2) && (reg < 10) ) {
 17035  003570  0E01               	movlw	1
 17036  003572  640B               	cpfsgt	vscp_readAppReg@reg,c
 17037  003574  D034               	goto	l8555
 17038                           
 17039                           ; BSR set to: 0
 17040  003576  0E0A               	movlw	10
 17041  003578  600B               	cpfslt	vscp_readAppReg@reg,c
 17042  00357A  D031               	goto	l8555
 17043  00357C  D01E               	goto	l8553
 17044  00357E                     l8537:
 17045                           
 17046                           ; BSR set to: 0
 17047                           ;main.c: 915: rv = LATBbits.LATB4;
 17048  00357E  0E00               	movlw	0
 17049  003580  B88A               	btfsc	3978,4,c	;volatile
 17050  003582  0E01               	movlw	1
 17051  003584  D03A               	goto	L63
 17052  003586                     l8539:
 17053                           
 17054                           ; BSR set to: 0
 17055                           ;main.c: 920: rv = LATBbits.LATB1;
 17056  003586  0E00               	movlw	0
 17057  003588  B28A               	btfsc	3978,1,c	;volatile
 17058  00358A  0E01               	movlw	1
 17059  00358C  D036               	goto	L63
 17060  00358E                     l8541:
 17061                           
 17062                           ; BSR set to: 0
 17063                           ;main.c: 925: rv = LATBbits.LATB0;
 17064  00358E  0E00               	movlw	0
 17065  003590  B08A               	btfsc	3978,0,c	;volatile
 17066  003592  0E01               	movlw	1
 17067  003594  D032               	goto	L63
 17068  003596                     l8543:
 17069                           
 17070                           ; BSR set to: 0
 17071                           ;main.c: 930: rv = LATCbits.LATC7;
 17072  003596  0E00               	movlw	0
 17073  003598  BE8B               	btfsc	3979,7,c	;volatile
 17074  00359A  0E01               	movlw	1
 17075  00359C  D02E               	goto	L63
 17076  00359E                     l8545:
 17077                           
 17078                           ; BSR set to: 0
 17079                           ;main.c: 935: rv = LATCbits.LATC6;
 17080  00359E  0E00               	movlw	0
 17081  0035A0  BC8B               	btfsc	3979,6,c	;volatile
 17082  0035A2  0E01               	movlw	1
 17083  0035A4  D02A               	goto	L63
 17084  0035A6                     l8547:
 17085                           
 17086                           ; BSR set to: 0
 17087                           ;main.c: 940: rv = LATCbits.LATC5;
 17088  0035A6  0E00               	movlw	0
 17089  0035A8  BA8B               	btfsc	3979,5,c	;volatile
 17090  0035AA  0E01               	movlw	1
 17091  0035AC  D026               	goto	L63
 17092  0035AE                     l8549:
 17093                           
 17094                           ; BSR set to: 0
 17095                           ;main.c: 945: rv = LATCbits.LATC4;
 17096  0035AE  0E00               	movlw	0
 17097  0035B0  B88B               	btfsc	3979,4,c	;volatile
 17098  0035B2  0E01               	movlw	1
 17099  0035B4  D022               	goto	L63
 17100  0035B6                     l292:
 17101                           
 17102                           ; BSR set to: 0
 17103                           ;main.c: 950: rv = 0;
 17104  0035B6  6A0A               	clrf	vscp_readAppReg@rv,c
 17105                           
 17106                           ;main.c: 951: break;
 17107  0035B8  D021               	goto	l8561
 17108  0035BA                     l8553:
 17109                           
 17110                           ; BSR set to: 0
 17111  0035BA  500B               	movf	vscp_readAppReg@reg,w,c
 17112                           
 17113                           ; Switch size 1, requested type "space"
 17114                           ; Number of cases is 8, Range of values is 2 to 9
 17115                           ; switch strategies available:
 17116                           ; Name         Instructions Cycles
 17117                           ; simple_byte           25    13 (average)
 17118                           ;	Chosen strategy is simple_byte
 17119  0035BC  0A02               	xorlw	2	; case 2
 17120  0035BE  E0DF               	bz	l8537
 17121  0035C0  0A01               	xorlw	1	; case 3
 17122  0035C2  E0E1               	bz	l8539
 17123  0035C4  0A07               	xorlw	7	; case 4
 17124  0035C6  E0E3               	bz	l8541
 17125  0035C8  0A01               	xorlw	1	; case 5
 17126  0035CA  E0E5               	bz	l8543
 17127  0035CC  0A03               	xorlw	3	; case 6
 17128  0035CE  E0E7               	bz	l8545
 17129  0035D0  0A01               	xorlw	1	; case 7
 17130  0035D2  E0E9               	bz	l8547
 17131  0035D4  0A0F               	xorlw	15	; case 8
 17132  0035D6  E0EB               	bz	l8549
 17133  0035D8  0A01               	xorlw	1	; case 9
 17134  0035DA  E0ED               	bz	l292
 17135  0035DC  D00F               	goto	l8561
 17136  0035DE                     l8555:
 17137                           
 17138                           ; BSR set to: 0
 17139                           ;main.c: 956: else if ( ( reg >= 10 ) &&
 17140                           ;main.c: 957: (reg < (72 + 7 * 8 ) ) ) {
 17141  0035DE  0E09               	movlw	9
 17142  0035E0  640B               	cpfsgt	vscp_readAppReg@reg,c
 17143  0035E2  D00C               	goto	l8561
 17144                           
 17145                           ; BSR set to: 0
 17146  0035E4  0E80               	movlw	128
 17147  0035E6  600B               	cpfslt	vscp_readAppReg@reg,c
 17148  0035E8  D009               	goto	l8561
 17149                           
 17150                           ; BSR set to: 0
 17151                           ;main.c: 958: rv = Read_b_eep(0x43 + reg);
 17152  0035EA  0E43               	movlw	67
 17153  0035EC  240B               	addwf	vscp_readAppReg@reg,w,c
 17154  0035EE  6E08               	movwf	?_Read_b_eep,c
 17155  0035F0  6A09               	clrf	?_Read_b_eep+1,c
 17156  0035F2  0E00               	movlw	0
 17157  0035F4  2209               	addwfc	?_Read_b_eep+1,f,c
 17158  0035F6  ECB5  F01E         	call	_Read_b_eep	;wreg free
 17159  0035FA                     L63:
 17160  0035FA  6E0A               	movwf	vscp_readAppReg@rv,c
 17161  0035FC                     l8561:
 17162                           
 17163                           ;main.c: 959: }
 17164                           ;main.c: 961: return rv;
 17165  0035FC  500A               	movf	vscp_readAppReg@rv,w,c
 17166  0035FE  0012               	return	
 17167  003600                     __end_of_vscp_readAppReg:
 17168                           	opt stack 0
 17169                           tblptru	equ	0xFF8
 17170                           tblptrh	equ	0xFF7
 17171                           tblptrl	equ	0xFF6
 17172                           tablat	equ	0xFF5
 17173                           prodh	equ	0xFF4
 17174                           prodl	equ	0xFF3
 17175                           intcon	equ	0xFF2
 17176                           postinc0	equ	0xFEE
 17177                           wreg	equ	0xFE8
 17178                           indf1	equ	0xFE7
 17179                           fsr1h	equ	0xFE2
 17180                           fsr1l	equ	0xFE1
 17181                           indf2	equ	0xFDF
 17182                           postinc2	equ	0xFDE
 17183                           postdec2	equ	0xFDD
 17184                           plusw2	equ	0xFDB
 17185                           fsr2h	equ	0xFDA
 17186                           fsr2l	equ	0xFD9
 17187                           status	equ	0xFD8
 17188                           
 17189 ;; *************** function _interrupt_at_low_vector *****************
 17190 ;; Defined at:
 17191 ;;		line 133 in file "../main.c"
 17192 ;; Parameters:    Size  Location     Type
 17193 ;;		None
 17194 ;; Auto vars:     Size  Location     Type
 17195 ;;		None
 17196 ;; Return value:  Size  Location     Type
 17197 ;;		None               void
 17198 ;; Registers used:
 17199 ;;		wreg, status,2, status,0, cstack
 17200 ;; Tracked objects:
 17201 ;;		On entry : 0/0
 17202 ;;		On exit  : 0/0
 17203 ;;		Unchanged: 0/0
 17204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17205 ;;      Params:         0       0       0       0       0       0       0
 17206 ;;      Locals:         0       0       0       0       0       0       0
 17207 ;;      Temps:          3       0       0       0       0       0       0
 17208 ;;      Totals:         3       0       0       0       0       0       0
 17209 ;;Total ram usage:        3 bytes
 17210 ;; Hardware stack levels used:    1
 17211 ;; Hardware stack levels required when called:    1
 17212 ;; This function calls:
 17213 ;;		i1_WriteTimer0
 17214 ;; This function is called by:
 17215 ;;		Interrupt level 1
 17216 ;; This function uses a non-reentrant model
 17217 ;;
 17218                           
 17219                           	psect	intcodelo
 17220  000018                     __pintcodelo:
 17221                           	opt stack 0
 17222  000018                     _interrupt_at_low_vector:
 17223                           	opt stack 21
 17224                           
 17225                           ;incstack = 0
 17226  000018  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 17227  00001C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 17228  000020  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 17229  000024                     
 17230                           ;main.c: 135: if ( INTCONbits.TMR0IF ) {
 17231  000024  A4F2               	btfss	intcon,2,c	;volatile
 17232  000026  D001               	goto	i1u802_21
 17233  000028  D001               	goto	i1u802_20
 17234  00002A                     i1u802_21:
 17235  00002A  D03F               	goto	i1l147
 17236  00002C                     i1u802_20:
 17237  00002C                     
 17238                           ;main.c: 138: WriteTimer0(0xfb1d);
 17239  00002C  0EFB               	movlw	251
 17240  00002E  6E02               	movwf	?i1_WriteTimer0+1,c
 17241  000030  0E1D               	movlw	29
 17242  000032  6E01               	movwf	?i1_WriteTimer0,c
 17243  000034  ECBE  F01E         	call	i1_WriteTimer0	;wreg free
 17244  000038                     
 17245                           ;main.c: 140: vscp_timer++;
 17246  000038  0100               	movlb	0	; () banked
 17247  00003A  4B86               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 17248  00003C  2B87               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 17249  00003E                     
 17250                           ; BSR set to: 0
 17251                           ;main.c: 141: vscp_configtimer++;
 17252  00003E  4B84               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 17253  000040  2B85               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 17254  000042                     
 17255                           ; BSR set to: 0
 17256                           ;main.c: 142: measurement_clock++;
 17257  000042  0E01               	movlw	1
 17258  000044  2780               	addwf	_measurement_clock& (0+255),f,b	;volatile
 17259  000046  0E00               	movlw	0
 17260  000048  2381               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 17261  00004A  0E00               	movlw	0
 17262  00004C  2382               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 17263  00004E  0E00               	movlw	0
 17264  000050  2383               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 17265  000052                     
 17266                           ; BSR set to: 0
 17267                           ;main.c: 143: sendTimer++;
 17268  000052  2B8C               	incf	_sendTimer& (0+255),f,b	;volatile
 17269  000054                     
 17270                           ; BSR set to: 0
 17271                           ;main.c: 146: if ( PORTCbits.RC0 ) {
 17272  000054  A082               	btfss	3970,0,c	;volatile
 17273  000056  D001               	goto	i1u803_21
 17274  000058  D001               	goto	i1u803_20
 17275  00005A                     i1u803_21:
 17276  00005A  D002               	goto	i1l7549
 17277  00005C                     i1u803_20:
 17278  00005C                     
 17279                           ; BSR set to: 0
 17280                           ;main.c: 147: vscp_initbtncnt = 0;
 17281  00005C  6B8F               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 17282                           
 17283                           ;main.c: 148: } else {
 17284  00005E  D001               	goto	i1l139
 17285  000060                     i1l7549:
 17286                           
 17287                           ; BSR set to: 0
 17288                           ;main.c: 150: vscp_initbtncnt++;
 17289  000060  2B8F               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 17290  000062                     i1l139:
 17291                           
 17292                           ; BSR set to: 0
 17293                           ;main.c: 151: }
 17294                           ;main.c: 154: vscp_statuscnt++;
 17295  000062  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 17296  000064                     
 17297                           ; BSR set to: 0
 17298                           ;main.c: 155: if ( ( 0x02 == vscp_initledfunc ) &&
 17299                           ;main.c: 156: ( vscp_statuscnt > 100 ) ) {
 17300  000064  5056               	movf	_vscp_initledfunc,w,c
 17301  000066  0A02               	xorlw	2
 17302  000068  A4D8               	btfss	status,2,c
 17303  00006A  D001               	goto	i1u804_21
 17304  00006C  D001               	goto	i1u804_20
 17305  00006E                     i1u804_21:
 17306  00006E  D00E               	goto	i1l7559
 17307  000070                     i1u804_20:
 17308  000070                     
 17309                           ; BSR set to: 0
 17310  000070  0E64               	movlw	100
 17311  000072  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 17312  000074  D001               	goto	i1u805_21
 17313  000076  D001               	goto	i1u805_20
 17314  000078                     i1u805_21:
 17315  000078  D009               	goto	i1l7559
 17316  00007A                     i1u805_20:
 17317  00007A                     
 17318                           ; BSR set to: 0
 17319                           ;main.c: 158: if ( PORTCbits.RC1 ) {
 17320  00007A  A282               	btfss	3970,1,c	;volatile
 17321  00007C  D001               	goto	i1u806_21
 17322  00007E  D001               	goto	i1u806_20
 17323  000080                     i1u806_21:
 17324  000080  D002               	goto	i1l141
 17325  000082                     i1u806_20:
 17326  000082                     
 17327                           ; BSR set to: 0
 17328                           ;main.c: 159: PORTCbits.RC1 = 0;
 17329  000082  9282               	bcf	3970,1,c	;volatile
 17330                           
 17331                           ;main.c: 160: }
 17332  000084  D001               	goto	i1l142
 17333  000086                     i1l141:
 17334                           
 17335                           ; BSR set to: 0
 17336                           ;main.c: 161: else {
 17337                           ;main.c: 162: PORTCbits.RC1 = 1;
 17338  000086  8282               	bsf	3970,1,c	;volatile
 17339  000088                     i1l142:
 17340                           
 17341                           ; BSR set to: 0
 17342                           ;main.c: 163: }
 17343                           ;main.c: 165: vscp_statuscnt = 0;
 17344  000088  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17345                           
 17346                           ;main.c: 167: }
 17347  00008A  D00E               	goto	i1l143
 17348  00008C                     i1l7559:
 17349                           
 17350                           ; BSR set to: 0
 17351                           ;main.c: 168: else if (0x01 == vscp_initledfunc) {
 17352  00008C  0456               	decf	_vscp_initledfunc,w,c
 17353  00008E  A4D8               	btfss	status,2,c
 17354  000090  D001               	goto	i1u807_21
 17355  000092  D001               	goto	i1u807_20
 17356  000094                     i1u807_21:
 17357  000094  D003               	goto	i1l144
 17358  000096                     i1u807_20:
 17359  000096                     
 17360                           ; BSR set to: 0
 17361                           ;main.c: 169: PORTCbits.RC1 = 1;
 17362  000096  8282               	bsf	3970,1,c	;volatile
 17363                           
 17364                           ;main.c: 170: vscp_statuscnt = 0;
 17365  000098  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17366                           
 17367                           ;main.c: 171: }
 17368  00009A  D006               	goto	i1l143
 17369  00009C                     i1l144:
 17370                           
 17371                           ; BSR set to: 0
 17372                           ;main.c: 172: else if (0x00 == vscp_initledfunc) {
 17373  00009C  6656               	tstfsz	_vscp_initledfunc,c
 17374  00009E  D001               	goto	i1u808_21
 17375  0000A0  D001               	goto	i1u808_20
 17376  0000A2                     i1u808_21:
 17377  0000A2  D002               	goto	i1l143
 17378  0000A4                     i1u808_20:
 17379  0000A4                     
 17380                           ; BSR set to: 0
 17381                           ;main.c: 173: PORTCbits.RC1 = 0;
 17382  0000A4  9282               	bcf	3970,1,c	;volatile
 17383                           
 17384                           ;main.c: 174: vscp_statuscnt = 0;
 17385  0000A6  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17386  0000A8                     i1l143:
 17387                           
 17388                           ; BSR set to: 0
 17389                           ;main.c: 175: }
 17390                           ;main.c: 177: INTCONbits.TMR0IF = 0;
 17391  0000A8  94F2               	bcf	intcon,2,c	;volatile
 17392  0000AA                     i1l147:
 17393  0000AA  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 17394  0000AE  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 17395  0000B2  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 17396  0000B6  0010               	retfie	
 17397  0000B8                     __end_of_interrupt_at_low_vector:
 17398                           	opt stack 0
 17399                           tblptru	equ	0xFF8
 17400                           tblptrh	equ	0xFF7
 17401                           tblptrl	equ	0xFF6
 17402                           tablat	equ	0xFF5
 17403                           prodh	equ	0xFF4
 17404                           prodl	equ	0xFF3
 17405                           intcon	equ	0xFF2
 17406                           postinc0	equ	0xFEE
 17407                           wreg	equ	0xFE8
 17408                           indf1	equ	0xFE7
 17409                           fsr1h	equ	0xFE2
 17410                           fsr1l	equ	0xFE1
 17411                           bsr	equ	0xFE0
 17412                           indf2	equ	0xFDF
 17413                           postinc2	equ	0xFDE
 17414                           postdec2	equ	0xFDD
 17415                           plusw2	equ	0xFDB
 17416                           fsr2h	equ	0xFDA
 17417                           fsr2l	equ	0xFD9
 17418                           status	equ	0xFD8
 17419                           
 17420 ;; *************** function i1_WriteTimer0 *****************
 17421 ;; Defined at:
 17422 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 17423 ;; Parameters:    Size  Location     Type
 17424 ;;  timer0          2    0[COMRAM] unsigned int 
 17425 ;; Auto vars:     Size  Location     Type
 17426 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 17427 ;; Return value:  Size  Location     Type
 17428 ;;		None               void
 17429 ;; Registers used:
 17430 ;;		None
 17431 ;; Tracked objects:
 17432 ;;		On entry : 0/0
 17433 ;;		On exit  : 0/0
 17434 ;;		Unchanged: 0/0
 17435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17436 ;;      Params:         2       0       0       0       0       0       0
 17437 ;;      Locals:         2       0       0       0       0       0       0
 17438 ;;      Temps:          0       0       0       0       0       0       0
 17439 ;;      Totals:         4       0       0       0       0       0       0
 17440 ;;Total ram usage:        4 bytes
 17441 ;; Hardware stack levels used:    1
 17442 ;; This function calls:
 17443 ;;		Nothing
 17444 ;; This function is called by:
 17445 ;;		_interrupt_at_low_vector
 17446 ;; This function uses a non-reentrant model
 17447 ;;
 17448                           
 17449                           	psect	text78
 17450  003D7C                     __ptext78:
 17451                           	opt stack 0
 17452  003D7C                     i1_WriteTimer0:
 17453                           	opt stack 21
 17454                           
 17455                           ;incstack = 0
 17456                           ;incstack = 0
 17457  003D7C  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 17458  003D80  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 17459  003D84  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 17460  003D88  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 17461  003D8C  0012               	return	
 17462  003D8E                     __end_ofi1_WriteTimer0:
 17463                           	opt stack 0
 17464                           tblptru	equ	0xFF8
 17465                           tblptrh	equ	0xFF7
 17466                           tblptrl	equ	0xFF6
 17467                           tablat	equ	0xFF5
 17468                           prodh	equ	0xFF4
 17469                           prodl	equ	0xFF3
 17470                           intcon	equ	0xFF2
 17471                           postinc0	equ	0xFEE
 17472                           wreg	equ	0xFE8
 17473                           indf1	equ	0xFE7
 17474                           fsr1h	equ	0xFE2
 17475                           fsr1l	equ	0xFE1
 17476                           bsr	equ	0xFE0
 17477                           indf2	equ	0xFDF
 17478                           postinc2	equ	0xFDE
 17479                           postdec2	equ	0xFDD
 17480                           plusw2	equ	0xFDB
 17481                           fsr2h	equ	0xFDA
 17482                           fsr2l	equ	0xFD9
 17483                           status	equ	0xFD8
 17484                           tblptru	equ	0xFF8
 17485                           tblptrh	equ	0xFF7
 17486                           tblptrl	equ	0xFF6
 17487                           tablat	equ	0xFF5
 17488                           prodh	equ	0xFF4
 17489                           prodl	equ	0xFF3
 17490                           intcon	equ	0xFF2
 17491                           postinc0	equ	0xFEE
 17492                           wreg	equ	0xFE8
 17493                           indf1	equ	0xFE7
 17494                           fsr1h	equ	0xFE2
 17495                           fsr1l	equ	0xFE1
 17496                           bsr	equ	0xFE0
 17497                           indf2	equ	0xFDF
 17498                           postinc2	equ	0xFDE
 17499                           postdec2	equ	0xFDD
 17500                           plusw2	equ	0xFDB
 17501                           fsr2h	equ	0xFDA
 17502                           fsr2l	equ	0xFD9
 17503                           status	equ	0xFD8
 17504                           
 17505                           	psect	rparam
 17506  0000                     tblptru	equ	0xFF8
 17507                           tblptrh	equ	0xFF7
 17508                           tblptrl	equ	0xFF6
 17509                           tablat	equ	0xFF5
 17510                           prodh	equ	0xFF4
 17511                           prodl	equ	0xFF3
 17512                           intcon	equ	0xFF2
 17513                           postinc0	equ	0xFEE
 17514                           wreg	equ	0xFE8
 17515                           indf1	equ	0xFE7
 17516                           fsr1h	equ	0xFE2
 17517                           fsr1l	equ	0xFE1
 17518                           bsr	equ	0xFE0
 17519                           indf2	equ	0xFDF
 17520                           postinc2	equ	0xFDE
 17521                           postdec2	equ	0xFDD
 17522                           plusw2	equ	0xFDB
 17523                           fsr2h	equ	0xFDA
 17524                           fsr2l	equ	0xFD9
 17525                           status	equ	0xFD8
 17526                           tblptru	equ	0xFF8
 17527                           tblptrh	equ	0xFF7
 17528                           tblptrl	equ	0xFF6
 17529                           tablat	equ	0xFF5
 17530                           prodh	equ	0xFF4
 17531                           prodl	equ	0xFF3
 17532                           intcon	equ	0xFF2
 17533                           postinc0	equ	0xFEE
 17534                           wreg	equ	0xFE8
 17535                           indf1	equ	0xFE7
 17536                           fsr1h	equ	0xFE2
 17537                           fsr1l	equ	0xFE1
 17538                           bsr	equ	0xFE0
 17539                           indf2	equ	0xFDF
 17540                           postinc2	equ	0xFDE
 17541                           postdec2	equ	0xFDD
 17542                           plusw2	equ	0xFDB
 17543                           fsr2h	equ	0xFDA
 17544                           fsr2l	equ	0xFD9
 17545                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     60     141
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_Read_b_eep
    _vscp_getZone->_Read_b_eep
    _doDM->_doActionOff
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionDisable->_Write_b_eep
    _doActionStatus->_SendInformationEvent
    _doActionPulse->_Read_b_eep
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeAppReg
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_Write_b_eep
    _vscp_setUserID->_Write_b_eep
    _vscp_setManufacturerId->_Write_b_eep
    _vscp_setGUID->_Write_b_eep
    _vscp_writeAppReg->_SendInformationEvent
    _calculateSetFilterMask->__CANIDToRegs
    _SendInformationEvent->_sendVSCPFrame
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_Read_b_eep
    _vscp_getUserID->_Read_b_eep
    _vscp_getGUID->_Read_b_eep
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_Read_b_eep
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_Write_b_eep
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_Write_b_eep
    _vscp_setSegmentCRC->_Write_b_eep
    _vscp_getSegmentCRC->_Read_b_eep
    _vscp_writeNicknamePermanent->_Write_b_eep
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_Read_b_eep
    _vscp_readAppReg->_Read_b_eep

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   70033
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                           _Busy_eep
                        _Write_b_eep
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           6     6      0    7438
                                             27 BANK0      6     6      0
                         _Read_b_eep
                        _doActionOff
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2370
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                17    17      0   15731
                                             28 BANK0     17    17      0
                         _Read_b_eep
                        _doActionOff
                         _doActionOn
                      _doActionPulse
                     _doActionStatus
                    _doActionDisable
                     _doActionToggle
 ---------------------------------------------------------------------------------
 (2) _doActionToggle                                       7     6      1    3470
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionDisable                                      6     5      1     449
                                             11 COMRAM     6     5      1
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _doActionStatus                                       7     6      1    3428
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulse                                        7     6      1     381
                                              9 COMRAM     7     6      1
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _doActionOn                                           7     6      1    3212
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOff                                          6     5      1    3212
                                             80 COMRAM     1     0      1
                                             22 BANK0      5     5      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   34199
                                             32 BANK0     28    28      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1   11224
                                             30 BANK0      2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    2151
                                             15 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     712
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     204
                                             11 COMRAM     4     4      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     112
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     134
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     134
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     9     8      1    8863
                                             80 COMRAM     1     0      1
                                             22 BANK0      8     8      0
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
               _SendInformationEvent
                    _vscp_readAppReg (ARG)
             _calculateSetFilterMask
 ---------------------------------------------------------------------------------
 (4) _calculateSetFilterMask                              50    50      0    1845
                                             17 COMRAM    50    50      0
                         _Read_b_eep
               _ECANSetOperationMode
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _SendInformationEvent                                 8     6      2    2533
                                             74 COMRAM     6     6      0
                                             20 BANK0      2     0      2
                         _Read_b_eep
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1773
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1334
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     217
                                             12 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      31
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     180
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     211
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4672
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     301
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _Write_b_eep                                          4     1      3      68
                                              7 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     666
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (5) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         3     3      0     508
                                              9 COMRAM     3     3      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      31
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     346
                                              9 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      31
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_getSegmentCRC
       _Read_b_eep
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
     _vscp_setControlByte
       _Busy_eep
       _Write_b_eep
   _init_app_eeprom
     _Busy_eep
     _Write_b_eep
   _init_app_ram
     _Read_b_eep
   _vscp_init
     _vscp_readNicknamePermanent
       _Read_b_eep
   _Busy_eep
   _Write_b_eep
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _Read_b_eep
     _vscp_readAppReg
       _Read_b_eep
     _vscp_writeAppReg
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_readAppReg (ARG)
         _Read_b_eep
       _calculateSetFilterMask (ARG)
         _Read_b_eep
         _ECANSetOperationMode
         __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _Read_b_eep
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _Busy_eep
       _Write_b_eep
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_getSegmentCRC
         _Read_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _Read_b_eep
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _Read_b_eep
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _Read_b_eep
         _vscp_getMDF_URL
         _vscp_getUserID
           _Read_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _Read_b_eep
       _vscp_getMDF_URL
       _vscp_getUserID
         _Read_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _Busy_eep
         _Write_b_eep
         _Read_b_eep
         _SendInformationEvent
           _Read_b_eep
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
         _vscp_readAppReg (ARG)
           _Read_b_eep
         _calculateSetFilterMask (ARG)
           _Read_b_eep
           _ECANSetOperationMode
           __CANIDToRegs
       _vscp_writeStdReg
         _vscp_setGUID
           _Busy_eep
           _Write_b_eep
         _vscp_setManufacturerId
           _Busy_eep
           _Write_b_eep
         _vscp_getGUID
           _Read_b_eep
         _vscp_getUserID
           _Read_b_eep
         _vscp_setUserID
           _Busy_eep
           _Write_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_restoreDefaults
           _init_app_eeprom
             _Busy_eep
             _Write_b_eep
           _init_app_ram
             _Read_b_eep
     _vscp_writeStdReg
       _vscp_setGUID
         _Busy_eep
         _Write_b_eep
       _vscp_setManufacturerId
         _Busy_eep
         _Write_b_eep
       _vscp_getGUID
         _Read_b_eep
       _vscp_getUserID
         _Read_b_eep
       _vscp_setUserID
         _Busy_eep
         _Write_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_restoreDefaults
         _init_app_eeprom
           _Busy_eep
           _Write_b_eep
         _init_app_ram
           _Read_b_eep
     ___lbmod
   _doDM
     _Read_b_eep
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionOn
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulse
       _Read_b_eep
     _doActionStatus
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionDisable
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
     _doActionToggle
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _Read_b_eep
     _vscp_getSubzone
       _Read_b_eep
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _Read_b_eep
       _vscp_getSubzone (ARG)
         _Read_b_eep
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
     _Read_b_eep
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _SendInformationEvent
       _Read_b_eep
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3C      8D       5       88.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E5       3        0.0%
DATA                 0      0      F1      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sun Sep 13 18:07:34 2015

                      doActionToggle@val 00CA                  __end_of_vscp_readAppReg 3600  
                  __end_of_sendVSCPFrame 354A                                       PL2 2614  
                                     PL4 0E4C                                       PL6 0E60  
                                     PL8 1C1C             ?_vscp_writeNicknamePermanent 0001  
            ??_vscp_getRegisterPagesUsed 0008                                       bsr 000FE0  
    vscp_writeNicknamePermanent@nickname 000C                              __CFG_BORV$3 000000  
                __end_of_vscp_readStdReg 29BA                    doActionToggle@dmflags 00C9  
                                    PL10 1C5A                                      PL20 1F48  
                                    PL12 1C72                                      PL30 2FD4  
                                    PL22 1F56                                      PL14 1CA6  
                                    PL40 2EB8                                      PL32 1F64  
                                    PL24 2E96                                      PL16 262E  
                                    PL50 2EDE                                      PL42 2ECA  
                                    PL34 2EA4                                      PL26 2FC4  
                                    PL18 2FB0                                      PL60 0E96  
                                    PL52 1F72                                      PL44 1CD6  
                                    PL36 14D2                                      PL28 14BA  
                                    PL70 242A                                      PL62 0EA6  
                                    PL54 1F84                                      PL46 2FE6  
                                    PL38 0E70                                      PL80 14F4  
                                    PL72 14E6                                      PL64 0EB6  
                                    PL56 0E84                                      PL48 29BA  
                                    PL82 1CF4                                      PL74 2FFA  
                                    PL66 0EC6                                      PL58 3200  
                                    PL76 29CE                                      PL68 0ED6  
                                    PL78 1CEA                                      l210 1DF8  
                                    l211 1E00                                      l220 1E24  
                                    l213 1E04                                      l222 1E28  
                                    l214 1E0C                                      l206 1DE8  
                                    l223 1E30                                      l207 1DF0  
                                    l151 3310                                      l312 0740  
                                    l216 1E10                                      l160 3358  
                                    l225 1E34                                      l217 1E18  
                                    l322 0808                                      l306 06EC  
                                    l226 1E3E                                      l219 1E1C  
                                    l404 0E20                                      l332 08D0  
                                    l500 26C2                                      l420 2612  
                                    l228 1EFA                                      l236 1F46  
                                    l164 3372                                      l317 07A4  
                                    l253 3B22                                      l502 26F2  
                                    l327 086C                                      l503 2722  
                                    l504 2752                                      l337 0934  
                                    l249 3B48                                      l441 1FDE  
                                    l505 2782                       vscp_readStdReg@idx 0019  
                                    l450 205E                                      l506 27B2  
                                    l187 1914                                      l507 27E2  
                                    l515 2CDE                                      l292 35B6  
                                    l460 219E                                      l452 209E  
                                    l541 3644                                      l454 20DE  
                                    l471 3254                                      l447 201E  
                                    l640 3C8E                                      l480 329A  
                                    l456 211E                                      l528 2DA4  
                                    l552 2B8E                                      l481 329E  
                                    l449 2202                                      l561 2BD8  
                                    l482 32A2                                      l458 215E  
                                    l570 2BFC                                      l562 2BE0  
                                    l483 32A6                                      l571 2C04  
                                    l484 32AA                                      l564 2BE4  
                                    l477 3292                                      l573 2C08  
                                    l565 2BEC                                      l557 2BC8  
                                    l478 32CA                                      l494 2684  
                                    l574 2C10                                      l558 2BD0  
                                    l479 3296                                      l567 2BF0  
                                    l576 2C14                                      l568 2BF8  
                                    l665 37AA                                      l577 2C1E  
                                    l930 2E94                                      l907 239A  
                                    l579 2C68                        doActionStatus@bOn 00CA  
                                    l908 23B4                                      l676 3A5A  
                                    l925 2FAE                       vscp_readStdReg@reg 001C  
                                    l935 3818                                      l871 2B42  
                                    l863 2AA6                                      l865 2AC4  
                                    l891 22D8                                      l883 2428  
                                    l876 2268                                      l893 22EC  
                                    l886 2336                                      l895 2300  
                                    l887 22B6                                      l897 2310  
                                    l889 22C4                                      l899 2320  
                           __CFG_CPB$OFF 000000           __size_of_vscp_handleProbeState 00BA  
                      doActionStatus@arg 0051                           getVSCPFrame@id 0028  
                      doActionStatus@val 00CB            __end_of_vscp_handleProbeState 3494  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                   __size_of_Write_b_eep 0034                   _calculateSetFilterMask 1960  
                                    wreg 000FE8              ?_doApplicationOneSecondWork 0001  
                           __CFG_LVP$OFF 000000                             __CFG_WDT$OFF 000000  
                                   l1102 3B92                                     l1113 3A84  
                                   l1050 38EE                                     l1122 38DA  
                                   l1108 39F2                                     l1109 39FE  
                   __size_of_doActionOff 00E8                                     l1126 3CA8  
                                   l1055 3BB6                                     l1231 10AC  
                                   l1305 3DD2                                     l1073 347E  
                                   l1065 3490                                     l1330 39BE  
                                   l1074 345E                                     l1066 341C  
                                   l1171 3BFA                                     l1255 1228  
                                   l1256 123C                                     l1257 1278  
                                   l1346 3C52                                     l1098 395C  
                                   l1266 12B4                                     l1347 3C54  
                                   l1291 14B8                                     l1197 3104  
                                   l1299 3AAE                                     l5011 1916  
                    vscp_readStdReg@code 0011                                     l7221 37B2  
                                   l7061 2256                                     l7231 37E2  
                                   l7223 37BA                                     l7071 2280  
              vscp_getManufacturerId@idx 000A                                     l7233 37E8  
                                   l7225 37C4                                     l7129 234A  
                                   l7235 37EE                                     l7227 37CE  
                                   l7139 236A                                     l7229 37D8  
                                   l7253 2E30                                     l7165 23E2  
                                   l7173 23FC                                     l7157 23B6  
                                   l7077 2296                                     l7085 22A4  
                                   l7191 3CCE                                     l7239 37FA  
                                   l7079 22A0                                     l7179 2412  
                                   l9043 1A96                                     l9035 1A84  
                                   l9027 1972                                     l9061 1B28  
                                   l7525 3AD0                                     l7517 3ABA  
                                   l6903 3C08                                     l9047 1B0A  
                                   l9071 1BC0                                     l8351 38BA  
                                   l9065 1BA2                                     l9217 2812  
                                   l9305 3694                                     l8345 38B0  
                                   l8531 3570                                     l7715 3BA2  
                                   l9403 3A02                                     l7811 343A  
                                   l9067 1BAA                                     l9219 2832  
                                   l8355 38C2                                     l8541 358E  
                                   l7813 343E                                     l5949 3B30  
                                   l5957 3B0A                                     l9181 26AA  
                                   l8543 3596                                     l8527 3560  
                                   l7743 31AC                                     l7727 311E  
                                   l7807 3436                                     l8545 359E  
                                   l8537 357E                                     l8553 35BA  
                                   l8561 35FC                                     l7737 3148  
                                   l6953 3A3C                                     l6937 374E  
                                   l9425 2A40                                     l9169 2642  
                                   l8547 35A6                                     l8539 3586  
                                   l8555 35DE                                     l7747 31F6  
                                   l9419 2A30                                     l7843 3482  
                                   l9603 2892                                     l8549 35AE  
                                   l6949 3A38                                     l9453 2AC6  
                                   l9437 2A6A                                     l7773 33DC  
                                   l9533 3954                                     l9621 28D0  
                                   l9613 28B8                                     l9447 2AAA  
                                   l9607 28A2                                     l9711 3088  
                                   l9703 306A                                     l9287 3606  
                                   l9473 2B34                                     l9633 28F2  
                                   l9625 28DA                                     l9617 28C4  
                                   l9713 308C                                     l9459 2AF4  
                                   l9467 2B12                                     l7787 33FA  
                                   l9715 30A2                                     l9299 3668  
                                   l9811 3352                                     l9803 333E  
                                   l9477 2B38                                     l7789 3400  
                                   l9637 28FE                                     l9629 28E6  
                                   l9495 2F3C                                     l9479 2B3A  
                                   l9663 29A6                                     l9647 2948  
                                   l9591 286E                                     l9583 285A  
                                   l9735 30EA                                     l9727 30D6  
                                   l9807 3348                                     l9823 3376  
                                   l9657 2990                                     l9569 3CA2  
                                   l9745 3106                                     l9809 334C  
                                   l9825 338E                                     l9595 287A  
                                   l9587 2864                                     l9667 29B6  
                                   l9579 2850                                     l9691 302E  
                                   l9851 33D4                                     l9835 33B8  
                                   l9819 336C                                     l9933 0F80  
                                   l9861 0EFC                                     l9599 2886  
                                   l9919 0F74                                     l9863 0F02  
                                   l9847 33CC                                     l9697 304E  
                                   l9865 0F08                                     l9857 0EF0  
                                   l9785 330C                                     l9883 0F40  
                                   l9859 0EF6                                     l9949 0FDC  
                                   l9885 0F46                                     l9991 10B0  
                                   l9959 1010                                     l9799 3336  
                                   l9969 1044                                     l9993 10CE  
                                   l9979 1078                                     l9899 0F4E  
                                   l9997 10DE              __size_of_vscp_getMatrixInfo 0020  
                                   u4275 39CA                                     u4276 39CC  
                         sendCANFrame@id 0037                                     u7115 225E  
                                   u7117 2260                                     u8234 316E  
                                   u8235 316A                                     u7435 2DF8  
                                   u7445 2E08                                     u7455 2E34  
                                   u6940 379E                                     u6945 3794  
                       ??_ECANInitialize 0009                             __CFG_PWRT$ON 000000  
              vscp_setManufacturerId@idx 000D                                     _doDM 2438  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 32F8                                     _init 395E  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 0622                              _vscp_minute 0090  
                            _vscp_second 0095                                     prodh 000FF4  
                                   prodl 000FF3                                     start 00B8  
                   doActionPulse@dmflags 000F            __size_of_vscp_doOneSecondWork 004E  
                      vscp_getUserID@idx 000A                    __size_of_vscp_setGUID 0026  
                       _vscp_writeStdReg 3004                          _doActionDisable 3600  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 37AC              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 000A                         __RegsToCANID@ptr 0008  
                   __size_of_getCANFrame 002C                                    l10001 10F6  
                                  l10011 1152                                    l10031 1184  
                                  l10007 113C                                    l10201 133E  
                                  l10121 1264                                    l11001 2C9E  
                                  l10203 1344                                    l10027 1178  
                                  l10125 126C                                    l10117 125C  
                                  l10109 123E                                    l10045 11CA  
                                  l10029 117A                                    l11021 2D36  
                                  l11013 2D02                                    l10301 2492  
                                  l10231 139C                                    l10223 136E  
                                  l10135 127A                                    l10039 119E  
                                  l11023 2D40                                    l11015 2D18  
                                  l11031 2D5E                                    l11111 2C54  
                                  l11103 2C22                                    l10241 13C6  
                                  l10161 12B6                                    l10073 11FC  
                                  l10057 11DC                                    l11025 2D4A  
                                  l11017 2D22                                    l11033 2D7A  
                                  l11105 2C3E                                    l11121 2C8C  
                                  l10321 2576                                    l10313 2542  
                                  l10227 1384                                    l10219 1354  
                                  l10139 1294                                    l11027 2D54  
                                  l11019 2D2C                                    l10323 2590  
                                  l10501 0698                                    l11133 3BF0  
                                  l10253 1408                                    l11045 2DB6  
                                  l11117 2C7A                                    l10317 255C  
                                  l10405 1E42                                    l10175 12DE  
                                  l11039 2D90                                    l11071 2BB2  
                                  l10327 25AA                                    l10335 25DE  
                                  l10415 1ED4                                    l10407 1E5E  
                                  l10431 1F42                                    l10343 1D00  
                                  _B0CON 000E20                                    l10601 087C  
                                  l10521 06FE                                    l10513 06C0  
                                  l10249 13E0                                    l10185 1300  
                                  l10089 121C                                    l10441 3216  
                                  l11049 2DC8                                    l10329 25C4  
                                  l10337 2608                                    l10425 1F0C  
                                  l10275 1458                                    l11075 2BD2  
                                  l11059 2B4C                                    l10291 2444  
                                  l10419 1EE6                                    l10347 1D08  
                                  l10621 08E0                                    l10613 08A4  
                                  l10541 0750                                    l10533 0726  
                                  l10197 132C                                    l10461 32AE  
                                  l10453 3278                                    l10429 1F20  
                                  l10365 1D78                                    l10519 06FA  
                                  l10367 1DB0                                    _B1CON 000E30  
                                  l10713 0A72                                    l10633 0908  
                                  l10561 07B4                                    l10553 0778  
                                  l10465 32DC                                    l10377 1DF2  
                                  ?_doDM 0001                                    l10723 0A7E  
                                  l10651 097C                                    l10643 0944  
                                  l10821 0BA6                                    l10581 0818  
                                  l10573 07DC                                    l10645 096E  
                                  l10493 0672                                    l10485 0650  
                                  l10469 32EE                                    l10815 0BA0  
                                  l10743 0AC2                                    l10719 0A78  
                                  l10671 09BC                                    l10823 0BCE  
                                  _B2CON 000E40                                    l10921 0E34  
                                  l10841 0C6A                                    l10833 0BF0  
                                  l10809 0B9A                                    l10761 0B06  
                                  l10737 0ABC                                    l10665 09B6  
                                  l10593 0840                                    l10905 0DDA  
                                  l10915 0E0A                                    l10843 0C8A  
                                  l10835 0C0C                                    l10851 0CF6  
                                  l10771 0B12                                    l10747 0AC8  
                                  l10675 09C2                                    l10925 0E48  
                                  l10845 0CAA                                    l10837 0C2A  
                                  l10853 0D1C                                    l10847 0CCA  
                                  l10839 0C4A                                    l10791 0B56  
                                  l10767 0B0C                                    l10695 0A04  
                                  l10935 1F9C                                    _B3CON 000E50  
                                  l10881 0D6A                                    l10785 0B50  
                                  l10689 09FE                                    l10891 0DB2  
                                  l10883 0D9C                                    l10795 0B5C  
                                  l10699 0A34                                    l10947 2004  
                                  l10893 0DBE                                    l10877 0D3E  
                                  l10983 21DE                                    l10991 2226  
                                  _B4CON 000E60            __size_of_SendInformationEvent 006C  
                                  l10987 2214            __size_of_vscp_getMajorVersion 0002  
                                  _B5CON 000E70               __end_of_vscp_goActiveState 3C3A  
          ??_vscp_writeNicknamePermanent 000C                                    ?_main 0001  
                                  ?_init 0001                   ?_vscp_goBootloaderMode 0001  
                          i1_WriteTimer0 3D7C                                    _EEADR 000FA9  
                        __end_of___lbmod 3AD8                  _vscp_handleDropNickname 39D0  
                                  _BSEL0 000DF8                                    u10104 1AF4  
                                  u10105 1AF2                                    u10134 1B5E  
                                  u10070 1AB6                                    u10135 1B5A  
                                  u10055 19CA                                    u10144 1B76  
                                  u10080 1ADE                                    u10145 1B72  
                                  u10075 1AAC                                    u11300 2988  
                                  u10164 1B8C                                    u10165 1B8A  
                                  u10085 1AD4                                    _T0CON 000FD5  
                                  u11305 2986                                    u10195 34D0  
                                  u11270 293E                                    u10384 2652  
                                  u10385 264E                                    u11275 293C  
                                  u10584 3616                                    u12344 1D56  
                                  u10585 3612                                    u12345 1D52  
                                  u12364 1DC0                                    u12365 1DBC  
                                  u12534 3226                                    u12535 3222  
                                  u13194 1FAC                                    u10955 2F16  
                                  u13195 1FA8                                    u13364 2CAE  
                                  u10965 2F26                                    u13365 2CAA  
                                  u10975 2F44                                    u13484 2B5C  
                                  u13485 2B58                                    i1l141 0086  
                                  i1l142 0088                                    i1l143 00A8  
                                  i1l144 009C                                    i1l139 0062  
                                  i1l147 00AA                          sendCANFrame@dlc 003B  
                                  _MSEL0 000DF0                                    _MSEL1 000DF1  
                                  _MSEL2 000DF2                                    _IRXIF 007D27  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 3DC0               _vscp_readNicknamePermanent 3DB6  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                       ?_vscp_getSubzone 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                             _vscp_getGUID 3D44  
                                  doDM@i 00DD                            __CFG_WRTD$OFF 000000  
                         Read_b_eep@badd 0008                           __CFG_EBTRB$OFF 000000  
                 Write_b_eep@GIE_BIT_VAL 000B                             _vscp_getZone 3D98  
                     vscp_writeAppReg@rv 00CC                                    _hours 0088  
              _vscp_getRegisterPagesUsed 3DDE                   __size_of_vscp_getEvent 002A  
                           _vscp_setGUID 3B24                                    tablat 000FF5  
                _vscp_getSubMinorVersion 3DE4                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 3AFE  
                   _ECANSetOperationMode 3CC2                          __initialization 3BB8  
                           __end_of_doDM 2614                             __end_of_main 33DA  
                           __end_of_init 399C                         ?_vscp_readAppReg 0001  
                             _Read_b_eep 3D6A                  _interrupt_at_low_vector 0018  
                       __end_of_Busy_eep 3DD8                           doDM@class_mask 00D2  
                         __CFG_OSC$HSPLL 000000                        ??_ECANSendMessage 001A  
                         ?i1_WriteTimer0 0001                                   ??_doDM 00CD  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 001E  
                 ??_vscp_restoreDefaults 0010                                   ??_main 0052  
                                 ??_init 000D            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 000A                 ??_vscp_setManufacturerId 000D  
               _vscp_handleProtocolEvent 0EE6                            __activetblptr 000002  
                      __RegsToCANID@type 000B               ECANReceiveMessage@msgFlags 0011  
          doApplicationOneSecondWork@bOn 00CF                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                 __size_of_doActionPulse 0200               ECANReceiveMessage@savedPtr 0012  
                                 _CANCON 000F6F                                   _EEDATA 000FA8  
                                 _EECON2 000FA7                                   _CIOCON 000F73  
                          doDM@type_mask 00D5                       vscp_writeStdReg@rv 0015  
                          ?_init_app_ram 0001                                   _MDSEL0 007BBE  
                                 _MDSEL1 007BBF                               _OpenTimer0 3C3A  
                                 i1l7541 0042                                   i1l7533 0024  
                                 i1l7551 0064                                   i1l7543 0052  
                                 i1l7535 002C                                   i1l7561 0096  
                                 i1l7553 0070                                   i1l7545 0054  
                                 i1l7537 0038                                   i1l7563 00A4  
                                 i1l7555 007A                                   i1l7547 005C  
                                 i1l7539 003E                                   i1l7557 0082  
                                 i1l7549 0060                                   i1l7559 008C  
                        _init_app_eeprom 14FE                                   _RXB0IF 007D20  
                                 _RXB1IF 007D21                  __end_of_doActionDisable 369E  
                                 _RXF1EN 006EA1                   ECANReceiveMessage@data 000F  
                 ECANReceiveMessage@mode 0016                   ECANReceiveMessage@temp 0017  
                      getVSCPFrame@pData 0022                        getVSCPFrame@pSize 0021  
                     _vscp_newNodeOnline 3A5C                    ?_ECANSetOperationMode 0001  
                     __CANIDToRegs@Value 0011   vscp_handleProtocolEvent@page_save_1294 00DA  
                         getCANFrame@pid 001C                           __CFG_STVREN$ON 000000  
                              ??___lbmod 0009                            _vscp_getEvent 3A86  
                                 _doWork 3DDC                         OpenTimer0@config 0008  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 000D  
                    vscp_writeAppReg@bOn 00CD          calculateSetFilterMask@rowfilter 003E  
             calculateSetFilterMask@mask 0036                      vscp_writeAppReg@reg 00CE  
             __end_of_vscp_setSegmentCRC 3D06                      vscp_writeAppReg@val 0051  
                                 clear_0 3BBE                                   clear_1 3BCA  
                          ?_sendCANFrame 0037             vscp_handleProtocolEvent@byte 00E7  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 0091  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 000C                ??_vscp_getSubMinorVersion 0008  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 000A  
                   ??_vscp_newNodeOnline 004C                          ___lbmod@divisor 0008  
                        doActionToggle@i 00CC                               __accesstop 0060  
                __end_of__initialization 3BD0                          ___lbmod@counter 000A  
          __size_of_vscp_getMinorVersion 0002                          doActionStatus@i 00CC  
                  __size_of_getVSCPFrame 0078                       _vscp_writeRegister 3BDA  
              ??_interrupt_at_low_vector 0005                  __size_of_vscp_sendEvent 0026  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
                          _doActionPulse 263C              __end_of_vscp_check_pstorage 3BB8  
                __size_of_vscp_setUserID 001C                              ?_Read_b_eep 0008  
                        ??i1_WriteTimer0 0003                      ?_vscp_writeRegister 00CF  
                             __end_ofPL2 262E                               __end_ofPL4 0E60  
                             __end_ofPL6 0E70                               __end_ofPL8 1C5A  
                         ??_sendCANFrame 003E                               _doActionOn 1F96  
                ?_calculateSetFilterMask 0001            calculateSetFilterMask@lastOID 0035  
             __end_of_vscp_getFamilyCode 3DB6                            ?__RegsToCANID 0008  
            __size_of_ECANReceiveMessage 01FA                       sendVSCPFrame@pData 0045  
             __end_of_vscp_getFamilyType 3DAC          __size_of_vscp_getManufacturerId 0014  
                vscp_writeRegister@value 00CF          __size_of_vscp_setManufacturerId 0026  
               __end_of_vscp_writeAppReg 0E4C                   getVSCPFrame@pvscpclass 0027  
                __end_of_init_app_eeprom 1960              __end_of_vscp_setControlByte 3CF0  
               __end_of_vscp_writeStdReg 310A            calculateSetFilterMask@rowmask 0031  
                     __RegsToCANID@Value 000E                     ??_vscp_writeRegister 0052  
        __end_of_vscp_handleDropNickname 3A00                             _getVSCPFrame 3734  
                             __pbssBANK0 0060                              ?_OpenTimer0 0001  
             __end_of_vscp_getBufferSize 3DE2                                ?_Busy_eep 0001  
                       ?_doActionDisable 000C                    vscp_writeRegister@reg 00D0  
                 ??_ECANSetOperationMode 0008       __size_of_vscp_getRegisterPagesUsed 0002  
                         ?_doActionPulse 000A          __end_of_vscp_getSubMinorVersion 3DE6  
               ECANSetOperationMode@mode 0008                                  _B0RXFUL 007107  
                                _B1RXFUL 007187                     __ECANRxFilterHitInfo 0054  
                                _B2RXFUL 007207                                  _B3RXFUL 007287  
                                _B4RXFUL 007307                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 000C                                  _B5RXFUL 007387  
         __end_of_calculateSetFilterMask 1C1C                  __size_of_doActionToggle 0152  
                       WriteTimer0@timer 000A                  __size_of_doActionStatus 013C  
                                _ECANCON 000F77                            ??_WriteTimer0 000A  
                         ??__RegsToCANID 000C                            ??_Write_b_eep 000B  
                  sendVSCPFrame@priority 0043                                  _BRGCON1 000F70  
                                _BRGCON2 000F71                                  _BRGCON3 000F72  
         SendInformationEvent@eventClass 00C5                      vscp_writeStdReg@reg 0016  
           __end_of_vscp_doOneSecondWork 38DC              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0041                            ??_doActionOff 00C7  
        __end_of_interrupt_at_low_vector 00B8                 vscp_readStdReg@code_1267 0015  
                      sendCANFrame@pdata 003C                    _vscp_handleProbeState 33DA  
                                _RXB0CON 000F60                                  _RXB1CON 000F50  
                                _RXB0FUL 007B07                         __ECANPointBuffer 37AC  
             __end_of_vscp_getMatrixInfo 3C1C                                  _TXB0CON 000F40  
                                _TXB1CON 000F30                                  _TXB2CON 000F20  
                                _RXFCON0 000DD4                                  _RXFCON1 000DD5  
                  doActionStatus@dmflags 00C9                       _vscp_goActiveState 3C1C  
                 __size_of_sendVSCPFrame 00B6             __end_of_SendInformationEvent 388E  
           __end_of_vscp_getMajorVersion 3DEA                      __size_of_Read_b_eep 0012  
                     __size_of_vscp_init 0044                               ??_Busy_eep 0008  
                SendInformationEvent@idx 0050                   _vscp_getManufacturerId 3D1C  
                 _vscp_setManufacturerId 3AFE                          _ECANSendMessage 29DA  
                    ?_vscp_goActiveState 0001                                  __Hparam 0000  
                        ??_vscp_getEvent 002C                                  __Lparam 0000  
                     _vscp_node_substate 0093               __end_of_vscp_getSegmentCRC 3DCA  
             ??_vscp_handleProtocolEvent 00D1                            ??_getCANFrame 001C  
                           doActionOff@i 00CB        __end_of_vscp_getRegisterPagesUsed 3DE0  
               __size_of_vscp_getMDF_URL 0018                                  ___lbmod 3AB0  
                        getCANFrame@pdlc 001A                  vscp_writeAppReg@val_682 00CB  
                              _FIFOEMPTY 007BA7                          __size_of_doWork 0002  
                           __psmallconst 0600                     __end_of_init_app_ram 3200  
                     _vscp_sendHeartBeat 3AD8                                  __pcinit 3BB8  
                         _vscp_deviceURL 0600                              ?_doActionOn 0051  
                                __ramtop 0600                      __size_of_OpenTimer0 001E  
                                __ptext0 32F8                                  __ptext1 3DDC  
                                __ptext2 1CFC                                  __ptext3 388E  
                                __ptext4 3AD8                                  __ptext5 3D8E  
                                __ptext6 3D98                                  __ptext7 3DD8  
                                __ptext8 2438                                  __ptext9 2B44  
                         _vscp_getUserID 3D30                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 004C                         doActionDisable@i 0011  
                  vscp_writeStdReg@value 0010                      ?_vscp_sendHeartBeat 00C5  
               ??_vscp_handleSetNickname 000D                                  _minutes 0089  
                                _seconds 008B                      __end_of_WriteTimer0 3D6A  
                       ?_init_app_eeprom 0001                      __end_of_Write_b_eep 39D0  
                      vscp_readAppReg@rv 000A                       vscp_getMDF_URL@idx 0009  
          vscp_handleProtocolEvent@bytes 00DE                     end_of_initialization 3BD0  
                    __end_of_doActionOff 32F8             __end_of_vscp_handleHeartbeat 395E  
               __size_of_vscp_getSubzone 000A                            __Lmediumconst 0000  
                   __end_of_sendCANFrame 3A30                vscp_handleProtocolEvent@i 00EB  
              vscp_handleProtocolEvent@j 00EC                vscp_handleProtocolEvent@k 00E5  
                        ??_doActionPulse 000B                   doActionDisable@dmflags 0010  
                   ??_vscp_sendHeartBeat 004C                           _vscp_sendEvent 3B4A  
                      ECANSendMessage@id 0012                        ECANSendMessage@pb 001B  
                                postdec2 000FDD                  __size_of_ECANInitialize 0096  
                         _vscp_setUserID 3C58                                  postinc0 000FEE  
                                postinc2 000FDE                   __end_of_vscp_deviceURL 0620  
    __end_of_vscp_writeNicknamePermanent 3D1C              _vscp_writeNicknamePermanent 3D06  
                     __ECANPointBuffer@b 000B                            _sendVSCPFrame 3494  
                 __end_of_vscp_getUserID 3D44             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0078CB                        __end_of_vscp_init 3920  
                         _vscp_probe_cnt 0094                                _PORTCbits 000F82  
                    __end_of_getCANFrame 3A5C            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                 __size_of_vscp_readAppReg 00B6  
                       ___lbmod@dividend 0009                         doActionPulse@arg 000A  
                         _vscp_statuscnt 0058                 __size_of_vscp_readStdReg 017E  
                       doActionPulse@val 000E                       _vscp_setSegmentCRC 3CF0  
             vscp_handleProtocolEvent@cb 00E3                  __end_of_ECANSendMessage 2B44  
                      vscp_readStdReg@rv 001B                              ___lbmod@rem 000B  
                          ?__CANIDToRegs 0008                              doDM@dmflags 00DC  
                   __end_of__RegsToCANID 2E96                      __size_of_doActionOn 029A  
                    ?_vscp_setSegmentCRC 0001                   __end_of_vscp_sendEvent 3B70  
                             _vscp_error 3DD8                     _vscp_doOneSecondWork 388E  
                     i1WriteTimer0@timer 0003                               _vscp_timer 0086  
                 __end_of_vscp_setUserID 3C74                   vscp_sendHeartBeat@zone 004C  
                           ??_Read_b_eep 000A                           ?_sendVSCPFrame 003F  
            doApplicationOneSecondWork@i 00D1                           _doActionToggle 2B44  
                         _doActionStatus 2C96                          ?_vscp_getUserID 0001  
                         __end_of_doWork 3DDE             __end_of_vscp_getMinorVersion 3DE8  
                            _WriteTimer0 3D58                     _SendInformationEvent 3822  
                   _vscp_getMajorVersion 3DE8                              _Write_b_eep 399C  
                   ??_vscp_setSegmentCRC 000C                        ??_vscp_getMDF_URL 0008  
          ??_vscp_getBootLoaderAlgorithm 0008                              __end_ofPL10 1C72  
                            __end_ofPL20 1F56                              __end_ofPL12 1CA6  
                      ?_vscp_writeAppReg 0051                              __end_ofPL30 2FE6  
                            __end_ofPL22 1F64                              __end_ofPL14 1CD6  
                            __end_ofPL40 2ECA                              __end_ofPL32 1F72  
                            __end_ofPL24 2EA4                              __end_ofPL16 263C  
                            __end_ofPL50 2EF0                              __end_ofPL42 2EDE  
                            __end_ofPL34 2EB8                              __end_ofPL26 2FD4  
                            __end_ofPL18 2FC4                              __end_ofPL60 0EA6  
                            __end_ofPL52 1F84                              __end_ofPL44 1CEA  
                            __end_ofPL36 14E6                              __end_ofPL28 14D2  
                            __end_ofPL70 2438                              __end_ofPL62 0EB6  
                            __end_ofPL54 1F96                              __end_ofPL46 2FFA  
                            __end_ofPL38 0E84                              __end_ofPL80 14FE  
                            __end_ofPL72 14F4                              __end_ofPL64 0EC6  
                            __end_ofPL56 0E96                              __end_ofPL48 29CE  
                            __end_ofPL82 1CFC                              __end_ofPL74 3004  
                            __end_ofPL66 0ED6                              __end_ofPL58 3210  
                            __end_ofPL76 29DA                              __end_ofPL68 0EE6  
                            __end_ofPL78 1CF4                      start_initialization 3BB8  
                            _doActionOff 3210          __size_of_vscp_handleSetNickname 0024  
                     ??_vscp_writeAppReg 00C7                        ?_vscp_writeStdReg 0010  
                 _relay_protection_timer 0060                      __CFG_BOREN$BOACTIVE 000000  
            __size_of_vscp_newNodeOnline 002A                             ??_OpenTimer0 0008  
                     ??_vscp_writeStdReg 0011                       _vscp_getFamilyCode 3DAC  
                         ??__CANIDToRegs 000F                       _vscp_getFamilyType 3DA2  
                       doDM@class_filter 00D0                       __end_of_Read_b_eep 3D7C  
                    sendVSCPFrame@nodeid 0042                        _vscp_readRegister 3C90  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 00E2  
                  ?_vscp_doOneSecondWork 0001                        __size_of_Busy_eep 0006  
                  ECANReceiveMessage@ptr 0018                      ?_vscp_getFamilyCode 0008  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 14BA  
                              _doDM$2152 00D6                          ?_vscp_setUserID 000C  
                              _doDM$2153 00D7                                _doDM$2154 00D8  
                              _doDM$2155 00D9                                _doDM$2156 00DA  
                              _doDM$2157 00DB                      ?_vscp_getFamilyType 0008  
                  __size_of_init_app_ram 00F6                 ?_vscp_handleDropNickname 0001  
                 __end_of_doActionToggle 2C96                        ??_vscp_getSubzone 000A  
                 __end_of_doActionStatus 2DD2                 __end_of__ECANPointBuffer 3822  
                      __CANIDToRegs@type 000E                              _getCANFrame 3A30  
                               ??_doWork 0008                       _vscp_getBufferSize 3DE0  
            vscp_handleProtocolEvent@len 00DF                           doActionOff@arg 0051  
            vscp_handleProtocolEvent@pos 00DD               __end_of_ECANReceiveMessage 242A  
                         doActionOff@val 00CA                      ??_vscp_readRegister 001D  
         __size_of_vscp_goBootloaderMode 001C                    ?_SendInformationEvent 00C5  
                  ?_vscp_getMajorVersion 0001                    __end_ofi1_WriteTimer0 3D8E  
          __end_of_vscp_goBootloaderMode 3C90                     _vscp_handleHeartbeat 3920  
                     __end_of_OpenTimer0 3C58      __size_of_doApplicationOneSecondWork 024C  
                    ?_vscp_getBufferSize 0001                           doActionPulse@i 0010  
           __size_of_vscp_check_pstorage 0024                     ??_vscp_getFamilyCode 000C  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0052  
                   ??_vscp_getFamilyType 000C                            ?_vscp_getGUID 0001  
                          __pcstackBANK0 00B1                         _vscp_alarmstatus 0055  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 0030  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 000C  
                          ?_vscp_setGUID 000C              __size_of_vscp_writeRegister 0022  
                       ?_ECANSendMessage 0012                        ??_vscp_readAppReg 000A  
                      sendVSCPFrame@size 0044                __end_of_vscp_readRegister 3CAA  
                      _relay_pulse_flags 008A                             _init_app_ram 310A  
                      _relay_pulse_timer 0070             __size_of_vscp_setControlByte 0016  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 000C  
                   ??_vscp_getBufferSize 0008                              ?_vscp_error 0001  
                     _vscp_getMatrixInfo 3BFC                   _vscp_handleSetNickname 3B70  
          __size_of_ECANSetOperationMode 0018                          ??_sendVSCPFrame 00B1  
                        ?_doActionToggle 0051                           _ECANInitialize 369E  
                        ?_doActionStatus 0051                 __size_of_doActionDisable 009E  
                               ?___lbmod 0008                      ?_vscp_getMatrixInfo 0001  
                calculateSetFilterMask@i 0043                  calculateSetFilterMask@j 0042  
                        vscp_getGUID@idx 000A                              __pintcodelo 0018  
                           ??_doActionOn 00C7                    ?_vscp_handleHeartbeat 0001  
       vscp_handleProtocolEvent@len_1284 00E1                  vscp_readStdReg@idx_1268 001A  
             vscp_setManufacturerId@data 000C                             _sendCANFrame 3A00  
                            __smallconst 0600                        WriteTimer0@timer0 0008  
                     _vscp_getSegmentCRC 3DC0                           ??_vscp_getGUID 000A  
                         ??_vscp_getZone 000A                              doActionOn@i 00CC  
         __end_of_vscp_getManufacturerId 3D30           __end_of_vscp_setManufacturerId 3B24  
                  __size_of__RegsToCANID 00C4         vscp_handleProtocolEvent@pos_1283 00E0  
                        doDM@type_filter 00D4                           ??_vscp_setGUID 000D  
                    ?_vscp_getSegmentCRC 0001                     ??_vscp_getMatrixInfo 0008  
                       _vscp_configtimer 0084                       doActionDisable@arg 000C  
                     doActionDisable@val 000F          SendInformationEvent@eventTypeId 00C6  
                 ??_vscp_doOneSecondWork 004D                   sendVSCPFrame@vscpclass 003F  
                               _LATBbits 000F8A                     _vscp_getMinorVersion 3DE6  
                               _LATCbits 000F8B                                _sendTimer 008C  
                     __end_of_doActionOn 2230                   __end_of_ECANInitialize 3734  
                               i1u802_20 002C                                 i1u802_21 002A  
                               i1u803_20 005C                                 i1u803_21 005A  
                               i1u804_20 0070                                 i1u804_21 006E  
                               i1u805_20 007A                                 i1u805_21 0078  
                               i1u806_20 0082                                 i1u806_21 0080  
                               i1u807_20 0096                                 i1u807_21 0094  
                               i1u808_20 00A4                                 i1u808_21 00A2  
                       ECANSendMessage@i 0034                         ECANSendMessage@j 002F  
                  __end_of_vscp_getEvent 3AB0                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 002C  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 000A                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                   ??_SendInformationEvent 004B  
                               _RXM1SIDH 000F1C                   ??_vscp_getMajorVersion 0008  
                               _RXM1SIDL 000F1D               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 004C                       vscp_setUserID@data 000C  
                   __end_of__CANIDToRegs 2FB0                             __RegsToCANID 2DD2  
                     _vscp_probe_address 0057                          Write_b_eep@badd 0008  
                        Write_b_eep@bdat 000A                       doActionOff@dmflags 00C9  
            __size_of_vscp_goActiveState 001E                      getVSCPFrame@pNodeId 001F  
                              _vscp_init 38DC                                _vscp_imsg 0096  
                              _vscp_hour 008E                                _vscp_omsg 00A4  
                       vscp_setGUID@data 000C        __size_of_vscp_handleProtocolEvent 05D4  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
               SendInformationEvent@data 004D     __size_of_vscp_writeNicknamePermanent 0016  
     __end_of_doApplicationOneSecondWork 1F48               _doApplicationOneSecondWork 1CFC  
                       _vscp_page_select 0052               __size_of_vscp_readRegister 001A  
                      _measurement_clock 0080                                 _Busy_eep 3DD2  
                  ?_vscp_getMinorVersion 0001                 __size_of_init_app_eeprom 0462  
           __end_of_vscp_restoreDefaults 3DD2                               _EECON1bits 000FA6  
                        ?_ECANInitialize 0001                 ??_calculateSetFilterMask 0012  
                               __Hrparam 0000                     ECANReceiveMessage@id 0014  
            __size_of_vscp_sendHeartBeat 0026                         ??_vscp_getUserID 000A  
                        _vscp_getMDF_URL 3CAA                                 __Lrparam 0000  
                  __end_of_doActionPulse 283C                         __CANIDToRegs@val 000A  
                       __CANIDToRegs@ptr 0008                            doActionOn@arg 0051  
                          doActionOn@val 00CB                         _vscp_initledfunc 0056  
                       __size_of___lbmod 0028                   ??_vscp_handleHeartbeat 000D  
                       getCANFrame@flags 001D                             ?_WriteTimer0 0008  
                       getCANFrame@pdata 001B                             ?_Write_b_eep 0008  
                      ??_doActionDisable 000D               vscp_writeAppReg@bInfoEvent 00CA  
                             ?_vscp_init 0001                             ?_doActionOff 0051  
                               __ptext10 3600                                 __ptext11 2C96  
                               __ptext20 14FE                                 __ptext12 263C  
                               __ptext21 3C58                                 __ptext13 1F96  
                               __ptext30 3DA2                                 __ptext22 3AFE  
                               __ptext14 3210                                 __ptext31 3DAC  
                               __ptext23 3B24                                 __ptext15 0EE6  
                               __ptext40 3DE8                                 __ptext32 3DE0  
                               __ptext24 0622                                 __ptext16 3AB0  
                               __ptext41 3A5C                                 __ptext33 3DE2  
                               __ptext25 1960                                 __ptext17 3BDA  
                               __ptext50 3C1C                                 __ptext42 39D0  
                               __ptext34 3D1C                                 __ptext26 3822  
                               __ptext18 3004                                 __ptext51 3B4A  
                               __ptext43 38DC                                 __ptext35 3D30  
                               __ptext27 3C90                                 __ptext19 3DCA  
                               __ptext60 2DD2                                 __ptext52 3494  
                               __ptext44 3DB6                                 __ptext36 3CAA  
                               __ptext28 283C                                 __ptext61 37AC  
                               __ptext53 3A00                                 __ptext45 3B70  
                               __ptext37 3D44                                 __ptext29 3DDE  
                               __ptext70 369E                                 __ptext62 3B94  
                               __ptext54 29DA                                 __ptext46 3920  
                               __ptext38 3DE4                                 __ptext71 3CC2  
                               __ptext63 3CDA                                 __ptext55 2EF0  
                               __ptext47 3BFC                                 __ptext39 3DE6  
                               __ptext72 3C3A                                 __ptext64 3CF0  
                               __ptext56 3A86                                 __ptext48 3C74  
                               __ptext73 310A                                 __ptext65 3DC0  
                               __ptext57 3734                                 __ptext49 33DA  
                               __ptext74 3D58                                 __ptext66 3D06  
                               __ptext58 3A30                                 __ptext75 3D6A  
                               __ptext67 399C                                 __ptext59 2230  
                               __ptext76 354A                                 __ptext68 3DD2  
                               __ptext69 395E                                 __ptext78 3D7C  
         vscp_goBootloaderMode@algorithm 000C                vscp_sendHeartBeat@subzone 00C5  
                          ?_getVSCPFrame 001E                         ??_vscp_sendEvent 004B  
                        _vscp_getSubzone 3D8E             calculateSetFilterMask@filter 003A  
                       ??_vscp_setUserID 000D                            __size_of_doDM 01DC  
                          __size_of_main 00E2                            __size_of_init 003E  
              __size_of_vscp_writeAppReg 082A                      _vscp_check_pstorage 3B94  
                          init_app_ram@i 000C           vscp_handleProtocolEvent@i_1282 00E6  
         vscp_handleProtocolEvent@i_1285 00EA           vscp_handleProtocolEvent@i_1293 00E4  
                   __end_of_vscp_getGUID 3D58                __size_of_vscp_writeStdReg 0106  
                    ECANSendMessage@data 0016                 ECANSendMessage@tempBSEL0 0030  
                           ?_getCANFrame 001A                      ECANSendMessage@mode 002D  
                   __end_of_vscp_getZone 3DA2                      ECANSendMessage@temp 0033  
                      ?__ECANPointBuffer 0008                        doActionOn@dmflags 00CA  
                      vscp_setUserID@idx 000D                     __end_of_vscp_setGUID 3B4A  
                     vscp_readAppReg@reg 000B                       ??__ECANPointBuffer 000B  
         vscp_handleProtocolEvent@offset 00DC                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 000D                         init_app_eeprom@i 000E  
                       init_app_eeprom@j 000F                      _vscp_setControlByte 3CDA  
            __size_of_vscp_setSegmentCRC 0016                          _vscp_readAppReg 354A  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F50  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
           ??_vscp_readNicknamePermanent 000A                      ECANReceiveMessage@i 0015  
                        _vscp_guid_reset 008D                          _vscp_readStdReg 283C  
           vscp_handleDropNickname@bytes 000D               __end_of_vscp_newNodeOnline 3A86  
                     _ECANReceiveMessage 2230                           ??_getVSCPFrame 0023  
                        _vscp_initbtncnt 008F                          sendVSCPFrame@id 0047  
                               intlevel1 0000                   ??_vscp_getMinorVersion 0008  
                vscp_getMatrixInfo@pData 0001                  __end_of_vscp_getMDF_URL 3CC2  
                   ?_vscp_setControlByte 0001                      ?_ECANReceiveMessage 000F  
                ?_vscp_handleSetNickname 0001                         ??_doActionToggle 00C7  
       __size_of_vscp_getSubMinorVersion 0002                         ??_doActionStatus 00C7  
                        _vscp_node_state 0092                             ??_vscp_error 0008  
                ECANSendMessage@msgFlags 0019                      vscp_getMatrixInfo@i 0008  
        __size_of_calculateSetFilterMask 02BC                  vscp_setControlByte@ctrl 000C  
                     ECANSendMessage@ptr 0035                        ??_init_app_eeprom 000C  
                  __size_of__CANIDToRegs 00C0      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 3DE4              _vscp_getBootLoaderAlgorithm 3DE2  
       __size_of_interrupt_at_low_vector 00A0                   ECANSendMessage@dataLen 0018  
                    __ECANPointBuffer@pt 000C                     ??_ECANReceiveMessage 0012  
                  ??_vscp_check_pstorage 000D                   ECANSendMessage@buffers 002E  
                  _vscp_goBootloaderMode 3C74             __end_of_ECANSetOperationMode 3CDA  
                   _vscp_restoreDefaults 3DCA              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 000A                  __end_of_vscp_getSubzone 3D98  
            __size_of_vscp_getFamilyType 000A                               _RXM1EXIDEN 0078EB  
             __end_of_vscp_writeRegister 3BFC                       __end_of_vscp_error 3DDC  
                 ECANSendMessage@tempPtr 0031           __end_of_vscp_handleSetNickname 3B94  
     vscp_handleProtocolEvent@bytes_1289 00E8                    ??_vscp_setControlByte 000C  
                   vscp_readRegister@reg 001D             ??_doApplicationOneSecondWork 00CC  
                           __CANIDToRegs 2EF0                   __size_ofi1_WriteTimer0 0012  
      vscp_handleProtocolEvent@page_save 00D8              __size_of_vscp_getBufferSize 0002  
      doApplicationOneSecondWork@ctrlreg 00D0                 __size_of_ECANSendMessage 016A  
                      doActionToggle@bOn 00CB                        doActionToggle@arg 0051  
