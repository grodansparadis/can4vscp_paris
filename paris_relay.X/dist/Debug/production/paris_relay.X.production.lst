

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Sun Sep 13 15:47:58 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	text74,global,reloc=2,class=CODE,delta=1
    86                           	psect	text75,global,reloc=2,class=CODE,delta=1
    87                           	psect	text76,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    89                           	psect	text78,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    92                           	psect	pa_nodes,global,class=CODE,delta=1
    93  0000                     tblptrh	equ	0xFF7
    94                           tblptrl	equ	0xFF6
    95                           tablat	equ	0xFF5
    96                           prodh	equ	0xFF4
    97                           prodl	equ	0xFF3
    98                           intcon	equ	0xFF2
    99                           wreg	equ	0xFE8
   100                           indf1	equ	0xFE7
   101                           fsr1h	equ	0xFE2
   102                           fsr1l	equ	0xFE1
   103                           indf2	equ	0xFDF
   104                           postinc2	equ	0xFDE
   105                           postdec2	equ	0xFDD
   106                           plusw2	equ	0xFDB
   107                           fsr2h	equ	0xFDA
   108                           fsr2l	equ	0xFD9
   109                           status	equ	0xFD8
   110                           
   111                           	psect	smallconst
   112  000600                     __psmallconst:
   113                           	opt stack 0
   114  000600                     _vscp_deviceURL:
   115                           	opt stack 0
   116  000600  77                 	db	119
   117  000601  77                 	db	119
   118  000602  77                 	db	119
   119  000603  2E                 	db	46
   120  000604  65                 	db	101
   121  000605  75                 	db	117
   122  000606  72                 	db	114
   123  000607  6F                 	db	111
   124  000608  73                 	db	115
   125  000609  6F                 	db	111
   126  00060A  75                 	db	117
   127  00060B  72                 	db	114
   128  00060C  63                 	db	99
   129  00060D  65                 	db	101
   130  00060E  2E                 	db	46
   131  00060F  73                 	db	115
   132  000610  65                 	db	101
   133  000611  2F                 	db	47
   134  000612  70                 	db	112
   135  000613  61                 	db	97
   136  000614  72                 	db	114
   137  000615  69                 	db	105
   138  000616  73                 	db	115
   139  000617  5F                 	db	95
   140  000618  30                 	db	48
   141  000619  31                 	db	49
   142  00061A  30                 	db	48
   143  00061B  2E                 	db	46
   144  00061C  78                 	db	120
   145  00061D  6D                 	db	109
   146  00061E  6C                 	db	108
   147  00061F  00                 	db	0
   148  000620                     __end_of_vscp_deviceURL:
   149                           	opt stack 0
   150  0000                     _BRGCON1	set	3952
   151  0000                     _BRGCON2	set	3953
   152  0000                     _BRGCON3	set	3954
   153  0000                     _BSEL0	set	3576
   154  0000                     _CANCON	set	3951
   155  0000                     _CIOCON	set	3955
   156  0000                     _ECANCON	set	3959
   157  0000                     _EEADR	set	4009
   158  0000                     _EECON1bits	set	4006
   159  0000                     _EECON2	set	4007
   160  0000                     _EEDATA	set	4008
   161  0000                     _INTCONbits	set	4082
   162  0000                     _LATBbits	set	3978
   163  0000                     _LATCbits	set	3979
   164  0000                     _MSEL0	set	3568
   165  0000                     _MSEL1	set	3569
   166  0000                     _MSEL2	set	3570
   167  0000                     _PORTA	set	3968
   168  0000                     _PORTB	set	3969
   169  0000                     _PORTC	set	3970
   170  0000                     _PORTCbits	set	3970
   171  0000                     _RXB1CONbits	set	3920
   172  0000                     _RXF0EIDH	set	3842
   173  0000                     _RXF0EIDL	set	3843
   174  0000                     _RXF0SIDH	set	3840
   175  0000                     _RXF0SIDL	set	3841
   176  0000                     _RXF1EIDH	set	3846
   177  0000                     _RXF1EIDL	set	3847
   178  0000                     _RXF1SIDL	set	3845
   179  0000                     _RXFBCON0	set	3552
   180  0000                     _RXFBCON1	set	3553
   181  0000                     _RXFBCON2	set	3554
   182  0000                     _RXFBCON3	set	3555
   183  0000                     _RXFBCON4	set	3556
   184  0000                     _RXFBCON5	set	3557
   185  0000                     _RXFBCON6	set	3558
   186  0000                     _RXFBCON7	set	3559
   187  0000                     _RXFCON0	set	3540
   188  0000                     _RXFCON1	set	3541
   189  0000                     _RXM0EIDH	set	3866
   190  0000                     _RXM0EIDL	set	3867
   191  0000                     _RXM0SIDH	set	3864
   192  0000                     _RXM0SIDL	set	3865
   193  0000                     _RXM1EIDH	set	3870
   194  0000                     _RXM1EIDL	set	3871
   195  0000                     _RXM1SIDL	set	3869
   196  0000                     _T0CON	set	4053
   197  0000                     _T0CONbits	set	4053
   198  0000                     _TMR0H	set	4055
   199  0000                     _TMR0L	set	4054
   200  0000                     _TRISA	set	3986
   201  0000                     _TRISB	set	3987
   202  0000                     _TRISC	set	3988
   203  0000                     _B0RXFUL	set	28935
   204  0000                     _B0TXEN	set	28610
   205  0000                     _B1RXFUL	set	29063
   206  0000                     _B1TXEN	set	28611
   207  0000                     _B2RXFUL	set	29191
   208  0000                     _B2TXEN	set	28612
   209  0000                     _B3RXFUL	set	29319
   210  0000                     _B3TXEN	set	28613
   211  0000                     _B4RXFUL	set	29447
   212  0000                     _B4TXEN	set	28614
   213  0000                     _B5RXFUL	set	29575
   214  0000                     _B5TXEN	set	28615
   215  0000                     _FIFOEMPTY	set	31655
   216  0000                     _IRXIF	set	32039
   217  0000                     _MDSEL0	set	31678
   218  0000                     _MDSEL1	set	31679
   219  0000                     _RXB0FILHIT0	set	31488
   220  0000                     _RXB0FUL	set	31495
   221  0000                     _RXB0IF	set	32032
   222  0000                     _RXB0OVFL	set	31655
   223  0000                     _RXB1IF	set	32033
   224  0000                     _RXB1OVFL	set	31654
   225  0000                     _RXF1EN	set	28321
   226  0000                     _RXM0EXIDM	set	30923
   227  0000                     _RXM1EXIDEN	set	30955
   228  0000                     _B0CON	set	3616
   229  0000                     _B1CON	set	3632
   230  0000                     _B2CON	set	3648
   231  0000                     _B3CON	set	3664
   232  0000                     _B4CON	set	3680
   233  0000                     _B5CON	set	3696
   234  0000                     _RXB0CON	set	3936
   235  0000                     _RXB1CON	set	3920
   236  0000                     _RXF1SIDH	set	3844
   237  0000                     _RXM1SIDH	set	3868
   238  0000                     _TXB0CON	set	3904
   239  0000                     _TXB1CON	set	3888
   240  0000                     _TXB2CON	set	3872
   241                           
   242                           ; #config settings
   243  000620  00                 	db	0	; dummy byte at the end
   244  0000                     tblptrh	equ	0xFF7
   245                           tblptrl	equ	0xFF6
   246                           tablat	equ	0xFF5
   247                           prodh	equ	0xFF4
   248                           prodl	equ	0xFF3
   249                           intcon	equ	0xFF2
   250                           wreg	equ	0xFE8
   251                           indf1	equ	0xFE7
   252                           fsr1h	equ	0xFE2
   253                           fsr1l	equ	0xFE1
   254                           indf2	equ	0xFDF
   255                           postinc2	equ	0xFDE
   256                           postdec2	equ	0xFDD
   257                           plusw2	equ	0xFDB
   258                           fsr2h	equ	0xFDA
   259                           fsr2l	equ	0xFD9
   260                           status	equ	0xFD8
   261                           
   262                           	psect	cinit
   263  003ACC                     __pcinit:
   264                           	opt stack 0
   265  003ACC                     start_initialization:
   266                           	opt stack 0
   267  003ACC                     __initialization:
   268                           	opt stack 0
   269                           
   270                           ; Clear objects allocated to BANK0 (80 bytes)
   271  003ACC  EE00  F060         	lfsr	0,__pbssBANK0
   272  003AD0  0E50               	movlw	80
   273  003AD2                     clear_0:
   274  003AD2  6AEE               	clrf	postinc0,c
   275  003AD4  06E8               	decf	wreg,f,c
   276  003AD6  E1FD               	bnz	clear_0
   277                           
   278                           ; Clear objects allocated to COMRAM (7 bytes)
   279  003AD8  EE00  F052         	lfsr	0,__pbssCOMRAM
   280  003ADC  0E07               	movlw	7
   281  003ADE                     clear_1:
   282  003ADE  6AEE               	clrf	postinc0,c
   283  003AE0  06E8               	decf	wreg,f,c
   284  003AE2  E1FD               	bnz	clear_1
   285  003AE4                     end_of_initialization:
   286                           	opt stack 0
   287  003AE4                     __end_of__initialization:
   288                           	opt stack 0
   289  003AE4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   290  003AE6  6EF8               	movwf	tblptru,c
   291  003AE8  0100               	movlb	0
   292  003AEA  EFC1  F018         	goto	_main	;jump to C main() function
   293                           tblptru	equ	0xFF8
   294                           tblptrh	equ	0xFF7
   295                           tblptrl	equ	0xFF6
   296                           tablat	equ	0xFF5
   297                           prodh	equ	0xFF4
   298                           prodl	equ	0xFF3
   299                           intcon	equ	0xFF2
   300                           postinc0	equ	0xFEE
   301                           wreg	equ	0xFE8
   302                           indf1	equ	0xFE7
   303                           fsr1h	equ	0xFE2
   304                           fsr1l	equ	0xFE1
   305                           indf2	equ	0xFDF
   306                           postinc2	equ	0xFDE
   307                           postdec2	equ	0xFDD
   308                           plusw2	equ	0xFDB
   309                           fsr2h	equ	0xFDA
   310                           fsr2l	equ	0xFD9
   311                           status	equ	0xFD8
   312                           
   313                           	psect	bssCOMRAM
   314  000052                     __pbssCOMRAM:
   315                           	opt stack 0
   316  000052                     _vscp_page_select:
   317                           	opt stack 0
   318  000052                     	ds	2
   319  000054                     __ECANRxFilterHitInfo:
   320                           	opt stack 0
   321  000054                     	ds	1
   322  000055                     _vscp_alarmstatus:
   323                           	opt stack 0
   324  000055                     	ds	1
   325  000056                     _vscp_initledfunc:
   326                           	opt stack 0
   327  000056                     	ds	1
   328  000057                     _vscp_probe_address:
   329                           	opt stack 0
   330  000057                     	ds	1
   331  000058                     _vscp_statuscnt:
   332                           	opt stack 0
   333  000058                     	ds	1
   334                           tblptru	equ	0xFF8
   335                           tblptrh	equ	0xFF7
   336                           tblptrl	equ	0xFF6
   337                           tablat	equ	0xFF5
   338                           prodh	equ	0xFF4
   339                           prodl	equ	0xFF3
   340                           intcon	equ	0xFF2
   341                           postinc0	equ	0xFEE
   342                           wreg	equ	0xFE8
   343                           indf1	equ	0xFE7
   344                           fsr1h	equ	0xFE2
   345                           fsr1l	equ	0xFE1
   346                           indf2	equ	0xFDF
   347                           postinc2	equ	0xFDE
   348                           postdec2	equ	0xFDD
   349                           plusw2	equ	0xFDB
   350                           fsr2h	equ	0xFDA
   351                           fsr2l	equ	0xFD9
   352                           status	equ	0xFD8
   353                           
   354                           	psect	bssBANK0
   355  000060                     __pbssBANK0:
   356                           	opt stack 0
   357  000060                     _relay_protection_timer:
   358                           	opt stack 0
   359  000060                     	ds	16
   360  000070                     _relay_pulse_timer:
   361                           	opt stack 0
   362  000070                     	ds	16
   363  000080                     _measurement_clock:
   364                           	opt stack 0
   365  000080                     	ds	4
   366  000084                     _vscp_configtimer:
   367                           	opt stack 0
   368  000084                     	ds	2
   369  000086                     _vscp_timer:
   370                           	opt stack 0
   371  000086                     	ds	2
   372  000088                     _hours:
   373                           	opt stack 0
   374  000088                     	ds	1
   375  000089                     _minutes:
   376                           	opt stack 0
   377  000089                     	ds	1
   378  00008A                     _relay_pulse_flags:
   379                           	opt stack 0
   380  00008A                     	ds	1
   381  00008B                     _seconds:
   382                           	opt stack 0
   383  00008B                     	ds	1
   384  00008C                     _vscp_guid_reset:
   385                           	opt stack 0
   386  00008C                     	ds	1
   387  00008D                     _vscp_hour:
   388                           	opt stack 0
   389  00008D                     	ds	1
   390  00008E                     _vscp_initbtncnt:
   391                           	opt stack 0
   392  00008E                     	ds	1
   393  00008F                     _vscp_minute:
   394                           	opt stack 0
   395  00008F                     	ds	1
   396  000090                     _vscp_nickname:
   397                           	opt stack 0
   398  000090                     	ds	1
   399  000091                     _vscp_node_state:
   400                           	opt stack 0
   401  000091                     	ds	1
   402  000092                     _vscp_node_substate:
   403                           	opt stack 0
   404  000092                     	ds	1
   405  000093                     _vscp_probe_cnt:
   406                           	opt stack 0
   407  000093                     	ds	1
   408  000094                     _vscp_second:
   409                           	opt stack 0
   410  000094                     	ds	1
   411  000095                     _vscp_imsg:
   412                           	opt stack 0
   413  000095                     	ds	14
   414  0000A3                     _vscp_omsg:
   415                           	opt stack 0
   416  0000A3                     	ds	13
   417                           tblptru	equ	0xFF8
   418                           tblptrh	equ	0xFF7
   419                           tblptrl	equ	0xFF6
   420                           tablat	equ	0xFF5
   421                           prodh	equ	0xFF4
   422                           prodl	equ	0xFF3
   423                           intcon	equ	0xFF2
   424                           postinc0	equ	0xFEE
   425                           wreg	equ	0xFE8
   426                           indf1	equ	0xFE7
   427                           fsr1h	equ	0xFE2
   428                           fsr1l	equ	0xFE1
   429                           indf2	equ	0xFDF
   430                           postinc2	equ	0xFDE
   431                           postdec2	equ	0xFDD
   432                           plusw2	equ	0xFDB
   433                           fsr2h	equ	0xFDA
   434                           fsr2l	equ	0xFD9
   435                           status	equ	0xFD8
   436                           
   437                           	psect	cstackBANK0
   438  0000B0                     __pcstackBANK0:
   439                           	opt stack 0
   440  0000B0                     ??_sendVSCPFrame:
   441                           
   442                           ; 0 bytes @ 0x0
   443  0000B0                     	ds	20
   444  0000C4                     ?_SendInformationEvent:
   445                           	opt stack 0
   446  0000C4                     ?_vscp_sendHeartBeat:
   447                           	opt stack 0
   448  0000C4                     SendInformationEvent@eventClass:
   449                           	opt stack 0
   450  0000C4                     vscp_sendHeartBeat@subzone:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x14
   454  0000C4                     	ds	1
   455  0000C5                     SendInformationEvent@eventTypeId:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x15
   459  0000C5                     	ds	1
   460  0000C6                     ??_doActionOff:
   461  0000C6                     ??_doActionOn:
   462  0000C6                     ??_doActionStatus:
   463  0000C6                     ??_doActionToggle:
   464  0000C6                     ??_vscp_writeAppReg:
   465                           
   466                           ; 0 bytes @ 0x16
   467  0000C6                     	ds	2
   468  0000C8                     doActionOff@dmflags:
   469                           	opt stack 0
   470  0000C8                     doActionStatus@dmflags:
   471                           	opt stack 0
   472  0000C8                     doActionToggle@dmflags:
   473                           	opt stack 0
   474                           
   475                           ; 1 bytes @ 0x18
   476  0000C8                     	ds	1
   477  0000C9                     vscp_writeAppReg@bInfoEvent:
   478                           	opt stack 0
   479  0000C9                     doActionOn@dmflags:
   480                           	opt stack 0
   481  0000C9                     doActionOff@val:
   482                           	opt stack 0
   483  0000C9                     doActionStatus@bOn:
   484                           	opt stack 0
   485  0000C9                     doActionToggle@val:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x19
   489  0000C9                     	ds	1
   490  0000CA                     vscp_writeAppReg@val_682:
   491                           	opt stack 0
   492  0000CA                     doActionOn@val:
   493                           	opt stack 0
   494  0000CA                     doActionOff@i:
   495                           	opt stack 0
   496  0000CA                     doActionStatus@val:
   497                           	opt stack 0
   498  0000CA                     doActionToggle@bOn:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x1A
   502  0000CA                     	ds	1
   503  0000CB                     ??_doApplicationOneSecondWork:
   504  0000CB                     vscp_writeAppReg@rv:
   505                           	opt stack 0
   506  0000CB                     doActionOn@i:
   507                           	opt stack 0
   508  0000CB                     doActionStatus@i:
   509                           	opt stack 0
   510  0000CB                     doActionToggle@i:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x1B
   514  0000CB                     	ds	1
   515  0000CC                     ??_doDM:
   516  0000CC                     vscp_writeAppReg@bOn:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x1C
   520  0000CC                     	ds	1
   521  0000CD                     vscp_writeAppReg@reg:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x1D
   525  0000CD                     	ds	1
   526  0000CE                     ?_vscp_writeRegister:
   527                           	opt stack 0
   528  0000CE                     doApplicationOneSecondWork@bOn:
   529                           	opt stack 0
   530  0000CE                     vscp_writeRegister@value:
   531                           	opt stack 0
   532                           
   533                           ; 1 bytes @ 0x1E
   534  0000CE                     	ds	1
   535  0000CF                     doApplicationOneSecondWork@ctrlreg:
   536                           	opt stack 0
   537  0000CF                     vscp_writeRegister@reg:
   538                           	opt stack 0
   539  0000CF                     doDM@class_filter:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x1F
   543  0000CF                     	ds	1
   544  0000D0                     ??_vscp_handleProtocolEvent:
   545  0000D0                     doApplicationOneSecondWork@i:
   546                           	opt stack 0
   547                           
   548                           ; 1 bytes @ 0x20
   549  0000D0                     	ds	1
   550  0000D1                     doDM@class_mask:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0x21
   554  0000D1                     	ds	2
   555  0000D3                     doDM@type_filter:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0x23
   559  0000D3                     	ds	1
   560  0000D4                     doDM@type_mask:
   561                           	opt stack 0
   562                           
   563                           ; 1 bytes @ 0x24
   564  0000D4                     	ds	1
   565  0000D5                     _doDM$2152:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x25
   569  0000D5                     	ds	1
   570  0000D6                     _doDM$2153:
   571                           	opt stack 0
   572                           
   573                           ; 1 bytes @ 0x26
   574  0000D6                     	ds	1
   575  0000D7                     _doDM$2154:
   576                           	opt stack 0
   577  0000D7                     vscp_handleProtocolEvent@page_save:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x27
   581  0000D7                     	ds	1
   582  0000D8                     _doDM$2155:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x28
   586  0000D8                     	ds	1
   587  0000D9                     _doDM$2156:
   588                           	opt stack 0
   589  0000D9                     vscp_handleProtocolEvent@page_save_1294:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x29
   593  0000D9                     	ds	1
   594  0000DA                     _doDM$2157:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0x2A
   598  0000DA                     	ds	1
   599  0000DB                     doDM@dmflags:
   600                           	opt stack 0
   601  0000DB                     vscp_handleProtocolEvent@offset:
   602                           	opt stack 0
   603                           
   604                           ; 1 bytes @ 0x2B
   605  0000DB                     	ds	1
   606  0000DC                     doDM@i:
   607                           	opt stack 0
   608  0000DC                     vscp_handleProtocolEvent@pos:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x2C
   612  0000DC                     	ds	1
   613  0000DD                     vscp_handleProtocolEvent@bytes:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x2D
   617  0000DD                     	ds	1
   618  0000DE                     vscp_handleProtocolEvent@len:
   619                           	opt stack 0
   620                           
   621                           ; 1 bytes @ 0x2E
   622  0000DE                     	ds	1
   623  0000DF                     vscp_handleProtocolEvent@pos_1283:
   624                           	opt stack 0
   625                           
   626                           ; 1 bytes @ 0x2F
   627  0000DF                     	ds	1
   628  0000E0                     vscp_handleProtocolEvent@len_1284:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0x30
   632  0000E0                     	ds	1
   633  0000E1                     vscp_handleProtocolEvent@bytes_this_time:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0x31
   637  0000E1                     	ds	1
   638  0000E2                     vscp_handleProtocolEvent@cb:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0x32
   642  0000E2                     	ds	1
   643  0000E3                     vscp_handleProtocolEvent@i_1293:
   644                           	opt stack 0
   645                           
   646                           ; 1 bytes @ 0x33
   647  0000E3                     	ds	1
   648  0000E4                     vscp_handleProtocolEvent@k:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x34
   652  0000E4                     	ds	1
   653  0000E5                     vscp_handleProtocolEvent@i_1282:
   654                           	opt stack 0
   655                           
   656                           ; 1 bytes @ 0x35
   657  0000E5                     	ds	1
   658  0000E6                     vscp_handleProtocolEvent@byte:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x36
   662  0000E6                     	ds	1
   663  0000E7                     vscp_handleProtocolEvent@bytes_1289:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0x37
   667  0000E7                     	ds	2
   668  0000E9                     vscp_handleProtocolEvent@i_1285:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x39
   672  0000E9                     	ds	1
   673  0000EA                     vscp_handleProtocolEvent@i:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0x3A
   677  0000EA                     	ds	1
   678  0000EB                     vscp_handleProtocolEvent@j:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x3B
   682  0000EB                     	ds	1
   683                           tblptru	equ	0xFF8
   684                           tblptrh	equ	0xFF7
   685                           tblptrl	equ	0xFF6
   686                           tablat	equ	0xFF5
   687                           prodh	equ	0xFF4
   688                           prodl	equ	0xFF3
   689                           intcon	equ	0xFF2
   690                           postinc0	equ	0xFEE
   691                           wreg	equ	0xFE8
   692                           indf1	equ	0xFE7
   693                           fsr1h	equ	0xFE2
   694                           fsr1l	equ	0xFE1
   695                           indf2	equ	0xFDF
   696                           postinc2	equ	0xFDE
   697                           postdec2	equ	0xFDD
   698                           plusw2	equ	0xFDB
   699                           fsr2h	equ	0xFDA
   700                           fsr2l	equ	0xFD9
   701                           status	equ	0xFD8
   702                           
   703                           	psect	cstackCOMRAM
   704  000001                     __pcstackCOMRAM:
   705                           	opt stack 0
   706  000001                     ?i1_WriteTimer0:
   707                           	opt stack 0
   708  000001                     i1WriteTimer0@timer0:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x0
   712  000001                     	ds	2
   713  000003                     i1WriteTimer0@timer:
   714                           	opt stack 0
   715                           
   716                           ; 2 bytes @ 0x2
   717  000003                     	ds	2
   718  000005                     ??_interrupt_at_low_vector:
   719                           
   720                           ; 0 bytes @ 0x4
   721  000005                     	ds	3
   722  000008                     ?_WriteTimer0:
   723                           	opt stack 0
   724  000008                     ?_Write_b_eep:
   725                           	opt stack 0
   726  000008                     ?__CANIDToRegs:
   727                           	opt stack 0
   728  000008                     ?__RegsToCANID:
   729                           	opt stack 0
   730  000008                     ??_vscp_getMDF_URL:
   731  000008                     ?_Read_b_eep:
   732                           	opt stack 0
   733  000008                     ?___lbmod:
   734                           	opt stack 0
   735  000008                     ?__ECANPointBuffer:
   736                           	opt stack 0
   737  000008                     ?_vscp_getFamilyCode:
   738                           	opt stack 0
   739  000008                     ?_vscp_getFamilyType:
   740                           	opt stack 0
   741  000008                     vscp_getMatrixInfo@i:
   742                           	opt stack 0
   743  000008                     ECANSetOperationMode@mode:
   744                           	opt stack 0
   745  000008                     OpenTimer0@config:
   746                           	opt stack 0
   747  000008                     ___lbmod@divisor:
   748                           	opt stack 0
   749  000008                     __CANIDToRegs@ptr:
   750                           	opt stack 0
   751  000008                     __RegsToCANID@ptr:
   752                           	opt stack 0
   753  000008                     Read_b_eep@badd:
   754                           	opt stack 0
   755  000008                     Write_b_eep@badd:
   756                           	opt stack 0
   757  000008                     WriteTimer0@timer0:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x7
   761  000008                     	ds	1
   762  000009                     vscp_getMDF_URL@idx:
   763                           	opt stack 0
   764  000009                     ___lbmod@dividend:
   765                           	opt stack 0
   766                           
   767                           ; 1 bytes @ 0x8
   768  000009                     	ds	1
   769  00000A                     ??_init_app_ram:
   770  00000A                     ?_doActionPulse:
   771                           	opt stack 0
   772  00000A                     vscp_readAppReg@rv:
   773                           	opt stack 0
   774  00000A                     doActionPulse@arg:
   775                           	opt stack 0
   776  00000A                     vscp_getGUID@idx:
   777                           	opt stack 0
   778  00000A                     vscp_getUserID@idx:
   779                           	opt stack 0
   780  00000A                     vscp_getManufacturerId@idx:
   781                           	opt stack 0
   782  00000A                     __RegsToCANID@val:
   783                           	opt stack 0
   784  00000A                     Write_b_eep@bdat:
   785                           	opt stack 0
   786  00000A                     ___lbmod@counter:
   787                           	opt stack 0
   788  00000A                     WriteTimer0@timer:
   789                           	opt stack 0
   790  00000A                     __CANIDToRegs@val:
   791                           	opt stack 0
   792                           
   793                           ; 4 bytes @ 0x9
   794  00000A                     	ds	1
   795  00000B                     ??_doActionPulse:
   796  00000B                     vscp_readAppReg@reg:
   797                           	opt stack 0
   798  00000B                     __RegsToCANID@type:
   799                           	opt stack 0
   800  00000B                     __ECANPointBuffer@b:
   801                           	opt stack 0
   802  00000B                     Write_b_eep@GIE_BIT_VAL:
   803                           	opt stack 0
   804  00000B                     ___lbmod@rem:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0xA
   808  00000B                     	ds	1
   809  00000C                     ??_init_app_eeprom:
   810  00000C                     ?_doActionDisable:
   811                           	opt stack 0
   812  00000C                     ??__RegsToCANID:
   813  00000C                     ??_vscp_readStdReg:
   814  00000C                     ?_vscp_setGUID:
   815                           	opt stack 0
   816  00000C                     ?_vscp_setManufacturerId:
   817                           	opt stack 0
   818  00000C                     ?_vscp_setUserID:
   819                           	opt stack 0
   820  00000C                     init_app_ram@i:
   821                           	opt stack 0
   822  00000C                     vscp_setGUID@data:
   823                           	opt stack 0
   824  00000C                     vscp_setManufacturerId@data:
   825                           	opt stack 0
   826  00000C                     vscp_writeNicknamePermanent@nickname:
   827                           	opt stack 0
   828  00000C                     doActionDisable@arg:
   829                           	opt stack 0
   830  00000C                     vscp_setUserID@data:
   831                           	opt stack 0
   832  00000C                     vscp_setSegmentCRC@crc:
   833                           	opt stack 0
   834  00000C                     vscp_setControlByte@ctrl:
   835                           	opt stack 0
   836  00000C                     vscp_goBootloaderMode@algorithm:
   837                           	opt stack 0
   838  00000C                     __ECANPointBuffer@pt:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0xB
   842  00000C                     	ds	1
   843  00000D                     ??_doActionDisable:
   844  00000D                     vscp_setGUID@idx:
   845                           	opt stack 0
   846  00000D                     vscp_setManufacturerId@idx:
   847                           	opt stack 0
   848  00000D                     vscp_setUserID@idx:
   849                           	opt stack 0
   850  00000D                     vscp_handleDropNickname@bytes:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0xC
   854  00000D                     	ds	1
   855  00000E                     init_app_eeprom@i:
   856                           	opt stack 0
   857  00000E                     doActionPulse@dmflags:
   858                           	opt stack 0
   859  00000E                     __CANIDToRegs@type:
   860                           	opt stack 0
   861  00000E                     __RegsToCANID@Value:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0xD
   865  00000E                     	ds	1
   866  00000F                     ??__CANIDToRegs:
   867  00000F                     ?_ECANReceiveMessage:
   868                           	opt stack 0
   869  00000F                     init_app_eeprom@j:
   870                           	opt stack 0
   871  00000F                     doActionPulse@val:
   872                           	opt stack 0
   873  00000F                     doActionDisable@dmflags:
   874                           	opt stack 0
   875  00000F                     ECANReceiveMessage@data:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0xE
   879  00000F                     	ds	1
   880  000010                     ?_vscp_writeStdReg:
   881                           	opt stack 0
   882  000010                     doActionPulse@i:
   883                           	opt stack 0
   884  000010                     doActionDisable@val:
   885                           	opt stack 0
   886  000010                     ECANReceiveMessage@dataLen:
   887                           	opt stack 0
   888  000010                     vscp_writeStdReg@value:
   889                           	opt stack 0
   890                           
   891                           ; 1 bytes @ 0xF
   892  000010                     	ds	1
   893  000011                     ??_vscp_writeStdReg:
   894  000011                     doActionDisable@i:
   895                           	opt stack 0
   896  000011                     ECANReceiveMessage@msgFlags:
   897                           	opt stack 0
   898  000011                     __CANIDToRegs@Value:
   899                           	opt stack 0
   900  000011                     vscp_readStdReg@code:
   901                           	opt stack 0
   902                           
   903                           ; 4 bytes @ 0x10
   904  000011                     	ds	1
   905  000012                     ??_calculateSetFilterMask:
   906  000012                     ?_ECANSendMessage:
   907                           	opt stack 0
   908  000012                     ECANReceiveMessage@savedPtr:
   909                           	opt stack 0
   910  000012                     ECANSendMessage@id:
   911                           	opt stack 0
   912                           
   913                           ; 4 bytes @ 0x11
   914  000012                     	ds	2
   915  000014                     ECANReceiveMessage@id:
   916                           	opt stack 0
   917                           
   918                           ; 1 bytes @ 0x13
   919  000014                     	ds	1
   920  000015                     ECANReceiveMessage@i:
   921                           	opt stack 0
   922  000015                     vscp_writeStdReg@rv:
   923                           	opt stack 0
   924  000015                     vscp_readStdReg@code_1267:
   925                           	opt stack 0
   926                           
   927                           ; 4 bytes @ 0x14
   928  000015                     	ds	1
   929  000016                     ECANReceiveMessage@mode:
   930                           	opt stack 0
   931  000016                     vscp_writeStdReg@reg:
   932                           	opt stack 0
   933  000016                     ECANSendMessage@data:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x15
   937  000016                     	ds	1
   938  000017                     ECANReceiveMessage@temp:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x16
   942  000017                     	ds	1
   943  000018                     ECANSendMessage@dataLen:
   944                           	opt stack 0
   945  000018                     ECANReceiveMessage@ptr:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x17
   949  000018                     	ds	1
   950  000019                     ECANSendMessage@msgFlags:
   951                           	opt stack 0
   952  000019                     vscp_readStdReg@idx:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0x18
   956  000019                     	ds	1
   957  00001A                     ??_ECANSendMessage:
   958  00001A                     ?_getCANFrame:
   959                           	opt stack 0
   960  00001A                     getCANFrame@pdlc:
   961                           	opt stack 0
   962  00001A                     vscp_readStdReg@idx_1268:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x19
   966  00001A                     	ds	1
   967  00001B                     getCANFrame@pdata:
   968                           	opt stack 0
   969  00001B                     vscp_readStdReg@rv:
   970                           	opt stack 0
   971  00001B                     ECANSendMessage@pb:
   972                           	opt stack 0
   973                           
   974                           ; 18 bytes @ 0x1A
   975  00001B                     	ds	1
   976  00001C                     getCANFrame@pid:
   977                           	opt stack 0
   978  00001C                     vscp_readStdReg@reg:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0x1B
   982  00001C                     	ds	1
   983  00001D                     getCANFrame@flags:
   984                           	opt stack 0
   985  00001D                     vscp_readRegister@reg:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x1C
   989  00001D                     	ds	1
   990  00001E                     ?_getVSCPFrame:
   991                           	opt stack 0
   992  00001E                     getVSCPFrame@pvscptype:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x1D
   996  00001E                     	ds	1
   997  00001F                     getVSCPFrame@pNodeId:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x1E
  1001  00001F                     	ds	1
  1002  000020                     getVSCPFrame@pPriority:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x1F
  1006  000020                     	ds	1
  1007  000021                     getVSCPFrame@pSize:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x20
  1011  000021                     	ds	1
  1012  000022                     getVSCPFrame@pData:
  1013                           	opt stack 0
  1014                           
  1015                           ; 1 bytes @ 0x21
  1016  000022                     	ds	1
  1017  000023                     ??_getVSCPFrame:
  1018                           
  1019                           ; 0 bytes @ 0x22
  1020  000023                     	ds	4
  1021  000027                     getVSCPFrame@pvscpclass:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x26
  1025  000027                     	ds	1
  1026  000028                     getVSCPFrame@id:
  1027                           	opt stack 0
  1028                           
  1029                           ; 4 bytes @ 0x27
  1030  000028                     	ds	4
  1031  00002C                     vscp_getEvent@rv:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x2B
  1035  00002C                     	ds	1
  1036  00002D                     ECANSendMessage@mode:
  1037                           	opt stack 0
  1038                           
  1039                           ; 1 bytes @ 0x2C
  1040  00002D                     	ds	1
  1041  00002E                     ECANSendMessage@buffers:
  1042                           	opt stack 0
  1043                           
  1044                           ; 1 bytes @ 0x2D
  1045  00002E                     	ds	1
  1046  00002F                     ECANSendMessage@j:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x2E
  1050  00002F                     	ds	1
  1051  000030                     ECANSendMessage@tempBSEL0:
  1052                           	opt stack 0
  1053                           
  1054                           ; 1 bytes @ 0x2F
  1055  000030                     	ds	1
  1056  000031                     ECANSendMessage@tempPtr:
  1057                           	opt stack 0
  1058  000031                     calculateSetFilterMask@rowmask:
  1059                           	opt stack 0
  1060                           
  1061                           ; 4 bytes @ 0x30
  1062  000031                     	ds	2
  1063  000033                     ECANSendMessage@temp:
  1064                           	opt stack 0
  1065                           
  1066                           ; 1 bytes @ 0x32
  1067  000033                     	ds	1
  1068  000034                     ECANSendMessage@i:
  1069                           	opt stack 0
  1070                           
  1071                           ; 1 bytes @ 0x33
  1072  000034                     	ds	1
  1073  000035                     calculateSetFilterMask@lastOID:
  1074                           	opt stack 0
  1075  000035                     ECANSendMessage@ptr:
  1076                           	opt stack 0
  1077                           
  1078                           ; 2 bytes @ 0x34
  1079  000035                     	ds	1
  1080  000036                     calculateSetFilterMask@mask:
  1081                           	opt stack 0
  1082                           
  1083                           ; 4 bytes @ 0x35
  1084  000036                     	ds	1
  1085  000037                     ?_sendCANFrame:
  1086                           	opt stack 0
  1087  000037                     sendCANFrame@id:
  1088                           	opt stack 0
  1089                           
  1090                           ; 4 bytes @ 0x36
  1091  000037                     	ds	3
  1092  00003A                     calculateSetFilterMask@filter:
  1093                           	opt stack 0
  1094                           
  1095                           ; 4 bytes @ 0x39
  1096  00003A                     	ds	1
  1097  00003B                     sendCANFrame@dlc:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x3A
  1101  00003B                     	ds	1
  1102  00003C                     sendCANFrame@pdata:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0x3B
  1106  00003C                     	ds	2
  1107  00003E                     calculateSetFilterMask@rowfilter:
  1108                           	opt stack 0
  1109                           
  1110                           ; 4 bytes @ 0x3D
  1111  00003E                     	ds	1
  1112  00003F                     ?_sendVSCPFrame:
  1113                           	opt stack 0
  1114  00003F                     sendVSCPFrame@vscpclass:
  1115                           	opt stack 0
  1116                           
  1117                           ; 2 bytes @ 0x3E
  1118  00003F                     	ds	2
  1119  000041                     sendVSCPFrame@vscptype:
  1120                           	opt stack 0
  1121                           
  1122                           ; 1 bytes @ 0x40
  1123  000041                     	ds	1
  1124  000042                     sendVSCPFrame@nodeid:
  1125                           	opt stack 0
  1126  000042                     calculateSetFilterMask@j:
  1127                           	opt stack 0
  1128                           
  1129                           ; 1 bytes @ 0x41
  1130  000042                     	ds	1
  1131  000043                     sendVSCPFrame@priority:
  1132                           	opt stack 0
  1133  000043                     calculateSetFilterMask@i:
  1134                           	opt stack 0
  1135                           
  1136                           ; 1 bytes @ 0x42
  1137  000043                     	ds	1
  1138  000044                     sendVSCPFrame@size:
  1139                           	opt stack 0
  1140                           
  1141                           ; 1 bytes @ 0x43
  1142  000044                     	ds	1
  1143  000045                     sendVSCPFrame@pData:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x44
  1147  000045                     	ds	2
  1148  000047                     sendVSCPFrame@id:
  1149                           	opt stack 0
  1150                           
  1151                           ; 4 bytes @ 0x46
  1152  000047                     	ds	4
  1153  00004B                     ??_SendInformationEvent:
  1154  00004B                     
  1155                           ; 0 bytes @ 0x4A
  1156  00004B                     	ds	1
  1157  00004C                     ??_vscp_newNodeOnline:
  1158  00004C                     vscp_sendHeartBeat@zone:
  1159                           	opt stack 0
  1160                           
  1161                           ; 1 bytes @ 0x4B
  1162  00004C                     	ds	1
  1163  00004D                     ??_vscp_doOneSecondWork:
  1164  00004D                     SendInformationEvent@data:
  1165                           	opt stack 0
  1166                           
  1167                           ; 3 bytes @ 0x4C
  1168  00004D                     	ds	3
  1169  000050                     SendInformationEvent@idx:
  1170                           	opt stack 0
  1171                           
  1172                           ; 1 bytes @ 0x4F
  1173  000050                     	ds	1
  1174  000051                     ?_doActionOff:
  1175                           	opt stack 0
  1176  000051                     ?_doActionOn:
  1177                           	opt stack 0
  1178  000051                     ?_doActionStatus:
  1179                           	opt stack 0
  1180  000051                     ?_doActionToggle:
  1181                           	opt stack 0
  1182  000051                     ?_vscp_writeAppReg:
  1183                           	opt stack 0
  1184  000051                     vscp_writeAppReg@val:
  1185                           	opt stack 0
  1186  000051                     doActionOn@arg:
  1187                           	opt stack 0
  1188  000051                     doActionOff@arg:
  1189                           	opt stack 0
  1190  000051                     doActionStatus@arg:
  1191                           	opt stack 0
  1192  000051                     doActionToggle@arg:
  1193                           	opt stack 0
  1194                           
  1195                           ; 1 bytes @ 0x50
  1196  000051                     	ds	1
  1197  000052                     tblptru	equ	0xFF8
  1198                           tblptrh	equ	0xFF7
  1199                           tblptrl	equ	0xFF6
  1200                           tablat	equ	0xFF5
  1201                           prodh	equ	0xFF4
  1202                           prodl	equ	0xFF3
  1203                           intcon	equ	0xFF2
  1204                           postinc0	equ	0xFEE
  1205                           wreg	equ	0xFE8
  1206                           indf1	equ	0xFE7
  1207                           fsr1h	equ	0xFE2
  1208                           fsr1l	equ	0xFE1
  1209                           indf2	equ	0xFDF
  1210                           postinc2	equ	0xFDE
  1211                           postdec2	equ	0xFDD
  1212                           plusw2	equ	0xFDB
  1213                           fsr2h	equ	0xFDA
  1214                           fsr2l	equ	0xFD9
  1215                           status	equ	0xFD8
  1216                           
  1217                           ; 0 bytes @ 0x51
  1218 ;;
  1219 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1220 ;;
  1221 ;; *************** function _main *****************
  1222 ;; Defined at:
  1223 ;;		line 190 in file "../main.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;		None
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;		None
  1228 ;; Return value:  Size  Location     Type
  1229 ;;		None               void
  1230 ;; Registers used:
  1231 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1232 ;; Tracked objects:
  1233 ;;		On entry : 0/0
  1234 ;;		On exit  : F/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1237 ;;      Params:         0       0       0       0       0       0       0
  1238 ;;      Locals:         0       0       0       0       0       0       0
  1239 ;;      Temps:          0       0       0       0       0       0       0
  1240 ;;      Totals:         0       0       0       0       0       0       0
  1241 ;;Total ram usage:        0 bytes
  1242 ;; Hardware stack levels required when called:   10
  1243 ;; This function calls:
  1244 ;;		_init
  1245 ;;		_vscp_check_pstorage
  1246 ;;		_init_app_eeprom
  1247 ;;		_init_app_ram
  1248 ;;		_vscp_init
  1249 ;;		_Busy_eep
  1250 ;;		_Write_b_eep
  1251 ;;		_vscp_getEvent
  1252 ;;		_vscp_goActiveState
  1253 ;;		_vscp_handleProbeState
  1254 ;;		_vscp_handleProtocolEvent
  1255 ;;		_doDM
  1256 ;;		_vscp_error
  1257 ;;		_vscp_doOneSecondWork
  1258 ;;		_doApplicationOneSecondWork
  1259 ;;		_doWork
  1260 ;; This function is called by:
  1261 ;;		Startup code after reset
  1262 ;; This function uses a non-reentrant model
  1263 ;;
  1264                           
  1265                           	psect	text0
  1266  003182                     __ptext0:
  1267                           	opt stack 0
  1268  003182                     _main:
  1269                           	opt stack 21
  1270                           
  1271                           ;main.c: 191: init();
  1272                           
  1273                           ;incstack = 0
  1274                           ;incstack = 0
  1275  003182  EC3A  F01C         	call	_init	;wreg free
  1276                           
  1277                           ;main.c: 195: if ( !vscp_check_pstorage() ) {
  1278  003186  EC54  F01D         	call	_vscp_check_pstorage	;wreg free
  1279  00318A  0900               	iorlw	0
  1280  00318C  E104               	bnz	l9739
  1281                           
  1282                           ;main.c: 198: init_app_eeprom();
  1283  00318E  EC7F  F00A         	call	_init_app_eeprom	;wreg free
  1284                           
  1285                           ;main.c: 199: init_app_ram();
  1286  003192  EC3E  F018         	call	_init_app_ram	;wreg free
  1287  003196                     l9739:
  1288                           
  1289                           ;main.c: 202: }
  1290                           ;main.c: 204: vscp_init();
  1291  003196  ECF9  F01B         	call	_vscp_init	;wreg free
  1292  00319A                     l151:
  1293                           
  1294                           ; BSR set to: 0
  1295  00319A  0004               	clrwdt		;# 
  1296                           
  1297                           ;main.c: 210: if ( ( vscp_initbtncnt > 250 ) &&
  1298                           ;main.c: 211: ( 0x01 != vscp_node_state ) ) {
  1299  00319C  0EFA               	movlw	250
  1300  00319E  0100               	movlb	0	; () banked
  1301  0031A0  658E               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1302  0031A2  D00E               	goto	l9753
  1303                           
  1304                           ; BSR set to: 0
  1305  0031A4  0591               	decf	_vscp_node_state& (0+255),w,b
  1306  0031A6  E00C               	bz	l9753
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;main.c: 214: vscp_nickname = 0xff;
  1310  0031A8  6990               	setf	_vscp_nickname& (0+255),b
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;main.c: 215: (Busy_eep(), Write_b_eep(0x01,0xff));
  1314  0031AA  EC73  F01E         	call	_Busy_eep	;wreg free
  1315  0031AE  6A09               	clrf	?_Write_b_eep+1,c
  1316  0031B0  0E01               	movlw	1
  1317  0031B2  6E08               	movwf	?_Write_b_eep,c
  1318  0031B4  0EFF               	movlw	255
  1319  0031B6  680A               	setf	?_Write_b_eep+2,c
  1320  0031B8  EC59  F01C         	call	_Write_b_eep	;wreg free
  1321                           
  1322                           ;main.c: 216: vscp_init();
  1323  0031BC  ECF9  F01B         	call	_vscp_init	;wreg free
  1324  0031C0                     l9753:
  1325                           
  1326                           ; BSR set to: 0
  1327                           ;main.c: 218: }
  1328                           ;main.c: 221: vscp_imsg.flags = 0;
  1329  0031C0  6B95               	clrf	_vscp_imsg& (0+255),b
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;main.c: 222: vscp_getEvent();
  1333  0031C2  ECCD  F01C         	call	_vscp_getEvent	;wreg free
  1334                           
  1335                           ;main.c: 224: switch ( vscp_node_state ) {
  1336  0031C6  D01C               	goto	l9777
  1337  0031C8                     l9757:
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;main.c: 229: if (0xff == vscp_nickname) {
  1341  0031C8  2990               	incf	_vscp_nickname& (0+255),w,b
  1342  0031CA  E103               	bnz	l9761
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;main.c: 231: vscp_node_state = 0x01;
  1346  0031CC  0E01               	movlw	1
  1347  0031CE  6F91               	movwf	_vscp_node_state& (0+255),b
  1348                           
  1349                           ;main.c: 232: } else {
  1350  0031D0  D023               	goto	l9779
  1351  0031D2                     l9761:
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;main.c: 234: vscp_node_state = 0x03;
  1355  0031D2  0E03               	movlw	3
  1356  0031D4  6F91               	movwf	_vscp_node_state& (0+255),b
  1357  0031D6                     l9763:
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;main.c: 235: vscp_goActiveState();
  1361  0031D6  EC98  F01D         	call	_vscp_goActiveState	;wreg free
  1362  0031DA  D01E               	goto	l9779
  1363  0031DC                     l9765:
  1364                           
  1365                           ; BSR set to: 0
  1366                           ;main.c: 240: vscp_handleProbeState();
  1367  0031DC  EC8F  F019         	call	_vscp_handleProbeState	;wreg free
  1368                           
  1369                           ;main.c: 241: break;
  1370  0031E0  D01B               	goto	l9779
  1371  0031E2                     l160:
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;main.c: 250: if (vscp_imsg.flags & 0x80) {
  1375  0031E2  AF95               	btfss	_vscp_imsg& (0+255),7,b
  1376  0031E4  D019               	goto	l9779
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;main.c: 252: if ( 0 == vscp_imsg.vscp_class ) {
  1380  0031E6  5198               	movf	(_vscp_imsg+3)& (0+255),w,b
  1381  0031E8  1197               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1382  0031EA  B4D8               	btfsc	status,2,c
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;main.c: 255: vscp_handleProtocolEvent();
  1386  0031EC  EC73  F007         	call	_vscp_handleProtocolEvent	;wreg free
  1387                           
  1388                           ;main.c: 257: }
  1389                           ;main.c: 259: doDM();
  1390  0031F0  EC00  F011         	call	_doDM	;wreg free
  1391  0031F4  D011               	goto	l9779
  1392  0031F6                     l9773:
  1393                           
  1394                           ; BSR set to: 0
  1395                           ;main.c: 265: vscp_error();
  1396  0031F6  EC76  F01E         	call	_vscp_error	;wreg free
  1397                           
  1398                           ;main.c: 266: break;
  1399  0031FA  D00E               	goto	l9779
  1400  0031FC                     l164:
  1401                           
  1402                           ; BSR set to: 0
  1403                           ;main.c: 269: vscp_node_state = 0x00;
  1404  0031FC  6B91               	clrf	_vscp_node_state& (0+255),b
  1405                           
  1406                           ;main.c: 270: break;
  1407  0031FE  D00C               	goto	l9779
  1408  003200                     l9777:
  1409  003200  0100               	movlb	0	; () banked
  1410  003202  5191               	movf	_vscp_node_state& (0+255),w,b
  1411                           
  1412                           ; Switch size 1, requested type "space"
  1413                           ; Number of cases is 5, Range of values is 0 to 4
  1414                           ; switch strategies available:
  1415                           ; Name         Instructions Cycles
  1416                           ; simple_byte           16     9 (average)
  1417                           ;	Chosen strategy is simple_byte
  1418  003204  E0E1               	bz	l9757
  1419  003206  0A01               	xorlw	1	; case 1
  1420  003208  E0E9               	bz	l9765
  1421  00320A  0A03               	xorlw	3	; case 2
  1422  00320C  E0E4               	bz	l9763
  1423  00320E  0A01               	xorlw	1	; case 3
  1424  003210  E0E8               	bz	l160
  1425  003212  0A07               	xorlw	7	; case 4
  1426  003214  E0F0               	bz	l9773
  1427  003216  D7F2               	goto	l164
  1428  003218                     l9779:
  1429                           
  1430                           ;main.c: 275: if ( measurement_clock > 1000 ) {
  1431  003218  0EE9               	movlw	233
  1432  00321A  0100               	movlb	0	; () banked
  1433  00321C  5D80               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1434  00321E  0E03               	movlw	3
  1435  003220  5981               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1436  003222  0E00               	movlw	0
  1437  003224  5982               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1438  003226  0E00               	movlw	0
  1439  003228  5983               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1440  00322A  E30B               	bnc	l9789
  1441                           
  1442                           ; BSR set to: 0
  1443                           ;main.c: 277: measurement_clock = 0;
  1444  00322C  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
  1445  00322E  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1446  003230  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1447  003232  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;main.c: 280: vscp_doOneSecondWork();
  1451  003234  ECD2  F01B         	call	_vscp_doOneSecondWork	;wreg free
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;main.c: 284: if ( 0x03 == vscp_node_state ) {
  1455  003238  5191               	movf	_vscp_node_state& (0+255),w,b
  1456  00323A  0A03               	xorlw	3
  1457  00323C  B4D8               	btfsc	status,2,c
  1458                           
  1459                           ; BSR set to: 0
  1460                           ;main.c: 287: doApplicationOneSecondWork();
  1461  00323E  EC7E  F00E         	call	_doApplicationOneSecondWork	;wreg free
  1462  003242                     l9789:
  1463                           
  1464                           ; BSR set to: 0
  1465                           ;main.c: 289: }
  1466                           ;main.c: 291: }
  1467                           ;main.c: 294: if ( seconds > 59 ) {
  1468  003242  0E3B               	movlw	59
  1469  003244  658B               	cpfsgt	_seconds& (0+255),b
  1470  003246  D00B               	goto	l9805
  1471                           
  1472                           ; BSR set to: 0
  1473                           ;main.c: 296: seconds = 0;
  1474  003248  6B8B               	clrf	_seconds& (0+255),b
  1475                           
  1476                           ; BSR set to: 0
  1477                           ;main.c: 297: minutes++;
  1478  00324A  2B89               	incf	_minutes& (0+255),f,b
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;main.c: 299: if ( minutes > 59 ) {
  1482  00324C  0E3B               	movlw	59
  1483  00324E  6589               	cpfsgt	_minutes& (0+255),b
  1484  003250  D002               	goto	l9801
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;main.c: 300: minutes = 0;
  1488  003252  6B89               	clrf	_minutes& (0+255),b
  1489                           
  1490                           ; BSR set to: 0
  1491                           ;main.c: 301: hours++;
  1492  003254  2B88               	incf	_hours& (0+255),f,b
  1493  003256                     l9801:
  1494                           
  1495                           ; BSR set to: 0
  1496                           ;main.c: 302: }
  1497                           ;main.c: 304: if ( hours > 23 ) hours = 0;
  1498  003256  0E17               	movlw	23
  1499  003258  6588               	cpfsgt	_hours& (0+255),b
  1500  00325A  D001               	goto	l9805
  1501                           
  1502                           ; BSR set to: 0
  1503  00325C  6B88               	clrf	_hours& (0+255),b
  1504  00325E                     l9805:
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;main.c: 306: }
  1508                           ;main.c: 308: doWork();
  1509  00325E  EC78  F01E         	call	_doWork	;wreg free
  1510  003262  D79B               	goto	l151
  1511  003264                     __end_of_main:
  1512                           	opt stack 0
  1513                           tblptru	equ	0xFF8
  1514                           tblptrh	equ	0xFF7
  1515                           tblptrl	equ	0xFF6
  1516                           tablat	equ	0xFF5
  1517                           prodh	equ	0xFF4
  1518                           prodl	equ	0xFF3
  1519                           intcon	equ	0xFF2
  1520                           postinc0	equ	0xFEE
  1521                           wreg	equ	0xFE8
  1522                           indf1	equ	0xFE7
  1523                           fsr1h	equ	0xFE2
  1524                           fsr1l	equ	0xFE1
  1525                           indf2	equ	0xFDF
  1526                           postinc2	equ	0xFDE
  1527                           postdec2	equ	0xFDD
  1528                           plusw2	equ	0xFDB
  1529                           fsr2h	equ	0xFDA
  1530                           fsr2l	equ	0xFD9
  1531                           status	equ	0xFD8
  1532                           
  1533 ;; *************** function _doWork *****************
  1534 ;; Defined at:
  1535 ;;		line 885 in file "../main.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;		None
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;		None
  1540 ;; Return value:  Size  Location     Type
  1541 ;;		None               void
  1542 ;; Registers used:
  1543 ;;		wreg, status,2, status,0
  1544 ;; Tracked objects:
  1545 ;;		On entry : F/0
  1546 ;;		On exit  : F/0
  1547 ;;		Unchanged: F/0
  1548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1549 ;;      Params:         0       0       0       0       0       0       0
  1550 ;;      Locals:         0       0       0       0       0       0       0
  1551 ;;      Temps:          0       0       0       0       0       0       0
  1552 ;;      Totals:         0       0       0       0       0       0       0
  1553 ;;Total ram usage:        0 bytes
  1554 ;; Hardware stack levels used:    1
  1555 ;; Hardware stack levels required when called:    2
  1556 ;; This function calls:
  1557 ;;		Nothing
  1558 ;; This function is called by:
  1559 ;;		_main
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563                           	psect	text1
  1564  003CF0                     __ptext1:
  1565                           	opt stack 0
  1566  003CF0                     _doWork:
  1567                           	opt stack 28
  1568                           
  1569                           ; BSR set to: 0
  1570                           
  1571                           ; BSR set to: 0
  1572                           
  1573                           ; BSR set to: 0
  1574                           ;incstack = 0
  1575                           ;incstack = 0
  1576  003CF0  0012               	return	
  1577  003CF2                     __end_of_doWork:
  1578                           	opt stack 0
  1579                           tblptru	equ	0xFF8
  1580                           tblptrh	equ	0xFF7
  1581                           tblptrl	equ	0xFF6
  1582                           tablat	equ	0xFF5
  1583                           prodh	equ	0xFF4
  1584                           prodl	equ	0xFF3
  1585                           intcon	equ	0xFF2
  1586                           postinc0	equ	0xFEE
  1587                           wreg	equ	0xFE8
  1588                           indf1	equ	0xFE7
  1589                           fsr1h	equ	0xFE2
  1590                           fsr1l	equ	0xFE1
  1591                           indf2	equ	0xFDF
  1592                           postinc2	equ	0xFDE
  1593                           postdec2	equ	0xFDD
  1594                           plusw2	equ	0xFDB
  1595                           fsr2h	equ	0xFDA
  1596                           fsr2l	equ	0xFD9
  1597                           status	equ	0xFD8
  1598                           
  1599 ;; *************** function _doApplicationOneSecondWork *****************
  1600 ;; Defined at:
  1601 ;;		line 590 in file "../main.c"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;		None
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;  i               1   32[BANK0 ] unsigned char 
  1606 ;;  ctrlreg         1   31[BANK0 ] unsigned char 
  1607 ;;  bOn             1   30[BANK0 ] enum E15660
  1608 ;; Return value:  Size  Location     Type
  1609 ;;		None               void
  1610 ;; Registers used:
  1611 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1612 ;; Tracked objects:
  1613 ;;		On entry : F/0
  1614 ;;		On exit  : F/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1617 ;;      Params:         0       0       0       0       0       0       0
  1618 ;;      Locals:         0       3       0       0       0       0       0
  1619 ;;      Temps:          0       3       0       0       0       0       0
  1620 ;;      Totals:         0       6       0       0       0       0       0
  1621 ;;Total ram usage:        6 bytes
  1622 ;; Hardware stack levels used:    1
  1623 ;; Hardware stack levels required when called:    8
  1624 ;; This function calls:
  1625 ;;		_Read_b_eep
  1626 ;;		_doActionOff
  1627 ;;		_SendInformationEvent
  1628 ;; This function is called by:
  1629 ;;		_main
  1630 ;; This function uses a non-reentrant model
  1631 ;;
  1632                           
  1633                           	psect	text2
  1634  001CFC                     __ptext2:
  1635                           	opt stack 0
  1636  001CFC                     _doApplicationOneSecondWork:
  1637                           	opt stack 22
  1638                           
  1639                           ; BSR set to: 0
  1640                           ;main.c: 592: uint8_t i;
  1641                           ;main.c: 593: uint8_t ctrlreg;
  1642                           ;main.c: 594: BOOL bOn = 0;
  1643                           
  1644                           ; BSR set to: 0
  1645                           ;incstack = 0
  1646                           ;incstack = 0
  1647  001CFC  6BCE               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1648                           
  1649                           ;main.c: 596: for ( i = 0; i < 8; i++ ) {
  1650  001CFE  6BD0               	clrf	doApplicationOneSecondWork@i& (0+255),b
  1651  001D00                     l10309:
  1652                           
  1653                           ; BSR set to: 0
  1654  001D00  0E07               	movlw	7
  1655  001D02  65D0               	cpfsgt	doApplicationOneSecondWork@i& (0+255),b
  1656  001D04  D001               	goto	l10313
  1657  001D06  D11F               	goto	l236
  1658  001D08                     l10313:
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;main.c: 599: ctrlreg = Read_b_eep(0x43 + 10 + i);
  1662  001D08  D92D               	call	PL32	;call to abstracted procedure
  1663  001D0A  EC3F  F01E         	call	_Read_b_eep	;wreg free
  1664  001D0E  0100               	movlb	0	; () banked
  1665  001D10  6FCF               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;main.c: 602: if ( !( ctrlreg & 0x80 ) ) continue;
  1669  001D12  AFCF               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  1670  001D14  D116               	goto	l10397
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;main.c: 606: if ( relay_protection_timer[ i ] ) {
  1674                           
  1675                           ; BSR set to: 0
  1676  001D16  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1677  001D18  0D02               	mullw	2
  1678  001D1A  50F3               	movf	prodl,w,c
  1679  001D1C  0F60               	addlw	low _relay_protection_timer
  1680  001D1E  6ED9               	movwf	fsr2l,c
  1681  001D20  6ADA               	clrf	fsr2h,c
  1682  001D22  50DE               	movf	postinc2,w,c
  1683  001D24  10DD               	iorwf	postdec2,w,c
  1684  001D26  E028               	bz	l10331
  1685                           
  1686                           ; BSR set to: 0
  1687                           ;main.c: 608: relay_protection_timer[ i ]--;
  1688  001D28  D90F               	call	PL20	;call to abstracted procedure
  1689  001D2A  06DE               	decf	postinc2,f,c
  1690  001D2C  0E00               	movlw	0
  1691  001D2E  5ADD               	subwfb	postdec2,f,c
  1692                           
  1693                           ;main.c: 611: if ( !relay_protection_timer[ i ] &&
  1694                           ;main.c: 612: ( Read_b_eep(0x43 + 10 + i) &
  1695                           ;main.c: 613: 0x04 ) ) {
  1696  001D30  D90B               	call	PL20	;call to abstracted procedure
  1697  001D32  50DE               	movf	postinc2,w,c
  1698  001D34  10DD               	iorwf	postdec2,w,c
  1699  001D36  E13C               	bnz	l10333
  1700                           
  1701                           ; BSR set to: 0
  1702  001D38  D915               	call	PL32	;call to abstracted procedure
  1703  001D3A  EC3F  F01E         	call	_Read_b_eep	;wreg free
  1704  001D3E  0100               	movlb	0	; () banked
  1705  001D40  6FCB               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1706  001D42  A5CB               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1707  001D44  D035               	goto	l10333
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;main.c: 616: doActionOff( 0, (1 << i) );
  1711  001D46  C0D0  F0CB         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1712  001D4A  0E01               	movlw	1
  1713  001D4C  6FCC               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1714  001D4E  2BCB               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1715  001D50  D002               	goto	u12224
  1716  001D52                     u12225:
  1717  001D52  90D8               	bcf	status,0,c
  1718  001D54  37CC               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1719  001D56                     u12224:
  1720  001D56  2FCB               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1721  001D58  D7FC               	goto	u12225
  1722  001D5A  51CC               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1723  001D5C  6E51               	movwf	?_doActionOff,c
  1724  001D5E  0E00               	movlw	0
  1725  001D60  EC32  F019         	call	_doActionOff
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;main.c: 619: if ( ctrlreg & 0x02 ) {
  1729  001D64  A3CF               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  1730  001D66  D024               	goto	l10333
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;main.c: 620: SendInformationEvent( i, 1,
  1734                           ;main.c: 621: 2 );
  1735  001D68  0E01               	movlw	1
  1736  001D6A  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  1737  001D6C  0E02               	movlw	2
  1738  001D6E  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1739  001D70  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1740  001D72  EC9C  F01B         	call	_SendInformationEvent
  1741  001D76  D01C               	goto	l10333
  1742  001D78                     l10331:
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;main.c: 626: else {
  1746                           ;main.c: 628: relay_protection_timer[ i ] =
  1747                           ;main.c: 629: Read_b_eep(0x43 + 34 + i) * 256 +
  1748                           ;main.c: 630: Read_b_eep(0x43 + 35 + i);
  1749  001D78  0E65               	movlw	101
  1750  001D7A  25D0               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1751  001D7C  6E08               	movwf	?_Read_b_eep,c
  1752  001D7E  6A09               	clrf	?_Read_b_eep+1,c
  1753  001D80  0E00               	movlw	0
  1754  001D82  2209               	addwfc	?_Read_b_eep+1,f,c
  1755  001D84  EC3F  F01E         	call	_Read_b_eep	;wreg free
  1756  001D88  0100               	movlb	0	; () banked
  1757  001D8A  6FCC               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1758  001D8C  6BCB               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1759  001D8E  0E66               	movlw	102
  1760  001D90  25D0               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1761  001D92  6E08               	movwf	?_Read_b_eep,c
  1762  001D94  6A09               	clrf	?_Read_b_eep+1,c
  1763  001D96  0E00               	movlw	0
  1764  001D98  2209               	addwfc	?_Read_b_eep+1,f,c
  1765  001D9A  EC3F  F01E         	call	_Read_b_eep	;wreg free
  1766  001D9E  0100               	movlb	0	; () banked
  1767  001DA0  27CB               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1768  001DA2  0E00               	movlw	0
  1769  001DA4  23CC               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1770  001DA6  D8D0               	call	PL20	;call to abstracted procedure
  1771  001DA8  C0CB  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1772  001DAC  C0CC  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1773  001DB0                     l10333:
  1774                           
  1775                           ; BSR set to: 0
  1776                           ;main.c: 631: }
  1777                           ;main.c: 634: if ( relay_pulse_flags & (1 << i) ) {
  1778  001DB0  C0D0  F0CB         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1779  001DB4  0E01               	movlw	1
  1780  001DB6  6FCC               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1781  001DB8  2BCB               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1782  001DBA  D002               	goto	u12244
  1783  001DBC                     u12245:
  1784  001DBC  90D8               	bcf	status,0,c
  1785  001DBE  37CC               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1786  001DC0                     u12244:
  1787  001DC0  2FCB               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1788  001DC2  D7FC               	goto	u12245
  1789  001DC4  51CC               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1790  001DC6  158A               	andwf	_relay_pulse_flags& (0+255),w,b
  1791  001DC8  E101 D0BB          	bz	l10397
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;main.c: 636: if ( relay_pulse_timer[ i ] ) {
  1795  001DCC  D8C4               	call	PL24	;call to abstracted procedure
  1796  001DCE  50DE               	movf	postinc2,w,c
  1797  001DD0  10DD               	iorwf	postdec2,w,c
  1798  001DD2  E101 D0A5          	bz	l10395
  1799                           
  1800                           ; BSR set to: 0
  1801                           ;main.c: 638: relay_pulse_timer[ i ]--;
  1802  001DD6  D8BF               	call	PL24	;call to abstracted procedure
  1803  001DD8  06DE               	decf	postinc2,f,c
  1804  001DDA  0E00               	movlw	0
  1805  001DDC  5ADD               	subwfb	postdec2,f,c
  1806                           
  1807                           ;main.c: 641: if ( !relay_pulse_timer[ i ] ) {
  1808  001DDE  D8BB               	call	PL24	;call to abstracted procedure
  1809  001DE0  50DE               	movf	postinc2,w,c
  1810  001DE2  10DD               	iorwf	postdec2,w,c
  1811  001DE4  E02E               	bz	l10371
  1812  001DE6  D0AD               	goto	l10397
  1813  001DE8                     l206:
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;main.c: 646: if ( LATBbits.LATB4 ) {
  1817  001DE8  A88A               	btfss	3978,4,c	;volatile
  1818  001DEA  D002               	goto	l207
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;main.c: 647: LATBbits.LATB4 = 0;
  1822  001DEC  988A               	bcf	3978,4,c	;volatile
  1823  001DEE  D025               	goto	L6
  1824  001DF0                     l207:
  1825                           
  1826                           ; BSR set to: 0
  1827                           ;main.c: 650: LATBbits.LATB4 = 1;
  1828  001DF0  888A               	bsf	3978,4,c	;volatile
  1829  001DF2                     l10343:
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;main.c: 651: bOn = 1;
  1833  001DF2  0E01               	movlw	1
  1834  001DF4  6FCE               	movwf	doApplicationOneSecondWork@bOn& (0+255),b
  1835  001DF6  D033               	goto	l10373
  1836  001DF8                     l210:
  1837                           
  1838                           ; BSR set to: 0
  1839                           ;main.c: 656: if ( LATBbits.LATB1 ) {
  1840  001DF8  A28A               	btfss	3978,1,c	;volatile
  1841  001DFA  D002               	goto	l211
  1842                           
  1843                           ; BSR set to: 0
  1844                           ;main.c: 657: LATBbits.LATB1 = 0;
  1845  001DFC  928A               	bcf	3978,1,c	;volatile
  1846  001DFE  D01D               	goto	L6
  1847  001E00                     l211:
  1848                           
  1849                           ; BSR set to: 0
  1850                           ;main.c: 660: LATBbits.LATB1 = 1;
  1851  001E00  828A               	bsf	3978,1,c	;volatile
  1852  001E02  D7F7               	goto	l10343
  1853  001E04                     l213:
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;main.c: 666: if ( LATBbits.LATB0 ) {
  1857  001E04  A08A               	btfss	3978,0,c	;volatile
  1858  001E06  D002               	goto	l214
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;main.c: 667: LATBbits.LATB0 = 0;
  1862  001E08  908A               	bcf	3978,0,c	;volatile
  1863  001E0A  D017               	goto	L6
  1864  001E0C                     l214:
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;main.c: 670: LATBbits.LATB0 = 1;
  1868  001E0C  808A               	bsf	3978,0,c	;volatile
  1869  001E0E  D7F1               	goto	l10343
  1870  001E10                     l216:
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;main.c: 676: if ( LATCbits.LATC7 ) {
  1874  001E10  AE8B               	btfss	3979,7,c	;volatile
  1875  001E12  D002               	goto	l217
  1876                           
  1877                           ; BSR set to: 0
  1878                           ;main.c: 677: LATCbits.LATC7 = 0;
  1879  001E14  9E8B               	bcf	3979,7,c	;volatile
  1880  001E16  D011               	goto	L6
  1881  001E18                     l217:
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;main.c: 680: LATCbits.LATC7 = 1;
  1885  001E18  8E8B               	bsf	3979,7,c	;volatile
  1886  001E1A  D7EB               	goto	l10343
  1887  001E1C                     l219:
  1888                           
  1889                           ; BSR set to: 0
  1890                           ;main.c: 686: if ( LATCbits.LATC6 ) {
  1891  001E1C  AC8B               	btfss	3979,6,c	;volatile
  1892  001E1E  D002               	goto	l220
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;main.c: 687: LATCbits.LATC6 = 0;
  1896  001E20  9C8B               	bcf	3979,6,c	;volatile
  1897  001E22  D00B               	goto	L6
  1898  001E24                     l220:
  1899                           
  1900                           ; BSR set to: 0
  1901                           ;main.c: 690: LATCbits.LATC6 = 1;
  1902  001E24  8C8B               	bsf	3979,6,c	;volatile
  1903  001E26  D7E5               	goto	l10343
  1904  001E28                     l222:
  1905                           
  1906                           ; BSR set to: 0
  1907                           ;main.c: 696: if ( LATCbits.LATC5 ) {
  1908  001E28  AA8B               	btfss	3979,5,c	;volatile
  1909  001E2A  D002               	goto	l223
  1910                           
  1911                           ; BSR set to: 0
  1912                           ;main.c: 697: LATCbits.LATC5 = 0;
  1913  001E2C  9A8B               	bcf	3979,5,c	;volatile
  1914  001E2E  D005               	goto	L6
  1915  001E30                     l223:
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;main.c: 700: LATCbits.LATC5 = 1;
  1919  001E30  8A8B               	bsf	3979,5,c	;volatile
  1920  001E32  D7DF               	goto	l10343
  1921  001E34                     l225:
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;main.c: 706: if ( LATCbits.LATC4 ) {
  1925  001E34  A88B               	btfss	3979,4,c	;volatile
  1926  001E36  D003               	goto	l226
  1927                           
  1928                           ; BSR set to: 0
  1929                           ;main.c: 707: LATCbits.LATC4 = 0;
  1930  001E38  988B               	bcf	3979,4,c	;volatile
  1931  001E3A                     L6:
  1932                           
  1933                           ;main.c: 708: bOn = 0;
  1934  001E3A  6BCE               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1935                           
  1936                           ;main.c: 709: } else {
  1937  001E3C  D010               	goto	l10373
  1938  001E3E                     l226:
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;main.c: 710: LATCbits.LATC4 = 1;
  1942  001E3E  888B               	bsf	3979,4,c	;volatile
  1943  001E40  D7D8               	goto	l10343
  1944  001E42                     l10371:
  1945                           
  1946                           ; BSR set to: 0
  1947  001E42  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1948                           
  1949                           ; Switch size 1, requested type "space"
  1950                           ; Number of cases is 7, Range of values is 0 to 6
  1951                           ; switch strategies available:
  1952                           ; Name         Instructions Cycles
  1953                           ; simple_byte           22    12 (average)
  1954                           ;	Chosen strategy is simple_byte
  1955  001E44  E0D1               	bz	l206
  1956  001E46  0A01               	xorlw	1	; case 1
  1957  001E48  E0D7               	bz	l210
  1958  001E4A  0A03               	xorlw	3	; case 2
  1959  001E4C  E0DB               	bz	l213
  1960  001E4E  0A01               	xorlw	1	; case 3
  1961  001E50  E0DF               	bz	l216
  1962  001E52  0A07               	xorlw	7	; case 4
  1963  001E54  E0E3               	bz	l219
  1964  001E56  0A01               	xorlw	1	; case 5
  1965  001E58  E0E7               	bz	l222
  1966  001E5A  0A03               	xorlw	3	; case 6
  1967  001E5C  E0EB               	bz	l225
  1968  001E5E                     l10373:
  1969                           
  1970                           ; BSR set to: 0
  1971                           ;main.c: 718: relay_pulse_timer[ i ] =
  1972                           ;main.c: 719: Read_b_eep(0x43 + 18 + 2*i) * 256 +
  1973                           ;main.c: 721: Read_b_eep(0x43 + 19 + 2*i);
  1974  001E5E  D889               	call	PL52	;call to abstracted procedure
  1975  001E60  EC3F  F01E         	call	_Read_b_eep	;wreg free
  1976  001E64  0100               	movlb	0	; () banked
  1977  001E66  6FCC               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1978  001E68  6BCB               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1979  001E6A  D88C               	call	PL54	;call to abstracted procedure
  1980  001E6C  EC3F  F01E         	call	_Read_b_eep	;wreg free
  1981  001E70  0100               	movlb	0	; () banked
  1982  001E72  27CB               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1983  001E74  0E00               	movlw	0
  1984  001E76  23CC               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1985  001E78  D86E               	call	PL24	;call to abstracted procedure
  1986  001E7A  C0CB  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1987  001E7E  C0CC  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1988                           
  1989                           ; BSR set to: 0
  1990                           ;main.c: 724: if ( bOn ) {
  1991  001E82  51CE               	movf	doApplicationOneSecondWork@bOn& (0+255),w,b
  1992  001E84  E03A               	bz	l228
  1993                           
  1994                           ; BSR set to: 0
  1995                           ;main.c: 727: if ( Read_b_eep(0x43 + 10 + i) & 0x04 ) {
  1996  001E86  D86E               	call	PL32	;call to abstracted procedure
  1997  001E88  EC3F  F01E         	call	_Read_b_eep	;wreg free
  1998  001E8C  0100               	movlb	0	; () banked
  1999  001E8E  6FCB               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2000  001E90  A5CB               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  2001  001E92  D020               	goto	l10381
  2002                           
  2003                           ; BSR set to: 0
  2004                           ;main.c: 728: relay_protection_timer[ i ] =
  2005                           ;main.c: 729: Read_b_eep(0x43 + 34 + 2*i) * 256 +
  2006                           ;main.c: 730: Read_b_eep(0x43 + 35 + 2*i);
  2007  001E94  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2008  001E96  0D02               	mullw	2
  2009  001E98  0E65               	movlw	101
  2010  001E9A  24F3               	addwf	prodl,w,c
  2011  001E9C  6E08               	movwf	?_Read_b_eep,c
  2012  001E9E  0E00               	movlw	0
  2013  001EA0  20F4               	addwfc	prodh,w,c
  2014  001EA2  6E09               	movwf	?_Read_b_eep+1,c
  2015  001EA4  EC3F  F01E         	call	_Read_b_eep	;wreg free
  2016  001EA8  0100               	movlb	0	; () banked
  2017  001EAA  6FCC               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2018  001EAC  6BCB               	clrf	??_doApplicationOneSecondWork& (0+255),b
  2019  001EAE  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2020  001EB0  0D02               	mullw	2
  2021  001EB2  0E66               	movlw	102
  2022  001EB4  24F3               	addwf	prodl,w,c
  2023  001EB6  6E08               	movwf	?_Read_b_eep,c
  2024  001EB8  0E00               	movlw	0
  2025  001EBA  20F4               	addwfc	prodh,w,c
  2026  001EBC  6E09               	movwf	?_Read_b_eep+1,c
  2027  001EBE  EC3F  F01E         	call	_Read_b_eep	;wreg free
  2028  001EC2  0100               	movlb	0	; () banked
  2029  001EC4  27CB               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  2030  001EC6  0E00               	movlw	0
  2031  001EC8  23CC               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  2032  001ECA  D83E               	call	PL20	;call to abstracted procedure
  2033  001ECC  C0CB  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  2034  001ED0  C0CC  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  2035  001ED4                     l10381:
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;main.c: 731: }
  2039                           ;main.c: 733: if ( ctrlreg & 0x08 ) {
  2040  001ED4  A7CF               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  2041  001ED6  D007               	goto	l10385
  2042                           
  2043                           ; BSR set to: 0
  2044                           ;main.c: 734: SendInformationEvent( i, 20,
  2045                           ;main.c: 735: 3 );
  2046  001ED8  0E14               	movlw	20
  2047  001EDA  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  2048  001EDC  0E03               	movlw	3
  2049  001EDE  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2050  001EE0  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2051  001EE2  EC9C  F01B         	call	_SendInformationEvent
  2052  001EE6                     l10385:
  2053                           
  2054                           ; BSR set to: 0
  2055                           ;main.c: 736: }
  2056                           ;main.c: 738: if ( ctrlreg & 0x20 ) {
  2057  001EE6  ABCF               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  2058  001EE8  D02C               	goto	l10397
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;main.c: 739: SendInformationEvent( i, 20,
  2062                           ;main.c: 740: 25 );
  2063  001EEA  0E14               	movlw	20
  2064  001EEC  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  2065  001EEE  0E19               	movlw	25
  2066  001EF0  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2067  001EF2  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2068  001EF4  EC9C  F01B         	call	_SendInformationEvent
  2069  001EF8  D024               	goto	l10397
  2070  001EFA                     l228:
  2071                           
  2072                           ; BSR set to: 0
  2073                           ;main.c: 745: if ( ctrlreg & 0x10 ) {
  2074  001EFA  A9CF               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  2075  001EFC  D007               	goto	l10391
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;main.c: 746: SendInformationEvent( i, 20,
  2079                           ;main.c: 747: 4 );
  2080  001EFE  0E14               	movlw	20
  2081  001F00  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  2082  001F02  0E04               	movlw	4
  2083  001F04  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2084  001F06  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2085  001F08  EC9C  F01B         	call	_SendInformationEvent
  2086  001F0C                     l10391:
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;main.c: 748: }
  2090                           ;main.c: 750: if (ctrlreg & 0x40) {
  2091  001F0C  ADCF               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),6,b
  2092  001F0E  D019               	goto	l10397
  2093                           
  2094                           ; BSR set to: 0
  2095                           ;main.c: 751: SendInformationEvent( i, 20,
  2096                           ;main.c: 752: 24 );
  2097  001F10  0E14               	movlw	20
  2098  001F12  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  2099  001F14  0E18               	movlw	24
  2100  001F16  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2101  001F18  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2102  001F1A  EC9C  F01B         	call	_SendInformationEvent
  2103  001F1E  D011               	goto	l10397
  2104  001F20                     l10395:
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;main.c: 759: else {
  2108                           ;main.c: 761: relay_pulse_timer[ 0 ] =
  2109                           ;main.c: 762: Read_b_eep(0x43 + 18 + 2*i) * 256 +
  2110                           ;main.c: 763: Read_b_eep(0x43 + 19 + 2*i);
  2111  001F20  D831               	call	PL54	;call to abstracted procedure
  2112  001F22  EC3F  F01E         	call	_Read_b_eep	;wreg free
  2113  001F26  0100               	movlb	0	; () banked
  2114  001F28  6FCB               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2115  001F2A  D823               	call	PL52	;call to abstracted procedure
  2116  001F2C  EC3F  F01E         	call	_Read_b_eep	;wreg free
  2117  001F30  0100               	movlb	0	; () banked
  2118  001F32  6FCD               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  2119  001F34  6BCC               	clrf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2120  001F36  51CB               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  2121  001F38  25CC               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2122  001F3A  6F70               	movwf	_relay_pulse_timer& (0+255),b
  2123  001F3C  0E00               	movlw	0
  2124  001F3E  21CD               	addwfc	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2125  001F40  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  2126  001F42                     l10397:
  2127                           
  2128                           ; BSR set to: 0
  2129  001F42  2BD0               	incf	doApplicationOneSecondWork@i& (0+255),f,b
  2130  001F44  D6DD               	goto	l10309
  2131  001F46                     l236:
  2132                           
  2133                           ; BSR set to: 0
  2134  001F46  0012               	return	
  2135  001F48                     __end_of_doApplicationOneSecondWork:
  2136                           	opt stack 0
  2137  001F48                     PL20:
  2138                           	opt stack 22
  2139  001F48  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2140  001F4A  0D02               	mullw	2
  2141  001F4C  50F3               	movf	prodl,w,c
  2142  001F4E  0F60               	addlw	low _relay_protection_timer
  2143  001F50  6ED9               	movwf	fsr2l,c
  2144  001F52  6ADA               	clrf	fsr2h,c
  2145  001F54  0012               	return	
  2146  001F56                     __end_ofPL20:
  2147                           	opt stack 0
  2148  001F56                     PL24:
  2149                           	opt stack 22
  2150  001F56  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2151  001F58  0D02               	mullw	2
  2152  001F5A  50F3               	movf	prodl,w,c
  2153  001F5C  0F70               	addlw	low _relay_pulse_timer
  2154  001F5E  6ED9               	movwf	fsr2l,c
  2155  001F60  6ADA               	clrf	fsr2h,c
  2156  001F62  0012               	return	
  2157  001F64                     __end_ofPL24:
  2158                           	opt stack 0
  2159  001F64                     PL32:
  2160                           	opt stack 22
  2161  001F64  0E4D               	movlw	77
  2162  001F66  25D0               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  2163  001F68  6E08               	movwf	?_Read_b_eep,c
  2164  001F6A  6A09               	clrf	?_Read_b_eep+1,c
  2165  001F6C  0E00               	movlw	0
  2166  001F6E  2209               	addwfc	?_Read_b_eep+1,f,c
  2167  001F70  0C00               	retlw	0
  2168  001F72                     __end_ofPL32:
  2169                           	opt stack 0
  2170  001F72                     PL52:
  2171                           	opt stack 22
  2172  001F72  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2173  001F74  0D02               	mullw	2
  2174  001F76  0E55               	movlw	85
  2175  001F78  24F3               	addwf	prodl,w,c
  2176  001F7A  6E08               	movwf	?_Read_b_eep,c
  2177  001F7C  0E00               	movlw	0
  2178  001F7E  20F4               	addwfc	prodh,w,c
  2179  001F80  6E09               	movwf	?_Read_b_eep+1,c
  2180  001F82  0012               	return	
  2181  001F84                     __end_ofPL52:
  2182                           	opt stack 0
  2183  001F84                     PL54:
  2184                           	opt stack 22
  2185  001F84  51D0               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2186  001F86  0D02               	mullw	2
  2187  001F88  0E56               	movlw	86
  2188  001F8A  24F3               	addwf	prodl,w,c
  2189  001F8C  6E08               	movwf	?_Read_b_eep,c
  2190  001F8E  0E00               	movlw	0
  2191  001F90  20F4               	addwfc	prodh,w,c
  2192  001F92  6E09               	movwf	?_Read_b_eep+1,c
  2193  001F94  0012               	return	
  2194  001F96                     __end_ofPL54:
  2195                           	opt stack 0
  2196                           tblptru	equ	0xFF8
  2197                           tblptrh	equ	0xFF7
  2198                           tblptrl	equ	0xFF6
  2199                           tablat	equ	0xFF5
  2200                           prodh	equ	0xFF4
  2201                           prodl	equ	0xFF3
  2202                           intcon	equ	0xFF2
  2203                           postinc0	equ	0xFEE
  2204                           wreg	equ	0xFE8
  2205                           indf1	equ	0xFE7
  2206                           fsr1h	equ	0xFE2
  2207                           fsr1l	equ	0xFE1
  2208                           indf2	equ	0xFDF
  2209                           postinc2	equ	0xFDE
  2210                           postdec2	equ	0xFDD
  2211                           plusw2	equ	0xFDB
  2212                           fsr2h	equ	0xFDA
  2213                           fsr2l	equ	0xFD9
  2214                           status	equ	0xFD8
  2215                           
  2216 ;; *************** function _vscp_doOneSecondWork *****************
  2217 ;; Defined at:
  2218 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;		None
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;		None
  2223 ;; Return value:  Size  Location     Type
  2224 ;;		None               void
  2225 ;; Registers used:
  2226 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2227 ;; Tracked objects:
  2228 ;;		On entry : F/0
  2229 ;;		On exit  : F/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2232 ;;      Params:         0       0       0       0       0       0       0
  2233 ;;      Locals:         0       0       0       0       0       0       0
  2234 ;;      Temps:          1       0       0       0       0       0       0
  2235 ;;      Totals:         1       0       0       0       0       0       0
  2236 ;;Total ram usage:        1 bytes
  2237 ;; Hardware stack levels used:    1
  2238 ;; Hardware stack levels required when called:    8
  2239 ;; This function calls:
  2240 ;;		_vscp_getZone
  2241 ;;		_vscp_getSubzone
  2242 ;;		_vscp_sendHeartBeat
  2243 ;; This function is called by:
  2244 ;;		_main
  2245 ;; This function uses a non-reentrant model
  2246 ;;
  2247                           
  2248                           	psect	text3
  2249  0037A4                     __ptext3:
  2250                           	opt stack 0
  2251  0037A4                     _vscp_doOneSecondWork:
  2252                           	opt stack 22
  2253                           
  2254                           ; BSR set to: 0
  2255                           ;vscp_firmware.c: 526: ++vscp_second;
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;incstack = 0
  2259                           ;incstack = 0
  2260  0037A4  2B94               	incf	_vscp_second& (0+255),f,b
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  2264  0037A6  0E3B               	movlw	59
  2265  0037A8  6594               	cpfsgt	_vscp_second& (0+255),b
  2266  0037AA  D00D               	goto	l8323
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;vscp_firmware.c: 529: vscp_second = 0;
  2270  0037AC  6B94               	clrf	_vscp_second& (0+255),b
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;vscp_firmware.c: 530: vscp_minute++;
  2274  0037AE  2B8F               	incf	_vscp_minute& (0+255),f,b
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  2278  0037B0  5191               	movf	_vscp_node_state& (0+255),w,b
  2279  0037B2  0A03               	xorlw	3
  2280  0037B4  E108               	bnz	l8323
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  2284                           ;vscp_firmware.c: 535: vscp_getSubzone());
  2285  0037B6  EC51  F01E         	call	_vscp_getSubzone	;wreg free
  2286  0037BA  0100               	movlb	0	; () banked
  2287  0037BC  6FC4               	movwf	?_vscp_sendHeartBeat& (0+255),b
  2288  0037BE  EC56  F01E         	call	_vscp_getZone	;wreg free
  2289  0037C2  ECF6  F01C         	call	_vscp_sendHeartBeat
  2290  0037C6                     l8323:
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;vscp_firmware.c: 536: }
  2294                           ;vscp_firmware.c: 537: }
  2295                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  2296  0037C6  0E3B               	movlw	59
  2297  0037C8  658F               	cpfsgt	_vscp_minute& (0+255),b
  2298  0037CA  D002               	goto	l8329
  2299                           
  2300                           ; BSR set to: 0
  2301                           ;vscp_firmware.c: 540: vscp_minute = 0;
  2302  0037CC  6B8F               	clrf	_vscp_minute& (0+255),b
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;vscp_firmware.c: 541: vscp_hour++;
  2306  0037CE  2B8D               	incf	_vscp_hour& (0+255),f,b
  2307  0037D0                     l8329:
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;vscp_firmware.c: 542: }
  2311                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  2312  0037D0  0E17               	movlw	23
  2313  0037D2  658D               	cpfsgt	_vscp_hour& (0+255),b
  2314  0037D4  D001               	goto	l8333
  2315                           
  2316                           ; BSR set to: 0
  2317  0037D6  6B8D               	clrf	_vscp_hour& (0+255),b
  2318  0037D8                     l8333:
  2319                           
  2320                           ; BSR set to: 0
  2321                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  2322  0037D8  5191               	movf	_vscp_node_state& (0+255),w,b
  2323  0037DA  0A03               	xorlw	3
  2324  0037DC  E109               	bnz	l1116
  2325                           
  2326                           ; BSR set to: 0
  2327                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  2328  0037DE  2B8C               	incf	_vscp_guid_reset& (0+255),f,b
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  2332  0037E0  C08C  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  2333  0037E4  0E0F               	movlw	15
  2334  0037E6  164D               	andwf	??_vscp_doOneSecondWork,f,c
  2335  0037E8  0E02               	movlw	2
  2336  0037EA  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  2337  0037EC  B0D8               	btfsc	status,0,c
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  2341  0037EE  6B8C               	clrf	_vscp_guid_reset& (0+255),b
  2342  0037F0                     l1116:
  2343                           
  2344                           ; BSR set to: 0
  2345  0037F0  0012               	return	
  2346  0037F2                     __end_of_vscp_doOneSecondWork:
  2347                           	opt stack 0
  2348                           tblptru	equ	0xFF8
  2349                           tblptrh	equ	0xFF7
  2350                           tblptrl	equ	0xFF6
  2351                           tablat	equ	0xFF5
  2352                           prodh	equ	0xFF4
  2353                           prodl	equ	0xFF3
  2354                           intcon	equ	0xFF2
  2355                           postinc0	equ	0xFEE
  2356                           wreg	equ	0xFE8
  2357                           indf1	equ	0xFE7
  2358                           fsr1h	equ	0xFE2
  2359                           fsr1l	equ	0xFE1
  2360                           indf2	equ	0xFDF
  2361                           postinc2	equ	0xFDE
  2362                           postdec2	equ	0xFDD
  2363                           plusw2	equ	0xFDB
  2364                           fsr2h	equ	0xFDA
  2365                           fsr2l	equ	0xFD9
  2366                           status	equ	0xFD8
  2367                           
  2368 ;; *************** function _vscp_sendHeartBeat *****************
  2369 ;; Defined at:
  2370 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  2371 ;; Parameters:    Size  Location     Type
  2372 ;;  zone            1    wreg     unsigned char 
  2373 ;;  subzone         1   20[BANK0 ] unsigned char 
  2374 ;; Auto vars:     Size  Location     Type
  2375 ;;  zone            1   75[COMRAM] unsigned char 
  2376 ;; Return value:  Size  Location     Type
  2377 ;;		None               void
  2378 ;; Registers used:
  2379 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2380 ;; Tracked objects:
  2381 ;;		On entry : 0/0
  2382 ;;		On exit  : F/0
  2383 ;;		Unchanged: 0/0
  2384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2385 ;;      Params:         0       1       0       0       0       0       0
  2386 ;;      Locals:         1       0       0       0       0       0       0
  2387 ;;      Temps:          0       0       0       0       0       0       0
  2388 ;;      Totals:         1       1       0       0       0       0       0
  2389 ;;Total ram usage:        2 bytes
  2390 ;; Hardware stack levels used:    1
  2391 ;; Hardware stack levels required when called:    7
  2392 ;; This function calls:
  2393 ;;		_vscp_sendEvent
  2394 ;; This function is called by:
  2395 ;;		_vscp_doOneSecondWork
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           	psect	text4
  2400  0039EC                     __ptext4:
  2401                           	opt stack 0
  2402  0039EC                     _vscp_sendHeartBeat:
  2403                           	opt stack 22
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;incstack = 0
  2407                           ;incstack = 0
  2408                           ;vscp_sendHeartBeat@zone stored from wreg
  2409  0039EC  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  2410                           
  2411                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  2412  0039F0  0E83               	movlw	131
  2413  0039F2  0100               	movlb	0	; () banked
  2414  0039F4  6FA3               	movwf	_vscp_omsg& (0+255),b
  2415                           
  2416                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  2417  0039F6  0E07               	movlw	7
  2418  0039F8  6FA4               	movwf	(_vscp_omsg+1)& (0+255),b
  2419                           
  2420                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  2421  0039FA  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
  2422  0039FC  0E14               	movlw	20
  2423  0039FE  6FA5               	movwf	(_vscp_omsg+2)& (0+255),b
  2424                           
  2425                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  2426  003A00  0E09               	movlw	9
  2427  003A02  6FA7               	movwf	(_vscp_omsg+4)& (0+255),b
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  2431  003A04  6BA8               	clrf	(_vscp_omsg+5)& (0+255),b
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  2435  003A06  C04C  F0A9         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  2439  003A0A  C0C4  F0AA         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;vscp_firmware.c: 388: vscp_sendEvent();
  2443  003A0E  EF2F  F01D         	goto	_vscp_sendEvent	;wreg free
  2444  003A12                     __end_of_vscp_sendHeartBeat:
  2445                           	opt stack 0
  2446                           tblptru	equ	0xFF8
  2447                           tblptrh	equ	0xFF7
  2448                           tblptrl	equ	0xFF6
  2449                           tablat	equ	0xFF5
  2450                           prodh	equ	0xFF4
  2451                           prodl	equ	0xFF3
  2452                           intcon	equ	0xFF2
  2453                           postinc0	equ	0xFEE
  2454                           wreg	equ	0xFE8
  2455                           indf1	equ	0xFE7
  2456                           fsr1h	equ	0xFE2
  2457                           fsr1l	equ	0xFE1
  2458                           indf2	equ	0xFDF
  2459                           postinc2	equ	0xFDE
  2460                           postdec2	equ	0xFDD
  2461                           plusw2	equ	0xFDB
  2462                           fsr2h	equ	0xFDA
  2463                           fsr2l	equ	0xFD9
  2464                           status	equ	0xFD8
  2465                           
  2466 ;; *************** function _vscp_getSubzone *****************
  2467 ;; Defined at:
  2468 ;;		line 874 in file "../main.c"
  2469 ;; Parameters:    Size  Location     Type
  2470 ;;		None
  2471 ;; Auto vars:     Size  Location     Type
  2472 ;;		None
  2473 ;; Return value:  Size  Location     Type
  2474 ;;                  1    wreg      unsigned char 
  2475 ;; Registers used:
  2476 ;;		wreg, status,2, cstack
  2477 ;; Tracked objects:
  2478 ;;		On entry : F/0
  2479 ;;		On exit  : 0/0
  2480 ;;		Unchanged: 0/0
  2481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2482 ;;      Params:         0       0       0       0       0       0       0
  2483 ;;      Locals:         0       0       0       0       0       0       0
  2484 ;;      Temps:          0       0       0       0       0       0       0
  2485 ;;      Totals:         0       0       0       0       0       0       0
  2486 ;;Total ram usage:        0 bytes
  2487 ;; Hardware stack levels used:    1
  2488 ;; Hardware stack levels required when called:    3
  2489 ;; This function calls:
  2490 ;;		_Read_b_eep
  2491 ;; This function is called by:
  2492 ;;		_vscp_doOneSecondWork
  2493 ;; This function uses a non-reentrant model
  2494 ;;
  2495                           
  2496                           	psect	text5
  2497  003CA2                     __ptext5:
  2498                           	opt stack 0
  2499  003CA2                     _vscp_getSubzone:
  2500                           	opt stack 26
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;main.c: 875: return Read_b_eep(0x43 + 1);
  2504                           
  2505                           ; BSR set to: 0
  2506                           ;incstack = 0
  2507                           ;incstack = 0
  2508  003CA2  6A09               	clrf	?_Read_b_eep+1,c
  2509  003CA4  0E44               	movlw	68
  2510  003CA6  6E08               	movwf	?_Read_b_eep,c
  2511  003CA8  EF3F  F01E         	goto	_Read_b_eep	;wreg free
  2512  003CAC                     __end_of_vscp_getSubzone:
  2513                           	opt stack 0
  2514                           tblptru	equ	0xFF8
  2515                           tblptrh	equ	0xFF7
  2516                           tblptrl	equ	0xFF6
  2517                           tablat	equ	0xFF5
  2518                           prodh	equ	0xFF4
  2519                           prodl	equ	0xFF3
  2520                           intcon	equ	0xFF2
  2521                           postinc0	equ	0xFEE
  2522                           wreg	equ	0xFE8
  2523                           indf1	equ	0xFE7
  2524                           fsr1h	equ	0xFE2
  2525                           fsr1l	equ	0xFE1
  2526                           indf2	equ	0xFDF
  2527                           postinc2	equ	0xFDE
  2528                           postdec2	equ	0xFDD
  2529                           plusw2	equ	0xFDB
  2530                           fsr2h	equ	0xFDA
  2531                           fsr2l	equ	0xFD9
  2532                           status	equ	0xFD8
  2533                           
  2534 ;; *************** function _vscp_getZone *****************
  2535 ;; Defined at:
  2536 ;;		line 865 in file "../main.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;		None
  2539 ;; Auto vars:     Size  Location     Type
  2540 ;;		None
  2541 ;; Return value:  Size  Location     Type
  2542 ;;                  1    wreg      unsigned char 
  2543 ;; Registers used:
  2544 ;;		wreg, status,2, cstack
  2545 ;; Tracked objects:
  2546 ;;		On entry : F/0
  2547 ;;		On exit  : 0/0
  2548 ;;		Unchanged: 0/0
  2549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2550 ;;      Params:         0       0       0       0       0       0       0
  2551 ;;      Locals:         0       0       0       0       0       0       0
  2552 ;;      Temps:          0       0       0       0       0       0       0
  2553 ;;      Totals:         0       0       0       0       0       0       0
  2554 ;;Total ram usage:        0 bytes
  2555 ;; Hardware stack levels used:    1
  2556 ;; Hardware stack levels required when called:    3
  2557 ;; This function calls:
  2558 ;;		_Read_b_eep
  2559 ;; This function is called by:
  2560 ;;		_vscp_doOneSecondWork
  2561 ;; This function uses a non-reentrant model
  2562 ;;
  2563                           
  2564                           	psect	text6
  2565  003CAC                     __ptext6:
  2566                           	opt stack 0
  2567  003CAC                     _vscp_getZone:
  2568                           	opt stack 26
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;main.c: 866: return Read_b_eep(0x43 + 0);
  2572                           
  2573                           ;incstack = 0
  2574                           ;incstack = 0
  2575  003CAC  6A09               	clrf	?_Read_b_eep+1,c
  2576  003CAE  0E43               	movlw	67
  2577  003CB0  6E08               	movwf	?_Read_b_eep,c
  2578  003CB2  EF3F  F01E         	goto	_Read_b_eep	;wreg free
  2579  003CB6                     __end_of_vscp_getZone:
  2580                           	opt stack 0
  2581                           tblptru	equ	0xFF8
  2582                           tblptrh	equ	0xFF7
  2583                           tblptrl	equ	0xFF6
  2584                           tablat	equ	0xFF5
  2585                           prodh	equ	0xFF4
  2586                           prodl	equ	0xFF3
  2587                           intcon	equ	0xFF2
  2588                           postinc0	equ	0xFEE
  2589                           wreg	equ	0xFE8
  2590                           indf1	equ	0xFE7
  2591                           fsr1h	equ	0xFE2
  2592                           fsr1l	equ	0xFE1
  2593                           indf2	equ	0xFDF
  2594                           postinc2	equ	0xFDE
  2595                           postdec2	equ	0xFDD
  2596                           plusw2	equ	0xFDB
  2597                           fsr2h	equ	0xFDA
  2598                           fsr2l	equ	0xFD9
  2599                           status	equ	0xFD8
  2600                           
  2601 ;; *************** function _vscp_error *****************
  2602 ;; Defined at:
  2603 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;		None
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;		None
  2608 ;; Return value:  Size  Location     Type
  2609 ;;		None               void
  2610 ;; Registers used:
  2611 ;;		None
  2612 ;; Tracked objects:
  2613 ;;		On entry : 0/0
  2614 ;;		On exit  : 0/0
  2615 ;;		Unchanged: 0/0
  2616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2617 ;;      Params:         0       0       0       0       0       0       0
  2618 ;;      Locals:         0       0       0       0       0       0       0
  2619 ;;      Temps:          0       0       0       0       0       0       0
  2620 ;;      Totals:         0       0       0       0       0       0       0
  2621 ;;Total ram usage:        0 bytes
  2622 ;; Hardware stack levels used:    1
  2623 ;; Hardware stack levels required when called:    2
  2624 ;; This function calls:
  2625 ;;		Nothing
  2626 ;; This function is called by:
  2627 ;;		_main
  2628 ;; This function uses a non-reentrant model
  2629 ;;
  2630                           
  2631                           	psect	text7
  2632  003CEC                     __ptext7:
  2633                           	opt stack 0
  2634  003CEC                     _vscp_error:
  2635                           	opt stack 28
  2636                           
  2637                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  2638                           
  2639                           ;incstack = 0
  2640                           ;incstack = 0
  2641  003CEC  6A56               	clrf	_vscp_initledfunc,c
  2642  003CEE  0012               	return	
  2643  003CF0                     __end_of_vscp_error:
  2644                           	opt stack 0
  2645                           tblptru	equ	0xFF8
  2646                           tblptrh	equ	0xFF7
  2647                           tblptrl	equ	0xFF6
  2648                           tablat	equ	0xFF5
  2649                           prodh	equ	0xFF4
  2650                           prodl	equ	0xFF3
  2651                           intcon	equ	0xFF2
  2652                           postinc0	equ	0xFEE
  2653                           wreg	equ	0xFE8
  2654                           indf1	equ	0xFE7
  2655                           fsr1h	equ	0xFE2
  2656                           fsr1l	equ	0xFE1
  2657                           indf2	equ	0xFDF
  2658                           postinc2	equ	0xFDE
  2659                           postdec2	equ	0xFDD
  2660                           plusw2	equ	0xFDB
  2661                           fsr2h	equ	0xFDA
  2662                           fsr2l	equ	0xFD9
  2663                           status	equ	0xFD8
  2664                           
  2665 ;; *************** function _doDM *****************
  2666 ;; Defined at:
  2667 ;;		line 1630 in file "../main.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;		None
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;  class_mask      2   33[BANK0 ] unsigned short 
  2672 ;;  class_filter    2   31[BANK0 ] unsigned short 
  2673 ;;  i               1   44[BANK0 ] unsigned char 
  2674 ;;  dmflags         1   43[BANK0 ] unsigned char 
  2675 ;;  type_mask       1   36[BANK0 ] unsigned char 
  2676 ;;  type_filter     1   35[BANK0 ] unsigned char 
  2677 ;; Return value:  Size  Location     Type
  2678 ;;		None               void
  2679 ;; Registers used:
  2680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : F/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2686 ;;      Params:         0       0       0       0       0       0       0
  2687 ;;      Locals:         0      14       0       0       0       0       0
  2688 ;;      Temps:          0       3       0       0       0       0       0
  2689 ;;      Totals:         0      17       0       0       0       0       0
  2690 ;;Total ram usage:       17 bytes
  2691 ;; Hardware stack levels used:    1
  2692 ;; Hardware stack levels required when called:    8
  2693 ;; This function calls:
  2694 ;;		_Read_b_eep
  2695 ;;		_doActionOff
  2696 ;;		_doActionOn
  2697 ;;		_doActionPulse
  2698 ;;		_doActionStatus
  2699 ;;		_doActionDisable
  2700 ;;		_doActionToggle
  2701 ;; This function is called by:
  2702 ;;		_main
  2703 ;; This function uses a non-reentrant model
  2704 ;;
  2705                           
  2706                           	psect	text8
  2707  002200                     __ptext8:
  2708                           	opt stack 0
  2709  002200                     _doDM:
  2710                           	opt stack 22
  2711                           
  2712                           ;main.c: 1631: unsigned char i;
  2713                           ;main.c: 1632: unsigned char dmflags;
  2714                           ;main.c: 1633: unsigned short class_filter;
  2715                           ;main.c: 1634: unsigned short class_mask;
  2716                           ;main.c: 1635: unsigned char type_filter;
  2717                           ;main.c: 1636: unsigned char type_mask;
  2718                           ;main.c: 1639: if ( 0 == vscp_imsg.vscp_class ) return;
  2719                           
  2720                           ;incstack = 0
  2721                           ;incstack = 0
  2722  002200  0100               	movlb	0	; () banked
  2723  002202  5198               	movf	(_vscp_imsg+3)& (0+255),w,b
  2724  002204  1197               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  2725  002206  E101 D102          	bz	l420
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;main.c: 1641: for (i = 0; i < 7; i++) {
  2729  00220A  6BDC               	clrf	doDM@i& (0+255),b
  2730  00220C                     l10245:
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;main.c: 1644: dmflags = Read_b_eep(0x43 + 72 + 1 + (8 * i));
  2734  00220C  D901               	call	PL2	;call to abstracted procedure
  2735  00220E  0E8C               	movlw	140
  2736  002210  25CC               	addwf	??_doDM& (0+255),w,b
  2737  002212  6E08               	movwf	?_Read_b_eep,c
  2738  002214  0E00               	movlw	0
  2739  002216  21CD               	addwfc	(??_doDM+1)& (0+255),w,b
  2740  002218  6E09               	movwf	?_Read_b_eep+1,c
  2741  00221A  EC3F  F01E         	call	_Read_b_eep	;wreg free
  2742  00221E  0100               	movlb	0	; () banked
  2743  002220  6FDB               	movwf	doDM@dmflags& (0+255),b
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;main.c: 1647: if ( dmflags & 0x80 ) {
  2747  002222  AFDB               	btfss	doDM@dmflags& (0+255),7,b
  2748  002224  D0EF               	goto	l10303
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;main.c: 1650: if ( ( dmflags & 0x40 ) &&
  2752                           ;main.c: 1651: ( vscp_imsg.oaddr != Read_b_eep(0x43 + 72 + (8 * i)) ) ) {
  2753  002226  ADDB               	btfss	doDM@dmflags& (0+255),6,b
  2754  002228  D018               	goto	l424
  2755                           
  2756                           ; BSR set to: 0
  2757  00222A  51DC               	movf	doDM@i& (0+255),w,b
  2758  00222C  6FCC               	movwf	??_doDM& (0+255),b
  2759  00222E  6BCD               	clrf	(??_doDM+1)& (0+255),b
  2760  002230  90D8               	bcf	status,0,c
  2761  002232  37CC               	rlcf	??_doDM& (0+255),f,b
  2762  002234  37CD               	rlcf	(??_doDM+1)& (0+255),f,b
  2763  002236  90D8               	bcf	status,0,c
  2764  002238  37CC               	rlcf	??_doDM& (0+255),f,b
  2765  00223A  37CD               	rlcf	(??_doDM+1)& (0+255),f,b
  2766  00223C  90D8               	bcf	status,0,c
  2767  00223E  37CC               	rlcf	??_doDM& (0+255),f,b
  2768  002240  37CD               	rlcf	(??_doDM+1)& (0+255),f,b
  2769  002242  0E8B               	movlw	139
  2770  002244  25CC               	addwf	??_doDM& (0+255),w,b
  2771  002246  6E08               	movwf	?_Read_b_eep,c
  2772  002248  0E00               	movlw	0
  2773  00224A  21CD               	addwfc	(??_doDM+1)& (0+255),w,b
  2774  00224C  6E09               	movwf	?_Read_b_eep+1,c
  2775  00224E  EC3F  F01E         	call	_Read_b_eep	;wreg free
  2776  002252  0100               	movlb	0	; () banked
  2777  002254  199A               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  2778  002256  E001 D0D5          	bnz	l10303
  2779  00225A                     l424:
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;main.c: 1653: }
  2783                           ;main.c: 1656: if ( dmflags & 0x10 ) {
  2784  00225A  A9DB               	btfss	doDM@dmflags& (0+255),4,b
  2785  00225C  D00B               	goto	l426
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;main.c: 1657: if ( 255 != vscp_imsg.data[ 1 ] ) {
  2789  00225E  299C               	incf	(_vscp_imsg+7)& (0+255),w,b
  2790  002260  E009               	bz	l426
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;main.c: 1658: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x43 + 0) ) {
  2794  002262  6A09               	clrf	?_Read_b_eep+1,c
  2795  002264  0E43               	movlw	67
  2796  002266  6E08               	movwf	?_Read_b_eep,c
  2797  002268  EC3F  F01E         	call	_Read_b_eep	;wreg free
  2798  00226C  0100               	movlb	0	; () banked
  2799  00226E  199C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2800  002270  E001 D0C8          	bnz	l10303
  2801  002274                     l426:
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;main.c: 1660: }
  2805                           ;main.c: 1661: }
  2806                           ;main.c: 1662: }
  2807                           ;main.c: 1665: if ( dmflags & 0x08 ) {
  2808  002274  A7DB               	btfss	doDM@dmflags& (0+255),3,b
  2809  002276  D00B               	goto	l10267
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;main.c: 1666: if ( 255 != vscp_imsg.data[ 2 ] ) {
  2813  002278  299D               	incf	(_vscp_imsg+8)& (0+255),w,b
  2814  00227A  E009               	bz	l10267
  2815                           
  2816                           ; BSR set to: 0
  2817                           ;main.c: 1667: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 1) ) {
  2818  00227C  6A09               	clrf	?_Read_b_eep+1,c
  2819  00227E  0E44               	movlw	68
  2820  002280  6E08               	movwf	?_Read_b_eep,c
  2821  002282  EC3F  F01E         	call	_Read_b_eep	;wreg free
  2822  002286  0100               	movlb	0	; () banked
  2823  002288  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  2824  00228A  E001 D0BB          	bnz	l10303
  2825  00228E                     l10267:
  2826                           
  2827                           ; BSR set to: 0
  2828                           ;main.c: 1669: }
  2829                           ;main.c: 1670: }
  2830                           ;main.c: 1671: }
  2831                           ;main.c: 1673: class_filter = ( dmflags & 0x01)*256 +
  2832                           ;main.c: 1674: Read_b_eep(0x43 + 72 + (8 * i) + 3);
  2833  00228E  51DC               	movf	doDM@i& (0+255),w,b
  2834  002290  0D08               	mullw	8
  2835  002292  0E8E               	movlw	142
  2836  002294  24F3               	addwf	prodl,w,c
  2837  002296  6E08               	movwf	?_Read_b_eep,c
  2838  002298  0E00               	movlw	0
  2839  00229A  20F4               	addwfc	prodh,w,c
  2840  00229C  6E09               	movwf	?_Read_b_eep+1,c
  2841  00229E  EC3F  F01E         	call	_Read_b_eep	;wreg free
  2842  0022A2  0100               	movlb	0	; () banked
  2843  0022A4  6FCC               	movwf	??_doDM& (0+255),b
  2844  0022A6  51DB               	movf	doDM@dmflags& (0+255),w,b
  2845  0022A8  0B01               	andlw	1
  2846  0022AA  6FCE               	movwf	(??_doDM+2)& (0+255),b
  2847  0022AC  6BCD               	clrf	(??_doDM+1)& (0+255),b
  2848  0022AE  51CC               	movf	??_doDM& (0+255),w,b
  2849  0022B0  25CD               	addwf	(??_doDM+1)& (0+255),w,b
  2850  0022B2  6FCF               	movwf	doDM@class_filter& (0+255),b
  2851  0022B4  0E00               	movlw	0
  2852  0022B6  21CE               	addwfc	(??_doDM+2)& (0+255),w,b
  2853  0022B8  6FD0               	movwf	(doDM@class_filter+1)& (0+255),b
  2854                           
  2855                           ;main.c: 1678: class_mask = ( dmflags & 0x02)*256 +
  2856                           ;main.c: 1679: Read_b_eep(0x43 + 72 + (8 * i) + 2);
  2857  0022BA  51DC               	movf	doDM@i& (0+255),w,b
  2858  0022BC  0D08               	mullw	8
  2859  0022BE  0E8D               	movlw	141
  2860  0022C0  24F3               	addwf	prodl,w,c
  2861  0022C2  6E08               	movwf	?_Read_b_eep,c
  2862  0022C4  0E00               	movlw	0
  2863  0022C6  20F4               	addwfc	prodh,w,c
  2864  0022C8  6E09               	movwf	?_Read_b_eep+1,c
  2865  0022CA  EC3F  F01E         	call	_Read_b_eep	;wreg free
  2866  0022CE  0100               	movlb	0	; () banked
  2867  0022D0  6FCC               	movwf	??_doDM& (0+255),b
  2868  0022D2  51DB               	movf	doDM@dmflags& (0+255),w,b
  2869  0022D4  0B02               	andlw	2
  2870  0022D6  6FCE               	movwf	(??_doDM+2)& (0+255),b
  2871  0022D8  6BCD               	clrf	(??_doDM+1)& (0+255),b
  2872  0022DA  51CC               	movf	??_doDM& (0+255),w,b
  2873  0022DC  25CD               	addwf	(??_doDM+1)& (0+255),w,b
  2874  0022DE  6FD1               	movwf	doDM@class_mask& (0+255),b
  2875  0022E0  0E00               	movlw	0
  2876  0022E2  21CE               	addwfc	(??_doDM+2)& (0+255),w,b
  2877  0022E4  6FD2               	movwf	(doDM@class_mask+1)& (0+255),b
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;main.c: 1683: type_filter = Read_b_eep(0x43 + 72 + (8 * i) + 5);
  2881  0022E6  D894               	call	PL2	;call to abstracted procedure
  2882  0022E8  0E90               	movlw	144
  2883  0022EA  25CC               	addwf	??_doDM& (0+255),w,b
  2884  0022EC  6E08               	movwf	?_Read_b_eep,c
  2885  0022EE  0E00               	movlw	0
  2886  0022F0  21CD               	addwfc	(??_doDM+1)& (0+255),w,b
  2887  0022F2  6E09               	movwf	?_Read_b_eep+1,c
  2888  0022F4  EC3F  F01E         	call	_Read_b_eep	;wreg free
  2889  0022F8  0100               	movlb	0	; () banked
  2890  0022FA  6FD3               	movwf	doDM@type_filter& (0+255),b
  2891                           
  2892                           ; BSR set to: 0
  2893                           ;main.c: 1687: type_mask = Read_b_eep(0x43 + 72 + (8 * i) + 4);
  2894  0022FC  D889               	call	PL2	;call to abstracted procedure
  2895  0022FE  0E8F               	movlw	143
  2896  002300  25CC               	addwf	??_doDM& (0+255),w,b
  2897  002302  6E08               	movwf	?_Read_b_eep,c
  2898  002304  0E00               	movlw	0
  2899  002306  21CD               	addwfc	(??_doDM+1)& (0+255),w,b
  2900  002308  6E09               	movwf	?_Read_b_eep+1,c
  2901  00230A  EC3F  F01E         	call	_Read_b_eep	;wreg free
  2902  00230E  0100               	movlb	0	; () banked
  2903  002310  6FD4               	movwf	doDM@type_mask& (0+255),b
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;main.c: 1692: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2907                           ;main.c: 1693: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2908  002312  EE20  F097         	lfsr	2,_vscp_imsg+2
  2909  002316  CFDE F0CC          	movff	postinc2,??_doDM
  2910  00231A  CFDD F0CD          	movff	postdec2,??_doDM+1
  2911  00231E  51CF               	movf	doDM@class_filter& (0+255),w,b
  2912  002320  1BCC               	xorwf	??_doDM& (0+255),f,b
  2913  002322  51D0               	movf	(doDM@class_filter+1)& (0+255),w,b
  2914  002324  1BCD               	xorwf	(??_doDM+1)& (0+255),f,b
  2915  002326  51D1               	movf	doDM@class_mask& (0+255),w,b
  2916  002328  17CC               	andwf	??_doDM& (0+255),f,b
  2917  00232A  51D2               	movf	(doDM@class_mask+1)& (0+255),w,b
  2918  00232C  17CD               	andwf	(??_doDM+1)& (0+255),f,b
  2919  00232E  51CD               	movf	(??_doDM+1)& (0+255),w,b
  2920  002330  11CC               	iorwf	??_doDM& (0+255),w,b
  2921  002332  E168               	bnz	l10303
  2922                           
  2923                           ; BSR set to: 0
  2924  002334  5199               	movf	(_vscp_imsg+4)& (0+255),w,b
  2925  002336  19D3               	xorwf	doDM@type_filter& (0+255),w,b
  2926  002338  15D4               	andwf	doDM@type_mask& (0+255),w,b
  2927  00233A  E04F               	bz	l10301
  2928  00233C  D063               	goto	l10303
  2929  00233E                     l10279:
  2930                           
  2931                           ;main.c: 1699: doActionOn( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2932  00233E  0100               	movlb	0	; () banked
  2933  002340  D867               	call	PL2	;call to abstracted procedure
  2934  002342  D873               	call	PL16	;call to abstracted procedure
  2935  002344  EC3F  F01E         	call	_Read_b_eep	;wreg free
  2936  002348  0100               	movlb	0	; () banked
  2937  00234A  6FD5               	movwf	_doDM$2152& (0+255),b
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;main.c: 1699: doActionOn( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2941  00234C  C0D5  F051         	movff	_doDM$2152,?_doActionOn
  2942  002350  51DB               	movf	doDM@dmflags& (0+255),w,b
  2943  002352  ECCB  F00F         	call	_doActionOn
  2944                           
  2945                           ;main.c: 1700: break;
  2946  002356  D056               	goto	l10303
  2947  002358                     l10283:
  2948                           
  2949                           ;main.c: 1703: doActionOff( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2950  002358  0100               	movlb	0	; () banked
  2951  00235A  D85A               	call	PL2	;call to abstracted procedure
  2952  00235C  D866               	call	PL16	;call to abstracted procedure
  2953  00235E  EC3F  F01E         	call	_Read_b_eep	;wreg free
  2954  002362  0100               	movlb	0	; () banked
  2955  002364  6FD6               	movwf	_doDM$2153& (0+255),b
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;main.c: 1703: doActionOff( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2959  002366  C0D6  F051         	movff	_doDM$2153,?_doActionOff
  2960  00236A  51DB               	movf	doDM@dmflags& (0+255),w,b
  2961  00236C  EC32  F019         	call	_doActionOff
  2962                           
  2963                           ;main.c: 1704: break;
  2964  002370  D049               	goto	l10303
  2965  002372                     l10287:
  2966                           
  2967                           ;main.c: 1707: doActionPulse( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2968  002372  0100               	movlb	0	; () banked
  2969  002374  D84D               	call	PL2	;call to abstracted procedure
  2970  002376  D859               	call	PL16	;call to abstracted procedure
  2971  002378  EC3F  F01E         	call	_Read_b_eep	;wreg free
  2972  00237C  0100               	movlb	0	; () banked
  2973  00237E  6FD7               	movwf	_doDM$2154& (0+255),b
  2974                           
  2975                           ;main.c: 1707: doActionPulse( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2976  002380  C0D7  F00A         	movff	_doDM$2154,?_doActionPulse
  2977  002384  51DB               	movf	doDM@dmflags& (0+255),w,b
  2978  002386  EC20  F013         	call	_doActionPulse
  2979                           
  2980                           ;main.c: 1708: break;
  2981  00238A  D03C               	goto	l10303
  2982  00238C                     l10289:
  2983                           
  2984                           ;main.c: 1711: doActionStatus( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2985  00238C  0100               	movlb	0	; () banked
  2986  00238E  D840               	call	PL2	;call to abstracted procedure
  2987  002390  D84C               	call	PL16	;call to abstracted procedure
  2988  002392  EC3F  F01E         	call	_Read_b_eep	;wreg free
  2989  002396  0100               	movlb	0	; () banked
  2990  002398  6FD8               	movwf	_doDM$2155& (0+255),b
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;main.c: 1711: doActionStatus( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  2994  00239A  C0D8  F051         	movff	_doDM$2155,?_doActionStatus
  2995  00239E  51DB               	movf	doDM@dmflags& (0+255),w,b
  2996  0023A0  EC35  F017         	call	_doActionStatus
  2997                           
  2998                           ;main.c: 1712: break;
  2999  0023A4  D02F               	goto	l10303
  3000  0023A6                     l10293:
  3001                           
  3002                           ;main.c: 1715: doActionDisable( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  3003  0023A6  0100               	movlb	0	; () banked
  3004  0023A8  D833               	call	PL2	;call to abstracted procedure
  3005  0023AA  D83F               	call	PL16	;call to abstracted procedure
  3006  0023AC  EC3F  F01E         	call	_Read_b_eep	;wreg free
  3007  0023B0  0100               	movlb	0	; () banked
  3008  0023B2  6FD9               	movwf	_doDM$2156& (0+255),b
  3009                           
  3010                           ;main.c: 1715: doActionDisable( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  3011  0023B4  C0D9  F00C         	movff	_doDM$2156,?_doActionDisable
  3012  0023B8  51DB               	movf	doDM@dmflags& (0+255),w,b
  3013  0023BA  EC64  F01B         	call	_doActionDisable
  3014                           
  3015                           ;main.c: 1716: break;
  3016  0023BE  D022               	goto	l10303
  3017  0023C0                     l10295:
  3018                           
  3019                           ;main.c: 1719: doActionToggle( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  3020  0023C0  0100               	movlb	0	; () banked
  3021  0023C2  D826               	call	PL2	;call to abstracted procedure
  3022  0023C4  D832               	call	PL16	;call to abstracted procedure
  3023  0023C6  EC3F  F01E         	call	_Read_b_eep	;wreg free
  3024  0023CA  0100               	movlb	0	; () banked
  3025  0023CC  6FDA               	movwf	_doDM$2157& (0+255),b
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;main.c: 1719: doActionToggle( dmflags, Read_b_eep(0x43 + 72 + (8 * i) + 7) );
  3029  0023CE  C0DA  F051         	movff	_doDM$2157,?_doActionToggle
  3030  0023D2  51DB               	movf	doDM@dmflags& (0+255),w,b
  3031  0023D4  EC8C  F015         	call	_doActionToggle
  3032                           
  3033                           ;main.c: 1720: break;
  3034  0023D8  D015               	goto	l10303
  3035  0023DA                     l10301:
  3036                           
  3037                           ; BSR set to: 0
  3038  0023DA  D81A               	call	PL2	;call to abstracted procedure
  3039  0023DC  0E91               	movlw	145
  3040  0023DE  25CC               	addwf	??_doDM& (0+255),w,b
  3041  0023E0  6E08               	movwf	?_Read_b_eep,c
  3042  0023E2  0E00               	movlw	0
  3043  0023E4  21CD               	addwfc	(??_doDM+1)& (0+255),w,b
  3044  0023E6  6E09               	movwf	?_Read_b_eep+1,c
  3045  0023E8  EC3F  F01E         	call	_Read_b_eep	;wreg free
  3046                           
  3047                           ; Switch size 1, requested type "space"
  3048                           ; Number of cases is 6, Range of values is 1 to 16
  3049                           ; switch strategies available:
  3050                           ; Name         Instructions Cycles
  3051                           ; simple_byte           19    10 (average)
  3052                           ;	Chosen strategy is simple_byte
  3053  0023EC  0A01               	xorlw	1	; case 1
  3054  0023EE  E0A7               	bz	l10279
  3055  0023F0  0A03               	xorlw	3	; case 2
  3056  0023F2  E0B2               	bz	l10283
  3057  0023F4  0A01               	xorlw	1	; case 3
  3058  0023F6  E0BD               	bz	l10287
  3059  0023F8  0A07               	xorlw	7	; case 4
  3060  0023FA  E0E2               	bz	l10295
  3061  0023FC  0A0E               	xorlw	14	; case 10
  3062  0023FE  E0C6               	bz	l10289
  3063  002400  0A1A               	xorlw	26	; case 16
  3064  002402  E0D1               	bz	l10293
  3065  002404                     l10303:
  3066  002404  0100               	movlb	0	; () banked
  3067  002406  2BDC               	incf	doDM@i& (0+255),f,b
  3068                           
  3069                           ; BSR set to: 0
  3070  002408  0E06               	movlw	6
  3071  00240A  65DC               	cpfsgt	doDM@i& (0+255),b
  3072  00240C  D6FF               	goto	l10245
  3073  00240E                     l420:
  3074                           
  3075                           ; BSR set to: 0
  3076  00240E  0012               	return	
  3077  002410                     __end_of_doDM:
  3078                           	opt stack 0
  3079  002410                     PL2:
  3080                           	opt stack 22
  3081  002410  51DC               	movf	doDM@i& (0+255),w,b
  3082  002412  6FCC               	movwf	??_doDM& (0+255),b
  3083  002414  6BCD               	clrf	(??_doDM+1)& (0+255),b
  3084  002416  90D8               	bcf	status,0,c
  3085  002418  37CC               	rlcf	??_doDM& (0+255),f,b
  3086  00241A  37CD               	rlcf	(??_doDM+1)& (0+255),f,b
  3087  00241C  90D8               	bcf	status,0,c
  3088  00241E  37CC               	rlcf	??_doDM& (0+255),f,b
  3089  002420  37CD               	rlcf	(??_doDM+1)& (0+255),f,b
  3090  002422  90D8               	bcf	status,0,c
  3091  002424  37CC               	rlcf	??_doDM& (0+255),f,b
  3092  002426  37CD               	rlcf	(??_doDM+1)& (0+255),f,b
  3093  002428  0012               	return	
  3094  00242A                     __end_ofPL2:
  3095                           	opt stack 0
  3096  00242A                     PL16:
  3097                           	opt stack 22
  3098  00242A  0E92               	movlw	146
  3099  00242C  25CC               	addwf	??_doDM& (0+255),w,b
  3100  00242E  6E08               	movwf	?_Read_b_eep,c
  3101  002430  0E00               	movlw	0
  3102  002432  21CD               	addwfc	(??_doDM+1)& (0+255),w,b
  3103  002434  6E09               	movwf	?_Read_b_eep+1,c
  3104  002436  0012               	return	
  3105  002438                     __end_ofPL16:
  3106                           	opt stack 0
  3107                           tblptru	equ	0xFF8
  3108                           tblptrh	equ	0xFF7
  3109                           tblptrl	equ	0xFF6
  3110                           tablat	equ	0xFF5
  3111                           prodh	equ	0xFF4
  3112                           prodl	equ	0xFF3
  3113                           intcon	equ	0xFF2
  3114                           postinc0	equ	0xFEE
  3115                           wreg	equ	0xFE8
  3116                           indf1	equ	0xFE7
  3117                           fsr1h	equ	0xFE2
  3118                           fsr1l	equ	0xFE1
  3119                           indf2	equ	0xFDF
  3120                           postinc2	equ	0xFDE
  3121                           postdec2	equ	0xFDD
  3122                           plusw2	equ	0xFDB
  3123                           fsr2h	equ	0xFDA
  3124                           fsr2l	equ	0xFD9
  3125                           status	equ	0xFD8
  3126                           
  3127 ;; *************** function _doActionToggle *****************
  3128 ;; Defined at:
  3129 ;;		line 2131 in file "../main.c"
  3130 ;; Parameters:    Size  Location     Type
  3131 ;;  dmflags         1    wreg     unsigned char 
  3132 ;;  arg             1   80[COMRAM] unsigned char 
  3133 ;; Auto vars:     Size  Location     Type
  3134 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3135 ;;  i               1   27[BANK0 ] unsigned char 
  3136 ;;  bOn             1   26[BANK0 ] enum E15660
  3137 ;;  val             1   25[BANK0 ] unsigned char 
  3138 ;; Return value:  Size  Location     Type
  3139 ;;		None               void
  3140 ;; Registers used:
  3141 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3142 ;; Tracked objects:
  3143 ;;		On entry : F/0
  3144 ;;		On exit  : F/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3147 ;;      Params:         1       0       0       0       0       0       0
  3148 ;;      Locals:         0       4       0       0       0       0       0
  3149 ;;      Temps:          0       2       0       0       0       0       0
  3150 ;;      Totals:         1       6       0       0       0       0       0
  3151 ;;Total ram usage:        7 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; Hardware stack levels required when called:    7
  3154 ;; This function calls:
  3155 ;;		_Read_b_eep
  3156 ;;		_SendInformationEvent
  3157 ;; This function is called by:
  3158 ;;		_doDM
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           	psect	text9
  3163  002B18                     __ptext9:
  3164                           	opt stack 0
  3165  002B18                     _doActionToggle:
  3166                           	opt stack 22
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;incstack = 0
  3170                           ;incstack = 0
  3171                           ;doActionToggle@dmflags stored from wreg
  3172  002B18  CFE8 F0C8          	movff	wreg,doActionToggle@dmflags
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;main.c: 2133: unsigned char i;
  3176                           ;main.c: 2134: unsigned char val;
  3177                           ;main.c: 2135: BOOL bOn = 0;
  3178  002B1C  6BCA               	clrf	doActionToggle@bOn& (0+255),b
  3179                           
  3180                           ;main.c: 2137: for ( i = 0; i < 8; i++ ) {
  3181  002B1E  6BCB               	clrf	doActionToggle@i& (0+255),b
  3182  002B20                     l11013:
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;main.c: 2140: if ( !( arg & (1 << i) ) ) continue;
  3186  002B20  C0CB  F0C6         	movff	doActionToggle@i,??_doActionToggle
  3187  002B24  0E01               	movlw	1
  3188  002B26  6FC7               	movwf	(??_doActionToggle+1)& (0+255),b
  3189  002B28  2BC6               	incf	??_doActionToggle& (0+255),f,b
  3190  002B2A  D002               	goto	u13304
  3191  002B2C                     u13305:
  3192  002B2C  90D8               	bcf	status,0,c
  3193  002B2E  37C7               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3194  002B30                     u13304:
  3195  002B30  2FC6               	decfsz	??_doActionToggle& (0+255),f,b
  3196  002B32  D7FC               	goto	u13305
  3197  002B34  51C7               	movf	(??_doActionToggle+1)& (0+255),w,b
  3198  002B36  1451               	andwf	doActionToggle@arg,w,c
  3199  002B38  E07A               	bz	l11071
  3200                           
  3201                           ; BSR set to: 0
  3202                           ;main.c: 2143: if ( dmflags & 0x08 ) {
  3203  002B3A  A7C8               	btfss	doActionToggle@dmflags& (0+255),3,b
  3204  002B3C  D00B               	goto	l11021
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;main.c: 2144: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 53 + i) ) {
  3208  002B3E  0E78               	movlw	120
  3209  002B40  25CB               	addwf	doActionToggle@i& (0+255),w,b
  3210  002B42  6E08               	movwf	?_Read_b_eep,c
  3211  002B44  6A09               	clrf	?_Read_b_eep+1,c
  3212  002B46  0E00               	movlw	0
  3213  002B48  2209               	addwfc	?_Read_b_eep+1,f,c
  3214  002B4A  EC3F  F01E         	call	_Read_b_eep	;wreg free
  3215  002B4E  0100               	movlb	0	; () banked
  3216  002B50  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3217  002B52  E16D               	bnz	l11071
  3218  002B54                     l11021:
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;main.c: 2148: }
  3222                           ;main.c: 2149: }
  3223                           ;main.c: 2151: val = Read_b_eep(0x43 + 10 + i);
  3224  002B54  0E4D               	movlw	77
  3225  002B56  25CB               	addwf	doActionToggle@i& (0+255),w,b
  3226  002B58  6E08               	movwf	?_Read_b_eep,c
  3227  002B5A  6A09               	clrf	?_Read_b_eep+1,c
  3228  002B5C  0E00               	movlw	0
  3229  002B5E  2209               	addwfc	?_Read_b_eep+1,f,c
  3230  002B60  EC3F  F01E         	call	_Read_b_eep	;wreg free
  3231  002B64  0100               	movlb	0	; () banked
  3232  002B66  6FC9               	movwf	doActionToggle@val& (0+255),b
  3233                           
  3234                           ;main.c: 2153: switch ( i ) {
  3235  002B68  D02D               	goto	l11053
  3236  002B6A                     l551:
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;main.c: 2156: if ( LATBbits.LATB4 ) {
  3240  002B6A  A88A               	btfss	3978,4,c	;volatile
  3241  002B6C  D002               	goto	l552
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;main.c: 2157: LATBbits.LATB4 = 0;
  3245  002B6E  988A               	bcf	3978,4,c	;volatile
  3246  002B70  D025               	goto	L12
  3247  002B72                     l552:
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;main.c: 2160: LATBbits.LATB4 = 1;
  3251  002B72  888A               	bsf	3978,4,c	;volatile
  3252  002B74                     l11025:
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;main.c: 2161: bOn = 1;
  3256  002B74  0E01               	movlw	1
  3257  002B76  6FCA               	movwf	doActionToggle@bOn& (0+255),b
  3258  002B78  D033               	goto	l11055
  3259  002B7A                     l555:
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;main.c: 2166: if ( LATBbits.LATB1 ) {
  3263  002B7A  A28A               	btfss	3978,1,c	;volatile
  3264  002B7C  D002               	goto	l556
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;main.c: 2167: LATBbits.LATB1 = 0;
  3268  002B7E  928A               	bcf	3978,1,c	;volatile
  3269  002B80  D01D               	goto	L12
  3270  002B82                     l556:
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;main.c: 2170: LATBbits.LATB1 = 1;
  3274  002B82  828A               	bsf	3978,1,c	;volatile
  3275  002B84  D7F7               	goto	l11025
  3276  002B86                     l558:
  3277                           
  3278                           ; BSR set to: 0
  3279                           ;main.c: 2176: if ( LATBbits.LATB0 ) {
  3280  002B86  A08A               	btfss	3978,0,c	;volatile
  3281  002B88  D002               	goto	l559
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;main.c: 2177: LATBbits.LATB0 = 0;
  3285  002B8A  908A               	bcf	3978,0,c	;volatile
  3286  002B8C  D017               	goto	L12
  3287  002B8E                     l559:
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;main.c: 2180: LATBbits.LATB0 = 1;
  3291  002B8E  808A               	bsf	3978,0,c	;volatile
  3292  002B90  D7F1               	goto	l11025
  3293  002B92                     l561:
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;main.c: 2186: if ( LATCbits.LATC7 ) {
  3297  002B92  AE8B               	btfss	3979,7,c	;volatile
  3298  002B94  D002               	goto	l562
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;main.c: 2187: LATCbits.LATC7 = 0;
  3302  002B96  9E8B               	bcf	3979,7,c	;volatile
  3303  002B98  D011               	goto	L12
  3304  002B9A                     l562:
  3305                           
  3306                           ; BSR set to: 0
  3307                           ;main.c: 2190: LATCbits.LATC7 = 1;
  3308  002B9A  8E8B               	bsf	3979,7,c	;volatile
  3309  002B9C  D7EB               	goto	l11025
  3310  002B9E                     l564:
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;main.c: 2196: if ( LATCbits.LATC6 ) {
  3314  002B9E  AC8B               	btfss	3979,6,c	;volatile
  3315  002BA0  D002               	goto	l565
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;main.c: 2197: LATCbits.LATC6 = 0;
  3319  002BA2  9C8B               	bcf	3979,6,c	;volatile
  3320  002BA4  D00B               	goto	L12
  3321  002BA6                     l565:
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;main.c: 2200: LATCbits.LATC6 = 1;
  3325  002BA6  8C8B               	bsf	3979,6,c	;volatile
  3326  002BA8  D7E5               	goto	l11025
  3327  002BAA                     l567:
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;main.c: 2206: if ( LATCbits.LATC5 ) {
  3331  002BAA  AA8B               	btfss	3979,5,c	;volatile
  3332  002BAC  D002               	goto	l568
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;main.c: 2207: LATCbits.LATC5 = 0;
  3336  002BAE  9A8B               	bcf	3979,5,c	;volatile
  3337  002BB0  D005               	goto	L12
  3338  002BB2                     l568:
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;main.c: 2210: LATCbits.LATC5 = 1;
  3342  002BB2  8A8B               	bsf	3979,5,c	;volatile
  3343  002BB4  D7DF               	goto	l11025
  3344  002BB6                     l570:
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;main.c: 2216: if ( LATCbits.LATC4 ) {
  3348  002BB6  A88B               	btfss	3979,4,c	;volatile
  3349  002BB8  D003               	goto	l571
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;main.c: 2217: LATCbits.LATC4 = 0;
  3353  002BBA  988B               	bcf	3979,4,c	;volatile
  3354  002BBC                     L12:
  3355                           
  3356                           ;main.c: 2218: bOn = 0;
  3357  002BBC  6BCA               	clrf	doActionToggle@bOn& (0+255),b
  3358                           
  3359                           ;main.c: 2219: } else {
  3360  002BBE  D010               	goto	l11055
  3361  002BC0                     l571:
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;main.c: 2220: LATCbits.LATC4 = 1;
  3365  002BC0  888B               	bsf	3979,4,c	;volatile
  3366  002BC2  D7D8               	goto	l11025
  3367  002BC4                     l11053:
  3368                           
  3369                           ; BSR set to: 0
  3370  002BC4  51CB               	movf	doActionToggle@i& (0+255),w,b
  3371                           
  3372                           ; Switch size 1, requested type "space"
  3373                           ; Number of cases is 7, Range of values is 0 to 6
  3374                           ; switch strategies available:
  3375                           ; Name         Instructions Cycles
  3376                           ; simple_byte           22    12 (average)
  3377                           ;	Chosen strategy is simple_byte
  3378  002BC6  E0D1               	bz	l551
  3379  002BC8  0A01               	xorlw	1	; case 1
  3380  002BCA  E0D7               	bz	l555
  3381  002BCC  0A03               	xorlw	3	; case 2
  3382  002BCE  E0DB               	bz	l558
  3383  002BD0  0A01               	xorlw	1	; case 3
  3384  002BD2  E0DF               	bz	l561
  3385  002BD4  0A07               	xorlw	7	; case 4
  3386  002BD6  E0E3               	bz	l564
  3387  002BD8  0A01               	xorlw	1	; case 5
  3388  002BDA  E0E7               	bz	l567
  3389  002BDC  0A03               	xorlw	3	; case 6
  3390  002BDE  E0EB               	bz	l570
  3391  002BE0                     l11055:
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;main.c: 2227: if ( bOn ) {
  3395  002BE0  51CA               	movf	doActionToggle@bOn& (0+255),w,b
  3396  002BE2  E013               	bz	l573
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;main.c: 2230: if ( val & 0x08 ) {
  3400  002BE4  A7C9               	btfss	doActionToggle@val& (0+255),3,b
  3401  002BE6  D007               	goto	l11061
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;main.c: 2231: SendInformationEvent( i, 20, 3 );
  3405  002BE8  0E14               	movlw	20
  3406  002BEA  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  3407  002BEC  0E03               	movlw	3
  3408  002BEE  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3409  002BF0  51CB               	movf	doActionToggle@i& (0+255),w,b
  3410  002BF2  EC9C  F01B         	call	_SendInformationEvent
  3411  002BF6                     l11061:
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;main.c: 2232: }
  3415                           ;main.c: 2235: if ( val & 0x20 ) {
  3416  002BF6  ABC9               	btfss	doActionToggle@val& (0+255),5,b
  3417  002BF8  D01A               	goto	l11071
  3418                           
  3419                           ; BSR set to: 0
  3420                           ;main.c: 2236: SendInformationEvent( i, 20, 25 );
  3421  002BFA  0E14               	movlw	20
  3422  002BFC  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  3423  002BFE  0E19               	movlw	25
  3424  002C00  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3425  002C02  51CB               	movf	doActionToggle@i& (0+255),w,b
  3426  002C04  EC9C  F01B         	call	_SendInformationEvent
  3427  002C08  D012               	goto	l11071
  3428  002C0A                     l573:
  3429                           
  3430                           ; BSR set to: 0
  3431                           ;main.c: 2240: else {
  3432                           ;main.c: 2243: if ( val & 0x10 ) {
  3433  002C0A  A9C9               	btfss	doActionToggle@val& (0+255),4,b
  3434  002C0C  D007               	goto	l11067
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;main.c: 2244: SendInformationEvent( i, 20, 4 );
  3438  002C0E  0E14               	movlw	20
  3439  002C10  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  3440  002C12  0E04               	movlw	4
  3441  002C14  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3442  002C16  51CB               	movf	doActionToggle@i& (0+255),w,b
  3443  002C18  EC9C  F01B         	call	_SendInformationEvent
  3444  002C1C                     l11067:
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;main.c: 2245: }
  3448                           ;main.c: 2248: if (val & 0x40 ) {
  3449  002C1C  ADC9               	btfss	doActionToggle@val& (0+255),6,b
  3450  002C1E  D007               	goto	l11071
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;main.c: 2249: SendInformationEvent( i, 20, 24 );
  3454  002C20  0E14               	movlw	20
  3455  002C22  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  3456  002C24  0E18               	movlw	24
  3457  002C26  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3458  002C28  51CB               	movf	doActionToggle@i& (0+255),w,b
  3459  002C2A  EC9C  F01B         	call	_SendInformationEvent
  3460  002C2E                     l11071:
  3461                           
  3462                           ; BSR set to: 0
  3463  002C2E  2BCB               	incf	doActionToggle@i& (0+255),f,b
  3464                           
  3465                           ; BSR set to: 0
  3466  002C30  0E07               	movlw	7
  3467  002C32  65CB               	cpfsgt	doActionToggle@i& (0+255),b
  3468  002C34  D775               	goto	l11013
  3469                           
  3470                           ; BSR set to: 0
  3471  002C36  0C07               	retlw	7
  3472  002C38                     __end_of_doActionToggle:
  3473                           	opt stack 0
  3474                           tblptru	equ	0xFF8
  3475                           tblptrh	equ	0xFF7
  3476                           tblptrl	equ	0xFF6
  3477                           tablat	equ	0xFF5
  3478                           prodh	equ	0xFF4
  3479                           prodl	equ	0xFF3
  3480                           intcon	equ	0xFF2
  3481                           postinc0	equ	0xFEE
  3482                           wreg	equ	0xFE8
  3483                           indf1	equ	0xFE7
  3484                           fsr1h	equ	0xFE2
  3485                           fsr1l	equ	0xFE1
  3486                           indf2	equ	0xFDF
  3487                           postinc2	equ	0xFDE
  3488                           postdec2	equ	0xFDD
  3489                           plusw2	equ	0xFDB
  3490                           fsr2h	equ	0xFDA
  3491                           fsr2l	equ	0xFD9
  3492                           status	equ	0xFD8
  3493                           
  3494 ;; *************** function _doActionDisable *****************
  3495 ;; Defined at:
  3496 ;;		line 2101 in file "../main.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;  dmflags         1    wreg     unsigned char 
  3499 ;;  arg             1   11[COMRAM] unsigned char 
  3500 ;; Auto vars:     Size  Location     Type
  3501 ;;  dmflags         1   14[COMRAM] unsigned char 
  3502 ;;  i               1   16[COMRAM] unsigned char 
  3503 ;;  val             1   15[COMRAM] unsigned char 
  3504 ;; Return value:  Size  Location     Type
  3505 ;;		None               void
  3506 ;; Registers used:
  3507 ;;		wreg, status,2, status,0, cstack
  3508 ;; Tracked objects:
  3509 ;;		On entry : F/0
  3510 ;;		On exit  : 0/0
  3511 ;;		Unchanged: 0/0
  3512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3513 ;;      Params:         1       0       0       0       0       0       0
  3514 ;;      Locals:         3       0       0       0       0       0       0
  3515 ;;      Temps:          2       0       0       0       0       0       0
  3516 ;;      Totals:         6       0       0       0       0       0       0
  3517 ;;Total ram usage:        6 bytes
  3518 ;; Hardware stack levels used:    1
  3519 ;; Hardware stack levels required when called:    3
  3520 ;; This function calls:
  3521 ;;		_Busy_eep
  3522 ;;		_Write_b_eep
  3523 ;;		_Read_b_eep
  3524 ;; This function is called by:
  3525 ;;		_doDM
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528                           
  3529                           	psect	text10
  3530  0036C8                     __ptext10:
  3531                           	opt stack 0
  3532  0036C8                     _doActionDisable:
  3533                           	opt stack 26
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;incstack = 0
  3537                           ;incstack = 0
  3538                           ;doActionDisable@dmflags stored from wreg
  3539  0036C8  CFE8 F00F          	movff	wreg,doActionDisable@dmflags
  3540                           
  3541                           ; BSR set to: 0
  3542                           ;main.c: 2103: unsigned char i;
  3543                           ;main.c: 2104: unsigned char val;
  3544                           ;main.c: 2106: for ( i = 0; i < 8; i++ ) {
  3545  0036CC  6A11               	clrf	doActionDisable@i,c
  3546  0036CE                     l9249:
  3547                           
  3548                           ;main.c: 2109: if ( !( arg & (1 << i) ) ) continue;
  3549  0036CE  C011  F00D         	movff	doActionDisable@i,??_doActionDisable
  3550  0036D2  0E01               	movlw	1
  3551  0036D4  6E0E               	movwf	(??_doActionDisable+1)& (0+255),c
  3552  0036D6  2A0D               	incf	??_doActionDisable,f,c
  3553  0036D8  D002               	goto	u10444
  3554  0036DA                     u10445:
  3555  0036DA  90D8               	bcf	status,0,c
  3556  0036DC  360E               	rlcf	??_doActionDisable+1,f,c
  3557  0036DE                     u10444:
  3558  0036DE  2E0D               	decfsz	??_doActionDisable,f,c
  3559  0036E0  D7FC               	goto	u10445
  3560  0036E2  500E               	movf	??_doActionDisable+1,w,c
  3561  0036E4  140C               	andwf	doActionDisable@arg,w,c
  3562  0036E6  E023               	bz	l9263
  3563                           
  3564                           ;main.c: 2112: if ( dmflags & 0x08) {
  3565  0036E8  A60F               	btfss	doActionDisable@dmflags,3,c
  3566  0036EA  D00B               	goto	l9257
  3567                           
  3568                           ;main.c: 2113: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 53 + i) ) {
  3569  0036EC  0E78               	movlw	120
  3570  0036EE  2411               	addwf	doActionDisable@i,w,c
  3571  0036F0  6E08               	movwf	?_Read_b_eep,c
  3572  0036F2  6A09               	clrf	?_Read_b_eep+1,c
  3573  0036F4  0E00               	movlw	0
  3574  0036F6  2209               	addwfc	?_Read_b_eep+1,f,c
  3575  0036F8  EC3F  F01E         	call	_Read_b_eep	;wreg free
  3576  0036FC  0100               	movlb	0	; () banked
  3577  0036FE  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3578  003700  E116               	bnz	l9263
  3579  003702                     l9257:
  3580                           
  3581                           ;main.c: 2117: }
  3582                           ;main.c: 2118: }
  3583                           ;main.c: 2120: val = Read_b_eep(0x43 + 10 + i);
  3584  003702  0E4D               	movlw	77
  3585  003704  2411               	addwf	doActionDisable@i,w,c
  3586  003706  6E08               	movwf	?_Read_b_eep,c
  3587  003708  6A09               	clrf	?_Read_b_eep+1,c
  3588  00370A  0E00               	movlw	0
  3589  00370C  2209               	addwfc	?_Read_b_eep+1,f,c
  3590  00370E  EC3F  F01E         	call	_Read_b_eep	;wreg free
  3591  003712  6E10               	movwf	doActionDisable@val,c
  3592                           
  3593                           ;main.c: 2121: (Busy_eep(), Write_b_eep(0x43 + 10 + i,val & ~0x80));
  3594  003714  EC73  F01E         	call	_Busy_eep	;wreg free
  3595  003718  0E4D               	movlw	77
  3596  00371A  2411               	addwf	doActionDisable@i,w,c
  3597  00371C  6E08               	movwf	?_Write_b_eep,c
  3598  00371E  6A09               	clrf	?_Write_b_eep+1,c
  3599  003720  0E00               	movlw	0
  3600  003722  2209               	addwfc	?_Write_b_eep+1,f,c
  3601  003724  5010               	movf	doActionDisable@val,w,c
  3602  003726  0B7F               	andlw	127
  3603  003728  6E0A               	movwf	?_Write_b_eep+2,c
  3604  00372A  EC59  F01C         	call	_Write_b_eep	;wreg free
  3605  00372E                     l9263:
  3606  00372E  2A11               	incf	doActionDisable@i,f,c
  3607  003730  0E07               	movlw	7
  3608  003732  6411               	cpfsgt	doActionDisable@i,c
  3609  003734  D7CC               	goto	l9249
  3610  003736  0C07               	retlw	7
  3611  003738                     __end_of_doActionDisable:
  3612                           	opt stack 0
  3613                           tblptru	equ	0xFF8
  3614                           tblptrh	equ	0xFF7
  3615                           tblptrl	equ	0xFF6
  3616                           tablat	equ	0xFF5
  3617                           prodh	equ	0xFF4
  3618                           prodl	equ	0xFF3
  3619                           intcon	equ	0xFF2
  3620                           postinc0	equ	0xFEE
  3621                           wreg	equ	0xFE8
  3622                           indf1	equ	0xFE7
  3623                           fsr1h	equ	0xFE2
  3624                           fsr1l	equ	0xFE1
  3625                           indf2	equ	0xFDF
  3626                           postinc2	equ	0xFDE
  3627                           postdec2	equ	0xFDD
  3628                           plusw2	equ	0xFDB
  3629                           fsr2h	equ	0xFDA
  3630                           fsr2l	equ	0xFD9
  3631                           status	equ	0xFD8
  3632                           
  3633 ;; *************** function _doActionStatus *****************
  3634 ;; Defined at:
  3635 ;;		line 2012 in file "../main.c"
  3636 ;; Parameters:    Size  Location     Type
  3637 ;;  dmflags         1    wreg     unsigned char 
  3638 ;;  arg             1   80[COMRAM] unsigned char 
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3641 ;;  i               1   27[BANK0 ] unsigned char 
  3642 ;;  val             1   26[BANK0 ] unsigned char 
  3643 ;;  bOn             1   25[BANK0 ] enum E15660
  3644 ;; Return value:  Size  Location     Type
  3645 ;;		None               void
  3646 ;; Registers used:
  3647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3648 ;; Tracked objects:
  3649 ;;		On entry : F/0
  3650 ;;		On exit  : F/0
  3651 ;;		Unchanged: 0/0
  3652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3653 ;;      Params:         1       0       0       0       0       0       0
  3654 ;;      Locals:         0       4       0       0       0       0       0
  3655 ;;      Temps:          0       2       0       0       0       0       0
  3656 ;;      Totals:         1       6       0       0       0       0       0
  3657 ;;Total ram usage:        7 bytes
  3658 ;; Hardware stack levels used:    1
  3659 ;; Hardware stack levels required when called:    7
  3660 ;; This function calls:
  3661 ;;		_Read_b_eep
  3662 ;;		_SendInformationEvent
  3663 ;; This function is called by:
  3664 ;;		_doDM
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           	psect	text11
  3669  002E6A                     __ptext11:
  3670                           	opt stack 0
  3671  002E6A                     _doActionStatus:
  3672                           	opt stack 22
  3673                           
  3674                           ;incstack = 0
  3675                           ;incstack = 0
  3676                           ;doActionStatus@dmflags stored from wreg
  3677  002E6A  CFE8 F0C8          	movff	wreg,doActionStatus@dmflags
  3678                           
  3679                           ; BSR set to: 0
  3680                           ;main.c: 2014: unsigned char i;
  3681                           ;main.c: 2015: unsigned char val;
  3682                           ;main.c: 2016: BOOL bOn = 0;
  3683  002E6E  6BC9               	clrf	doActionStatus@bOn& (0+255),b
  3684                           
  3685                           ;main.c: 2018: for (i = 0; i < 8; i++) {
  3686  002E70  6BCB               	clrf	doActionStatus@i& (0+255),b
  3687  002E72                     l10959:
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;main.c: 2021: if (!(arg & (1 << i))) continue;
  3691  002E72  C0CB  F0C6         	movff	doActionStatus@i,??_doActionStatus
  3692  002E76  0E01               	movlw	1
  3693  002E78  6FC7               	movwf	(??_doActionStatus+1)& (0+255),b
  3694  002E7A  2BC6               	incf	??_doActionStatus& (0+255),f,b
  3695  002E7C  D002               	goto	u13204
  3696  002E7E                     u13205:
  3697  002E7E  90D8               	bcf	status,0,c
  3698  002E80  37C7               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3699  002E82                     u13204:
  3700  002E82  2FC6               	decfsz	??_doActionStatus& (0+255),f,b
  3701  002E84  D7FC               	goto	u13205
  3702  002E86  51C7               	movf	(??_doActionStatus+1)& (0+255),w,b
  3703  002E88  1451               	andwf	doActionStatus@arg,w,c
  3704  002E8A  E070               	bz	l11003
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;main.c: 2024: if (dmflags & 0x08) {
  3708  002E8C  A7C8               	btfss	doActionStatus@dmflags& (0+255),3,b
  3709  002E8E  D00B               	goto	l10967
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;main.c: 2025: if (vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 53 + i) ) {
  3713  002E90  0E78               	movlw	120
  3714  002E92  25CB               	addwf	doActionStatus@i& (0+255),w,b
  3715  002E94  6E08               	movwf	?_Read_b_eep,c
  3716  002E96  6A09               	clrf	?_Read_b_eep+1,c
  3717  002E98  0E00               	movlw	0
  3718  002E9A  2209               	addwfc	?_Read_b_eep+1,f,c
  3719  002E9C  EC3F  F01E         	call	_Read_b_eep	;wreg free
  3720  002EA0  0100               	movlb	0	; () banked
  3721  002EA2  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3722  002EA4  E163               	bnz	l11003
  3723  002EA6                     l10967:
  3724                           
  3725                           ; BSR set to: 0
  3726                           ;main.c: 2029: }
  3727                           ;main.c: 2030: }
  3728                           ;main.c: 2032: val = Read_b_eep(0x43 + 10 + i);
  3729  002EA6  0E4D               	movlw	77
  3730  002EA8  25CB               	addwf	doActionStatus@i& (0+255),w,b
  3731  002EAA  6E08               	movwf	?_Read_b_eep,c
  3732  002EAC  6A09               	clrf	?_Read_b_eep+1,c
  3733  002EAE  0E00               	movlw	0
  3734  002EB0  2209               	addwfc	?_Read_b_eep+1,f,c
  3735  002EB2  EC3F  F01E         	call	_Read_b_eep	;wreg free
  3736  002EB6  0100               	movlb	0	; () banked
  3737  002EB8  6FCA               	movwf	doActionStatus@val& (0+255),b
  3738                           
  3739                           ;main.c: 2034: switch (i) {
  3740  002EBA  D023               	goto	l10985
  3741  002EBC                     l10969:
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;main.c: 2037: bOn = LATBbits.LATB4;
  3745  002EBC  0E00               	movlw	0
  3746  002EBE  B88A               	btfsc	3978,4,c	;volatile
  3747  002EC0  0E01               	movlw	1
  3748  002EC2  6FC9               	movwf	doActionStatus@bOn& (0+255),b
  3749                           
  3750                           ;main.c: 2038: break;
  3751  002EC4  D02C               	goto	l10987
  3752  002EC6                     l10971:
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;main.c: 2041: bOn = LATBbits.LATB1;
  3756  002EC6  0E00               	movlw	0
  3757  002EC8  B28A               	btfsc	3978,1,c	;volatile
  3758  002ECA  0E01               	movlw	1
  3759  002ECC  6FC9               	movwf	doActionStatus@bOn& (0+255),b
  3760                           
  3761                           ;main.c: 2042: break;
  3762  002ECE  D027               	goto	l10987
  3763  002ED0                     l10973:
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;main.c: 2045: bOn = LATBbits.LATB0;
  3767  002ED0  0E00               	movlw	0
  3768  002ED2  B08A               	btfsc	3978,0,c	;volatile
  3769  002ED4  0E01               	movlw	1
  3770  002ED6  6FC9               	movwf	doActionStatus@bOn& (0+255),b
  3771                           
  3772                           ;main.c: 2046: break;
  3773  002ED8  D022               	goto	l10987
  3774  002EDA                     l10975:
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;main.c: 2049: bOn = LATCbits.LATC7;
  3778  002EDA  0E00               	movlw	0
  3779  002EDC  BE8B               	btfsc	3979,7,c	;volatile
  3780  002EDE  0E01               	movlw	1
  3781  002EE0  6FC9               	movwf	doActionStatus@bOn& (0+255),b
  3782                           
  3783                           ;main.c: 2050: break;
  3784  002EE2  D01D               	goto	l10987
  3785  002EE4                     l10977:
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;main.c: 2053: bOn = LATCbits.LATC6;
  3789  002EE4  0E00               	movlw	0
  3790  002EE6  BC8B               	btfsc	3979,6,c	;volatile
  3791  002EE8  0E01               	movlw	1
  3792  002EEA  6FC9               	movwf	doActionStatus@bOn& (0+255),b
  3793                           
  3794                           ;main.c: 2054: break;
  3795  002EEC  D018               	goto	l10987
  3796  002EEE                     l10979:
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;main.c: 2057: bOn = LATCbits.LATC5;
  3800  002EEE  0E00               	movlw	0
  3801  002EF0  BA8B               	btfsc	3979,5,c	;volatile
  3802  002EF2  0E01               	movlw	1
  3803  002EF4  6FC9               	movwf	doActionStatus@bOn& (0+255),b
  3804                           
  3805                           ;main.c: 2058: break;
  3806  002EF6  D013               	goto	l10987
  3807  002EF8                     l10981:
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;main.c: 2061: bOn = LATCbits.LATC4;
  3811  002EF8  0E00               	movlw	0
  3812  002EFA  B88B               	btfsc	3979,4,c	;volatile
  3813  002EFC  0E01               	movlw	1
  3814  002EFE  6FC9               	movwf	doActionStatus@bOn& (0+255),b
  3815                           
  3816                           ;main.c: 2062: break;
  3817  002F00  D00E               	goto	l10987
  3818  002F02                     l10985:
  3819                           
  3820                           ; BSR set to: 0
  3821  002F02  51CB               	movf	doActionStatus@i& (0+255),w,b
  3822                           
  3823                           ; Switch size 1, requested type "space"
  3824                           ; Number of cases is 7, Range of values is 0 to 6
  3825                           ; switch strategies available:
  3826                           ; Name         Instructions Cycles
  3827                           ; simple_byte           22    12 (average)
  3828                           ;	Chosen strategy is simple_byte
  3829  002F04  E0DB               	bz	l10969
  3830  002F06  0A01               	xorlw	1	; case 1
  3831  002F08  E0DE               	bz	l10971
  3832  002F0A  0A03               	xorlw	3	; case 2
  3833  002F0C  E0E1               	bz	l10973
  3834  002F0E  0A01               	xorlw	1	; case 3
  3835  002F10  E0E4               	bz	l10975
  3836  002F12  0A07               	xorlw	7	; case 4
  3837  002F14  E0E7               	bz	l10977
  3838  002F16  0A01               	xorlw	1	; case 5
  3839  002F18  E0EA               	bz	l10979
  3840  002F1A  0A03               	xorlw	3	; case 6
  3841  002F1C  E0ED               	bz	l10981
  3842  002F1E                     l10987:
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;main.c: 2066: if (bOn) {
  3846  002F1E  51C9               	movf	doActionStatus@bOn& (0+255),w,b
  3847  002F20  E013               	bz	l526
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;main.c: 2069: if ( val & 0x10 ) {
  3851  002F22  A9CA               	btfss	doActionStatus@val& (0+255),4,b
  3852  002F24  D007               	goto	l10993
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;main.c: 2070: SendInformationEvent( i, 20, 4 );
  3856  002F26  0E14               	movlw	20
  3857  002F28  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  3858  002F2A  0E04               	movlw	4
  3859  002F2C  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3860  002F2E  51CB               	movf	doActionStatus@i& (0+255),w,b
  3861  002F30  EC9C  F01B         	call	_SendInformationEvent
  3862  002F34                     l10993:
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;main.c: 2071: }
  3866                           ;main.c: 2074: if ( val & 0x40 ) {
  3867  002F34  ADCA               	btfss	doActionStatus@val& (0+255),6,b
  3868  002F36  D01A               	goto	l11003
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;main.c: 2075: SendInformationEvent( i, 20, 24 );
  3872  002F38  0E14               	movlw	20
  3873  002F3A  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  3874  002F3C  0E18               	movlw	24
  3875  002F3E  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3876  002F40  51CB               	movf	doActionStatus@i& (0+255),w,b
  3877  002F42  EC9C  F01B         	call	_SendInformationEvent
  3878  002F46  D012               	goto	l11003
  3879  002F48                     l526:
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;main.c: 2079: else {
  3883                           ;main.c: 2082: if ( val & 0x10 ) {
  3884  002F48  A9CA               	btfss	doActionStatus@val& (0+255),4,b
  3885  002F4A  D007               	goto	l10999
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;main.c: 2083: SendInformationEvent( i, 20, 4 );
  3889  002F4C  0E14               	movlw	20
  3890  002F4E  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  3891  002F50  0E04               	movlw	4
  3892  002F52  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3893  002F54  51CB               	movf	doActionStatus@i& (0+255),w,b
  3894  002F56  EC9C  F01B         	call	_SendInformationEvent
  3895  002F5A                     l10999:
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;main.c: 2084: }
  3899                           ;main.c: 2087: if ( val & 0x40 ) {
  3900  002F5A  ADCA               	btfss	doActionStatus@val& (0+255),6,b
  3901  002F5C  D007               	goto	l11003
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;main.c: 2088: SendInformationEvent( i, 20, 24 );
  3905  002F5E  0E14               	movlw	20
  3906  002F60  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  3907  002F62  0E18               	movlw	24
  3908  002F64  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3909  002F66  51CB               	movf	doActionStatus@i& (0+255),w,b
  3910  002F68  EC9C  F01B         	call	_SendInformationEvent
  3911  002F6C                     l11003:
  3912                           
  3913                           ; BSR set to: 0
  3914  002F6C  2BCB               	incf	doActionStatus@i& (0+255),f,b
  3915                           
  3916                           ; BSR set to: 0
  3917  002F6E  0E07               	movlw	7
  3918  002F70  65CB               	cpfsgt	doActionStatus@i& (0+255),b
  3919  002F72  D77F               	goto	l10959
  3920                           
  3921                           ; BSR set to: 0
  3922  002F74  0C07               	retlw	7
  3923  002F76                     __end_of_doActionStatus:
  3924                           	opt stack 0
  3925                           tblptru	equ	0xFF8
  3926                           tblptrh	equ	0xFF7
  3927                           tblptrl	equ	0xFF6
  3928                           tablat	equ	0xFF5
  3929                           prodh	equ	0xFF4
  3930                           prodl	equ	0xFF3
  3931                           intcon	equ	0xFF2
  3932                           postinc0	equ	0xFEE
  3933                           wreg	equ	0xFE8
  3934                           indf1	equ	0xFE7
  3935                           fsr1h	equ	0xFE2
  3936                           fsr1l	equ	0xFE1
  3937                           indf2	equ	0xFDF
  3938                           postinc2	equ	0xFDE
  3939                           postdec2	equ	0xFDD
  3940                           plusw2	equ	0xFDB
  3941                           fsr2h	equ	0xFDA
  3942                           fsr2l	equ	0xFD9
  3943                           status	equ	0xFD8
  3944                           
  3945 ;; *************** function _doActionPulse *****************
  3946 ;; Defined at:
  3947 ;;		line 1921 in file "../main.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;  dmflags         1    wreg     unsigned char 
  3950 ;;  arg             1    9[COMRAM] unsigned char 
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;  dmflags         1   13[COMRAM] unsigned char 
  3953 ;;  i               1   15[COMRAM] unsigned char 
  3954 ;;  val             1   14[COMRAM] unsigned char 
  3955 ;; Return value:  Size  Location     Type
  3956 ;;		None               void
  3957 ;; Registers used:
  3958 ;;		wreg, status,2, status,0, cstack
  3959 ;; Tracked objects:
  3960 ;;		On entry : F/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3964 ;;      Params:         1       0       0       0       0       0       0
  3965 ;;      Locals:         3       0       0       0       0       0       0
  3966 ;;      Temps:          3       0       0       0       0       0       0
  3967 ;;      Totals:         7       0       0       0       0       0       0
  3968 ;;Total ram usage:        7 bytes
  3969 ;; Hardware stack levels used:    1
  3970 ;; Hardware stack levels required when called:    3
  3971 ;; This function calls:
  3972 ;;		_Read_b_eep
  3973 ;; This function is called by:
  3974 ;;		_doDM
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           	psect	text12
  3979  002640                     __ptext12:
  3980                           	opt stack 0
  3981  002640                     _doActionPulse:
  3982                           	opt stack 26
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;incstack = 0
  3986                           ;incstack = 0
  3987                           ;doActionPulse@dmflags stored from wreg
  3988  002640  CFE8 F00E          	movff	wreg,doActionPulse@dmflags
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;main.c: 1923: unsigned char i;
  3992                           ;main.c: 1924: unsigned char val;
  3993                           ;main.c: 1926: for ( i = 0; i < 8; i++ ) {
  3994  002644  6A10               	clrf	doActionPulse@i,c
  3995  002646                     l9139:
  3996                           
  3997                           ;main.c: 1929: if ( !( arg & ( 1 << i ) ) ) continue;
  3998  002646  C010  F00B         	movff	doActionPulse@i,??_doActionPulse
  3999  00264A  0E01               	movlw	1
  4000  00264C  6E0C               	movwf	(??_doActionPulse+1)& (0+255),c
  4001  00264E  2A0B               	incf	??_doActionPulse,f,c
  4002  002650  D002               	goto	u10284
  4003  002652                     u10285:
  4004  002652  90D8               	bcf	status,0,c
  4005  002654  360C               	rlcf	??_doActionPulse+1,f,c
  4006  002656                     u10284:
  4007  002656  2E0B               	decfsz	??_doActionPulse,f,c
  4008  002658  D7FC               	goto	u10285
  4009  00265A  500C               	movf	??_doActionPulse+1,w,c
  4010  00265C  140A               	andwf	doActionPulse@arg,w,c
  4011  00265E  E101 D0D2          	bz	l9185
  4012                           
  4013                           ;main.c: 1932: if (dmflags & 0x08) {
  4014  002662  A60E               	btfss	doActionPulse@dmflags,3,c
  4015  002664  D00C               	goto	l9147
  4016                           
  4017                           ;main.c: 1933: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 53 + i) ) {
  4018  002666  0E78               	movlw	120
  4019  002668  2410               	addwf	doActionPulse@i,w,c
  4020  00266A  6E08               	movwf	?_Read_b_eep,c
  4021  00266C  6A09               	clrf	?_Read_b_eep+1,c
  4022  00266E  0E00               	movlw	0
  4023  002670  2209               	addwfc	?_Read_b_eep+1,f,c
  4024  002672  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4025  002676  0100               	movlb	0	; () banked
  4026  002678  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4027  00267A  E001 D0C4          	bnz	l9185
  4028  00267E                     l9147:
  4029                           
  4030                           ;main.c: 1937: }
  4031                           ;main.c: 1938: }
  4032                           ;main.c: 1940: val = Read_b_eep(0x43 + 10 + i);
  4033  00267E  0E4D               	movlw	77
  4034  002680  2410               	addwf	doActionPulse@i,w,c
  4035  002682  6E08               	movwf	?_Read_b_eep,c
  4036  002684  6A09               	clrf	?_Read_b_eep+1,c
  4037  002686  0E00               	movlw	0
  4038  002688  2209               	addwfc	?_Read_b_eep+1,f,c
  4039  00268A  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4040  00268E  6E0F               	movwf	doActionPulse@val,c
  4041                           
  4042                           ;main.c: 1943: if ( !( val & 0x80 ) ) continue;
  4043  002690  AE0F               	btfss	doActionPulse@val,7,c
  4044  002692  D0B9               	goto	l9185
  4045  002694  D0A8               	goto	l9183
  4046  002696                     l500:
  4047                           
  4048                           ;main.c: 1948: LATBbits.LATB4 = 0;
  4049  002696  988A               	bcf	3978,4,c	;volatile
  4050                           
  4051                           ;main.c: 1949: relay_pulse_flags |= 0x01;
  4052  002698  0100               	movlb	0	; () banked
  4053  00269A  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;main.c: 1950: relay_pulse_timer[ 0 ] =
  4057                           ;main.c: 1951: Read_b_eep(0x43 + 18) * 256 +
  4058                           ;main.c: 1952: Read_b_eep(0x43 + 19);
  4059  00269C  6A09               	clrf	?_Read_b_eep+1,c
  4060  00269E  0E56               	movlw	86
  4061  0026A0  6E08               	movwf	?_Read_b_eep,c
  4062  0026A2  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4063  0026A6  6E0B               	movwf	??_doActionPulse& (0+255),c
  4064  0026A8  6A09               	clrf	?_Read_b_eep+1,c
  4065  0026AA  0E55               	movlw	85
  4066  0026AC  6E08               	movwf	?_Read_b_eep,c
  4067  0026AE  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4068  0026B2  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4069  0026B4  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4070  0026B6  500B               	movf	??_doActionPulse,w,c
  4071  0026B8  240C               	addwf	??_doActionPulse+1,w,c
  4072  0026BA  0100               	movlb	0	; () banked
  4073  0026BC  6F70               	movwf	_relay_pulse_timer& (0+255),b
  4074  0026BE  0E00               	movlw	0
  4075  0026C0  200D               	addwfc	??_doActionPulse+2,w,c
  4076  0026C2  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  4077                           
  4078                           ;main.c: 1953: break;
  4079  0026C4  D0A0               	goto	l9185
  4080  0026C6                     l502:
  4081                           
  4082                           ;main.c: 1956: LATBbits.LATB1 = 0;
  4083  0026C6  928A               	bcf	3978,1,c	;volatile
  4084                           
  4085                           ;main.c: 1957: relay_pulse_flags |= 0x02;
  4086  0026C8  0100               	movlb	0	; () banked
  4087  0026CA  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  4088                           
  4089                           ; BSR set to: 0
  4090                           ;main.c: 1958: relay_pulse_timer[ 1 ] =
  4091                           ;main.c: 1959: Read_b_eep(0x43 + 20) * 256 +
  4092                           ;main.c: 1960: Read_b_eep(0x43 + 21);
  4093  0026CC  6A09               	clrf	?_Read_b_eep+1,c
  4094  0026CE  0E58               	movlw	88
  4095  0026D0  6E08               	movwf	?_Read_b_eep,c
  4096  0026D2  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4097  0026D6  6E0B               	movwf	??_doActionPulse& (0+255),c
  4098  0026D8  6A09               	clrf	?_Read_b_eep+1,c
  4099  0026DA  0E57               	movlw	87
  4100  0026DC  6E08               	movwf	?_Read_b_eep,c
  4101  0026DE  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4102  0026E2  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4103  0026E4  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4104  0026E6  500B               	movf	??_doActionPulse,w,c
  4105  0026E8  240C               	addwf	??_doActionPulse+1,w,c
  4106  0026EA  0100               	movlb	0	; () banked
  4107  0026EC  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  4108  0026EE  0E00               	movlw	0
  4109  0026F0  200D               	addwfc	??_doActionPulse+2,w,c
  4110  0026F2  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  4111                           
  4112                           ;main.c: 1961: break;
  4113  0026F4  D088               	goto	l9185
  4114  0026F6                     l503:
  4115                           
  4116                           ;main.c: 1964: LATBbits.LATB0 = 0;
  4117  0026F6  908A               	bcf	3978,0,c	;volatile
  4118                           
  4119                           ;main.c: 1965: relay_pulse_flags |= 0x04;
  4120  0026F8  0100               	movlb	0	; () banked
  4121  0026FA  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;main.c: 1966: relay_pulse_timer[ 2 ] =
  4125                           ;main.c: 1967: Read_b_eep(0x43 + 22) * 256 +
  4126                           ;main.c: 1968: Read_b_eep(0x43 + 23);
  4127  0026FC  6A09               	clrf	?_Read_b_eep+1,c
  4128  0026FE  0E5A               	movlw	90
  4129  002700  6E08               	movwf	?_Read_b_eep,c
  4130  002702  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4131  002706  6E0B               	movwf	??_doActionPulse& (0+255),c
  4132  002708  6A09               	clrf	?_Read_b_eep+1,c
  4133  00270A  0E59               	movlw	89
  4134  00270C  6E08               	movwf	?_Read_b_eep,c
  4135  00270E  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4136  002712  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4137  002714  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4138  002716  500B               	movf	??_doActionPulse,w,c
  4139  002718  240C               	addwf	??_doActionPulse+1,w,c
  4140  00271A  0100               	movlb	0	; () banked
  4141  00271C  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  4142  00271E  0E00               	movlw	0
  4143  002720  200D               	addwfc	??_doActionPulse+2,w,c
  4144  002722  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  4145                           
  4146                           ;main.c: 1969: break;
  4147  002724  D070               	goto	l9185
  4148  002726                     l504:
  4149                           
  4150                           ;main.c: 1972: LATCbits.LATC7 = 0;
  4151  002726  9E8B               	bcf	3979,7,c	;volatile
  4152                           
  4153                           ;main.c: 1973: relay_pulse_flags |= 0x08;
  4154  002728  0100               	movlb	0	; () banked
  4155  00272A  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  4156                           
  4157                           ; BSR set to: 0
  4158                           ;main.c: 1974: relay_pulse_timer[ 3 ] =
  4159                           ;main.c: 1975: Read_b_eep(0x43 + 24) * 256 +
  4160                           ;main.c: 1976: Read_b_eep(0x43 + 25);
  4161  00272C  6A09               	clrf	?_Read_b_eep+1,c
  4162  00272E  0E5C               	movlw	92
  4163  002730  6E08               	movwf	?_Read_b_eep,c
  4164  002732  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4165  002736  6E0B               	movwf	??_doActionPulse& (0+255),c
  4166  002738  6A09               	clrf	?_Read_b_eep+1,c
  4167  00273A  0E5B               	movlw	91
  4168  00273C  6E08               	movwf	?_Read_b_eep,c
  4169  00273E  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4170  002742  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4171  002744  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4172  002746  500B               	movf	??_doActionPulse,w,c
  4173  002748  240C               	addwf	??_doActionPulse+1,w,c
  4174  00274A  0100               	movlb	0	; () banked
  4175  00274C  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  4176  00274E  0E00               	movlw	0
  4177  002750  200D               	addwfc	??_doActionPulse+2,w,c
  4178  002752  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  4179                           
  4180                           ;main.c: 1977: break;
  4181  002754  D058               	goto	l9185
  4182  002756                     l505:
  4183                           
  4184                           ;main.c: 1980: LATCbits.LATC6 = 0;
  4185  002756  9C8B               	bcf	3979,6,c	;volatile
  4186                           
  4187                           ;main.c: 1981: relay_pulse_flags |= 0x10;
  4188  002758  0100               	movlb	0	; () banked
  4189  00275A  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;main.c: 1982: relay_pulse_timer[ 4 ] =
  4193                           ;main.c: 1983: Read_b_eep(0x43 + 26) * 256 +
  4194                           ;main.c: 1984: Read_b_eep(0x43 + 27);
  4195  00275C  6A09               	clrf	?_Read_b_eep+1,c
  4196  00275E  0E5E               	movlw	94
  4197  002760  6E08               	movwf	?_Read_b_eep,c
  4198  002762  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4199  002766  6E0B               	movwf	??_doActionPulse& (0+255),c
  4200  002768  6A09               	clrf	?_Read_b_eep+1,c
  4201  00276A  0E5D               	movlw	93
  4202  00276C  6E08               	movwf	?_Read_b_eep,c
  4203  00276E  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4204  002772  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4205  002774  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4206  002776  500B               	movf	??_doActionPulse,w,c
  4207  002778  240C               	addwf	??_doActionPulse+1,w,c
  4208  00277A  0100               	movlb	0	; () banked
  4209  00277C  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  4210  00277E  0E00               	movlw	0
  4211  002780  200D               	addwfc	??_doActionPulse+2,w,c
  4212  002782  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  4213                           
  4214                           ;main.c: 1985: break;
  4215  002784  D040               	goto	l9185
  4216  002786                     l506:
  4217                           
  4218                           ;main.c: 1988: LATCbits.LATC5 = 0;
  4219  002786  9A8B               	bcf	3979,5,c	;volatile
  4220                           
  4221                           ;main.c: 1989: relay_pulse_flags |= 0x20;
  4222  002788  0100               	movlb	0	; () banked
  4223  00278A  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;main.c: 1990: relay_pulse_timer[ 5 ] =
  4227                           ;main.c: 1991: Read_b_eep(0x43 + 28) * 256 +
  4228                           ;main.c: 1992: Read_b_eep(0x43 + 29);
  4229  00278C  6A09               	clrf	?_Read_b_eep+1,c
  4230  00278E  0E60               	movlw	96
  4231  002790  6E08               	movwf	?_Read_b_eep,c
  4232  002792  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4233  002796  6E0B               	movwf	??_doActionPulse& (0+255),c
  4234  002798  6A09               	clrf	?_Read_b_eep+1,c
  4235  00279A  0E5F               	movlw	95
  4236  00279C  6E08               	movwf	?_Read_b_eep,c
  4237  00279E  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4238  0027A2  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4239  0027A4  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4240  0027A6  500B               	movf	??_doActionPulse,w,c
  4241  0027A8  240C               	addwf	??_doActionPulse+1,w,c
  4242  0027AA  0100               	movlb	0	; () banked
  4243  0027AC  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  4244  0027AE  0E00               	movlw	0
  4245  0027B0  200D               	addwfc	??_doActionPulse+2,w,c
  4246  0027B2  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  4247                           
  4248                           ;main.c: 1993: break;
  4249  0027B4  D028               	goto	l9185
  4250  0027B6                     l507:
  4251                           
  4252                           ;main.c: 1996: LATCbits.LATC4 = 0;
  4253  0027B6  988B               	bcf	3979,4,c	;volatile
  4254                           
  4255                           ;main.c: 1997: relay_pulse_flags |= 0x40;
  4256  0027B8  0100               	movlb	0	; () banked
  4257  0027BA  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;main.c: 1998: relay_pulse_timer[ 6 ] =
  4261                           ;main.c: 1999: Read_b_eep(0x43 + 30) * 256 +
  4262                           ;main.c: 2000: Read_b_eep(0x43 + 31);
  4263  0027BC  6A09               	clrf	?_Read_b_eep+1,c
  4264  0027BE  0E62               	movlw	98
  4265  0027C0  6E08               	movwf	?_Read_b_eep,c
  4266  0027C2  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4267  0027C6  6E0B               	movwf	??_doActionPulse& (0+255),c
  4268  0027C8  6A09               	clrf	?_Read_b_eep+1,c
  4269  0027CA  0E61               	movlw	97
  4270  0027CC  6E08               	movwf	?_Read_b_eep,c
  4271  0027CE  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4272  0027D2  6E0D               	movwf	(??_doActionPulse+2)& (0+255),c
  4273  0027D4  6A0C               	clrf	(??_doActionPulse+1)& (0+255),c
  4274  0027D6  500B               	movf	??_doActionPulse,w,c
  4275  0027D8  240C               	addwf	??_doActionPulse+1,w,c
  4276  0027DA  0100               	movlb	0	; () banked
  4277  0027DC  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  4278  0027DE  0E00               	movlw	0
  4279  0027E0  200D               	addwfc	??_doActionPulse+2,w,c
  4280  0027E2  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  4281                           
  4282                           ;main.c: 2001: break;
  4283  0027E4  D010               	goto	l9185
  4284  0027E6                     l9183:
  4285  0027E6  5010               	movf	doActionPulse@i,w,c
  4286                           
  4287                           ; Switch size 1, requested type "space"
  4288                           ; Number of cases is 7, Range of values is 0 to 6
  4289                           ; switch strategies available:
  4290                           ; Name         Instructions Cycles
  4291                           ; simple_byte           22    12 (average)
  4292                           ;	Chosen strategy is simple_byte
  4293  0027E8  E101 D755          	bz	l500
  4294  0027EC  0A01               	xorlw	1	; case 1
  4295  0027EE  E101 D76A          	bz	l502
  4296  0027F2  0A03               	xorlw	3	; case 2
  4297  0027F4  E080               	bz	l503
  4298  0027F6  0A01               	xorlw	1	; case 3
  4299  0027F8  E096               	bz	l504
  4300  0027FA  0A07               	xorlw	7	; case 4
  4301  0027FC  E0AC               	bz	l505
  4302  0027FE  0A01               	xorlw	1	; case 5
  4303  002800  E0C2               	bz	l506
  4304  002802  0A03               	xorlw	3	; case 6
  4305  002804  E0D8               	bz	l507
  4306  002806                     l9185:
  4307  002806  2A10               	incf	doActionPulse@i,f,c
  4308  002808  0E07               	movlw	7
  4309  00280A  6410               	cpfsgt	doActionPulse@i,c
  4310  00280C  D71C               	goto	l9139
  4311  00280E  0C07               	retlw	7
  4312  002810                     __end_of_doActionPulse:
  4313                           	opt stack 0
  4314                           tblptru	equ	0xFF8
  4315                           tblptrh	equ	0xFF7
  4316                           tblptrl	equ	0xFF6
  4317                           tablat	equ	0xFF5
  4318                           prodh	equ	0xFF4
  4319                           prodl	equ	0xFF3
  4320                           intcon	equ	0xFF2
  4321                           postinc0	equ	0xFEE
  4322                           wreg	equ	0xFE8
  4323                           indf1	equ	0xFE7
  4324                           fsr1h	equ	0xFE2
  4325                           fsr1l	equ	0xFE1
  4326                           indf2	equ	0xFDF
  4327                           postinc2	equ	0xFDE
  4328                           postdec2	equ	0xFDD
  4329                           plusw2	equ	0xFDB
  4330                           fsr2h	equ	0xFDA
  4331                           fsr2l	equ	0xFD9
  4332                           status	equ	0xFD8
  4333                           
  4334 ;; *************** function _doActionOn *****************
  4335 ;; Defined at:
  4336 ;;		line 1733 in file "../main.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;  dmflags         1    wreg     unsigned char 
  4339 ;;  arg             1   80[COMRAM] unsigned char 
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;  dmflags         1   25[BANK0 ] unsigned char 
  4342 ;;  i               1   27[BANK0 ] unsigned char 
  4343 ;;  val             1   26[BANK0 ] unsigned char 
  4344 ;; Return value:  Size  Location     Type
  4345 ;;		None               void
  4346 ;; Registers used:
  4347 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4348 ;; Tracked objects:
  4349 ;;		On entry : F/0
  4350 ;;		On exit  : F/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4353 ;;      Params:         1       0       0       0       0       0       0
  4354 ;;      Locals:         0       3       0       0       0       0       0
  4355 ;;      Temps:          0       3       0       0       0       0       0
  4356 ;;      Totals:         1       6       0       0       0       0       0
  4357 ;;Total ram usage:        7 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; Hardware stack levels required when called:    7
  4360 ;; This function calls:
  4361 ;;		_Read_b_eep
  4362 ;;		_SendInformationEvent
  4363 ;; This function is called by:
  4364 ;;		_doDM
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text13
  4369  001F96                     __ptext13:
  4370                           	opt stack 0
  4371  001F96                     _doActionOn:
  4372                           	opt stack 22
  4373                           
  4374                           ;incstack = 0
  4375                           ;incstack = 0
  4376                           ;doActionOn@dmflags stored from wreg
  4377  001F96  CFE8 F0C9          	movff	wreg,doActionOn@dmflags
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;main.c: 1735: unsigned char i;
  4381                           ;main.c: 1736: unsigned char val;
  4382                           ;main.c: 1738: for (i = 0; i < 8; i++) {
  4383  001F9A  6BCB               	clrf	doActionOn@i& (0+255),b
  4384  001F9C                     l10897:
  4385                           
  4386                           ; BSR set to: 0
  4387                           ;main.c: 1741: if ( !( arg & ( 1 << i ) ) ) continue;
  4388  001F9C  C0CB  F0C6         	movff	doActionOn@i,??_doActionOn
  4389  001FA0  0E01               	movlw	1
  4390  001FA2  6FC7               	movwf	(??_doActionOn+1)& (0+255),b
  4391  001FA4  2BC6               	incf	??_doActionOn& (0+255),f,b
  4392  001FA6  D002               	goto	u13054
  4393  001FA8                     u13055:
  4394  001FA8  90D8               	bcf	status,0,c
  4395  001FAA  37C7               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4396  001FAC                     u13054:
  4397  001FAC  2FC6               	decfsz	??_doActionOn& (0+255),f,b
  4398  001FAE  D7FC               	goto	u13055
  4399  001FB0  51C7               	movf	(??_doActionOn+1)& (0+255),w,b
  4400  001FB2  1451               	andwf	doActionOn@arg,w,c
  4401  001FB4  E101 D11F          	bz	l10949
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;main.c: 1744: if ( dmflags & 0x08 ) {
  4405  001FB8  A7C9               	btfss	doActionOn@dmflags& (0+255),3,b
  4406  001FBA  D00C               	goto	l10905
  4407                           
  4408                           ; BSR set to: 0
  4409                           ;main.c: 1745: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 53 + i) ) {
  4410  001FBC  0E78               	movlw	120
  4411  001FBE  25CB               	addwf	doActionOn@i& (0+255),w,b
  4412  001FC0  6E08               	movwf	?_Read_b_eep,c
  4413  001FC2  6A09               	clrf	?_Read_b_eep+1,c
  4414  001FC4  0E00               	movlw	0
  4415  001FC6  2209               	addwfc	?_Read_b_eep+1,f,c
  4416  001FC8  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4417  001FCC  0100               	movlb	0	; () banked
  4418  001FCE  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4419  001FD0  E001 D111          	bnz	l10949
  4420  001FD4                     l10905:
  4421                           
  4422                           ; BSR set to: 0
  4423                           ;main.c: 1749: }
  4424                           ;main.c: 1750: }
  4425                           ;main.c: 1752: val = Read_b_eep(0x43 + 10 + i);
  4426  001FD4  0E4D               	movlw	77
  4427  001FD6  25CB               	addwf	doActionOn@i& (0+255),w,b
  4428  001FD8  6E08               	movwf	?_Read_b_eep,c
  4429  001FDA  6A09               	clrf	?_Read_b_eep+1,c
  4430  001FDC  0E00               	movlw	0
  4431  001FDE  2209               	addwfc	?_Read_b_eep+1,f,c
  4432  001FE0  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4433  001FE4  0100               	movlb	0	; () banked
  4434  001FE6  6FCA               	movwf	doActionOn@val& (0+255),b
  4435                           
  4436                           ; BSR set to: 0
  4437                           ;main.c: 1755: if ( !( val & 0x80 ) ) continue;
  4438  001FE8  AFCA               	btfss	doActionOn@val& (0+255),7,b
  4439  001FEA  D105               	goto	l10949
  4440  001FEC  D0E0               	goto	l10941
  4441  001FEE                     l451:
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;main.c: 1760: LATBbits.LATB4 = 1;
  4445  001FEE  888A               	bsf	3978,4,c	;volatile
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;main.c: 1762: if (Read_b_eep(0x43 + 10) & 0x04 ) {
  4449  001FF0  6A09               	clrf	?_Read_b_eep+1,c
  4450  001FF2  0E4D               	movlw	77
  4451  001FF4  6E08               	movwf	?_Read_b_eep,c
  4452  001FF6  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4453  001FFA  0100               	movlb	0	; () banked
  4454  001FFC  6FC6               	movwf	??_doActionOn& (0+255),b
  4455  001FFE  A5C6               	btfss	??_doActionOn& (0+255),2,b
  4456  002000  D0E8               	goto	l453
  4457                           
  4458                           ; BSR set to: 0
  4459                           ;main.c: 1763: relay_protection_timer[ 0 ] =
  4460                           ;main.c: 1764: Read_b_eep(0x43 + 34) * 256 +
  4461                           ;main.c: 1765: Read_b_eep(0x43 + 35);
  4462  002002  6A09               	clrf	?_Read_b_eep+1,c
  4463  002004  0E66               	movlw	102
  4464  002006  6E08               	movwf	?_Read_b_eep,c
  4465  002008  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4466  00200C  0100               	movlb	0	; () banked
  4467  00200E  6FC6               	movwf	??_doActionOn& (0+255),b
  4468  002010  6A09               	clrf	?_Read_b_eep+1,c
  4469  002012  0E65               	movlw	101
  4470  002014  6E08               	movwf	?_Read_b_eep,c
  4471  002016  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4472  00201A  0100               	movlb	0	; () banked
  4473  00201C  6FC8               	movwf	(??_doActionOn+2)& (0+255),b
  4474  00201E  6BC7               	clrf	(??_doActionOn+1)& (0+255),b
  4475  002020  51C6               	movf	??_doActionOn& (0+255),w,b
  4476  002022  25C7               	addwf	(??_doActionOn+1)& (0+255),w,b
  4477  002024  6F60               	movwf	_relay_protection_timer& (0+255),b
  4478  002026  0E00               	movlw	0
  4479  002028  21C8               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4480  00202A  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  4481  00202C  D0D2               	goto	l453
  4482  00202E                     l454:
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;main.c: 1770: LATBbits.LATB1 = 1;
  4486  00202E  828A               	bsf	3978,1,c	;volatile
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;main.c: 1772: if (Read_b_eep(0x43 + 11) & 0x04 ) {
  4490  002030  6A09               	clrf	?_Read_b_eep+1,c
  4491  002032  0E4E               	movlw	78
  4492  002034  6E08               	movwf	?_Read_b_eep,c
  4493  002036  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4494  00203A  0100               	movlb	0	; () banked
  4495  00203C  6FC6               	movwf	??_doActionOn& (0+255),b
  4496  00203E  A5C6               	btfss	??_doActionOn& (0+255),2,b
  4497  002040  D0C8               	goto	l453
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;main.c: 1773: relay_protection_timer[ 1 ] =
  4501                           ;main.c: 1774: Read_b_eep(0x43 + 36) * 256 +
  4502                           ;main.c: 1775: Read_b_eep(0x43 + 37);
  4503  002042  6A09               	clrf	?_Read_b_eep+1,c
  4504  002044  0E68               	movlw	104
  4505  002046  6E08               	movwf	?_Read_b_eep,c
  4506  002048  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4507  00204C  0100               	movlb	0	; () banked
  4508  00204E  6FC6               	movwf	??_doActionOn& (0+255),b
  4509  002050  6A09               	clrf	?_Read_b_eep+1,c
  4510  002052  0E67               	movlw	103
  4511  002054  6E08               	movwf	?_Read_b_eep,c
  4512  002056  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4513  00205A  0100               	movlb	0	; () banked
  4514  00205C  6FC8               	movwf	(??_doActionOn+2)& (0+255),b
  4515  00205E  6BC7               	clrf	(??_doActionOn+1)& (0+255),b
  4516  002060  51C6               	movf	??_doActionOn& (0+255),w,b
  4517  002062  25C7               	addwf	(??_doActionOn+1)& (0+255),w,b
  4518  002064  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  4519  002066  0E00               	movlw	0
  4520  002068  21C8               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4521  00206A  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  4522  00206C  D0B2               	goto	l453
  4523  00206E                     l456:
  4524                           
  4525                           ; BSR set to: 0
  4526                           ;main.c: 1780: LATBbits.LATB0 = 1;
  4527  00206E  808A               	bsf	3978,0,c	;volatile
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;main.c: 1782: if (Read_b_eep(0x43 + 12) & 0x04 ) {
  4531  002070  6A09               	clrf	?_Read_b_eep+1,c
  4532  002072  0E4F               	movlw	79
  4533  002074  6E08               	movwf	?_Read_b_eep,c
  4534  002076  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4535  00207A  0100               	movlb	0	; () banked
  4536  00207C  6FC6               	movwf	??_doActionOn& (0+255),b
  4537  00207E  A5C6               	btfss	??_doActionOn& (0+255),2,b
  4538  002080  D0A8               	goto	l453
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;main.c: 1783: relay_protection_timer[ 2 ] =
  4542                           ;main.c: 1784: Read_b_eep(0x43 + 38) * 256 +
  4543                           ;main.c: 1785: Read_b_eep(0x43 + 39);
  4544  002082  6A09               	clrf	?_Read_b_eep+1,c
  4545  002084  0E6A               	movlw	106
  4546  002086  6E08               	movwf	?_Read_b_eep,c
  4547  002088  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4548  00208C  0100               	movlb	0	; () banked
  4549  00208E  6FC6               	movwf	??_doActionOn& (0+255),b
  4550  002090  6A09               	clrf	?_Read_b_eep+1,c
  4551  002092  0E69               	movlw	105
  4552  002094  6E08               	movwf	?_Read_b_eep,c
  4553  002096  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4554  00209A  0100               	movlb	0	; () banked
  4555  00209C  6FC8               	movwf	(??_doActionOn+2)& (0+255),b
  4556  00209E  6BC7               	clrf	(??_doActionOn+1)& (0+255),b
  4557  0020A0  51C6               	movf	??_doActionOn& (0+255),w,b
  4558  0020A2  25C7               	addwf	(??_doActionOn+1)& (0+255),w,b
  4559  0020A4  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  4560  0020A6  0E00               	movlw	0
  4561  0020A8  21C8               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4562  0020AA  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  4563  0020AC  D092               	goto	l453
  4564  0020AE                     l458:
  4565                           
  4566                           ; BSR set to: 0
  4567                           ;main.c: 1790: LATCbits.LATC7 = 1;
  4568  0020AE  8E8B               	bsf	3979,7,c	;volatile
  4569                           
  4570                           ; BSR set to: 0
  4571                           ;main.c: 1792: if ( Read_b_eep(0x43 + 13) & 0x04 ) {
  4572  0020B0  6A09               	clrf	?_Read_b_eep+1,c
  4573  0020B2  0E50               	movlw	80
  4574  0020B4  6E08               	movwf	?_Read_b_eep,c
  4575  0020B6  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4576  0020BA  0100               	movlb	0	; () banked
  4577  0020BC  6FC6               	movwf	??_doActionOn& (0+255),b
  4578  0020BE  A5C6               	btfss	??_doActionOn& (0+255),2,b
  4579  0020C0  D088               	goto	l453
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;main.c: 1793: relay_protection_timer[ 3 ] =
  4583                           ;main.c: 1794: Read_b_eep(0x43 + 40) * 256 +
  4584                           ;main.c: 1795: Read_b_eep(0x43 + 41);
  4585  0020C2  6A09               	clrf	?_Read_b_eep+1,c
  4586  0020C4  0E6C               	movlw	108
  4587  0020C6  6E08               	movwf	?_Read_b_eep,c
  4588  0020C8  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4589  0020CC  0100               	movlb	0	; () banked
  4590  0020CE  6FC6               	movwf	??_doActionOn& (0+255),b
  4591  0020D0  6A09               	clrf	?_Read_b_eep+1,c
  4592  0020D2  0E6B               	movlw	107
  4593  0020D4  6E08               	movwf	?_Read_b_eep,c
  4594  0020D6  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4595  0020DA  0100               	movlb	0	; () banked
  4596  0020DC  6FC8               	movwf	(??_doActionOn+2)& (0+255),b
  4597  0020DE  6BC7               	clrf	(??_doActionOn+1)& (0+255),b
  4598  0020E0  51C6               	movf	??_doActionOn& (0+255),w,b
  4599  0020E2  25C7               	addwf	(??_doActionOn+1)& (0+255),w,b
  4600  0020E4  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  4601  0020E6  0E00               	movlw	0
  4602  0020E8  21C8               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4603  0020EA  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  4604  0020EC  D072               	goto	l453
  4605  0020EE                     l460:
  4606                           
  4607                           ; BSR set to: 0
  4608                           ;main.c: 1800: LATCbits.LATC6 = 1;
  4609  0020EE  8C8B               	bsf	3979,6,c	;volatile
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;main.c: 1802: if (Read_b_eep(0x43 + 14) & 0x04 ) {
  4613  0020F0  6A09               	clrf	?_Read_b_eep+1,c
  4614  0020F2  0E51               	movlw	81
  4615  0020F4  6E08               	movwf	?_Read_b_eep,c
  4616  0020F6  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4617  0020FA  0100               	movlb	0	; () banked
  4618  0020FC  6FC6               	movwf	??_doActionOn& (0+255),b
  4619  0020FE  A5C6               	btfss	??_doActionOn& (0+255),2,b
  4620  002100  D068               	goto	l453
  4621                           
  4622                           ; BSR set to: 0
  4623                           ;main.c: 1803: relay_protection_timer[ 4 ] =
  4624                           ;main.c: 1804: Read_b_eep(0x43 + 42) * 256 +
  4625                           ;main.c: 1805: Read_b_eep(0x43 + 43);
  4626  002102  6A09               	clrf	?_Read_b_eep+1,c
  4627  002104  0E6E               	movlw	110
  4628  002106  6E08               	movwf	?_Read_b_eep,c
  4629  002108  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4630  00210C  0100               	movlb	0	; () banked
  4631  00210E  6FC6               	movwf	??_doActionOn& (0+255),b
  4632  002110  6A09               	clrf	?_Read_b_eep+1,c
  4633  002112  0E6D               	movlw	109
  4634  002114  6E08               	movwf	?_Read_b_eep,c
  4635  002116  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4636  00211A  0100               	movlb	0	; () banked
  4637  00211C  6FC8               	movwf	(??_doActionOn+2)& (0+255),b
  4638  00211E  6BC7               	clrf	(??_doActionOn+1)& (0+255),b
  4639  002120  51C6               	movf	??_doActionOn& (0+255),w,b
  4640  002122  25C7               	addwf	(??_doActionOn+1)& (0+255),w,b
  4641  002124  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  4642  002126  0E00               	movlw	0
  4643  002128  21C8               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4644  00212A  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  4645  00212C  D052               	goto	l453
  4646  00212E                     l462:
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;main.c: 1810: LATCbits.LATC5 = 1;
  4650  00212E  8A8B               	bsf	3979,5,c	;volatile
  4651                           
  4652                           ; BSR set to: 0
  4653                           ;main.c: 1812: if (Read_b_eep(0x43 + 15) & 0x04) {
  4654  002130  6A09               	clrf	?_Read_b_eep+1,c
  4655  002132  0E52               	movlw	82
  4656  002134  6E08               	movwf	?_Read_b_eep,c
  4657  002136  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4658  00213A  0100               	movlb	0	; () banked
  4659  00213C  6FC6               	movwf	??_doActionOn& (0+255),b
  4660  00213E  A5C6               	btfss	??_doActionOn& (0+255),2,b
  4661  002140  D048               	goto	l453
  4662                           
  4663                           ; BSR set to: 0
  4664                           ;main.c: 1813: relay_protection_timer[ 5 ] =
  4665                           ;main.c: 1814: Read_b_eep(0x43 + 44) * 256 +
  4666                           ;main.c: 1815: Read_b_eep(0x43 + 45);
  4667  002142  6A09               	clrf	?_Read_b_eep+1,c
  4668  002144  0E70               	movlw	112
  4669  002146  6E08               	movwf	?_Read_b_eep,c
  4670  002148  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4671  00214C  0100               	movlb	0	; () banked
  4672  00214E  6FC6               	movwf	??_doActionOn& (0+255),b
  4673  002150  6A09               	clrf	?_Read_b_eep+1,c
  4674  002152  0E6F               	movlw	111
  4675  002154  6E08               	movwf	?_Read_b_eep,c
  4676  002156  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4677  00215A  0100               	movlb	0	; () banked
  4678  00215C  6FC8               	movwf	(??_doActionOn+2)& (0+255),b
  4679  00215E  6BC7               	clrf	(??_doActionOn+1)& (0+255),b
  4680  002160  51C6               	movf	??_doActionOn& (0+255),w,b
  4681  002162  25C7               	addwf	(??_doActionOn+1)& (0+255),w,b
  4682  002164  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  4683  002166  0E00               	movlw	0
  4684  002168  21C8               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4685  00216A  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  4686  00216C  D032               	goto	l453
  4687  00216E                     l464:
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;main.c: 1820: LATCbits.LATC4 = 1;
  4691  00216E  888B               	bsf	3979,4,c	;volatile
  4692                           
  4693                           ; BSR set to: 0
  4694                           ;main.c: 1822: if ( Read_b_eep(0x43 + 16) & 0x04) {
  4695  002170  6A09               	clrf	?_Read_b_eep+1,c
  4696  002172  0E53               	movlw	83
  4697  002174  6E08               	movwf	?_Read_b_eep,c
  4698  002176  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4699  00217A  0100               	movlb	0	; () banked
  4700  00217C  6FC6               	movwf	??_doActionOn& (0+255),b
  4701  00217E  A5C6               	btfss	??_doActionOn& (0+255),2,b
  4702  002180  D028               	goto	l453
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;main.c: 1823: relay_protection_timer[ 6 ] =
  4706                           ;main.c: 1824: Read_b_eep(0x43 + 46) * 256 +
  4707                           ;main.c: 1825: Read_b_eep(0x43 + 47);
  4708  002182  6A09               	clrf	?_Read_b_eep+1,c
  4709  002184  0E72               	movlw	114
  4710  002186  6E08               	movwf	?_Read_b_eep,c
  4711  002188  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4712  00218C  0100               	movlb	0	; () banked
  4713  00218E  6FC6               	movwf	??_doActionOn& (0+255),b
  4714  002190  6A09               	clrf	?_Read_b_eep+1,c
  4715  002192  0E71               	movlw	113
  4716  002194  6E08               	movwf	?_Read_b_eep,c
  4717  002196  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4718  00219A  0100               	movlb	0	; () banked
  4719  00219C  6FC8               	movwf	(??_doActionOn+2)& (0+255),b
  4720  00219E  6BC7               	clrf	(??_doActionOn+1)& (0+255),b
  4721  0021A0  51C6               	movf	??_doActionOn& (0+255),w,b
  4722  0021A2  25C7               	addwf	(??_doActionOn+1)& (0+255),w,b
  4723  0021A4  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  4724  0021A6  0E00               	movlw	0
  4725  0021A8  21C8               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4726  0021AA  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  4727  0021AC  D012               	goto	l453
  4728  0021AE                     l10941:
  4729                           
  4730                           ; BSR set to: 0
  4731  0021AE  51CB               	movf	doActionOn@i& (0+255),w,b
  4732                           
  4733                           ; Switch size 1, requested type "space"
  4734                           ; Number of cases is 7, Range of values is 0 to 6
  4735                           ; switch strategies available:
  4736                           ; Name         Instructions Cycles
  4737                           ; simple_byte           22    12 (average)
  4738                           ;	Chosen strategy is simple_byte
  4739  0021B0  E101 D71D          	bz	l451
  4740  0021B4  0A01               	xorlw	1	; case 1
  4741  0021B6  E101 D73A          	bz	l454
  4742  0021BA  0A03               	xorlw	3	; case 2
  4743  0021BC  E101 D757          	bz	l456
  4744  0021C0  0A01               	xorlw	1	; case 3
  4745  0021C2  E101 D774          	bz	l458
  4746  0021C6  0A07               	xorlw	7	; case 4
  4747  0021C8  E092               	bz	l460
  4748  0021CA  0A01               	xorlw	1	; case 5
  4749  0021CC  E0B0               	bz	l462
  4750  0021CE  0A03               	xorlw	3	; case 6
  4751  0021D0  E0CE               	bz	l464
  4752  0021D2                     l453:
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;main.c: 1832: if ( val & 0x08 ) {
  4756  0021D2  A7CA               	btfss	doActionOn@val& (0+255),3,b
  4757  0021D4  D007               	goto	l10945
  4758                           
  4759                           ; BSR set to: 0
  4760                           ;main.c: 1833: SendInformationEvent( i, 20, 3 );
  4761  0021D6  0E14               	movlw	20
  4762  0021D8  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  4763  0021DA  0E03               	movlw	3
  4764  0021DC  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4765  0021DE  51CB               	movf	doActionOn@i& (0+255),w,b
  4766  0021E0  EC9C  F01B         	call	_SendInformationEvent
  4767  0021E4                     l10945:
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;main.c: 1834: }
  4771                           ;main.c: 1837: if ( val & 0x20 ) {
  4772  0021E4  ABCA               	btfss	doActionOn@val& (0+255),5,b
  4773  0021E6  D007               	goto	l10949
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;main.c: 1838: SendInformationEvent( i, 20, 25 );
  4777  0021E8  0E14               	movlw	20
  4778  0021EA  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  4779  0021EC  0E19               	movlw	25
  4780  0021EE  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4781  0021F0  51CB               	movf	doActionOn@i& (0+255),w,b
  4782  0021F2  EC9C  F01B         	call	_SendInformationEvent
  4783  0021F6                     l10949:
  4784                           
  4785                           ; BSR set to: 0
  4786  0021F6  2BCB               	incf	doActionOn@i& (0+255),f,b
  4787                           
  4788                           ; BSR set to: 0
  4789  0021F8  0E07               	movlw	7
  4790  0021FA  65CB               	cpfsgt	doActionOn@i& (0+255),b
  4791  0021FC  D6CF               	goto	l10897
  4792                           
  4793                           ; BSR set to: 0
  4794  0021FE  0C07               	retlw	7
  4795  002200                     __end_of_doActionOn:
  4796                           	opt stack 0
  4797                           tblptru	equ	0xFF8
  4798                           tblptrh	equ	0xFF7
  4799                           tblptrl	equ	0xFF6
  4800                           tablat	equ	0xFF5
  4801                           prodh	equ	0xFF4
  4802                           prodl	equ	0xFF3
  4803                           intcon	equ	0xFF2
  4804                           postinc0	equ	0xFEE
  4805                           wreg	equ	0xFE8
  4806                           indf1	equ	0xFE7
  4807                           fsr1h	equ	0xFE2
  4808                           fsr1l	equ	0xFE1
  4809                           indf2	equ	0xFDF
  4810                           postinc2	equ	0xFDE
  4811                           postdec2	equ	0xFDD
  4812                           plusw2	equ	0xFDB
  4813                           fsr2h	equ	0xFDA
  4814                           fsr2l	equ	0xFD9
  4815                           status	equ	0xFD8
  4816                           
  4817 ;; *************** function _doActionOff *****************
  4818 ;; Defined at:
  4819 ;;		line 1848 in file "../main.c"
  4820 ;; Parameters:    Size  Location     Type
  4821 ;;  dmflags         1    wreg     unsigned char 
  4822 ;;  arg             1   80[COMRAM] unsigned char 
  4823 ;; Auto vars:     Size  Location     Type
  4824 ;;  dmflags         1   24[BANK0 ] unsigned char 
  4825 ;;  i               1   26[BANK0 ] unsigned char 
  4826 ;;  val             1   25[BANK0 ] unsigned char 
  4827 ;; Return value:  Size  Location     Type
  4828 ;;		None               void
  4829 ;; Registers used:
  4830 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4831 ;; Tracked objects:
  4832 ;;		On entry : F/0
  4833 ;;		On exit  : F/0
  4834 ;;		Unchanged: 0/0
  4835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4836 ;;      Params:         1       0       0       0       0       0       0
  4837 ;;      Locals:         0       3       0       0       0       0       0
  4838 ;;      Temps:          0       2       0       0       0       0       0
  4839 ;;      Totals:         1       5       0       0       0       0       0
  4840 ;;Total ram usage:        6 bytes
  4841 ;; Hardware stack levels used:    1
  4842 ;; Hardware stack levels required when called:    7
  4843 ;; This function calls:
  4844 ;;		_Read_b_eep
  4845 ;;		_SendInformationEvent
  4846 ;; This function is called by:
  4847 ;;		_doApplicationOneSecondWork
  4848 ;;		_doDM
  4849 ;; This function uses a non-reentrant model
  4850 ;;
  4851                           
  4852                           	psect	text14
  4853  003264                     __ptext14:
  4854                           	opt stack 0
  4855  003264                     _doActionOff:
  4856                           	opt stack 22
  4857                           
  4858                           ; BSR set to: 0
  4859                           ;incstack = 0
  4860                           ;incstack = 0
  4861                           ;doActionOff@dmflags stored from wreg
  4862  003264  CFE8 F0C8          	movff	wreg,doActionOff@dmflags
  4863                           
  4864                           ; BSR set to: 0
  4865                           ;main.c: 1850: unsigned char i;
  4866                           ;main.c: 1851: unsigned char val;
  4867                           ;main.c: 1853: for ( i = 0; i < 8; i++ ) {
  4868  003268  6BCA               	clrf	doActionOff@i& (0+255),b
  4869  00326A                     l10407:
  4870                           
  4871                           ; BSR set to: 0
  4872                           ;main.c: 1856: if ( !( arg & ( 1 << i ) ) ) continue;
  4873  00326A  C0CA  F0C6         	movff	doActionOff@i,??_doActionOff
  4874  00326E  0E01               	movlw	1
  4875  003270  6FC7               	movwf	(??_doActionOff+1)& (0+255),b
  4876  003272  2BC6               	incf	??_doActionOff& (0+255),f,b
  4877  003274  D002               	goto	u12414
  4878  003276                     u12415:
  4879  003276  90D8               	bcf	status,0,c
  4880  003278  37C7               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4881  00327A                     u12414:
  4882  00327A  2FC6               	decfsz	??_doActionOff& (0+255),f,b
  4883  00327C  D7FC               	goto	u12415
  4884  00327E  51C7               	movf	(??_doActionOff+1)& (0+255),w,b
  4885  003280  1451               	andwf	doActionOff@arg,w,c
  4886  003282  E048               	bz	l10431
  4887                           
  4888                           ; BSR set to: 0
  4889                           ;main.c: 1859: if ( dmflags & 0x08 ) {
  4890  003284  A7C8               	btfss	doActionOff@dmflags& (0+255),3,b
  4891  003286  D00B               	goto	l10415
  4892                           
  4893                           ; BSR set to: 0
  4894                           ;main.c: 1860: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x43 + 53 + i) ) {
  4895  003288  0E78               	movlw	120
  4896  00328A  25CA               	addwf	doActionOff@i& (0+255),w,b
  4897  00328C  6E08               	movwf	?_Read_b_eep,c
  4898  00328E  6A09               	clrf	?_Read_b_eep+1,c
  4899  003290  0E00               	movlw	0
  4900  003292  2209               	addwfc	?_Read_b_eep+1,f,c
  4901  003294  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4902  003298  0100               	movlb	0	; () banked
  4903  00329A  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4904  00329C  E13B               	bnz	l10431
  4905  00329E                     l10415:
  4906                           
  4907                           ; BSR set to: 0
  4908                           ;main.c: 1864: }
  4909                           ;main.c: 1865: }
  4910                           ;main.c: 1867: val = Read_b_eep(0x43 + 10 + i);
  4911  00329E  0E4D               	movlw	77
  4912  0032A0  25CA               	addwf	doActionOff@i& (0+255),w,b
  4913  0032A2  6E08               	movwf	?_Read_b_eep,c
  4914  0032A4  6A09               	clrf	?_Read_b_eep+1,c
  4915  0032A6  0E00               	movlw	0
  4916  0032A8  2209               	addwfc	?_Read_b_eep+1,f,c
  4917  0032AA  EC3F  F01E         	call	_Read_b_eep	;wreg free
  4918  0032AE  0100               	movlb	0	; () banked
  4919  0032B0  6FC9               	movwf	doActionOff@val& (0+255),b
  4920                           
  4921                           ; BSR set to: 0
  4922                           ;main.c: 1870: if ( !( val & 0x80 ) ) continue;
  4923  0032B2  AFC9               	btfss	doActionOff@val& (0+255),7,b
  4924  0032B4  D02F               	goto	l10431
  4925  0032B6  D00E               	goto	l10423
  4926  0032B8                     l479:
  4927                           
  4928                           ; BSR set to: 0
  4929                           ;main.c: 1875: LATBbits.LATB4 = 0;
  4930  0032B8  988A               	bcf	3978,4,c	;volatile
  4931                           
  4932                           ;main.c: 1876: break;
  4933  0032BA  D01A               	goto	l480
  4934  0032BC                     l481:
  4935                           
  4936                           ; BSR set to: 0
  4937                           ;main.c: 1879: LATBbits.LATB1 = 0;
  4938  0032BC  928A               	bcf	3978,1,c	;volatile
  4939                           
  4940                           ;main.c: 1880: break;
  4941  0032BE  D018               	goto	l480
  4942  0032C0                     l482:
  4943                           
  4944                           ; BSR set to: 0
  4945                           ;main.c: 1883: LATBbits.LATB0 = 0;
  4946  0032C0  908A               	bcf	3978,0,c	;volatile
  4947                           
  4948                           ;main.c: 1884: break;
  4949  0032C2  D016               	goto	l480
  4950  0032C4                     l483:
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;main.c: 1887: LATCbits.LATC7 = 0;
  4954  0032C4  9E8B               	bcf	3979,7,c	;volatile
  4955                           
  4956                           ;main.c: 1888: break;
  4957  0032C6  D014               	goto	l480
  4958  0032C8                     l484:
  4959                           
  4960                           ; BSR set to: 0
  4961                           ;main.c: 1891: LATCbits.LATC6 = 0;
  4962  0032C8  9C8B               	bcf	3979,6,c	;volatile
  4963                           
  4964                           ;main.c: 1892: break;
  4965  0032CA  D012               	goto	l480
  4966  0032CC                     l485:
  4967                           
  4968                           ; BSR set to: 0
  4969                           ;main.c: 1895: LATCbits.LATC5 = 0;
  4970  0032CC  9A8B               	bcf	3979,5,c	;volatile
  4971                           
  4972                           ;main.c: 1896: break;
  4973  0032CE  D010               	goto	l480
  4974  0032D0                     l486:
  4975                           
  4976                           ; BSR set to: 0
  4977                           ;main.c: 1899: LATCbits.LATC4 = 0;
  4978  0032D0  988B               	bcf	3979,4,c	;volatile
  4979                           
  4980                           ;main.c: 1900: break;
  4981  0032D2  D00E               	goto	l480
  4982  0032D4                     l10423:
  4983                           
  4984                           ; BSR set to: 0
  4985  0032D4  51CA               	movf	doActionOff@i& (0+255),w,b
  4986                           
  4987                           ; Switch size 1, requested type "space"
  4988                           ; Number of cases is 7, Range of values is 0 to 6
  4989                           ; switch strategies available:
  4990                           ; Name         Instructions Cycles
  4991                           ; simple_byte           22    12 (average)
  4992                           ;	Chosen strategy is simple_byte
  4993  0032D6  E0F0               	bz	l479
  4994  0032D8  0A01               	xorlw	1	; case 1
  4995  0032DA  E0F0               	bz	l481
  4996  0032DC  0A03               	xorlw	3	; case 2
  4997  0032DE  E0F0               	bz	l482
  4998  0032E0  0A01               	xorlw	1	; case 3
  4999  0032E2  E0F0               	bz	l483
  5000  0032E4  0A07               	xorlw	7	; case 4
  5001  0032E6  E0F0               	bz	l484
  5002  0032E8  0A01               	xorlw	1	; case 5
  5003  0032EA  E0F0               	bz	l485
  5004  0032EC  0A03               	xorlw	3	; case 6
  5005  0032EE  E0F0               	bz	l486
  5006  0032F0                     l480:
  5007                           
  5008                           ; BSR set to: 0
  5009                           ;main.c: 1905: if ( val & 0x10 ) {
  5010  0032F0  A9C9               	btfss	doActionOff@val& (0+255),4,b
  5011  0032F2  D007               	goto	l10427
  5012                           
  5013                           ; BSR set to: 0
  5014                           ;main.c: 1906: SendInformationEvent( i, 20, 4 );
  5015  0032F4  0E14               	movlw	20
  5016  0032F6  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  5017  0032F8  0E04               	movlw	4
  5018  0032FA  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5019  0032FC  51CA               	movf	doActionOff@i& (0+255),w,b
  5020  0032FE  EC9C  F01B         	call	_SendInformationEvent
  5021  003302                     l10427:
  5022                           
  5023                           ; BSR set to: 0
  5024                           ;main.c: 1907: }
  5025                           ;main.c: 1910: if ( val & 0x40 ) {
  5026  003302  ADC9               	btfss	doActionOff@val& (0+255),6,b
  5027  003304  D007               	goto	l10431
  5028                           
  5029                           ; BSR set to: 0
  5030                           ;main.c: 1911: SendInformationEvent( i, 20, 24 );
  5031  003306  0E14               	movlw	20
  5032  003308  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  5033  00330A  0E18               	movlw	24
  5034  00330C  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5035  00330E  51CA               	movf	doActionOff@i& (0+255),w,b
  5036  003310  EC9C  F01B         	call	_SendInformationEvent
  5037  003314                     l10431:
  5038                           
  5039                           ; BSR set to: 0
  5040  003314  2BCA               	incf	doActionOff@i& (0+255),f,b
  5041                           
  5042                           ; BSR set to: 0
  5043  003316  0E07               	movlw	7
  5044  003318  65CA               	cpfsgt	doActionOff@i& (0+255),b
  5045  00331A  D7A7               	goto	l10407
  5046                           
  5047                           ; BSR set to: 0
  5048  00331C  0C07               	retlw	7
  5049  00331E                     __end_of_doActionOff:
  5050                           	opt stack 0
  5051                           tblptru	equ	0xFF8
  5052                           tblptrh	equ	0xFF7
  5053                           tblptrl	equ	0xFF6
  5054                           tablat	equ	0xFF5
  5055                           prodh	equ	0xFF4
  5056                           prodl	equ	0xFF3
  5057                           intcon	equ	0xFF2
  5058                           postinc0	equ	0xFEE
  5059                           wreg	equ	0xFE8
  5060                           indf1	equ	0xFE7
  5061                           fsr1h	equ	0xFE2
  5062                           fsr1l	equ	0xFE1
  5063                           indf2	equ	0xFDF
  5064                           postinc2	equ	0xFDE
  5065                           postdec2	equ	0xFDD
  5066                           plusw2	equ	0xFDB
  5067                           fsr2h	equ	0xFDA
  5068                           fsr2l	equ	0xFD9
  5069                           status	equ	0xFD8
  5070                           
  5071 ;; *************** function _vscp_handleProtocolEvent *****************
  5072 ;; Defined at:
  5073 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;		None
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;  bytes           1   45[BANK0 ] unsigned char 
  5078 ;;  page_save       2   41[BANK0 ] unsigned short 
  5079 ;;  i               1   51[BANK0 ] unsigned char 
  5080 ;;  bytes           2   55[BANK0 ] unsigned short 
  5081 ;;  page_save       2   39[BANK0 ] unsigned short 
  5082 ;;  byte            1   54[BANK0 ] unsigned char 
  5083 ;;  cb              1   50[BANK0 ] unsigned char 
  5084 ;;  bytes_this_t    1   49[BANK0 ] unsigned char 
  5085 ;;  j               1   59[BANK0 ] unsigned char 
  5086 ;;  i               1   57[BANK0 ] unsigned char 
  5087 ;;  k               1   52[BANK0 ] unsigned char 
  5088 ;;  i               1   53[BANK0 ] unsigned char 
  5089 ;;  len             1   48[BANK0 ] unsigned char 
  5090 ;;  pos             1   47[BANK0 ] unsigned char 
  5091 ;;  i               1   58[BANK0 ] unsigned char 
  5092 ;;  len             1   46[BANK0 ] unsigned char 
  5093 ;;  pos             1   44[BANK0 ] unsigned char 
  5094 ;;  offset          1   43[BANK0 ] unsigned char 
  5095 ;; Return value:  Size  Location     Type
  5096 ;;		None               void
  5097 ;; Registers used:
  5098 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5099 ;; Tracked objects:
  5100 ;;		On entry : F/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5104 ;;      Params:         0       0       0       0       0       0       0
  5105 ;;      Locals:         0      21       0       0       0       0       0
  5106 ;;      Temps:          0       7       0       0       0       0       0
  5107 ;;      Totals:         0      28       0       0       0       0       0
  5108 ;;Total ram usage:       28 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; Hardware stack levels required when called:    9
  5111 ;; This function calls:
  5112 ;;		_vscp_init
  5113 ;;		_vscp_readAppReg
  5114 ;;		_vscp_writeAppReg
  5115 ;;		_vscp_sendEvent
  5116 ;;		_vscp_getGUID
  5117 ;;		_vscp_getMDF_URL
  5118 ;;		_vscp_goBootloaderMode
  5119 ;;		_vscp_getMatrixInfo
  5120 ;;		_vscp_handleHeartbeat
  5121 ;;		_vscp_handleSetNickname
  5122 ;;		_vscp_handleDropNickname
  5123 ;;		_vscp_newNodeOnline
  5124 ;;		_vscp_readRegister
  5125 ;;		_vscp_readStdReg
  5126 ;;		_vscp_writeRegister
  5127 ;;		_vscp_writeStdReg
  5128 ;;		___lbmod
  5129 ;; This function is called by:
  5130 ;;		_main
  5131 ;; This function uses a non-reentrant model
  5132 ;;
  5133                           
  5134                           	psect	text15
  5135  000EE6                     __ptext15:
  5136                           	opt stack 0
  5137  000EE6                     _vscp_handleProtocolEvent:
  5138                           	opt stack 21
  5139                           
  5140                           ; BSR set to: 0
  5141                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;incstack = 0
  5145                           ;incstack = 0
  5146  000EE6  5198               	movf	(_vscp_imsg+3)& (0+255),w,b
  5147  000EE8  1197               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  5148  000EEA  E101 D2B5          	bz	l10229
  5149  000EEE  D2E4               	goto	l1285
  5150  000EF0                     l9811:
  5151                           
  5152                           ; BSR set to: 0
  5153                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  5154  000EF0  EC1B  F01C         	call	_vscp_handleHeartbeat	;wreg free
  5155                           
  5156                           ;vscp_firmware.c: 807: break;
  5157  000EF4  D2E1               	goto	l1285
  5158  000EF6                     l9813:
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  5162  000EF6  ECB8  F01C         	call	_vscp_newNodeOnline	;wreg free
  5163                           
  5164                           ;vscp_firmware.c: 812: break;
  5165  000EFA  D2DE               	goto	l1285
  5166  000EFC                     l9815:
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  5170  000EFC  EC42  F01D         	call	_vscp_handleSetNickname	;wreg free
  5171                           
  5172                           ;vscp_firmware.c: 817: break;
  5173  000F00  D2DB               	goto	l1285
  5174  000F02                     l9817:
  5175                           
  5176                           ; BSR set to: 0
  5177                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  5178  000F02  EC73  F01C         	call	_vscp_handleDropNickname	;wreg free
  5179                           
  5180                           ;vscp_firmware.c: 822: break;
  5181  000F06  D2D8               	goto	l1285
  5182  000F08                     l9819:
  5183                           
  5184                           ; BSR set to: 0
  5185                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  5186                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5187  000F08  5195               	movf	_vscp_imsg& (0+255),w,b
  5188  000F0A  0B0F               	andlw	15
  5189  000F0C  0A02               	xorlw	2
  5190  000F0E  E001 D2D3          	bnz	l1285
  5191                           
  5192                           ; BSR set to: 0
  5193  000F12  5190               	movf	_vscp_nickname& (0+255),w,b
  5194  000F14  EE20  F09B         	lfsr	2,_vscp_imsg+6
  5195  000F18  62DF               	cpfseq	indf2,c
  5196  000F1A  D2CE               	goto	l1285
  5197                           
  5198                           ; BSR set to: 0
  5199                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  5200  000F1C  0E80               	movlw	128
  5201  000F1E  619C               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5202  000F20  D012               	goto	l9839
  5203                           
  5204                           ; BSR set to: 0
  5205                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  5206  000F22  519C               	movf	(_vscp_imsg+7)& (0+255),w,b
  5207  000F24  EC47  F01A         	call	_vscp_readAppReg
  5208  000F28                     L13:
  5209  000F28  0100               	movlb	0	; () banked
  5210  000F2A                     L14:
  5211  000F2A  6FA9               	movwf	(_vscp_omsg+6)& (0+255),b
  5212                           
  5213                           ; BSR set to: 0
  5214                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  5215  000F2C  C09C  F0A8         	movff	_vscp_imsg+7,_vscp_omsg+5
  5216                           
  5217                           ; BSR set to: 0
  5218                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  5219  000F30  0E03               	movlw	3
  5220  000F32  6FA4               	movwf	(_vscp_omsg+1)& (0+255),b
  5221                           
  5222                           ; BSR set to: 0
  5223                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  5224  000F34  0E82               	movlw	130
  5225  000F36  6FA3               	movwf	_vscp_omsg& (0+255),b
  5226                           
  5227                           ; BSR set to: 0
  5228                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  5229  000F38  6BA5               	clrf	(_vscp_omsg+2)& (0+255),b
  5230  000F3A  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
  5231                           
  5232                           ; BSR set to: 0
  5233                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  5234  000F3C  0E0A               	movlw	10
  5235  000F3E  6FA7               	movwf	(_vscp_omsg+4)& (0+255),b
  5236  000F40                     l9837:
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;vscp_firmware.c: 843: vscp_sendEvent();
  5240  000F40  EC2F  F01D         	call	_vscp_sendEvent	;wreg free
  5241                           
  5242                           ;vscp_firmware.c: 844: }
  5243  000F44  D2B9               	goto	l1285
  5244  000F46                     l9839:
  5245                           
  5246                           ; BSR set to: 0
  5247                           ;vscp_firmware.c: 845: else {
  5248                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  5249                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  5250  000F46  519C               	movf	(_vscp_imsg+7)& (0+255),w,b
  5251  000F48  EC08  F014         	call	_vscp_readStdReg
  5252  000F4C  D7ED               	goto	L13
  5253  000F4E                     l9853:
  5254                           
  5255                           ; BSR set to: 0
  5256                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  5257                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5258  000F4E  5195               	movf	_vscp_imsg& (0+255),w,b
  5259  000F50  0B0F               	andlw	15
  5260  000F52  0A03               	xorlw	3
  5261  000F54  E001 D2B0          	bnz	l1285
  5262                           
  5263                           ; BSR set to: 0
  5264  000F58  5190               	movf	_vscp_nickname& (0+255),w,b
  5265  000F5A  EE20  F09B         	lfsr	2,_vscp_imsg+6
  5266  000F5E  62DF               	cpfseq	indf2,c
  5267  000F60  D2AB               	goto	l1285
  5268                           
  5269                           ; BSR set to: 0
  5270                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  5271  000F62  0E80               	movlw	128
  5272  000F64  619C               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5273  000F66  D006               	goto	l9873
  5274                           
  5275                           ; BSR set to: 0
  5276                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  5277                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5278  000F68  C09D  F051         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  5279  000F6C  519C               	movf	(_vscp_imsg+7)& (0+255),w,b
  5280  000F6E  EC11  F003         	call	_vscp_writeAppReg
  5281  000F72  D7DB               	goto	L14
  5282  000F74                     l9873:
  5283                           
  5284                           ; BSR set to: 0
  5285                           ;vscp_firmware.c: 888: else {
  5286                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  5287                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5288  000F74  C09D  F010         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  5289  000F78  519C               	movf	(_vscp_imsg+7)& (0+255),w,b
  5290  000F7A  ECBB  F017         	call	_vscp_writeStdReg
  5291  000F7E  D7D4               	goto	L13
  5292  000F80                     l9887:
  5293                           
  5294                           ; BSR set to: 0
  5295                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  5296                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  5297                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  5298                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  5299                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  5300                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  5301                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  5302  000F80  5190               	movf	_vscp_nickname& (0+255),w,b
  5303  000F82  EE20  F09B         	lfsr	2,_vscp_imsg+6
  5304  000F86  62DF               	cpfseq	indf2,c
  5305  000F88  D297               	goto	l1285
  5306                           
  5307                           ; BSR set to: 0
  5308  000F8A  0E00               	movlw	0
  5309  000F8C  EC2C  F01E         	call	_vscp_getGUID
  5310  000F90  0100               	movlb	0	; () banked
  5311  000F92  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5312  000F94  E001 D290          	bnz	l1285
  5313                           
  5314                           ; BSR set to: 0
  5315  000F98  0E03               	movlw	3
  5316  000F9A  EC2C  F01E         	call	_vscp_getGUID
  5317  000F9E  0100               	movlb	0	; () banked
  5318  000FA0  199E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5319  000FA2  E001 D289          	bnz	l1285
  5320                           
  5321                           ; BSR set to: 0
  5322  000FA6  0E05               	movlw	5
  5323  000FA8  EC2C  F01E         	call	_vscp_getGUID
  5324  000FAC  0100               	movlb	0	; () banked
  5325  000FAE  199F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5326  000FB0  E001 D282          	bnz	l1285
  5327                           
  5328                           ; BSR set to: 0
  5329  000FB4  0E07               	movlw	7
  5330  000FB6  EC2C  F01E         	call	_vscp_getGUID
  5331  000FBA  0100               	movlb	0	; () banked
  5332  000FBC  19A0               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  5333  000FBE  E001 D27B          	bnz	l1285
  5334                           
  5335                           ; BSR set to: 0
  5336  000FC2  5053               	movf	_vscp_page_select+1,w,c
  5337  000FC4  19A1               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  5338  000FC6  E001 D277          	bnz	l1285
  5339                           
  5340                           ; BSR set to: 0
  5341  000FCA  5052               	movf	_vscp_page_select,w,c
  5342  000FCC  EE20  F0A2         	lfsr	2,_vscp_imsg+13
  5343  000FD0  62DF               	cpfseq	indf2,c
  5344  000FD2  D272               	goto	l1285
  5345                           
  5346                           ; BSR set to: 0
  5347                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  5348  000FD4  519C               	movf	(_vscp_imsg+7)& (0+255),w,b
  5349  000FD6  ECC4  F01D         	call	_vscp_goBootloaderMode
  5350  000FDA  D26E               	goto	l1285
  5351  000FDC                     l9903:
  5352                           
  5353                           ; BSR set to: 0
  5354                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  5355                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  5356                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  5357                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  5358  000FDC  0E00               	movlw	0
  5359  000FDE  EC2C  F01E         	call	_vscp_getGUID
  5360  000FE2  0100               	movlb	0	; () banked
  5361  000FE4  199C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5362  000FE6  E173               	bnz	l9947
  5363                           
  5364                           ; BSR set to: 0
  5365  000FE8  0E01               	movlw	1
  5366  000FEA  EC2C  F01E         	call	_vscp_getGUID
  5367  000FEE  0100               	movlb	0	; () banked
  5368  000FF0  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5369  000FF2  E16D               	bnz	l9947
  5370                           
  5371                           ; BSR set to: 0
  5372  000FF4  0E02               	movlw	2
  5373  000FF6  EC2C  F01E         	call	_vscp_getGUID
  5374  000FFA  0100               	movlb	0	; () banked
  5375  000FFC  199E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5376  000FFE  E167               	bnz	l9947
  5377                           
  5378                           ; BSR set to: 0
  5379  001000  0E03               	movlw	3
  5380  001002  EC2C  F01E         	call	_vscp_getGUID
  5381  001006  0100               	movlb	0	; () banked
  5382  001008  199F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5383  00100A  E161               	bnz	l9947
  5384                           
  5385                           ; BSR set to: 0
  5386                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  5387  00100C  898C               	bsf	_vscp_guid_reset& (0+255),4,b
  5388  00100E  D05F               	goto	l9947
  5389  001010                     l9913:
  5390                           
  5391                           ; BSR set to: 0
  5392                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  5393                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  5394                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  5395                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  5396  001010  0E04               	movlw	4
  5397  001012  EC2C  F01E         	call	_vscp_getGUID
  5398  001016  0100               	movlb	0	; () banked
  5399  001018  199C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5400  00101A  E159               	bnz	l9947
  5401                           
  5402                           ; BSR set to: 0
  5403  00101C  0E05               	movlw	5
  5404  00101E  EC2C  F01E         	call	_vscp_getGUID
  5405  001022  0100               	movlb	0	; () banked
  5406  001024  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5407  001026  E153               	bnz	l9947
  5408                           
  5409                           ; BSR set to: 0
  5410  001028  0E06               	movlw	6
  5411  00102A  EC2C  F01E         	call	_vscp_getGUID
  5412  00102E  0100               	movlb	0	; () banked
  5413  001030  199E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5414  001032  E14D               	bnz	l9947
  5415                           
  5416                           ; BSR set to: 0
  5417  001034  0E07               	movlw	7
  5418  001036  EC2C  F01E         	call	_vscp_getGUID
  5419  00103A  0100               	movlb	0	; () banked
  5420  00103C  199F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5421  00103E  E147               	bnz	l9947
  5422                           
  5423                           ; BSR set to: 0
  5424                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  5425  001040  8B8C               	bsf	_vscp_guid_reset& (0+255),5,b
  5426  001042  D045               	goto	l9947
  5427  001044                     l9923:
  5428                           
  5429                           ; BSR set to: 0
  5430                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  5431                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  5432                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  5433                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  5434  001044  0E08               	movlw	8
  5435  001046  EC2C  F01E         	call	_vscp_getGUID
  5436  00104A  0100               	movlb	0	; () banked
  5437  00104C  199C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5438  00104E  E13F               	bnz	l9947
  5439                           
  5440                           ; BSR set to: 0
  5441  001050  0E09               	movlw	9
  5442  001052  EC2C  F01E         	call	_vscp_getGUID
  5443  001056  0100               	movlb	0	; () banked
  5444  001058  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5445  00105A  E139               	bnz	l9947
  5446                           
  5447                           ; BSR set to: 0
  5448  00105C  0E0A               	movlw	10
  5449  00105E  EC2C  F01E         	call	_vscp_getGUID
  5450  001062  0100               	movlb	0	; () banked
  5451  001064  199E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5452  001066  E133               	bnz	l9947
  5453                           
  5454                           ; BSR set to: 0
  5455  001068  0E0B               	movlw	11
  5456  00106A  EC2C  F01E         	call	_vscp_getGUID
  5457  00106E  0100               	movlb	0	; () banked
  5458  001070  199F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5459  001072  E12D               	bnz	l9947
  5460                           
  5461                           ; BSR set to: 0
  5462                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  5463  001074  8D8C               	bsf	_vscp_guid_reset& (0+255),6,b
  5464  001076  D02B               	goto	l9947
  5465  001078                     l9933:
  5466                           
  5467                           ; BSR set to: 0
  5468                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  5469                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  5470                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  5471                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  5472  001078  0E0C               	movlw	12
  5473  00107A  EC2C  F01E         	call	_vscp_getGUID
  5474  00107E  0100               	movlb	0	; () banked
  5475  001080  199C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5476  001082  E125               	bnz	l9947
  5477                           
  5478                           ; BSR set to: 0
  5479  001084  0E0D               	movlw	13
  5480  001086  EC2C  F01E         	call	_vscp_getGUID
  5481  00108A  0100               	movlb	0	; () banked
  5482  00108C  199D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5483  00108E  E11F               	bnz	l9947
  5484                           
  5485                           ; BSR set to: 0
  5486  001090  0E0E               	movlw	14
  5487  001092  EC2C  F01E         	call	_vscp_getGUID
  5488  001096  0100               	movlb	0	; () banked
  5489  001098  199E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5490  00109A  E119               	bnz	l9947
  5491                           
  5492                           ; BSR set to: 0
  5493  00109C  0E0F               	movlw	15
  5494  00109E  EC2C  F01E         	call	_vscp_getGUID
  5495  0010A2  0100               	movlb	0	; () banked
  5496  0010A4  199F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5497  0010A6  E113               	bnz	l9947
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  5501  0010A8  8F8C               	bsf	_vscp_guid_reset& (0+255),7,b
  5502  0010AA  D011               	goto	l9947
  5503  0010AC                     l1225:
  5504                           
  5505                           ; BSR set to: 0
  5506                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  5507  0010AC  6B8C               	clrf	_vscp_guid_reset& (0+255),b
  5508                           
  5509                           ;vscp_firmware.c: 965: break;
  5510  0010AE  D00F               	goto	l9947
  5511  0010B0                     l9945:
  5512                           
  5513                           ; BSR set to: 0
  5514  0010B0  399B               	swapf	(_vscp_imsg+6)& (0+255),w,b
  5515  0010B2  0B0F               	andlw	15
  5516  0010B4  6FD0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5517  0010B6  6BD1               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5518                           
  5519                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5520                           ; Switch size 1, requested type "space"
  5521                           ; Number of cases is 1, Range of values is 0 to 0
  5522                           ; switch strategies available:
  5523                           ; Name         Instructions Cycles
  5524                           ; simple_byte            4     3 (average)
  5525                           ;	Chosen strategy is simple_byte
  5526  0010B8  51D1               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5527  0010BA  E1F8               	bnz	l1225
  5528                           
  5529                           ; BSR set to: 0
  5530                           ; Switch size 1, requested type "space"
  5531                           ; Number of cases is 4, Range of values is 0 to 3
  5532                           ; switch strategies available:
  5533                           ; Name         Instructions Cycles
  5534                           ; simple_byte           13     7 (average)
  5535                           ;	Chosen strategy is simple_byte
  5536  0010BC  51D0               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5537  0010BE  E08E               	bz	l9903
  5538  0010C0  0A01               	xorlw	1	; case 1
  5539  0010C2  E0A6               	bz	l9913
  5540  0010C4  0A03               	xorlw	3	; case 2
  5541  0010C6  E0BE               	bz	l9923
  5542  0010C8  0A01               	xorlw	1	; case 3
  5543  0010CA  E0D6               	bz	l9933
  5544  0010CC  D7EF               	goto	l1225
  5545  0010CE                     l9947:
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  5549  0010CE  518C               	movf	_vscp_guid_reset& (0+255),w,b
  5550  0010D0  0BF0               	andlw	240
  5551  0010D2  0AF0               	xorlw	240
  5552  0010D4  E001 D1F0          	bnz	l1285
  5553                           
  5554                           ; BSR set to: 0
  5555                           ;vscp_firmware.c: 970: vscp_init();
  5556  0010D8  ECF9  F01B         	call	_vscp_init	;wreg free
  5557  0010DC  D1ED               	goto	l1285
  5558  0010DE                     l9951:
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5562  0010DE  5190               	movf	_vscp_nickname& (0+255),w,b
  5563  0010E0  EE20  F09B         	lfsr	2,_vscp_imsg+6
  5564  0010E4  62DF               	cpfseq	indf2,c
  5565  0010E6  D1E8               	goto	l1285
  5566                           
  5567                           ; BSR set to: 0
  5568                           ;vscp_firmware.c: 978: uint8_t i;
  5569                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  5570  0010E8  6BDC               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  5571                           
  5572                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  5573  0010EA  C09C  F0DB         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  5574                           
  5575                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  5576  0010EE  C09D  F0DE         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  5577                           
  5578                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  5579  0010F2  6BEA               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  5580  0010F4  D042               	goto	l9983
  5581  0010F6                     l9955:
  5582                           
  5583                           ; BSR set to: 0
  5584                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  5585  0010F6  0E07               	movlw	7
  5586  0010F8  6E08               	movwf	?___lbmod,c
  5587  0010FA  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5588  0010FC  ECE2  F01C         	call	___lbmod
  5589  001100  0100               	movlb	0	; () banked
  5590  001102  6FD0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5591  001104  51D0               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5592  001106  0FA9               	addlw	low (_vscp_omsg+6)
  5593  001108  6ED9               	movwf	fsr2l,c
  5594  00110A  6ADA               	clrf	fsr2h,c
  5595  00110C  51DB               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  5596  00110E  25EA               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5597  001110  ECD2  F01D         	call	_vscp_readRegister
  5598  001114  6EDF               	movwf	indf2,c
  5599                           
  5600                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  5601  001116  0E07               	movlw	7
  5602  001118  6E08               	movwf	?___lbmod,c
  5603  00111A  0100               	movlb	0	; () banked
  5604  00111C  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5605  00111E  ECE2  F01C         	call	___lbmod
  5606  001122  0A06               	xorlw	6
  5607  001124  E00B               	bz	l9961
  5608  001126  0EFF               	movlw	255
  5609  001128  0100               	movlb	0	; () banked
  5610  00112A  25DE               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  5611  00112C  6FD0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5612  00112E  6BD1               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5613  001130  0EFF               	movlw	255
  5614  001132  23D1               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  5615  001134  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5616  001136  19D0               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5617  001138  11D1               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5618  00113A  E11E               	bnz	l9981
  5619  00113C                     l9961:
  5620                           
  5621                           ;vscp_firmware.c: 988: uint8_t bytes;
  5622                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  5623  00113C  0E07               	movlw	7
  5624  00113E  6E08               	movwf	?___lbmod,c
  5625  001140  0100               	movlb	0	; () banked
  5626  001142  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5627  001144  ECE2  F01C         	call	___lbmod
  5628  001148  0A06               	xorlw	6
  5629  00114A  E103               	bnz	l9965
  5630                           
  5631                           ;vscp_firmware.c: 991: bytes = 7;
  5632  00114C  0E07               	movlw	7
  5633  00114E  0100               	movlb	0	; () banked
  5634  001150  D009               	goto	L15
  5635  001152                     l9965:
  5636                           
  5637                           ;vscp_firmware.c: 993: else {
  5638                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  5639  001152  0E07               	movlw	7
  5640  001154  6E08               	movwf	?___lbmod,c
  5641  001156  0100               	movlb	0	; () banked
  5642  001158  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5643  00115A  ECE2  F01C         	call	___lbmod
  5644  00115E  0100               	movlb	0	; () banked
  5645  001160  6FD0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5646  001162  29D0               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5647  001164                     L15:
  5648  001164  6FDD               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  5649                           
  5650                           ; BSR set to: 0
  5651                           ;vscp_firmware.c: 995: }
  5652                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  5653  001166  51DD               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  5654  001168  0F81               	addlw	129
  5655  00116A  6FA3               	movwf	_vscp_omsg& (0+255),b
  5656                           
  5657                           ; BSR set to: 0
  5658                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  5659                           
  5660                           ; BSR set to: 0
  5661                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  5665  00116C  D9BC               	call	PL70	;call to abstracted procedure
  5666                           
  5667                           ; BSR set to: 0
  5668                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  5669  00116E  C0DC  F0A8         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  5670                           
  5671                           ; BSR set to: 0
  5672                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  5673  001172  EC2F  F01D         	call	_vscp_sendEvent	;wreg free
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;vscp_firmware.c: 1005: pos++;
  5677  001176  2BDC               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  5678  001178                     l9981:
  5679                           
  5680                           ; BSR set to: 0
  5681  001178  2BEA               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  5682  00117A                     l9983:
  5683                           
  5684                           ; BSR set to: 0
  5685  00117A  51DE               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  5686  00117C  5DEA               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5687  00117E  E301 D19B          	bc	l1285
  5688  001182  D7B9               	goto	l9955
  5689  001184                     l9985:
  5690                           
  5691                           ; BSR set to: 0
  5692                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5693  001184  5190               	movf	_vscp_nickname& (0+255),w,b
  5694  001186  EE20  F09B         	lfsr	2,_vscp_imsg+6
  5695  00118A  62DF               	cpfseq	indf2,c
  5696  00118C  D195               	goto	l1285
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;vscp_firmware.c: 1014: uint8_t i;
  5700                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  5701  00118E  C09C  F0DF         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1283
  5702                           
  5703                           ; BSR set to: 0
  5704                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  5705  001192  5195               	movf	_vscp_imsg& (0+255),w,b
  5706  001194  0FFE               	addlw	254
  5707  001196  0B07               	andlw	7
  5708  001198  6FE0               	movwf	vscp_handleProtocolEvent@len_1284& (0+255),b
  5709                           
  5710                           ; BSR set to: 0
  5711                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  5712  00119A  6BE5               	clrf	vscp_handleProtocolEvent@i_1282& (0+255),b
  5713  00119C  D016               	goto	l9999
  5714  00119E                     l9993:
  5715                           
  5716                           ; BSR set to: 0
  5717                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  5718  00119E  51E5               	movf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5719  0011A0  0F9D               	addlw	low (_vscp_imsg+8)
  5720  0011A2  6ED9               	movwf	fsr2l,c
  5721  0011A4  6ADA               	clrf	fsr2h,c
  5722  0011A6  50DF               	movf	indf2,w,c
  5723  0011A8  6FCE               	movwf	?_vscp_writeRegister& (0+255),b
  5724  0011AA  51DF               	movf	vscp_handleProtocolEvent@pos_1283& (0+255),w,b
  5725  0011AC  25E5               	addwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5726  0011AE  EC77  F01D         	call	_vscp_writeRegister
  5727                           
  5728                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  5729  0011B2  0100               	movlb	0	; () banked
  5730  0011B4  51E5               	movf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5731  0011B6  0FA9               	addlw	low (_vscp_omsg+6)
  5732  0011B8  6ED9               	movwf	fsr2l,c
  5733  0011BA  6ADA               	clrf	fsr2h,c
  5734  0011BC  51DF               	movf	vscp_handleProtocolEvent@pos_1283& (0+255),w,b
  5735  0011BE  25E5               	addwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5736  0011C0  ECD2  F01D         	call	_vscp_readRegister
  5737  0011C4  6EDF               	movwf	indf2,c
  5738  0011C6  0100               	movlb	0	; () banked
  5739  0011C8  2BE5               	incf	vscp_handleProtocolEvent@i_1282& (0+255),f,b
  5740  0011CA                     l9999:
  5741                           
  5742                           ; BSR set to: 0
  5743  0011CA  51E0               	movf	vscp_handleProtocolEvent@len_1284& (0+255),w,b
  5744  0011CC  5DE5               	subwf	vscp_handleProtocolEvent@i_1282& (0+255),w,b
  5745  0011CE  E3E7               	bnc	l9993
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;vscp_firmware.c: 1022: }
  5749                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  5750                           
  5751                           ; BSR set to: 0
  5752                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  5753                           
  5754                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  5755  0011D0  D98A               	call	PL70	;call to abstracted procedure
  5756                           
  5757                           ; BSR set to: 0
  5758                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  5759  0011D2  6BA8               	clrf	(_vscp_omsg+5)& (0+255),b
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  5763  0011D4  51E0               	movf	vscp_handleProtocolEvent@len_1284& (0+255),w,b
  5764  0011D6  0F81               	addlw	129
  5765  0011D8  6FA3               	movwf	_vscp_omsg& (0+255),b
  5766  0011DA  D6B2               	goto	l9837
  5767  0011DC                     l10011:
  5768                           
  5769                           ; BSR set to: 0
  5770                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5771  0011DC  5190               	movf	_vscp_nickname& (0+255),w,b
  5772  0011DE  EE20  F09B         	lfsr	2,_vscp_imsg+6
  5773  0011E2  62DF               	cpfseq	indf2,c
  5774  0011E4  D169               	goto	l1285
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5778                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  5779                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  5780  0011E6  519C               	movf	(_vscp_imsg+7)& (0+255),w,b
  5781  0011E8  EC47  F01A         	call	_vscp_readAppReg
  5782  0011EC  0100               	movlb	0	; () banked
  5783  0011EE  6FD0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5784  0011F0  29D0               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5785  0011F2  6E51               	movwf	?_vscp_writeAppReg,c
  5786  0011F4  519C               	movf	(_vscp_imsg+7)& (0+255),w,b
  5787  0011F6  EC11  F003         	call	_vscp_writeAppReg
  5788  0011FA  D697               	goto	L14
  5789  0011FC                     l10027:
  5790                           
  5791                           ; BSR set to: 0
  5792                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5793  0011FC  5190               	movf	_vscp_nickname& (0+255),w,b
  5794  0011FE  EE20  F09B         	lfsr	2,_vscp_imsg+6
  5795  001202  62DF               	cpfseq	indf2,c
  5796  001204  D159               	goto	l1285
  5797                           
  5798                           ; BSR set to: 0
  5799                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5800                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  5801                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  5802  001206  519C               	movf	(_vscp_imsg+7)& (0+255),w,b
  5803  001208  EC47  F01A         	call	_vscp_readAppReg
  5804  00120C  0100               	movlb	0	; () banked
  5805  00120E  6FD0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5806  001210  05D0               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  5807  001212  6E51               	movwf	?_vscp_writeAppReg,c
  5808  001214  519C               	movf	(_vscp_imsg+7)& (0+255),w,b
  5809  001216  EC11  F003         	call	_vscp_writeAppReg
  5810  00121A  D687               	goto	L14
  5811  00121C                     l10043:
  5812                           
  5813                           ; BSR set to: 0
  5814                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  5815                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  5816  00121C  519B               	movf	(_vscp_imsg+6)& (0+255),w,b
  5817  00121E  1990               	xorwf	_vscp_nickname& (0+255),w,b
  5818  001220  E003               	bz	l1249
  5819                           
  5820                           ; BSR set to: 0
  5821  001222  299B               	incf	(_vscp_imsg+6)& (0+255),w,b
  5822  001224  E001 D148          	bnz	l1285
  5823  001228                     l1249:
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  5827  001228  6BE4               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  5831  00122A  0E03               	movlw	3
  5832  00122C  6FA4               	movwf	(_vscp_omsg+1)& (0+255),b
  5833                           
  5834                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  5835  00122E  0E88               	movlw	136
  5836  001230  6FA3               	movwf	_vscp_omsg& (0+255),b
  5837                           
  5838                           ; BSR set to: 0
  5839                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  5840  001232  6BA5               	clrf	(_vscp_omsg+2)& (0+255),b
  5841  001234  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
  5842                           
  5843                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  5844  001236  0E20               	movlw	32
  5845  001238  6FA7               	movwf	(_vscp_omsg+4)& (0+255),b
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  5849  00123A  6BE9               	clrf	vscp_handleProtocolEvent@i_1285& (0+255),b
  5850  00123C                     l1250:
  5851                           
  5852                           ; BSR set to: 0
  5853                           ;vscp_firmware.c: 1091: {
  5854                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  5858  00123C  D95B               	call	PL80	;call to abstracted procedure
  5859  00123E                     l10063:
  5860                           
  5861                           ; BSR set to: 0
  5862                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  5863  00123E  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5864  001240  0FA8               	addlw	low (_vscp_omsg+5)
  5865  001242  6ED9               	movwf	fsr2l,c
  5866  001244  6ADA               	clrf	fsr2h,c
  5867  001246  51E4               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5868  001248  080F               	sublw	15
  5869  00124A  EC2C  F01E         	call	_vscp_getGUID
  5870  00124E  6EDF               	movwf	indf2,c
  5871  001250  0100               	movlb	0	; () banked
  5872  001252  2BE4               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5873                           
  5874                           ; BSR set to: 0
  5875                           ;vscp_firmware.c: 1096: if (k > 16)
  5876  001254  0E10               	movlw	16
  5877  001256  65E4               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5878  001258  D001               	goto	l10071
  5879  00125A  D004               	goto	l10075
  5880  00125C                     l10071:
  5881                           
  5882                           ; BSR set to: 0
  5883  00125C  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5884                           
  5885                           ; BSR set to: 0
  5886  00125E  0E07               	movlw	7
  5887  001260  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5888  001262  D7ED               	goto	l10063
  5889  001264                     l10075:
  5890                           
  5891                           ; BSR set to: 0
  5892                           ;vscp_firmware.c: 1098: }
  5893                           ;vscp_firmware.c: 1100: if (k > 16)
  5894  001264  0E10               	movlw	16
  5895  001266  65E4               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5896  001268  D001               	goto	l10079
  5897  00126A  D006               	goto	l1251
  5898  00126C                     l10079:
  5899                           
  5900                           ; BSR set to: 0
  5901                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  5902  00126C  EC2F  F01D         	call	_vscp_sendEvent	;wreg free
  5903                           
  5904                           ; BSR set to: 0
  5905  001270  2BE9               	incf	vscp_handleProtocolEvent@i_1285& (0+255),f,b
  5906                           
  5907                           ; BSR set to: 0
  5908  001272  0E02               	movlw	2
  5909  001274  65E9               	cpfsgt	vscp_handleProtocolEvent@i_1285& (0+255),b
  5910  001276  D7E2               	goto	l1250
  5911  001278                     l1251:
  5912                           
  5913                           ; BSR set to: 0
  5914                           ;vscp_firmware.c: 1104: }
  5915                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  5916  001278  6BEB               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  5917  00127A                     l10089:
  5918                           
  5919                           ; BSR set to: 0
  5920                           ;vscp_firmware.c: 1107: {
  5921                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  5922  00127A  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5923  00127C  ECDF  F01D         	call	_vscp_getMDF_URL
  5924  001280  0900               	iorlw	0
  5925  001282  E008               	bz	l10093
  5926                           
  5927                           ; BSR set to: 0
  5928                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  5929  001284  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5930  001286  0FAB               	addlw	low (_vscp_omsg+8)
  5931  001288  6ED9               	movwf	fsr2l,c
  5932  00128A  6ADA               	clrf	fsr2h,c
  5933  00128C  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5934  00128E  ECDF  F01D         	call	_vscp_getMDF_URL
  5935  001292  D005               	goto	L16
  5936  001294                     l10093:
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;vscp_firmware.c: 1110: else
  5940                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  5941  001294  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5942  001296  0FAB               	addlw	low (_vscp_omsg+8)
  5943  001298  6ED9               	movwf	fsr2l,c
  5944  00129A  6ADA               	clrf	fsr2h,c
  5945  00129C  0E00               	movlw	0
  5946  00129E                     L16:
  5947  00129E  6EDF               	movwf	indf2,c
  5948                           
  5949                           ; BSR set to: 0
  5950  0012A0  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5951                           
  5952                           ; BSR set to: 0
  5953  0012A2  0E04               	movlw	4
  5954  0012A4  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5955  0012A6  D7E9               	goto	l10089
  5956                           
  5957                           ; BSR set to: 0
  5958                           ;vscp_firmware.c: 1112: }
  5959                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  5960  0012A8  EC2F  F01D         	call	_vscp_sendEvent	;wreg free
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;vscp_firmware.c: 1116: k = 5;
  5964  0012AC  0E05               	movlw	5
  5965  0012AE  6FE4               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  5969  0012B0  0E03               	movlw	3
  5970  0012B2  6FE9               	movwf	vscp_handleProtocolEvent@i_1285& (0+255),b
  5971  0012B4                     l1260:
  5972                           
  5973                           ; BSR set to: 0
  5974                           ;vscp_firmware.c: 1118: {
  5975                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  5979  0012B4  D91F               	call	PL80	;call to abstracted procedure
  5980  0012B6                     l10115:
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  5984  0012B6  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5985  0012B8  0FA8               	addlw	low (_vscp_omsg+5)
  5986  0012BA  6ED9               	movwf	fsr2l,c
  5987  0012BC  6ADA               	clrf	fsr2h,c
  5988  0012BE  51E4               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5989  0012C0  ECDF  F01D         	call	_vscp_getMDF_URL
  5990  0012C4  6EDF               	movwf	indf2,c
  5991                           
  5992                           ; BSR set to: 0
  5993  0012C6  2BE4               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5994                           
  5995                           ; BSR set to: 0
  5996  0012C8  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5997                           
  5998                           ; BSR set to: 0
  5999  0012CA  0E07               	movlw	7
  6000  0012CC  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  6001  0012CE  D7F3               	goto	l10115
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;vscp_firmware.c: 1123: }
  6005                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  6006  0012D0  EC2F  F01D         	call	_vscp_sendEvent	;wreg free
  6007                           
  6008                           ; BSR set to: 0
  6009  0012D4  2BE9               	incf	vscp_handleProtocolEvent@i_1285& (0+255),f,b
  6010                           
  6011                           ; BSR set to: 0
  6012  0012D6  0E06               	movlw	6
  6013  0012D8  65E9               	cpfsgt	vscp_handleProtocolEvent@i_1285& (0+255),b
  6014  0012DA  D7EC               	goto	l1260
  6015  0012DC  D0ED               	goto	l1285
  6016  0012DE                     l10129:
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  6020  0012DE  5190               	movf	_vscp_nickname& (0+255),w,b
  6021  0012E0  EE20  F09B         	lfsr	2,_vscp_imsg+6
  6022  0012E4  62DF               	cpfseq	indf2,c
  6023  0012E6  D0E8               	goto	l1285
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  6027  0012E8  0E03               	movlw	3
  6028  0012EA  6FA4               	movwf	(_vscp_omsg+1)& (0+255),b
  6029                           
  6030                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  6031  0012EC  0E87               	movlw	135
  6032  0012EE  6FA3               	movwf	_vscp_omsg& (0+255),b
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  6036  0012F0  6BA5               	clrf	(_vscp_omsg+2)& (0+255),b
  6037  0012F2  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
  6038                           
  6039                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  6040  0012F4  0E22               	movlw	34
  6041  0012F6  6FA7               	movwf	(_vscp_omsg+4)& (0+255),b
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  6045  0012F8  0EA8               	movlw	(_vscp_omsg+5)& (0+255)
  6046  0012FA  EC88  F01D         	call	_vscp_getMatrixInfo
  6047  0012FE  D620               	goto	l9837
  6048  001300                     l10139:
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  6052  001300  5190               	movf	_vscp_nickname& (0+255),w,b
  6053  001302  EE20  F09B         	lfsr	2,_vscp_imsg+6
  6054  001306  62DF               	cpfseq	indf2,c
  6055  001308  D0D7               	goto	l1285
  6056                           
  6057                           ; BSR set to: 0
  6058                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  6059  00130A  6BE6               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  6063                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  6064  00130C  C095  F0D0         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  6065  001310  0E0F               	movlw	15
  6066  001312  17D0               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6067  001314  0E04               	movlw	4
  6068  001316  5DD0               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6069  001318  E312               	bnc	l10155
  6070                           
  6071                           ; BSR set to: 0
  6072                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  6073  00131A  C09F  F0E7         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1289
  6074  00131E  6BE8               	clrf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6075                           
  6076                           ; BSR set to: 0
  6077                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  6078  001320  51E8               	movf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6079  001322  11E7               	iorwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6080  001324  E103               	bnz	l10151
  6081                           
  6082                           ; BSR set to: 0
  6083  001326  0E01               	movlw	1
  6084  001328  6FE8               	movwf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6085  00132A  6BE7               	clrf	vscp_handleProtocolEvent@bytes_1289& (0+255),b
  6086  00132C                     l10151:
  6087                           
  6088                           ; BSR set to: 0
  6089                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  6090  00132C  0E01               	movlw	1
  6091  00132E  5DE7               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6092  001330  0E01               	movlw	1
  6093  001332  59E8               	subwfb	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6094  001334  E307               	bnc	l10157
  6095                           
  6096                           ; BSR set to: 0
  6097  001336  0E01               	movlw	1
  6098  001338  6FE8               	movwf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6099  00133A  0E00               	movlw	0
  6100  00133C  D002               	goto	L18
  6101  00133E                     l10155:
  6102                           
  6103                           ; BSR set to: 0
  6104                           ;vscp_firmware.c: 1173: else {
  6105                           ;vscp_firmware.c: 1174: bytes = 1;
  6106  00133E  6BE8               	clrf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),b
  6107  001340  0E01               	movlw	1
  6108  001342                     L18:
  6109  001342  6FE7               	movwf	vscp_handleProtocolEvent@bytes_1289& (0+255),b
  6110  001344                     l10157:
  6111                           
  6112                           ; BSR set to: 0
  6113                           ;vscp_firmware.c: 1175: }
  6114                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  6115  001344  C052  F0D7         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  6116  001348  C053  F0D8         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  6117                           
  6118                           ; BSR set to: 0
  6119                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  6120  00134C  D8B6               	call	PL28	;call to abstracted procedure
  6121                           
  6122                           ; BSR set to: 0
  6123                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  6124  00134E  0E07               	movlw	7
  6125  001350  6FA4               	movwf	(_vscp_omsg+1)& (0+255),b
  6126                           
  6127                           ; BSR set to: 0
  6128                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  6129                           
  6130                           ; BSR set to: 0
  6131                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  6132                           
  6133                           ; BSR set to: 0
  6134                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  6135                           
  6136                           ; BSR set to: 0
  6137                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  6141  001352  D8BF               	call	PL34	;call to abstracted procedure
  6142  001354                     l10173:
  6143                           
  6144                           ; BSR set to: 0
  6145                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  6146  001354  51E6               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6147  001356  5DE7               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6148  001358  6FD0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6149  00135A  0E00               	movlw	0
  6150  00135C  59E8               	subwfb	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6151  00135E  6FD1               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6152  001360  0E04               	movlw	4
  6153  001362  5DD0               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6154  001364  0E00               	movlw	0
  6155  001366  59D1               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6156  001368  E302               	bnc	l10177
  6157                           
  6158                           ; BSR set to: 0
  6159                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  6160  00136A  0E04               	movlw	4
  6161  00136C  D002               	goto	L19
  6162  00136E                     l10177:
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;vscp_firmware.c: 1198: else {
  6166                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  6167  00136E  51E6               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6168  001370  5DE7               	subwf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6169  001372                     L19:
  6170  001372  6FE1               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  6171                           
  6172                           ; BSR set to: 0
  6173                           ;vscp_firmware.c: 1200: }
  6174                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  6175  001374  51E1               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6176  001376  0F84               	addlw	132
  6177  001378  6FA3               	movwf	_vscp_omsg& (0+255),b
  6178                           
  6179                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  6180                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  6181  00137A  519E               	movf	(_vscp_imsg+9)& (0+255),w,b
  6182  00137C  25E6               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6183  00137E  6FAB               	movwf	(_vscp_omsg+8)& (0+255),b
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  6187  001380  6BE2               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  6188  001382  D00C               	goto	l10185
  6189  001384                     l10181:
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  6193                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  6194  001384  51E2               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6195  001386  0FAC               	addlw	low (_vscp_omsg+9)
  6196  001388  6ED9               	movwf	fsr2l,c
  6197  00138A  6ADA               	clrf	fsr2h,c
  6198  00138C  519E               	movf	(_vscp_imsg+9)& (0+255),w,b
  6199  00138E  25E6               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6200  001390  25E2               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6201  001392  ECD2  F01D         	call	_vscp_readRegister
  6202  001396  6EDF               	movwf	indf2,c
  6203  001398  0100               	movlb	0	; () banked
  6204  00139A  2BE2               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  6205  00139C                     l10185:
  6206                           
  6207                           ; BSR set to: 0
  6208  00139C  51E1               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6209  00139E  5DE2               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6210  0013A0  E3F1               	bnc	l10181
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;vscp_firmware.c: 1211: }
  6214                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  6215  0013A2  EC2F  F01D         	call	_vscp_sendEvent	;wreg free
  6216                           
  6217                           ; BSR set to: 0
  6218                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  6219  0013A6  51E1               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6220  0013A8  27E6               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  6221                           
  6222                           ; BSR set to: 0
  6223                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  6224  0013AA  2BA8               	incf	(_vscp_omsg+5)& (0+255),f,b
  6225                           
  6226                           ; BSR set to: 0
  6227                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  6228  0013AC  51E6               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6229  0013AE  6FD0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6230  0013B0  6BD1               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6231  0013B2  51E7               	movf	vscp_handleProtocolEvent@bytes_1289& (0+255),w,b
  6232  0013B4  5DD0               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6233  0013B6  51E8               	movf	(vscp_handleProtocolEvent@bytes_1289+1)& (0+255),w,b
  6234  0013B8  59D1               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6235  0013BA  E3CC               	bnc	l10173
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  6239  0013BC  C0D7  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  6240  0013C0  C0D8  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  6241  0013C4  D079               	goto	l1285
  6242  0013C6                     l10195:
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  6246  0013C6  5190               	movf	_vscp_nickname& (0+255),w,b
  6247  0013C8  EE20  F09B         	lfsr	2,_vscp_imsg+6
  6248  0013CC  62DF               	cpfseq	indf2,c
  6249  0013CE  D074               	goto	l1285
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;vscp_firmware.c: 1234: uint8_t i;
  6253                           ;vscp_firmware.c: 1235: uint16_t page_save;
  6254                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  6255  0013D0  C052  F0D9         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1294
  6256  0013D4  C053  F0DA         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1294+1
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  6260  0013D8  D870               	call	PL28	;call to abstracted procedure
  6261                           
  6262                           ; BSR set to: 0
  6263                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  6264  0013DA  C09E  F0E3         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1293
  6265                           
  6266                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  6267                           ;vscp_firmware.c: 1248: i++) {
  6268  0013DE  D014               	goto	l10207
  6269  0013E0                     l10203:
  6270                           
  6271                           ; BSR set to: 0
  6272                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  6273                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  6274  0013E0  519E               	movf	(_vscp_imsg+9)& (0+255),w,b
  6275  0013E2  089F               	sublw	low (_vscp_imsg+10)
  6276  0013E4  25E3               	addwf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6277  0013E6  6ED9               	movwf	fsr2l,c
  6278  0013E8  6ADA               	clrf	fsr2h,c
  6279  0013EA  50DF               	movf	indf2,w,c
  6280  0013EC  6FCE               	movwf	?_vscp_writeRegister& (0+255),b
  6281  0013EE  51E3               	movf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6282  0013F0  EC77  F01D         	call	_vscp_writeRegister
  6283  0013F4  0100               	movlb	0	; () banked
  6284  0013F6  6FD0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6285  0013F8  519E               	movf	(_vscp_imsg+9)& (0+255),w,b
  6286  0013FA  08AC               	sublw	low (_vscp_omsg+9)
  6287  0013FC  25E3               	addwf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6288  0013FE  6ED9               	movwf	fsr2l,c
  6289  001400  6ADA               	clrf	fsr2h,c
  6290  001402  C0D0  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  6291                           
  6292                           ; BSR set to: 0
  6293  001406  2BE3               	incf	vscp_handleProtocolEvent@i_1293& (0+255),f,b
  6294  001408                     l10207:
  6295                           
  6296                           ; BSR set to: 0
  6297  001408  5195               	movf	_vscp_imsg& (0+255),w,b
  6298  00140A  0B0F               	andlw	15
  6299  00140C  6FD0               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6300  00140E  6BD1               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6301  001410  519E               	movf	(_vscp_imsg+9)& (0+255),w,b
  6302  001412  27D0               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6303  001414  0E00               	movlw	0
  6304  001416  23D1               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6305  001418  0EFC               	movlw	252
  6306  00141A  25D0               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6307  00141C  6FD2               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  6308  00141E  0EFF               	movlw	255
  6309  001420  21D1               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6310  001422  6FD3               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  6311  001424  51E3               	movf	vscp_handleProtocolEvent@i_1293& (0+255),w,b
  6312  001426  6FD4               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  6313  001428  6BD5               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  6314  00142A  51D5               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  6315  00142C  0A80               	xorlw	128
  6316  00142E  6FD6               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  6317  001430  51D2               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  6318  001432  5DD4               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  6319  001434  51D3               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  6320  001436  0A80               	xorlw	128
  6321  001438  59D6               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  6322  00143A  E3D2               	bnc	l10203
  6323                           
  6324                           ; BSR set to: 0
  6325                           ;vscp_firmware.c: 1251: }
  6326                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  6327  00143C  C0D9  F052         	movff	vscp_handleProtocolEvent@page_save_1294,_vscp_page_select
  6328  001440  C0DA  F053         	movff	vscp_handleProtocolEvent@page_save_1294+1,_vscp_page_select+1
  6329                           
  6330                           ; BSR set to: 0
  6331                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  6332  001444  0E07               	movlw	7
  6333  001446  6FA4               	movwf	(_vscp_omsg+1)& (0+255),b
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  6337  001448  5195               	movf	_vscp_imsg& (0+255),w,b
  6338  00144A  0B0F               	andlw	15
  6339  00144C  0F80               	addlw	128
  6340  00144E  6FA3               	movwf	_vscp_omsg& (0+255),b
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  6344                           
  6345                           ; BSR set to: 0
  6346                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  6347                           
  6348                           ; BSR set to: 0
  6349                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  6350                           
  6351                           ; BSR set to: 0
  6352                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  6356  001450  D840               	call	PL34	;call to abstracted procedure
  6357                           
  6358                           ; BSR set to: 0
  6359                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  6360  001452  C09E  F0AB         	movff	_vscp_imsg+9,_vscp_omsg+8
  6361  001456  D574               	goto	l9837
  6362  001458                     l10229:
  6363                           
  6364                           ; BSR set to: 0
  6365  001458  5199               	movf	(_vscp_imsg+4)& (0+255),w,b
  6366                           
  6367                           ; Switch size 1, requested type "space"
  6368                           ; Number of cases is 16, Range of values is 1 to 38
  6369                           ; switch strategies available:
  6370                           ; Name         Instructions Cycles
  6371                           ; simple_byte           49    25 (average)
  6372                           ;	Chosen strategy is simple_byte
  6373  00145A  0A01               	xorlw	1	; case 1
  6374  00145C  E101 D548          	bz	l9811
  6375  001460  0A03               	xorlw	3	; case 2
  6376  001462  E101 D548          	bz	l9813
  6377  001466  0A04               	xorlw	4	; case 6
  6378  001468  E101 D548          	bz	l9815
  6379  00146C  0A0E               	xorlw	14	; case 8
  6380  00146E  E101 D548          	bz	l9817
  6381  001472  0A01               	xorlw	1	; case 9
  6382  001474  E101 D548          	bz	l9819
  6383  001478  0A02               	xorlw	2	; case 11
  6384  00147A  E101 D568          	bz	l9853
  6385  00147E  0A07               	xorlw	7	; case 12
  6386  001480  E101 D57E          	bz	l9887
  6387  001484  0A1B               	xorlw	27	; case 23
  6388  001486  E101 D613          	bz	l9945
  6389  00148A  0A0F               	xorlw	15	; case 24
  6390  00148C  E101 D627          	bz	l9951
  6391  001490  0A01               	xorlw	1	; case 25
  6392  001492  E101 D677          	bz	l9985
  6393  001496  0A04               	xorlw	4	; case 29
  6394  001498  E101 D6A0          	bz	l10011
  6395  00149C  0A03               	xorlw	3	; case 30
  6396  00149E  E101 D6AD          	bz	l10027
  6397  0014A2  0A01               	xorlw	1	; case 31
  6398  0014A4  E101 D6BA          	bz	l10043
  6399  0014A8  0A3E               	xorlw	62	; case 33
  6400  0014AA  E101 D718          	bz	l10129
  6401  0014AE  0A04               	xorlw	4	; case 37
  6402  0014B0  E101 D726          	bz	l10139
  6403  0014B4  0A03               	xorlw	3	; case 38
  6404  0014B6  E087               	bz	l10195
  6405  0014B8                     l1285:
  6406  0014B8  0012               	return	
  6407  0014BA                     __end_of_vscp_handleProtocolEvent:
  6408                           	opt stack 0
  6409  0014BA                     PL28:
  6410                           	opt stack 21
  6411  0014BA  519D               	movf	(_vscp_imsg+8)& (0+255),w,b
  6412  0014BC  C09C  F0D0         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6413  0014C0  6BD1               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6414  0014C2  C0D0  F0D1         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6415  0014C6  6BD0               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6416  0014C8  11D0               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6417  0014CA  6E52               	movwf	_vscp_page_select,c
  6418  0014CC  51D1               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6419  0014CE  6E53               	movwf	_vscp_page_select+1,c
  6420  0014D0  0012               	return	
  6421  0014D2                     __end_ofPL28:
  6422                           	opt stack 0
  6423  0014D2                     PL34:
  6424                           	opt stack 21
  6425  0014D2  6BA5               	clrf	(_vscp_omsg+2)& (0+255),b
  6426  0014D4  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
  6427  0014D6  0E27               	movlw	39
  6428  0014D8  6FA7               	movwf	(_vscp_omsg+4)& (0+255),b
  6429  0014DA  6BA8               	clrf	(_vscp_omsg+5)& (0+255),b
  6430  0014DC  C09C  F0A9         	movff	_vscp_imsg+7,_vscp_omsg+6
  6431  0014E0  C09D  F0AA         	movff	_vscp_imsg+8,_vscp_omsg+7
  6432  0014E4  0012               	return	
  6433  0014E6                     __end_ofPL34:
  6434                           	opt stack 0
  6435  0014E6                     PL70:
  6436                           	opt stack 21
  6437  0014E6  0E07               	movlw	7
  6438  0014E8  6FA4               	movwf	(_vscp_omsg+1)& (0+255),b
  6439  0014EA  6BA5               	clrf	(_vscp_omsg+2)& (0+255),b
  6440  0014EC  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
  6441  0014EE  0E1A               	movlw	26
  6442  0014F0  6FA7               	movwf	(_vscp_omsg+4)& (0+255),b
  6443  0014F2  0C1A               	retlw	26
  6444  0014F4                     __end_ofPL70:
  6445                           	opt stack 0
  6446  0014F4                     PL80:
  6447                           	opt stack 21
  6448  0014F4  C0E9  F0A8         	movff	vscp_handleProtocolEvent@i_1285,_vscp_omsg+5
  6449  0014F8  0E01               	movlw	1
  6450  0014FA  6FEB               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  6451  0014FC  0C01               	retlw	1
  6452  0014FE                     __end_ofPL80:
  6453                           	opt stack 0
  6454                           tblptru	equ	0xFF8
  6455                           tblptrh	equ	0xFF7
  6456                           tblptrl	equ	0xFF6
  6457                           tablat	equ	0xFF5
  6458                           prodh	equ	0xFF4
  6459                           prodl	equ	0xFF3
  6460                           intcon	equ	0xFF2
  6461                           postinc0	equ	0xFEE
  6462                           wreg	equ	0xFE8
  6463                           indf1	equ	0xFE7
  6464                           fsr1h	equ	0xFE2
  6465                           fsr1l	equ	0xFE1
  6466                           indf2	equ	0xFDF
  6467                           postinc2	equ	0xFDE
  6468                           postdec2	equ	0xFDD
  6469                           plusw2	equ	0xFDB
  6470                           fsr2h	equ	0xFDA
  6471                           fsr2l	equ	0xFD9
  6472                           status	equ	0xFD8
  6473                           
  6474 ;; *************** function ___lbmod *****************
  6475 ;; Defined at:
  6476 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;  dividend        1    wreg     unsigned char 
  6479 ;;  divisor         1    7[COMRAM] unsigned char 
  6480 ;; Auto vars:     Size  Location     Type
  6481 ;;  dividend        1    8[COMRAM] unsigned char 
  6482 ;;  rem             1   10[COMRAM] unsigned char 
  6483 ;;  counter         1    9[COMRAM] unsigned char 
  6484 ;; Return value:  Size  Location     Type
  6485 ;;                  1    wreg      unsigned char 
  6486 ;; Registers used:
  6487 ;;		wreg, status,2, status,0
  6488 ;; Tracked objects:
  6489 ;;		On entry : F/0
  6490 ;;		On exit  : 0/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6493 ;;      Params:         1       0       0       0       0       0       0
  6494 ;;      Locals:         3       0       0       0       0       0       0
  6495 ;;      Temps:          0       0       0       0       0       0       0
  6496 ;;      Totals:         4       0       0       0       0       0       0
  6497 ;;Total ram usage:        4 bytes
  6498 ;; Hardware stack levels used:    1
  6499 ;; Hardware stack levels required when called:    2
  6500 ;; This function calls:
  6501 ;;		Nothing
  6502 ;; This function is called by:
  6503 ;;		_vscp_handleProtocolEvent
  6504 ;; This function uses a non-reentrant model
  6505 ;;
  6506                           
  6507                           	psect	text16
  6508  0039C4                     __ptext16:
  6509                           	opt stack 0
  6510  0039C4                     ___lbmod:
  6511                           	opt stack 27
  6512                           
  6513                           ;incstack = 0
  6514                           ;incstack = 0
  6515                           ;___lbmod@dividend stored from wreg
  6516  0039C4  CFE8 F009          	movff	wreg,___lbmod@dividend
  6517                           
  6518                           ; BSR set to: 0
  6519  0039C8  0E08               	movlw	8
  6520  0039CA  6E0A               	movwf	___lbmod@counter,c
  6521                           
  6522                           ; BSR set to: 0
  6523  0039CC  6A0B               	clrf	___lbmod@rem,c
  6524  0039CE                     l7485:
  6525  0039CE  90D8               	bcf	status,0,c
  6526  0039D0  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  6527  0039D2  340B               	rlcf	___lbmod@rem& (0+255),w,c
  6528  0039D4  6E0B               	movwf	___lbmod@rem,c
  6529  0039D6  90D8               	bcf	status,0,c
  6530  0039D8  3609               	rlcf	___lbmod@dividend,f,c
  6531  0039DA  5008               	movf	___lbmod@divisor,w,c
  6532  0039DC  5C0B               	subwf	___lbmod@rem,w,c
  6533  0039DE  E302               	bnc	l7493
  6534  0039E0  5008               	movf	___lbmod@divisor,w,c
  6535  0039E2  5E0B               	subwf	___lbmod@rem,f,c
  6536  0039E4                     l7493:
  6537  0039E4  2E0A               	decfsz	___lbmod@counter,f,c
  6538  0039E6  D7F3               	goto	l7485
  6539  0039E8  500B               	movf	___lbmod@rem,w,c
  6540  0039EA  0012               	return	
  6541  0039EC                     __end_of___lbmod:
  6542                           	opt stack 0
  6543                           tblptru	equ	0xFF8
  6544                           tblptrh	equ	0xFF7
  6545                           tblptrl	equ	0xFF6
  6546                           tablat	equ	0xFF5
  6547                           prodh	equ	0xFF4
  6548                           prodl	equ	0xFF3
  6549                           intcon	equ	0xFF2
  6550                           postinc0	equ	0xFEE
  6551                           wreg	equ	0xFE8
  6552                           indf1	equ	0xFE7
  6553                           fsr1h	equ	0xFE2
  6554                           fsr1l	equ	0xFE1
  6555                           indf2	equ	0xFDF
  6556                           postinc2	equ	0xFDE
  6557                           postdec2	equ	0xFDD
  6558                           plusw2	equ	0xFDB
  6559                           fsr2h	equ	0xFDA
  6560                           fsr2l	equ	0xFD9
  6561                           status	equ	0xFD8
  6562                           
  6563 ;; *************** function _vscp_writeRegister *****************
  6564 ;; Defined at:
  6565 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  6566 ;; Parameters:    Size  Location     Type
  6567 ;;  reg             1    wreg     unsigned char 
  6568 ;;  value           1   30[BANK0 ] unsigned char 
  6569 ;; Auto vars:     Size  Location     Type
  6570 ;;  reg             1   31[BANK0 ] unsigned char 
  6571 ;; Return value:  Size  Location     Type
  6572 ;;                  1    wreg      unsigned char 
  6573 ;; Registers used:
  6574 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6575 ;; Tracked objects:
  6576 ;;		On entry : F/0
  6577 ;;		On exit  : 0/0
  6578 ;;		Unchanged: 0/0
  6579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6580 ;;      Params:         0       1       0       0       0       0       0
  6581 ;;      Locals:         0       1       0       0       0       0       0
  6582 ;;      Temps:          0       0       0       0       0       0       0
  6583 ;;      Totals:         0       2       0       0       0       0       0
  6584 ;;Total ram usage:        2 bytes
  6585 ;; Hardware stack levels used:    1
  6586 ;; Hardware stack levels required when called:    8
  6587 ;; This function calls:
  6588 ;;		_vscp_writeAppReg
  6589 ;;		_vscp_writeStdReg
  6590 ;; This function is called by:
  6591 ;;		_vscp_handleProtocolEvent
  6592 ;; This function uses a non-reentrant model
  6593 ;;
  6594                           
  6595                           	psect	text17
  6596  003AEE                     __ptext17:
  6597                           	opt stack 0
  6598  003AEE                     _vscp_writeRegister:
  6599                           	opt stack 21
  6600                           
  6601                           ;incstack = 0
  6602                           ;incstack = 0
  6603                           ;vscp_writeRegister@reg stored from wreg
  6604  003AEE  CFE8 F0CF          	movff	wreg,vscp_writeRegister@reg
  6605                           
  6606                           ; BSR set to: 0
  6607                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  6608  003AF2  0E7F               	movlw	127
  6609  003AF4  65CF               	cpfsgt	vscp_writeRegister@reg& (0+255),b
  6610  003AF6  D006               	goto	l11083
  6611                           
  6612                           ; BSR set to: 0
  6613                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  6614  003AF8  C0CE  F010         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  6615  003AFC  51CF               	movf	vscp_writeRegister@reg& (0+255),w,b
  6616  003AFE  ECBB  F017         	call	_vscp_writeStdReg
  6617  003B02  D005               	goto	l1165
  6618  003B04                     l11083:
  6619                           
  6620                           ; BSR set to: 0
  6621                           ;vscp_firmware.c: 705: else {
  6622                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  6623  003B04  C0CE  F051         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  6624  003B08  51CF               	movf	vscp_writeRegister@reg& (0+255),w,b
  6625  003B0A  EC11  F003         	call	_vscp_writeAppReg
  6626  003B0E                     l1165:
  6627  003B0E  0012               	return	
  6628  003B10                     __end_of_vscp_writeRegister:
  6629                           	opt stack 0
  6630                           tblptru	equ	0xFF8
  6631                           tblptrh	equ	0xFF7
  6632                           tblptrl	equ	0xFF6
  6633                           tablat	equ	0xFF5
  6634                           prodh	equ	0xFF4
  6635                           prodl	equ	0xFF3
  6636                           intcon	equ	0xFF2
  6637                           postinc0	equ	0xFEE
  6638                           wreg	equ	0xFE8
  6639                           indf1	equ	0xFE7
  6640                           fsr1h	equ	0xFE2
  6641                           fsr1l	equ	0xFE1
  6642                           indf2	equ	0xFDF
  6643                           postinc2	equ	0xFDE
  6644                           postdec2	equ	0xFDD
  6645                           plusw2	equ	0xFDB
  6646                           fsr2h	equ	0xFDA
  6647                           fsr2l	equ	0xFD9
  6648                           status	equ	0xFD8
  6649                           
  6650 ;; *************** function _vscp_writeStdReg *****************
  6651 ;; Defined at:
  6652 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  6653 ;; Parameters:    Size  Location     Type
  6654 ;;  reg             1    wreg     unsigned char 
  6655 ;;  value           1   15[COMRAM] unsigned char 
  6656 ;; Auto vars:     Size  Location     Type
  6657 ;;  reg             1   21[COMRAM] unsigned char 
  6658 ;;  rv              1   20[COMRAM] unsigned char 
  6659 ;; Return value:  Size  Location     Type
  6660 ;;                  1    wreg      unsigned char 
  6661 ;; Registers used:
  6662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6663 ;; Tracked objects:
  6664 ;;		On entry : F/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6668 ;;      Params:         1       0       0       0       0       0       0
  6669 ;;      Locals:         2       0       0       0       0       0       0
  6670 ;;      Temps:          4       0       0       0       0       0       0
  6671 ;;      Totals:         7       0       0       0       0       0       0
  6672 ;;Total ram usage:        7 bytes
  6673 ;; Hardware stack levels used:    1
  6674 ;; Hardware stack levels required when called:    5
  6675 ;; This function calls:
  6676 ;;		_vscp_setGUID
  6677 ;;		_vscp_setManufacturerId
  6678 ;;		_vscp_getGUID
  6679 ;;		_vscp_getUserID
  6680 ;;		_vscp_setUserID
  6681 ;;		_vscp_getManufacturerId
  6682 ;;		_vscp_restoreDefaults
  6683 ;; This function is called by:
  6684 ;;		_vscp_writeRegister
  6685 ;;		_vscp_handleProtocolEvent
  6686 ;; This function uses a non-reentrant model
  6687 ;;
  6688                           
  6689                           	psect	text18
  6690  002F76                     __ptext18:
  6691                           	opt stack 0
  6692  002F76                     _vscp_writeStdReg:
  6693                           	opt stack 24
  6694                           
  6695                           ;incstack = 0
  6696                           ;incstack = 0
  6697                           ;vscp_writeStdReg@reg stored from wreg
  6698  002F76  CFE8 F016          	movff	wreg,vscp_writeStdReg@reg
  6699                           
  6700                           ; BSR set to: 0
  6701                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  6702  002F7A  1C10               	comf	vscp_writeStdReg@value,w,c
  6703  002F7C  6E15               	movwf	vscp_writeStdReg@rv,c
  6704                           
  6705                           ; BSR set to: 0
  6706                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  6707                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  6708  002F7E  0E83               	movlw	131
  6709  002F80  6416               	cpfsgt	vscp_writeStdReg@reg,c
  6710  002F82  D00E               	goto	l9645
  6711                           
  6712                           ; BSR set to: 0
  6713  002F84  0E89               	movlw	137
  6714  002F86  6016               	cpfslt	vscp_writeStdReg@reg,c
  6715  002F88  D00B               	goto	l9645
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  6719  002F8A  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  6720  002F8E  5016               	movf	vscp_writeStdReg@reg,w,c
  6721  002F90  0F7C               	addlw	124
  6722  002F92  ECB6  F01D         	call	_vscp_setUserID
  6723                           
  6724                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  6725  002F96  5016               	movf	vscp_writeStdReg@reg,w,c
  6726  002F98  0F7C               	addlw	124
  6727  002F9A  EC22  F01E         	call	_vscp_getUserID
  6728  002F9E  D069               	goto	L25
  6729  002FA0                     l9645:
  6730                           
  6731                           ; BSR set to: 0
  6732                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  6733  002FA0  5016               	movf	vscp_writeStdReg@reg,w,c
  6734  002FA2  0A92               	xorlw	146
  6735  002FA4  E10D               	bnz	l9651
  6736                           
  6737                           ; BSR set to: 0
  6738                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  6739  002FA6  5010               	movf	vscp_writeStdReg@value,w,c
  6740  002FA8  6E12               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6741  002FAA  6A11               	clrf	??_vscp_writeStdReg& (0+255),c
  6742  002FAC  5052               	movf	_vscp_page_select,w,c
  6743  002FAE  6E13               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  6744  002FB0  6A14               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  6745  002FB2  1011               	iorwf	??_vscp_writeStdReg,w,c
  6746  002FB4  6E52               	movwf	_vscp_page_select,c
  6747  002FB6  5012               	movf	??_vscp_writeStdReg+1,w,c
  6748  002FB8  1014               	iorwf	??_vscp_writeStdReg+3,w,c
  6749  002FBA  6E53               	movwf	_vscp_page_select+1,c
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  6753  002FBC  5053               	movf	_vscp_page_select+1,w,c
  6754  002FBE  D059               	goto	L25
  6755  002FC0                     l9651:
  6756                           
  6757                           ; BSR set to: 0
  6758                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  6759  002FC0  5016               	movf	vscp_writeStdReg@reg,w,c
  6760  002FC2  0A93               	xorlw	147
  6761  002FC4  E10B               	bnz	l9657
  6762                           
  6763                           ; BSR set to: 0
  6764                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  6765  002FC6  6A11               	clrf	??_vscp_writeStdReg& (0+255),c
  6766  002FC8  5053               	movf	_vscp_page_select+1,w,c
  6767  002FCA  6E12               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6768  002FCC  5010               	movf	vscp_writeStdReg@value,w,c
  6769  002FCE  1011               	iorwf	??_vscp_writeStdReg,w,c
  6770  002FD0  6E52               	movwf	_vscp_page_select,c
  6771  002FD2  5012               	movf	??_vscp_writeStdReg+1,w,c
  6772  002FD4  6E53               	movwf	_vscp_page_select+1,c
  6773                           
  6774                           ; BSR set to: 0
  6775                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  6776  002FD6  C052  F015         	movff	_vscp_page_select,vscp_writeStdReg@rv
  6777                           
  6778                           ;vscp_firmware.c: 737: }
  6779  002FDA  D04E               	goto	l9699
  6780  002FDC                     l9657:
  6781                           
  6782                           ; BSR set to: 0
  6783                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  6784  002FDC  0E88               	movlw	136
  6785  002FDE  6416               	cpfsgt	vscp_writeStdReg@reg,c
  6786  002FE0  D019               	goto	l9669
  6787                           
  6788                           ; BSR set to: 0
  6789  002FE2  0E91               	movlw	145
  6790  002FE4  6016               	cpfslt	vscp_writeStdReg@reg,c
  6791  002FE6  D016               	goto	l9669
  6792                           
  6793                           ; BSR set to: 0
  6794                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6795                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  6796  002FE8  C053  F011         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6797  002FEC  C011  F012         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6798  002FF0  6A13               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6799  002FF2  2812               	incf	??_vscp_writeStdReg+1,w,c
  6800  002FF4  E102               	bnz	l9665
  6801                           
  6802                           ; BSR set to: 0
  6803  002FF6  2852               	incf	_vscp_page_select,w,c
  6804  002FF8  E002               	bz	l9667
  6805  002FFA                     l9665:
  6806                           
  6807                           ; BSR set to: 0
  6808                           ;vscp_firmware.c: 747: rv = ~value;
  6809  002FFA  1C10               	comf	vscp_writeStdReg@value,w,c
  6810  002FFC  D03A               	goto	L25
  6811  002FFE                     l9667:
  6812                           
  6813                           ; BSR set to: 0
  6814                           ;vscp_firmware.c: 749: else {
  6815                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  6816  002FFE  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  6817  003002  5016               	movf	vscp_writeStdReg@reg,w,c
  6818  003004  0F77               	addlw	119
  6819  003006  EC09  F01D         	call	_vscp_setManufacturerId
  6820                           
  6821                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  6822  00300A  5016               	movf	vscp_writeStdReg@reg,w,c
  6823  00300C  0F77               	addlw	119
  6824  00300E  EC18  F01E         	call	_vscp_getManufacturerId
  6825  003012  D02F               	goto	L25
  6826  003014                     l9669:
  6827                           
  6828                           ; BSR set to: 0
  6829                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  6830  003014  0ECF               	movlw	207
  6831  003016  6416               	cpfsgt	vscp_writeStdReg@reg,c
  6832  003018  D017               	goto	l9681
  6833                           
  6834                           ; BSR set to: 0
  6835  00301A  0EE0               	movlw	224
  6836  00301C  6016               	cpfslt	vscp_writeStdReg@reg,c
  6837  00301E  D014               	goto	l9681
  6838                           
  6839                           ; BSR set to: 0
  6840                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6841                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  6842  003020  C053  F011         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6843  003024  C011  F012         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6844  003028  6A13               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6845  00302A  2812               	incf	??_vscp_writeStdReg+1,w,c
  6846  00302C  E1E6               	bnz	l9665
  6847                           
  6848                           ; BSR set to: 0
  6849  00302E  2852               	incf	_vscp_page_select,w,c
  6850  003030  E1E4               	bnz	l9665
  6851                           
  6852                           ; BSR set to: 0
  6853                           ;vscp_firmware.c: 762: else {
  6854                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  6855  003032  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  6856  003036  5016               	movf	vscp_writeStdReg@reg,w,c
  6857  003038  0F30               	addlw	48
  6858  00303A  EC1C  F01D         	call	_vscp_setGUID
  6859                           
  6860                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  6861  00303E  5016               	movf	vscp_writeStdReg@reg,w,c
  6862  003040  0F30               	addlw	48
  6863  003042  EC2C  F01E         	call	_vscp_getGUID
  6864  003046  D015               	goto	L25
  6865  003048                     l9681:
  6866                           
  6867                           ; BSR set to: 0
  6868                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  6869  003048  5016               	movf	vscp_writeStdReg@reg,w,c
  6870  00304A  0AA2               	xorlw	162
  6871  00304C  E1D6               	bnz	l9665
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  6875  00304E  5010               	movf	vscp_writeStdReg@value,w,c
  6876  003050  0A55               	xorlw	85
  6877  003052  E104               	bnz	l9689
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  6881  003054  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
  6882  003056  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  6883                           
  6884                           ; BSR set to: 0
  6885                           ;vscp_firmware.c: 771: rv = 0x55;
  6886  003058  0E55               	movlw	85
  6887  00305A  D00B               	goto	L25
  6888  00305C                     l9689:
  6889                           
  6890                           ; BSR set to: 0
  6891                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  6892  00305C  5010               	movf	vscp_writeStdReg@value,w,c
  6893  00305E  0AAA               	xorlw	170
  6894  003060  E10B               	bnz	l9699
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  6898  003062  0EE8               	movlw	232
  6899  003064  5D84               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  6900  003066  0E03               	movlw	3
  6901  003068  5985               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  6902  00306A  E205               	bc	l1191
  6903                           
  6904                           ; BSR set to: 0
  6905                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  6906  00306C  EC6F  F01E         	call	_vscp_restoreDefaults	;wreg free
  6907                           
  6908                           ;vscp_firmware.c: 776: rv = 0xaa;
  6909  003070  0EAA               	movlw	170
  6910  003072                     L25:
  6911  003072  6E15               	movwf	vscp_writeStdReg@rv,c
  6912                           
  6913                           ;vscp_firmware.c: 777: }
  6914  003074  D001               	goto	l9699
  6915  003076                     l1191:
  6916                           
  6917                           ; BSR set to: 0
  6918                           ;vscp_firmware.c: 778: else {
  6919                           ;vscp_firmware.c: 779: rv = 0;
  6920  003076  6A15               	clrf	vscp_writeStdReg@rv,c
  6921  003078                     l9699:
  6922                           
  6923                           ;vscp_firmware.c: 787: }
  6924                           ;vscp_firmware.c: 789: return rv;
  6925  003078  5015               	movf	vscp_writeStdReg@rv,w,c
  6926  00307A  0012               	return	
  6927  00307C                     __end_of_vscp_writeStdReg:
  6928                           	opt stack 0
  6929                           tblptru	equ	0xFF8
  6930                           tblptrh	equ	0xFF7
  6931                           tblptrl	equ	0xFF6
  6932                           tablat	equ	0xFF5
  6933                           prodh	equ	0xFF4
  6934                           prodl	equ	0xFF3
  6935                           intcon	equ	0xFF2
  6936                           postinc0	equ	0xFEE
  6937                           wreg	equ	0xFE8
  6938                           indf1	equ	0xFE7
  6939                           fsr1h	equ	0xFE2
  6940                           fsr1l	equ	0xFE1
  6941                           indf2	equ	0xFDF
  6942                           postinc2	equ	0xFDE
  6943                           postdec2	equ	0xFDD
  6944                           plusw2	equ	0xFDB
  6945                           fsr2h	equ	0xFDA
  6946                           fsr2l	equ	0xFD9
  6947                           status	equ	0xFD8
  6948                           
  6949 ;; *************** function _vscp_restoreDefaults *****************
  6950 ;; Defined at:
  6951 ;;		line 2514 in file "../main.c"
  6952 ;; Parameters:    Size  Location     Type
  6953 ;;		None
  6954 ;; Auto vars:     Size  Location     Type
  6955 ;;		None
  6956 ;; Return value:  Size  Location     Type
  6957 ;;		None               void
  6958 ;; Registers used:
  6959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6960 ;; Tracked objects:
  6961 ;;		On entry : F/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6965 ;;      Params:         0       0       0       0       0       0       0
  6966 ;;      Locals:         0       0       0       0       0       0       0
  6967 ;;      Temps:          0       0       0       0       0       0       0
  6968 ;;      Totals:         0       0       0       0       0       0       0
  6969 ;;Total ram usage:        0 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; Hardware stack levels required when called:    4
  6972 ;; This function calls:
  6973 ;;		_init_app_eeprom
  6974 ;;		_init_app_ram
  6975 ;; This function is called by:
  6976 ;;		_vscp_writeStdReg
  6977 ;; This function uses a non-reentrant model
  6978 ;;
  6979                           
  6980                           	psect	text19
  6981  003CDE                     __ptext19:
  6982                           	opt stack 0
  6983  003CDE                     _vscp_restoreDefaults:
  6984                           	opt stack 24
  6985                           
  6986                           ; BSR set to: 0
  6987                           ;main.c: 2515: init_app_eeprom();
  6988                           
  6989                           ;incstack = 0
  6990                           ;incstack = 0
  6991  003CDE  EC7F  F00A         	call	_init_app_eeprom	;wreg free
  6992                           
  6993                           ;main.c: 2516: init_app_ram();
  6994  003CE2  EF3E  F018         	goto	_init_app_ram	;wreg free
  6995  003CE6                     __end_of_vscp_restoreDefaults:
  6996                           	opt stack 0
  6997                           tblptru	equ	0xFF8
  6998                           tblptrh	equ	0xFF7
  6999                           tblptrl	equ	0xFF6
  7000                           tablat	equ	0xFF5
  7001                           prodh	equ	0xFF4
  7002                           prodl	equ	0xFF3
  7003                           intcon	equ	0xFF2
  7004                           postinc0	equ	0xFEE
  7005                           wreg	equ	0xFE8
  7006                           indf1	equ	0xFE7
  7007                           fsr1h	equ	0xFE2
  7008                           fsr1l	equ	0xFE1
  7009                           indf2	equ	0xFDF
  7010                           postinc2	equ	0xFDE
  7011                           postdec2	equ	0xFDD
  7012                           plusw2	equ	0xFDB
  7013                           fsr2h	equ	0xFDA
  7014                           fsr2l	equ	0xFD9
  7015                           status	equ	0xFD8
  7016                           
  7017 ;; *************** function _init_app_eeprom *****************
  7018 ;; Defined at:
  7019 ;;		line 478 in file "../main.c"
  7020 ;; Parameters:    Size  Location     Type
  7021 ;;		None
  7022 ;; Auto vars:     Size  Location     Type
  7023 ;;  j               1   14[COMRAM] unsigned char 
  7024 ;;  i               1   13[COMRAM] unsigned char 
  7025 ;; Return value:  Size  Location     Type
  7026 ;;		None               void
  7027 ;; Registers used:
  7028 ;;		wreg, status,2, status,0, cstack
  7029 ;; Tracked objects:
  7030 ;;		On entry : 0/0
  7031 ;;		On exit  : 0/0
  7032 ;;		Unchanged: 0/0
  7033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7034 ;;      Params:         0       0       0       0       0       0       0
  7035 ;;      Locals:         2       0       0       0       0       0       0
  7036 ;;      Temps:          2       0       0       0       0       0       0
  7037 ;;      Totals:         4       0       0       0       0       0       0
  7038 ;;Total ram usage:        4 bytes
  7039 ;; Hardware stack levels used:    1
  7040 ;; Hardware stack levels required when called:    3
  7041 ;; This function calls:
  7042 ;;		_Busy_eep
  7043 ;;		_Write_b_eep
  7044 ;; This function is called by:
  7045 ;;		_main
  7046 ;;		_vscp_restoreDefaults
  7047 ;; This function uses a non-reentrant model
  7048 ;;
  7049                           
  7050                           	psect	text20
  7051  0014FE                     __ptext20:
  7052                           	opt stack 0
  7053  0014FE                     _init_app_eeprom:
  7054                           	opt stack 24
  7055                           
  7056                           ;main.c: 479: unsigned char i, j;
  7057                           ;main.c: 481: (Busy_eep(), Write_b_eep(0x43 + 0,0));
  7058                           
  7059                           ;incstack = 0
  7060                           ;incstack = 0
  7061  0014FE  EC73  F01E         	call	_Busy_eep	;wreg free
  7062  001502  6A09               	clrf	?_Write_b_eep+1,c
  7063  001504  0E43               	movlw	67
  7064  001506  6E08               	movwf	?_Write_b_eep,c
  7065  001508  0E00               	movlw	0
  7066  00150A  6A0A               	clrf	?_Write_b_eep+2,c
  7067  00150C  EC59  F01C         	call	_Write_b_eep	;wreg free
  7068                           
  7069                           ;main.c: 482: (Busy_eep(), Write_b_eep(0x43 + 1,0));
  7070  001510  EC73  F01E         	call	_Busy_eep	;wreg free
  7071  001514  6A09               	clrf	?_Write_b_eep+1,c
  7072  001516  0E44               	movlw	68
  7073  001518  6E08               	movwf	?_Write_b_eep,c
  7074  00151A  0E00               	movlw	0
  7075  00151C  6A0A               	clrf	?_Write_b_eep+2,c
  7076  00151E  EC59  F01C         	call	_Write_b_eep	;wreg free
  7077                           
  7078                           ;main.c: 484: (Busy_eep(), Write_b_eep(0x43 + 10,0x08 | 0x10 | 0x80));
  7079  001522  EC73  F01E         	call	_Busy_eep	;wreg free
  7080  001526  6A09               	clrf	?_Write_b_eep+1,c
  7081  001528  0E4D               	movlw	77
  7082  00152A  6E08               	movwf	?_Write_b_eep,c
  7083  00152C  0E98               	movlw	152
  7084  00152E  6E0A               	movwf	?_Write_b_eep+2,c
  7085  001530  EC59  F01C         	call	_Write_b_eep	;wreg free
  7086                           
  7087                           ;main.c: 489: (Busy_eep(), Write_b_eep(0x43 + 11,0x08 | 0x10 | 0x80));
  7088  001534  EC73  F01E         	call	_Busy_eep	;wreg free
  7089  001538  6A09               	clrf	?_Write_b_eep+1,c
  7090  00153A  0E4E               	movlw	78
  7091  00153C  6E08               	movwf	?_Write_b_eep,c
  7092  00153E  0E98               	movlw	152
  7093  001540  6E0A               	movwf	?_Write_b_eep+2,c
  7094  001542  EC59  F01C         	call	_Write_b_eep	;wreg free
  7095                           
  7096                           ;main.c: 494: (Busy_eep(), Write_b_eep(0x43 + 12,0x08 | 0x10 | 0x80));
  7097  001546  EC73  F01E         	call	_Busy_eep	;wreg free
  7098  00154A  6A09               	clrf	?_Write_b_eep+1,c
  7099  00154C  0E4F               	movlw	79
  7100  00154E  6E08               	movwf	?_Write_b_eep,c
  7101  001550  0E98               	movlw	152
  7102  001552  6E0A               	movwf	?_Write_b_eep+2,c
  7103  001554  EC59  F01C         	call	_Write_b_eep	;wreg free
  7104                           
  7105                           ;main.c: 499: (Busy_eep(), Write_b_eep(0x43 + 13,0x08 | 0x10 | 0x80));
  7106  001558  EC73  F01E         	call	_Busy_eep	;wreg free
  7107  00155C  6A09               	clrf	?_Write_b_eep+1,c
  7108  00155E  0E50               	movlw	80
  7109  001560  6E08               	movwf	?_Write_b_eep,c
  7110  001562  0E98               	movlw	152
  7111  001564  6E0A               	movwf	?_Write_b_eep+2,c
  7112  001566  EC59  F01C         	call	_Write_b_eep	;wreg free
  7113                           
  7114                           ;main.c: 504: (Busy_eep(), Write_b_eep(0x43 + 14,0x08 | 0x10 | 0x80));
  7115  00156A  EC73  F01E         	call	_Busy_eep	;wreg free
  7116  00156E  6A09               	clrf	?_Write_b_eep+1,c
  7117  001570  0E51               	movlw	81
  7118  001572  6E08               	movwf	?_Write_b_eep,c
  7119  001574  0E98               	movlw	152
  7120  001576  6E0A               	movwf	?_Write_b_eep+2,c
  7121  001578  EC59  F01C         	call	_Write_b_eep	;wreg free
  7122                           
  7123                           ;main.c: 509: (Busy_eep(), Write_b_eep(0x43 + 15,0x08 | 0x10 | 0x80));
  7124  00157C  EC73  F01E         	call	_Busy_eep	;wreg free
  7125  001580  6A09               	clrf	?_Write_b_eep+1,c
  7126  001582  0E52               	movlw	82
  7127  001584  6E08               	movwf	?_Write_b_eep,c
  7128  001586  0E98               	movlw	152
  7129  001588  6E0A               	movwf	?_Write_b_eep+2,c
  7130  00158A  EC59  F01C         	call	_Write_b_eep	;wreg free
  7131                           
  7132                           ;main.c: 514: (Busy_eep(), Write_b_eep(0x43 + 16,0x08 | 0x10 | 0x80));
  7133  00158E  EC73  F01E         	call	_Busy_eep	;wreg free
  7134  001592  6A09               	clrf	?_Write_b_eep+1,c
  7135  001594  0E53               	movlw	83
  7136  001596  6E08               	movwf	?_Write_b_eep,c
  7137  001598  0E98               	movlw	152
  7138  00159A  6E0A               	movwf	?_Write_b_eep+2,c
  7139  00159C  EC59  F01C         	call	_Write_b_eep	;wreg free
  7140                           
  7141                           ;main.c: 519: (Busy_eep(), Write_b_eep(0x43 + 17,0x08 | 0x10 | 0x80));
  7142  0015A0  EC73  F01E         	call	_Busy_eep	;wreg free
  7143  0015A4  6A09               	clrf	?_Write_b_eep+1,c
  7144  0015A6  0E54               	movlw	84
  7145  0015A8  6E08               	movwf	?_Write_b_eep,c
  7146  0015AA  0E98               	movlw	152
  7147  0015AC  6E0A               	movwf	?_Write_b_eep+2,c
  7148  0015AE  EC59  F01C         	call	_Write_b_eep	;wreg free
  7149                           
  7150                           ;main.c: 524: (Busy_eep(), Write_b_eep(0x43 + 18,0));
  7151  0015B2  EC73  F01E         	call	_Busy_eep	;wreg free
  7152  0015B6  6A09               	clrf	?_Write_b_eep+1,c
  7153  0015B8  0E55               	movlw	85
  7154  0015BA  6E08               	movwf	?_Write_b_eep,c
  7155  0015BC  0E00               	movlw	0
  7156  0015BE  6A0A               	clrf	?_Write_b_eep+2,c
  7157  0015C0  EC59  F01C         	call	_Write_b_eep	;wreg free
  7158                           
  7159                           ;main.c: 525: (Busy_eep(), Write_b_eep(0x43 + 19,0));
  7160  0015C4  EC73  F01E         	call	_Busy_eep	;wreg free
  7161  0015C8  6A09               	clrf	?_Write_b_eep+1,c
  7162  0015CA  0E56               	movlw	86
  7163  0015CC  6E08               	movwf	?_Write_b_eep,c
  7164  0015CE  0E00               	movlw	0
  7165  0015D0  6A0A               	clrf	?_Write_b_eep+2,c
  7166  0015D2  EC59  F01C         	call	_Write_b_eep	;wreg free
  7167                           
  7168                           ;main.c: 526: (Busy_eep(), Write_b_eep(0x43 + 20,0));
  7169  0015D6  EC73  F01E         	call	_Busy_eep	;wreg free
  7170  0015DA  6A09               	clrf	?_Write_b_eep+1,c
  7171  0015DC  0E57               	movlw	87
  7172  0015DE  6E08               	movwf	?_Write_b_eep,c
  7173  0015E0  0E00               	movlw	0
  7174  0015E2  6A0A               	clrf	?_Write_b_eep+2,c
  7175  0015E4  EC59  F01C         	call	_Write_b_eep	;wreg free
  7176                           
  7177                           ;main.c: 527: (Busy_eep(), Write_b_eep(0x43 + 21,0));
  7178  0015E8  EC73  F01E         	call	_Busy_eep	;wreg free
  7179  0015EC  6A09               	clrf	?_Write_b_eep+1,c
  7180  0015EE  0E58               	movlw	88
  7181  0015F0  6E08               	movwf	?_Write_b_eep,c
  7182  0015F2  0E00               	movlw	0
  7183  0015F4  6A0A               	clrf	?_Write_b_eep+2,c
  7184  0015F6  EC59  F01C         	call	_Write_b_eep	;wreg free
  7185                           
  7186                           ;main.c: 528: (Busy_eep(), Write_b_eep(0x43 + 22,0));
  7187  0015FA  EC73  F01E         	call	_Busy_eep	;wreg free
  7188  0015FE  6A09               	clrf	?_Write_b_eep+1,c
  7189  001600  0E59               	movlw	89
  7190  001602  6E08               	movwf	?_Write_b_eep,c
  7191  001604  0E00               	movlw	0
  7192  001606  6A0A               	clrf	?_Write_b_eep+2,c
  7193  001608  EC59  F01C         	call	_Write_b_eep	;wreg free
  7194                           
  7195                           ;main.c: 529: (Busy_eep(), Write_b_eep(0x43 + 23,0));
  7196  00160C  EC73  F01E         	call	_Busy_eep	;wreg free
  7197  001610  6A09               	clrf	?_Write_b_eep+1,c
  7198  001612  0E5A               	movlw	90
  7199  001614  6E08               	movwf	?_Write_b_eep,c
  7200  001616  0E00               	movlw	0
  7201  001618  6A0A               	clrf	?_Write_b_eep+2,c
  7202  00161A  EC59  F01C         	call	_Write_b_eep	;wreg free
  7203                           
  7204                           ;main.c: 530: (Busy_eep(), Write_b_eep(0x43 + 24,0));
  7205  00161E  EC73  F01E         	call	_Busy_eep	;wreg free
  7206  001622  6A09               	clrf	?_Write_b_eep+1,c
  7207  001624  0E5B               	movlw	91
  7208  001626  6E08               	movwf	?_Write_b_eep,c
  7209  001628  0E00               	movlw	0
  7210  00162A  6A0A               	clrf	?_Write_b_eep+2,c
  7211  00162C  EC59  F01C         	call	_Write_b_eep	;wreg free
  7212                           
  7213                           ;main.c: 531: (Busy_eep(), Write_b_eep(0x43 + 25,0));
  7214  001630  EC73  F01E         	call	_Busy_eep	;wreg free
  7215  001634  6A09               	clrf	?_Write_b_eep+1,c
  7216  001636  0E5C               	movlw	92
  7217  001638  6E08               	movwf	?_Write_b_eep,c
  7218  00163A  0E00               	movlw	0
  7219  00163C  6A0A               	clrf	?_Write_b_eep+2,c
  7220  00163E  EC59  F01C         	call	_Write_b_eep	;wreg free
  7221                           
  7222                           ;main.c: 532: (Busy_eep(), Write_b_eep(0x43 + 26,0));
  7223  001642  EC73  F01E         	call	_Busy_eep	;wreg free
  7224  001646  6A09               	clrf	?_Write_b_eep+1,c
  7225  001648  0E5D               	movlw	93
  7226  00164A  6E08               	movwf	?_Write_b_eep,c
  7227  00164C  0E00               	movlw	0
  7228  00164E  6A0A               	clrf	?_Write_b_eep+2,c
  7229  001650  EC59  F01C         	call	_Write_b_eep	;wreg free
  7230                           
  7231                           ;main.c: 533: (Busy_eep(), Write_b_eep(0x43 + 27,0));
  7232  001654  EC73  F01E         	call	_Busy_eep	;wreg free
  7233  001658  6A09               	clrf	?_Write_b_eep+1,c
  7234  00165A  0E5E               	movlw	94
  7235  00165C  6E08               	movwf	?_Write_b_eep,c
  7236  00165E  0E00               	movlw	0
  7237  001660  6A0A               	clrf	?_Write_b_eep+2,c
  7238  001662  EC59  F01C         	call	_Write_b_eep	;wreg free
  7239                           
  7240                           ;main.c: 534: (Busy_eep(), Write_b_eep(0x43 + 28,0));
  7241  001666  EC73  F01E         	call	_Busy_eep	;wreg free
  7242  00166A  6A09               	clrf	?_Write_b_eep+1,c
  7243  00166C  0E5F               	movlw	95
  7244  00166E  6E08               	movwf	?_Write_b_eep,c
  7245  001670  0E00               	movlw	0
  7246  001672  6A0A               	clrf	?_Write_b_eep+2,c
  7247  001674  EC59  F01C         	call	_Write_b_eep	;wreg free
  7248                           
  7249                           ;main.c: 535: (Busy_eep(), Write_b_eep(0x43 + 29,0));
  7250  001678  EC73  F01E         	call	_Busy_eep	;wreg free
  7251  00167C  6A09               	clrf	?_Write_b_eep+1,c
  7252  00167E  0E60               	movlw	96
  7253  001680  6E08               	movwf	?_Write_b_eep,c
  7254  001682  0E00               	movlw	0
  7255  001684  6A0A               	clrf	?_Write_b_eep+2,c
  7256  001686  EC59  F01C         	call	_Write_b_eep	;wreg free
  7257                           
  7258                           ;main.c: 536: (Busy_eep(), Write_b_eep(0x43 + 30,0));
  7259  00168A  EC73  F01E         	call	_Busy_eep	;wreg free
  7260  00168E  6A09               	clrf	?_Write_b_eep+1,c
  7261  001690  0E61               	movlw	97
  7262  001692  6E08               	movwf	?_Write_b_eep,c
  7263  001694  0E00               	movlw	0
  7264  001696  6A0A               	clrf	?_Write_b_eep+2,c
  7265  001698  EC59  F01C         	call	_Write_b_eep	;wreg free
  7266                           
  7267                           ;main.c: 537: (Busy_eep(), Write_b_eep(0x43 + 31,0));
  7268  00169C  EC73  F01E         	call	_Busy_eep	;wreg free
  7269  0016A0  6A09               	clrf	?_Write_b_eep+1,c
  7270  0016A2  0E62               	movlw	98
  7271  0016A4  6E08               	movwf	?_Write_b_eep,c
  7272  0016A6  0E00               	movlw	0
  7273  0016A8  6A0A               	clrf	?_Write_b_eep+2,c
  7274  0016AA  EC59  F01C         	call	_Write_b_eep	;wreg free
  7275                           
  7276                           ;main.c: 538: (Busy_eep(), Write_b_eep(0x43 + 32,0));
  7277  0016AE  EC73  F01E         	call	_Busy_eep	;wreg free
  7278  0016B2  6A09               	clrf	?_Write_b_eep+1,c
  7279  0016B4  0E63               	movlw	99
  7280  0016B6  6E08               	movwf	?_Write_b_eep,c
  7281  0016B8  0E00               	movlw	0
  7282  0016BA  6A0A               	clrf	?_Write_b_eep+2,c
  7283  0016BC  EC59  F01C         	call	_Write_b_eep	;wreg free
  7284                           
  7285                           ;main.c: 539: (Busy_eep(), Write_b_eep(0x43 + 33,0));
  7286  0016C0  EC73  F01E         	call	_Busy_eep	;wreg free
  7287  0016C4  6A09               	clrf	?_Write_b_eep+1,c
  7288  0016C6  0E64               	movlw	100
  7289  0016C8  6E08               	movwf	?_Write_b_eep,c
  7290  0016CA  0E00               	movlw	0
  7291  0016CC  6A0A               	clrf	?_Write_b_eep+2,c
  7292  0016CE  EC59  F01C         	call	_Write_b_eep	;wreg free
  7293                           
  7294                           ;main.c: 541: (Busy_eep(), Write_b_eep(0x43 + 34,0));
  7295  0016D2  EC73  F01E         	call	_Busy_eep	;wreg free
  7296  0016D6  6A09               	clrf	?_Write_b_eep+1,c
  7297  0016D8  0E65               	movlw	101
  7298  0016DA  6E08               	movwf	?_Write_b_eep,c
  7299  0016DC  0E00               	movlw	0
  7300  0016DE  6A0A               	clrf	?_Write_b_eep+2,c
  7301  0016E0  EC59  F01C         	call	_Write_b_eep	;wreg free
  7302                           
  7303                           ;main.c: 542: (Busy_eep(), Write_b_eep(0x43 + 35,0));
  7304  0016E4  EC73  F01E         	call	_Busy_eep	;wreg free
  7305  0016E8  6A09               	clrf	?_Write_b_eep+1,c
  7306  0016EA  0E66               	movlw	102
  7307  0016EC  6E08               	movwf	?_Write_b_eep,c
  7308  0016EE  0E00               	movlw	0
  7309  0016F0  6A0A               	clrf	?_Write_b_eep+2,c
  7310  0016F2  EC59  F01C         	call	_Write_b_eep	;wreg free
  7311                           
  7312                           ;main.c: 543: (Busy_eep(), Write_b_eep(0x43 + 36,0));
  7313  0016F6  EC73  F01E         	call	_Busy_eep	;wreg free
  7314  0016FA  6A09               	clrf	?_Write_b_eep+1,c
  7315  0016FC  0E67               	movlw	103
  7316  0016FE  6E08               	movwf	?_Write_b_eep,c
  7317  001700  0E00               	movlw	0
  7318  001702  6A0A               	clrf	?_Write_b_eep+2,c
  7319  001704  EC59  F01C         	call	_Write_b_eep	;wreg free
  7320                           
  7321                           ;main.c: 544: (Busy_eep(), Write_b_eep(0x43 + 37,0));
  7322  001708  EC73  F01E         	call	_Busy_eep	;wreg free
  7323  00170C  6A09               	clrf	?_Write_b_eep+1,c
  7324  00170E  0E68               	movlw	104
  7325  001710  6E08               	movwf	?_Write_b_eep,c
  7326  001712  0E00               	movlw	0
  7327  001714  6A0A               	clrf	?_Write_b_eep+2,c
  7328  001716  EC59  F01C         	call	_Write_b_eep	;wreg free
  7329                           
  7330                           ;main.c: 545: (Busy_eep(), Write_b_eep(0x43 + 38,0));
  7331  00171A  EC73  F01E         	call	_Busy_eep	;wreg free
  7332  00171E  6A09               	clrf	?_Write_b_eep+1,c
  7333  001720  0E69               	movlw	105
  7334  001722  6E08               	movwf	?_Write_b_eep,c
  7335  001724  0E00               	movlw	0
  7336  001726  6A0A               	clrf	?_Write_b_eep+2,c
  7337  001728  EC59  F01C         	call	_Write_b_eep	;wreg free
  7338                           
  7339                           ;main.c: 546: (Busy_eep(), Write_b_eep(0x43 + 39,0));
  7340  00172C  EC73  F01E         	call	_Busy_eep	;wreg free
  7341  001730  6A09               	clrf	?_Write_b_eep+1,c
  7342  001732  0E6A               	movlw	106
  7343  001734  6E08               	movwf	?_Write_b_eep,c
  7344  001736  0E00               	movlw	0
  7345  001738  6A0A               	clrf	?_Write_b_eep+2,c
  7346  00173A  EC59  F01C         	call	_Write_b_eep	;wreg free
  7347                           
  7348                           ;main.c: 547: (Busy_eep(), Write_b_eep(0x43 + 40,0));
  7349  00173E  EC73  F01E         	call	_Busy_eep	;wreg free
  7350  001742  6A09               	clrf	?_Write_b_eep+1,c
  7351  001744  0E6B               	movlw	107
  7352  001746  6E08               	movwf	?_Write_b_eep,c
  7353  001748  0E00               	movlw	0
  7354  00174A  6A0A               	clrf	?_Write_b_eep+2,c
  7355  00174C  EC59  F01C         	call	_Write_b_eep	;wreg free
  7356                           
  7357                           ;main.c: 548: (Busy_eep(), Write_b_eep(0x43 + 41,0));
  7358  001750  EC73  F01E         	call	_Busy_eep	;wreg free
  7359  001754  6A09               	clrf	?_Write_b_eep+1,c
  7360  001756  0E6C               	movlw	108
  7361  001758  6E08               	movwf	?_Write_b_eep,c
  7362  00175A  0E00               	movlw	0
  7363  00175C  6A0A               	clrf	?_Write_b_eep+2,c
  7364  00175E  EC59  F01C         	call	_Write_b_eep	;wreg free
  7365                           
  7366                           ;main.c: 549: (Busy_eep(), Write_b_eep(0x43 + 42,0));
  7367  001762  EC73  F01E         	call	_Busy_eep	;wreg free
  7368  001766  6A09               	clrf	?_Write_b_eep+1,c
  7369  001768  0E6D               	movlw	109
  7370  00176A  6E08               	movwf	?_Write_b_eep,c
  7371  00176C  0E00               	movlw	0
  7372  00176E  6A0A               	clrf	?_Write_b_eep+2,c
  7373  001770  EC59  F01C         	call	_Write_b_eep	;wreg free
  7374                           
  7375                           ;main.c: 550: (Busy_eep(), Write_b_eep(0x43 + 43,0));
  7376  001774  EC73  F01E         	call	_Busy_eep	;wreg free
  7377  001778  6A09               	clrf	?_Write_b_eep+1,c
  7378  00177A  0E6E               	movlw	110
  7379  00177C  6E08               	movwf	?_Write_b_eep,c
  7380  00177E  0E00               	movlw	0
  7381  001780  6A0A               	clrf	?_Write_b_eep+2,c
  7382  001782  EC59  F01C         	call	_Write_b_eep	;wreg free
  7383                           
  7384                           ;main.c: 551: (Busy_eep(), Write_b_eep(0x43 + 44,0));
  7385  001786  EC73  F01E         	call	_Busy_eep	;wreg free
  7386  00178A  6A09               	clrf	?_Write_b_eep+1,c
  7387  00178C  0E6F               	movlw	111
  7388  00178E  6E08               	movwf	?_Write_b_eep,c
  7389  001790  0E00               	movlw	0
  7390  001792  6A0A               	clrf	?_Write_b_eep+2,c
  7391  001794  EC59  F01C         	call	_Write_b_eep	;wreg free
  7392                           
  7393                           ;main.c: 552: (Busy_eep(), Write_b_eep(0x43 + 45,0));
  7394  001798  EC73  F01E         	call	_Busy_eep	;wreg free
  7395  00179C  6A09               	clrf	?_Write_b_eep+1,c
  7396  00179E  0E70               	movlw	112
  7397  0017A0  6E08               	movwf	?_Write_b_eep,c
  7398  0017A2  0E00               	movlw	0
  7399  0017A4  6A0A               	clrf	?_Write_b_eep+2,c
  7400  0017A6  EC59  F01C         	call	_Write_b_eep	;wreg free
  7401                           
  7402                           ;main.c: 553: (Busy_eep(), Write_b_eep(0x43 + 46,0));
  7403  0017AA  EC73  F01E         	call	_Busy_eep	;wreg free
  7404  0017AE  6A09               	clrf	?_Write_b_eep+1,c
  7405  0017B0  0E71               	movlw	113
  7406  0017B2  6E08               	movwf	?_Write_b_eep,c
  7407  0017B4  0E00               	movlw	0
  7408  0017B6  6A0A               	clrf	?_Write_b_eep+2,c
  7409  0017B8  EC59  F01C         	call	_Write_b_eep	;wreg free
  7410                           
  7411                           ;main.c: 554: (Busy_eep(), Write_b_eep(0x43 + 47,0));
  7412  0017BC  EC73  F01E         	call	_Busy_eep	;wreg free
  7413  0017C0  6A09               	clrf	?_Write_b_eep+1,c
  7414  0017C2  0E72               	movlw	114
  7415  0017C4  6E08               	movwf	?_Write_b_eep,c
  7416  0017C6  0E00               	movlw	0
  7417  0017C8  6A0A               	clrf	?_Write_b_eep+2,c
  7418  0017CA  EC59  F01C         	call	_Write_b_eep	;wreg free
  7419                           
  7420                           ;main.c: 555: (Busy_eep(), Write_b_eep(0x43 + 48,0));
  7421  0017CE  EC73  F01E         	call	_Busy_eep	;wreg free
  7422  0017D2  6A09               	clrf	?_Write_b_eep+1,c
  7423  0017D4  0E73               	movlw	115
  7424  0017D6  6E08               	movwf	?_Write_b_eep,c
  7425  0017D8  0E00               	movlw	0
  7426  0017DA  6A0A               	clrf	?_Write_b_eep+2,c
  7427  0017DC  EC59  F01C         	call	_Write_b_eep	;wreg free
  7428                           
  7429                           ;main.c: 556: (Busy_eep(), Write_b_eep(0x43 + 49,0));
  7430  0017E0  EC73  F01E         	call	_Busy_eep	;wreg free
  7431  0017E4  6A09               	clrf	?_Write_b_eep+1,c
  7432  0017E6  0E74               	movlw	116
  7433  0017E8  6E08               	movwf	?_Write_b_eep,c
  7434  0017EA  0E00               	movlw	0
  7435  0017EC  6A0A               	clrf	?_Write_b_eep+2,c
  7436  0017EE  EC59  F01C         	call	_Write_b_eep	;wreg free
  7437                           
  7438                           ;main.c: 558: (Busy_eep(), Write_b_eep(0x43 + 50,0));
  7439  0017F2  EC73  F01E         	call	_Busy_eep	;wreg free
  7440  0017F6  6A09               	clrf	?_Write_b_eep+1,c
  7441  0017F8  0E75               	movlw	117
  7442  0017FA  6E08               	movwf	?_Write_b_eep,c
  7443  0017FC  0E00               	movlw	0
  7444  0017FE  6A0A               	clrf	?_Write_b_eep+2,c
  7445  001800  EC59  F01C         	call	_Write_b_eep	;wreg free
  7446                           
  7447                           ;main.c: 559: (Busy_eep(), Write_b_eep(0x43 + 51,0));
  7448  001804  EC73  F01E         	call	_Busy_eep	;wreg free
  7449  001808  6A09               	clrf	?_Write_b_eep+1,c
  7450  00180A  0E76               	movlw	118
  7451  00180C  6E08               	movwf	?_Write_b_eep,c
  7452  00180E  0E00               	movlw	0
  7453  001810  6A0A               	clrf	?_Write_b_eep+2,c
  7454  001812  EC59  F01C         	call	_Write_b_eep	;wreg free
  7455                           
  7456                           ;main.c: 560: (Busy_eep(), Write_b_eep(0x43 + 52,0));
  7457  001816  EC73  F01E         	call	_Busy_eep	;wreg free
  7458  00181A  6A09               	clrf	?_Write_b_eep+1,c
  7459  00181C  0E77               	movlw	119
  7460  00181E  6E08               	movwf	?_Write_b_eep,c
  7461  001820  0E00               	movlw	0
  7462  001822  6A0A               	clrf	?_Write_b_eep+2,c
  7463  001824  EC59  F01C         	call	_Write_b_eep	;wreg free
  7464                           
  7465                           ;main.c: 561: (Busy_eep(), Write_b_eep(0x43 + 53,0));
  7466  001828  EC73  F01E         	call	_Busy_eep	;wreg free
  7467  00182C  6A09               	clrf	?_Write_b_eep+1,c
  7468  00182E  0E78               	movlw	120
  7469  001830  6E08               	movwf	?_Write_b_eep,c
  7470  001832  0E00               	movlw	0
  7471  001834  6A0A               	clrf	?_Write_b_eep+2,c
  7472  001836  EC59  F01C         	call	_Write_b_eep	;wreg free
  7473                           
  7474                           ;main.c: 562: (Busy_eep(), Write_b_eep(0x43 + 54,0));
  7475  00183A  EC73  F01E         	call	_Busy_eep	;wreg free
  7476  00183E  6A09               	clrf	?_Write_b_eep+1,c
  7477  001840  0E79               	movlw	121
  7478  001842  6E08               	movwf	?_Write_b_eep,c
  7479  001844  0E00               	movlw	0
  7480  001846  6A0A               	clrf	?_Write_b_eep+2,c
  7481  001848  EC59  F01C         	call	_Write_b_eep	;wreg free
  7482                           
  7483                           ;main.c: 563: (Busy_eep(), Write_b_eep(0x43 + 55,0));
  7484  00184C  EC73  F01E         	call	_Busy_eep	;wreg free
  7485  001850  6A09               	clrf	?_Write_b_eep+1,c
  7486  001852  0E7A               	movlw	122
  7487  001854  6E08               	movwf	?_Write_b_eep,c
  7488  001856  0E00               	movlw	0
  7489  001858  6A0A               	clrf	?_Write_b_eep+2,c
  7490  00185A  EC59  F01C         	call	_Write_b_eep	;wreg free
  7491                           
  7492                           ;main.c: 564: (Busy_eep(), Write_b_eep(0x43 + 56,0));
  7493  00185E  EC73  F01E         	call	_Busy_eep	;wreg free
  7494  001862  6A09               	clrf	?_Write_b_eep+1,c
  7495  001864  0E7B               	movlw	123
  7496  001866  6E08               	movwf	?_Write_b_eep,c
  7497  001868  0E00               	movlw	0
  7498  00186A  6A0A               	clrf	?_Write_b_eep+2,c
  7499  00186C  EC59  F01C         	call	_Write_b_eep	;wreg free
  7500                           
  7501                           ;main.c: 565: (Busy_eep(), Write_b_eep(0x43 + 57,0));
  7502  001870  EC73  F01E         	call	_Busy_eep	;wreg free
  7503  001874  6A09               	clrf	?_Write_b_eep+1,c
  7504  001876  0E7C               	movlw	124
  7505  001878  6E08               	movwf	?_Write_b_eep,c
  7506  00187A  0E00               	movlw	0
  7507  00187C  6A0A               	clrf	?_Write_b_eep+2,c
  7508  00187E  EC59  F01C         	call	_Write_b_eep	;wreg free
  7509                           
  7510                           ;main.c: 566: (Busy_eep(), Write_b_eep(0x43 + 58,0));
  7511  001882  EC73  F01E         	call	_Busy_eep	;wreg free
  7512  001886  6A09               	clrf	?_Write_b_eep+1,c
  7513  001888  0E7D               	movlw	125
  7514  00188A  6E08               	movwf	?_Write_b_eep,c
  7515  00188C  0E00               	movlw	0
  7516  00188E  6A0A               	clrf	?_Write_b_eep+2,c
  7517  001890  EC59  F01C         	call	_Write_b_eep	;wreg free
  7518                           
  7519                           ;main.c: 567: (Busy_eep(), Write_b_eep(0x43 + 59,0));
  7520  001894  EC73  F01E         	call	_Busy_eep	;wreg free
  7521  001898  6A09               	clrf	?_Write_b_eep+1,c
  7522  00189A  0E7E               	movlw	126
  7523  00189C  6E08               	movwf	?_Write_b_eep,c
  7524  00189E  0E00               	movlw	0
  7525  0018A0  6A0A               	clrf	?_Write_b_eep+2,c
  7526  0018A2  EC59  F01C         	call	_Write_b_eep	;wreg free
  7527                           
  7528                           ;main.c: 568: (Busy_eep(), Write_b_eep(0x43 + 60,0));
  7529  0018A6  EC73  F01E         	call	_Busy_eep	;wreg free
  7530  0018AA  6A09               	clrf	?_Write_b_eep+1,c
  7531  0018AC  0E7F               	movlw	127
  7532  0018AE  6E08               	movwf	?_Write_b_eep,c
  7533  0018B0  0E00               	movlw	0
  7534  0018B2  6A0A               	clrf	?_Write_b_eep+2,c
  7535  0018B4  EC59  F01C         	call	_Write_b_eep	;wreg free
  7536                           
  7537                           ;main.c: 569: (Busy_eep(), Write_b_eep(0x43 + 61,0));
  7538  0018B8  EC73  F01E         	call	_Busy_eep	;wreg free
  7539  0018BC  6A09               	clrf	?_Write_b_eep+1,c
  7540  0018BE  0E80               	movlw	128
  7541  0018C0  6E08               	movwf	?_Write_b_eep,c
  7542  0018C2  0E00               	movlw	0
  7543  0018C4  6A0A               	clrf	?_Write_b_eep+2,c
  7544  0018C6  EC59  F01C         	call	_Write_b_eep	;wreg free
  7545                           
  7546                           ;main.c: 570: (Busy_eep(), Write_b_eep(0x43 + 62,0));
  7547  0018CA  EC73  F01E         	call	_Busy_eep	;wreg free
  7548  0018CE  6A09               	clrf	?_Write_b_eep+1,c
  7549  0018D0  0E81               	movlw	129
  7550  0018D2  6E08               	movwf	?_Write_b_eep,c
  7551  0018D4  0E00               	movlw	0
  7552  0018D6  6A0A               	clrf	?_Write_b_eep+2,c
  7553  0018D8  EC59  F01C         	call	_Write_b_eep	;wreg free
  7554                           
  7555                           ;main.c: 571: (Busy_eep(), Write_b_eep(0x43 + 63,0));
  7556  0018DC  EC73  F01E         	call	_Busy_eep	;wreg free
  7557  0018E0  6A09               	clrf	?_Write_b_eep+1,c
  7558  0018E2  0E82               	movlw	130
  7559  0018E4  6E08               	movwf	?_Write_b_eep,c
  7560  0018E6  0E00               	movlw	0
  7561  0018E8  6A0A               	clrf	?_Write_b_eep+2,c
  7562  0018EA  EC59  F01C         	call	_Write_b_eep	;wreg free
  7563                           
  7564                           ;main.c: 572: (Busy_eep(), Write_b_eep(0x43 + 64,0));
  7565  0018EE  EC73  F01E         	call	_Busy_eep	;wreg free
  7566  0018F2  6A09               	clrf	?_Write_b_eep+1,c
  7567  0018F4  0E83               	movlw	131
  7568  0018F6  6E08               	movwf	?_Write_b_eep,c
  7569  0018F8  0E00               	movlw	0
  7570  0018FA  6A0A               	clrf	?_Write_b_eep+2,c
  7571  0018FC  EC59  F01C         	call	_Write_b_eep	;wreg free
  7572                           
  7573                           ;main.c: 573: (Busy_eep(), Write_b_eep(0x43 + 65,0));
  7574  001900  EC73  F01E         	call	_Busy_eep	;wreg free
  7575  001904  6A09               	clrf	?_Write_b_eep+1,c
  7576  001906  0E84               	movlw	132
  7577  001908  6E08               	movwf	?_Write_b_eep,c
  7578  00190A  0E00               	movlw	0
  7579  00190C  6A0A               	clrf	?_Write_b_eep+2,c
  7580  00190E  EC59  F01C         	call	_Write_b_eep	;wreg free
  7581                           
  7582                           ;main.c: 577: for ( i = 0; i < 7; i++ ) {
  7583  001912  6A0E               	clrf	init_app_eeprom@i,c
  7584  001914                     l187:
  7585                           
  7586                           ;main.c: 578: for ( j = 0; j < 8; j++ ) {
  7587  001914  6A0F               	clrf	init_app_eeprom@j,c
  7588  001916                     l4991:
  7589                           
  7590                           ;main.c: 579: (Busy_eep(), Write_b_eep(0x43 + 72 + i * 8 + j,0));
  7591  001916  EC73  F01E         	call	_Busy_eep	;wreg free
  7592  00191A  500F               	movf	init_app_eeprom@j,w,c
  7593  00191C  C00E  F00C         	movff	init_app_eeprom@i,??_init_app_eeprom
  7594  001920  6A0D               	clrf	(??_init_app_eeprom+1)& (0+255),c
  7595  001922  90D8               	bcf	status,0,c
  7596  001924  360C               	rlcf	??_init_app_eeprom,f,c
  7597  001926  360D               	rlcf	??_init_app_eeprom+1,f,c
  7598  001928  90D8               	bcf	status,0,c
  7599  00192A  360C               	rlcf	??_init_app_eeprom,f,c
  7600  00192C  360D               	rlcf	??_init_app_eeprom+1,f,c
  7601  00192E  90D8               	bcf	status,0,c
  7602  001930  360C               	rlcf	??_init_app_eeprom,f,c
  7603  001932  360D               	rlcf	??_init_app_eeprom+1,f,c
  7604  001934  260C               	addwf	??_init_app_eeprom,f,c
  7605  001936  0E00               	movlw	0
  7606  001938  220D               	addwfc	??_init_app_eeprom+1,f,c
  7607  00193A  0E8B               	movlw	139
  7608  00193C  240C               	addwf	??_init_app_eeprom,w,c
  7609  00193E  6E08               	movwf	?_Write_b_eep,c
  7610  001940  0E00               	movlw	0
  7611  001942  200D               	addwfc	??_init_app_eeprom+1,w,c
  7612  001944  6E09               	movwf	?_Write_b_eep+1,c
  7613  001946  0E00               	movlw	0
  7614  001948  6A0A               	clrf	?_Write_b_eep+2,c
  7615  00194A  EC59  F01C         	call	_Write_b_eep	;wreg free
  7616  00194E  2A0F               	incf	init_app_eeprom@j,f,c
  7617  001950  0E07               	movlw	7
  7618  001952  640F               	cpfsgt	init_app_eeprom@j,c
  7619  001954  D7E0               	goto	l4991
  7620  001956  2A0E               	incf	init_app_eeprom@i,f,c
  7621  001958  0E06               	movlw	6
  7622  00195A  640E               	cpfsgt	init_app_eeprom@i,c
  7623  00195C  D7DB               	goto	l187
  7624  00195E  0C06               	retlw	6
  7625  001960                     __end_of_init_app_eeprom:
  7626                           	opt stack 0
  7627                           tblptru	equ	0xFF8
  7628                           tblptrh	equ	0xFF7
  7629                           tblptrl	equ	0xFF6
  7630                           tablat	equ	0xFF5
  7631                           prodh	equ	0xFF4
  7632                           prodl	equ	0xFF3
  7633                           intcon	equ	0xFF2
  7634                           postinc0	equ	0xFEE
  7635                           wreg	equ	0xFE8
  7636                           indf1	equ	0xFE7
  7637                           fsr1h	equ	0xFE2
  7638                           fsr1l	equ	0xFE1
  7639                           indf2	equ	0xFDF
  7640                           postinc2	equ	0xFDE
  7641                           postdec2	equ	0xFDD
  7642                           plusw2	equ	0xFDB
  7643                           fsr2h	equ	0xFDA
  7644                           fsr2l	equ	0xFD9
  7645                           status	equ	0xFD8
  7646                           
  7647 ;; *************** function _vscp_setUserID *****************
  7648 ;; Defined at:
  7649 ;;		line 2329 in file "../main.c"
  7650 ;; Parameters:    Size  Location     Type
  7651 ;;  idx             1    wreg     unsigned char 
  7652 ;;  data            1   11[COMRAM] unsigned char 
  7653 ;; Auto vars:     Size  Location     Type
  7654 ;;  idx             1   12[COMRAM] unsigned char 
  7655 ;; Return value:  Size  Location     Type
  7656 ;;		None               void
  7657 ;; Registers used:
  7658 ;;		wreg, status,2, status,0, cstack
  7659 ;; Tracked objects:
  7660 ;;		On entry : F/0
  7661 ;;		On exit  : 0/0
  7662 ;;		Unchanged: 0/0
  7663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7664 ;;      Params:         1       0       0       0       0       0       0
  7665 ;;      Locals:         1       0       0       0       0       0       0
  7666 ;;      Temps:          0       0       0       0       0       0       0
  7667 ;;      Totals:         2       0       0       0       0       0       0
  7668 ;;Total ram usage:        2 bytes
  7669 ;; Hardware stack levels used:    1
  7670 ;; Hardware stack levels required when called:    3
  7671 ;; This function calls:
  7672 ;;		_Busy_eep
  7673 ;;		_Write_b_eep
  7674 ;; This function is called by:
  7675 ;;		_vscp_writeStdReg
  7676 ;; This function uses a non-reentrant model
  7677 ;;
  7678                           
  7679                           	psect	text21
  7680  003B6C                     __ptext21:
  7681                           	opt stack 0
  7682  003B6C                     _vscp_setUserID:
  7683                           	opt stack 25
  7684                           
  7685                           ;incstack = 0
  7686                           ;incstack = 0
  7687                           ;vscp_setUserID@idx stored from wreg
  7688  003B6C  CFE8 F00D          	movff	wreg,vscp_setUserID@idx
  7689                           
  7690                           ; BSR set to: 0
  7691                           ;main.c: 2330: (Busy_eep(), Write_b_eep(idx + 0x06,data));
  7692  003B70  EC73  F01E         	call	_Busy_eep	;wreg free
  7693  003B74  0E06               	movlw	6
  7694  003B76  240D               	addwf	vscp_setUserID@idx,w,c
  7695  003B78  6E08               	movwf	?_Write_b_eep,c
  7696  003B7A  6A09               	clrf	?_Write_b_eep+1,c
  7697  003B7C  0E00               	movlw	0
  7698  003B7E  2209               	addwfc	?_Write_b_eep+1,f,c
  7699  003B80  C00C  F00A         	movff	vscp_setUserID@data,?_Write_b_eep+2
  7700  003B84  EF59  F01C         	goto	_Write_b_eep	;wreg free
  7701  003B88                     __end_of_vscp_setUserID:
  7702                           	opt stack 0
  7703                           tblptru	equ	0xFF8
  7704                           tblptrh	equ	0xFF7
  7705                           tblptrl	equ	0xFF6
  7706                           tablat	equ	0xFF5
  7707                           prodh	equ	0xFF4
  7708                           prodl	equ	0xFF3
  7709                           intcon	equ	0xFF2
  7710                           postinc0	equ	0xFEE
  7711                           wreg	equ	0xFE8
  7712                           indf1	equ	0xFE7
  7713                           fsr1h	equ	0xFE2
  7714                           fsr1l	equ	0xFE1
  7715                           indf2	equ	0xFDF
  7716                           postinc2	equ	0xFDE
  7717                           postdec2	equ	0xFDD
  7718                           plusw2	equ	0xFDB
  7719                           fsr2h	equ	0xFDA
  7720                           fsr2l	equ	0xFD9
  7721                           status	equ	0xFD8
  7722                           
  7723 ;; *************** function _vscp_setManufacturerId *****************
  7724 ;; Defined at:
  7725 ;;		line 818 in file "../main.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;  idx             1    wreg     unsigned char 
  7728 ;;  data            1   11[COMRAM] unsigned char 
  7729 ;; Auto vars:     Size  Location     Type
  7730 ;;  idx             1   12[COMRAM] unsigned char 
  7731 ;; Return value:  Size  Location     Type
  7732 ;;		None               void
  7733 ;; Registers used:
  7734 ;;		wreg, status,2, status,0, cstack
  7735 ;; Tracked objects:
  7736 ;;		On entry : F/0
  7737 ;;		On exit  : 0/0
  7738 ;;		Unchanged: 0/0
  7739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7740 ;;      Params:         1       0       0       0       0       0       0
  7741 ;;      Locals:         1       0       0       0       0       0       0
  7742 ;;      Temps:          0       0       0       0       0       0       0
  7743 ;;      Totals:         2       0       0       0       0       0       0
  7744 ;;Total ram usage:        2 bytes
  7745 ;; Hardware stack levels used:    1
  7746 ;; Hardware stack levels required when called:    3
  7747 ;; This function calls:
  7748 ;;		_Busy_eep
  7749 ;;		_Write_b_eep
  7750 ;; This function is called by:
  7751 ;;		_vscp_writeStdReg
  7752 ;; This function uses a non-reentrant model
  7753 ;;
  7754                           
  7755                           	psect	text22
  7756  003A12                     __ptext22:
  7757                           	opt stack 0
  7758  003A12                     _vscp_setManufacturerId:
  7759                           	opt stack 25
  7760                           
  7761                           ;incstack = 0
  7762                           ;incstack = 0
  7763                           ;vscp_setManufacturerId@idx stored from wreg
  7764  003A12  CFE8 F00D          	movff	wreg,vscp_setManufacturerId@idx
  7765                           
  7766                           ; BSR set to: 0
  7767                           ;main.c: 819: if ( idx>7 ) return;
  7768  003A16  0E07               	movlw	7
  7769  003A18  640D               	cpfsgt	vscp_setManufacturerId@idx,c
  7770  003A1A  D001               	goto	l5945
  7771  003A1C  D00C               	goto	l253
  7772  003A1E                     l5945:
  7773                           
  7774                           ; BSR set to: 0
  7775                           ;main.c: 820: (Busy_eep(), Write_b_eep(0x0B + idx,data));
  7776  003A1E  EC73  F01E         	call	_Busy_eep	;wreg free
  7777  003A22  0E0B               	movlw	11
  7778  003A24  240D               	addwf	vscp_setManufacturerId@idx,w,c
  7779  003A26  6E08               	movwf	?_Write_b_eep,c
  7780  003A28  6A09               	clrf	?_Write_b_eep+1,c
  7781  003A2A  0E00               	movlw	0
  7782  003A2C  2209               	addwfc	?_Write_b_eep+1,f,c
  7783  003A2E  C00C  F00A         	movff	vscp_setManufacturerId@data,?_Write_b_eep+2
  7784  003A32  EC59  F01C         	call	_Write_b_eep	;wreg free
  7785  003A36                     l253:
  7786  003A36  0012               	return	
  7787  003A38                     __end_of_vscp_setManufacturerId:
  7788                           	opt stack 0
  7789                           tblptru	equ	0xFF8
  7790                           tblptrh	equ	0xFF7
  7791                           tblptrl	equ	0xFF6
  7792                           tablat	equ	0xFF5
  7793                           prodh	equ	0xFF4
  7794                           prodl	equ	0xFF3
  7795                           intcon	equ	0xFF2
  7796                           postinc0	equ	0xFEE
  7797                           wreg	equ	0xFE8
  7798                           indf1	equ	0xFE7
  7799                           fsr1h	equ	0xFE2
  7800                           fsr1l	equ	0xFE1
  7801                           indf2	equ	0xFDF
  7802                           postinc2	equ	0xFDE
  7803                           postdec2	equ	0xFDD
  7804                           plusw2	equ	0xFDB
  7805                           fsr2h	equ	0xFDA
  7806                           fsr2l	equ	0xFD9
  7807                           status	equ	0xFD8
  7808                           
  7809 ;; *************** function _vscp_setGUID *****************
  7810 ;; Defined at:
  7811 ;;		line 806 in file "../main.c"
  7812 ;; Parameters:    Size  Location     Type
  7813 ;;  idx             1    wreg     unsigned char 
  7814 ;;  data            1   11[COMRAM] unsigned char 
  7815 ;; Auto vars:     Size  Location     Type
  7816 ;;  idx             1   12[COMRAM] unsigned char 
  7817 ;; Return value:  Size  Location     Type
  7818 ;;		None               void
  7819 ;; Registers used:
  7820 ;;		wreg, status,2, status,0, cstack
  7821 ;; Tracked objects:
  7822 ;;		On entry : F/0
  7823 ;;		On exit  : 0/0
  7824 ;;		Unchanged: 0/0
  7825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7826 ;;      Params:         1       0       0       0       0       0       0
  7827 ;;      Locals:         1       0       0       0       0       0       0
  7828 ;;      Temps:          0       0       0       0       0       0       0
  7829 ;;      Totals:         2       0       0       0       0       0       0
  7830 ;;Total ram usage:        2 bytes
  7831 ;; Hardware stack levels used:    1
  7832 ;; Hardware stack levels required when called:    3
  7833 ;; This function calls:
  7834 ;;		_Busy_eep
  7835 ;;		_Write_b_eep
  7836 ;; This function is called by:
  7837 ;;		_vscp_writeStdReg
  7838 ;; This function uses a non-reentrant model
  7839 ;;
  7840                           
  7841                           	psect	text23
  7842  003A38                     __ptext23:
  7843                           	opt stack 0
  7844  003A38                     _vscp_setGUID:
  7845                           	opt stack 25
  7846                           
  7847                           ;incstack = 0
  7848                           ;incstack = 0
  7849                           ;vscp_setGUID@idx stored from wreg
  7850  003A38  CFE8 F00D          	movff	wreg,vscp_setGUID@idx
  7851                           
  7852                           ; BSR set to: 0
  7853                           ;main.c: 807: if ( idx>15 ) return;
  7854  003A3C  0E0F               	movlw	15
  7855  003A3E  640D               	cpfsgt	vscp_setGUID@idx,c
  7856  003A40  D001               	goto	l5937
  7857  003A42  D00C               	goto	l249
  7858  003A44                     l5937:
  7859                           
  7860                           ; BSR set to: 0
  7861                           ;main.c: 808: (Busy_eep(), Write_b_eep(0x13 + idx,data));
  7862  003A44  EC73  F01E         	call	_Busy_eep	;wreg free
  7863  003A48  0E13               	movlw	19
  7864  003A4A  240D               	addwf	vscp_setGUID@idx,w,c
  7865  003A4C  6E08               	movwf	?_Write_b_eep,c
  7866  003A4E  6A09               	clrf	?_Write_b_eep+1,c
  7867  003A50  0E00               	movlw	0
  7868  003A52  2209               	addwfc	?_Write_b_eep+1,f,c
  7869  003A54  C00C  F00A         	movff	vscp_setGUID@data,?_Write_b_eep+2
  7870  003A58  EC59  F01C         	call	_Write_b_eep	;wreg free
  7871  003A5C                     l249:
  7872  003A5C  0012               	return	
  7873  003A5E                     __end_of_vscp_setGUID:
  7874                           	opt stack 0
  7875                           tblptru	equ	0xFF8
  7876                           tblptrh	equ	0xFF7
  7877                           tblptrl	equ	0xFF6
  7878                           tablat	equ	0xFF5
  7879                           prodh	equ	0xFF4
  7880                           prodl	equ	0xFF3
  7881                           intcon	equ	0xFF2
  7882                           postinc0	equ	0xFEE
  7883                           wreg	equ	0xFE8
  7884                           indf1	equ	0xFE7
  7885                           fsr1h	equ	0xFE2
  7886                           fsr1l	equ	0xFE1
  7887                           indf2	equ	0xFDF
  7888                           postinc2	equ	0xFDE
  7889                           postdec2	equ	0xFDD
  7890                           plusw2	equ	0xFDB
  7891                           fsr2h	equ	0xFDA
  7892                           fsr2l	equ	0xFD9
  7893                           status	equ	0xFD8
  7894                           
  7895 ;; *************** function _vscp_writeAppReg *****************
  7896 ;; Defined at:
  7897 ;;		line 970 in file "../main.c"
  7898 ;; Parameters:    Size  Location     Type
  7899 ;;  reg             1    wreg     unsigned char 
  7900 ;;  val             1   80[COMRAM] unsigned char 
  7901 ;; Auto vars:     Size  Location     Type
  7902 ;;  reg             1   29[BANK0 ] unsigned char 
  7903 ;;  val             1   26[BANK0 ] unsigned char 
  7904 ;;  bOn             1   28[BANK0 ] enum E15660
  7905 ;;  rv              1   27[BANK0 ] unsigned char 
  7906 ;;  bInfoEvent      1   25[BANK0 ] enum E15660
  7907 ;; Return value:  Size  Location     Type
  7908 ;;                  1    wreg      unsigned char 
  7909 ;; Registers used:
  7910 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7911 ;; Tracked objects:
  7912 ;;		On entry : F/0
  7913 ;;		On exit  : F/0
  7914 ;;		Unchanged: 0/0
  7915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7916 ;;      Params:         1       0       0       0       0       0       0
  7917 ;;      Locals:         0       5       0       0       0       0       0
  7918 ;;      Temps:          0       3       0       0       0       0       0
  7919 ;;      Totals:         1       8       0       0       0       0       0
  7920 ;;Total ram usage:        9 bytes
  7921 ;; Hardware stack levels used:    1
  7922 ;; Hardware stack levels required when called:    7
  7923 ;; This function calls:
  7924 ;;		_Busy_eep
  7925 ;;		_Write_b_eep
  7926 ;;		_Read_b_eep
  7927 ;;		_SendInformationEvent
  7928 ;;		_calculateSetFilterMask
  7929 ;; This function is called by:
  7930 ;;		_vscp_writeRegister
  7931 ;;		_vscp_handleProtocolEvent
  7932 ;; This function uses a non-reentrant model
  7933 ;;
  7934                           
  7935                           	psect	text24
  7936  000622                     __ptext24:
  7937                           	opt stack 0
  7938  000622                     _vscp_writeAppReg:
  7939                           	opt stack 21
  7940                           
  7941                           ;incstack = 0
  7942                           ;incstack = 0
  7943                           ;vscp_writeAppReg@reg stored from wreg
  7944  000622  CFE8 F0CD          	movff	wreg,vscp_writeAppReg@reg
  7945                           
  7946                           ; BSR set to: 0
  7947                           ;main.c: 971: uint8_t rv;
  7948                           ;main.c: 972: BOOL bInfoEvent = 0;
  7949  000626  6BC9               	clrf	vscp_writeAppReg@bInfoEvent& (0+255),b
  7950                           
  7951                           ;main.c: 973: BOOL bOn = 0;
  7952  000628  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  7953                           
  7954                           ; BSR set to: 0
  7955                           ;main.c: 975: rv = ~val;
  7956  00062A  1C51               	comf	vscp_writeAppReg@val,w,c
  7957  00062C  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  7958                           
  7959                           ; BSR set to: 0
  7960                           ;main.c: 978: if ( reg == 0 ) {
  7961  00062E  67CD               	tstfsz	vscp_writeAppReg@reg& (0+255),b
  7962  000630  D00F               	goto	l10447
  7963                           
  7964                           ; BSR set to: 0
  7965                           ;main.c: 979: (Busy_eep(), Write_b_eep(0x43 + 0,val));
  7966  000632  EC73  F01E         	call	_Busy_eep	;wreg free
  7967  000636  6A09               	clrf	?_Write_b_eep+1,c
  7968  000638  0E43               	movlw	67
  7969  00063A  6E08               	movwf	?_Write_b_eep,c
  7970  00063C  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  7971  000640  EC59  F01C         	call	_Write_b_eep	;wreg free
  7972                           
  7973                           ;main.c: 980: rv = Read_b_eep(0x43 + 0);
  7974  000644  6A09               	clrf	?_Read_b_eep+1,c
  7975  000646  0E43               	movlw	67
  7976  000648  6E08               	movwf	?_Read_b_eep,c
  7977  00064A  EC3F  F01E         	call	_Read_b_eep	;wreg free
  7978  00064E  D3B4               	goto	L27
  7979  000650                     l10447:
  7980                           
  7981                           ; BSR set to: 0
  7982                           ;main.c: 982: else if ( reg == 1 ) {
  7983  000650  05CD               	decf	vscp_writeAppReg@reg& (0+255),w,b
  7984  000652  E10F               	bnz	l10455
  7985                           
  7986                           ; BSR set to: 0
  7987                           ;main.c: 984: (Busy_eep(), Write_b_eep(0x43 + 1,val));
  7988  000654  EC73  F01E         	call	_Busy_eep	;wreg free
  7989  000658  6A09               	clrf	?_Write_b_eep+1,c
  7990  00065A  0E44               	movlw	68
  7991  00065C  6E08               	movwf	?_Write_b_eep,c
  7992  00065E  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  7993  000662  EC59  F01C         	call	_Write_b_eep	;wreg free
  7994                           
  7995                           ;main.c: 985: rv = Read_b_eep(0x43 + 1);
  7996  000666  6A09               	clrf	?_Read_b_eep+1,c
  7997  000668  0E44               	movlw	68
  7998  00066A  6E08               	movwf	?_Read_b_eep,c
  7999  00066C  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8000  000670  D3A3               	goto	L27
  8001  000672                     l10455:
  8002                           
  8003                           ; BSR set to: 0
  8004                           ;main.c: 988: else if ( (reg >= 2) && (reg <= 9) ) {
  8005  000672  0E01               	movlw	1
  8006  000674  65CD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8007  000676  D17B               	goto	l10607
  8008                           
  8009                           ; BSR set to: 0
  8010  000678  0E0A               	movlw	10
  8011  00067A  61CD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8012  00067C  D178               	goto	l10607
  8013                           
  8014                           ; BSR set to: 0
  8015                           ;main.c: 990: if ( Read_b_eep(0x43 + 10 + reg - 2) &
  8016                           ;main.c: 992: 0x80 ) {
  8017  00067E  0E4B               	movlw	75
  8018  000680  25CD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8019  000682  6E08               	movwf	?_Read_b_eep,c
  8020  000684  6A09               	clrf	?_Read_b_eep+1,c
  8021  000686  0E00               	movlw	0
  8022  000688  2209               	addwfc	?_Read_b_eep+1,f,c
  8023  00068A  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8024  00068E  0100               	movlb	0	; () banked
  8025  000690  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8026  000692  BFC6               	btfsc	??_vscp_writeAppReg& (0+255),7,b
  8027  000694  D157               	goto	l10605
  8028  000696  D3A1               	goto	l10867
  8029  000698                     l10463:
  8030                           
  8031                           ; BSR set to: 0
  8032                           ;main.c: 999: bInfoEvent = 1;
  8033  000698  0E01               	movlw	1
  8034  00069A  6FC9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8035                           
  8036                           ; BSR set to: 0
  8037                           ;main.c: 1001: if ( 1 == val ) {
  8038  00069C  0451               	decf	vscp_writeAppReg@val,w,c
  8039  00069E  E126               	bnz	l306
  8040                           
  8041                           ; BSR set to: 0
  8042                           ;main.c: 1003: LATBbits.LATB4 = 1;
  8043  0006A0  888A               	bsf	3978,4,c	;volatile
  8044                           
  8045                           ; BSR set to: 0
  8046                           ;main.c: 1004: rv = LATBbits.LATB4;
  8047  0006A2  0E00               	movlw	0
  8048  0006A4  B88A               	btfsc	3978,4,c	;volatile
  8049  0006A6  0E01               	movlw	1
  8050  0006A8  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8051                           
  8052                           ; BSR set to: 0
  8053                           ;main.c: 1005: bOn = 1;
  8054  0006AA  0E01               	movlw	1
  8055  0006AC  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8056                           
  8057                           ; BSR set to: 0
  8058                           ;main.c: 1008: if ( Read_b_eep(0x43 + 10) & 0x04 ) {
  8059  0006AE  6A09               	clrf	?_Read_b_eep+1,c
  8060  0006B0  0E4D               	movlw	77
  8061  0006B2  6E08               	movwf	?_Read_b_eep,c
  8062  0006B4  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8063  0006B8  0100               	movlb	0	; () banked
  8064  0006BA  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8065  0006BC  A5C6               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8066  0006BE  D38D               	goto	l10867
  8067  0006C0                     l10475:
  8068                           
  8069                           ; BSR set to: 0
  8070                           ;main.c: 1009: relay_protection_timer[ 0 ] =
  8071                           ;main.c: 1010: Read_b_eep(0x43 + 34) * 256 +
  8072                           ;main.c: 1011: Read_b_eep(0x43 + 35);
  8073  0006C0  6A09               	clrf	?_Read_b_eep+1,c
  8074  0006C2  0E66               	movlw	102
  8075  0006C4  6E08               	movwf	?_Read_b_eep,c
  8076  0006C6  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8077  0006CA  0100               	movlb	0	; () banked
  8078  0006CC  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8079  0006CE  6A09               	clrf	?_Read_b_eep+1,c
  8080  0006D0  0E65               	movlw	101
  8081  0006D2  6E08               	movwf	?_Read_b_eep,c
  8082  0006D4  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8083  0006D8  0100               	movlb	0	; () banked
  8084  0006DA  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8085  0006DC  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8086  0006DE  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  8087  0006E0  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8088  0006E2  6F60               	movwf	_relay_protection_timer& (0+255),b
  8089  0006E4  0E00               	movlw	0
  8090  0006E6  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8091  0006E8  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  8092  0006EA  D377               	goto	l10867
  8093  0006EC                     l306:
  8094                           
  8095                           ; BSR set to: 0
  8096                           ;main.c: 1015: else if (0 == val) {
  8097  0006EC  6651               	tstfsz	vscp_writeAppReg@val,c
  8098  0006EE  D375               	goto	l10867
  8099                           
  8100                           ; BSR set to: 0
  8101                           ;main.c: 1016: LATBbits.LATB4 = 0;
  8102  0006F0  988A               	bcf	3978,4,c	;volatile
  8103                           
  8104                           ; BSR set to: 0
  8105                           ;main.c: 1017: rv = LATBbits.LATB4;
  8106  0006F2  0E00               	movlw	0
  8107  0006F4  B88A               	btfsc	3978,4,c	;volatile
  8108  0006F6  0E01               	movlw	1
  8109  0006F8  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8110  0006FA                     l10481:
  8111                           
  8112                           ; BSR set to: 0
  8113                           ;main.c: 1018: bOn = 0;
  8114  0006FA  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8115  0006FC  D36E               	goto	l10867
  8116  0006FE                     l10483:
  8117                           
  8118                           ; BSR set to: 0
  8119                           ;main.c: 1025: bInfoEvent = 1;
  8120  0006FE  0E01               	movlw	1
  8121  000700  6FC9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;main.c: 1027: if (1 == val) {
  8125  000702  0451               	decf	vscp_writeAppReg@val,w,c
  8126  000704  E11D               	bnz	l312
  8127                           
  8128                           ; BSR set to: 0
  8129                           ;main.c: 1029: LATBbits.LATB1 = 1;
  8130  000706  828A               	bsf	3978,1,c	;volatile
  8131                           
  8132                           ; BSR set to: 0
  8133                           ;main.c: 1030: rv = LATBbits.LATB1;
  8134  000708  0E00               	movlw	0
  8135  00070A  B28A               	btfsc	3978,1,c	;volatile
  8136  00070C  0E01               	movlw	1
  8137  00070E  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8138                           
  8139                           ; BSR set to: 0
  8140                           ;main.c: 1031: bOn = 1;
  8141  000710  0E01               	movlw	1
  8142  000712  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8143                           
  8144                           ; BSR set to: 0
  8145                           ;main.c: 1033: if (Read_b_eep(0x43 + 11) & 0x04) {
  8146  000714  6A09               	clrf	?_Read_b_eep+1,c
  8147  000716  0E4E               	movlw	78
  8148  000718  6E08               	movwf	?_Read_b_eep,c
  8149  00071A  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8150  00071E  0100               	movlb	0	; () banked
  8151  000720  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8152  000722  A5C6               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8153  000724  D35A               	goto	l10867
  8154  000726                     l10495:
  8155                           
  8156                           ; BSR set to: 0
  8157                           ;main.c: 1034: relay_protection_timer[ 1 ] =
  8158                           ;main.c: 1035: Read_b_eep(0x43 + 36) * 256 +
  8159                           ;main.c: 1036: Read_b_eep(0x43 + 37);
  8160  000726  6A09               	clrf	?_Read_b_eep+1,c
  8161  000728  0E68               	movlw	104
  8162  00072A  6E08               	movwf	?_Read_b_eep,c
  8163  00072C  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8164  000730  0100               	movlb	0	; () banked
  8165  000732  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8166  000734  6A09               	clrf	?_Read_b_eep+1,c
  8167  000736  0E67               	movlw	103
  8168  000738  6E08               	movwf	?_Read_b_eep,c
  8169  00073A  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8170  00073E  D170               	goto	L28
  8171  000740                     l312:
  8172                           
  8173                           ; BSR set to: 0
  8174                           ;main.c: 1040: else if (0 == val) {
  8175  000740  6651               	tstfsz	vscp_writeAppReg@val,c
  8176  000742  D34B               	goto	l10867
  8177                           
  8178                           ; BSR set to: 0
  8179                           ;main.c: 1041: LATBbits.LATB1 = 0;
  8180  000744  928A               	bcf	3978,1,c	;volatile
  8181                           
  8182                           ; BSR set to: 0
  8183                           ;main.c: 1042: rv = LATBbits.LATB1;
  8184  000746  0E00               	movlw	0
  8185  000748  B28A               	btfsc	3978,1,c	;volatile
  8186  00074A  0E01               	movlw	1
  8187  00074C  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8188  00074E  D7D5               	goto	l10481
  8189  000750                     l10503:
  8190                           
  8191                           ; BSR set to: 0
  8192                           ;main.c: 1050: bInfoEvent = 1;
  8193  000750  0E01               	movlw	1
  8194  000752  6FC9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8195                           
  8196                           ; BSR set to: 0
  8197                           ;main.c: 1052: if (1 == val) {
  8198  000754  0451               	decf	vscp_writeAppReg@val,w,c
  8199  000756  E126               	bnz	l317
  8200                           
  8201                           ; BSR set to: 0
  8202                           ;main.c: 1054: LATBbits.LATB0 = 1;
  8203  000758  808A               	bsf	3978,0,c	;volatile
  8204                           
  8205                           ; BSR set to: 0
  8206                           ;main.c: 1055: rv = LATBbits.LATB0;
  8207  00075A  0E00               	movlw	0
  8208  00075C  B08A               	btfsc	3978,0,c	;volatile
  8209  00075E  0E01               	movlw	1
  8210  000760  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8211                           
  8212                           ; BSR set to: 0
  8213                           ;main.c: 1056: bOn = 1;
  8214  000762  0E01               	movlw	1
  8215  000764  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8216                           
  8217                           ; BSR set to: 0
  8218                           ;main.c: 1058: if ( Read_b_eep(0x43 + 12) & 0x04) {
  8219  000766  6A09               	clrf	?_Read_b_eep+1,c
  8220  000768  0E4F               	movlw	79
  8221  00076A  6E08               	movwf	?_Read_b_eep,c
  8222  00076C  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8223  000770  0100               	movlb	0	; () banked
  8224  000772  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8225  000774  A5C6               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8226  000776  D331               	goto	l10867
  8227  000778                     l10515:
  8228                           
  8229                           ; BSR set to: 0
  8230                           ;main.c: 1059: relay_protection_timer[ 2 ] =
  8231                           ;main.c: 1060: Read_b_eep(0x43 + 38) * 256 +
  8232                           ;main.c: 1061: Read_b_eep(0x43 + 39);
  8233  000778  6A09               	clrf	?_Read_b_eep+1,c
  8234  00077A  0E6A               	movlw	106
  8235  00077C  6E08               	movwf	?_Read_b_eep,c
  8236  00077E  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8237  000782  0100               	movlb	0	; () banked
  8238  000784  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8239  000786  6A09               	clrf	?_Read_b_eep+1,c
  8240  000788  0E69               	movlw	105
  8241  00078A  6E08               	movwf	?_Read_b_eep,c
  8242  00078C  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8243  000790  0100               	movlb	0	; () banked
  8244  000792  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8245  000794  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8246  000796  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  8247  000798  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8248  00079A  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  8249  00079C  0E00               	movlw	0
  8250  00079E  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8251  0007A0  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  8252  0007A2  D31B               	goto	l10867
  8253  0007A4                     l317:
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;main.c: 1065: else if (0 == val) {
  8257  0007A4  6651               	tstfsz	vscp_writeAppReg@val,c
  8258  0007A6  D319               	goto	l10867
  8259                           
  8260                           ; BSR set to: 0
  8261                           ;main.c: 1066: LATBbits.LATB0 = 0;
  8262  0007A8  908A               	bcf	3978,0,c	;volatile
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;main.c: 1067: rv = LATBbits.LATB0;
  8266  0007AA  0E00               	movlw	0
  8267  0007AC  B08A               	btfsc	3978,0,c	;volatile
  8268  0007AE  0E01               	movlw	1
  8269  0007B0  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8270  0007B2  D7A3               	goto	l10481
  8271  0007B4                     l10523:
  8272                           
  8273                           ; BSR set to: 0
  8274                           ;main.c: 1076: bInfoEvent = 1;
  8275  0007B4  0E01               	movlw	1
  8276  0007B6  6FC9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;main.c: 1078: if (1 == val) {
  8280  0007B8  0451               	decf	vscp_writeAppReg@val,w,c
  8281  0007BA  E126               	bnz	l322
  8282                           
  8283                           ; BSR set to: 0
  8284                           ;main.c: 1080: LATCbits.LATC7 = 1;
  8285  0007BC  8E8B               	bsf	3979,7,c	;volatile
  8286                           
  8287                           ; BSR set to: 0
  8288                           ;main.c: 1081: rv = LATCbits.LATC7;
  8289  0007BE  0E00               	movlw	0
  8290  0007C0  BE8B               	btfsc	3979,7,c	;volatile
  8291  0007C2  0E01               	movlw	1
  8292  0007C4  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8293                           
  8294                           ; BSR set to: 0
  8295                           ;main.c: 1082: bOn = 1;
  8296  0007C6  0E01               	movlw	1
  8297  0007C8  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8298                           
  8299                           ; BSR set to: 0
  8300                           ;main.c: 1084: if (Read_b_eep(0x43 + 13) & 0x04) {
  8301  0007CA  6A09               	clrf	?_Read_b_eep+1,c
  8302  0007CC  0E50               	movlw	80
  8303  0007CE  6E08               	movwf	?_Read_b_eep,c
  8304  0007D0  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8305  0007D4  0100               	movlb	0	; () banked
  8306  0007D6  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8307  0007D8  A5C6               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8308  0007DA  D2FF               	goto	l10867
  8309  0007DC                     l10535:
  8310                           
  8311                           ; BSR set to: 0
  8312                           ;main.c: 1085: relay_protection_timer[ 3 ] =
  8313                           ;main.c: 1086: Read_b_eep(0x43 + 40) * 256 +
  8314                           ;main.c: 1087: Read_b_eep(0x43 + 41);
  8315  0007DC  6A09               	clrf	?_Read_b_eep+1,c
  8316  0007DE  0E6C               	movlw	108
  8317  0007E0  6E08               	movwf	?_Read_b_eep,c
  8318  0007E2  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8319  0007E6  0100               	movlb	0	; () banked
  8320  0007E8  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8321  0007EA  6A09               	clrf	?_Read_b_eep+1,c
  8322  0007EC  0E6B               	movlw	107
  8323  0007EE  6E08               	movwf	?_Read_b_eep,c
  8324  0007F0  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8325  0007F4  0100               	movlb	0	; () banked
  8326  0007F6  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8327  0007F8  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8328  0007FA  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  8329  0007FC  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8330  0007FE  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  8331  000800  0E00               	movlw	0
  8332  000802  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8333  000804  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  8334  000806  D2E9               	goto	l10867
  8335  000808                     l322:
  8336                           
  8337                           ; BSR set to: 0
  8338                           ;main.c: 1091: else if (0 == val) {
  8339  000808  6651               	tstfsz	vscp_writeAppReg@val,c
  8340  00080A  D2E7               	goto	l10867
  8341                           
  8342                           ; BSR set to: 0
  8343                           ;main.c: 1092: LATCbits.LATC7 = 0;
  8344  00080C  9E8B               	bcf	3979,7,c	;volatile
  8345                           
  8346                           ; BSR set to: 0
  8347                           ;main.c: 1093: rv = LATCbits.LATC7;
  8348  00080E  0E00               	movlw	0
  8349  000810  BE8B               	btfsc	3979,7,c	;volatile
  8350  000812  0E01               	movlw	1
  8351  000814  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8352  000816  D771               	goto	l10481
  8353  000818                     l10543:
  8354                           
  8355                           ; BSR set to: 0
  8356                           ;main.c: 1102: bInfoEvent = 1;
  8357  000818  0E01               	movlw	1
  8358  00081A  6FC9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8359                           
  8360                           ; BSR set to: 0
  8361                           ;main.c: 1104: if (1 == val) {
  8362  00081C  0451               	decf	vscp_writeAppReg@val,w,c
  8363  00081E  E126               	bnz	l327
  8364                           
  8365                           ; BSR set to: 0
  8366                           ;main.c: 1106: LATCbits.LATC6 = 1;
  8367  000820  8C8B               	bsf	3979,6,c	;volatile
  8368                           
  8369                           ; BSR set to: 0
  8370                           ;main.c: 1107: rv = LATCbits.LATC6;
  8371  000822  0E00               	movlw	0
  8372  000824  BC8B               	btfsc	3979,6,c	;volatile
  8373  000826  0E01               	movlw	1
  8374  000828  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8375                           
  8376                           ; BSR set to: 0
  8377                           ;main.c: 1108: bOn = 1;
  8378  00082A  0E01               	movlw	1
  8379  00082C  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8380                           
  8381                           ; BSR set to: 0
  8382                           ;main.c: 1110: if (Read_b_eep(0x43 + 14) & 0x04) {
  8383  00082E  6A09               	clrf	?_Read_b_eep+1,c
  8384  000830  0E51               	movlw	81
  8385  000832  6E08               	movwf	?_Read_b_eep,c
  8386  000834  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8387  000838  0100               	movlb	0	; () banked
  8388  00083A  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8389  00083C  A5C6               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8390  00083E  D2CD               	goto	l10867
  8391  000840                     l10555:
  8392                           
  8393                           ; BSR set to: 0
  8394                           ;main.c: 1111: relay_protection_timer[ 4 ] =
  8395                           ;main.c: 1112: Read_b_eep(0x43 + 42) * 256 +
  8396                           ;main.c: 1113: Read_b_eep(0x43 + 43);
  8397  000840  6A09               	clrf	?_Read_b_eep+1,c
  8398  000842  0E6E               	movlw	110
  8399  000844  6E08               	movwf	?_Read_b_eep,c
  8400  000846  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8401  00084A  0100               	movlb	0	; () banked
  8402  00084C  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8403  00084E  6A09               	clrf	?_Read_b_eep+1,c
  8404  000850  0E6D               	movlw	109
  8405  000852  6E08               	movwf	?_Read_b_eep,c
  8406  000854  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8407  000858  0100               	movlb	0	; () banked
  8408  00085A  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8409  00085C  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8410  00085E  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  8411  000860  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8412  000862  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  8413  000864  0E00               	movlw	0
  8414  000866  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8415  000868  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  8416  00086A  D2B7               	goto	l10867
  8417  00086C                     l327:
  8418                           
  8419                           ; BSR set to: 0
  8420                           ;main.c: 1117: else if (0 == val) {
  8421  00086C  6651               	tstfsz	vscp_writeAppReg@val,c
  8422  00086E  D2B5               	goto	l10867
  8423                           
  8424                           ; BSR set to: 0
  8425                           ;main.c: 1118: LATCbits.LATC6 = 0;
  8426  000870  9C8B               	bcf	3979,6,c	;volatile
  8427                           
  8428                           ; BSR set to: 0
  8429                           ;main.c: 1119: rv = LATCbits.LATC6;
  8430  000872  0E00               	movlw	0
  8431  000874  BC8B               	btfsc	3979,6,c	;volatile
  8432  000876  0E01               	movlw	1
  8433  000878  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8434  00087A  D73F               	goto	l10481
  8435  00087C                     l10563:
  8436                           
  8437                           ; BSR set to: 0
  8438                           ;main.c: 1128: bInfoEvent = 1;
  8439  00087C  0E01               	movlw	1
  8440  00087E  6FC9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;main.c: 1130: if (1 == val) {
  8444  000880  0451               	decf	vscp_writeAppReg@val,w,c
  8445  000882  E126               	bnz	l332
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;main.c: 1132: LATCbits.LATC5 = 1;
  8449  000884  8A8B               	bsf	3979,5,c	;volatile
  8450                           
  8451                           ; BSR set to: 0
  8452                           ;main.c: 1133: rv = LATCbits.LATC5;
  8453  000886  0E00               	movlw	0
  8454  000888  BA8B               	btfsc	3979,5,c	;volatile
  8455  00088A  0E01               	movlw	1
  8456  00088C  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8457                           
  8458                           ; BSR set to: 0
  8459                           ;main.c: 1134: bOn = 1;
  8460  00088E  0E01               	movlw	1
  8461  000890  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8462                           
  8463                           ; BSR set to: 0
  8464                           ;main.c: 1136: if (Read_b_eep(0x43 + 15) & 0x04) {
  8465  000892  6A09               	clrf	?_Read_b_eep+1,c
  8466  000894  0E52               	movlw	82
  8467  000896  6E08               	movwf	?_Read_b_eep,c
  8468  000898  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8469  00089C  0100               	movlb	0	; () banked
  8470  00089E  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8471  0008A0  A5C6               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8472  0008A2  D29B               	goto	l10867
  8473  0008A4                     l10575:
  8474                           
  8475                           ; BSR set to: 0
  8476                           ;main.c: 1137: relay_protection_timer[ 5 ] =
  8477                           ;main.c: 1138: Read_b_eep(0x43 + 44) * 256 +
  8478                           ;main.c: 1139: Read_b_eep(0x43 + 45);
  8479  0008A4  6A09               	clrf	?_Read_b_eep+1,c
  8480  0008A6  0E70               	movlw	112
  8481  0008A8  6E08               	movwf	?_Read_b_eep,c
  8482  0008AA  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8483  0008AE  0100               	movlb	0	; () banked
  8484  0008B0  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8485  0008B2  6A09               	clrf	?_Read_b_eep+1,c
  8486  0008B4  0E6F               	movlw	111
  8487  0008B6  6E08               	movwf	?_Read_b_eep,c
  8488  0008B8  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8489  0008BC  0100               	movlb	0	; () banked
  8490  0008BE  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8491  0008C0  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8492  0008C2  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  8493  0008C4  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8494  0008C6  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  8495  0008C8  0E00               	movlw	0
  8496  0008CA  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8497  0008CC  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  8498  0008CE  D285               	goto	l10867
  8499  0008D0                     l332:
  8500                           
  8501                           ; BSR set to: 0
  8502                           ;main.c: 1143: else if (0 == val) {
  8503  0008D0  6651               	tstfsz	vscp_writeAppReg@val,c
  8504  0008D2  D283               	goto	l10867
  8505                           
  8506                           ; BSR set to: 0
  8507                           ;main.c: 1144: LATCbits.LATC5 = 0;
  8508  0008D4  9A8B               	bcf	3979,5,c	;volatile
  8509                           
  8510                           ; BSR set to: 0
  8511                           ;main.c: 1145: rv = LATCbits.LATC5;
  8512  0008D6  0E00               	movlw	0
  8513  0008D8  BA8B               	btfsc	3979,5,c	;volatile
  8514  0008DA  0E01               	movlw	1
  8515  0008DC  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8516  0008DE  D70D               	goto	l10481
  8517  0008E0                     l10583:
  8518                           
  8519                           ; BSR set to: 0
  8520                           ;main.c: 1153: bInfoEvent = 1;
  8521  0008E0  0E01               	movlw	1
  8522  0008E2  6FC9               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8523                           
  8524                           ; BSR set to: 0
  8525                           ;main.c: 1155: if (1 == val) {
  8526  0008E4  0451               	decf	vscp_writeAppReg@val,w,c
  8527  0008E6  E126               	bnz	l337
  8528                           
  8529                           ; BSR set to: 0
  8530                           ;main.c: 1157: LATCbits.LATC4 = 1;
  8531  0008E8  888B               	bsf	3979,4,c	;volatile
  8532                           
  8533                           ; BSR set to: 0
  8534                           ;main.c: 1158: rv = LATCbits.LATC4;
  8535  0008EA  0E00               	movlw	0
  8536  0008EC  B88B               	btfsc	3979,4,c	;volatile
  8537  0008EE  0E01               	movlw	1
  8538  0008F0  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;main.c: 1159: bOn = 1;
  8542  0008F2  0E01               	movlw	1
  8543  0008F4  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;main.c: 1161: if (Read_b_eep(0x43 + 16) & 0x04) {
  8547  0008F6  6A09               	clrf	?_Read_b_eep+1,c
  8548  0008F8  0E53               	movlw	83
  8549  0008FA  6E08               	movwf	?_Read_b_eep,c
  8550  0008FC  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8551  000900  0100               	movlb	0	; () banked
  8552  000902  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8553  000904  A5C6               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8554  000906  D269               	goto	l10867
  8555  000908                     l10595:
  8556                           
  8557                           ; BSR set to: 0
  8558                           ;main.c: 1162: relay_protection_timer[ 6 ] =
  8559                           ;main.c: 1163: Read_b_eep(0x43 + 46) * 256 +
  8560                           ;main.c: 1164: Read_b_eep(0x43 + 47);
  8561  000908  6A09               	clrf	?_Read_b_eep+1,c
  8562  00090A  0E72               	movlw	114
  8563  00090C  6E08               	movwf	?_Read_b_eep,c
  8564  00090E  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8565  000912  0100               	movlb	0	; () banked
  8566  000914  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8567  000916  6A09               	clrf	?_Read_b_eep+1,c
  8568  000918  0E71               	movlw	113
  8569  00091A  6E08               	movwf	?_Read_b_eep,c
  8570  00091C  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8571  000920  0100               	movlb	0	; () banked
  8572  000922  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8573  000924  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8574  000926  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  8575  000928  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8576  00092A  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  8577  00092C  0E00               	movlw	0
  8578  00092E  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8579  000930  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  8580  000932  D253               	goto	l10867
  8581  000934                     l337:
  8582                           
  8583                           ; BSR set to: 0
  8584                           ;main.c: 1168: else if (0 == val) {
  8585  000934  6651               	tstfsz	vscp_writeAppReg@val,c
  8586  000936  D251               	goto	l10867
  8587                           
  8588                           ; BSR set to: 0
  8589                           ;main.c: 1169: LATCbits.LATC4 = 0;
  8590  000938  988B               	bcf	3979,4,c	;volatile
  8591                           
  8592                           ; BSR set to: 0
  8593                           ;main.c: 1170: rv = LATCbits.LATC4;
  8594  00093A  0E00               	movlw	0
  8595  00093C  B88B               	btfsc	3979,4,c	;volatile
  8596  00093E  0E01               	movlw	1
  8597  000940  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8598  000942  D6DB               	goto	l10481
  8599  000944                     l10605:
  8600                           
  8601                           ; BSR set to: 0
  8602  000944  51CD               	movf	vscp_writeAppReg@reg& (0+255),w,b
  8603                           
  8604                           ; Switch size 1, requested type "space"
  8605                           ; Number of cases is 7, Range of values is 2 to 8
  8606                           ; switch strategies available:
  8607                           ; Name         Instructions Cycles
  8608                           ; simple_byte           22    12 (average)
  8609                           ;	Chosen strategy is simple_byte
  8610  000946  0A02               	xorlw	2	; case 2
  8611  000948  E101 D6A6          	bz	l10463
  8612  00094C  0A01               	xorlw	1	; case 3
  8613  00094E  E101 D6D6          	bz	l10483
  8614  000952  0A07               	xorlw	7	; case 4
  8615  000954  E101 D6FC          	bz	l10503
  8616  000958  0A01               	xorlw	1	; case 5
  8617  00095A  E101 D72B          	bz	l10523
  8618  00095E  0A03               	xorlw	3	; case 6
  8619  000960  E101 D75A          	bz	l10543
  8620  000964  0A01               	xorlw	1	; case 7
  8621  000966  E08A               	bz	l10563
  8622  000968  0A0F               	xorlw	15	; case 8
  8623  00096A  E0BA               	bz	l10583
  8624                           
  8625                           ; BSR set to: 0
  8626                           ;main.c: 1176: }
  8627                           ;main.c: 1177: }
  8628  00096C  D236               	goto	l10867
  8629  00096E                     l10607:
  8630                           
  8631                           ; BSR set to: 0
  8632                           ;main.c: 1180: else if ( (reg >= 10 ) &&
  8633                           ;main.c: 1181: (reg <= 17) ) {
  8634  00096E  0E09               	movlw	9
  8635  000970  65CD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8636  000972  D12D               	goto	l10785
  8637                           
  8638                           ; BSR set to: 0
  8639  000974  0E12               	movlw	18
  8640  000976  61CD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8641  000978  D12A               	goto	l10785
  8642  00097A  D115               	goto	l10783
  8643  00097C                     l10613:
  8644                           
  8645                           ; BSR set to: 0
  8646                           ;main.c: 1187: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8647  00097C  EC73  F01E         	call	_Busy_eep	;wreg free
  8648  000980  DA65               	call	PL4	;call to abstracted procedure
  8649  000982  EC59  F01C         	call	_Write_b_eep	;wreg free
  8650                           
  8651                           ;main.c: 1188: rv = Read_b_eep(0x43 + reg);
  8652  000986  DA6C               	call	PL6	;call to abstracted procedure
  8653  000988  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8654  00098C  0100               	movlb	0	; () banked
  8655  00098E  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8656                           
  8657                           ; BSR set to: 0
  8658                           ;main.c: 1190: if ( val & 0x01 ) {
  8659  000990  A051               	btfss	vscp_writeAppReg@val,0,c
  8660  000992  D011               	goto	l10627
  8661                           
  8662                           ; BSR set to: 0
  8663                           ;main.c: 1192: LATBbits.LATB4 = 0;
  8664  000994  988A               	bcf	3978,4,c	;volatile
  8665                           
  8666                           ;main.c: 1193: bOn = 0;
  8667  000996  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8668                           
  8669                           ; BSR set to: 0
  8670                           ;main.c: 1195: relay_pulse_flags |= 0x01;
  8671  000998  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  8672                           
  8673                           ; BSR set to: 0
  8674                           ;main.c: 1196: relay_pulse_timer[ 0 ] =
  8675                           ;main.c: 1197: Read_b_eep(0x43 + 18) * 256 +
  8676                           ;main.c: 1198: Read_b_eep(0x43 + 19);
  8677  00099A  6A09               	clrf	?_Read_b_eep+1,c
  8678  00099C  0E56               	movlw	86
  8679  00099E  6E08               	movwf	?_Read_b_eep,c
  8680  0009A0  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8681  0009A4  0100               	movlb	0	; () banked
  8682  0009A6  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8683  0009A8  6A09               	clrf	?_Read_b_eep+1,c
  8684  0009AA  0E55               	movlw	85
  8685  0009AC  6E08               	movwf	?_Read_b_eep,c
  8686  0009AE  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8687  0009B2  DA5E               	call	PL36	;call to abstracted procedure
  8688                           
  8689                           ;main.c: 1199: }
  8690  0009B4  D003               	goto	l10633
  8691  0009B6                     l10627:
  8692                           
  8693                           ; BSR set to: 0
  8694                           ;main.c: 1200: else {
  8695                           ;main.c: 1201: relay_pulse_flags &= 0b11111110;
  8696  0009B6  918A               	bcf	_relay_pulse_flags& (0+255),0,b
  8697                           
  8698                           ; BSR set to: 0
  8699                           ;main.c: 1202: LATBbits.LATB4 = 0;
  8700  0009B8  988A               	bcf	3978,4,c	;volatile
  8701                           
  8702                           ; BSR set to: 0
  8703                           ;main.c: 1203: bOn = 0;
  8704  0009BA  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8705  0009BC                     l10633:
  8706                           
  8707                           ; BSR set to: 0
  8708                           ;main.c: 1204: }
  8709                           ;main.c: 1206: if ( val & 0x04 ) {
  8710  0009BC  B451               	btfsc	vscp_writeAppReg@val,2,c
  8711  0009BE  D680               	goto	l10475
  8712  0009C0  D20C               	goto	l10867
  8713  0009C2                     l10637:
  8714                           
  8715                           ; BSR set to: 0
  8716                           ;main.c: 1215: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8717  0009C2  EC73  F01E         	call	_Busy_eep	;wreg free
  8718  0009C6  DA42               	call	PL4	;call to abstracted procedure
  8719  0009C8  EC59  F01C         	call	_Write_b_eep	;wreg free
  8720                           
  8721                           ;main.c: 1216: rv = Read_b_eep(0x43 + reg);
  8722  0009CC  DA49               	call	PL6	;call to abstracted procedure
  8723  0009CE  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8724  0009D2  0100               	movlb	0	; () banked
  8725  0009D4  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8726                           
  8727                           ; BSR set to: 0
  8728                           ;main.c: 1218: if ( val & 0x01 ) {
  8729  0009D6  A051               	btfss	vscp_writeAppReg@val,0,c
  8730  0009D8  D012               	goto	l10651
  8731                           
  8732                           ; BSR set to: 0
  8733                           ;main.c: 1220: LATBbits.LATB1 = 0;
  8734  0009DA  928A               	bcf	3978,1,c	;volatile
  8735                           
  8736                           ;main.c: 1221: bOn = 0;
  8737  0009DC  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8738                           
  8739                           ; BSR set to: 0
  8740                           ;main.c: 1223: relay_pulse_flags |= 0x02;
  8741  0009DE  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  8742                           
  8743                           ; BSR set to: 0
  8744                           ;main.c: 1224: relay_pulse_timer[ 1 ] =
  8745                           ;main.c: 1225: Read_b_eep(0x43 + 18) * 256 +
  8746                           ;main.c: 1226: Read_b_eep(0x43 + 19);
  8747  0009E0  6A09               	clrf	?_Read_b_eep+1,c
  8748  0009E2  0E56               	movlw	86
  8749  0009E4  6E08               	movwf	?_Read_b_eep,c
  8750  0009E6  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8751  0009EA  0100               	movlb	0	; () banked
  8752  0009EC  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8753  0009EE  6A09               	clrf	?_Read_b_eep+1,c
  8754  0009F0  0E55               	movlw	85
  8755  0009F2  6E08               	movwf	?_Read_b_eep,c
  8756  0009F4  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8757  0009F8  0100               	movlb	0	; () banked
  8758  0009FA  DA44               	call	PL56	;call to abstracted procedure
  8759                           
  8760                           ;main.c: 1227: }
  8761  0009FC  D003               	goto	l10657
  8762  0009FE                     l10651:
  8763                           
  8764                           ; BSR set to: 0
  8765                           ;main.c: 1228: else {
  8766                           ;main.c: 1229: relay_pulse_flags &= 0b11111101;
  8767  0009FE  938A               	bcf	_relay_pulse_flags& (0+255),1,b
  8768                           
  8769                           ; BSR set to: 0
  8770                           ;main.c: 1230: LATBbits.LATB1 = 0;
  8771  000A00  928A               	bcf	3978,1,c	;volatile
  8772                           
  8773                           ; BSR set to: 0
  8774                           ;main.c: 1231: bOn = 0;
  8775  000A02  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8776  000A04                     l10657:
  8777                           
  8778                           ; BSR set to: 0
  8779                           ;main.c: 1232: }
  8780                           ;main.c: 1234: if ( val & 0x04 ) {
  8781  000A04  A451               	btfss	vscp_writeAppReg@val,2,c
  8782  000A06  D1E9               	goto	l10867
  8783                           
  8784                           ; BSR set to: 0
  8785                           ;main.c: 1235: relay_protection_timer[ 1 ] =
  8786                           ;main.c: 1236: Read_b_eep(0x43 + 34) * 256 +
  8787                           ;main.c: 1237: Read_b_eep(0x43 + 35);
  8788  000A08  6A09               	clrf	?_Read_b_eep+1,c
  8789  000A0A  0E66               	movlw	102
  8790  000A0C  6E08               	movwf	?_Read_b_eep,c
  8791  000A0E  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8792  000A12  0100               	movlb	0	; () banked
  8793  000A14  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8794  000A16  6A09               	clrf	?_Read_b_eep+1,c
  8795  000A18  0E65               	movlw	101
  8796  000A1A  6E08               	movwf	?_Read_b_eep,c
  8797  000A1C  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8798  000A20                     L28:
  8799  000A20  0100               	movlb	0	; () banked
  8800  000A22  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8801  000A24  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8802  000A26  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  8803  000A28  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8804  000A2A  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  8805  000A2C  0E00               	movlw	0
  8806  000A2E  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8807  000A30  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  8808  000A32  D1D3               	goto	l10867
  8809  000A34                     l10661:
  8810                           
  8811                           ; BSR set to: 0
  8812                           ;main.c: 1243: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8813  000A34  EC73  F01E         	call	_Busy_eep	;wreg free
  8814  000A38  DA09               	call	PL4	;call to abstracted procedure
  8815  000A3A  EC59  F01C         	call	_Write_b_eep	;wreg free
  8816                           
  8817                           ;main.c: 1244: rv = Read_b_eep(0x43 + reg);
  8818  000A3E  DA10               	call	PL6	;call to abstracted procedure
  8819  000A40  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8820  000A44  0100               	movlb	0	; () banked
  8821  000A46  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8822                           
  8823                           ; BSR set to: 0
  8824                           ;main.c: 1246: if ( val & 0x01 ) {
  8825  000A48  A051               	btfss	vscp_writeAppReg@val,0,c
  8826  000A4A  D013               	goto	l10675
  8827                           
  8828                           ; BSR set to: 0
  8829                           ;main.c: 1248: LATBbits.LATB0 = 0;
  8830  000A4C  908A               	bcf	3978,0,c	;volatile
  8831                           
  8832                           ;main.c: 1249: bOn = 0;
  8833  000A4E  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8834                           
  8835                           ; BSR set to: 0
  8836                           ;main.c: 1251: relay_pulse_flags |= 0x04;
  8837  000A50  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  8838                           
  8839                           ; BSR set to: 0
  8840                           ;main.c: 1252: relay_pulse_timer[ 2 ] =
  8841                           ;main.c: 1253: Read_b_eep(0x43 + 22) * 256 +
  8842                           ;main.c: 1254: Read_b_eep(0x43 + 23);
  8843  000A52  6A09               	clrf	?_Read_b_eep+1,c
  8844  000A54  0E5A               	movlw	90
  8845  000A56  6E08               	movwf	?_Read_b_eep,c
  8846  000A58  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8847  000A5C  0100               	movlb	0	; () banked
  8848  000A5E  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8849  000A60  6A09               	clrf	?_Read_b_eep+1,c
  8850  000A62  0E59               	movlw	89
  8851  000A64  6E08               	movwf	?_Read_b_eep,c
  8852  000A66  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8853  000A6A  0100               	movlb	0	; () banked
  8854  000A6C  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8855  000A6E  DA13               	call	PL58	;call to abstracted procedure
  8856                           
  8857                           ;main.c: 1255: }
  8858  000A70  D003               	goto	l10681
  8859  000A72                     l10675:
  8860                           
  8861                           ; BSR set to: 0
  8862                           ;main.c: 1256: else {
  8863                           ;main.c: 1257: relay_pulse_flags &= 0b11111011;
  8864  000A72  958A               	bcf	_relay_pulse_flags& (0+255),2,b
  8865                           
  8866                           ; BSR set to: 0
  8867                           ;main.c: 1258: LATBbits.LATB0 = 0;
  8868  000A74  908A               	bcf	3978,0,c	;volatile
  8869                           
  8870                           ; BSR set to: 0
  8871                           ;main.c: 1259: bOn = 0;
  8872  000A76  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8873  000A78                     l10681:
  8874                           
  8875                           ; BSR set to: 0
  8876                           ;main.c: 1260: }
  8877                           ;main.c: 1262: if ( val & 0x04 ) {
  8878  000A78  B451               	btfsc	vscp_writeAppReg@val,2,c
  8879  000A7A  D67E               	goto	l10515
  8880  000A7C  D1AE               	goto	l10867
  8881  000A7E                     l10685:
  8882                           
  8883                           ; BSR set to: 0
  8884                           ;main.c: 1271: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8885  000A7E  EC73  F01E         	call	_Busy_eep	;wreg free
  8886  000A82  D9E4               	call	PL4	;call to abstracted procedure
  8887  000A84  EC59  F01C         	call	_Write_b_eep	;wreg free
  8888                           
  8889                           ;main.c: 1272: rv = Read_b_eep(0x43 + reg);
  8890  000A88  D9EB               	call	PL6	;call to abstracted procedure
  8891  000A8A  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8892  000A8E  0100               	movlb	0	; () banked
  8893  000A90  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8894                           
  8895                           ; BSR set to: 0
  8896                           ;main.c: 1274: if ( val & 0x01 ) {
  8897  000A92  A051               	btfss	vscp_writeAppReg@val,0,c
  8898  000A94  D013               	goto	l10699
  8899                           
  8900                           ; BSR set to: 0
  8901                           ;main.c: 1276: LATCbits.LATC7 = 0;
  8902  000A96  9E8B               	bcf	3979,7,c	;volatile
  8903                           
  8904                           ;main.c: 1277: bOn = 0;
  8905  000A98  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8906                           
  8907                           ; BSR set to: 0
  8908                           ;main.c: 1279: relay_pulse_flags |= 0x08;
  8909  000A9A  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  8910                           
  8911                           ; BSR set to: 0
  8912                           ;main.c: 1280: relay_pulse_timer[ 3 ] =
  8913                           ;main.c: 1281: Read_b_eep(0x43 + 24) * 256 +
  8914                           ;main.c: 1282: Read_b_eep(0x43 + 25);
  8915  000A9C  6A09               	clrf	?_Read_b_eep+1,c
  8916  000A9E  0E5C               	movlw	92
  8917  000AA0  6E08               	movwf	?_Read_b_eep,c
  8918  000AA2  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8919  000AA6  0100               	movlb	0	; () banked
  8920  000AA8  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8921  000AAA  6A09               	clrf	?_Read_b_eep+1,c
  8922  000AAC  0E5B               	movlw	91
  8923  000AAE  6E08               	movwf	?_Read_b_eep,c
  8924  000AB0  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8925  000AB4  0100               	movlb	0	; () banked
  8926  000AB6  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8927  000AB8  D9F6               	call	PL60	;call to abstracted procedure
  8928                           
  8929                           ;main.c: 1283: }
  8930  000ABA  D003               	goto	l10705
  8931  000ABC                     l10699:
  8932                           
  8933                           ; BSR set to: 0
  8934                           ;main.c: 1284: else {
  8935                           ;main.c: 1285: relay_pulse_flags &= 0b11110111;
  8936  000ABC  978A               	bcf	_relay_pulse_flags& (0+255),3,b
  8937                           
  8938                           ; BSR set to: 0
  8939                           ;main.c: 1286: LATCbits.LATC7 = 0;
  8940  000ABE  9E8B               	bcf	3979,7,c	;volatile
  8941                           
  8942                           ; BSR set to: 0
  8943                           ;main.c: 1287: bOn = 0;
  8944  000AC0  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8945  000AC2                     l10705:
  8946                           
  8947                           ; BSR set to: 0
  8948                           ;main.c: 1288: }
  8949                           ;main.c: 1290: if ( val & 0x04 ) {
  8950  000AC2  B451               	btfsc	vscp_writeAppReg@val,2,c
  8951  000AC4  D68B               	goto	l10535
  8952  000AC6  D189               	goto	l10867
  8953  000AC8                     l10709:
  8954                           
  8955                           ; BSR set to: 0
  8956                           ;main.c: 1299: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  8957  000AC8  EC73  F01E         	call	_Busy_eep	;wreg free
  8958  000ACC  D9BF               	call	PL4	;call to abstracted procedure
  8959  000ACE  EC59  F01C         	call	_Write_b_eep	;wreg free
  8960                           
  8961                           ;main.c: 1300: rv = Read_b_eep(0x43 + reg);
  8962  000AD2  D9C6               	call	PL6	;call to abstracted procedure
  8963  000AD4  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8964  000AD8  0100               	movlb	0	; () banked
  8965  000ADA  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  8966                           
  8967                           ; BSR set to: 0
  8968                           ;main.c: 1302: if ( val & 0x01 ) {
  8969  000ADC  A051               	btfss	vscp_writeAppReg@val,0,c
  8970  000ADE  D013               	goto	l10723
  8971                           
  8972                           ; BSR set to: 0
  8973                           ;main.c: 1304: LATCbits.LATC6 = 0;
  8974  000AE0  9C8B               	bcf	3979,6,c	;volatile
  8975                           
  8976                           ;main.c: 1305: bOn = 0;
  8977  000AE2  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8978                           
  8979                           ; BSR set to: 0
  8980                           ;main.c: 1307: relay_pulse_flags |= 0x10;
  8981  000AE4  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  8982                           
  8983                           ; BSR set to: 0
  8984                           ;main.c: 1308: relay_pulse_timer[ 4 ] =
  8985                           ;main.c: 1309: Read_b_eep(0x43 + 26) * 256 +
  8986                           ;main.c: 1310: Read_b_eep(0x43 + 27);
  8987  000AE6  6A09               	clrf	?_Read_b_eep+1,c
  8988  000AE8  0E5E               	movlw	94
  8989  000AEA  6E08               	movwf	?_Read_b_eep,c
  8990  000AEC  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8991  000AF0  0100               	movlb	0	; () banked
  8992  000AF2  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  8993  000AF4  6A09               	clrf	?_Read_b_eep+1,c
  8994  000AF6  0E5D               	movlw	93
  8995  000AF8  6E08               	movwf	?_Read_b_eep,c
  8996  000AFA  EC3F  F01E         	call	_Read_b_eep	;wreg free
  8997  000AFE  0100               	movlb	0	; () banked
  8998  000B00  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8999  000B02  D9E9               	call	PL68	;call to abstracted procedure
  9000                           
  9001                           ;main.c: 1311: }
  9002  000B04  D003               	goto	l10729
  9003  000B06                     l10723:
  9004                           
  9005                           ; BSR set to: 0
  9006                           ;main.c: 1312: else {
  9007                           ;main.c: 1313: relay_pulse_flags &= 0b11101111;
  9008  000B06  998A               	bcf	_relay_pulse_flags& (0+255),4,b
  9009                           
  9010                           ; BSR set to: 0
  9011                           ;main.c: 1314: LATCbits.LATC6 = 0;
  9012  000B08  9C8B               	bcf	3979,6,c	;volatile
  9013                           
  9014                           ; BSR set to: 0
  9015                           ;main.c: 1315: bOn = 0;
  9016  000B0A  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9017  000B0C                     l10729:
  9018                           
  9019                           ; BSR set to: 0
  9020                           ;main.c: 1316: }
  9021                           ;main.c: 1318: if ( val & 0x04 ) {
  9022  000B0C  B451               	btfsc	vscp_writeAppReg@val,2,c
  9023  000B0E  D698               	goto	l10555
  9024  000B10  D164               	goto	l10867
  9025  000B12                     l10733:
  9026                           
  9027                           ; BSR set to: 0
  9028                           ;main.c: 1327: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9029  000B12  EC73  F01E         	call	_Busy_eep	;wreg free
  9030  000B16  D99A               	call	PL4	;call to abstracted procedure
  9031  000B18  EC59  F01C         	call	_Write_b_eep	;wreg free
  9032                           
  9033                           ;main.c: 1328: rv = Read_b_eep(0x43 + reg);
  9034  000B1C  D9A1               	call	PL6	;call to abstracted procedure
  9035  000B1E  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9036  000B22  0100               	movlb	0	; () banked
  9037  000B24  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  9038                           
  9039                           ; BSR set to: 0
  9040                           ;main.c: 1330: if ( val & 0x01 ) {
  9041  000B26  A051               	btfss	vscp_writeAppReg@val,0,c
  9042  000B28  D013               	goto	l10747
  9043                           
  9044                           ; BSR set to: 0
  9045                           ;main.c: 1332: LATCbits.LATC5 = 0;
  9046  000B2A  9A8B               	bcf	3979,5,c	;volatile
  9047                           
  9048                           ;main.c: 1333: bOn = 0;
  9049  000B2C  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9050                           
  9051                           ; BSR set to: 0
  9052                           ;main.c: 1335: relay_pulse_flags |= 0x20;
  9053  000B2E  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  9054                           
  9055                           ; BSR set to: 0
  9056                           ;main.c: 1336: relay_pulse_timer[ 5 ] =
  9057                           ;main.c: 1337: Read_b_eep(0x43 + 28) * 256 +
  9058                           ;main.c: 1338: Read_b_eep(0x43 + 29);
  9059  000B30  6A09               	clrf	?_Read_b_eep+1,c
  9060  000B32  0E60               	movlw	96
  9061  000B34  6E08               	movwf	?_Read_b_eep,c
  9062  000B36  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9063  000B3A  0100               	movlb	0	; () banked
  9064  000B3C  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9065  000B3E  6A09               	clrf	?_Read_b_eep+1,c
  9066  000B40  0E5F               	movlw	95
  9067  000B42  6E08               	movwf	?_Read_b_eep,c
  9068  000B44  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9069  000B48  0100               	movlb	0	; () banked
  9070  000B4A  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9071  000B4C  D9BC               	call	PL66	;call to abstracted procedure
  9072                           
  9073                           ;main.c: 1339: }
  9074  000B4E  D003               	goto	l10753
  9075  000B50                     l10747:
  9076                           
  9077                           ; BSR set to: 0
  9078                           ;main.c: 1340: else {
  9079                           ;main.c: 1341: relay_pulse_flags &= 0b11011111;
  9080  000B50  9B8A               	bcf	_relay_pulse_flags& (0+255),5,b
  9081                           
  9082                           ; BSR set to: 0
  9083                           ;main.c: 1342: LATCbits.LATC5 = 0;
  9084  000B52  9A8B               	bcf	3979,5,c	;volatile
  9085                           
  9086                           ; BSR set to: 0
  9087                           ;main.c: 1343: bOn = 0;
  9088  000B54  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9089  000B56                     l10753:
  9090                           
  9091                           ; BSR set to: 0
  9092                           ;main.c: 1344: }
  9093                           ;main.c: 1346: if ( val & 0x04 ) {
  9094  000B56  B451               	btfsc	vscp_writeAppReg@val,2,c
  9095  000B58  D6A5               	goto	l10575
  9096  000B5A  D13F               	goto	l10867
  9097  000B5C                     l10757:
  9098                           
  9099                           ; BSR set to: 0
  9100                           ;main.c: 1355: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9101  000B5C  EC73  F01E         	call	_Busy_eep	;wreg free
  9102  000B60  D975               	call	PL4	;call to abstracted procedure
  9103  000B62  EC59  F01C         	call	_Write_b_eep	;wreg free
  9104                           
  9105                           ;main.c: 1356: rv = Read_b_eep(0x43 + reg);
  9106  000B66  D97C               	call	PL6	;call to abstracted procedure
  9107  000B68  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9108  000B6C  0100               	movlb	0	; () banked
  9109  000B6E  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  9110                           
  9111                           ; BSR set to: 0
  9112                           ;main.c: 1358: if ( val & 0x01 ) {
  9113  000B70  A051               	btfss	vscp_writeAppReg@val,0,c
  9114  000B72  D013               	goto	l10771
  9115                           
  9116                           ; BSR set to: 0
  9117                           ;main.c: 1360: LATCbits.LATC4 = 0;
  9118  000B74  988B               	bcf	3979,4,c	;volatile
  9119                           
  9120                           ;main.c: 1361: bOn = 0;
  9121  000B76  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9122                           
  9123                           ; BSR set to: 0
  9124                           ;main.c: 1363: relay_pulse_flags |= 0x40;
  9125  000B78  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  9126                           
  9127                           ; BSR set to: 0
  9128                           ;main.c: 1364: relay_pulse_timer[ 6 ] =
  9129                           ;main.c: 1365: Read_b_eep(0x43 + 30) * 256 +
  9130                           ;main.c: 1366: Read_b_eep(0x43 + 31);
  9131  000B7A  6A09               	clrf	?_Read_b_eep+1,c
  9132  000B7C  0E62               	movlw	98
  9133  000B7E  6E08               	movwf	?_Read_b_eep,c
  9134  000B80  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9135  000B84  0100               	movlb	0	; () banked
  9136  000B86  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9137  000B88  6A09               	clrf	?_Read_b_eep+1,c
  9138  000B8A  0E61               	movlw	97
  9139  000B8C  6E08               	movwf	?_Read_b_eep,c
  9140  000B8E  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9141  000B92  0100               	movlb	0	; () banked
  9142  000B94  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9143  000B96  D98F               	call	PL62	;call to abstracted procedure
  9144                           
  9145                           ;main.c: 1367: }
  9146  000B98  D003               	goto	l10777
  9147  000B9A                     l10771:
  9148                           
  9149                           ; BSR set to: 0
  9150                           ;main.c: 1368: else {
  9151                           ;main.c: 1369: relay_pulse_flags &= 0b10111111;
  9152  000B9A  9D8A               	bcf	_relay_pulse_flags& (0+255),6,b
  9153                           
  9154                           ; BSR set to: 0
  9155                           ;main.c: 1370: LATCbits.LATC7 = 0;
  9156  000B9C  9E8B               	bcf	3979,7,c	;volatile
  9157                           
  9158                           ; BSR set to: 0
  9159                           ;main.c: 1371: bOn = 0;
  9160  000B9E  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9161  000BA0                     l10777:
  9162                           
  9163                           ; BSR set to: 0
  9164                           ;main.c: 1372: }
  9165                           ;main.c: 1374: if ( val & 0x04 ) {
  9166  000BA0  B451               	btfsc	vscp_writeAppReg@val,2,c
  9167  000BA2  D6B2               	goto	l10595
  9168  000BA4  D11A               	goto	l10867
  9169  000BA6                     l10783:
  9170                           
  9171                           ; BSR set to: 0
  9172  000BA6  51CD               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9173                           
  9174                           ; Switch size 1, requested type "space"
  9175                           ; Number of cases is 7, Range of values is 10 to 16
  9176                           ; switch strategies available:
  9177                           ; Name         Instructions Cycles
  9178                           ; simple_byte           22    12 (average)
  9179                           ;	Chosen strategy is simple_byte
  9180  000BA8  0A0A               	xorlw	10	; case 10
  9181  000BAA  E101 D6E7          	bz	l10613
  9182  000BAE  0A01               	xorlw	1	; case 11
  9183  000BB0  E101 D707          	bz	l10637
  9184  000BB4  0A07               	xorlw	7	; case 12
  9185  000BB6  E101 D73D          	bz	l10661
  9186  000BBA  0A01               	xorlw	1	; case 13
  9187  000BBC  E101 D75F          	bz	l10685
  9188  000BC0  0A03               	xorlw	3	; case 14
  9189  000BC2  E082               	bz	l10709
  9190  000BC4  0A01               	xorlw	1	; case 15
  9191  000BC6  E0A5               	bz	l10733
  9192  000BC8  0A1F               	xorlw	31	; case 16
  9193  000BCA  E0C8               	bz	l10757
  9194  000BCC  D106               	goto	l10867
  9195  000BCE                     l10785:
  9196                           
  9197                           ; BSR set to: 0
  9198                           ;main.c: 1385: else if ( (reg >= 18 ) &&
  9199                           ;main.c: 1386: (reg <= 33 ) ) {
  9200  000BCE  0E11               	movlw	17
  9201  000BD0  65CD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9202  000BD2  D0A4               	goto	l10815
  9203                           
  9204                           ; BSR set to: 0
  9205  000BD4  0E22               	movlw	34
  9206  000BD6  61CD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9207  000BD8  D0A1               	goto	l10815
  9208                           
  9209                           ; BSR set to: 0
  9210                           ;main.c: 1389: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9211  000BDA  EC73  F01E         	call	_Busy_eep	;wreg free
  9212  000BDE  D936               	call	PL4	;call to abstracted procedure
  9213  000BE0  EC59  F01C         	call	_Write_b_eep	;wreg free
  9214                           
  9215                           ;main.c: 1390: rv = Read_b_eep(0x43 + reg);
  9216  000BE4  D93D               	call	PL6	;call to abstracted procedure
  9217  000BE6  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9218  000BEA  0100               	movlb	0	; () banked
  9219  000BEC  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  9220                           
  9221                           ;main.c: 1394: switch ( reg ) {
  9222  000BEE  D083               	goto	l10813
  9223  000BF0                     l10795:
  9224                           
  9225                           ; BSR set to: 0
  9226                           ;main.c: 1397: relay_pulse_timer[ 0 ] =
  9227                           ;main.c: 1398: Read_b_eep(0x43 + 18) * 256 +
  9228                           ;main.c: 1399: Read_b_eep(0x43 + 19);
  9229  000BF0  6A09               	clrf	?_Read_b_eep+1,c
  9230  000BF2  0E56               	movlw	86
  9231  000BF4  6E08               	movwf	?_Read_b_eep,c
  9232  000BF6  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9233  000BFA  0100               	movlb	0	; () banked
  9234  000BFC  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9235  000BFE  6A09               	clrf	?_Read_b_eep+1,c
  9236  000C00  0E55               	movlw	85
  9237  000C02  6E08               	movwf	?_Read_b_eep,c
  9238  000C04  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9239  000C08  D933               	call	PL36	;call to abstracted procedure
  9240                           
  9241                           ;main.c: 1400: break;
  9242  000C0A  D0E7               	goto	l10867
  9243  000C0C                     l10797:
  9244                           
  9245                           ; BSR set to: 0
  9246                           ;main.c: 1403: relay_pulse_timer[ 1 ] =
  9247                           ;main.c: 1404: Read_b_eep(0x43 + 20) * 256 +
  9248                           ;main.c: 1405: Read_b_eep(0x43 + 21);
  9249  000C0C  6A09               	clrf	?_Read_b_eep+1,c
  9250  000C0E  0E58               	movlw	88
  9251  000C10  6E08               	movwf	?_Read_b_eep,c
  9252  000C12  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9253  000C16  0100               	movlb	0	; () banked
  9254  000C18  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9255  000C1A  6A09               	clrf	?_Read_b_eep+1,c
  9256  000C1C  0E57               	movlw	87
  9257  000C1E  6E08               	movwf	?_Read_b_eep,c
  9258  000C20  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9259  000C24  0100               	movlb	0	; () banked
  9260  000C26  D92E               	call	PL56	;call to abstracted procedure
  9261                           
  9262                           ;main.c: 1406: break;
  9263  000C28  D0D8               	goto	l10867
  9264  000C2A                     l10799:
  9265                           
  9266                           ; BSR set to: 0
  9267                           ;main.c: 1409: relay_pulse_timer[ 2 ] =
  9268                           ;main.c: 1410: Read_b_eep(0x43 + 22) * 256 +
  9269                           ;main.c: 1411: Read_b_eep(0x43 + 23);
  9270  000C2A  6A09               	clrf	?_Read_b_eep+1,c
  9271  000C2C  0E5A               	movlw	90
  9272  000C2E  6E08               	movwf	?_Read_b_eep,c
  9273  000C30  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9274  000C34  0100               	movlb	0	; () banked
  9275  000C36  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9276  000C38  6A09               	clrf	?_Read_b_eep+1,c
  9277  000C3A  0E59               	movlw	89
  9278  000C3C  6E08               	movwf	?_Read_b_eep,c
  9279  000C3E  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9280  000C42  0100               	movlb	0	; () banked
  9281  000C44  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9282  000C46  D927               	call	PL58	;call to abstracted procedure
  9283                           
  9284                           ;main.c: 1412: break;
  9285  000C48  D0C8               	goto	l10867
  9286  000C4A                     l10801:
  9287                           
  9288                           ; BSR set to: 0
  9289                           ;main.c: 1415: relay_pulse_timer[ 3 ] =
  9290                           ;main.c: 1416: Read_b_eep(0x43 + 24) * 256 +
  9291                           ;main.c: 1417: Read_b_eep(0x43 + 25);
  9292  000C4A  6A09               	clrf	?_Read_b_eep+1,c
  9293  000C4C  0E5C               	movlw	92
  9294  000C4E  6E08               	movwf	?_Read_b_eep,c
  9295  000C50  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9296  000C54  0100               	movlb	0	; () banked
  9297  000C56  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9298  000C58  6A09               	clrf	?_Read_b_eep+1,c
  9299  000C5A  0E5B               	movlw	91
  9300  000C5C  6E08               	movwf	?_Read_b_eep,c
  9301  000C5E  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9302  000C62  0100               	movlb	0	; () banked
  9303  000C64  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9304  000C66  D91F               	call	PL60	;call to abstracted procedure
  9305                           
  9306                           ;main.c: 1418: break;
  9307  000C68  D0B8               	goto	l10867
  9308  000C6A                     l10803:
  9309                           
  9310                           ; BSR set to: 0
  9311                           ;main.c: 1421: relay_pulse_timer[ 4 ] =
  9312                           ;main.c: 1422: Read_b_eep(0x43 + 26) * 256 +
  9313                           ;main.c: 1423: Read_b_eep(0x43 + 27);
  9314  000C6A  6A09               	clrf	?_Read_b_eep+1,c
  9315  000C6C  0E5E               	movlw	94
  9316  000C6E  6E08               	movwf	?_Read_b_eep,c
  9317  000C70  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9318  000C74  0100               	movlb	0	; () banked
  9319  000C76  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9320  000C78  6A09               	clrf	?_Read_b_eep+1,c
  9321  000C7A  0E5D               	movlw	93
  9322  000C7C  6E08               	movwf	?_Read_b_eep,c
  9323  000C7E  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9324  000C82  0100               	movlb	0	; () banked
  9325  000C84  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9326  000C86  D927               	call	PL68	;call to abstracted procedure
  9327                           
  9328                           ;main.c: 1424: break;
  9329  000C88  D0A8               	goto	l10867
  9330  000C8A                     l10805:
  9331                           
  9332                           ; BSR set to: 0
  9333                           ;main.c: 1427: relay_pulse_timer[ 5 ] =
  9334                           ;main.c: 1428: Read_b_eep(0x43 + 28) * 256 +
  9335                           ;main.c: 1429: Read_b_eep(0x43 + 29);
  9336  000C8A  6A09               	clrf	?_Read_b_eep+1,c
  9337  000C8C  0E60               	movlw	96
  9338  000C8E  6E08               	movwf	?_Read_b_eep,c
  9339  000C90  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9340  000C94  0100               	movlb	0	; () banked
  9341  000C96  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9342  000C98  6A09               	clrf	?_Read_b_eep+1,c
  9343  000C9A  0E5F               	movlw	95
  9344  000C9C  6E08               	movwf	?_Read_b_eep,c
  9345  000C9E  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9346  000CA2  0100               	movlb	0	; () banked
  9347  000CA4  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9348  000CA6  D90F               	call	PL66	;call to abstracted procedure
  9349                           
  9350                           ;main.c: 1430: break;
  9351  000CA8  D098               	goto	l10867
  9352  000CAA                     l10807:
  9353                           
  9354                           ; BSR set to: 0
  9355                           ;main.c: 1433: relay_pulse_timer[ 6 ] =
  9356                           ;main.c: 1434: Read_b_eep(0x43 + 30) * 256 +
  9357                           ;main.c: 1435: Read_b_eep(0x43 + 31);
  9358  000CAA  6A09               	clrf	?_Read_b_eep+1,c
  9359  000CAC  0E62               	movlw	98
  9360  000CAE  6E08               	movwf	?_Read_b_eep,c
  9361  000CB0  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9362  000CB4  0100               	movlb	0	; () banked
  9363  000CB6  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9364  000CB8  6A09               	clrf	?_Read_b_eep+1,c
  9365  000CBA  0E61               	movlw	97
  9366  000CBC  6E08               	movwf	?_Read_b_eep,c
  9367  000CBE  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9368  000CC2  0100               	movlb	0	; () banked
  9369  000CC4  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9370  000CC6  D8F7               	call	PL62	;call to abstracted procedure
  9371                           
  9372                           ;main.c: 1436: break;
  9373  000CC8  D088               	goto	l10867
  9374  000CCA                     l10809:
  9375                           
  9376                           ; BSR set to: 0
  9377                           ;main.c: 1439: relay_pulse_timer[ 7 ] =
  9378                           ;main.c: 1440: Read_b_eep(0x43 + 32) * 256 +
  9379                           ;main.c: 1441: Read_b_eep(0x43 + 33);
  9380  000CCA  6A09               	clrf	?_Read_b_eep+1,c
  9381  000CCC  0E64               	movlw	100
  9382  000CCE  6E08               	movwf	?_Read_b_eep,c
  9383  000CD0  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9384  000CD4  0100               	movlb	0	; () banked
  9385  000CD6  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9386  000CD8  6A09               	clrf	?_Read_b_eep+1,c
  9387  000CDA  0E63               	movlw	99
  9388  000CDC  6E08               	movwf	?_Read_b_eep,c
  9389  000CDE  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9390  000CE2  0100               	movlb	0	; () banked
  9391  000CE4  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9392  000CE6  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9393  000CE8  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  9394  000CEA  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9395  000CEC  6F7E               	movwf	(_relay_pulse_timer+14)& (0+255),b
  9396  000CEE  0E00               	movlw	0
  9397  000CF0  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9398  000CF2  6F7F               	movwf	(_relay_pulse_timer+15)& (0+255),b
  9399                           
  9400                           ;main.c: 1442: break;
  9401  000CF4  D072               	goto	l10867
  9402  000CF6                     l10813:
  9403                           
  9404                           ; BSR set to: 0
  9405  000CF6  51CD               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9406                           
  9407                           ; Switch size 1, requested type "space"
  9408                           ; Number of cases is 8, Range of values is 19 to 33
  9409                           ; switch strategies available:
  9410                           ; Name         Instructions Cycles
  9411                           ; simple_byte           25    13 (average)
  9412                           ;	Chosen strategy is simple_byte
  9413  000CF8  0A13               	xorlw	19	; case 19
  9414  000CFA  E101 D779          	bz	l10795
  9415  000CFE  0A06               	xorlw	6	; case 21
  9416  000D00  E085               	bz	l10797
  9417  000D02  0A02               	xorlw	2	; case 23
  9418  000D04  E092               	bz	l10799
  9419  000D06  0A0E               	xorlw	14	; case 25
  9420  000D08  E0A0               	bz	l10801
  9421  000D0A  0A02               	xorlw	2	; case 27
  9422  000D0C  E0AE               	bz	l10803
  9423  000D0E  0A06               	xorlw	6	; case 29
  9424  000D10  E0BC               	bz	l10805
  9425  000D12  0A02               	xorlw	2	; case 31
  9426  000D14  E0CA               	bz	l10807
  9427  000D16  0A3E               	xorlw	62	; case 33
  9428  000D18  E0D8               	bz	l10809
  9429  000D1A  D05F               	goto	l10867
  9430  000D1C                     l10815:
  9431                           
  9432                           ; BSR set to: 0
  9433                           ;main.c: 1450: else if ( ( reg >= 34 ) &&
  9434                           ;main.c: 1451: ( reg <= 49 ) ) {
  9435  000D1C  0E21               	movlw	33
  9436  000D1E  65CD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9437  000D20  D03D               	goto	l10845
  9438                           
  9439                           ; BSR set to: 0
  9440  000D22  0E32               	movlw	50
  9441  000D24  61CD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9442  000D26  D03A               	goto	l10845
  9443                           
  9444                           ; BSR set to: 0
  9445                           ;main.c: 1454: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9446  000D28  EC73  F01E         	call	_Busy_eep	;wreg free
  9447  000D2C  D88F               	call	PL4	;call to abstracted procedure
  9448  000D2E  EC59  F01C         	call	_Write_b_eep	;wreg free
  9449                           
  9450                           ;main.c: 1455: rv = Read_b_eep(0x43 + reg);
  9451  000D32  D896               	call	PL6	;call to abstracted procedure
  9452  000D34  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9453  000D38  0100               	movlb	0	; () banked
  9454  000D3A  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  9455                           
  9456                           ;main.c: 1457: switch ( reg ) {
  9457  000D3C  D016               	goto	l10843
  9458  000D3E                     l10839:
  9459                           
  9460                           ; BSR set to: 0
  9461                           ;main.c: 1502: relay_protection_timer[ 7 ] =
  9462                           ;main.c: 1503: Read_b_eep(0x43 + 48) * 256 +
  9463                           ;main.c: 1504: Read_b_eep(0x43 + 49);
  9464  000D3E  6A09               	clrf	?_Read_b_eep+1,c
  9465  000D40  0E74               	movlw	116
  9466  000D42  6E08               	movwf	?_Read_b_eep,c
  9467  000D44  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9468  000D48  0100               	movlb	0	; () banked
  9469  000D4A  6FC6               	movwf	??_vscp_writeAppReg& (0+255),b
  9470  000D4C  6A09               	clrf	?_Read_b_eep+1,c
  9471  000D4E  0E73               	movlw	115
  9472  000D50  6E08               	movwf	?_Read_b_eep,c
  9473  000D52  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9474  000D56  0100               	movlb	0	; () banked
  9475  000D58  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9476  000D5A  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9477  000D5C  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  9478  000D5E  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9479  000D60  6F6E               	movwf	(_relay_protection_timer+14)& (0+255),b
  9480  000D62  0E00               	movlw	0
  9481  000D64  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9482  000D66  6F6F               	movwf	(_relay_protection_timer+15)& (0+255),b
  9483                           
  9484                           ;main.c: 1505: break;
  9485  000D68  D038               	goto	l10867
  9486  000D6A                     l10843:
  9487                           
  9488                           ; BSR set to: 0
  9489  000D6A  51CD               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9490                           
  9491                           ; Switch size 1, requested type "space"
  9492                           ; Number of cases is 8, Range of values is 35 to 49
  9493                           ; switch strategies available:
  9494                           ; Name         Instructions Cycles
  9495                           ; simple_byte           25    13 (average)
  9496                           ;	Chosen strategy is simple_byte
  9497  000D6C  0A23               	xorlw	35	; case 35
  9498  000D6E  E101 D4A7          	bz	l10475
  9499  000D72  0A06               	xorlw	6	; case 37
  9500  000D74  E101 D4D7          	bz	l10495
  9501  000D78  0A02               	xorlw	2	; case 39
  9502  000D7A  E101 D4FD          	bz	l10515
  9503  000D7E  0A0E               	xorlw	14	; case 41
  9504  000D80  E101 D52C          	bz	l10535
  9505  000D84  0A02               	xorlw	2	; case 43
  9506  000D86  E101 D55B          	bz	l10555
  9507  000D8A  0A06               	xorlw	6	; case 45
  9508  000D8C  E101 D58A          	bz	l10575
  9509  000D90  0A02               	xorlw	2	; case 47
  9510  000D92  E101 D5B9          	bz	l10595
  9511  000D96  0A1E               	xorlw	30	; case 49
  9512  000D98  E0D2               	bz	l10839
  9513  000D9A  D01F               	goto	l10867
  9514  000D9C                     l10845:
  9515                           
  9516                           ; BSR set to: 0
  9517                           ;main.c: 1513: else if ( (reg >= 50 ) && (reg <= 65) ) {
  9518  000D9C  0E31               	movlw	49
  9519  000D9E  65CD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9520  000DA0  D00E               	goto	l10855
  9521                           
  9522                           ; BSR set to: 0
  9523  000DA2  0E42               	movlw	66
  9524  000DA4  61CD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9525  000DA6  D00B               	goto	l10855
  9526                           
  9527                           ; BSR set to: 0
  9528                           ;main.c: 1516: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9529  000DA8  EC73  F01E         	call	_Busy_eep	;wreg free
  9530  000DAC  D84F               	call	PL4	;call to abstracted procedure
  9531  000DAE  EC59  F01C         	call	_Write_b_eep	;wreg free
  9532  000DB2                     l10853:
  9533                           
  9534                           ;main.c: 1517: rv = Read_b_eep(0x43 + reg);
  9535  000DB2  D856               	call	PL6	;call to abstracted procedure
  9536  000DB4  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9537  000DB8                     L27:
  9538  000DB8  0100               	movlb	0	; () banked
  9539  000DBA  6FCB               	movwf	vscp_writeAppReg@rv& (0+255),b
  9540                           
  9541                           ;main.c: 1519: }
  9542  000DBC  D00E               	goto	l10867
  9543  000DBE                     l10855:
  9544                           
  9545                           ; BSR set to: 0
  9546                           ;main.c: 1520: else if ( (reg >= 72) &&
  9547                           ;main.c: 1521: (reg < (72 + 7 * 8)) ) {
  9548  000DBE  0E47               	movlw	71
  9549  000DC0  65CD               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9550  000DC2  D00B               	goto	l10867
  9551                           
  9552                           ; BSR set to: 0
  9553  000DC4  0E80               	movlw	128
  9554  000DC6  61CD               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9555  000DC8  D008               	goto	l10867
  9556                           
  9557                           ; BSR set to: 0
  9558                           ;main.c: 1522: (Busy_eep(), Write_b_eep(0x43 + reg,val));
  9559  000DCA  EC73  F01E         	call	_Busy_eep	;wreg free
  9560  000DCE  D83E               	call	PL4	;call to abstracted procedure
  9561  000DD0  EC59  F01C         	call	_Write_b_eep	;wreg free
  9562                           
  9563                           ;main.c: 1523: calculateSetFilterMask();
  9564  000DD4  ECB0  F00C         	call	_calculateSetFilterMask	;wreg free
  9565  000DD8  D7EC               	goto	l10853
  9566  000DDA                     l10867:
  9567                           
  9568                           ; BSR set to: 0
  9569                           ;main.c: 1525: }
  9570                           ;main.c: 1531: if ( bInfoEvent ) {
  9571  000DDA  51C9               	movf	vscp_writeAppReg@bInfoEvent& (0+255),w,b
  9572  000DDC  E035               	bz	l10887
  9573                           
  9574                           ; BSR set to: 0
  9575                           ;main.c: 1533: unsigned char val;
  9576                           ;main.c: 1534: val = Read_b_eep(0x43 + 10 + (reg - 2));
  9577  000DDE  0E4B               	movlw	75
  9578  000DE0  25CD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9579  000DE2  6E08               	movwf	?_Read_b_eep,c
  9580  000DE4  6A09               	clrf	?_Read_b_eep+1,c
  9581  000DE6  0E00               	movlw	0
  9582  000DE8  2209               	addwfc	?_Read_b_eep+1,f,c
  9583  000DEA  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9584  000DEE  0100               	movlb	0	; () banked
  9585  000DF0  6FCA               	movwf	vscp_writeAppReg@val_682& (0+255),b
  9586                           
  9587                           ; BSR set to: 0
  9588                           ;main.c: 1537: if ( bOn ) {
  9589  000DF2  51CC               	movf	vscp_writeAppReg@bOn& (0+255),w,b
  9590  000DF4  E015               	bz	l404
  9591                           
  9592                           ; BSR set to: 0
  9593                           ;main.c: 1539: if ( val & 0x08 ) {
  9594  000DF6  A7CA               	btfss	vscp_writeAppReg@val_682& (0+255),3,b
  9595  000DF8  D008               	goto	l10877
  9596                           
  9597                           ; BSR set to: 0
  9598                           ;main.c: 1540: SendInformationEvent( reg - 2,
  9599                           ;main.c: 1541: 20,
  9600                           ;main.c: 1542: 3 );
  9601  000DFA  0E14               	movlw	20
  9602  000DFC  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  9603  000DFE  0E03               	movlw	3
  9604  000E00  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9605  000E02  51CD               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9606  000E04  0FFE               	addlw	254
  9607  000E06  EC9C  F01B         	call	_SendInformationEvent
  9608  000E0A                     l10877:
  9609                           
  9610                           ; BSR set to: 0
  9611                           ;main.c: 1543: }
  9612                           ;main.c: 1545: if ( val & 0x20 ) {
  9613  000E0A  ABCA               	btfss	vscp_writeAppReg@val_682& (0+255),5,b
  9614  000E0C  D01D               	goto	l10887
  9615                           
  9616                           ; BSR set to: 0
  9617                           ;main.c: 1546: SendInformationEvent( reg - 2,
  9618                           ;main.c: 1547: 20,
  9619                           ;main.c: 1548: 25 );
  9620  000E0E  0E14               	movlw	20
  9621  000E10  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  9622  000E12  0E19               	movlw	25
  9623  000E14  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9624  000E16  51CD               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9625  000E18  0FFE               	addlw	254
  9626  000E1A  EC9C  F01B         	call	_SendInformationEvent
  9627  000E1E  D014               	goto	l10887
  9628  000E20                     l404:
  9629                           
  9630                           ; BSR set to: 0
  9631                           ;main.c: 1552: else {
  9632                           ;main.c: 1554: if ( val & 0x10 ) {
  9633  000E20  A9CA               	btfss	vscp_writeAppReg@val_682& (0+255),4,b
  9634  000E22  D008               	goto	l10883
  9635                           
  9636                           ; BSR set to: 0
  9637                           ;main.c: 1555: SendInformationEvent( reg - 2,
  9638                           ;main.c: 1556: 20,
  9639                           ;main.c: 1557: 4 );
  9640  000E24  0E14               	movlw	20
  9641  000E26  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  9642  000E28  0E04               	movlw	4
  9643  000E2A  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9644  000E2C  51CD               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9645  000E2E  0FFE               	addlw	254
  9646  000E30  EC9C  F01B         	call	_SendInformationEvent
  9647  000E34                     l10883:
  9648                           
  9649                           ; BSR set to: 0
  9650                           ;main.c: 1558: }
  9651                           ;main.c: 1560: if ( val & 0x40 ) {
  9652  000E34  ADCA               	btfss	vscp_writeAppReg@val_682& (0+255),6,b
  9653  000E36  D008               	goto	l10887
  9654                           
  9655                           ; BSR set to: 0
  9656                           ;main.c: 1561: SendInformationEvent( reg - 2,
  9657                           ;main.c: 1562: 20,
  9658                           ;main.c: 1563: 24 );
  9659  000E38  0E14               	movlw	20
  9660  000E3A  6FC4               	movwf	?_SendInformationEvent& (0+255),b
  9661  000E3C  0E18               	movlw	24
  9662  000E3E  6FC5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9663  000E40  51CD               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9664  000E42  0FFE               	addlw	254
  9665  000E44  EC9C  F01B         	call	_SendInformationEvent
  9666  000E48                     l10887:
  9667                           
  9668                           ; BSR set to: 0
  9669                           ;main.c: 1564: }
  9670                           ;main.c: 1565: }
  9671                           ;main.c: 1566: }
  9672                           ;main.c: 1568: return rv;
  9673  000E48  51CB               	movf	vscp_writeAppReg@rv& (0+255),w,b
  9674                           
  9675                           ; BSR set to: 0
  9676  000E4A  0012               	return	
  9677  000E4C                     __end_of_vscp_writeAppReg:
  9678                           	opt stack 0
  9679  000E4C                     PL4:
  9680                           	opt stack 21
  9681  000E4C  0E43               	movlw	67
  9682  000E4E  0100               	movlb	0	; () banked
  9683  000E50  25CD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9684  000E52  6E08               	movwf	?_Write_b_eep,c
  9685  000E54  6A09               	clrf	?_Write_b_eep+1,c
  9686  000E56  0E00               	movlw	0
  9687  000E58  2209               	addwfc	?_Write_b_eep+1,f,c
  9688  000E5A  C051  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9689  000E5E  0C00               	retlw	0
  9690  000E60                     __end_ofPL4:
  9691                           	opt stack 0
  9692  000E60                     PL6:
  9693                           	opt stack 21
  9694  000E60  0E43               	movlw	67
  9695  000E62  0100               	movlb	0	; () banked
  9696  000E64  25CD               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9697  000E66  6E08               	movwf	?_Read_b_eep,c
  9698  000E68  6A09               	clrf	?_Read_b_eep+1,c
  9699  000E6A  0E00               	movlw	0
  9700  000E6C  2209               	addwfc	?_Read_b_eep+1,f,c
  9701  000E6E  0C00               	retlw	0
  9702  000E70                     __end_ofPL6:
  9703                           	opt stack 0
  9704  000E70                     PL36:
  9705                           	opt stack 21
  9706  000E70  0100               	movlb	0	; () banked
  9707  000E72  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9708  000E74  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9709  000E76  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  9710  000E78  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9711  000E7A  6F70               	movwf	_relay_pulse_timer& (0+255),b
  9712  000E7C  0E00               	movlw	0
  9713  000E7E  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9714  000E80  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  9715  000E82  0012               	return	
  9716  000E84                     __end_ofPL36:
  9717                           	opt stack 0
  9718  000E84                     PL56:
  9719                           	opt stack 21
  9720  000E84  6FC8               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9721  000E86  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9722  000E88  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  9723  000E8A  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9724  000E8C  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  9725  000E8E  0E00               	movlw	0
  9726  000E90  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9727  000E92  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  9728  000E94  0012               	return	
  9729  000E96                     __end_ofPL56:
  9730                           	opt stack 0
  9731  000E96                     PL58:
  9732                           	opt stack 21
  9733  000E96  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9734  000E98  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  9735  000E9A  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9736  000E9C  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  9737  000E9E  0E00               	movlw	0
  9738  000EA0  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9739  000EA2  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  9740  000EA4  0012               	return	
  9741  000EA6                     __end_ofPL58:
  9742                           	opt stack 0
  9743  000EA6                     PL60:
  9744                           	opt stack 21
  9745  000EA6  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9746  000EA8  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  9747  000EAA  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9748  000EAC  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  9749  000EAE  0E00               	movlw	0
  9750  000EB0  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9751  000EB2  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  9752  000EB4  0012               	return	
  9753  000EB6                     __end_ofPL60:
  9754                           	opt stack 0
  9755  000EB6                     PL62:
  9756                           	opt stack 21
  9757  000EB6  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9758  000EB8  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  9759  000EBA  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9760  000EBC  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9761  000EBE  0E00               	movlw	0
  9762  000EC0  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9763  000EC2  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9764  000EC4  0012               	return	
  9765  000EC6                     __end_ofPL62:
  9766                           	opt stack 0
  9767  000EC6                     PL66:
  9768                           	opt stack 21
  9769  000EC6  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9770  000EC8  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  9771  000ECA  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9772  000ECC  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9773  000ECE  0E00               	movlw	0
  9774  000ED0  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9775  000ED2  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9776  000ED4  0012               	return	
  9777  000ED6                     __end_ofPL66:
  9778                           	opt stack 0
  9779  000ED6                     PL68:
  9780                           	opt stack 21
  9781  000ED6  6BC7               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9782  000ED8  51C6               	movf	??_vscp_writeAppReg& (0+255),w,b
  9783  000EDA  25C7               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9784  000EDC  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9785  000EDE  0E00               	movlw	0
  9786  000EE0  21C8               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9787  000EE2  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9788  000EE4  0012               	return	
  9789  000EE6                     __end_ofPL68:
  9790                           	opt stack 0
  9791                           tblptru	equ	0xFF8
  9792                           tblptrh	equ	0xFF7
  9793                           tblptrl	equ	0xFF6
  9794                           tablat	equ	0xFF5
  9795                           prodh	equ	0xFF4
  9796                           prodl	equ	0xFF3
  9797                           intcon	equ	0xFF2
  9798                           postinc0	equ	0xFEE
  9799                           wreg	equ	0xFE8
  9800                           indf1	equ	0xFE7
  9801                           fsr1h	equ	0xFE2
  9802                           fsr1l	equ	0xFE1
  9803                           indf2	equ	0xFDF
  9804                           postinc2	equ	0xFDE
  9805                           postdec2	equ	0xFDD
  9806                           plusw2	equ	0xFDB
  9807                           fsr2h	equ	0xFDA
  9808                           fsr2l	equ	0xFD9
  9809                           status	equ	0xFD8
  9810                           
  9811 ;; *************** function _calculateSetFilterMask *****************
  9812 ;; Defined at:
  9813 ;;		line 2635 in file "../main.c"
  9814 ;; Parameters:    Size  Location     Type
  9815 ;;		None
  9816 ;; Auto vars:     Size  Location     Type
  9817 ;;  rowfilter       4   61[COMRAM] unsigned long 
  9818 ;;  filter          4   57[COMRAM] unsigned long 
  9819 ;;  mask            4   53[COMRAM] unsigned long 
  9820 ;;  rowmask         4   48[COMRAM] unsigned long 
  9821 ;;  i               1   66[COMRAM] unsigned char 
  9822 ;;  j               1   65[COMRAM] unsigned char 
  9823 ;;  lastOID         1   52[COMRAM] unsigned char 
  9824 ;; Return value:  Size  Location     Type
  9825 ;;		None               void
  9826 ;; Registers used:
  9827 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9828 ;; Tracked objects:
  9829 ;;		On entry : 0/0
  9830 ;;		On exit  : 0/0
  9831 ;;		Unchanged: 0/0
  9832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9833 ;;      Params:         0       0       0       0       0       0       0
  9834 ;;      Locals:        19       0       0       0       0       0       0
  9835 ;;      Temps:         31       0       0       0       0       0       0
  9836 ;;      Totals:        50       0       0       0       0       0       0
  9837 ;;Total ram usage:       50 bytes
  9838 ;; Hardware stack levels used:    1
  9839 ;; Hardware stack levels required when called:    3
  9840 ;; This function calls:
  9841 ;;		_Read_b_eep
  9842 ;;		_ECANSetOperationMode
  9843 ;;		__CANIDToRegs
  9844 ;; This function is called by:
  9845 ;;		_vscp_writeAppReg
  9846 ;; This function uses a non-reentrant model
  9847 ;;
  9848                           
  9849                           	psect	text25
  9850  001960                     __ptext25:
  9851                           	opt stack 0
  9852  001960                     _calculateSetFilterMask:
  9853                           	opt stack 24
  9854                           
  9855                           ;main.c: 2636: uint8_t i,j;
  9856                           ;main.c: 2637: uint8_t lastOID;
  9857                           ;main.c: 2638: uint32_t rowmask;
  9858                           ;main.c: 2639: uint32_t rowfilter;
  9859                           ;main.c: 2642: uint32_t mask = 0xffffffff;
  9860                           
  9861                           ; BSR set to: 0
  9862                           ;incstack = 0
  9863                           ;incstack = 0
  9864  001960  6836               	setf	calculateSetFilterMask@mask,c
  9865  001962  6837               	setf	calculateSetFilterMask@mask+1,c
  9866  001964  6838               	setf	calculateSetFilterMask@mask+2,c
  9867  001966  6839               	setf	calculateSetFilterMask@mask+3,c
  9868                           
  9869                           ;main.c: 2643: uint32_t filter = 0;
  9870  001968  6A3A               	clrf	calculateSetFilterMask@filter,c
  9871  00196A  6A3B               	clrf	calculateSetFilterMask@filter+1,c
  9872  00196C  6A3C               	clrf	calculateSetFilterMask@filter+2,c
  9873  00196E  6A3D               	clrf	calculateSetFilterMask@filter+3,c
  9874                           
  9875                           ;main.c: 2646: for ( i=0; i < 7; i++ ) {
  9876  001970  6A43               	clrf	calculateSetFilterMask@i,c
  9877  001972                     l9001:
  9878                           
  9879                           ;main.c: 2649: if ( Read_b_eep(0x43 + 8*i + 1) & 0x80 ) {
  9880  001972  5043               	movf	calculateSetFilterMask@i,w,c
  9881  001974  D972               	call	PL10	;call to abstracted procedure
  9882  001976  0E44               	movlw	68
  9883  001978  2412               	addwf	??_calculateSetFilterMask,w,c
  9884  00197A  6E08               	movwf	?_Read_b_eep,c
  9885  00197C  0E00               	movlw	0
  9886  00197E  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9887  001980  6E09               	movwf	?_Read_b_eep+1,c
  9888  001982  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9889  001986  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
  9890  001988  AE14               	btfss	??_calculateSetFilterMask+2,7,c
  9891  00198A  D11A               	goto	l9045
  9892                           
  9893                           ;main.c: 2658: rowmask =
  9894                           ;main.c: 2660: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 2 ) << 23 ) |
  9895                           ;main.c: 2662: ( (uint32_t)Read_b_eep(0x43 + 8*i + 2) << 16 ) |
  9896                           ;main.c: 2664: ( (uint32_t)Read_b_eep(0x43 + 8*i + 4) << 8 ) |
  9897                           ;main.c: 2666: 0xff;
  9898  00198C  5043               	movf	calculateSetFilterMask@i,w,c
  9899  00198E  D965               	call	PL10	;call to abstracted procedure
  9900  001990  0E47               	movlw	71
  9901  001992  2412               	addwf	??_calculateSetFilterMask,w,c
  9902  001994  6E08               	movwf	?_Read_b_eep,c
  9903  001996  0E00               	movlw	0
  9904  001998  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9905  00199A  6E09               	movwf	?_Read_b_eep+1,c
  9906  00199C  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9907  0019A0  D968               	call	PL12	;call to abstracted procedure
  9908  0019A2  0E45               	movlw	69
  9909  0019A4  2419               	addwf	??_calculateSetFilterMask+7,w,c
  9910  0019A6  6E08               	movwf	?_Read_b_eep,c
  9911  0019A8  0E00               	movlw	0
  9912  0019AA  201A               	addwfc	??_calculateSetFilterMask+8,w,c
  9913  0019AC  6E09               	movwf	?_Read_b_eep+1,c
  9914  0019AE  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9915  0019B2  D934               	call	PL8	;call to abstracted procedure
  9916  0019B4  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9917  0019B8  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
  9918  0019BA  0E02               	movlw	2
  9919  0019BC  1622               	andwf	??_calculateSetFilterMask+16,f,c
  9920  0019BE  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
  9921  0019C2  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
  9922  0019C4  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
  9923  0019C6  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
  9924  0019C8  0E17               	movlw	23
  9925  0019CA                     u9975:
  9926  0019CA  90D8               	bcf	status,0,c
  9927  0019CC  3623               	rlcf	??_calculateSetFilterMask+17,f,c
  9928  0019CE  3624               	rlcf	??_calculateSetFilterMask+18,f,c
  9929  0019D0  3625               	rlcf	??_calculateSetFilterMask+19,f,c
  9930  0019D2  3626               	rlcf	??_calculateSetFilterMask+20,f,c
  9931  0019D4  2EE8               	decfsz	wreg,f,c
  9932  0019D6  D7F9               	goto	u9975
  9933  0019D8  501C               	movf	??_calculateSetFilterMask+10,w,c
  9934  0019DA  D965               	call	PL14	;call to abstracted procedure
  9935  0019DC  0EFF               	movlw	255
  9936  0019DE  102B               	iorwf	??_calculateSetFilterMask+25,w,c
  9937  0019E0  6E31               	movwf	calculateSetFilterMask@rowmask,c
  9938  0019E2  502C               	movf	??_calculateSetFilterMask+26,w,c
  9939  0019E4  6E32               	movwf	calculateSetFilterMask@rowmask+1,c
  9940  0019E6  502D               	movf	??_calculateSetFilterMask+27,w,c
  9941  0019E8  6E33               	movwf	calculateSetFilterMask@rowmask+2,c
  9942  0019EA  502E               	movf	??_calculateSetFilterMask+28,w,c
  9943  0019EC  6E34               	movwf	calculateSetFilterMask@rowmask+3,c
  9944                           
  9945                           ;main.c: 2667: ;
  9946                           ;main.c: 2672: rowfilter =
  9947                           ;main.c: 2674: ( (uint32_t)( Read_b_eep(0x43 + 8*i + 1) & 1 ) << 24 ) |
  9948                           ;main.c: 2676: ( (uint32_t)Read_b_eep(0x43 + 8*i + 3) << 16 ) |
  9949                           ;main.c: 2678: ( (uint32_t)Read_b_eep(0x43 + 8*i + 5) << 8 ) |
  9950                           ;main.c: 2681: Read_b_eep(0x43 + 8*i);
  9951  0019EE  5043               	movf	calculateSetFilterMask@i,w,c
  9952  0019F0  D934               	call	PL10	;call to abstracted procedure
  9953  0019F2  0E48               	movlw	72
  9954  0019F4  2412               	addwf	??_calculateSetFilterMask,w,c
  9955  0019F6  6E08               	movwf	?_Read_b_eep,c
  9956  0019F8  0E00               	movlw	0
  9957  0019FA  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9958  0019FC  6E09               	movwf	?_Read_b_eep+1,c
  9959  0019FE  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9960  001A02  D937               	call	PL12	;call to abstracted procedure
  9961  001A04  0E46               	movlw	70
  9962  001A06  2419               	addwf	??_calculateSetFilterMask+7,w,c
  9963  001A08  6E08               	movwf	?_Read_b_eep,c
  9964  001A0A  0E00               	movlw	0
  9965  001A0C  201A               	addwfc	??_calculateSetFilterMask+8,w,c
  9966  001A0E  6E09               	movwf	?_Read_b_eep+1,c
  9967  001A10  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9968  001A14  D903               	call	PL8	;call to abstracted procedure
  9969  001A16  EC3F  F01E         	call	_Read_b_eep	;wreg free
  9970  001A1A  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
  9971  001A1C  0E01               	movlw	1
  9972  001A1E  1622               	andwf	??_calculateSetFilterMask+16,f,c
  9973  001A20  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
  9974  001A24  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
  9975  001A26  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
  9976  001A28  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
  9977  001A2A  C023  F026         	movff	??_calculateSetFilterMask+17,??_calculateSetFilterMask+20
  9978  001A2E  6A25               	clrf	??_calculateSetFilterMask+19,c
  9979  001A30  6A24               	clrf	??_calculateSetFilterMask+18,c
  9980  001A32  6A23               	clrf	??_calculateSetFilterMask+17,c
  9981  001A34  501C               	movf	??_calculateSetFilterMask+10,w,c
  9982  001A36  D937               	call	PL14	;call to abstracted procedure
  9983  001A38  5043               	movf	calculateSetFilterMask@i,w,c
  9984  001A3A  6E2F               	movwf	(??_calculateSetFilterMask+29)& (0+255),c
  9985  001A3C  6A30               	clrf	(??_calculateSetFilterMask+30)& (0+255),c
  9986  001A3E  90D8               	bcf	status,0,c
  9987  001A40  362F               	rlcf	??_calculateSetFilterMask+29,f,c
  9988  001A42  3630               	rlcf	??_calculateSetFilterMask+30,f,c
  9989  001A44  90D8               	bcf	status,0,c
  9990  001A46  362F               	rlcf	??_calculateSetFilterMask+29,f,c
  9991  001A48  3630               	rlcf	??_calculateSetFilterMask+30,f,c
  9992  001A4A  90D8               	bcf	status,0,c
  9993  001A4C  362F               	rlcf	??_calculateSetFilterMask+29,f,c
  9994  001A4E  3630               	rlcf	??_calculateSetFilterMask+30,f,c
  9995  001A50  0E43               	movlw	67
  9996  001A52  242F               	addwf	??_calculateSetFilterMask+29,w,c
  9997  001A54  6E08               	movwf	?_Read_b_eep,c
  9998  001A56  0E00               	movlw	0
  9999  001A58  2030               	addwfc	??_calculateSetFilterMask+30,w,c
 10000  001A5A  6E09               	movwf	?_Read_b_eep+1,c
 10001  001A5C  EC3F  F01E         	call	_Read_b_eep	;wreg free
 10002  001A60  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 10003  001A62  6E3E               	movwf	calculateSetFilterMask@rowfilter,c
 10004  001A64  502C               	movf	??_calculateSetFilterMask+26,w,c
 10005  001A66  6E3F               	movwf	calculateSetFilterMask@rowfilter+1,c
 10006  001A68  502D               	movf	??_calculateSetFilterMask+27,w,c
 10007  001A6A  6E40               	movwf	calculateSetFilterMask@rowfilter+2,c
 10008  001A6C  502E               	movf	??_calculateSetFilterMask+28,w,c
 10009  001A6E  6E41               	movwf	calculateSetFilterMask@rowfilter+3,c
 10010                           
 10011                           ;main.c: 2683: if ( 0 == i ) filter = rowfilter;
 10012  001A70  6643               	tstfsz	calculateSetFilterMask@i,c
 10013  001A72  D008               	goto	l9009
 10014  001A74  C03E  F03A         	movff	calculateSetFilterMask@rowfilter,calculateSetFilterMask@filter
 10015  001A78  C03F  F03B         	movff	calculateSetFilterMask@rowfilter+1,calculateSetFilterMask@filter+1
 10016  001A7C  C040  F03C         	movff	calculateSetFilterMask@rowfilter+2,calculateSetFilterMask@filter+2
 10017  001A80  C041  F03D         	movff	calculateSetFilterMask@rowfilter+3,calculateSetFilterMask@filter+3
 10018  001A84                     l9009:
 10019                           
 10020                           ;main.c: 2687: mask &= rowmask;
 10021  001A84  5031               	movf	calculateSetFilterMask@rowmask,w,c
 10022  001A86  1636               	andwf	calculateSetFilterMask@mask,f,c
 10023  001A88  5032               	movf	calculateSetFilterMask@rowmask+1,w,c
 10024  001A8A  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10025  001A8C  5033               	movf	calculateSetFilterMask@rowmask+2,w,c
 10026  001A8E  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10027  001A90  5034               	movf	calculateSetFilterMask@rowmask+3,w,c
 10028  001A92  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10029                           
 10030                           ;main.c: 2692: for ( j=0; j<32; j++ ) {
 10031  001A94  6A42               	clrf	calculateSetFilterMask@j,c
 10032  001A96                     l9017:
 10033                           
 10034                           ;main.c: 2694: if ( ( ( filter >> j ) & 1 ) != ( ( rowfilter >> j ) & 1 ) ) {
 10035  001A96  5042               	movf	calculateSetFilterMask@j,w,c
 10036  001A98  C03E  F012         	movff	calculateSetFilterMask@rowfilter,??_calculateSetFilterMask
 10037  001A9C  C03F  F013         	movff	calculateSetFilterMask@rowfilter+1,??_calculateSetFilterMask+1
 10038  001AA0  C040  F014         	movff	calculateSetFilterMask@rowfilter+2,??_calculateSetFilterMask+2
 10039  001AA4  C041  F015         	movff	calculateSetFilterMask@rowfilter+3,??_calculateSetFilterMask+3
 10040  001AA8  2AE8               	incf	wreg,f,c
 10041  001AAA  D005               	goto	u9990
 10042  001AAC                     u9995:
 10043  001AAC  90D8               	bcf	status,0,c
 10044  001AAE  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10045  001AB0  3214               	rrcf	??_calculateSetFilterMask+2,f,c
 10046  001AB2  3213               	rrcf	??_calculateSetFilterMask+1,f,c
 10047  001AB4  3212               	rrcf	??_calculateSetFilterMask,f,c
 10048  001AB6                     u9990:
 10049  001AB6  2EE8               	decfsz	wreg,f,c
 10050  001AB8  D7F9               	goto	u9995
 10051  001ABA  0E01               	movlw	1
 10052  001ABC  1612               	andwf	??_calculateSetFilterMask,f,c
 10053  001ABE  5042               	movf	calculateSetFilterMask@j,w,c
 10054  001AC0  C03A  F016         	movff	calculateSetFilterMask@filter,??_calculateSetFilterMask+4
 10055  001AC4  C03B  F017         	movff	calculateSetFilterMask@filter+1,??_calculateSetFilterMask+5
 10056  001AC8  C03C  F018         	movff	calculateSetFilterMask@filter+2,??_calculateSetFilterMask+6
 10057  001ACC  C03D  F019         	movff	calculateSetFilterMask@filter+3,??_calculateSetFilterMask+7
 10058  001AD0  2AE8               	incf	wreg,f,c
 10059  001AD2  D005               	goto	u10000
 10060  001AD4                     u10005:
 10061  001AD4  90D8               	bcf	status,0,c
 10062  001AD6  3219               	rrcf	??_calculateSetFilterMask+7,f,c
 10063  001AD8  3218               	rrcf	??_calculateSetFilterMask+6,f,c
 10064  001ADA  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10065  001ADC  3216               	rrcf	??_calculateSetFilterMask+4,f,c
 10066  001ADE                     u10000:
 10067  001ADE  2EE8               	decfsz	wreg,f,c
 10068  001AE0  D7F9               	goto	u10005
 10069  001AE2  5016               	movf	??_calculateSetFilterMask+4,w,c
 10070  001AE4  0B01               	andlw	1
 10071  001AE6  1812               	xorwf	??_calculateSetFilterMask,w,c
 10072  001AE8  E010               	bz	l9021
 10073                           
 10074                           ;main.c: 2695: mask &= ~(1<<j);
 10075  001AEA  C042  F012         	movff	calculateSetFilterMask@j,??_calculateSetFilterMask
 10076  001AEE  D8FD               	call	PL78	;call to abstracted procedure
 10077  001AF0  D001               	goto	u10024
 10078  001AF2                     u10025:
 10079  001AF2  D900               	call	PL82	;call to abstracted procedure
 10080  001AF4                     u10024:
 10081  001AF4  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10082  001AF6  D7FD               	goto	u10025
 10083  001AF8  1C13               	comf	??_calculateSetFilterMask+1,w,c
 10084  001AFA  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10085  001AFC  1C14               	comf	??_calculateSetFilterMask+2,w,c
 10086  001AFE  6E16               	movwf	(??_calculateSetFilterMask+4)& (0+255),c
 10087  001B00  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10088  001B02  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10089  001B04  0617               	decf	(??_calculateSetFilterMask+5)& (0+255),f,c
 10090  001B06  5017               	movf	(??_calculateSetFilterMask+5)& (0+255),w,c
 10091  001B08  D8E6               	call	PL42	;call to abstracted procedure
 10092  001B0A                     l9021:
 10093  001B0A  2A42               	incf	calculateSetFilterMask@j,f,c
 10094  001B0C  0E1F               	movlw	31
 10095  001B0E  6442               	cpfsgt	calculateSetFilterMask@j,c
 10096  001B10  D7C2               	goto	l9017
 10097                           
 10098                           ;main.c: 2696: }
 10099                           ;main.c: 2697: }
 10100                           ;main.c: 2703: filter &= rowfilter;
 10101  001B12  503E               	movf	calculateSetFilterMask@rowfilter,w,c
 10102  001B14  163A               	andwf	calculateSetFilterMask@filter,f,c
 10103  001B16  503F               	movf	calculateSetFilterMask@rowfilter+1,w,c
 10104  001B18  163B               	andwf	calculateSetFilterMask@filter+1,f,c
 10105  001B1A  5040               	movf	calculateSetFilterMask@rowfilter+2,w,c
 10106  001B1C  163C               	andwf	calculateSetFilterMask@filter+2,f,c
 10107  001B1E  5041               	movf	calculateSetFilterMask@rowfilter+3,w,c
 10108  001B20  163D               	andwf	calculateSetFilterMask@filter+3,f,c
 10109                           
 10110                           ;main.c: 2711: }
 10111                           ;main.c: 2713: if (i) {
 10112                           
 10113                           ;main.c: 2706: if ( !Read_b_eep(0x43 + 8*i + 1) & 0x40 ) {
 10114  001B22  5043               	movf	calculateSetFilterMask@i,w,c
 10115  001B24  E042               	bz	l9041
 10116                           
 10117                           ;main.c: 2716: for (j = 0; j < 8; j++) {
 10118  001B26  6A42               	clrf	calculateSetFilterMask@j,c
 10119  001B28                     l9035:
 10120                           
 10121                           ;main.c: 2717: if ((lastOID >> i & 1)
 10122                           ;main.c: 2718: != (Read_b_eep(0x43 + 8 * i) >> i & 1)) {
 10123  001B28  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10124  001B2C  5043               	movf	calculateSetFilterMask@i,w,c
 10125  001B2E  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10126  001B30  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10127  001B32  90D8               	bcf	status,0,c
 10128  001B34  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10129  001B36  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10130  001B38  90D8               	bcf	status,0,c
 10131  001B3A  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10132  001B3C  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10133  001B3E  90D8               	bcf	status,0,c
 10134  001B40  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10135  001B42  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10136  001B44  0E43               	movlw	67
 10137  001B46  2413               	addwf	??_calculateSetFilterMask+1,w,c
 10138  001B48  6E08               	movwf	?_Read_b_eep,c
 10139  001B4A  0E00               	movlw	0
 10140  001B4C  2014               	addwfc	??_calculateSetFilterMask+2,w,c
 10141  001B4E  6E09               	movwf	?_Read_b_eep+1,c
 10142  001B50  EC3F  F01E         	call	_Read_b_eep	;wreg free
 10143  001B54  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10144  001B56  2A12               	incf	??_calculateSetFilterMask,f,c
 10145  001B58  D002               	goto	u10054
 10146  001B5A                     u10055:
 10147  001B5A  90D8               	bcf	status,0,c
 10148  001B5C  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10149  001B5E                     u10054:
 10150  001B5E  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10151  001B60  D7FC               	goto	u10055
 10152  001B62  0E01               	movlw	1
 10153  001B64  1615               	andwf	??_calculateSetFilterMask+3,f,c
 10154  001B66  C043  F016         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask+4
 10155  001B6A  C035  F017         	movff	calculateSetFilterMask@lastOID,??_calculateSetFilterMask+5
 10156  001B6E  2A16               	incf	??_calculateSetFilterMask+4,f,c
 10157  001B70  D002               	goto	u10064
 10158  001B72                     u10065:
 10159  001B72  90D8               	bcf	status,0,c
 10160  001B74  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10161  001B76                     u10064:
 10162  001B76  2E16               	decfsz	??_calculateSetFilterMask+4,f,c
 10163  001B78  D7FC               	goto	u10065
 10164  001B7A  5017               	movf	??_calculateSetFilterMask+5,w,c
 10165  001B7C  0B01               	andlw	1
 10166  001B7E  1815               	xorwf	??_calculateSetFilterMask+3,w,c
 10167  001B80  E010               	bz	l9039
 10168                           
 10169                           ;main.c: 2719: mask &= (1 << i);
 10170  001B82  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10171  001B86  D8B1               	call	PL78	;call to abstracted procedure
 10172  001B88  D001               	goto	u10084
 10173  001B8A                     u10085:
 10174  001B8A  D8B4               	call	PL82	;call to abstracted procedure
 10175  001B8C                     u10084:
 10176  001B8C  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10177  001B8E  D7FD               	goto	u10085
 10178  001B90  C013  F015         	movff	??_calculateSetFilterMask+1,??_calculateSetFilterMask+3
 10179  001B94  C014  F016         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+4
 10180  001B98  0E00               	movlw	0
 10181  001B9A  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10182  001B9C  0EFF               	movlw	255
 10183  001B9E  6E17               	movwf	(??_calculateSetFilterMask+5)& (0+255),c
 10184  001BA0  D89A               	call	PL42	;call to abstracted procedure
 10185  001BA2                     l9039:
 10186  001BA2  2A42               	incf	calculateSetFilterMask@j,f,c
 10187  001BA4  0E07               	movlw	7
 10188  001BA6  6442               	cpfsgt	calculateSetFilterMask@j,c
 10189  001BA8  D7BF               	goto	l9035
 10190  001BAA                     l9041:
 10191                           
 10192                           ;main.c: 2720: }
 10193                           ;main.c: 2721: }
 10194                           ;main.c: 2723: lastOID = Read_b_eep(0x43 + 8 * i);
 10195  001BAA  5043               	movf	calculateSetFilterMask@i,w,c
 10196  001BAC  D856               	call	PL10	;call to abstracted procedure
 10197  001BAE  0E43               	movlw	67
 10198  001BB0  2412               	addwf	??_calculateSetFilterMask,w,c
 10199  001BB2  6E08               	movwf	?_Read_b_eep,c
 10200  001BB4  0E00               	movlw	0
 10201  001BB6  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10202  001BB8  6E09               	movwf	?_Read_b_eep+1,c
 10203  001BBA  EC3F  F01E         	call	_Read_b_eep	;wreg free
 10204  001BBE  6E35               	movwf	calculateSetFilterMask@lastOID,c
 10205  001BC0                     l9045:
 10206  001BC0  2A43               	incf	calculateSetFilterMask@i,f,c
 10207  001BC2  0E06               	movlw	6
 10208  001BC4  6443               	cpfsgt	calculateSetFilterMask@i,c
 10209  001BC6  D6D5               	goto	l9001
 10210                           
 10211                           ;main.c: 2729: }
 10212                           ;main.c: 2731: }
 10213                           ;main.c: 2732: }
 10214                           ;main.c: 2735: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 10215  001BC8  0E80               	movlw	128
 10216  001BCA  ECEB  F01D         	call	_ECANSetOperationMode
 10217                           
 10218                           ;main.c: 2738: _CANIDToRegs((BYTE*)&RXM1SIDH, mask, 1);
 10219  001BCE  010F               	movlb	15	; () banked
 10220  001BD0  0E0F               	movlw	15	;volatile
 10221  001BD2  6E09               	movwf	?__CANIDToRegs+1,c
 10222  001BD4  0E1C               	movlw	28	;volatile
 10223  001BD6  6E08               	movwf	?__CANIDToRegs,c
 10224  001BD8  C036  F00A         	movff	calculateSetFilterMask@mask,?__CANIDToRegs+2
 10225  001BDC  C037  F00B         	movff	calculateSetFilterMask@mask+1,?__CANIDToRegs+3
 10226  001BE0  C038  F00C         	movff	calculateSetFilterMask@mask+2,?__CANIDToRegs+4
 10227  001BE4  C039  F00D         	movff	calculateSetFilterMask@mask+3,?__CANIDToRegs+5
 10228  001BE8  0E01               	movlw	1
 10229  001BEA  6E0E               	movwf	?__CANIDToRegs+6,c
 10230  001BEC  ECAB  F016         	call	__CANIDToRegs	;wreg free
 10231                           
 10232                           ;main.c: 2741: RXF1EN = 1; _CANIDToRegs((BYTE*)&RXF1SIDH, filter, 1);;
 10233  001BF0  010D               	movlb	13	; () banked
 10234  001BF2  83D4               	bsf	212,1,b	;volatile
 10235                           
 10236                           ; BSR set to: 13
 10237  001BF4  010F               	movlb	15	; () banked
 10238  001BF6  0E0F               	movlw	15	;volatile
 10239  001BF8  6E09               	movwf	?__CANIDToRegs+1,c
 10240  001BFA  0E04               	movlw	4	;volatile
 10241  001BFC  6E08               	movwf	?__CANIDToRegs,c
 10242  001BFE  C03A  F00A         	movff	calculateSetFilterMask@filter,?__CANIDToRegs+2
 10243  001C02  C03B  F00B         	movff	calculateSetFilterMask@filter+1,?__CANIDToRegs+3
 10244  001C06  C03C  F00C         	movff	calculateSetFilterMask@filter+2,?__CANIDToRegs+4
 10245  001C0A  C03D  F00D         	movff	calculateSetFilterMask@filter+3,?__CANIDToRegs+5
 10246  001C0E  0E01               	movlw	1
 10247  001C10  6E0E               	movwf	?__CANIDToRegs+6,c
 10248  001C12  ECAB  F016         	call	__CANIDToRegs	;wreg free
 10249                           
 10250                           ;main.c: 2744: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
 10251  001C16  0E00               	movlw	0
 10252  001C18  EFEB  F01D         	goto	_ECANSetOperationMode
 10253  001C1C                     __end_of_calculateSetFilterMask:
 10254                           	opt stack 0
 10255  001C1C                     PL8:
 10256                           	opt stack 24
 10257  001C1C  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
 10258  001C1E  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 10259  001C22  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 10260  001C24  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 10261  001C26  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 10262  001C28  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 10263  001C2C  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 10264  001C30  6A1D               	clrf	??_calculateSetFilterMask+11,c
 10265  001C32  6A1C               	clrf	??_calculateSetFilterMask+10,c
 10266  001C34  5043               	movf	calculateSetFilterMask@i,w,c
 10267  001C36  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 10268  001C38  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 10269  001C3A  90D8               	bcf	status,0,c
 10270  001C3C  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10271  001C3E  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10272  001C40  90D8               	bcf	status,0,c
 10273  001C42  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10274  001C44  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10275  001C46  90D8               	bcf	status,0,c
 10276  001C48  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10277  001C4A  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10278  001C4C  0E44               	movlw	68
 10279  001C4E  2420               	addwf	??_calculateSetFilterMask+14,w,c
 10280  001C50  6E08               	movwf	?_Read_b_eep,c
 10281  001C52  0E00               	movlw	0
 10282  001C54  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 10283  001C56  6E09               	movwf	?_Read_b_eep+1,c
 10284  001C58  0012               	return	
 10285  001C5A                     __end_ofPL8:
 10286                           	opt stack 0
 10287  001C5A                     PL10:
 10288                           	opt stack 24
 10289  001C5A  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10290  001C5C  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10291  001C5E  90D8               	bcf	status,0,c
 10292  001C60  3612               	rlcf	??_calculateSetFilterMask,f,c
 10293  001C62  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10294  001C64  90D8               	bcf	status,0,c
 10295  001C66  3612               	rlcf	??_calculateSetFilterMask,f,c
 10296  001C68  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10297  001C6A  90D8               	bcf	status,0,c
 10298  001C6C  3612               	rlcf	??_calculateSetFilterMask,f,c
 10299  001C6E  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10300  001C70  0012               	return	
 10301  001C72                     __end_ofPL10:
 10302                           	opt stack 0
 10303  001C72                     PL12:
 10304                           	opt stack 24
 10305  001C72  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 10306  001C74  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
 10307  001C78  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
 10308  001C7A  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10309  001C7C  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
 10310  001C7E  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
 10311  001C82  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
 10312  001C86  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
 10313  001C8A  6A15               	clrf	??_calculateSetFilterMask+3,c
 10314  001C8C  5043               	movf	calculateSetFilterMask@i,w,c
 10315  001C8E  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
 10316  001C90  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
 10317  001C92  90D8               	bcf	status,0,c
 10318  001C94  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10319  001C96  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10320  001C98  90D8               	bcf	status,0,c
 10321  001C9A  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10322  001C9C  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10323  001C9E  90D8               	bcf	status,0,c
 10324  001CA0  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10325  001CA2  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10326  001CA4  0012               	return	
 10327  001CA6                     __end_ofPL12:
 10328                           	opt stack 0
 10329  001CA6                     PL14:
 10330                           	opt stack 24
 10331  001CA6  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 10332  001CA8  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 10333  001CAA  501D               	movf	??_calculateSetFilterMask+11,w,c
 10334  001CAC  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 10335  001CAE  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 10336  001CB0  501E               	movf	??_calculateSetFilterMask+12,w,c
 10337  001CB2  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 10338  001CB4  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 10339  001CB6  501F               	movf	??_calculateSetFilterMask+13,w,c
 10340  001CB8  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 10341  001CBA  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 10342  001CBC  5015               	movf	??_calculateSetFilterMask+3,w,c
 10343  001CBE  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 10344  001CC0  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 10345  001CC2  5016               	movf	??_calculateSetFilterMask+4,w,c
 10346  001CC4  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 10347  001CC6  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 10348  001CC8  5017               	movf	??_calculateSetFilterMask+5,w,c
 10349  001CCA  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 10350  001CCC  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 10351  001CCE  5018               	movf	??_calculateSetFilterMask+6,w,c
 10352  001CD0  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 10353  001CD2  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 10354  001CD4  0012               	return	
 10355  001CD6                     __end_ofPL14:
 10356                           	opt stack 0
 10357  001CD6                     PL42:
 10358                           	opt stack 24
 10359  001CD6  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10360  001CD8  5015               	movf	??_calculateSetFilterMask+3,w,c
 10361  001CDA  1636               	andwf	calculateSetFilterMask@mask,f,c
 10362  001CDC  5016               	movf	??_calculateSetFilterMask+4,w,c
 10363  001CDE  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10364  001CE0  5017               	movf	??_calculateSetFilterMask+5,w,c
 10365  001CE2  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10366  001CE4  5018               	movf	??_calculateSetFilterMask+6,w,c
 10367  001CE6  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10368  001CE8  0012               	return	
 10369  001CEA                     __end_ofPL42:
 10370                           	opt stack 0
 10371  001CEA                     PL78:
 10372                           	opt stack 24
 10373  001CEA  0E01               	movlw	1
 10374  001CEC  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10375  001CEE  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10376  001CF0  2A12               	incf	??_calculateSetFilterMask,f,c
 10377  001CF2  0012               	return	
 10378  001CF4                     __end_ofPL78:
 10379                           	opt stack 0
 10380  001CF4                     PL82:
 10381                           	opt stack 24
 10382  001CF4  90D8               	bcf	status,0,c
 10383  001CF6  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10384  001CF8  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10385  001CFA  0012               	return	
 10386  001CFC                     __end_ofPL82:
 10387                           	opt stack 0
 10388                           tblptru	equ	0xFF8
 10389                           tblptrh	equ	0xFF7
 10390                           tblptrl	equ	0xFF6
 10391                           tablat	equ	0xFF5
 10392                           prodh	equ	0xFF4
 10393                           prodl	equ	0xFF3
 10394                           intcon	equ	0xFF2
 10395                           postinc0	equ	0xFEE
 10396                           wreg	equ	0xFE8
 10397                           indf1	equ	0xFE7
 10398                           fsr1h	equ	0xFE2
 10399                           fsr1l	equ	0xFE1
 10400                           indf2	equ	0xFDF
 10401                           postinc2	equ	0xFDE
 10402                           postdec2	equ	0xFDD
 10403                           plusw2	equ	0xFDB
 10404                           fsr2h	equ	0xFDA
 10405                           fsr2l	equ	0xFD9
 10406                           status	equ	0xFD8
 10407                           
 10408 ;; *************** function _SendInformationEvent *****************
 10409 ;; Defined at:
 10410 ;;		line 1598 in file "../main.c"
 10411 ;; Parameters:    Size  Location     Type
 10412 ;;  idx             1    wreg     unsigned char 
 10413 ;;  eventClass      1   20[BANK0 ] unsigned char 
 10414 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
 10415 ;; Auto vars:     Size  Location     Type
 10416 ;;  idx             1   79[COMRAM] unsigned char 
 10417 ;;  data            3   76[COMRAM] unsigned char [3]
 10418 ;; Return value:  Size  Location     Type
 10419 ;;		None               void
 10420 ;; Registers used:
 10421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 10422 ;; Tracked objects:
 10423 ;;		On entry : F/0
 10424 ;;		On exit  : F/0
 10425 ;;		Unchanged: 0/0
 10426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10427 ;;      Params:         0       2       0       0       0       0       0
 10428 ;;      Locals:         4       0       0       0       0       0       0
 10429 ;;      Temps:          2       0       0       0       0       0       0
 10430 ;;      Totals:         6       2       0       0       0       0       0
 10431 ;;Total ram usage:        8 bytes
 10432 ;; Hardware stack levels used:    1
 10433 ;; Hardware stack levels required when called:    6
 10434 ;; This function calls:
 10435 ;;		_Read_b_eep
 10436 ;;		_sendVSCPFrame
 10437 ;; This function is called by:
 10438 ;;		_doApplicationOneSecondWork
 10439 ;;		_vscp_writeAppReg
 10440 ;;		_doActionOn
 10441 ;;		_doActionOff
 10442 ;;		_doActionStatus
 10443 ;;		_doActionToggle
 10444 ;; This function uses a non-reentrant model
 10445 ;;
 10446                           
 10447                           	psect	text26
 10448  003738                     __ptext26:
 10449                           	opt stack 0
 10450  003738                     _SendInformationEvent:
 10451                           	opt stack 23
 10452                           
 10453                           ;incstack = 0
 10454                           ;incstack = 0
 10455                           ;SendInformationEvent@idx stored from wreg
 10456  003738  CFE8 F050          	movff	wreg,SendInformationEvent@idx
 10457                           
 10458                           ; BSR set to: 0
 10459                           ;main.c: 1599: uint8_t data[3];
 10460                           ;main.c: 1612: data[ 0 ] = idx;
 10461  00373C  C050  F04D         	movff	SendInformationEvent@idx,SendInformationEvent@data
 10462                           
 10463                           ; BSR set to: 0
 10464                           ;main.c: 1613: data[ 1 ] = Read_b_eep(0x43 + 50 + 2*idx);
 10465  003740  90D8               	bcf	status,0,c
 10466  003742  3450               	rlcf	SendInformationEvent@idx,w,c
 10467  003744  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10468  003746  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10469  003748  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10470  00374A  0E75               	movlw	117
 10471  00374C  244B               	addwf	??_SendInformationEvent,w,c
 10472  00374E  6E08               	movwf	?_Read_b_eep,c
 10473  003750  0E00               	movlw	0
 10474  003752  204C               	addwfc	??_SendInformationEvent+1,w,c
 10475  003754  6E09               	movwf	?_Read_b_eep+1,c
 10476  003756  EC3F  F01E         	call	_Read_b_eep	;wreg free
 10477  00375A  6E4E               	movwf	SendInformationEvent@data+1,c
 10478                           
 10479                           ;main.c: 1614: data[ 2 ] = Read_b_eep(0x43 + 51 + 2*idx);
 10480  00375C  90D8               	bcf	status,0,c
 10481  00375E  3450               	rlcf	SendInformationEvent@idx,w,c
 10482  003760  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10483  003762  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10484  003764  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10485  003766  0E76               	movlw	118
 10486  003768  244B               	addwf	??_SendInformationEvent,w,c
 10487  00376A  6E08               	movwf	?_Read_b_eep,c
 10488  00376C  0E00               	movlw	0
 10489  00376E  204C               	addwfc	??_SendInformationEvent+1,w,c
 10490  003770  6E09               	movwf	?_Read_b_eep+1,c
 10491  003772  EC3F  F01E         	call	_Read_b_eep	;wreg free
 10492  003776  6E4F               	movwf	SendInformationEvent@data+2,c
 10493                           
 10494                           ;main.c: 1615: sendVSCPFrame( eventClass,
 10495                           ;main.c: 1616: eventTypeId,
 10496                           ;main.c: 1617: vscp_nickname,
 10497                           ;main.c: 1618: 0x03,
 10498                           ;main.c: 1619: 3,
 10499                           ;main.c: 1620: data );
 10500  003778  0100               	movlb	0	; () banked
 10501  00377A  C0C4  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
 10502  00377E  6A40               	clrf	?_sendVSCPFrame+1,c
 10503  003780  C0C5  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
 10504  003784  C090  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 10505  003788  0E03               	movlw	3
 10506  00378A  6E43               	movwf	?_sendVSCPFrame+4,c
 10507  00378C  6E44               	movwf	?_sendVSCPFrame+5,c
 10508  00378E  0E4D               	movlw	low SendInformationEvent@data
 10509  003790  6E45               	movwf	?_sendVSCPFrame+6,c
 10510  003792  0E00               	movlw	high SendInformationEvent@data
 10511  003794  6E46               	movwf	?_sendVSCPFrame+7,c
 10512  003796  0E0F               	movlw	15
 10513  003798  6E46               	movwf	?_sendVSCPFrame+7,c
 10514  00379A  0E5F               	movlw	__accesstop+-1
 10515  00379C  6445               	cpfsgt	?_sendVSCPFrame+6,c
 10516  00379E  6A46               	clrf	?_sendVSCPFrame+7,c
 10517  0037A0  EFEC  F019         	goto	_sendVSCPFrame	;wreg free
 10518  0037A4                     __end_of_SendInformationEvent:
 10519                           	opt stack 0
 10520                           tblptru	equ	0xFF8
 10521                           tblptrh	equ	0xFF7
 10522                           tblptrl	equ	0xFF6
 10523                           tablat	equ	0xFF5
 10524                           prodh	equ	0xFF4
 10525                           prodl	equ	0xFF3
 10526                           intcon	equ	0xFF2
 10527                           postinc0	equ	0xFEE
 10528                           wreg	equ	0xFE8
 10529                           indf1	equ	0xFE7
 10530                           fsr1h	equ	0xFE2
 10531                           fsr1l	equ	0xFE1
 10532                           indf2	equ	0xFDF
 10533                           postinc2	equ	0xFDE
 10534                           postdec2	equ	0xFDD
 10535                           plusw2	equ	0xFDB
 10536                           fsr2h	equ	0xFDA
 10537                           fsr2l	equ	0xFD9
 10538                           status	equ	0xFD8
 10539                           
 10540 ;; *************** function _vscp_readRegister *****************
 10541 ;; Defined at:
 10542 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 10543 ;; Parameters:    Size  Location     Type
 10544 ;;  reg             1    wreg     unsigned char 
 10545 ;; Auto vars:     Size  Location     Type
 10546 ;;  reg             1   28[COMRAM] unsigned char 
 10547 ;; Return value:  Size  Location     Type
 10548 ;;                  1    wreg      unsigned char 
 10549 ;; Registers used:
 10550 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10551 ;; Tracked objects:
 10552 ;;		On entry : F/0
 10553 ;;		On exit  : 0/0
 10554 ;;		Unchanged: 0/0
 10555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10556 ;;      Params:         0       0       0       0       0       0       0
 10557 ;;      Locals:         1       0       0       0       0       0       0
 10558 ;;      Temps:          0       0       0       0       0       0       0
 10559 ;;      Totals:         1       0       0       0       0       0       0
 10560 ;;Total ram usage:        1 bytes
 10561 ;; Hardware stack levels used:    1
 10562 ;; Hardware stack levels required when called:    5
 10563 ;; This function calls:
 10564 ;;		_vscp_readAppReg
 10565 ;;		_vscp_readStdReg
 10566 ;; This function is called by:
 10567 ;;		_vscp_handleProtocolEvent
 10568 ;; This function uses a non-reentrant model
 10569 ;;
 10570                           
 10571                           	psect	text27
 10572  003BA4                     __ptext27:
 10573                           	opt stack 0
 10574  003BA4                     _vscp_readRegister:
 10575                           	opt stack 24
 10576                           
 10577                           ; BSR set to: 0
 10578                           ;incstack = 0
 10579                           ;incstack = 0
 10580                           ;vscp_readRegister@reg stored from wreg
 10581  003BA4  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
 10582                           
 10583                           ; BSR set to: 0
 10584                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 10585  003BA8  0E7F               	movlw	127
 10586  003BAA  641D               	cpfsgt	vscp_readRegister@reg,c
 10587  003BAC  D004               	goto	l9523
 10588                           
 10589                           ; BSR set to: 0
 10590                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 10591  003BAE  501D               	movf	vscp_readRegister@reg,w,c
 10592  003BB0  EC08  F014         	call	_vscp_readStdReg
 10593  003BB4  D003               	goto	l1120
 10594  003BB6                     l9523:
 10595                           
 10596                           ; BSR set to: 0
 10597                           ;vscp_firmware.c: 565: else {
 10598                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 10599  003BB6  501D               	movf	vscp_readRegister@reg,w,c
 10600  003BB8  EC47  F01A         	call	_vscp_readAppReg
 10601  003BBC                     l1120:
 10602  003BBC  0012               	return	
 10603  003BBE                     __end_of_vscp_readRegister:
 10604                           	opt stack 0
 10605                           tblptru	equ	0xFF8
 10606                           tblptrh	equ	0xFF7
 10607                           tblptrl	equ	0xFF6
 10608                           tablat	equ	0xFF5
 10609                           prodh	equ	0xFF4
 10610                           prodl	equ	0xFF3
 10611                           intcon	equ	0xFF2
 10612                           postinc0	equ	0xFEE
 10613                           wreg	equ	0xFE8
 10614                           indf1	equ	0xFE7
 10615                           fsr1h	equ	0xFE2
 10616                           fsr1l	equ	0xFE1
 10617                           indf2	equ	0xFDF
 10618                           postinc2	equ	0xFDE
 10619                           postdec2	equ	0xFDD
 10620                           plusw2	equ	0xFDB
 10621                           fsr2h	equ	0xFDA
 10622                           fsr2l	equ	0xFD9
 10623                           status	equ	0xFD8
 10624                           
 10625 ;; *************** function _vscp_readStdReg *****************
 10626 ;; Defined at:
 10627 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 10628 ;; Parameters:    Size  Location     Type
 10629 ;;  reg             1    wreg     unsigned char 
 10630 ;; Auto vars:     Size  Location     Type
 10631 ;;  reg             1   27[COMRAM] unsigned char 
 10632 ;;  code            4   20[COMRAM] unsigned long 
 10633 ;;  idx             1   25[COMRAM] unsigned char 
 10634 ;;  code            4   16[COMRAM] unsigned long 
 10635 ;;  idx             1   24[COMRAM] unsigned char 
 10636 ;;  rv              1   26[COMRAM] unsigned char 
 10637 ;; Return value:  Size  Location     Type
 10638 ;;                  1    wreg      unsigned char 
 10639 ;; Registers used:
 10640 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10641 ;; Tracked objects:
 10642 ;;		On entry : F/0
 10643 ;;		On exit  : 0/0
 10644 ;;		Unchanged: 0/0
 10645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10646 ;;      Params:         0       0       0       0       0       0       0
 10647 ;;      Locals:        12       0       0       0       0       0       0
 10648 ;;      Temps:          5       0       0       0       0       0       0
 10649 ;;      Totals:        17       0       0       0       0       0       0
 10650 ;;Total ram usage:       17 bytes
 10651 ;; Hardware stack levels used:    1
 10652 ;; Hardware stack levels required when called:    4
 10653 ;; This function calls:
 10654 ;;		_vscp_getMajorVersion
 10655 ;;		_vscp_getMinorVersion
 10656 ;;		_vscp_getSubMinorVersion
 10657 ;;		_vscp_getGUID
 10658 ;;		_vscp_getMDF_URL
 10659 ;;		_vscp_getUserID
 10660 ;;		_vscp_getManufacturerId
 10661 ;;		_vscp_getBootLoaderAlgorithm
 10662 ;;		_vscp_getBufferSize
 10663 ;;		_vscp_getFamilyCode
 10664 ;;		_vscp_getFamilyType
 10665 ;;		_vscp_getRegisterPagesUsed
 10666 ;; This function is called by:
 10667 ;;		_vscp_readRegister
 10668 ;;		_vscp_handleProtocolEvent
 10669 ;; This function uses a non-reentrant model
 10670 ;;
 10671                           
 10672                           	psect	text28
 10673  002810                     __ptext28:
 10674                           	opt stack 0
 10675  002810                     _vscp_readStdReg:
 10676                           	opt stack 25
 10677                           
 10678                           ;incstack = 0
 10679                           ;incstack = 0
 10680                           ;vscp_readStdReg@reg stored from wreg
 10681  002810  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
 10682                           
 10683                           ; BSR set to: 0
 10684                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 10685  002814  6A1B               	clrf	vscp_readStdReg@rv,c
 10686                           
 10687                           ; BSR set to: 0
 10688                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 10689  002816  501C               	movf	vscp_readStdReg@reg,w,c
 10690  002818  0A80               	xorlw	128
 10691  00281A  E104               	bnz	l9533
 10692                           
 10693                           ; BSR set to: 0
 10694                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 10695  00281C  C055  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 10696                           
 10697                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 10698  002820  6A55               	clrf	_vscp_alarmstatus,c
 10699                           
 10700                           ;vscp_firmware.c: 584: }
 10701  002822  D0B3               	goto	l9621
 10702  002824                     l9533:
 10703                           
 10704                           ; BSR set to: 0
 10705                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 10706  002824  501C               	movf	vscp_readStdReg@reg,w,c
 10707  002826  0A81               	xorlw	129
 10708  002828  E102               	bnz	l9537
 10709                           
 10710                           ; BSR set to: 0
 10711                           ;vscp_firmware.c: 588: rv = 1;
 10712  00282A  0E01               	movlw	1
 10713  00282C  D075               	goto	L39
 10714  00282E                     l9537:
 10715                           
 10716                           ; BSR set to: 0
 10717                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 10718  00282E  501C               	movf	vscp_readStdReg@reg,w,c
 10719  002830  0A82               	xorlw	130
 10720  002832  E102               	bnz	l9541
 10721                           
 10722                           ; BSR set to: 0
 10723                           ;vscp_firmware.c: 594: rv = 5;
 10724  002834  0E05               	movlw	5
 10725  002836  D070               	goto	L39
 10726  002838                     l9541:
 10727                           
 10728                           ; BSR set to: 0
 10729                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 10730  002838  501C               	movf	vscp_readStdReg@reg,w,c
 10731  00283A  0A83               	xorlw	131
 10732  00283C  E102               	bnz	l9545
 10733                           
 10734                           ; BSR set to: 0
 10735                           ;vscp_firmware.c: 600: rv = 0;
 10736  00283E  6A1B               	clrf	vscp_readStdReg@rv,c
 10737                           
 10738                           ;vscp_firmware.c: 602: }
 10739  002840  D0A4               	goto	l9621
 10740  002842                     l9545:
 10741                           
 10742                           ; BSR set to: 0
 10743                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 10744  002842  501C               	movf	vscp_readStdReg@reg,w,c
 10745  002844  0A94               	xorlw	148
 10746  002846  E103               	bnz	l9549
 10747                           
 10748                           ; BSR set to: 0
 10749                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 10750  002848  EC7E  F01E         	call	_vscp_getMajorVersion	;wreg free
 10751  00284C  D065               	goto	L39
 10752  00284E                     l9549:
 10753                           
 10754                           ; BSR set to: 0
 10755                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 10756  00284E  501C               	movf	vscp_readStdReg@reg,w,c
 10757  002850  0A95               	xorlw	149
 10758  002852  E103               	bnz	l9553
 10759                           
 10760                           ; BSR set to: 0
 10761                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 10762  002854  EC7D  F01E         	call	_vscp_getMinorVersion	;wreg free
 10763  002858  D05F               	goto	L39
 10764  00285A                     l9553:
 10765                           
 10766                           ; BSR set to: 0
 10767                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 10768  00285A  501C               	movf	vscp_readStdReg@reg,w,c
 10769  00285C  0A96               	xorlw	150
 10770  00285E  E103               	bnz	l9557
 10771                           
 10772                           ; BSR set to: 0
 10773                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 10774  002860  EC7C  F01E         	call	_vscp_getSubMinorVersion	;wreg free
 10775  002864  D059               	goto	L39
 10776  002866                     l9557:
 10777                           
 10778                           ; BSR set to: 0
 10779                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 10780  002866  0E89               	movlw	137
 10781  002868  601C               	cpfslt	vscp_readStdReg@reg,c
 10782  00286A  D005               	goto	l9561
 10783                           
 10784                           ; BSR set to: 0
 10785                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 10786  00286C  501C               	movf	vscp_readStdReg@reg,w,c
 10787  00286E  0F7C               	addlw	124
 10788  002870  EC22  F01E         	call	_vscp_getUserID
 10789  002874  D051               	goto	L39
 10790  002876                     l9561:
 10791                           
 10792                           ; BSR set to: 0
 10793                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 10794                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 10795  002876  0E88               	movlw	136
 10796  002878  641C               	cpfsgt	vscp_readStdReg@reg,c
 10797  00287A  D008               	goto	l9567
 10798                           
 10799                           ; BSR set to: 0
 10800  00287C  0E91               	movlw	145
 10801  00287E  601C               	cpfslt	vscp_readStdReg@reg,c
 10802  002880  D005               	goto	l9567
 10803                           
 10804                           ; BSR set to: 0
 10805                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 10806  002882  501C               	movf	vscp_readStdReg@reg,w,c
 10807  002884  0F77               	addlw	119
 10808  002886  EC18  F01E         	call	_vscp_getManufacturerId
 10809  00288A  D046               	goto	L39
 10810  00288C                     l9567:
 10811                           
 10812                           ; BSR set to: 0
 10813                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 10814  00288C  501C               	movf	vscp_readStdReg@reg,w,c
 10815  00288E  0A91               	xorlw	145
 10816  002890  E103               	bnz	l9571
 10817                           
 10818                           ; BSR set to: 0
 10819                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 10820  002892  C090  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
 10821                           
 10822                           ;vscp_firmware.c: 639: }
 10823  002896  D079               	goto	l9621
 10824  002898                     l9571:
 10825                           
 10826                           ; BSR set to: 0
 10827                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 10828  002898  501C               	movf	vscp_readStdReg@reg,w,c
 10829  00289A  0A93               	xorlw	147
 10830  00289C  E103               	bnz	l9575
 10831                           
 10832                           ; BSR set to: 0
 10833                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 10834  00289E  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
 10835                           
 10836                           ;vscp_firmware.c: 645: }
 10837  0028A2  D073               	goto	l9621
 10838  0028A4                     l9575:
 10839                           
 10840                           ; BSR set to: 0
 10841                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 10842  0028A4  501C               	movf	vscp_readStdReg@reg,w,c
 10843  0028A6  0A92               	xorlw	146
 10844  0028A8  E102               	bnz	l9579
 10845                           
 10846                           ; BSR set to: 0
 10847                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 10848  0028AA  5053               	movf	_vscp_page_select+1,w,c
 10849  0028AC  D035               	goto	L39
 10850  0028AE                     l9579:
 10851                           
 10852                           ; BSR set to: 0
 10853                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 10854  0028AE  501C               	movf	vscp_readStdReg@reg,w,c
 10855  0028B0  0A97               	xorlw	151
 10856  0028B2  E103               	bnz	l9583
 10857                           
 10858                           ; BSR set to: 0
 10859                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 10860  0028B4  EC7B  F01E         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 10861  0028B8  D02F               	goto	L39
 10862  0028BA                     l9583:
 10863                           
 10864                           ; BSR set to: 0
 10865                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 10866  0028BA  501C               	movf	vscp_readStdReg@reg,w,c
 10867  0028BC  0A98               	xorlw	152
 10868  0028BE  E103               	bnz	l9587
 10869                           
 10870                           ; BSR set to: 0
 10871                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 10872  0028C0  EC7A  F01E         	call	_vscp_getBufferSize	;wreg free
 10873  0028C4  D029               	goto	L39
 10874  0028C6                     l9587:
 10875                           
 10876                           ; BSR set to: 0
 10877                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 10878  0028C6  501C               	movf	vscp_readStdReg@reg,w,c
 10879  0028C8  0A99               	xorlw	153
 10880  0028CA  E103               	bnz	l9591
 10881                           
 10882                           ; BSR set to: 0
 10883                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 10884  0028CC  EC79  F01E         	call	_vscp_getRegisterPagesUsed	;wreg free
 10885  0028D0  D023               	goto	L39
 10886  0028D2                     l9591:
 10887                           
 10888                           ; BSR set to: 0
 10889                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 10890                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 10891  0028D2  0E99               	movlw	153
 10892  0028D4  641C               	cpfsgt	vscp_readStdReg@reg,c
 10893  0028D6  D022               	goto	l9601
 10894                           
 10895                           ; BSR set to: 0
 10896  0028D8  0E9E               	movlw	158
 10897  0028DA  601C               	cpfslt	vscp_readStdReg@reg,c
 10898  0028DC  D01F               	goto	l9601
 10899                           
 10900                           ; BSR set to: 0
 10901                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 10902  0028DE  EC60  F01E         	call	_vscp_getFamilyCode	;wreg free
 10903  0028E2  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 10904  0028E6  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 10905  0028EA  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 10906  0028EE  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 10907                           
 10908                           ; BSR set to: 0
 10909                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 10910  0028F2  501C               	movf	vscp_readStdReg@reg,w,c
 10911  0028F4  0F66               	addlw	102
 10912  0028F6  6E19               	movwf	vscp_readStdReg@idx,c
 10913                           
 10914                           ; BSR set to: 0
 10915                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 10916  0028F8  5019               	movf	vscp_readStdReg@idx,w,c
 10917  0028FA  D849               	call	PL46	;call to abstracted procedure
 10918  0028FC  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 10919  002900  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 10920  002904  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 10921  002908  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 10922  00290C  2AE8               	incf	wreg,f,c
 10923  00290E  D001               	goto	u11090
 10924  002910                     u11095:
 10925  002910  D848               	call	PL76	;call to abstracted procedure
 10926  002912                     u11090:
 10927  002912  2EE8               	decfsz	wreg,f,c
 10928  002914  D7FD               	goto	u11095
 10929  002916  D024               	goto	L40
 10930  002918                     L39:
 10931  002918  6E1B               	movwf	vscp_readStdReg@rv,c
 10932                           
 10933                           ;vscp_firmware.c: 671: }
 10934  00291A  D037               	goto	l9621
 10935  00291C                     l9601:
 10936                           
 10937                           ; BSR set to: 0
 10938                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 10939                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 10940  00291C  0E9D               	movlw	157
 10941  00291E  641C               	cpfsgt	vscp_readStdReg@reg,c
 10942  002920  D021               	goto	l9611
 10943                           
 10944                           ; BSR set to: 0
 10945  002922  0EA2               	movlw	162
 10946  002924  601C               	cpfslt	vscp_readStdReg@reg,c
 10947  002926  D01E               	goto	l9611
 10948                           
 10949                           ; BSR set to: 0
 10950                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 10951  002928  EC5B  F01E         	call	_vscp_getFamilyType	;wreg free
 10952  00292C  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1267+3
 10953  002930  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1267+2
 10954  002934  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1267+1
 10955  002938  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1267
 10956                           
 10957                           ; BSR set to: 0
 10958                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 10959  00293C  501C               	movf	vscp_readStdReg@reg,w,c
 10960  00293E  0F62               	addlw	98
 10961  002940  6E1A               	movwf	vscp_readStdReg@idx_1268,c
 10962                           
 10963                           ; BSR set to: 0
 10964                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 10965  002942  501A               	movf	vscp_readStdReg@idx_1268,w,c
 10966  002944  D824               	call	PL46	;call to abstracted procedure
 10967  002946  C015  F00D         	movff	vscp_readStdReg@code_1267,??_vscp_readStdReg+1
 10968  00294A  C016  F00E         	movff	vscp_readStdReg@code_1267+1,??_vscp_readStdReg+2
 10969  00294E  C017  F00F         	movff	vscp_readStdReg@code_1267+2,??_vscp_readStdReg+3
 10970  002952  C018  F010         	movff	vscp_readStdReg@code_1267+3,??_vscp_readStdReg+4
 10971  002956  2AE8               	incf	wreg,f,c
 10972  002958  D001               	goto	u11120
 10973  00295A                     u11125:
 10974  00295A  D823               	call	PL76	;call to abstracted procedure
 10975  00295C                     u11120:
 10976  00295C  2EE8               	decfsz	wreg,f,c
 10977  00295E  D7FD               	goto	u11125
 10978  002960                     L40:
 10979  002960  500D               	movf	??_vscp_readStdReg+1,w,c
 10980  002962  D7DA               	goto	L39
 10981  002964                     l9611:
 10982                           
 10983                           ; BSR set to: 0
 10984                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 10985                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 10986  002964  0ECF               	movlw	207
 10987  002966  641C               	cpfsgt	vscp_readStdReg@reg,c
 10988  002968  D008               	goto	l9617
 10989                           
 10990                           ; BSR set to: 0
 10991  00296A  0EE0               	movlw	224
 10992  00296C  601C               	cpfslt	vscp_readStdReg@reg,c
 10993  00296E  D005               	goto	l9617
 10994                           
 10995                           ; BSR set to: 0
 10996                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 10997  002970  501C               	movf	vscp_readStdReg@reg,w,c
 10998  002972  0F30               	addlw	48
 10999  002974  EC2C  F01E         	call	_vscp_getGUID
 11000  002978  D7CF               	goto	L39
 11001  00297A                     l9617:
 11002                           
 11003                           ; BSR set to: 0
 11004                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 11005  00297A  0EDF               	movlw	223
 11006  00297C  641C               	cpfsgt	vscp_readStdReg@reg,c
 11007  00297E  D005               	goto	l9621
 11008                           
 11009                           ; BSR set to: 0
 11010                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 11011  002980  501C               	movf	vscp_readStdReg@reg,w,c
 11012  002982  0F20               	addlw	32
 11013  002984  ECDF  F01D         	call	_vscp_getMDF_URL
 11014  002988  D7C7               	goto	L39
 11015  00298A                     l9621:
 11016                           
 11017                           ;vscp_firmware.c: 691: }
 11018                           ;vscp_firmware.c: 693: return rv;
 11019  00298A  501B               	movf	vscp_readStdReg@rv,w,c
 11020  00298C  0012               	return	
 11021  00298E                     __end_of_vscp_readStdReg:
 11022                           	opt stack 0
 11023  00298E                     PL46:
 11024                           	opt stack 25
 11025  00298E  0803               	sublw	3
 11026  002990  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
 11027  002992  90D8               	bcf	status,0,c
 11028  002994  360C               	rlcf	??_vscp_readStdReg,f,c
 11029  002996  90D8               	bcf	status,0,c
 11030  002998  360C               	rlcf	??_vscp_readStdReg,f,c
 11031  00299A  90D8               	bcf	status,0,c
 11032  00299C  360C               	rlcf	??_vscp_readStdReg,f,c
 11033  00299E  500C               	movf	??_vscp_readStdReg,w,c
 11034  0029A0  0012               	return	
 11035  0029A2                     __end_ofPL46:
 11036                           	opt stack 0
 11037  0029A2                     PL76:
 11038                           	opt stack 25
 11039  0029A2  90D8               	bcf	status,0,c
 11040  0029A4  3210               	rrcf	??_vscp_readStdReg+4,f,c
 11041  0029A6  320F               	rrcf	??_vscp_readStdReg+3,f,c
 11042  0029A8  320E               	rrcf	??_vscp_readStdReg+2,f,c
 11043  0029AA  320D               	rrcf	??_vscp_readStdReg+1,f,c
 11044  0029AC  0012               	return	
 11045  0029AE                     __end_ofPL76:
 11046                           	opt stack 0
 11047                           tblptru	equ	0xFF8
 11048                           tblptrh	equ	0xFF7
 11049                           tblptrl	equ	0xFF6
 11050                           tablat	equ	0xFF5
 11051                           prodh	equ	0xFF4
 11052                           prodl	equ	0xFF3
 11053                           intcon	equ	0xFF2
 11054                           postinc0	equ	0xFEE
 11055                           wreg	equ	0xFE8
 11056                           indf1	equ	0xFE7
 11057                           fsr1h	equ	0xFE2
 11058                           fsr1l	equ	0xFE1
 11059                           indf2	equ	0xFDF
 11060                           postinc2	equ	0xFDE
 11061                           postdec2	equ	0xFDD
 11062                           plusw2	equ	0xFDB
 11063                           fsr2h	equ	0xFDA
 11064                           fsr2l	equ	0xFD9
 11065                           status	equ	0xFD8
 11066                           
 11067 ;; *************** function _vscp_getRegisterPagesUsed *****************
 11068 ;; Defined at:
 11069 ;;		line 2525 in file "../main.c"
 11070 ;; Parameters:    Size  Location     Type
 11071 ;;		None
 11072 ;; Auto vars:     Size  Location     Type
 11073 ;;		None
 11074 ;; Return value:  Size  Location     Type
 11075 ;;                  1    wreg      unsigned char 
 11076 ;; Registers used:
 11077 ;;		wreg
 11078 ;; Tracked objects:
 11079 ;;		On entry : F/0
 11080 ;;		On exit  : F/0
 11081 ;;		Unchanged: F/0
 11082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11083 ;;      Params:         0       0       0       0       0       0       0
 11084 ;;      Locals:         0       0       0       0       0       0       0
 11085 ;;      Temps:          0       0       0       0       0       0       0
 11086 ;;      Totals:         0       0       0       0       0       0       0
 11087 ;;Total ram usage:        0 bytes
 11088 ;; Hardware stack levels used:    1
 11089 ;; Hardware stack levels required when called:    2
 11090 ;; This function calls:
 11091 ;;		Nothing
 11092 ;; This function is called by:
 11093 ;;		_vscp_readStdReg
 11094 ;; This function uses a non-reentrant model
 11095 ;;
 11096                           
 11097                           	psect	text29
 11098  003CF2                     __ptext29:
 11099                           	opt stack 0
 11100  003CF2                     _vscp_getRegisterPagesUsed:
 11101                           	opt stack 26
 11102                           
 11103                           ; BSR set to: 0
 11104                           
 11105                           ; BSR set to: 0
 11106                           ;main.c: 2526: return 1;
 11107                           
 11108                           ;incstack = 0
 11109                           ;incstack = 0
 11110  003CF2  0C01               	retlw	1
 11111  003CF4                     __end_of_vscp_getRegisterPagesUsed:
 11112                           	opt stack 0
 11113                           tblptru	equ	0xFF8
 11114                           tblptrh	equ	0xFF7
 11115                           tblptrl	equ	0xFF6
 11116                           tablat	equ	0xFF5
 11117                           prodh	equ	0xFF4
 11118                           prodl	equ	0xFF3
 11119                           intcon	equ	0xFF2
 11120                           postinc0	equ	0xFEE
 11121                           wreg	equ	0xFE8
 11122                           indf1	equ	0xFE7
 11123                           fsr1h	equ	0xFE2
 11124                           fsr1l	equ	0xFE1
 11125                           indf2	equ	0xFDF
 11126                           postinc2	equ	0xFDE
 11127                           postdec2	equ	0xFDD
 11128                           plusw2	equ	0xFDB
 11129                           fsr2h	equ	0xFDA
 11130                           fsr2l	equ	0xFD9
 11131                           status	equ	0xFD8
 11132                           
 11133 ;; *************** function _vscp_getFamilyType *****************
 11134 ;; Defined at:
 11135 ;;		line 2506 in file "../main.c"
 11136 ;; Parameters:    Size  Location     Type
 11137 ;;		None
 11138 ;; Auto vars:     Size  Location     Type
 11139 ;;		None
 11140 ;; Return value:  Size  Location     Type
 11141 ;;                  4    7[COMRAM] unsigned long 
 11142 ;; Registers used:
 11143 ;;		None
 11144 ;; Tracked objects:
 11145 ;;		On entry : F/0
 11146 ;;		On exit  : F/0
 11147 ;;		Unchanged: F/0
 11148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11149 ;;      Params:         4       0       0       0       0       0       0
 11150 ;;      Locals:         0       0       0       0       0       0       0
 11151 ;;      Temps:          0       0       0       0       0       0       0
 11152 ;;      Totals:         4       0       0       0       0       0       0
 11153 ;;Total ram usage:        4 bytes
 11154 ;; Hardware stack levels used:    1
 11155 ;; Hardware stack levels required when called:    2
 11156 ;; This function calls:
 11157 ;;		Nothing
 11158 ;; This function is called by:
 11159 ;;		_vscp_readStdReg
 11160 ;; This function uses a non-reentrant model
 11161 ;;
 11162                           
 11163                           	psect	text30
 11164  003CB6                     __ptext30:
 11165                           	opt stack 0
 11166  003CB6                     _vscp_getFamilyType:
 11167                           	opt stack 26
 11168                           
 11169                           ; BSR set to: 0
 11170                           ;main.c: 2507: return 0;
 11171                           
 11172                           ; BSR set to: 0
 11173                           ;incstack = 0
 11174                           ;incstack = 0
 11175  003CB6  6A08               	clrf	?_vscp_getFamilyType,c
 11176  003CB8  6A09               	clrf	?_vscp_getFamilyType+1,c
 11177  003CBA  6A0A               	clrf	?_vscp_getFamilyType+2,c
 11178  003CBC  6A0B               	clrf	?_vscp_getFamilyType+3,c
 11179                           
 11180                           ; BSR set to: 0
 11181  003CBE  0012               	return	
 11182  003CC0                     __end_of_vscp_getFamilyType:
 11183                           	opt stack 0
 11184                           tblptru	equ	0xFF8
 11185                           tblptrh	equ	0xFF7
 11186                           tblptrl	equ	0xFF6
 11187                           tablat	equ	0xFF5
 11188                           prodh	equ	0xFF4
 11189                           prodl	equ	0xFF3
 11190                           intcon	equ	0xFF2
 11191                           postinc0	equ	0xFEE
 11192                           wreg	equ	0xFE8
 11193                           indf1	equ	0xFE7
 11194                           fsr1h	equ	0xFE2
 11195                           fsr1l	equ	0xFE1
 11196                           indf2	equ	0xFDF
 11197                           postinc2	equ	0xFDE
 11198                           postdec2	equ	0xFDD
 11199                           plusw2	equ	0xFDB
 11200                           fsr2h	equ	0xFDA
 11201                           fsr2l	equ	0xFD9
 11202                           status	equ	0xFD8
 11203                           
 11204 ;; *************** function _vscp_getFamilyCode *****************
 11205 ;; Defined at:
 11206 ;;		line 2497 in file "../main.c"
 11207 ;; Parameters:    Size  Location     Type
 11208 ;;		None
 11209 ;; Auto vars:     Size  Location     Type
 11210 ;;		None
 11211 ;; Return value:  Size  Location     Type
 11212 ;;                  4    7[COMRAM] unsigned long 
 11213 ;; Registers used:
 11214 ;;		None
 11215 ;; Tracked objects:
 11216 ;;		On entry : F/0
 11217 ;;		On exit  : F/0
 11218 ;;		Unchanged: F/0
 11219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11220 ;;      Params:         4       0       0       0       0       0       0
 11221 ;;      Locals:         0       0       0       0       0       0       0
 11222 ;;      Temps:          0       0       0       0       0       0       0
 11223 ;;      Totals:         4       0       0       0       0       0       0
 11224 ;;Total ram usage:        4 bytes
 11225 ;; Hardware stack levels used:    1
 11226 ;; Hardware stack levels required when called:    2
 11227 ;; This function calls:
 11228 ;;		Nothing
 11229 ;; This function is called by:
 11230 ;;		_vscp_readStdReg
 11231 ;; This function uses a non-reentrant model
 11232 ;;
 11233                           
 11234                           	psect	text31
 11235  003CC0                     __ptext31:
 11236                           	opt stack 0
 11237  003CC0                     _vscp_getFamilyCode:
 11238                           	opt stack 26
 11239                           
 11240                           ; BSR set to: 0
 11241                           ;main.c: 2498: return 0L;
 11242                           
 11243                           ; BSR set to: 0
 11244                           ;incstack = 0
 11245                           ;incstack = 0
 11246  003CC0  6A08               	clrf	?_vscp_getFamilyCode,c
 11247  003CC2  6A09               	clrf	?_vscp_getFamilyCode+1,c
 11248  003CC4  6A0A               	clrf	?_vscp_getFamilyCode+2,c
 11249  003CC6  6A0B               	clrf	?_vscp_getFamilyCode+3,c
 11250                           
 11251                           ; BSR set to: 0
 11252  003CC8  0012               	return	
 11253  003CCA                     __end_of_vscp_getFamilyCode:
 11254                           	opt stack 0
 11255                           tblptru	equ	0xFF8
 11256                           tblptrh	equ	0xFF7
 11257                           tblptrl	equ	0xFF6
 11258                           tablat	equ	0xFF5
 11259                           prodh	equ	0xFF4
 11260                           prodl	equ	0xFF3
 11261                           intcon	equ	0xFF2
 11262                           postinc0	equ	0xFEE
 11263                           wreg	equ	0xFE8
 11264                           indf1	equ	0xFE7
 11265                           fsr1h	equ	0xFE2
 11266                           fsr1l	equ	0xFE1
 11267                           indf2	equ	0xFDF
 11268                           postinc2	equ	0xFDE
 11269                           postdec2	equ	0xFDD
 11270                           plusw2	equ	0xFDB
 11271                           fsr2h	equ	0xFDA
 11272                           fsr2l	equ	0xFD9
 11273                           status	equ	0xFD8
 11274                           
 11275 ;; *************** function _vscp_getBufferSize *****************
 11276 ;; Defined at:
 11277 ;;		line 2358 in file "../main.c"
 11278 ;; Parameters:    Size  Location     Type
 11279 ;;		None
 11280 ;; Auto vars:     Size  Location     Type
 11281 ;;		None
 11282 ;; Return value:  Size  Location     Type
 11283 ;;                  1    wreg      unsigned char 
 11284 ;; Registers used:
 11285 ;;		wreg
 11286 ;; Tracked objects:
 11287 ;;		On entry : F/0
 11288 ;;		On exit  : F/0
 11289 ;;		Unchanged: F/0
 11290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11291 ;;      Params:         0       0       0       0       0       0       0
 11292 ;;      Locals:         0       0       0       0       0       0       0
 11293 ;;      Temps:          0       0       0       0       0       0       0
 11294 ;;      Totals:         0       0       0       0       0       0       0
 11295 ;;Total ram usage:        0 bytes
 11296 ;; Hardware stack levels used:    1
 11297 ;; Hardware stack levels required when called:    2
 11298 ;; This function calls:
 11299 ;;		Nothing
 11300 ;; This function is called by:
 11301 ;;		_vscp_readStdReg
 11302 ;; This function uses a non-reentrant model
 11303 ;;
 11304                           
 11305                           	psect	text32
 11306  003CF4                     __ptext32:
 11307                           	opt stack 0
 11308  003CF4                     _vscp_getBufferSize:
 11309                           	opt stack 26
 11310                           
 11311                           ; BSR set to: 0
 11312                           
 11313                           ; BSR set to: 0
 11314                           ;main.c: 2359: return 8;
 11315                           
 11316                           ; BSR set to: 0
 11317                           ;incstack = 0
 11318                           ;incstack = 0
 11319  003CF4  0C08               	retlw	8
 11320  003CF6                     __end_of_vscp_getBufferSize:
 11321                           	opt stack 0
 11322                           tblptru	equ	0xFF8
 11323                           tblptrh	equ	0xFF7
 11324                           tblptrl	equ	0xFF6
 11325                           tablat	equ	0xFF5
 11326                           prodh	equ	0xFF4
 11327                           prodl	equ	0xFF3
 11328                           intcon	equ	0xFF2
 11329                           postinc0	equ	0xFEE
 11330                           wreg	equ	0xFE8
 11331                           indf1	equ	0xFE7
 11332                           fsr1h	equ	0xFE2
 11333                           fsr1l	equ	0xFE1
 11334                           indf2	equ	0xFDF
 11335                           postinc2	equ	0xFDE
 11336                           postdec2	equ	0xFDD
 11337                           plusw2	equ	0xFDB
 11338                           fsr2h	equ	0xFDA
 11339                           fsr2l	equ	0xFD9
 11340                           status	equ	0xFD8
 11341                           
 11342 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 11343 ;; Defined at:
 11344 ;;		line 2349 in file "../main.c"
 11345 ;; Parameters:    Size  Location     Type
 11346 ;;		None
 11347 ;; Auto vars:     Size  Location     Type
 11348 ;;		None
 11349 ;; Return value:  Size  Location     Type
 11350 ;;                  1    wreg      unsigned char 
 11351 ;; Registers used:
 11352 ;;		wreg
 11353 ;; Tracked objects:
 11354 ;;		On entry : F/0
 11355 ;;		On exit  : F/0
 11356 ;;		Unchanged: F/0
 11357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11358 ;;      Params:         0       0       0       0       0       0       0
 11359 ;;      Locals:         0       0       0       0       0       0       0
 11360 ;;      Temps:          0       0       0       0       0       0       0
 11361 ;;      Totals:         0       0       0       0       0       0       0
 11362 ;;Total ram usage:        0 bytes
 11363 ;; Hardware stack levels used:    1
 11364 ;; Hardware stack levels required when called:    2
 11365 ;; This function calls:
 11366 ;;		Nothing
 11367 ;; This function is called by:
 11368 ;;		_vscp_readStdReg
 11369 ;; This function uses a non-reentrant model
 11370 ;;
 11371                           
 11372                           	psect	text33
 11373  003CF6                     __ptext33:
 11374                           	opt stack 0
 11375  003CF6                     _vscp_getBootLoaderAlgorithm:
 11376                           	opt stack 26
 11377                           
 11378                           ; BSR set to: 0
 11379                           
 11380                           ; BSR set to: 0
 11381                           ;main.c: 2350: return 0x01;
 11382                           
 11383                           ; BSR set to: 0
 11384                           ;incstack = 0
 11385                           ;incstack = 0
 11386  003CF6  0C01               	retlw	1
 11387  003CF8                     __end_of_vscp_getBootLoaderAlgorithm:
 11388                           	opt stack 0
 11389                           tblptru	equ	0xFF8
 11390                           tblptrh	equ	0xFF7
 11391                           tblptrl	equ	0xFF6
 11392                           tablat	equ	0xFF5
 11393                           prodh	equ	0xFF4
 11394                           prodl	equ	0xFF3
 11395                           intcon	equ	0xFF2
 11396                           postinc0	equ	0xFEE
 11397                           wreg	equ	0xFE8
 11398                           indf1	equ	0xFE7
 11399                           fsr1h	equ	0xFE2
 11400                           fsr1l	equ	0xFE1
 11401                           indf2	equ	0xFDF
 11402                           postinc2	equ	0xFDE
 11403                           postdec2	equ	0xFDD
 11404                           plusw2	equ	0xFDB
 11405                           fsr2h	equ	0xFDA
 11406                           fsr2l	equ	0xFD9
 11407                           status	equ	0xFD8
 11408                           
 11409 ;; *************** function _vscp_getManufacturerId *****************
 11410 ;; Defined at:
 11411 ;;		line 2340 in file "../main.c"
 11412 ;; Parameters:    Size  Location     Type
 11413 ;;  idx             1    wreg     unsigned char 
 11414 ;; Auto vars:     Size  Location     Type
 11415 ;;  idx             1    9[COMRAM] unsigned char 
 11416 ;; Return value:  Size  Location     Type
 11417 ;;                  1    wreg      unsigned char 
 11418 ;; Registers used:
 11419 ;;		wreg, status,2, status,0, cstack
 11420 ;; Tracked objects:
 11421 ;;		On entry : 0/0
 11422 ;;		On exit  : 0/0
 11423 ;;		Unchanged: 0/0
 11424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11425 ;;      Params:         0       0       0       0       0       0       0
 11426 ;;      Locals:         1       0       0       0       0       0       0
 11427 ;;      Temps:          0       0       0       0       0       0       0
 11428 ;;      Totals:         1       0       0       0       0       0       0
 11429 ;;Total ram usage:        1 bytes
 11430 ;; Hardware stack levels used:    1
 11431 ;; Hardware stack levels required when called:    3
 11432 ;; This function calls:
 11433 ;;		_Read_b_eep
 11434 ;; This function is called by:
 11435 ;;		_vscp_readStdReg
 11436 ;;		_vscp_writeStdReg
 11437 ;; This function uses a non-reentrant model
 11438 ;;
 11439                           
 11440                           	psect	text34
 11441  003C30                     __ptext34:
 11442                           	opt stack 0
 11443  003C30                     _vscp_getManufacturerId:
 11444                           	opt stack 25
 11445                           
 11446                           ; BSR set to: 0
 11447                           ;incstack = 0
 11448                           ;incstack = 0
 11449                           ;vscp_getManufacturerId@idx stored from wreg
 11450  003C30  CFE8 F00A          	movff	wreg,vscp_getManufacturerId@idx
 11451                           
 11452                           ;main.c: 2341: return Read_b_eep(0x0B + idx);
 11453  003C34  0E0B               	movlw	11
 11454  003C36  240A               	addwf	vscp_getManufacturerId@idx,w,c
 11455  003C38  6E08               	movwf	?_Read_b_eep,c
 11456  003C3A  6A09               	clrf	?_Read_b_eep+1,c
 11457  003C3C  0E00               	movlw	0
 11458  003C3E  2209               	addwfc	?_Read_b_eep+1,f,c
 11459  003C40  EF3F  F01E         	goto	_Read_b_eep	;wreg free
 11460  003C44                     __end_of_vscp_getManufacturerId:
 11461                           	opt stack 0
 11462                           tblptru	equ	0xFF8
 11463                           tblptrh	equ	0xFF7
 11464                           tblptrl	equ	0xFF6
 11465                           tablat	equ	0xFF5
 11466                           prodh	equ	0xFF4
 11467                           prodl	equ	0xFF3
 11468                           intcon	equ	0xFF2
 11469                           postinc0	equ	0xFEE
 11470                           wreg	equ	0xFE8
 11471                           indf1	equ	0xFE7
 11472                           fsr1h	equ	0xFE2
 11473                           fsr1l	equ	0xFE1
 11474                           indf2	equ	0xFDF
 11475                           postinc2	equ	0xFDE
 11476                           postdec2	equ	0xFDD
 11477                           plusw2	equ	0xFDB
 11478                           fsr2h	equ	0xFDA
 11479                           fsr2l	equ	0xFD9
 11480                           status	equ	0xFD8
 11481                           
 11482 ;; *************** function _vscp_getUserID *****************
 11483 ;; Defined at:
 11484 ;;		line 2320 in file "../main.c"
 11485 ;; Parameters:    Size  Location     Type
 11486 ;;  idx             1    wreg     unsigned char 
 11487 ;; Auto vars:     Size  Location     Type
 11488 ;;  idx             1    9[COMRAM] unsigned char 
 11489 ;; Return value:  Size  Location     Type
 11490 ;;                  1    wreg      unsigned char 
 11491 ;; Registers used:
 11492 ;;		wreg, status,2, status,0, cstack
 11493 ;; Tracked objects:
 11494 ;;		On entry : 0/0
 11495 ;;		On exit  : 0/0
 11496 ;;		Unchanged: 0/0
 11497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11498 ;;      Params:         0       0       0       0       0       0       0
 11499 ;;      Locals:         1       0       0       0       0       0       0
 11500 ;;      Temps:          0       0       0       0       0       0       0
 11501 ;;      Totals:         1       0       0       0       0       0       0
 11502 ;;Total ram usage:        1 bytes
 11503 ;; Hardware stack levels used:    1
 11504 ;; Hardware stack levels required when called:    3
 11505 ;; This function calls:
 11506 ;;		_Read_b_eep
 11507 ;; This function is called by:
 11508 ;;		_vscp_readStdReg
 11509 ;;		_vscp_writeStdReg
 11510 ;; This function uses a non-reentrant model
 11511 ;;
 11512                           
 11513                           	psect	text35
 11514  003C44                     __ptext35:
 11515                           	opt stack 0
 11516  003C44                     _vscp_getUserID:
 11517                           	opt stack 25
 11518                           
 11519                           ;incstack = 0
 11520                           ;incstack = 0
 11521                           ;vscp_getUserID@idx stored from wreg
 11522  003C44  CFE8 F00A          	movff	wreg,vscp_getUserID@idx
 11523                           
 11524                           ;main.c: 2321: return Read_b_eep(0x06 + idx);
 11525  003C48  0E06               	movlw	6
 11526  003C4A  240A               	addwf	vscp_getUserID@idx,w,c
 11527  003C4C  6E08               	movwf	?_Read_b_eep,c
 11528  003C4E  6A09               	clrf	?_Read_b_eep+1,c
 11529  003C50  0E00               	movlw	0
 11530  003C52  2209               	addwfc	?_Read_b_eep+1,f,c
 11531  003C54  EF3F  F01E         	goto	_Read_b_eep	;wreg free
 11532  003C58                     __end_of_vscp_getUserID:
 11533                           	opt stack 0
 11534                           tblptru	equ	0xFF8
 11535                           tblptrh	equ	0xFF7
 11536                           tblptrl	equ	0xFF6
 11537                           tablat	equ	0xFF5
 11538                           prodh	equ	0xFF4
 11539                           prodl	equ	0xFF3
 11540                           intcon	equ	0xFF2
 11541                           postinc0	equ	0xFEE
 11542                           wreg	equ	0xFE8
 11543                           indf1	equ	0xFE7
 11544                           fsr1h	equ	0xFE2
 11545                           fsr1l	equ	0xFE1
 11546                           indf2	equ	0xFDF
 11547                           postinc2	equ	0xFDE
 11548                           postdec2	equ	0xFDD
 11549                           plusw2	equ	0xFDB
 11550                           fsr2h	equ	0xFDA
 11551                           fsr2l	equ	0xFD9
 11552                           status	equ	0xFD8
 11553                           
 11554 ;; *************** function _vscp_getMDF_URL *****************
 11555 ;; Defined at:
 11556 ;;		line 2311 in file "../main.c"
 11557 ;; Parameters:    Size  Location     Type
 11558 ;;  idx             1    wreg     unsigned char 
 11559 ;; Auto vars:     Size  Location     Type
 11560 ;;  idx             1    8[COMRAM] unsigned char 
 11561 ;; Return value:  Size  Location     Type
 11562 ;;                  1    wreg      unsigned char 
 11563 ;; Registers used:
 11564 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11565 ;; Tracked objects:
 11566 ;;		On entry : F/0
 11567 ;;		On exit  : F/0
 11568 ;;		Unchanged: F/0
 11569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11570 ;;      Params:         0       0       0       0       0       0       0
 11571 ;;      Locals:         1       0       0       0       0       0       0
 11572 ;;      Temps:          1       0       0       0       0       0       0
 11573 ;;      Totals:         2       0       0       0       0       0       0
 11574 ;;Total ram usage:        2 bytes
 11575 ;; Hardware stack levels used:    1
 11576 ;; Hardware stack levels required when called:    2
 11577 ;; This function calls:
 11578 ;;		Nothing
 11579 ;; This function is called by:
 11580 ;;		_vscp_readStdReg
 11581 ;;		_vscp_handleProtocolEvent
 11582 ;; This function uses a non-reentrant model
 11583 ;;
 11584                           
 11585                           	psect	text36
 11586  003BBE                     __ptext36:
 11587                           	opt stack 0
 11588  003BBE                     _vscp_getMDF_URL:
 11589                           	opt stack 26
 11590                           
 11591                           ;incstack = 0
 11592                           ;incstack = 0
 11593                           ;vscp_getMDF_URL@idx stored from wreg
 11594  003BBE  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
 11595                           
 11596                           ; BSR set to: 0
 11597                           ;main.c: 2312: return vscp_deviceURL[ idx ];
 11598  003BC2  5009               	movf	vscp_getMDF_URL@idx,w,c
 11599  003BC4  0F00               	addlw	low _vscp_deviceURL
 11600  003BC6  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
 11601  003BC8  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 11602  003BCC  0E06               	movlw	high __smallconst
 11603  003BCE  6EF7               	movwf	tblptrh,c
 11604  003BD0  0008               	tblrd		*
 11605  003BD2  50F5               	movf	tablat,w,c
 11606                           
 11607                           ; BSR set to: 0
 11608  003BD4  0012               	return	
 11609  003BD6                     __end_of_vscp_getMDF_URL:
 11610                           	opt stack 0
 11611                           tblptru	equ	0xFF8
 11612                           tblptrh	equ	0xFF7
 11613                           tblptrl	equ	0xFF6
 11614                           tablat	equ	0xFF5
 11615                           prodh	equ	0xFF4
 11616                           prodl	equ	0xFF3
 11617                           intcon	equ	0xFF2
 11618                           postinc0	equ	0xFEE
 11619                           wreg	equ	0xFE8
 11620                           indf1	equ	0xFE7
 11621                           fsr1h	equ	0xFE2
 11622                           fsr1l	equ	0xFE1
 11623                           indf2	equ	0xFDF
 11624                           postinc2	equ	0xFDE
 11625                           postdec2	equ	0xFDD
 11626                           plusw2	equ	0xFDB
 11627                           fsr2h	equ	0xFDA
 11628                           fsr2l	equ	0xFD9
 11629                           status	equ	0xFD8
 11630                           
 11631 ;; *************** function _vscp_getGUID *****************
 11632 ;; Defined at:
 11633 ;;		line 2299 in file "../main.c"
 11634 ;; Parameters:    Size  Location     Type
 11635 ;;  idx             1    wreg     unsigned char 
 11636 ;; Auto vars:     Size  Location     Type
 11637 ;;  idx             1    9[COMRAM] unsigned char 
 11638 ;; Return value:  Size  Location     Type
 11639 ;;                  1    wreg      unsigned char 
 11640 ;; Registers used:
 11641 ;;		wreg, status,2, status,0, cstack
 11642 ;; Tracked objects:
 11643 ;;		On entry : 0/0
 11644 ;;		On exit  : 0/0
 11645 ;;		Unchanged: 0/0
 11646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11647 ;;      Params:         0       0       0       0       0       0       0
 11648 ;;      Locals:         1       0       0       0       0       0       0
 11649 ;;      Temps:          0       0       0       0       0       0       0
 11650 ;;      Totals:         1       0       0       0       0       0       0
 11651 ;;Total ram usage:        1 bytes
 11652 ;; Hardware stack levels used:    1
 11653 ;; Hardware stack levels required when called:    3
 11654 ;; This function calls:
 11655 ;;		_Read_b_eep
 11656 ;; This function is called by:
 11657 ;;		_vscp_readStdReg
 11658 ;;		_vscp_writeStdReg
 11659 ;;		_vscp_handleProtocolEvent
 11660 ;; This function uses a non-reentrant model
 11661 ;;
 11662                           
 11663                           	psect	text37
 11664  003C58                     __ptext37:
 11665                           	opt stack 0
 11666  003C58                     _vscp_getGUID:
 11667                           	opt stack 25
 11668                           
 11669                           ; BSR set to: 0
 11670                           ;incstack = 0
 11671                           ;incstack = 0
 11672                           ;vscp_getGUID@idx stored from wreg
 11673  003C58  CFE8 F00A          	movff	wreg,vscp_getGUID@idx
 11674                           
 11675                           ;main.c: 2300: return Read_b_eep(0x13 + idx);
 11676  003C5C  0E13               	movlw	19
 11677  003C5E  240A               	addwf	vscp_getGUID@idx,w,c
 11678  003C60  6E08               	movwf	?_Read_b_eep,c
 11679  003C62  6A09               	clrf	?_Read_b_eep+1,c
 11680  003C64  0E00               	movlw	0
 11681  003C66  2209               	addwfc	?_Read_b_eep+1,f,c
 11682  003C68  EF3F  F01E         	goto	_Read_b_eep	;wreg free
 11683  003C6C                     __end_of_vscp_getGUID:
 11684                           	opt stack 0
 11685                           tblptru	equ	0xFF8
 11686                           tblptrh	equ	0xFF7
 11687                           tblptrl	equ	0xFF6
 11688                           tablat	equ	0xFF5
 11689                           prodh	equ	0xFF4
 11690                           prodl	equ	0xFF3
 11691                           intcon	equ	0xFF2
 11692                           postinc0	equ	0xFEE
 11693                           wreg	equ	0xFE8
 11694                           indf1	equ	0xFE7
 11695                           fsr1h	equ	0xFE2
 11696                           fsr1l	equ	0xFE1
 11697                           indf2	equ	0xFDF
 11698                           postinc2	equ	0xFDE
 11699                           postdec2	equ	0xFDD
 11700                           plusw2	equ	0xFDB
 11701                           fsr2h	equ	0xFDA
 11702                           fsr2l	equ	0xFD9
 11703                           status	equ	0xFD8
 11704                           
 11705 ;; *************** function _vscp_getSubMinorVersion *****************
 11706 ;; Defined at:
 11707 ;;		line 2288 in file "../main.c"
 11708 ;; Parameters:    Size  Location     Type
 11709 ;;		None
 11710 ;; Auto vars:     Size  Location     Type
 11711 ;;		None
 11712 ;; Return value:  Size  Location     Type
 11713 ;;                  1    wreg      unsigned char 
 11714 ;; Registers used:
 11715 ;;		wreg
 11716 ;; Tracked objects:
 11717 ;;		On entry : F/0
 11718 ;;		On exit  : F/0
 11719 ;;		Unchanged: F/0
 11720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11721 ;;      Params:         0       0       0       0       0       0       0
 11722 ;;      Locals:         0       0       0       0       0       0       0
 11723 ;;      Temps:          0       0       0       0       0       0       0
 11724 ;;      Totals:         0       0       0       0       0       0       0
 11725 ;;Total ram usage:        0 bytes
 11726 ;; Hardware stack levels used:    1
 11727 ;; Hardware stack levels required when called:    2
 11728 ;; This function calls:
 11729 ;;		Nothing
 11730 ;; This function is called by:
 11731 ;;		_vscp_readStdReg
 11732 ;; This function uses a non-reentrant model
 11733 ;;
 11734                           
 11735                           	psect	text38
 11736  003CF8                     __ptext38:
 11737                           	opt stack 0
 11738  003CF8                     _vscp_getSubMinorVersion:
 11739                           	opt stack 26
 11740                           
 11741                           ; BSR set to: 0
 11742                           
 11743                           ; BSR set to: 0
 11744                           ;main.c: 2289: return 0;
 11745                           
 11746                           ;incstack = 0
 11747                           ;incstack = 0
 11748  003CF8  0C00               	retlw	0
 11749  003CFA                     __end_of_vscp_getSubMinorVersion:
 11750                           	opt stack 0
 11751                           tblptru	equ	0xFF8
 11752                           tblptrh	equ	0xFF7
 11753                           tblptrl	equ	0xFF6
 11754                           tablat	equ	0xFF5
 11755                           prodh	equ	0xFF4
 11756                           prodl	equ	0xFF3
 11757                           intcon	equ	0xFF2
 11758                           postinc0	equ	0xFEE
 11759                           wreg	equ	0xFE8
 11760                           indf1	equ	0xFE7
 11761                           fsr1h	equ	0xFE2
 11762                           fsr1l	equ	0xFE1
 11763                           indf2	equ	0xFDF
 11764                           postinc2	equ	0xFDE
 11765                           postdec2	equ	0xFDD
 11766                           plusw2	equ	0xFDB
 11767                           fsr2h	equ	0xFDA
 11768                           fsr2l	equ	0xFD9
 11769                           status	equ	0xFD8
 11770                           
 11771 ;; *************** function _vscp_getMinorVersion *****************
 11772 ;; Defined at:
 11773 ;;		line 2279 in file "../main.c"
 11774 ;; Parameters:    Size  Location     Type
 11775 ;;		None
 11776 ;; Auto vars:     Size  Location     Type
 11777 ;;		None
 11778 ;; Return value:  Size  Location     Type
 11779 ;;                  1    wreg      unsigned char 
 11780 ;; Registers used:
 11781 ;;		wreg
 11782 ;; Tracked objects:
 11783 ;;		On entry : F/0
 11784 ;;		On exit  : F/0
 11785 ;;		Unchanged: F/0
 11786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11787 ;;      Params:         0       0       0       0       0       0       0
 11788 ;;      Locals:         0       0       0       0       0       0       0
 11789 ;;      Temps:          0       0       0       0       0       0       0
 11790 ;;      Totals:         0       0       0       0       0       0       0
 11791 ;;Total ram usage:        0 bytes
 11792 ;; Hardware stack levels used:    1
 11793 ;; Hardware stack levels required when called:    2
 11794 ;; This function calls:
 11795 ;;		Nothing
 11796 ;; This function is called by:
 11797 ;;		_vscp_readStdReg
 11798 ;; This function uses a non-reentrant model
 11799 ;;
 11800                           
 11801                           	psect	text39
 11802  003CFA                     __ptext39:
 11803                           	opt stack 0
 11804  003CFA                     _vscp_getMinorVersion:
 11805                           	opt stack 26
 11806                           
 11807                           ; BSR set to: 0
 11808                           
 11809                           ; BSR set to: 0
 11810                           ;main.c: 2280: return 1;
 11811                           
 11812                           ; BSR set to: 0
 11813                           ;incstack = 0
 11814                           ;incstack = 0
 11815  003CFA  0C01               	retlw	1
 11816  003CFC                     __end_of_vscp_getMinorVersion:
 11817                           	opt stack 0
 11818                           tblptru	equ	0xFF8
 11819                           tblptrh	equ	0xFF7
 11820                           tblptrl	equ	0xFF6
 11821                           tablat	equ	0xFF5
 11822                           prodh	equ	0xFF4
 11823                           prodl	equ	0xFF3
 11824                           intcon	equ	0xFF2
 11825                           postinc0	equ	0xFEE
 11826                           wreg	equ	0xFE8
 11827                           indf1	equ	0xFE7
 11828                           fsr1h	equ	0xFE2
 11829                           fsr1l	equ	0xFE1
 11830                           indf2	equ	0xFDF
 11831                           postinc2	equ	0xFDE
 11832                           postdec2	equ	0xFDD
 11833                           plusw2	equ	0xFDB
 11834                           fsr2h	equ	0xFDA
 11835                           fsr2l	equ	0xFD9
 11836                           status	equ	0xFD8
 11837                           
 11838 ;; *************** function _vscp_getMajorVersion *****************
 11839 ;; Defined at:
 11840 ;;		line 2270 in file "../main.c"
 11841 ;; Parameters:    Size  Location     Type
 11842 ;;		None
 11843 ;; Auto vars:     Size  Location     Type
 11844 ;;		None
 11845 ;; Return value:  Size  Location     Type
 11846 ;;                  1    wreg      unsigned char 
 11847 ;; Registers used:
 11848 ;;		wreg
 11849 ;; Tracked objects:
 11850 ;;		On entry : F/0
 11851 ;;		On exit  : F/0
 11852 ;;		Unchanged: F/0
 11853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11854 ;;      Params:         0       0       0       0       0       0       0
 11855 ;;      Locals:         0       0       0       0       0       0       0
 11856 ;;      Temps:          0       0       0       0       0       0       0
 11857 ;;      Totals:         0       0       0       0       0       0       0
 11858 ;;Total ram usage:        0 bytes
 11859 ;; Hardware stack levels used:    1
 11860 ;; Hardware stack levels required when called:    2
 11861 ;; This function calls:
 11862 ;;		Nothing
 11863 ;; This function is called by:
 11864 ;;		_vscp_readStdReg
 11865 ;; This function uses a non-reentrant model
 11866 ;;
 11867                           
 11868                           	psect	text40
 11869  003CFC                     __ptext40:
 11870                           	opt stack 0
 11871  003CFC                     _vscp_getMajorVersion:
 11872                           	opt stack 26
 11873                           
 11874                           ; BSR set to: 0
 11875                           
 11876                           ; BSR set to: 0
 11877                           ;main.c: 2271: return 1;
 11878                           
 11879                           ; BSR set to: 0
 11880                           ;incstack = 0
 11881                           ;incstack = 0
 11882  003CFC  0C01               	retlw	1
 11883  003CFE                     __end_of_vscp_getMajorVersion:
 11884                           	opt stack 0
 11885                           tblptru	equ	0xFF8
 11886                           tblptrh	equ	0xFF7
 11887                           tblptrl	equ	0xFF6
 11888                           tablat	equ	0xFF5
 11889                           prodh	equ	0xFF4
 11890                           prodl	equ	0xFF3
 11891                           intcon	equ	0xFF2
 11892                           postinc0	equ	0xFEE
 11893                           wreg	equ	0xFE8
 11894                           indf1	equ	0xFE7
 11895                           fsr1h	equ	0xFE2
 11896                           fsr1l	equ	0xFE1
 11897                           indf2	equ	0xFDF
 11898                           postinc2	equ	0xFDE
 11899                           postdec2	equ	0xFDD
 11900                           plusw2	equ	0xFDB
 11901                           fsr2h	equ	0xFDA
 11902                           fsr2l	equ	0xFD9
 11903                           status	equ	0xFD8
 11904                           
 11905 ;; *************** function _vscp_newNodeOnline *****************
 11906 ;; Defined at:
 11907 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 11908 ;; Parameters:    Size  Location     Type
 11909 ;;		None
 11910 ;; Auto vars:     Size  Location     Type
 11911 ;;		None
 11912 ;; Return value:  Size  Location     Type
 11913 ;;		None               void
 11914 ;; Registers used:
 11915 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11916 ;; Tracked objects:
 11917 ;;		On entry : F/0
 11918 ;;		On exit  : F/0
 11919 ;;		Unchanged: 0/0
 11920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11921 ;;      Params:         0       0       0       0       0       0       0
 11922 ;;      Locals:         0       0       0       0       0       0       0
 11923 ;;      Temps:          1       0       0       0       0       0       0
 11924 ;;      Totals:         1       0       0       0       0       0       0
 11925 ;;Total ram usage:        1 bytes
 11926 ;; Hardware stack levels used:    1
 11927 ;; Hardware stack levels required when called:    7
 11928 ;; This function calls:
 11929 ;;		_vscp_sendEvent
 11930 ;; This function is called by:
 11931 ;;		_vscp_handleProtocolEvent
 11932 ;; This function uses a non-reentrant model
 11933 ;;
 11934                           
 11935                           	psect	text41
 11936  003970                     __ptext41:
 11937                           	opt stack 0
 11938  003970                     _vscp_newNodeOnline:
 11939                           	opt stack 22
 11940                           
 11941                           ; BSR set to: 0
 11942                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 11943                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11944                           
 11945                           ; BSR set to: 0
 11946                           ;incstack = 0
 11947                           ;incstack = 0
 11948  003970  C095  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
 11949  003974  0E0F               	movlw	15
 11950  003976  164C               	andwf	??_vscp_newNodeOnline,f,c
 11951  003978  044C               	decf	??_vscp_newNodeOnline,w,c
 11952  00397A  E10E               	bnz	l1107
 11953                           
 11954                           ; BSR set to: 0
 11955  00397C  5190               	movf	_vscp_nickname& (0+255),w,b
 11956  00397E  EE20  F09B         	lfsr	2,_vscp_imsg+6
 11957  003982  62DF               	cpfseq	indf2,c
 11958  003984  D009               	goto	l1107
 11959                           
 11960                           ; BSR set to: 0
 11961                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 11962  003986  0E80               	movlw	128
 11963  003988  6FA3               	movwf	_vscp_omsg& (0+255),b
 11964                           
 11965                           ; BSR set to: 0
 11966                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 11967  00398A  6BA4               	clrf	(_vscp_omsg+1)& (0+255),b
 11968                           
 11969                           ; BSR set to: 0
 11970                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 11971  00398C  6BA5               	clrf	(_vscp_omsg+2)& (0+255),b
 11972  00398E  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
 11973                           
 11974                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 11975  003990  0E03               	movlw	3
 11976  003992  6FA7               	movwf	(_vscp_omsg+4)& (0+255),b
 11977                           
 11978                           ; BSR set to: 0
 11979                           ;vscp_firmware.c: 514: vscp_sendEvent();
 11980  003994  EC2F  F01D         	call	_vscp_sendEvent	;wreg free
 11981  003998                     l1107:
 11982                           
 11983                           ; BSR set to: 0
 11984  003998  0012               	return	
 11985  00399A                     __end_of_vscp_newNodeOnline:
 11986                           	opt stack 0
 11987                           tblptru	equ	0xFF8
 11988                           tblptrh	equ	0xFF7
 11989                           tblptrl	equ	0xFF6
 11990                           tablat	equ	0xFF5
 11991                           prodh	equ	0xFF4
 11992                           prodl	equ	0xFF3
 11993                           intcon	equ	0xFF2
 11994                           postinc0	equ	0xFEE
 11995                           wreg	equ	0xFE8
 11996                           indf1	equ	0xFE7
 11997                           fsr1h	equ	0xFE2
 11998                           fsr1l	equ	0xFE1
 11999                           indf2	equ	0xFDF
 12000                           postinc2	equ	0xFDE
 12001                           postdec2	equ	0xFDD
 12002                           plusw2	equ	0xFDB
 12003                           fsr2h	equ	0xFDA
 12004                           fsr2l	equ	0xFD9
 12005                           status	equ	0xFD8
 12006                           
 12007 ;; *************** function _vscp_handleDropNickname *****************
 12008 ;; Defined at:
 12009 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 12010 ;; Parameters:    Size  Location     Type
 12011 ;;		None
 12012 ;; Auto vars:     Size  Location     Type
 12013 ;;  bytes           1   12[COMRAM] unsigned char 
 12014 ;; Return value:  Size  Location     Type
 12015 ;;		None               void
 12016 ;; Registers used:
 12017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12018 ;; Tracked objects:
 12019 ;;		On entry : F/0
 12020 ;;		On exit  : F/0
 12021 ;;		Unchanged: 0/0
 12022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12023 ;;      Params:         0       0       0       0       0       0       0
 12024 ;;      Locals:         1       0       0       0       0       0       0
 12025 ;;      Temps:          0       0       0       0       0       0       0
 12026 ;;      Totals:         1       0       0       0       0       0       0
 12027 ;;Total ram usage:        1 bytes
 12028 ;; Hardware stack levels used:    1
 12029 ;; Hardware stack levels required when called:    5
 12030 ;; This function calls:
 12031 ;;		_vscp_init
 12032 ;;		_vscp_writeNicknamePermanent
 12033 ;; This function is called by:
 12034 ;;		_vscp_handleProtocolEvent
 12035 ;; This function uses a non-reentrant model
 12036 ;;
 12037                           
 12038                           	psect	text42
 12039  0038E6                     __ptext42:
 12040                           	opt stack 0
 12041  0038E6                     _vscp_handleDropNickname:
 12042                           	opt stack 24
 12043                           
 12044                           ; BSR set to: 0
 12045                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 12046                           
 12047                           ; BSR set to: 0
 12048                           ;incstack = 0
 12049                           ;incstack = 0
 12050  0038E6  5195               	movf	_vscp_imsg& (0+255),w,b
 12051  0038E8  0B0F               	andlw	15
 12052  0038EA  6E0D               	movwf	vscp_handleDropNickname@bytes,c
 12053                           
 12054                           ; BSR set to: 0
 12055                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12056  0038EC  500D               	movf	vscp_handleDropNickname@bytes,w,c
 12057  0038EE  E012               	bz	l1103
 12058                           
 12059                           ; BSR set to: 0
 12060  0038F0  5190               	movf	_vscp_nickname& (0+255),w,b
 12061  0038F2  EE20  F09B         	lfsr	2,_vscp_imsg+6
 12062  0038F6  62DF               	cpfseq	indf2,c
 12063  0038F8  D00D               	goto	l1103
 12064                           
 12065                           ; BSR set to: 0
 12066                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 12067  0038FA  040D               	decf	vscp_handleDropNickname@bytes,w,c
 12068  0038FC  E005               	bz	l1102
 12069                           
 12070                           ; BSR set to: 0
 12071  0038FE  0E01               	movlw	1
 12072  003900  640D               	cpfsgt	vscp_handleDropNickname@bytes,c
 12073  003902  D008               	goto	l1103
 12074                           
 12075                           ; BSR set to: 0
 12076  003904  679C               	tstfsz	(_vscp_imsg+7)& (0+255),b
 12077  003906  D006               	goto	l1103
 12078  003908                     l1102:
 12079                           
 12080                           ; BSR set to: 0
 12081                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 12082  003908  6990               	setf	_vscp_nickname& (0+255),b
 12083                           
 12084                           ; BSR set to: 0
 12085                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 12086  00390A  0EFF               	movlw	255
 12087  00390C  EC0D  F01E         	call	_vscp_writeNicknamePermanent
 12088                           
 12089                           ;vscp_firmware.c: 481: vscp_init();
 12090  003910  ECF9  F01B         	call	_vscp_init	;wreg free
 12091  003914                     l1103:
 12092                           
 12093                           ; BSR set to: 0
 12094  003914  0012               	return	
 12095  003916                     __end_of_vscp_handleDropNickname:
 12096                           	opt stack 0
 12097                           tblptru	equ	0xFF8
 12098                           tblptrh	equ	0xFF7
 12099                           tblptrl	equ	0xFF6
 12100                           tablat	equ	0xFF5
 12101                           prodh	equ	0xFF4
 12102                           prodl	equ	0xFF3
 12103                           intcon	equ	0xFF2
 12104                           postinc0	equ	0xFEE
 12105                           wreg	equ	0xFE8
 12106                           indf1	equ	0xFE7
 12107                           fsr1h	equ	0xFE2
 12108                           fsr1l	equ	0xFE1
 12109                           indf2	equ	0xFDF
 12110                           postinc2	equ	0xFDE
 12111                           postdec2	equ	0xFDD
 12112                           plusw2	equ	0xFDB
 12113                           fsr2h	equ	0xFDA
 12114                           fsr2l	equ	0xFD9
 12115                           status	equ	0xFD8
 12116                           
 12117 ;; *************** function _vscp_init *****************
 12118 ;; Defined at:
 12119 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 12120 ;; Parameters:    Size  Location     Type
 12121 ;;		None
 12122 ;; Auto vars:     Size  Location     Type
 12123 ;;		None
 12124 ;; Return value:  Size  Location     Type
 12125 ;;		None               void
 12126 ;; Registers used:
 12127 ;;		wreg, status,2, cstack
 12128 ;; Tracked objects:
 12129 ;;		On entry : 0/0
 12130 ;;		On exit  : F/0
 12131 ;;		Unchanged: 0/0
 12132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12133 ;;      Params:         0       0       0       0       0       0       0
 12134 ;;      Locals:         0       0       0       0       0       0       0
 12135 ;;      Temps:          0       0       0       0       0       0       0
 12136 ;;      Totals:         0       0       0       0       0       0       0
 12137 ;;Total ram usage:        0 bytes
 12138 ;; Hardware stack levels used:    1
 12139 ;; Hardware stack levels required when called:    4
 12140 ;; This function calls:
 12141 ;;		_vscp_readNicknamePermanent
 12142 ;; This function is called by:
 12143 ;;		_main
 12144 ;;		_vscp_handleDropNickname
 12145 ;;		_vscp_handleProtocolEvent
 12146 ;; This function uses a non-reentrant model
 12147 ;;
 12148                           
 12149                           	psect	text43
 12150  0037F2                     __ptext43:
 12151                           	opt stack 0
 12152  0037F2                     _vscp_init:
 12153                           	opt stack 24
 12154                           
 12155                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 12156                           
 12157                           ; BSR set to: 0
 12158                           ;incstack = 0
 12159                           ;incstack = 0
 12160  0037F2  0E02               	movlw	2
 12161  0037F4  6E56               	movwf	_vscp_initledfunc,c
 12162                           
 12163                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 12164  0037F6  EC65  F01E         	call	_vscp_readNicknamePermanent	;wreg free
 12165  0037FA  0100               	movlb	0	; () banked
 12166  0037FC  6F90               	movwf	_vscp_nickname& (0+255),b
 12167                           
 12168                           ; BSR set to: 0
 12169                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 12170  0037FE  6790               	tstfsz	_vscp_nickname& (0+255),b
 12171  003800  D001               	goto	l1044
 12172                           
 12173                           ; BSR set to: 0
 12174  003802  6990               	setf	_vscp_nickname& (0+255),b
 12175  003804                     l1044:
 12176                           
 12177                           ; BSR set to: 0
 12178                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 12179  003804  6B95               	clrf	_vscp_imsg& (0+255),b
 12180                           
 12181                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 12182  003806  6B96               	clrf	(_vscp_imsg+1)& (0+255),b
 12183                           
 12184                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 12185  003808  6B97               	clrf	(_vscp_imsg+2)& (0+255),b
 12186  00380A  6B98               	clrf	(_vscp_imsg+3)& (0+255),b
 12187                           
 12188                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 12189  00380C  6B99               	clrf	(_vscp_imsg+4)& (0+255),b
 12190                           
 12191                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 12192  00380E  6BA3               	clrf	_vscp_omsg& (0+255),b
 12193                           
 12194                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 12195  003810  6BA4               	clrf	(_vscp_omsg+1)& (0+255),b
 12196                           
 12197                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 12198  003812  6BA5               	clrf	(_vscp_omsg+2)& (0+255),b
 12199  003814  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
 12200                           
 12201                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 12202  003816  6BA7               	clrf	(_vscp_omsg+4)& (0+255),b
 12203                           
 12204                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 12205  003818  6A55               	clrf	_vscp_alarmstatus,c
 12206                           
 12207                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 12208  00381A  6A57               	clrf	_vscp_probe_address,c
 12209                           
 12210                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 12211  00381C  6B91               	clrf	_vscp_node_state& (0+255),b
 12212                           
 12213                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 12214  00381E  6B92               	clrf	_vscp_node_substate& (0+255),b
 12215                           
 12216                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 12217  003820  6B93               	clrf	_vscp_probe_cnt& (0+255),b
 12218                           
 12219                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 12220  003822  6A52               	clrf	_vscp_page_select,c
 12221  003824  6A53               	clrf	_vscp_page_select+1,c
 12222                           
 12223                           ;vscp_firmware.c: 153: vscp_timer = 0;
 12224  003826  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12225  003828  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12226                           
 12227                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 12228  00382A  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
 12229  00382C  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 12230                           
 12231                           ;vscp_firmware.c: 155: vscp_second = 0;
 12232  00382E  6B94               	clrf	_vscp_second& (0+255),b
 12233                           
 12234                           ;vscp_firmware.c: 156: vscp_minute = 0;
 12235  003830  6B8F               	clrf	_vscp_minute& (0+255),b
 12236                           
 12237                           ;vscp_firmware.c: 157: vscp_hour = 0;
 12238  003832  6B8D               	clrf	_vscp_hour& (0+255),b
 12239                           
 12240                           ; BSR set to: 0
 12241  003834  0012               	return	
 12242  003836                     __end_of_vscp_init:
 12243                           	opt stack 0
 12244                           tblptru	equ	0xFF8
 12245                           tblptrh	equ	0xFF7
 12246                           tblptrl	equ	0xFF6
 12247                           tablat	equ	0xFF5
 12248                           prodh	equ	0xFF4
 12249                           prodl	equ	0xFF3
 12250                           intcon	equ	0xFF2
 12251                           postinc0	equ	0xFEE
 12252                           wreg	equ	0xFE8
 12253                           indf1	equ	0xFE7
 12254                           fsr1h	equ	0xFE2
 12255                           fsr1l	equ	0xFE1
 12256                           indf2	equ	0xFDF
 12257                           postinc2	equ	0xFDE
 12258                           postdec2	equ	0xFDD
 12259                           plusw2	equ	0xFDB
 12260                           fsr2h	equ	0xFDA
 12261                           fsr2l	equ	0xFD9
 12262                           status	equ	0xFD8
 12263                           
 12264 ;; *************** function _vscp_readNicknamePermanent *****************
 12265 ;; Defined at:
 12266 ;;		line 847 in file "../main.c"
 12267 ;; Parameters:    Size  Location     Type
 12268 ;;		None
 12269 ;; Auto vars:     Size  Location     Type
 12270 ;;		None
 12271 ;; Return value:  Size  Location     Type
 12272 ;;                  1    wreg      unsigned char 
 12273 ;; Registers used:
 12274 ;;		wreg, status,2, cstack
 12275 ;; Tracked objects:
 12276 ;;		On entry : 0/0
 12277 ;;		On exit  : 0/0
 12278 ;;		Unchanged: 0/0
 12279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12280 ;;      Params:         0       0       0       0       0       0       0
 12281 ;;      Locals:         0       0       0       0       0       0       0
 12282 ;;      Temps:          0       0       0       0       0       0       0
 12283 ;;      Totals:         0       0       0       0       0       0       0
 12284 ;;Total ram usage:        0 bytes
 12285 ;; Hardware stack levels used:    1
 12286 ;; Hardware stack levels required when called:    3
 12287 ;; This function calls:
 12288 ;;		_Read_b_eep
 12289 ;; This function is called by:
 12290 ;;		_vscp_init
 12291 ;; This function uses a non-reentrant model
 12292 ;;
 12293                           
 12294                           	psect	text44
 12295  003CCA                     __ptext44:
 12296                           	opt stack 0
 12297  003CCA                     _vscp_readNicknamePermanent:
 12298                           	opt stack 24
 12299                           
 12300                           ;main.c: 848: return Read_b_eep(0x01);
 12301                           
 12302                           ; BSR set to: 0
 12303                           ;incstack = 0
 12304                           ;incstack = 0
 12305  003CCA  6A09               	clrf	?_Read_b_eep+1,c
 12306  003CCC  0E01               	movlw	1
 12307  003CCE  6E08               	movwf	?_Read_b_eep,c
 12308  003CD0  EF3F  F01E         	goto	_Read_b_eep	;wreg free
 12309  003CD4                     __end_of_vscp_readNicknamePermanent:
 12310                           	opt stack 0
 12311                           tblptru	equ	0xFF8
 12312                           tblptrh	equ	0xFF7
 12313                           tblptrl	equ	0xFF6
 12314                           tablat	equ	0xFF5
 12315                           prodh	equ	0xFF4
 12316                           prodl	equ	0xFF3
 12317                           intcon	equ	0xFF2
 12318                           postinc0	equ	0xFEE
 12319                           wreg	equ	0xFE8
 12320                           indf1	equ	0xFE7
 12321                           fsr1h	equ	0xFE2
 12322                           fsr1l	equ	0xFE1
 12323                           indf2	equ	0xFDF
 12324                           postinc2	equ	0xFDE
 12325                           postdec2	equ	0xFDD
 12326                           plusw2	equ	0xFDB
 12327                           fsr2h	equ	0xFDA
 12328                           fsr2l	equ	0xFD9
 12329                           status	equ	0xFD8
 12330                           
 12331 ;; *************** function _vscp_handleSetNickname *****************
 12332 ;; Defined at:
 12333 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 12334 ;; Parameters:    Size  Location     Type
 12335 ;;		None
 12336 ;; Auto vars:     Size  Location     Type
 12337 ;;		None
 12338 ;; Return value:  Size  Location     Type
 12339 ;;		None               void
 12340 ;; Registers used:
 12341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12342 ;; Tracked objects:
 12343 ;;		On entry : F/0
 12344 ;;		On exit  : 0/0
 12345 ;;		Unchanged: 0/0
 12346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12347 ;;      Params:         0       0       0       0       0       0       0
 12348 ;;      Locals:         0       0       0       0       0       0       0
 12349 ;;      Temps:          0       0       0       0       0       0       0
 12350 ;;      Totals:         0       0       0       0       0       0       0
 12351 ;;Total ram usage:        0 bytes
 12352 ;; Hardware stack levels used:    1
 12353 ;; Hardware stack levels required when called:    4
 12354 ;; This function calls:
 12355 ;;		_vscp_writeNicknamePermanent
 12356 ;;		_vscp_setSegmentCRC
 12357 ;; This function is called by:
 12358 ;;		_vscp_handleProtocolEvent
 12359 ;; This function uses a non-reentrant model
 12360 ;;
 12361                           
 12362                           	psect	text45
 12363  003A84                     __ptext45:
 12364                           	opt stack 0
 12365  003A84                     _vscp_handleSetNickname:
 12366                           	opt stack 25
 12367                           
 12368                           ; BSR set to: 0
 12369                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 12370                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12371                           
 12372                           ;incstack = 0
 12373                           ;incstack = 0
 12374  003A84  5195               	movf	_vscp_imsg& (0+255),w,b
 12375  003A86  0B0F               	andlw	15
 12376  003A88  0A02               	xorlw	2
 12377  003A8A  E10D               	bnz	l1096
 12378                           
 12379                           ; BSR set to: 0
 12380  003A8C  5190               	movf	_vscp_nickname& (0+255),w,b
 12381  003A8E  EE20  F09B         	lfsr	2,_vscp_imsg+6
 12382  003A92  62DF               	cpfseq	indf2,c
 12383  003A94  D008               	goto	l1096
 12384                           
 12385                           ; BSR set to: 0
 12386                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 12387  003A96  C09C  F090         	movff	_vscp_imsg+7,_vscp_nickname
 12388                           
 12389                           ; BSR set to: 0
 12390                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 12391  003A9A  5190               	movf	_vscp_nickname& (0+255),w,b
 12392  003A9C  EC0D  F01E         	call	_vscp_writeNicknamePermanent
 12393                           
 12394                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 12395  003AA0  0E40               	movlw	64
 12396  003AA2  EC02  F01E         	call	_vscp_setSegmentCRC
 12397  003AA6                     l1096:
 12398  003AA6  0012               	return	
 12399  003AA8                     __end_of_vscp_handleSetNickname:
 12400                           	opt stack 0
 12401                           tblptru	equ	0xFF8
 12402                           tblptrh	equ	0xFF7
 12403                           tblptrl	equ	0xFF6
 12404                           tablat	equ	0xFF5
 12405                           prodh	equ	0xFF4
 12406                           prodl	equ	0xFF3
 12407                           intcon	equ	0xFF2
 12408                           postinc0	equ	0xFEE
 12409                           wreg	equ	0xFE8
 12410                           indf1	equ	0xFE7
 12411                           fsr1h	equ	0xFE2
 12412                           fsr1l	equ	0xFE1
 12413                           indf2	equ	0xFDF
 12414                           postinc2	equ	0xFDE
 12415                           postdec2	equ	0xFDD
 12416                           plusw2	equ	0xFDB
 12417                           fsr2h	equ	0xFDA
 12418                           fsr2l	equ	0xFD9
 12419                           status	equ	0xFD8
 12420                           
 12421 ;; *************** function _vscp_handleHeartbeat *****************
 12422 ;; Defined at:
 12423 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 12424 ;; Parameters:    Size  Location     Type
 12425 ;;		None
 12426 ;; Auto vars:     Size  Location     Type
 12427 ;;		None
 12428 ;; Return value:  Size  Location     Type
 12429 ;;		None               void
 12430 ;; Registers used:
 12431 ;;		wreg, status,2, status,0, cstack
 12432 ;; Tracked objects:
 12433 ;;		On entry : F/0
 12434 ;;		On exit  : 0/0
 12435 ;;		Unchanged: 0/0
 12436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12437 ;;      Params:         0       0       0       0       0       0       0
 12438 ;;      Locals:         0       0       0       0       0       0       0
 12439 ;;      Temps:          0       0       0       0       0       0       0
 12440 ;;      Totals:         0       0       0       0       0       0       0
 12441 ;;Total ram usage:        0 bytes
 12442 ;; Hardware stack levels used:    1
 12443 ;; Hardware stack levels required when called:    4
 12444 ;; This function calls:
 12445 ;;		_vscp_writeNicknamePermanent
 12446 ;;		_vscp_getSegmentCRC
 12447 ;;		_vscp_setSegmentCRC
 12448 ;; This function is called by:
 12449 ;;		_vscp_handleProtocolEvent
 12450 ;; This function uses a non-reentrant model
 12451 ;;
 12452                           
 12453                           	psect	text46
 12454  003836                     __ptext46:
 12455                           	opt stack 0
 12456  003836                     _vscp_handleHeartbeat:
 12457                           	opt stack 25
 12458                           
 12459                           ; BSR set to: 0
 12460                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 12461                           
 12462                           ;incstack = 0
 12463                           ;incstack = 0
 12464  003836  EC6A  F01E         	call	_vscp_getSegmentCRC	;wreg free
 12465  00383A  0900               	iorlw	0
 12466  00383C  E116               	bnz	l9487
 12467                           
 12468                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 12469                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 12470  00383E  0100               	movlb	0	; () banked
 12471  003840  5195               	movf	_vscp_imsg& (0+255),w,b
 12472  003842  0B0F               	andlw	15
 12473  003844  0A05               	xorlw	5
 12474  003846  E115               	bnz	l1092
 12475                           
 12476                           ; BSR set to: 0
 12477  003848  EC6A  F01E         	call	_vscp_getSegmentCRC	;wreg free
 12478  00384C  0100               	movlb	0	; () banked
 12479  00384E  199B               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 12480  003850  E010               	bz	l1092
 12481                           
 12482                           ; BSR set to: 0
 12483                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12484  003852  519B               	movf	(_vscp_imsg+6)& (0+255),w,b
 12485  003854  EC02  F01E         	call	_vscp_setSegmentCRC
 12486                           
 12487                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 12488  003858  0100               	movlb	0	; () banked
 12489  00385A  6990               	setf	_vscp_nickname& (0+255),b
 12490                           
 12491                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 12492  00385C  0EFF               	movlw	255
 12493  00385E  EC0D  F01E         	call	_vscp_writeNicknamePermanent
 12494                           
 12495                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 12496  003862  0E01               	movlw	1
 12497  003864  0100               	movlb	0	; () banked
 12498  003866  6F91               	movwf	_vscp_node_state& (0+255),b
 12499  003868  D004               	goto	l1092
 12500  00386A                     l9487:
 12501                           
 12502                           ;vscp_firmware.c: 411: else {
 12503                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12504  00386A  0100               	movlb	0	; () banked
 12505  00386C  519B               	movf	(_vscp_imsg+6)& (0+255),w,b
 12506  00386E  EC02  F01E         	call	_vscp_setSegmentCRC
 12507  003872                     l1092:
 12508  003872  0012               	return	
 12509  003874                     __end_of_vscp_handleHeartbeat:
 12510                           	opt stack 0
 12511                           tblptru	equ	0xFF8
 12512                           tblptrh	equ	0xFF7
 12513                           tblptrl	equ	0xFF6
 12514                           tablat	equ	0xFF5
 12515                           prodh	equ	0xFF4
 12516                           prodl	equ	0xFF3
 12517                           intcon	equ	0xFF2
 12518                           postinc0	equ	0xFEE
 12519                           wreg	equ	0xFE8
 12520                           indf1	equ	0xFE7
 12521                           fsr1h	equ	0xFE2
 12522                           fsr1l	equ	0xFE1
 12523                           indf2	equ	0xFDF
 12524                           postinc2	equ	0xFDE
 12525                           postdec2	equ	0xFDD
 12526                           plusw2	equ	0xFDB
 12527                           fsr2h	equ	0xFDA
 12528                           fsr2l	equ	0xFD9
 12529                           status	equ	0xFD8
 12530                           
 12531 ;; *************** function _vscp_getMatrixInfo *****************
 12532 ;; Defined at:
 12533 ;;		line 2480 in file "../main.c"
 12534 ;; Parameters:    Size  Location     Type
 12535 ;;  pData           1    wreg     PTR unsigned char 
 12536 ;;		 -> vscp_omsg(13), 
 12537 ;; Auto vars:     Size  Location     Type
 12538 ;;  pData           1    0[COMRAM] PTR unsigned char 
 12539 ;;		 -> vscp_omsg(13), 
 12540 ;;  i               1    7[COMRAM] unsigned char 
 12541 ;; Return value:  Size  Location     Type
 12542 ;;		None               void
 12543 ;; Registers used:
 12544 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12545 ;; Tracked objects:
 12546 ;;		On entry : F/0
 12547 ;;		On exit  : F/0
 12548 ;;		Unchanged: 0/0
 12549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12550 ;;      Params:         0       0       0       0       0       0       0
 12551 ;;      Locals:         1       0       0       0       0       0       0
 12552 ;;      Temps:          0       0       0       0       0       0       0
 12553 ;;      Totals:         1       0       0       0       0       0       0
 12554 ;;Total ram usage:        1 bytes
 12555 ;; Hardware stack levels used:    1
 12556 ;; Hardware stack levels required when called:    2
 12557 ;; This function calls:
 12558 ;;		Nothing
 12559 ;; This function is called by:
 12560 ;;		_vscp_handleProtocolEvent
 12561 ;; This function uses a non-reentrant model
 12562 ;;
 12563                           
 12564                           	psect	text47
 12565  003B10                     __ptext47:
 12566                           	opt stack 0
 12567  003B10                     _vscp_getMatrixInfo:
 12568                           	opt stack 27
 12569                           
 12570                           ; BSR set to: 0
 12571                           ;main.c: 2481: uint8_t i;
 12572                           ;main.c: 2483: vscp_omsg.data[ 0 ] = 7;
 12573                           
 12574                           ;incstack = 0
 12575                           ;incstack = 0
 12576  003B10  0E07               	movlw	7
 12577  003B12  6FA8               	movwf	(_vscp_omsg+5)& (0+255),b
 12578                           
 12579                           ;main.c: 2484: vscp_omsg.data[ 1 ] = 72;
 12580  003B14  0E48               	movlw	72
 12581  003B16  6FA9               	movwf	(_vscp_omsg+6)& (0+255),b
 12582                           
 12583                           ;main.c: 2487: for ( i = 2; i < 8; i++ ) {
 12584  003B18  0E02               	movlw	2
 12585  003B1A  6E08               	movwf	vscp_getMatrixInfo@i,c
 12586  003B1C                     l6871:
 12587                           
 12588                           ; BSR set to: 0
 12589                           ;main.c: 2488: vscp_omsg.data[ i ] = 0;
 12590  003B1C  5008               	movf	vscp_getMatrixInfo@i,w,c
 12591  003B1E  0FA8               	addlw	low (_vscp_omsg+5)
 12592  003B20  6ED9               	movwf	fsr2l,c
 12593  003B22  6ADA               	clrf	fsr2h,c
 12594  003B24  6ADF               	clrf	indf2,c
 12595                           
 12596                           ; BSR set to: 0
 12597  003B26  2A08               	incf	vscp_getMatrixInfo@i,f,c
 12598                           
 12599                           ; BSR set to: 0
 12600  003B28  0E07               	movlw	7
 12601  003B2A  6408               	cpfsgt	vscp_getMatrixInfo@i,c
 12602  003B2C  D7F7               	goto	l6871
 12603                           
 12604                           ; BSR set to: 0
 12605  003B2E  0C07               	retlw	7
 12606  003B30                     __end_of_vscp_getMatrixInfo:
 12607                           	opt stack 0
 12608                           tblptru	equ	0xFF8
 12609                           tblptrh	equ	0xFF7
 12610                           tblptrl	equ	0xFF6
 12611                           tablat	equ	0xFF5
 12612                           prodh	equ	0xFF4
 12613                           prodl	equ	0xFF3
 12614                           intcon	equ	0xFF2
 12615                           postinc0	equ	0xFEE
 12616                           wreg	equ	0xFE8
 12617                           indf1	equ	0xFE7
 12618                           fsr1h	equ	0xFE2
 12619                           fsr1l	equ	0xFE1
 12620                           indf2	equ	0xFDF
 12621                           postinc2	equ	0xFDE
 12622                           postdec2	equ	0xFDD
 12623                           plusw2	equ	0xFDB
 12624                           fsr2h	equ	0xFDA
 12625                           fsr2l	equ	0xFD9
 12626                           status	equ	0xFD8
 12627                           
 12628 ;; *************** function _vscp_goBootloaderMode *****************
 12629 ;; Defined at:
 12630 ;;		line 2464 in file "../main.c"
 12631 ;; Parameters:    Size  Location     Type
 12632 ;;  algorithm       1    wreg     unsigned char 
 12633 ;; Auto vars:     Size  Location     Type
 12634 ;;  algorithm       1   11[COMRAM] unsigned char 
 12635 ;; Return value:  Size  Location     Type
 12636 ;;		None               void
 12637 ;; Registers used:
 12638 ;;		wreg, status,2, status,0, cstack
 12639 ;; Tracked objects:
 12640 ;;		On entry : F/0
 12641 ;;		On exit  : 0/0
 12642 ;;		Unchanged: 0/0
 12643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12644 ;;      Params:         0       0       0       0       0       0       0
 12645 ;;      Locals:         1       0       0       0       0       0       0
 12646 ;;      Temps:          0       0       0       0       0       0       0
 12647 ;;      Totals:         1       0       0       0       0       0       0
 12648 ;;Total ram usage:        1 bytes
 12649 ;; Hardware stack levels used:    1
 12650 ;; Hardware stack levels required when called:    3
 12651 ;; This function calls:
 12652 ;;		_Busy_eep
 12653 ;;		_Write_b_eep
 12654 ;; This function is called by:
 12655 ;;		_vscp_handleProtocolEvent
 12656 ;; This function uses a non-reentrant model
 12657 ;;
 12658                           
 12659                           	psect	text48
 12660  003B88                     __ptext48:
 12661                           	opt stack 0
 12662  003B88                     _vscp_goBootloaderMode:
 12663                           	opt stack 26
 12664                           
 12665                           ; BSR set to: 0
 12666                           ;incstack = 0
 12667                           ;incstack = 0
 12668                           ;vscp_goBootloaderMode@algorithm stored from wreg
 12669  003B88  CFE8 F00C          	movff	wreg,vscp_goBootloaderMode@algorithm
 12670                           
 12671                           ; BSR set to: 0
 12672                           ;main.c: 2465: if ( 0x01 != algorithm ) return;
 12673  003B8C  040C               	decf	vscp_goBootloaderMode@algorithm,w,c
 12674  003B8E  E109               	bnz	l634
 12675                           
 12676                           ; BSR set to: 0
 12677                           ;main.c: 2469: (Busy_eep(), Write_b_eep(0x00,0xff));
 12678  003B90  EC73  F01E         	call	_Busy_eep	;wreg free
 12679  003B94  6A09               	clrf	?_Write_b_eep+1,c
 12680  003B96  6A08               	clrf	?_Write_b_eep,c
 12681  003B98  0EFF               	movlw	255
 12682  003B9A  680A               	setf	?_Write_b_eep+2,c
 12683  003B9C  EC59  F01C         	call	_Write_b_eep	;wreg free
 12684  003BA0  00FF               	reset		;# 
 12685  003BA2                     l634:
 12686  003BA2  0012               	return	
 12687  003BA4                     __end_of_vscp_goBootloaderMode:
 12688                           	opt stack 0
 12689                           tblptru	equ	0xFF8
 12690                           tblptrh	equ	0xFF7
 12691                           tblptrl	equ	0xFF6
 12692                           tablat	equ	0xFF5
 12693                           prodh	equ	0xFF4
 12694                           prodl	equ	0xFF3
 12695                           intcon	equ	0xFF2
 12696                           postinc0	equ	0xFEE
 12697                           wreg	equ	0xFE8
 12698                           indf1	equ	0xFE7
 12699                           fsr1h	equ	0xFE2
 12700                           fsr1l	equ	0xFE1
 12701                           indf2	equ	0xFDF
 12702                           postinc2	equ	0xFDE
 12703                           postdec2	equ	0xFDD
 12704                           plusw2	equ	0xFDB
 12705                           fsr2h	equ	0xFDA
 12706                           fsr2l	equ	0xFD9
 12707                           status	equ	0xFD8
 12708                           
 12709 ;; *************** function _vscp_handleProbeState *****************
 12710 ;; Defined at:
 12711 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 12712 ;; Parameters:    Size  Location     Type
 12713 ;;		None
 12714 ;; Auto vars:     Size  Location     Type
 12715 ;;		None
 12716 ;; Return value:  Size  Location     Type
 12717 ;;		None               void
 12718 ;; Registers used:
 12719 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12720 ;; Tracked objects:
 12721 ;;		On entry : 0/0
 12722 ;;		On exit  : F/0
 12723 ;;		Unchanged: 0/0
 12724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12725 ;;      Params:         0       0       0       0       0       0       0
 12726 ;;      Locals:         0       0       0       0       0       0       0
 12727 ;;      Temps:          0       0       0       0       0       0       0
 12728 ;;      Totals:         0       0       0       0       0       0       0
 12729 ;;Total ram usage:        0 bytes
 12730 ;; Hardware stack levels used:    1
 12731 ;; Hardware stack levels required when called:    8
 12732 ;; This function calls:
 12733 ;;		_vscp_goActiveState
 12734 ;;		_vscp_writeNicknamePermanent
 12735 ;;		_vscp_sendEvent
 12736 ;;		_vscp_setSegmentCRC
 12737 ;; This function is called by:
 12738 ;;		_main
 12739 ;; This function uses a non-reentrant model
 12740 ;;
 12741                           
 12742                           	psect	text49
 12743  00331E                     __ptext49:
 12744                           	opt stack 0
 12745  00331E                     _vscp_handleProbeState:
 12746                           	opt stack 22
 12747                           
 12748                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 12749                           
 12750                           ;incstack = 0
 12751                           ;incstack = 0
 12752  00331E  D053               	goto	l7809
 12753  003320                     l7739:
 12754                           
 12755                           ; BSR set to: 0
 12756                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 12757  003320  2857               	incf	_vscp_probe_address,w,c
 12758  003322  E010               	bz	l7755
 12759                           
 12760                           ; BSR set to: 0
 12761                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 12762  003324  0E81               	movlw	129
 12763  003326  6FA3               	movwf	_vscp_omsg& (0+255),b
 12764                           
 12765                           ; BSR set to: 0
 12766                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 12767  003328  6BA4               	clrf	(_vscp_omsg+1)& (0+255),b
 12768                           
 12769                           ; BSR set to: 0
 12770                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 12771  00332A  6BA5               	clrf	(_vscp_omsg+2)& (0+255),b
 12772  00332C  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
 12773                           
 12774                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 12775  00332E  0E02               	movlw	2
 12776  003330  6FA7               	movwf	(_vscp_omsg+4)& (0+255),b
 12777                           
 12778                           ; BSR set to: 0
 12779                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 12780  003332  C057  F0A8         	movff	_vscp_probe_address,_vscp_omsg+5
 12781                           
 12782                           ; BSR set to: 0
 12783                           ;vscp_firmware.c: 216: vscp_sendEvent();
 12784  003336  EC2F  F01D         	call	_vscp_sendEvent	;wreg free
 12785                           
 12786                           ; BSR set to: 0
 12787                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 12788  00333A  0E01               	movlw	1
 12789  00333C  6F92               	movwf	_vscp_node_substate& (0+255),b
 12790  00333E                     l7753:
 12791                           
 12792                           ; BSR set to: 0
 12793                           ;vscp_firmware.c: 219: vscp_timer = 0;
 12794  00333E  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12795  003340  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12796                           
 12797                           ;vscp_firmware.c: 221: }
 12798  003342  D048               	goto	l1059
 12799  003344                     l7755:
 12800                           
 12801                           ; BSR set to: 0
 12802                           ;vscp_firmware.c: 222: else {
 12803                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 12804  003344  0E04               	movlw	4
 12805  003346  6F91               	movwf	_vscp_node_state& (0+255),b
 12806                           
 12807                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 12808  003348  0E81               	movlw	129
 12809  00334A  6FA3               	movwf	_vscp_omsg& (0+255),b
 12810                           
 12811                           ; BSR set to: 0
 12812                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 12813  00334C  69A8               	setf	(_vscp_omsg+5)& (0+255),b
 12814                           
 12815                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 12816  00334E  0E07               	movlw	7
 12817  003350  6FA4               	movwf	(_vscp_omsg+1)& (0+255),b
 12818                           
 12819                           ; BSR set to: 0
 12820                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 12821  003352  6BA5               	clrf	(_vscp_omsg+2)& (0+255),b
 12822  003354  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
 12823                           
 12824                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 12825  003356  0E03               	movlw	3
 12826  003358  6FA7               	movwf	(_vscp_omsg+4)& (0+255),b
 12827                           
 12828                           ; BSR set to: 0
 12829                           ;vscp_firmware.c: 235: vscp_sendEvent();
 12830  00335A  EC2F  F01D         	call	_vscp_sendEvent	;wreg free
 12831  00335E  D03A               	goto	l1059
 12832  003360                     l1060:
 12833                           
 12834                           ; BSR set to: 0
 12835                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 12836  003360  AF95               	btfss	_vscp_imsg& (0+255),7,b
 12837  003362  D00F               	goto	l7779
 12838                           
 12839                           ; BSR set to: 0
 12840                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 12841                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 12842  003364  5198               	movf	(_vscp_imsg+3)& (0+255),w,b
 12843  003366  1197               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 12844  003368  E135               	bnz	l1059
 12845                           
 12846                           ; BSR set to: 0
 12847  00336A  5199               	movf	(_vscp_imsg+4)& (0+255),w,b
 12848  00336C  0A03               	xorlw	3
 12849  00336E  E132               	bnz	l1059
 12850                           
 12851                           ; BSR set to: 0
 12852                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 12853  003370  6657               	tstfsz	_vscp_probe_address,c
 12854  003372  D003               	goto	l7773
 12855                           
 12856                           ; BSR set to: 0
 12857                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 12858  003374  0E02               	movlw	2
 12859  003376  6F91               	movwf	_vscp_node_state& (0+255),b
 12860  003378  D7E2               	goto	l7753
 12861  00337A                     l7773:
 12862                           
 12863                           ; BSR set to: 0
 12864                           ;vscp_firmware.c: 257: else {
 12865                           ;vscp_firmware.c: 260: vscp_probe_address++;
 12866  00337A  2A57               	incf	_vscp_probe_address,f,c
 12867                           
 12868                           ; BSR set to: 0
 12869                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 12870  00337C  6B92               	clrf	_vscp_node_substate& (0+255),b
 12871  00337E                     l7777:
 12872                           
 12873                           ; BSR set to: 0
 12874                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 12875  00337E  6B93               	clrf	_vscp_probe_cnt& (0+255),b
 12876  003380  D029               	goto	l1059
 12877  003382                     l7779:
 12878                           
 12879                           ; BSR set to: 0
 12880                           ;vscp_firmware.c: 267: else {
 12881                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 12882  003382  0EE9               	movlw	233
 12883  003384  5D86               	subwf	_vscp_timer& (0+255),w,b	;volatile
 12884  003386  0E03               	movlw	3
 12885  003388  5987               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 12886  00338A  E324               	bnc	l1059
 12887                           
 12888                           ; BSR set to: 0
 12889                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 12890  00338C  2B93               	incf	_vscp_probe_cnt& (0+255),f,b
 12891                           
 12892                           ; BSR set to: 0
 12893                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 12894  00338E  0E02               	movlw	2
 12895  003390  6593               	cpfsgt	_vscp_probe_cnt& (0+255),b
 12896  003392  D017               	goto	l1067
 12897                           
 12898                           ; BSR set to: 0
 12899                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 12900  003394  6657               	tstfsz	_vscp_probe_address,c
 12901  003396  D005               	goto	l1068
 12902                           
 12903                           ; BSR set to: 0
 12904                           ;vscp_firmware.c: 279: vscp_probe_address++;
 12905  003398  2A57               	incf	_vscp_probe_address,f,c
 12906                           
 12907                           ; BSR set to: 0
 12908                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 12909  00339A  6B92               	clrf	_vscp_node_substate& (0+255),b
 12910                           
 12911                           ; BSR set to: 0
 12912                           ;vscp_firmware.c: 281: vscp_timer = 0;
 12913  00339C  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12914  00339E  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12915  0033A0  D7EE               	goto	l7777
 12916  0033A2                     l1068:
 12917                           
 12918                           ; BSR set to: 0
 12919                           ;vscp_firmware.c: 285: else {
 12920                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 12921  0033A2  C057  F090         	movff	_vscp_probe_address,_vscp_nickname
 12922                           
 12923                           ; BSR set to: 0
 12924                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 12925  0033A6  0E03               	movlw	3
 12926  0033A8  6F91               	movwf	_vscp_node_state& (0+255),b
 12927                           
 12928                           ; BSR set to: 0
 12929                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 12930  0033AA  6B92               	clrf	_vscp_node_substate& (0+255),b
 12931                           
 12932                           ; BSR set to: 0
 12933                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 12934  0033AC  5190               	movf	_vscp_nickname& (0+255),w,b
 12935  0033AE  EC0D  F01E         	call	_vscp_writeNicknamePermanent
 12936                           
 12937                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 12938  0033B2  0E40               	movlw	64
 12939  0033B4  EC02  F01E         	call	_vscp_setSegmentCRC
 12940                           
 12941                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 12942  0033B8  0100               	movlb	0	; () banked
 12943  0033BA  6B93               	clrf	_vscp_probe_cnt& (0+255),b
 12944                           
 12945                           ; BSR set to: 0
 12946                           ;vscp_firmware.c: 296: vscp_goActiveState();
 12947  0033BC  EC98  F01D         	call	_vscp_goActiveState	;wreg free
 12948  0033C0  D009               	goto	l1059
 12949  0033C2                     l1067:
 12950                           
 12951                           ; BSR set to: 0
 12952                           ;vscp_firmware.c: 300: else {
 12953                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 12954  0033C2  6B92               	clrf	_vscp_node_substate& (0+255),b
 12955  0033C4  D007               	goto	l1059
 12956  0033C6                     l7809:
 12957  0033C6  0100               	movlb	0	; () banked
 12958  0033C8  5192               	movf	_vscp_node_substate& (0+255),w,b
 12959                           
 12960                           ; Switch size 1, requested type "space"
 12961                           ; Number of cases is 3, Range of values is 0 to 2
 12962                           ; switch strategies available:
 12963                           ; Name         Instructions Cycles
 12964                           ; simple_byte           10     6 (average)
 12965                           ;	Chosen strategy is simple_byte
 12966  0033CA  E0AA               	bz	l7739
 12967  0033CC  0A01               	xorlw	1	; case 1
 12968  0033CE  E0C8               	bz	l1060
 12969  0033D0  0A03               	xorlw	3	; case 2
 12970  0033D2  E1F7               	bnz	l1067
 12971  0033D4                     l1059:
 12972                           
 12973                           ; BSR set to: 0
 12974                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 12975  0033D4  6B95               	clrf	_vscp_imsg& (0+255),b
 12976                           
 12977                           ; BSR set to: 0
 12978  0033D6  0012               	return	
 12979  0033D8                     __end_of_vscp_handleProbeState:
 12980                           	opt stack 0
 12981                           tblptru	equ	0xFF8
 12982                           tblptrh	equ	0xFF7
 12983                           tblptrl	equ	0xFF6
 12984                           tablat	equ	0xFF5
 12985                           prodh	equ	0xFF4
 12986                           prodl	equ	0xFF3
 12987                           intcon	equ	0xFF2
 12988                           postinc0	equ	0xFEE
 12989                           wreg	equ	0xFE8
 12990                           indf1	equ	0xFE7
 12991                           fsr1h	equ	0xFE2
 12992                           fsr1l	equ	0xFE1
 12993                           indf2	equ	0xFDF
 12994                           postinc2	equ	0xFDE
 12995                           postdec2	equ	0xFDD
 12996                           plusw2	equ	0xFDB
 12997                           fsr2h	equ	0xFDA
 12998                           fsr2l	equ	0xFD9
 12999                           status	equ	0xFD8
 13000                           
 13001 ;; *************** function _vscp_goActiveState *****************
 13002 ;; Defined at:
 13003 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 13004 ;; Parameters:    Size  Location     Type
 13005 ;;		None
 13006 ;; Auto vars:     Size  Location     Type
 13007 ;;		None
 13008 ;; Return value:  Size  Location     Type
 13009 ;;		None               void
 13010 ;; Registers used:
 13011 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13012 ;; Tracked objects:
 13013 ;;		On entry : 0/0
 13014 ;;		On exit  : F/0
 13015 ;;		Unchanged: 0/0
 13016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13017 ;;      Params:         0       0       0       0       0       0       0
 13018 ;;      Locals:         0       0       0       0       0       0       0
 13019 ;;      Temps:          0       0       0       0       0       0       0
 13020 ;;      Totals:         0       0       0       0       0       0       0
 13021 ;;Total ram usage:        0 bytes
 13022 ;; Hardware stack levels used:    1
 13023 ;; Hardware stack levels required when called:    7
 13024 ;; This function calls:
 13025 ;;		_vscp_sendEvent
 13026 ;; This function is called by:
 13027 ;;		_main
 13028 ;;		_vscp_handleProbeState
 13029 ;; This function uses a non-reentrant model
 13030 ;;
 13031                           
 13032                           	psect	text50
 13033  003B30                     __ptext50:
 13034                           	opt stack 0
 13035  003B30                     _vscp_goActiveState:
 13036                           	opt stack 22
 13037                           
 13038                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 13039                           
 13040                           ; BSR set to: 0
 13041                           ;incstack = 0
 13042                           ;incstack = 0
 13043  003B30  0E81               	movlw	129
 13044  003B32  0100               	movlb	0	; () banked
 13045  003B34  6FA3               	movwf	_vscp_omsg& (0+255),b
 13046                           
 13047                           ; BSR set to: 0
 13048                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 13049  003B36  6BA4               	clrf	(_vscp_omsg+1)& (0+255),b
 13050                           
 13051                           ; BSR set to: 0
 13052                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 13053  003B38  6BA5               	clrf	(_vscp_omsg+2)& (0+255),b
 13054  003B3A  6BA6               	clrf	(_vscp_omsg+3)& (0+255),b
 13055                           
 13056                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 13057  003B3C  0E02               	movlw	2
 13058  003B3E  6FA7               	movwf	(_vscp_omsg+4)& (0+255),b
 13059                           
 13060                           ; BSR set to: 0
 13061                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 13062  003B40  C090  F0A8         	movff	_vscp_nickname,_vscp_omsg+5
 13063                           
 13064                           ; BSR set to: 0
 13065                           ;vscp_firmware.c: 366: vscp_sendEvent();
 13066  003B44  EC2F  F01D         	call	_vscp_sendEvent	;wreg free
 13067                           
 13068                           ; BSR set to: 0
 13069                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 13070  003B48  0E01               	movlw	1
 13071  003B4A  6E56               	movwf	_vscp_initledfunc,c
 13072                           
 13073                           ; BSR set to: 0
 13074  003B4C  0C01               	retlw	1
 13075  003B4E                     __end_of_vscp_goActiveState:
 13076                           	opt stack 0
 13077                           tblptru	equ	0xFF8
 13078                           tblptrh	equ	0xFF7
 13079                           tblptrl	equ	0xFF6
 13080                           tablat	equ	0xFF5
 13081                           prodh	equ	0xFF4
 13082                           prodl	equ	0xFF3
 13083                           intcon	equ	0xFF2
 13084                           postinc0	equ	0xFEE
 13085                           wreg	equ	0xFE8
 13086                           indf1	equ	0xFE7
 13087                           fsr1h	equ	0xFE2
 13088                           fsr1l	equ	0xFE1
 13089                           indf2	equ	0xFDF
 13090                           postinc2	equ	0xFDE
 13091                           postdec2	equ	0xFDD
 13092                           plusw2	equ	0xFDB
 13093                           fsr2h	equ	0xFDA
 13094                           fsr2l	equ	0xFD9
 13095                           status	equ	0xFD8
 13096                           
 13097 ;; *************** function _vscp_sendEvent *****************
 13098 ;; Defined at:
 13099 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 13100 ;; Parameters:    Size  Location     Type
 13101 ;;		None
 13102 ;; Auto vars:     Size  Location     Type
 13103 ;;  rv              1    0        unsigned char 
 13104 ;; Return value:  Size  Location     Type
 13105 ;;                  1    wreg      unsigned char 
 13106 ;; Registers used:
 13107 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13108 ;; Tracked objects:
 13109 ;;		On entry : F/0
 13110 ;;		On exit  : F/0
 13111 ;;		Unchanged: 0/0
 13112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13113 ;;      Params:         0       0       0       0       0       0       0
 13114 ;;      Locals:         1       0       0       0       0       0       0
 13115 ;;      Temps:          0       0       0       0       0       0       0
 13116 ;;      Totals:         1       0       0       0       0       0       0
 13117 ;;Total ram usage:        1 bytes
 13118 ;; Hardware stack levels used:    1
 13119 ;; Hardware stack levels required when called:    6
 13120 ;; This function calls:
 13121 ;;		_sendVSCPFrame
 13122 ;; This function is called by:
 13123 ;;		_vscp_handleProbeState
 13124 ;;		_vscp_goActiveState
 13125 ;;		_vscp_sendHeartBeat
 13126 ;;		_vscp_newNodeOnline
 13127 ;;		_vscp_handleProtocolEvent
 13128 ;; This function uses a non-reentrant model
 13129 ;;
 13130                           
 13131                           	psect	text51
 13132  003A5E                     __ptext51:
 13133                           	opt stack 0
 13134  003A5E                     _vscp_sendEvent:
 13135                           	opt stack 22
 13136                           
 13137                           ; BSR set to: 0
 13138                           
 13139                           ; BSR set to: 0
 13140                           ;incstack = 0
 13141                           ;incstack = 0
 13142  003A5E  C0A5  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
 13143  003A62  C0A6  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 13144  003A66  C0A7  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 13145  003A6A  C090  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 13146  003A6E  C0A4  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 13147  003A72  51A3               	movf	_vscp_omsg& (0+255),w,b
 13148  003A74  0B0F               	andlw	15
 13149  003A76  6E44               	movwf	?_sendVSCPFrame+5,c
 13150  003A78  0E00               	movlw	high (_vscp_omsg+5)
 13151  003A7A  6E46               	movwf	?_sendVSCPFrame+7,c
 13152  003A7C  0EA8               	movlw	low (_vscp_omsg+5)
 13153  003A7E  6E45               	movwf	?_sendVSCPFrame+6,c
 13154  003A80  EFEC  F019         	goto	_sendVSCPFrame	;wreg free
 13155  003A84                     __end_of_vscp_sendEvent:
 13156                           	opt stack 0
 13157                           tblptru	equ	0xFF8
 13158                           tblptrh	equ	0xFF7
 13159                           tblptrl	equ	0xFF6
 13160                           tablat	equ	0xFF5
 13161                           prodh	equ	0xFF4
 13162                           prodl	equ	0xFF3
 13163                           intcon	equ	0xFF2
 13164                           postinc0	equ	0xFEE
 13165                           wreg	equ	0xFE8
 13166                           indf1	equ	0xFE7
 13167                           fsr1h	equ	0xFE2
 13168                           fsr1l	equ	0xFE1
 13169                           indf2	equ	0xFDF
 13170                           postinc2	equ	0xFDE
 13171                           postdec2	equ	0xFDD
 13172                           plusw2	equ	0xFDB
 13173                           fsr2h	equ	0xFDA
 13174                           fsr2l	equ	0xFD9
 13175                           status	equ	0xFD8
 13176                           
 13177 ;; *************** function _sendVSCPFrame *****************
 13178 ;; Defined at:
 13179 ;;		line 2539 in file "../main.c"
 13180 ;; Parameters:    Size  Location     Type
 13181 ;;  vscpclass       2   62[COMRAM] unsigned short 
 13182 ;;  vscptype        1   64[COMRAM] unsigned char 
 13183 ;;  nodeid          1   65[COMRAM] unsigned char 
 13184 ;;  priority        1   66[COMRAM] unsigned char 
 13185 ;;  size            1   67[COMRAM] unsigned char 
 13186 ;;  pData           2   68[COMRAM] PTR unsigned char 
 13187 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13188 ;; Auto vars:     Size  Location     Type
 13189 ;;  id              4   70[COMRAM] unsigned long 
 13190 ;; Return value:  Size  Location     Type
 13191 ;;                  1    wreg      unsigned char 
 13192 ;; Registers used:
 13193 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13194 ;; Tracked objects:
 13195 ;;		On entry : F/0
 13196 ;;		On exit  : F/0
 13197 ;;		Unchanged: 0/0
 13198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13199 ;;      Params:         8       0       0       0       0       0       0
 13200 ;;      Locals:         4       0       0       0       0       0       0
 13201 ;;      Temps:          0      20       0       0       0       0       0
 13202 ;;      Totals:        12      20       0       0       0       0       0
 13203 ;;Total ram usage:       32 bytes
 13204 ;; Hardware stack levels used:    1
 13205 ;; Hardware stack levels required when called:    5
 13206 ;; This function calls:
 13207 ;;		_sendCANFrame
 13208 ;; This function is called by:
 13209 ;;		_SendInformationEvent
 13210 ;;		_vscp_sendEvent
 13211 ;; This function uses a non-reentrant model
 13212 ;;
 13213                           
 13214                           	psect	text52
 13215  0033D8                     __ptext52:
 13216                           	opt stack 0
 13217  0033D8                     _sendVSCPFrame:
 13218                           	opt stack 23
 13219                           
 13220                           ; BSR set to: 0
 13221                           ;main.c: 2540: uint32_t id = ( (uint32_t)priority << 26 ) |
 13222                           ;main.c: 2541: ( (uint32_t)vscpclass << 16 ) |
 13223                           ;main.c: 2542: ( (uint32_t)vscptype << 8 ) |
 13224                           ;main.c: 2543: nodeid;
 13225                           
 13226                           ; BSR set to: 0
 13227                           ;incstack = 0
 13228                           ;incstack = 0
 13229  0033D8  C041  F0B0         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 13230  0033DC  6BB1               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 13231  0033DE  6BB2               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 13232  0033E0  6BB3               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 13233  0033E2  C0B2  F0B3         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 13234  0033E6  C0B1  F0B2         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 13235  0033EA  C0B0  F0B1         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 13236  0033EE  6BB0               	clrf	??_sendVSCPFrame& (0+255),b
 13237  0033F0  503F               	movf	sendVSCPFrame@vscpclass,w,c
 13238  0033F2  6FB4               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 13239  0033F4  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
 13240  0033F6  6FB5               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 13241  0033F8  6BB6               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 13242  0033FA  6BB7               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 13243  0033FC  C0B5  F0B7         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 13244  003400  C0B4  F0B6         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 13245  003404  6BB5               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 13246  003406  6BB4               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 13247  003408  C043  F0B8         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 13248  00340C  6BB9               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 13249  00340E  6BBA               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 13250  003410  6BBB               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 13251  003412  0E1A               	movlw	26
 13252  003414                     u10115:
 13253  003414  90D8               	bcf	status,0,c
 13254  003416  37B8               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 13255  003418  37B9               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 13256  00341A  37BA               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 13257  00341C  37BB               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 13258  00341E  2EE8               	decfsz	wreg,f,c
 13259  003420  D7F9               	goto	u10115
 13260  003422  51B4               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 13261  003424  11B8               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 13262  003426  6FBC               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 13263  003428  51B5               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 13264  00342A  11B9               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 13265  00342C  6FBD               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 13266  00342E  51B6               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 13267  003430  11BA               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 13268  003432  6FBE               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 13269  003434  51B7               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 13270  003436  11BB               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 13271  003438  6FBF               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 13272  00343A  51B0               	movf	??_sendVSCPFrame& (0+255),w,b
 13273  00343C  11BC               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 13274  00343E  6FC0               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 13275  003440  51B1               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 13276  003442  11BD               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 13277  003444  6FC1               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 13278  003446  51B2               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 13279  003448  11BE               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 13280  00344A  6FC2               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 13281  00344C  51B3               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 13282  00344E  11BF               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 13283  003450  6FC3               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 13284  003452  5042               	movf	sendVSCPFrame@nodeid,w,c
 13285  003454  11C0               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 13286  003456  6E47               	movwf	sendVSCPFrame@id,c
 13287  003458  51C1               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 13288  00345A  6E48               	movwf	sendVSCPFrame@id+1,c
 13289  00345C  51C2               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 13290  00345E  6E49               	movwf	sendVSCPFrame@id+2,c
 13291  003460  51C3               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 13292  003462  6E4A               	movwf	sendVSCPFrame@id+3,c
 13293                           
 13294                           ; BSR set to: 0
 13295                           ;main.c: 2545: if ( !sendCANFrame( id, size, pData ) ) {
 13296  003464  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
 13297  003468  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 13298  00346C  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 13299  003470  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 13300  003474  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 13301  003478  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 13302  00347C  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 13303  003480  EC8B  F01C         	call	_sendCANFrame	;wreg free
 13304  003484  0900               	iorlw	0
 13305                           
 13306                           ; BSR set to: 0
 13307                           ;main.c: 2546: return 0;
 13308  003486  0E00               	movlw	0
 13309  003488  A4D8               	btfss	status,2,c
 13310                           
 13311                           ; BSR set to: 0
 13312                           ;main.c: 2547: }
 13313                           ;main.c: 2549: return 1;
 13314  00348A  0E01               	movlw	1
 13315                           
 13316                           ; BSR set to: 0
 13317  00348C  0012               	return	
 13318  00348E                     __end_of_sendVSCPFrame:
 13319                           	opt stack 0
 13320                           tblptru	equ	0xFF8
 13321                           tblptrh	equ	0xFF7
 13322                           tblptrl	equ	0xFF6
 13323                           tablat	equ	0xFF5
 13324                           prodh	equ	0xFF4
 13325                           prodl	equ	0xFF3
 13326                           intcon	equ	0xFF2
 13327                           postinc0	equ	0xFEE
 13328                           wreg	equ	0xFE8
 13329                           indf1	equ	0xFE7
 13330                           fsr1h	equ	0xFE2
 13331                           fsr1l	equ	0xFE1
 13332                           indf2	equ	0xFDF
 13333                           postinc2	equ	0xFDE
 13334                           postdec2	equ	0xFDD
 13335                           plusw2	equ	0xFDB
 13336                           fsr2h	equ	0xFDA
 13337                           fsr2l	equ	0xFD9
 13338                           status	equ	0xFD8
 13339                           
 13340 ;; *************** function _sendCANFrame *****************
 13341 ;; Defined at:
 13342 ;;		line 2584 in file "../main.c"
 13343 ;; Parameters:    Size  Location     Type
 13344 ;;  id              4   54[COMRAM] unsigned long 
 13345 ;;  dlc             1   58[COMRAM] unsigned char 
 13346 ;;  pdata           2   59[COMRAM] PTR unsigned char 
 13347 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13348 ;; Auto vars:     Size  Location     Type
 13349 ;;  rv              1    0        unsigned char 
 13350 ;; Return value:  Size  Location     Type
 13351 ;;                  1    wreg      unsigned char 
 13352 ;; Registers used:
 13353 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13354 ;; Tracked objects:
 13355 ;;		On entry : F/0
 13356 ;;		On exit  : F/0
 13357 ;;		Unchanged: 0/0
 13358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13359 ;;      Params:         7       0       0       0       0       0       0
 13360 ;;      Locals:         1       0       0       0       0       0       0
 13361 ;;      Temps:          0       0       0       0       0       0       0
 13362 ;;      Totals:         8       0       0       0       0       0       0
 13363 ;;Total ram usage:        8 bytes
 13364 ;; Hardware stack levels used:    1
 13365 ;; Hardware stack levels required when called:    4
 13366 ;; This function calls:
 13367 ;;		_ECANSendMessage
 13368 ;; This function is called by:
 13369 ;;		_sendVSCPFrame
 13370 ;; This function uses a non-reentrant model
 13371 ;;
 13372                           
 13373                           	psect	text53
 13374  003916                     __ptext53:
 13375                           	opt stack 0
 13376  003916                     _sendCANFrame:
 13377                           	opt stack 23
 13378  003916                     l9357:
 13379                           
 13380                           ;main.c: 2589: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 13381  003916  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
 13382  00391A  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 13383  00391E  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 13384  003922  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 13385  003926  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 13386  00392A  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 13387  00392E  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 13388  003932  0E20               	movlw	32
 13389  003934  6E19               	movwf	?_ECANSendMessage+7,c
 13390  003936  ECD7  F014         	call	_ECANSendMessage	;wreg free
 13391  00393A  0900               	iorlw	0
 13392  00393C  E0EC               	bz	l9357
 13393                           
 13394                           ;main.c: 2592: }
 13395                           ;main.c: 2593: }
 13396                           ;main.c: 2595: vscp_omsg.flags = 0;
 13397                           
 13398                           ;main.c: 2591: break;
 13399  00393E  0100               	movlb	0	; () banked
 13400  003940  6BA3               	clrf	_vscp_omsg& (0+255),b
 13401                           
 13402                           ; BSR set to: 0
 13403                           
 13404                           ; BSR set to: 0
 13405                           ;main.c: 2597: return rv;
 13406  003942  0C01               	retlw	1
 13407  003944                     __end_of_sendCANFrame:
 13408                           	opt stack 0
 13409                           tblptru	equ	0xFF8
 13410                           tblptrh	equ	0xFF7
 13411                           tblptrl	equ	0xFF6
 13412                           tablat	equ	0xFF5
 13413                           prodh	equ	0xFF4
 13414                           prodl	equ	0xFF3
 13415                           intcon	equ	0xFF2
 13416                           postinc0	equ	0xFEE
 13417                           wreg	equ	0xFE8
 13418                           indf1	equ	0xFE7
 13419                           fsr1h	equ	0xFE2
 13420                           fsr1l	equ	0xFE1
 13421                           indf2	equ	0xFDF
 13422                           postinc2	equ	0xFDE
 13423                           postdec2	equ	0xFDD
 13424                           plusw2	equ	0xFDB
 13425                           fsr2h	equ	0xFDA
 13426                           fsr2l	equ	0xFD9
 13427                           status	equ	0xFD8
 13428                           
 13429 ;; *************** function _ECANSendMessage *****************
 13430 ;; Defined at:
 13431 ;;		line 617 in file "../ECAN.c"
 13432 ;; Parameters:    Size  Location     Type
 13433 ;;  id              4   17[COMRAM] unsigned long 
 13434 ;;  data            2   21[COMRAM] PTR unsigned char 
 13435 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13436 ;;  dataLen         1   23[COMRAM] unsigned char 
 13437 ;;  msgFlags        1   24[COMRAM] enum E16306
 13438 ;; Auto vars:     Size  Location     Type
 13439 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
 13440 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13441 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13442 ;;		 -> B0CON(1), 
 13443 ;;  ptr             2   52[COMRAM] PTR unsigned char 
 13444 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13445 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13446 ;;		 -> B0CON(1), 
 13447 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
 13448 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13449 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13450 ;;		 -> B0CON(1), 
 13451 ;;  i               1   51[COMRAM] unsigned char 
 13452 ;;  temp            1   50[COMRAM] unsigned char 
 13453 ;;  tempBSEL0       1   47[COMRAM] struct .
 13454 ;;  j               1   46[COMRAM] unsigned char 
 13455 ;;  buffers         1   45[COMRAM] unsigned char 
 13456 ;;  mode            1   44[COMRAM] unsigned char 
 13457 ;; Return value:  Size  Location     Type
 13458 ;;                  1    wreg      enum E15660
 13459 ;; Registers used:
 13460 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13461 ;; Tracked objects:
 13462 ;;		On entry : 0/0
 13463 ;;		On exit  : 0/0
 13464 ;;		Unchanged: 0/0
 13465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13466 ;;      Params:         8       0       0       0       0       0       0
 13467 ;;      Locals:        28       0       0       0       0       0       0
 13468 ;;      Temps:          1       0       0       0       0       0       0
 13469 ;;      Totals:        37       0       0       0       0       0       0
 13470 ;;Total ram usage:       37 bytes
 13471 ;; Hardware stack levels used:    1
 13472 ;; Hardware stack levels required when called:    3
 13473 ;; This function calls:
 13474 ;;		__CANIDToRegs
 13475 ;; This function is called by:
 13476 ;;		_sendCANFrame
 13477 ;; This function uses a non-reentrant model
 13478 ;;
 13479                           
 13480                           	psect	text54
 13481  0029AE                     __ptext54:
 13482                           	opt stack 0
 13483  0029AE                     _ECANSendMessage:
 13484                           	opt stack 23
 13485                           
 13486                           ;ECAN.c: 619: BYTE mode;
 13487                           ;ECAN.c: 620: BYTE buffers;
 13488                           ;ECAN.c: 628: BYTE i,j;
 13489                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 13490                           ;ECAN.c: 630: BYTE* pb[9];
 13491                           ;ECAN.c: 631: BYTE temp;
 13492                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 13493                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 13494                           
 13495                           ; BSR set to: 0
 13496                           ;incstack = 0
 13497                           ;incstack = 0
 13498  0029AE  0E0F               	movlw	15	;volatile
 13499  0029B0  6E1C               	movwf	ECANSendMessage@pb+1,c
 13500  0029B2  0E40               	movlw	64	;volatile
 13501  0029B4  6E1B               	movwf	ECANSendMessage@pb,c
 13502                           
 13503                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 13504  0029B6  0E0F               	movlw	15	;volatile
 13505  0029B8  6E1E               	movwf	ECANSendMessage@pb+3,c
 13506  0029BA  0E30               	movlw	48	;volatile
 13507  0029BC  6E1D               	movwf	ECANSendMessage@pb+2,c
 13508                           
 13509                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 13510  0029BE  0E0F               	movlw	15	;volatile
 13511  0029C0  6E20               	movwf	ECANSendMessage@pb+5,c
 13512  0029C2  0E20               	movlw	32	;volatile
 13513  0029C4  6E1F               	movwf	ECANSendMessage@pb+4,c
 13514                           
 13515                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 13516  0029C6  0E0E               	movlw	14	;volatile
 13517  0029C8  6E22               	movwf	ECANSendMessage@pb+7,c
 13518  0029CA  0E20               	movlw	32	;volatile
 13519  0029CC  6E21               	movwf	ECANSendMessage@pb+6,c
 13520                           
 13521                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 13522  0029CE  0E0E               	movlw	14	;volatile
 13523  0029D0  6E24               	movwf	ECANSendMessage@pb+9,c
 13524  0029D2  0E30               	movlw	48	;volatile
 13525  0029D4  6E23               	movwf	ECANSendMessage@pb+8,c
 13526                           
 13527                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 13528  0029D6  0E0E               	movlw	14	;volatile
 13529  0029D8  6E26               	movwf	ECANSendMessage@pb+11,c
 13530  0029DA  0E40               	movlw	64	;volatile
 13531  0029DC  6E25               	movwf	ECANSendMessage@pb+10,c
 13532                           
 13533                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 13534  0029DE  0E0E               	movlw	14	;volatile
 13535  0029E0  6E28               	movwf	ECANSendMessage@pb+13,c
 13536  0029E2  0E50               	movlw	80	;volatile
 13537  0029E4  6E27               	movwf	ECANSendMessage@pb+12,c
 13538                           
 13539                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 13540  0029E6  0E0E               	movlw	14	;volatile
 13541  0029E8  6E2A               	movwf	ECANSendMessage@pb+15,c
 13542  0029EA  0E60               	movlw	96	;volatile
 13543  0029EC  6E29               	movwf	ECANSendMessage@pb+14,c
 13544                           
 13545                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 13546  0029EE  0E0E               	movlw	14	;volatile
 13547  0029F0  6E2C               	movwf	ECANSendMessage@pb+17,c
 13548  0029F2  0E70               	movlw	112	;volatile
 13549  0029F4  6E2B               	movwf	ECANSendMessage@pb+16,c
 13550                           
 13551                           ; BSR set to: 14
 13552                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 13553  0029F6  5077               	movf	3959,w,c	;volatile
 13554  0029F8  0BC0               	andlw	192
 13555  0029FA  6E2D               	movwf	ECANSendMessage@mode,c
 13556                           
 13557                           ; BSR set to: 14
 13558                           ;ECAN.c: 660: if ( mode == 0x00 )
 13559  0029FC  662D               	tstfsz	ECANSendMessage@mode,c
 13560  0029FE  D002               	goto	l9373
 13561                           
 13562                           ; BSR set to: 14
 13563                           ;ECAN.c: 661: buffers = 2;
 13564  002A00  0E02               	movlw	2
 13565  002A02  D001               	goto	L41
 13566  002A04                     l9373:
 13567                           
 13568                           ; BSR set to: 14
 13569                           ;ECAN.c: 662: else
 13570                           ;ECAN.c: 663: buffers = 8;
 13571  002A04  0E08               	movlw	8
 13572  002A06                     L41:
 13573  002A06  6E2E               	movwf	ECANSendMessage@buffers,c
 13574                           
 13575                           ; BSR set to: 14
 13576                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 13577  002A08  010D               	movlb	13	; () banked
 13578  002A0A  90D8               	bcf	status,0,c
 13579  002A0C  31F8               	rrcf	248,w,b	;volatile
 13580  002A0E  6E30               	movwf	ECANSendMessage@tempBSEL0,c
 13581                           
 13582                           ; BSR set to: 13
 13583                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 13584  002A10  6A34               	clrf	ECANSendMessage@i,c
 13585  002A12  D07D               	goto	l9433
 13586  002A14                     l9379:
 13587                           
 13588                           ;ECAN.c: 688: {
 13589                           ;ECAN.c: 693: ptr = pb[i];
 13590  002A14  5034               	movf	ECANSendMessage@i,w,c
 13591  002A16  0D02               	mullw	2
 13592  002A18  50F3               	movf	prodl,w,c
 13593  002A1A  0F1B               	addlw	low ECANSendMessage@pb
 13594  002A1C  6ED9               	movwf	fsr2l,c
 13595  002A1E  6ADA               	clrf	fsr2h,c
 13596  002A20  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
 13597  002A24  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
 13598                           
 13599                           ;ECAN.c: 694: tempPtr = ptr;
 13600  002A28  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 13601  002A2C  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 13602                           
 13603                           ;ECAN.c: 702: if ( i > 2 )
 13604  002A30  0E02               	movlw	2
 13605  002A32  6434               	cpfsgt	ECANSendMessage@i,c
 13606  002A34  D004               	goto	l9391
 13607                           
 13608                           ;ECAN.c: 703: {
 13609                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 13610  002A36  90D8               	bcf	status,0,c
 13611  002A38  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
 13612                           
 13613                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 13614  002A3A  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
 13615  002A3C  D067               	goto	l9431
 13616  002A3E                     l9391:
 13617                           
 13618                           ;ECAN.c: 714: }
 13619                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 13620  002A3E  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13621  002A42  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13622  002A46  50DF               	movf	indf2,w,c
 13623  002A48  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13624  002A4A  B61A               	btfsc	??_ECANSendMessage,3,c
 13625  002A4C  D05F               	goto	l9431
 13626                           
 13627                           ;ECAN.c: 721: {
 13628                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 13629  002A4E  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13630  002A52  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13631  002A56  0EFC               	movlw	252
 13632  002A58  16DF               	andwf	indf2,f,c
 13633                           
 13634                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 13635  002A5A  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 13636  002A5E  0E03               	movlw	3
 13637  002A60  161A               	andwf	??_ECANSendMessage,f,c
 13638  002A62  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13639  002A66  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13640  002A6A  501A               	movf	??_ECANSendMessage,w,c
 13641  002A6C  12DF               	iorwf	indf2,f,c
 13642                           
 13643                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 13644  002A6E  AC19               	btfss	ECANSendMessage@msgFlags,6,c
 13645  002A70  D004               	goto	l857
 13646                           
 13647                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 13648  002A72  5018               	movf	ECANSendMessage@dataLen,w,c
 13649  002A74  0940               	iorlw	64
 13650  002A76  6E33               	movwf	ECANSendMessage@temp,c
 13651  002A78  D002               	goto	l9401
 13652  002A7A                     l857:
 13653                           
 13654                           ;ECAN.c: 729: else
 13655                           ;ECAN.c: 730: temp = dataLen;
 13656  002A7A  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 13657  002A7E                     l9401:
 13658                           
 13659                           ;ECAN.c: 732: *(ptr+5) = temp;
 13660  002A7E  EE20 F005          	lfsr	2,5
 13661  002A82  5035               	movf	ECANSendMessage@ptr,w,c
 13662  002A84  26D9               	addwf	fsr2l,f,c
 13663  002A86  5036               	movf	ECANSendMessage@ptr+1,w,c
 13664  002A88  22DA               	addwfc	fsr2h,f,c
 13665  002A8A  C033  FFDF         	movff	ECANSendMessage@temp,indf2
 13666                           
 13667                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 13668  002A8E  AA19               	btfss	ECANSendMessage@msgFlags,5,c
 13669  002A90  D003               	goto	l859
 13670                           
 13671                           ;ECAN.c: 736: temp = 1;
 13672  002A92  0E01               	movlw	1
 13673  002A94  6E33               	movwf	ECANSendMessage@temp,c
 13674  002A96  D001               	goto	l9407
 13675  002A98                     l859:
 13676                           
 13677                           ;ECAN.c: 738: else
 13678                           ;ECAN.c: 739: temp = 0;
 13679  002A98  6A33               	clrf	ECANSendMessage@temp,c
 13680  002A9A                     l9407:
 13681                           
 13682                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 13683  002A9A  2835               	incf	ECANSendMessage@ptr,w,c
 13684  002A9C  6E08               	movwf	?__CANIDToRegs,c
 13685  002A9E  0E00               	movlw	0
 13686  002AA0  2036               	addwfc	ECANSendMessage@ptr+1,w,c
 13687  002AA2  6E09               	movwf	?__CANIDToRegs+1,c
 13688  002AA4  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 13689  002AA8  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 13690  002AAC  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 13691  002AB0  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 13692  002AB4  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 13693  002AB8  ECAB  F016         	call	__CANIDToRegs	;wreg free
 13694                           
 13695                           ;ECAN.c: 745: ptr += 6;
 13696  002ABC  0E06               	movlw	6
 13697  002ABE  2635               	addwf	ECANSendMessage@ptr,f,c
 13698  002AC0  0E00               	movlw	0
 13699  002AC2  2236               	addwfc	ECANSendMessage@ptr+1,f,c
 13700                           
 13701                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 13702  002AC4  6A2F               	clrf	ECANSendMessage@j,c
 13703  002AC6  D00F               	goto	l9421
 13704  002AC8                     l9413:
 13705                           
 13706                           ;ECAN.c: 748: *ptr++ = *data++;
 13707  002AC8  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
 13708  002ACC  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 13709  002AD0  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 13710  002AD4  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 13711  002AD8  CFDF FFE7          	movff	indf2,indf1
 13712  002ADC  4A16               	infsnz	ECANSendMessage@data,f,c
 13713  002ADE  2A17               	incf	ECANSendMessage@data+1,f,c
 13714  002AE0  4A35               	infsnz	ECANSendMessage@ptr,f,c
 13715  002AE2  2A36               	incf	ECANSendMessage@ptr+1,f,c
 13716  002AE4  2A2F               	incf	ECANSendMessage@j,f,c
 13717  002AE6                     l9421:
 13718  002AE6  5018               	movf	ECANSendMessage@dataLen,w,c
 13719  002AE8  5C2F               	subwf	ECANSendMessage@j,w,c
 13720  002AEA  E3EE               	bnc	l9413
 13721                           
 13722                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 13723  002AEC  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13724  002AF0  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13725  002AF4  50DF               	movf	indf2,w,c
 13726  002AF6  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13727  002AF8  B41A               	btfsc	??_ECANSendMessage,2,c
 13728  002AFA  D006               	goto	l9427
 13729                           
 13730                           ;ECAN.c: 753: *tempPtr |= 0x08;
 13731  002AFC  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13732  002B00  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13733  002B04  0E00               	movlw	0
 13734  002B06  86DB               	bsf	plusw2,3,c
 13735  002B08                     l9427:
 13736                           
 13737                           ;ECAN.c: 755: return TRUE;
 13738  002B08  0E01               	movlw	1
 13739  002B0A  D005               	goto	l865
 13740  002B0C                     l9431:
 13741  002B0C  2A34               	incf	ECANSendMessage@i,f,c
 13742  002B0E                     l9433:
 13743  002B0E  502E               	movf	ECANSendMessage@buffers,w,c
 13744  002B10  5C34               	subwf	ECANSendMessage@i,w,c
 13745  002B12  E380               	bnc	l9379
 13746                           
 13747                           ;ECAN.c: 756: }
 13748                           ;ECAN.c: 757: }
 13749                           ;ECAN.c: 760: return FALSE;
 13750  002B14  0E00               	movlw	0
 13751  002B16                     l865:
 13752  002B16  0012               	return	
 13753  002B18                     __end_of_ECANSendMessage:
 13754                           	opt stack 0
 13755                           tblptru	equ	0xFF8
 13756                           tblptrh	equ	0xFF7
 13757                           tblptrl	equ	0xFF6
 13758                           tablat	equ	0xFF5
 13759                           prodh	equ	0xFF4
 13760                           prodl	equ	0xFF3
 13761                           intcon	equ	0xFF2
 13762                           postinc0	equ	0xFEE
 13763                           wreg	equ	0xFE8
 13764                           indf1	equ	0xFE7
 13765                           fsr1h	equ	0xFE2
 13766                           fsr1l	equ	0xFE1
 13767                           indf2	equ	0xFDF
 13768                           postinc2	equ	0xFDE
 13769                           postdec2	equ	0xFDD
 13770                           plusw2	equ	0xFDB
 13771                           fsr2h	equ	0xFDA
 13772                           fsr2l	equ	0xFD9
 13773                           status	equ	0xFD8
 13774                           
 13775 ;; *************** function __CANIDToRegs *****************
 13776 ;; Defined at:
 13777 ;;		line 1099 in file "../ECAN.c"
 13778 ;; Parameters:    Size  Location     Type
 13779 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 13780 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13781 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13782 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
 13783 ;;  val             4    9[COMRAM] unsigned long 
 13784 ;;  type            1   13[COMRAM] unsigned char 
 13785 ;; Auto vars:     Size  Location     Type
 13786 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
 13787 ;;		 -> _CANIDToRegs@val(4), 
 13788 ;; Return value:  Size  Location     Type
 13789 ;;		None               void
 13790 ;; Registers used:
 13791 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13792 ;; Tracked objects:
 13793 ;;		On entry : 0/F
 13794 ;;		On exit  : 0/0
 13795 ;;		Unchanged: 0/0
 13796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13797 ;;      Params:         7       0       0       0       0       0       0
 13798 ;;      Locals:         1       0       0       0       0       0       0
 13799 ;;      Temps:          2       0       0       0       0       0       0
 13800 ;;      Totals:        10       0       0       0       0       0       0
 13801 ;;Total ram usage:       10 bytes
 13802 ;; Hardware stack levels used:    1
 13803 ;; Hardware stack levels required when called:    2
 13804 ;; This function calls:
 13805 ;;		Nothing
 13806 ;; This function is called by:
 13807 ;;		_calculateSetFilterMask
 13808 ;;		_ECANSendMessage
 13809 ;; This function uses a non-reentrant model
 13810 ;;
 13811                           
 13812                           	psect	text55
 13813  002D56                     __ptext55:
 13814                           	opt stack 0
 13815  002D56                     __CANIDToRegs:
 13816                           	opt stack 23
 13817                           
 13818                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 13819                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 13820                           
 13821                           ;incstack = 0
 13822                           ;incstack = 0
 13823  002D56  0E0A               	movlw	low __CANIDToRegs@val
 13824  002D58  6E11               	movwf	__CANIDToRegs@Value,c
 13825                           
 13826                           ;ECAN.c: 1104: if ( type == 0 )
 13827  002D5A  660E               	tstfsz	__CANIDToRegs@type,c
 13828  002D5C  D022               	goto	l9449
 13829                           
 13830                           ;ECAN.c: 1105: {
 13831                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 13832  002D5E  5011               	movf	__CANIDToRegs@Value,w,c
 13833  002D60  6ED9               	movwf	fsr2l,c
 13834  002D62  6ADA               	clrf	fsr2h,c
 13835  002D64  50DF               	movf	indf2,w,c
 13836  002D66  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13837  002D68  90D8               	bcf	status,0,c
 13838  002D6A  320F               	rrcf	??__CANIDToRegs,f,c
 13839  002D6C  90D8               	bcf	status,0,c
 13840  002D6E  320F               	rrcf	??__CANIDToRegs,f,c
 13841  002D70  90D8               	bcf	status,0,c
 13842  002D72  300F               	rrcf	??__CANIDToRegs,w,c
 13843                           
 13844                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 13845  002D74  D862               	call	PL30	;call to abstracted procedure
 13846  002D76  2AD9               	incf	fsr2l,f,c
 13847  002D78  6ADA               	clrf	fsr2h,c
 13848  002D7A  D872               	call	PL74	;call to abstracted procedure
 13849  002D7C                     u10775:
 13850  002D7C  90D8               	bcf	status,0,c
 13851  002D7E  360F               	rlcf	??__CANIDToRegs,f,c
 13852  002D80  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13853  002D82  D7FC               	goto	u10775
 13854  002D84  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13855                           
 13856                           ;ECAN.c: 1109: ptr++;
 13857                           
 13858                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 13859  002D88  D846               	call	PL18	;call to abstracted procedure
 13860  002D8A  D86A               	call	PL74	;call to abstracted procedure
 13861  002D8C                     u10785:
 13862  002D8C  90D8               	bcf	status,0,c
 13863  002D8E  360F               	rlcf	??__CANIDToRegs,f,c
 13864  002D90  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13865  002D92  D7FC               	goto	u10785
 13866  002D94  500F               	movf	??__CANIDToRegs,w,c
 13867  002D96  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13868  002D9A  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13869  002D9E  6EDF               	movwf	indf2,c
 13870                           
 13871                           ;ECAN.c: 1111: }
 13872  002DA0  D039               	goto	l919
 13873  002DA2                     l9449:
 13874                           
 13875                           ;ECAN.c: 1112: else
 13876                           ;ECAN.c: 1113: {
 13877                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 13878  002DA2  5011               	movf	__CANIDToRegs@Value,w,c
 13879  002DA4  D842               	call	PL26	;call to abstracted procedure
 13880  002DA6  0E05               	movlw	5
 13881  002DA8  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13882  002DAA                     u10795:
 13883  002DAA  90D8               	bcf	status,0,c
 13884  002DAC  320F               	rrcf	??__CANIDToRegs,f,c
 13885  002DAE  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13886  002DB0  D7FC               	goto	u10795
 13887  002DB2  500F               	movf	??__CANIDToRegs,w,c
 13888                           
 13889                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 13890  002DB4  D842               	call	PL30	;call to abstracted procedure
 13891  002DB6  0E03               	movlw	3
 13892  002DB8  D849               	call	PL44	;call to abstracted procedure
 13893  002DBA  360F               	rlcf	??__CANIDToRegs,f,c
 13894  002DBC  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13895                           
 13896                           ;ECAN.c: 1117: ptr++;
 13897                           
 13898                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 13899  002DC0  D82A               	call	PL18	;call to abstracted procedure
 13900  002DC2  0E02               	movlw	2
 13901  002DC4  D843               	call	PL44	;call to abstracted procedure
 13902  002DC6  340F               	rlcf	??__CANIDToRegs,w,c
 13903  002DC8  0BE0               	andlw	224
 13904  002DCA  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13905  002DCE  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13906  002DD2  6EDF               	movwf	indf2,c
 13907                           
 13908                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 13909  002DD4  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13910  002DD8  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13911  002DDC  0E00               	movlw	0
 13912  002DDE  86DB               	bsf	plusw2,3,c
 13913                           
 13914                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 13915  002DE0  5011               	movf	__CANIDToRegs@Value,w,c
 13916  002DE2  D823               	call	PL26	;call to abstracted procedure
 13917  002DE4  0E03               	movlw	3
 13918  002DE6  160F               	andwf	??__CANIDToRegs,f,c
 13919  002DE8  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13920                           
 13921                           ;ECAN.c: 1122: ptr++;
 13922                           
 13923                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 13924  002DEC  D814               	call	PL18	;call to abstracted procedure
 13925  002DEE  2AD9               	incf	fsr2l,f,c
 13926  002DF0  6ADA               	clrf	fsr2h,c
 13927  002DF2  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13928  002DF6  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13929  002DFA  CFDF FFE7          	movff	indf2,indf1
 13930                           
 13931                           ;ECAN.c: 1124: ptr++;
 13932  002DFE  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13933  002E00  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13934                           
 13935                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 13936  002E02  5011               	movf	__CANIDToRegs@Value,w,c
 13937  002E04  6ED9               	movwf	fsr2l,c
 13938  002E06  6ADA               	clrf	fsr2h,c
 13939  002E08  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13940  002E0C  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13941  002E10  CFDF FFE7          	movff	indf2,indf1
 13942  002E14                     l919:
 13943  002E14  0012               	return	
 13944  002E16                     __end_of__CANIDToRegs:
 13945                           	opt stack 0
 13946  002E16                     PL18:
 13947                           	opt stack 23
 13948  002E16  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13949  002E1A  500F               	movf	??__CANIDToRegs,w,c
 13950  002E1C  12DF               	iorwf	indf2,f,c
 13951  002E1E  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13952  002E20  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13953  002E22  5011               	movf	__CANIDToRegs@Value,w,c
 13954  002E24  6ED9               	movwf	fsr2l,c
 13955  002E26  6ADA               	clrf	fsr2h,c
 13956  002E28  0012               	return	
 13957  002E2A                     __end_ofPL18:
 13958                           	opt stack 0
 13959  002E2A                     PL26:
 13960                           	opt stack 23
 13961  002E2A  6ED9               	movwf	fsr2l,c
 13962  002E2C  6ADA               	clrf	fsr2h,c
 13963  002E2E  0E02               	movlw	2
 13964  002E30  26D9               	addwf	fsr2l,f,c
 13965  002E32  6ADA               	clrf	fsr2h,c
 13966  002E34  50DF               	movf	indf2,w,c
 13967  002E36  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13968  002E38  0012               	return	
 13969  002E3A                     __end_ofPL26:
 13970                           	opt stack 0
 13971  002E3A                     PL30:
 13972                           	opt stack 23
 13973  002E3A  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13974  002E3E  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13975  002E42  6EDF               	movwf	indf2,c
 13976  002E44  5011               	movf	__CANIDToRegs@Value,w,c
 13977  002E46  6ED9               	movwf	fsr2l,c
 13978  002E48  6ADA               	clrf	fsr2h,c
 13979  002E4A  0012               	return	
 13980  002E4C                     __end_ofPL30:
 13981                           	opt stack 0
 13982  002E4C                     PL44:
 13983                           	opt stack 23
 13984  002E4C  26D9               	addwf	fsr2l,f,c
 13985  002E4E  6ADA               	clrf	fsr2h,c
 13986  002E50  50DF               	movf	indf2,w,c
 13987  002E52  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13988  002E54  90D8               	bcf	status,0,c
 13989  002E56  360F               	rlcf	??__CANIDToRegs,f,c
 13990  002E58  90D8               	bcf	status,0,c
 13991  002E5A  360F               	rlcf	??__CANIDToRegs,f,c
 13992  002E5C  90D8               	bcf	status,0,c
 13993  002E5E  0012               	return	
 13994  002E60                     __end_ofPL44:
 13995                           	opt stack 0
 13996  002E60                     PL74:
 13997                           	opt stack 23
 13998  002E60  50DF               	movf	indf2,w,c
 13999  002E62  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 14000  002E64  0E05               	movlw	5
 14001  002E66  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 14002  002E68  0C05               	retlw	5
 14003  002E6A                     __end_ofPL74:
 14004                           	opt stack 0
 14005                           tblptru	equ	0xFF8
 14006                           tblptrh	equ	0xFF7
 14007                           tblptrl	equ	0xFF6
 14008                           tablat	equ	0xFF5
 14009                           prodh	equ	0xFF4
 14010                           prodl	equ	0xFF3
 14011                           intcon	equ	0xFF2
 14012                           postinc0	equ	0xFEE
 14013                           wreg	equ	0xFE8
 14014                           indf1	equ	0xFE7
 14015                           fsr1h	equ	0xFE2
 14016                           fsr1l	equ	0xFE1
 14017                           indf2	equ	0xFDF
 14018                           postinc2	equ	0xFDE
 14019                           postdec2	equ	0xFDD
 14020                           plusw2	equ	0xFDB
 14021                           fsr2h	equ	0xFDA
 14022                           fsr2l	equ	0xFD9
 14023                           status	equ	0xFD8
 14024                           
 14025 ;; *************** function _vscp_getEvent *****************
 14026 ;; Defined at:
 14027 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 14028 ;; Parameters:    Size  Location     Type
 14029 ;;		None
 14030 ;; Auto vars:     Size  Location     Type
 14031 ;;  rv              1   43[COMRAM] unsigned char 
 14032 ;; Return value:  Size  Location     Type
 14033 ;;                  1    wreg      unsigned char 
 14034 ;; Registers used:
 14035 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14036 ;; Tracked objects:
 14037 ;;		On entry : F/0
 14038 ;;		On exit  : 0/0
 14039 ;;		Unchanged: 0/0
 14040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14041 ;;      Params:         0       0       0       0       0       0       0
 14042 ;;      Locals:         1       0       0       0       0       0       0
 14043 ;;      Temps:          0       0       0       0       0       0       0
 14044 ;;      Totals:         1       0       0       0       0       0       0
 14045 ;;Total ram usage:        1 bytes
 14046 ;; Hardware stack levels used:    1
 14047 ;; Hardware stack levels required when called:    6
 14048 ;; This function calls:
 14049 ;;		_getVSCPFrame
 14050 ;; This function is called by:
 14051 ;;		_main
 14052 ;; This function uses a non-reentrant model
 14053 ;;
 14054                           
 14055                           	psect	text56
 14056  00399A                     __ptext56:
 14057                           	opt stack 0
 14058  00399A                     _vscp_getEvent:
 14059                           	opt stack 24
 14060                           
 14061                           ; BSR set to: 0
 14062                           ;vscp_firmware.c: 1309: int8_t rv;
 14063                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 14064                           
 14065                           ;incstack = 0
 14066                           ;incstack = 0
 14067  00399A  BF95               	btfsc	_vscp_imsg& (0+255),7,b
 14068  00399C  D012               	goto	l1293
 14069                           
 14070                           ; BSR set to: 0
 14071                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 14072                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 14073                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 14074                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 14075                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 14076                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
 14077  00399E  0E99               	movlw	low (_vscp_imsg+4)
 14078  0039A0  6E1E               	movwf	?_getVSCPFrame,c
 14079  0039A2  0E9A               	movlw	low (_vscp_imsg+5)
 14080  0039A4  6E1F               	movwf	?_getVSCPFrame+1,c
 14081  0039A6  0E96               	movlw	low (_vscp_imsg+1)
 14082  0039A8  6E20               	movwf	?_getVSCPFrame+2,c
 14083  0039AA  0E95               	movlw	low _vscp_imsg
 14084  0039AC  6E21               	movwf	?_getVSCPFrame+3,c
 14085  0039AE  0E9B               	movlw	low (_vscp_imsg+6)
 14086  0039B0  6E22               	movwf	?_getVSCPFrame+4,c
 14087  0039B2  0E97               	movlw	(_vscp_imsg+2)& (0+255)
 14088  0039B4  ECED  F01A         	call	_getVSCPFrame
 14089  0039B8  6E2C               	movwf	vscp_getEvent@rv,c
 14090  0039BA  502C               	movf	vscp_getEvent@rv& (0+255),w,c
 14091  0039BC  E002               	bz	l1293
 14092                           
 14093                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 14094  0039BE  0100               	movlb	0	; () banked
 14095  0039C0  8F95               	bsf	_vscp_imsg& (0+255),7,b
 14096  0039C2                     l1293:
 14097  0039C2  0012               	return	
 14098  0039C4                     __end_of_vscp_getEvent:
 14099                           	opt stack 0
 14100                           tblptru	equ	0xFF8
 14101                           tblptrh	equ	0xFF7
 14102                           tblptrl	equ	0xFF6
 14103                           tablat	equ	0xFF5
 14104                           prodh	equ	0xFF4
 14105                           prodl	equ	0xFF3
 14106                           intcon	equ	0xFF2
 14107                           postinc0	equ	0xFEE
 14108                           wreg	equ	0xFE8
 14109                           indf1	equ	0xFE7
 14110                           fsr1h	equ	0xFE2
 14111                           fsr1l	equ	0xFE1
 14112                           indf2	equ	0xFDF
 14113                           postinc2	equ	0xFDE
 14114                           postdec2	equ	0xFDD
 14115                           plusw2	equ	0xFDB
 14116                           fsr2h	equ	0xFDA
 14117                           fsr2l	equ	0xFD9
 14118                           status	equ	0xFD8
 14119                           
 14120 ;; *************** function _getVSCPFrame *****************
 14121 ;; Defined at:
 14122 ;;		line 2563 in file "../main.c"
 14123 ;; Parameters:    Size  Location     Type
 14124 ;;  pvscpclass      1    wreg     PTR unsigned short 
 14125 ;;		 -> vscp_imsg(14), 
 14126 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
 14127 ;;		 -> vscp_imsg(14), 
 14128 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
 14129 ;;		 -> vscp_imsg(14), 
 14130 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
 14131 ;;		 -> vscp_imsg(14), 
 14132 ;;  pSize           1   32[COMRAM] PTR unsigned char 
 14133 ;;		 -> vscp_imsg(14), 
 14134 ;;  pData           1   33[COMRAM] PTR unsigned char 
 14135 ;;		 -> vscp_imsg(14), 
 14136 ;; Auto vars:     Size  Location     Type
 14137 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
 14138 ;;		 -> vscp_imsg(14), 
 14139 ;;  id              4   39[COMRAM] unsigned long 
 14140 ;; Return value:  Size  Location     Type
 14141 ;;                  1    wreg      unsigned char 
 14142 ;; Registers used:
 14143 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14144 ;; Tracked objects:
 14145 ;;		On entry : F/0
 14146 ;;		On exit  : 0/0
 14147 ;;		Unchanged: 0/0
 14148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14149 ;;      Params:         5       0       0       0       0       0       0
 14150 ;;      Locals:         5       0       0       0       0       0       0
 14151 ;;      Temps:          4       0       0       0       0       0       0
 14152 ;;      Totals:        14       0       0       0       0       0       0
 14153 ;;Total ram usage:       14 bytes
 14154 ;; Hardware stack levels used:    1
 14155 ;; Hardware stack levels required when called:    5
 14156 ;; This function calls:
 14157 ;;		_getCANFrame
 14158 ;; This function is called by:
 14159 ;;		_vscp_getEvent
 14160 ;; This function uses a non-reentrant model
 14161 ;;
 14162                           
 14163                           	psect	text57
 14164  0035DA                     __ptext57:
 14165                           	opt stack 0
 14166  0035DA                     _getVSCPFrame:
 14167                           	opt stack 24
 14168                           
 14169                           ;incstack = 0
 14170                           ;incstack = 0
 14171                           ;getVSCPFrame@pvscpclass stored from wreg
 14172  0035DA  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
 14173                           
 14174                           ; BSR set to: 0
 14175                           ;main.c: 2564: uint32_t id;
 14176                           ;main.c: 2566: if ( !getCANFrame(&id, pSize, pData) ) {
 14177  0035DE  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
 14178  0035E2  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
 14179  0035E6  0E28               	movlw	getVSCPFrame@id& (0+255)
 14180  0035E8  ECA2  F01C         	call	_getCANFrame
 14181  0035EC  0900               	iorlw	0
 14182  0035EE  E102               	bnz	l6905
 14183                           
 14184                           ;main.c: 2567: return 0;
 14185  0035F0  0E00               	movlw	0
 14186  0035F2  D02E               	goto	l659
 14187  0035F4                     l6905:
 14188                           
 14189                           ;main.c: 2568: }
 14190                           ;main.c: 2570: *pNodeId = id & 0x0ff;
 14191  0035F4  501F               	movf	getVSCPFrame@pNodeId,w,c
 14192  0035F6  6ED9               	movwf	fsr2l,c
 14193  0035F8  6ADA               	clrf	fsr2h,c
 14194  0035FA  C028  FFDF         	movff	getVSCPFrame@id,indf2
 14195                           
 14196                           ;main.c: 2571: *pvscptype = (id >> 8) & 0xff;
 14197  0035FE  501E               	movf	getVSCPFrame@pvscptype,w,c
 14198  003600  6ED9               	movwf	fsr2l,c
 14199  003602  6ADA               	clrf	fsr2h,c
 14200  003604  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
 14201                           
 14202                           ;main.c: 2572: *pvscpclass = (id >> 16) & 0x1ff;
 14203  003608  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 14204  00360A  6E23               	movwf	??_getVSCPFrame& (0+255),c
 14205  00360C  0E01               	movlw	1
 14206  00360E  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 14207  003610  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
 14208  003612  5027               	movf	getVSCPFrame@pvscpclass,w,c
 14209  003614  6ED9               	movwf	fsr2l,c
 14210  003616  6ADA               	clrf	fsr2h,c
 14211  003618  C023  FFDE         	movff	??_getVSCPFrame,postinc2
 14212  00361C  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 14213                           
 14214                           ;main.c: 2573: *pPriority = (uint16_t) (0x07 & (id >> 26));
 14215  003620  5020               	movf	getVSCPFrame@pPriority,w,c
 14216  003622  6ED9               	movwf	fsr2l,c
 14217  003624  6ADA               	clrf	fsr2h,c
 14218  003626  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 14219  00362A  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 14220  00362E  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 14221  003632  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 14222  003636  0E1B               	movlw	27
 14223  003638  D005               	goto	u6820
 14224  00363A                     u6825:
 14225  00363A  90D8               	bcf	status,0,c
 14226  00363C  3226               	rrcf	??_getVSCPFrame+3,f,c
 14227  00363E  3225               	rrcf	??_getVSCPFrame+2,f,c
 14228  003640  3224               	rrcf	??_getVSCPFrame+1,f,c
 14229  003642  3223               	rrcf	??_getVSCPFrame,f,c
 14230  003644                     u6820:
 14231  003644  2EE8               	decfsz	wreg,f,c
 14232  003646  D7F9               	goto	u6825
 14233  003648  5023               	movf	??_getVSCPFrame,w,c
 14234  00364A  0B07               	andlw	7
 14235  00364C  6EDF               	movwf	indf2,c
 14236                           
 14237                           ;main.c: 2575: return 1;
 14238  00364E  0E01               	movlw	1
 14239  003650                     l659:
 14240  003650  0012               	return	
 14241  003652                     __end_of_getVSCPFrame:
 14242                           	opt stack 0
 14243                           tblptru	equ	0xFF8
 14244                           tblptrh	equ	0xFF7
 14245                           tblptrl	equ	0xFF6
 14246                           tablat	equ	0xFF5
 14247                           prodh	equ	0xFF4
 14248                           prodl	equ	0xFF3
 14249                           intcon	equ	0xFF2
 14250                           postinc0	equ	0xFEE
 14251                           wreg	equ	0xFE8
 14252                           indf1	equ	0xFE7
 14253                           fsr1h	equ	0xFE2
 14254                           fsr1l	equ	0xFE1
 14255                           indf2	equ	0xFDF
 14256                           postinc2	equ	0xFDE
 14257                           postdec2	equ	0xFDD
 14258                           plusw2	equ	0xFDB
 14259                           fsr2h	equ	0xFDA
 14260                           fsr2l	equ	0xFD9
 14261                           status	equ	0xFD8
 14262                           
 14263 ;; *************** function _getCANFrame *****************
 14264 ;; Defined at:
 14265 ;;		line 2605 in file "../main.c"
 14266 ;; Parameters:    Size  Location     Type
 14267 ;;  pid             1    wreg     PTR unsigned long 
 14268 ;;		 -> getVSCPFrame@id(4), 
 14269 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 14270 ;;		 -> vscp_imsg(14), 
 14271 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 14272 ;;		 -> vscp_imsg(14), 
 14273 ;; Auto vars:     Size  Location     Type
 14274 ;;  pid             1   27[COMRAM] PTR unsigned long 
 14275 ;;		 -> getVSCPFrame@id(4), 
 14276 ;;  flags           1   28[COMRAM] enum E16332
 14277 ;; Return value:  Size  Location     Type
 14278 ;;                  1    wreg      unsigned char 
 14279 ;; Registers used:
 14280 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14281 ;; Tracked objects:
 14282 ;;		On entry : F/0
 14283 ;;		On exit  : 0/0
 14284 ;;		Unchanged: 0/0
 14285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14286 ;;      Params:         2       0       0       0       0       0       0
 14287 ;;      Locals:         2       0       0       0       0       0       0
 14288 ;;      Temps:          0       0       0       0       0       0       0
 14289 ;;      Totals:         4       0       0       0       0       0       0
 14290 ;;Total ram usage:        4 bytes
 14291 ;; Hardware stack levels used:    1
 14292 ;; Hardware stack levels required when called:    4
 14293 ;; This function calls:
 14294 ;;		_ECANReceiveMessage
 14295 ;; This function is called by:
 14296 ;;		_getVSCPFrame
 14297 ;; This function uses a non-reentrant model
 14298 ;;
 14299                           
 14300                           	psect	text58
 14301  003944                     __ptext58:
 14302                           	opt stack 0
 14303  003944                     _getCANFrame:
 14304                           	opt stack 24
 14305                           
 14306                           ;incstack = 0
 14307                           ;incstack = 0
 14308                           ;getCANFrame@pid stored from wreg
 14309  003944  CFE8 F01C          	movff	wreg,getCANFrame@pid
 14310                           
 14311                           ; BSR set to: 0
 14312                           ;main.c: 2606: ECAN_RX_MSG_FLAGS flags;
 14313                           ;main.c: 2610: if (vscp_imsg.flags & 0x80) return 0;
 14314  003948  AF95               	btfss	_vscp_imsg& (0+255),7,b
 14315  00394A  D002               	goto	l6921
 14316  00394C                     l6917:
 14317  00394C  0E00               	movlw	0
 14318  00394E  D00F               	goto	l670
 14319  003950                     l6921:
 14320                           
 14321                           ; BSR set to: 0
 14322                           ;main.c: 2612: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 14323  003950  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 14324  003954  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 14325  003958  0E1D               	movlw	low getCANFrame@flags
 14326  00395A  6E11               	movwf	?_ECANReceiveMessage+2,c
 14327  00395C  501C               	movf	getCANFrame@pid,w,c
 14328  00395E  EC1C  F012         	call	_ECANReceiveMessage
 14329  003962  0900               	iorlw	0
 14330  003964  E0F3               	bz	l6917
 14331                           
 14332                           ;main.c: 2615: if (flags & ECAN_RX_RTR_FRAME) return 0;
 14333  003966  AC1D               	btfss	getCANFrame@flags,6,c
 14334                           
 14335                           ;main.c: 2618: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 14336  003968  AA1D               	btfss	getCANFrame@flags,5,c
 14337  00396A  D7F0               	goto	l6917
 14338                           
 14339                           ;main.c: 2620: return 1;
 14340  00396C  0E01               	movlw	1
 14341  00396E                     l670:
 14342  00396E  0012               	return	
 14343  003970                     __end_of_getCANFrame:
 14344                           	opt stack 0
 14345                           tblptru	equ	0xFF8
 14346                           tblptrh	equ	0xFF7
 14347                           tblptrl	equ	0xFF6
 14348                           tablat	equ	0xFF5
 14349                           prodh	equ	0xFF4
 14350                           prodl	equ	0xFF3
 14351                           intcon	equ	0xFF2
 14352                           postinc0	equ	0xFEE
 14353                           wreg	equ	0xFE8
 14354                           indf1	equ	0xFE7
 14355                           fsr1h	equ	0xFE2
 14356                           fsr1l	equ	0xFE1
 14357                           indf2	equ	0xFDF
 14358                           postinc2	equ	0xFDE
 14359                           postdec2	equ	0xFDD
 14360                           plusw2	equ	0xFDB
 14361                           fsr2h	equ	0xFDA
 14362                           fsr2l	equ	0xFD9
 14363                           status	equ	0xFD8
 14364                           
 14365 ;; *************** function _ECANReceiveMessage *****************
 14366 ;; Defined at:
 14367 ;;		line 803 in file "../ECAN.c"
 14368 ;; Parameters:    Size  Location     Type
 14369 ;;  id              1    wreg     PTR unsigned long 
 14370 ;;		 -> getVSCPFrame@id(4), 
 14371 ;;  data            1   14[COMRAM] PTR unsigned char 
 14372 ;;		 -> vscp_imsg(14), 
 14373 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 14374 ;;		 -> vscp_imsg(14), 
 14375 ;;  msgFlags        1   16[COMRAM] PTR enum E16324
 14376 ;;		 -> getCANFrame@flags(1), 
 14377 ;; Auto vars:     Size  Location     Type
 14378 ;;  id              1   19[COMRAM] PTR unsigned long 
 14379 ;;		 -> getVSCPFrame@id(4), 
 14380 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 14381 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14382 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14383 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
 14384 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14385 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14386 ;;  temp            1   22[COMRAM] struct .
 14387 ;;  mode            1   21[COMRAM] unsigned char 
 14388 ;;  i               1   20[COMRAM] unsigned char 
 14389 ;; Return value:  Size  Location     Type
 14390 ;;                  1    wreg      enum E15660
 14391 ;; Registers used:
 14392 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14393 ;; Tracked objects:
 14394 ;;		On entry : F/0
 14395 ;;		On exit  : 0/0
 14396 ;;		Unchanged: 0/0
 14397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14398 ;;      Params:         3       0       0       0       0       0       0
 14399 ;;      Locals:         8       0       0       0       0       0       0
 14400 ;;      Temps:          0       0       0       0       0       0       0
 14401 ;;      Totals:        11       0       0       0       0       0       0
 14402 ;;Total ram usage:       11 bytes
 14403 ;; Hardware stack levels used:    1
 14404 ;; Hardware stack levels required when called:    3
 14405 ;; This function calls:
 14406 ;;		__ECANPointBuffer
 14407 ;;		__RegsToCANID
 14408 ;; This function is called by:
 14409 ;;		_getCANFrame
 14410 ;; This function uses a non-reentrant model
 14411 ;;
 14412                           
 14413                           	psect	text59
 14414  002438                     __ptext59:
 14415                           	opt stack 0
 14416  002438                     _ECANReceiveMessage:
 14417                           	opt stack 24
 14418                           
 14419                           ;incstack = 0
 14420                           ;incstack = 0
 14421                           ;ECANReceiveMessage@id stored from wreg
 14422  002438  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
 14423                           
 14424                           ; BSR set to: 0
 14425                           ;ECAN.c: 805: BYTE mode;
 14426                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 14427                           ;ECAN.c: 809: char i;
 14428                           ;ECAN.c: 810: BYTE_VAL temp;
 14429                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 14430  00243C  6A54               	clrf	__ECANRxFilterHitInfo,c
 14431                           
 14432                           ; BSR set to: 0
 14433                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 14434  00243E  5077               	movf	3959,w,c	;volatile
 14435  002440  0BC0               	andlw	192
 14436  002442  6E16               	movwf	ECANReceiveMessage@mode,c
 14437                           
 14438                           ; BSR set to: 0
 14439                           ;ECAN.c: 816: if ( mode == 0x00 )
 14440  002444  6616               	tstfsz	ECANReceiveMessage@mode,c
 14441  002446  D032               	goto	l7053
 14442                           
 14443                           ; BSR set to: 0
 14444                           ;ECAN.c: 822: {
 14445                           ;ECAN.c: 824: if ( RXB0FUL )
 14446  002448  AE60               	btfss	3936,7,c	;volatile
 14447  00244A  D012               	goto	l870
 14448                           
 14449                           ; BSR set to: 0
 14450                           ;ECAN.c: 825: {
 14451                           ;ECAN.c: 827: RXB0IF = 0;
 14452  00244C  90A4               	bcf	4004,0,c	;volatile
 14453                           
 14454                           ;ECAN.c: 830: if ( RXB0OVFL )
 14455  00244E  AE74               	btfss	3956,7,c	;volatile
 14456  002450  D006               	goto	l7029
 14457                           
 14458                           ; BSR set to: 0
 14459                           ;ECAN.c: 831: {
 14460                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 14461  002452  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14462  002454  6ED9               	movwf	fsr2l,c
 14463  002456  6ADA               	clrf	fsr2h,c
 14464  002458  0E00               	movlw	0
 14465  00245A  86DB               	bsf	plusw2,3,c
 14466                           
 14467                           ; BSR set to: 0
 14468                           ;ECAN.c: 833: RXB0OVFL = 0;
 14469  00245C  9E74               	bcf	3956,7,c	;volatile
 14470  00245E                     l7029:
 14471                           
 14472                           ; BSR set to: 0
 14473                           ;ECAN.c: 834: }
 14474                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 14475  00245E  A060               	btfss	3936,0,c	;volatile
 14476  002460  D002               	bra	u6995
 14477  002462  8054               	bsf	__ECANRxFilterHitInfo,0,c
 14478  002464  D001               	bra	u6997
 14479  002466                     u6995:
 14480  002466  9054               	bcf	__ECANRxFilterHitInfo,0,c
 14481  002468                     u6997:
 14482                           
 14483                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 14484  002468  0E0F               	movlw	15	;volatile
 14485  00246A  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14486  00246C  0E60               	movlw	96	;volatile
 14487  00246E  D01A               	goto	L42
 14488  002470                     l870:
 14489                           
 14490                           ; BSR set to: 0
 14491                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 14492  002470  010F               	movlb	15	; () banked
 14493  002472  AF50               	btfss	80,7,b	;volatile
 14494  002474  D019               	goto	l7047
 14495                           
 14496                           ; BSR set to: 15
 14497                           ;ECAN.c: 842: {
 14498                           ;ECAN.c: 844: RXB1IF = 0;
 14499  002476  92A4               	bcf	4004,1,c	;volatile
 14500                           
 14501                           ;ECAN.c: 847: if ( RXB1OVFL )
 14502  002478  AC74               	btfss	3956,6,c	;volatile
 14503  00247A  D006               	goto	l7039
 14504                           
 14505                           ; BSR set to: 15
 14506                           ;ECAN.c: 848: {
 14507                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 14508  00247C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14509  00247E  6ED9               	movwf	fsr2l,c
 14510  002480  6ADA               	clrf	fsr2h,c
 14511  002482  0E00               	movlw	0
 14512  002484  86DB               	bsf	plusw2,3,c
 14513                           
 14514                           ; BSR set to: 15
 14515                           ;ECAN.c: 850: RXB1OVFL = 0;
 14516  002486  9C74               	bcf	3956,6,c	;volatile
 14517  002488                     l7039:
 14518                           
 14519                           ; BSR set to: 15
 14520                           ;ECAN.c: 851: }
 14521                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 14522  002488  5150               	movf	80,w,b	;volatile
 14523  00248A  0B07               	andlw	7
 14524  00248C  6E54               	movwf	__ECANRxFilterHitInfo,c
 14525                           
 14526                           ; BSR set to: 15
 14527                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 14528  00248E  0E02               	movlw	2
 14529  002490  6054               	cpfslt	__ECANRxFilterHitInfo,c
 14530  002492  D005               	goto	l7045
 14531                           
 14532                           ; BSR set to: 15
 14533                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 14534  002494  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14535  002496  6ED9               	movwf	fsr2l,c
 14536  002498  6ADA               	clrf	fsr2h,c
 14537  00249A  0E00               	movlw	0
 14538  00249C  8EDB               	bsf	plusw2,7,c
 14539  00249E                     l7045:
 14540                           
 14541                           ; BSR set to: 15
 14542                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 14543  00249E  0E0F               	movlw	15	;volatile
 14544  0024A0  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14545  0024A2  0E50               	movlw	80	;volatile
 14546  0024A4                     L42:
 14547  0024A4  6E18               	movwf	ECANReceiveMessage@ptr,c
 14548                           
 14549                           ;ECAN.c: 860: }
 14550  0024A6  D065               	goto	l7107
 14551  0024A8                     l7047:
 14552                           
 14553                           ;ECAN.c: 861: else
 14554                           ;ECAN.c: 862: return FALSE;
 14555  0024A8  0E00               	movlw	0
 14556  0024AA  D0C2               	goto	l877
 14557  0024AC                     l7053:
 14558                           
 14559                           ; BSR set to: 0
 14560                           ;ECAN.c: 869: else if ( mode == 0x40 )
 14561  0024AC  5016               	movf	ECANReceiveMessage@mode,w,c
 14562  0024AE  0A40               	xorlw	64
 14563  0024B0  E146               	bnz	l880
 14564                           
 14565                           ; BSR set to: 0
 14566                           ;ECAN.c: 875: {
 14567                           ;ECAN.c: 876: if ( RXB0FUL )
 14568  0024B2  AE60               	btfss	3936,7,c	;volatile
 14569  0024B4  D004               	goto	l881
 14570                           
 14571                           ; BSR set to: 0
 14572                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 14573  0024B6  0E0F               	movlw	15	;volatile
 14574  0024B8  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14575  0024BA  0E60               	movlw	96	;volatile
 14576  0024BC  D03E               	goto	L49
 14577  0024BE                     l881:
 14578                           
 14579                           ; BSR set to: 0
 14580                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 14581  0024BE  010F               	movlb	15	; () banked
 14582  0024C0  AF50               	btfss	80,7,b	;volatile
 14583  0024C2  D004               	goto	l883
 14584                           
 14585                           ; BSR set to: 15
 14586                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 14587  0024C4  0E0F               	movlw	15	;volatile
 14588  0024C6  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14589  0024C8  0E50               	movlw	80	;volatile
 14590  0024CA  D037               	goto	L49
 14591  0024CC                     l883:
 14592                           
 14593                           ; BSR set to: 15
 14594                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 14595  0024CC  010D               	movlb	13
 14596  0024CE  B5F8               	btfsc	248,2,b	;volatile
 14597  0024D0  D007               	goto	l885
 14598  0024D2  010E               	movlb	14
 14599  0024D4  AF20               	btfss	32,7,b	;volatile
 14600  0024D6  D004               	goto	l885
 14601                           
 14602                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 14603  0024D8  0E0E               	movlw	14	;volatile
 14604  0024DA  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14605  0024DC  0E20               	movlw	32	;volatile
 14606  0024DE  D02D               	goto	L49
 14607  0024E0                     l885:
 14608                           
 14609                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 14610  0024E0  010D               	movlb	13
 14611  0024E2  B7F8               	btfsc	248,3,b	;volatile
 14612  0024E4  D007               	goto	l887
 14613  0024E6  010E               	movlb	14
 14614  0024E8  AF30               	btfss	48,7,b	;volatile
 14615  0024EA  D004               	goto	l887
 14616                           
 14617                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 14618  0024EC  0E0E               	movlw	14	;volatile
 14619  0024EE  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14620  0024F0  0E30               	movlw	48	;volatile
 14621  0024F2  D023               	goto	L49
 14622  0024F4                     l887:
 14623                           
 14624                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 14625  0024F4  010D               	movlb	13
 14626  0024F6  B9F8               	btfsc	248,4,b	;volatile
 14627  0024F8  D007               	goto	l889
 14628  0024FA  010E               	movlb	14
 14629  0024FC  AF40               	btfss	64,7,b	;volatile
 14630  0024FE  D004               	goto	l889
 14631                           
 14632                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 14633  002500  0E0E               	movlw	14	;volatile
 14634  002502  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14635  002504  0E40               	movlw	64	;volatile
 14636  002506  D019               	goto	L49
 14637  002508                     l889:
 14638                           
 14639                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 14640  002508  010D               	movlb	13
 14641  00250A  BBF8               	btfsc	248,5,b	;volatile
 14642  00250C  D005               	goto	l891
 14643  00250E  010E               	movlb	14
 14644  002510  AF50               	btfss	80,7,b	;volatile
 14645  002512  D002               	goto	l891
 14646                           
 14647                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 14648  002514  0E0E               	movlw	14	;volatile
 14649  002516  D7D7               	goto	L50
 14650  002518                     l891:
 14651                           
 14652                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 14653  002518  010D               	movlb	13
 14654  00251A  BDF8               	btfsc	248,6,b	;volatile
 14655  00251C  D005               	goto	l893
 14656  00251E  010E               	movlb	14
 14657  002520  AF60               	btfss	96,7,b	;volatile
 14658  002522  D002               	goto	l893
 14659                           
 14660                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 14661  002524  0E0E               	movlw	14	;volatile
 14662  002526  D7C8               	goto	L51
 14663  002528                     l893:
 14664                           
 14665                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 14666  002528  010D               	movlb	13
 14667  00252A  BFF8               	btfsc	248,7,b	;volatile
 14668  00252C  D7BD               	goto	l7047
 14669  00252E  010E               	movlb	14
 14670  002530  AF70               	btfss	112,7,b	;volatile
 14671  002532  D7BA               	goto	l7047
 14672                           
 14673                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 14674  002534  0E0E               	movlw	14	;volatile
 14675  002536  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14676  002538  0E70               	movlw	112	;volatile
 14677  00253A                     L49:
 14678  00253A  6E18               	movwf	ECANReceiveMessage@ptr,c
 14679  00253C  D00A               	goto	l7097
 14680  00253E                     l880:
 14681                           
 14682                           ; BSR set to: 0
 14683                           ;ECAN.c: 910: else
 14684                           ;ECAN.c: 915: {
 14685                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 14686  00253E  AE74               	btfss	3956,7,c	;volatile
 14687  002540  D7B3               	goto	l7047
 14688                           
 14689                           ; BSR set to: 0
 14690                           ;ECAN.c: 917: {
 14691                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 14692  002542  506F               	movf	3951,w,c	;volatile
 14693  002544  0B07               	andlw	7
 14694  002546  EC29  F01B         	call	__ECANPointBuffer
 14695  00254A  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 14696  00254E  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 14697  002552                     l7097:
 14698                           
 14699                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 14700  002552  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14701  002556  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14702  00255A  50DF               	movf	indf2,w,c
 14703  00255C  0B1F               	andlw	31
 14704  00255E  6E54               	movwf	__ECANRxFilterHitInfo,c
 14705                           
 14706                           ;ECAN.c: 932: RXB1IF = 0;
 14707  002560  92A4               	bcf	4004,1,c	;volatile
 14708                           
 14709                           ;ECAN.c: 934: if ( RXB1OVFL )
 14710  002562  AC74               	btfss	3956,6,c	;volatile
 14711  002564  D006               	goto	l7107
 14712                           
 14713                           ;ECAN.c: 935: {
 14714                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 14715  002566  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14716  002568  6ED9               	movwf	fsr2l,c
 14717  00256A  6ADA               	clrf	fsr2h,c
 14718  00256C  0E00               	movlw	0
 14719  00256E  86DB               	bsf	plusw2,3,c
 14720                           
 14721                           ;ECAN.c: 937: RXB1OVFL = 0;
 14722  002570  9C74               	bcf	3956,6,c	;volatile
 14723  002572                     l7107:
 14724                           
 14725                           ;ECAN.c: 942: savedPtr = ptr;
 14726  002572  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 14727  002576  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 14728                           
 14729                           ;ECAN.c: 943: *msgFlags = 0;
 14730  00257A  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14731  00257C  6ED9               	movwf	fsr2l,c
 14732  00257E  6ADA               	clrf	fsr2h,c
 14733  002580  6ADF               	clrf	indf2,c
 14734                           
 14735                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 14736  002582  EE20 F005          	lfsr	2,5
 14737  002586  D855               	call	PL72	;call to abstracted procedure
 14738                           
 14739                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 14740  002588  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14741  00258A  6ED9               	movwf	fsr2l,c
 14742  00258C  6ADA               	clrf	fsr2h,c
 14743  00258E  5017               	movf	ECANReceiveMessage@temp,w,c
 14744  002590  0B0F               	andlw	15
 14745  002592  6EDF               	movwf	indf2,c
 14746                           
 14747                           ;ECAN.c: 950: if ( temp.bits.b6 )
 14748  002594  AC17               	btfss	ECANReceiveMessage@temp,6,c
 14749  002596  D005               	goto	l901
 14750                           
 14751                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 14752  002598  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14753  00259A  6ED9               	movwf	fsr2l,c
 14754  00259C  6ADA               	clrf	fsr2h,c
 14755  00259E  0E00               	movlw	0
 14756  0025A0  8CDB               	bsf	plusw2,6,c
 14757  0025A2                     l901:
 14758                           
 14759                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 14760  0025A2  EE20 F002          	lfsr	2,2
 14761  0025A6  D845               	call	PL72	;call to abstracted procedure
 14762                           
 14763                           ;ECAN.c: 955: if ( temp.bits.b3 )
 14764  0025A8  A617               	btfss	ECANReceiveMessage@temp,3,c
 14765  0025AA  D008               	goto	l902
 14766                           
 14767                           ;ECAN.c: 956: {
 14768                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 14769  0025AC  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14770  0025AE  6ED9               	movwf	fsr2l,c
 14771  0025B0  6ADA               	clrf	fsr2h,c
 14772  0025B2  0E00               	movlw	0
 14773  0025B4  8ADB               	bsf	plusw2,5,c
 14774                           
 14775                           ;ECAN.c: 958: temp.Val = 1;
 14776  0025B6  0E01               	movlw	1
 14777  0025B8  6E17               	movwf	ECANReceiveMessage@temp,c
 14778                           
 14779                           ;ECAN.c: 959: }
 14780  0025BA  D001               	goto	l7125
 14781  0025BC                     l902:
 14782                           
 14783                           ;ECAN.c: 960: else
 14784                           ;ECAN.c: 961: temp.Val = 0;
 14785  0025BC  6A17               	clrf	ECANReceiveMessage@temp,c
 14786  0025BE                     l7125:
 14787                           
 14788                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 14789  0025BE  2818               	incf	ECANReceiveMessage@ptr,w,c
 14790  0025C0  6E08               	movwf	?__RegsToCANID,c
 14791  0025C2  0E00               	movlw	0
 14792  0025C4  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 14793  0025C6  6E09               	movwf	?__RegsToCANID+1,c
 14794  0025C8  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 14795  0025CC  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 14796  0025D0  EC1C  F016         	call	__RegsToCANID	;wreg free
 14797                           
 14798                           ;ECAN.c: 966: ptr += 6;
 14799  0025D4  0E06               	movlw	6
 14800  0025D6  2618               	addwf	ECANReceiveMessage@ptr,f,c
 14801  0025D8  0E00               	movlw	0
 14802  0025DA  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 14803                           
 14804                           ;ECAN.c: 967: temp.Val = *dataLen;
 14805  0025DC  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14806  0025DE  6ED9               	movwf	fsr2l,c
 14807  0025E0  6ADA               	clrf	fsr2h,c
 14808  0025E2  50DF               	movf	indf2,w,c
 14809  0025E4  6E17               	movwf	ECANReceiveMessage@temp,c
 14810                           
 14811                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 14812  0025E6  6A15               	clrf	ECANReceiveMessage@i,c
 14813  0025E8  D00D               	goto	l7141
 14814  0025EA                     l7133:
 14815                           
 14816                           ;ECAN.c: 969: *data++ = *ptr++;
 14817  0025EA  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14818  0025EE  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14819  0025F2  500F               	movf	ECANReceiveMessage@data,w,c
 14820  0025F4  6EE1               	movwf	fsr1l,c
 14821  0025F6  6AE2               	clrf	fsr1h,c
 14822  0025F8  CFDF FFE7          	movff	indf2,indf1
 14823  0025FC  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 14824  0025FE  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 14825  002600  2A0F               	incf	ECANReceiveMessage@data,f,c
 14826  002602  2A15               	incf	ECANReceiveMessage@i,f,c
 14827  002604                     l7141:
 14828  002604  5017               	movf	ECANReceiveMessage@temp,w,c
 14829  002606  5C15               	subwf	ECANReceiveMessage@i,w,c
 14830  002608  E3F0               	bnc	l7133
 14831                           
 14832                           ;ECAN.c: 972: if ( IRXIF )
 14833  00260A  AEA4               	btfss	4004,7,c	;volatile
 14834  00260C  D006               	goto	l7147
 14835                           
 14836                           ;ECAN.c: 973: {
 14837                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 14838  00260E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14839  002610  6ED9               	movwf	fsr2l,c
 14840  002612  6ADA               	clrf	fsr2h,c
 14841  002614  0E00               	movlw	0
 14842  002616  88DB               	bsf	plusw2,4,c
 14843                           
 14844                           ;ECAN.c: 975: IRXIF = 0;
 14845  002618  9EA4               	bcf	4004,7,c	;volatile
 14846  00261A                     l7147:
 14847                           
 14848                           ;ECAN.c: 976: }
 14849                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 14850  00261A  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 14851  00261E  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 14852  002622  0E7F               	movlw	127
 14853  002624  16DF               	andwf	indf2,f,c
 14854                           
 14855                           ;ECAN.c: 983: if ( mode == 0x80 )
 14856  002626  5016               	movf	ECANReceiveMessage@mode,w,c
 14857  002628  0A80               	xorlw	128
 14858  00262A  B4D8               	btfsc	status,2,c
 14859                           
 14860                           ;ECAN.c: 984: FIFOEMPTY = 0;
 14861  00262C  9E74               	bcf	3956,7,c	;volatile
 14862                           
 14863                           ;ECAN.c: 990: return TRUE;
 14864  00262E  0E01               	movlw	1
 14865  002630                     l877:
 14866  002630  0012               	return	
 14867  002632                     __end_of_ECANReceiveMessage:
 14868                           	opt stack 0
 14869  002632                     PL72:
 14870                           	opt stack 24
 14871  002632  5018               	movf	ECANReceiveMessage@ptr,w,c
 14872  002634  26D9               	addwf	fsr2l,f,c
 14873  002636  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14874  002638  22DA               	addwfc	fsr2h,f,c
 14875  00263A  50DF               	movf	indf2,w,c
 14876  00263C  6E17               	movwf	ECANReceiveMessage@temp,c
 14877  00263E  0012               	return	
 14878  002640                     __end_ofPL72:
 14879                           	opt stack 0
 14880                           tblptru	equ	0xFF8
 14881                           tblptrh	equ	0xFF7
 14882                           tblptrl	equ	0xFF6
 14883                           tablat	equ	0xFF5
 14884                           prodh	equ	0xFF4
 14885                           prodl	equ	0xFF3
 14886                           intcon	equ	0xFF2
 14887                           postinc0	equ	0xFEE
 14888                           wreg	equ	0xFE8
 14889                           indf1	equ	0xFE7
 14890                           fsr1h	equ	0xFE2
 14891                           fsr1l	equ	0xFE1
 14892                           indf2	equ	0xFDF
 14893                           postinc2	equ	0xFDE
 14894                           postdec2	equ	0xFDD
 14895                           plusw2	equ	0xFDB
 14896                           fsr2h	equ	0xFDA
 14897                           fsr2l	equ	0xFD9
 14898                           status	equ	0xFD8
 14899                           
 14900 ;; *************** function __RegsToCANID *****************
 14901 ;; Defined at:
 14902 ;;		line 1156 in file "../ECAN.c"
 14903 ;; Parameters:    Size  Location     Type
 14904 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 14905 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14906 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14907 ;;  val             1    9[COMRAM] PTR unsigned long 
 14908 ;;		 -> getVSCPFrame@id(4), 
 14909 ;;  type            1   10[COMRAM] unsigned char 
 14910 ;; Auto vars:     Size  Location     Type
 14911 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 14912 ;;		 -> getVSCPFrame@id(4), 
 14913 ;; Return value:  Size  Location     Type
 14914 ;;		None               void
 14915 ;; Registers used:
 14916 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14917 ;; Tracked objects:
 14918 ;;		On entry : 0/0
 14919 ;;		On exit  : 0/0
 14920 ;;		Unchanged: 0/0
 14921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14922 ;;      Params:         4       0       0       0       0       0       0
 14923 ;;      Locals:         1       0       0       0       0       0       0
 14924 ;;      Temps:          2       0       0       0       0       0       0
 14925 ;;      Totals:         7       0       0       0       0       0       0
 14926 ;;Total ram usage:        7 bytes
 14927 ;; Hardware stack levels used:    1
 14928 ;; Hardware stack levels required when called:    2
 14929 ;; This function calls:
 14930 ;;		Nothing
 14931 ;; This function is called by:
 14932 ;;		_ECANReceiveMessage
 14933 ;; This function uses a non-reentrant model
 14934 ;;
 14935                           
 14936                           	psect	text60
 14937  002C38                     __ptext60:
 14938                           	opt stack 0
 14939  002C38                     __RegsToCANID:
 14940                           	opt stack 24
 14941                           
 14942                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 14943                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 14944                           
 14945                           ;incstack = 0
 14946                           ;incstack = 0
 14947  002C38  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 14948                           
 14949                           ;ECAN.c: 1161: if ( type == 0 )
 14950  002C3C  660B               	tstfsz	__RegsToCANID@type,c
 14951  002C3E  D02B               	goto	l7221
 14952                           
 14953                           ;ECAN.c: 1162: {
 14954                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 14955  002C40  500E               	movf	__RegsToCANID@Value,w,c
 14956  002C42  6ED9               	movwf	fsr2l,c
 14957  002C44  D862               	call	PL38	;call to abstracted procedure
 14958  002C46  360C               	rlcf	??__RegsToCANID,f,c
 14959  002C48  90D8               	bcf	status,0,c
 14960  002C4A  360C               	rlcf	??__RegsToCANID,f,c
 14961  002C4C  90D8               	bcf	status,0,c
 14962  002C4E  340C               	rlcf	??__RegsToCANID,w,c
 14963  002C50  6EDF               	movwf	indf2,c
 14964                           
 14965                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 14966  002C52  500E               	movf	__RegsToCANID@Value,w,c
 14967  002C54  6ED9               	movwf	fsr2l,c
 14968  002C56  6ADA               	clrf	fsr2h,c
 14969  002C58  2AD9               	incf	fsr2l,f,c
 14970  002C5A  6ADA               	clrf	fsr2h,c
 14971  002C5C  D873               	call	PL50	;call to abstracted procedure
 14972  002C5E                     u7315:
 14973  002C5E  90D8               	bcf	status,0,c
 14974  002C60  320C               	rrcf	??__RegsToCANID,f,c
 14975  002C62  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14976  002C64  D7FC               	goto	u7315
 14977  002C66  500C               	movf	??__RegsToCANID,w,c
 14978                           
 14979                           ;ECAN.c: 1166: ptr++;
 14980                           
 14981                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 14982  002C68  D859               	call	PL40	;call to abstracted procedure
 14983  002C6A  0E05               	movlw	5
 14984  002C6C  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14985  002C6E                     u7325:
 14986  002C6E  90D8               	bcf	status,0,c
 14987  002C70  320C               	rrcf	??__RegsToCANID,f,c
 14988  002C72  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14989  002C74  D7FC               	goto	u7325
 14990  002C76  500E               	movf	__RegsToCANID@Value,w,c
 14991  002C78  6ED9               	movwf	fsr2l,c
 14992  002C7A  6ADA               	clrf	fsr2h,c
 14993  002C7C  500C               	movf	??__RegsToCANID,w,c
 14994  002C7E  12DF               	iorwf	indf2,f,c
 14995                           
 14996                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 14997  002C80  D83D               	call	PL22	;call to abstracted procedure
 14998  002C82  6ADF               	clrf	indf2,c
 14999                           
 15000                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 15001  002C84  500E               	movf	__RegsToCANID@Value,w,c
 15002  002C86  6ED9               	movwf	fsr2l,c
 15003  002C88  6ADA               	clrf	fsr2h,c
 15004  002C8A  0E03               	movlw	3
 15005  002C8C  26D9               	addwf	fsr2l,f,c
 15006  002C8E  6ADA               	clrf	fsr2h,c
 15007  002C90  0E00               	movlw	0
 15008  002C92  6EDF               	movwf	indf2,c
 15009                           
 15010                           ;ECAN.c: 1170: }
 15011  002C94  D032               	goto	l924
 15012  002C96                     l7221:
 15013                           
 15014                           ;ECAN.c: 1171: else
 15015                           ;ECAN.c: 1172: {
 15016                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 15017  002C96  D832               	call	PL22	;call to abstracted procedure
 15018  002C98  D855               	call	PL50	;call to abstracted procedure
 15019  002C9A                     u7335:
 15020  002C9A  90D8               	bcf	status,0,c
 15021  002C9C  360C               	rlcf	??__RegsToCANID,f,c
 15022  002C9E  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 15023  002CA0  D7FC               	goto	u7335
 15024  002CA2  500C               	movf	??__RegsToCANID,w,c
 15025  002CA4  6EDF               	movwf	indf2,c
 15026                           
 15027                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 15028  002CA6  500E               	movf	__RegsToCANID@Value,w,c
 15029  002CA8  6ED9               	movwf	fsr2l,c
 15030  002CAA  6ADA               	clrf	fsr2h,c
 15031  002CAC  0E03               	movlw	3
 15032  002CAE  26D9               	addwf	fsr2l,f,c
 15033  002CB0  D82C               	call	PL38	;call to abstracted procedure
 15034  002CB2  320C               	rrcf	??__RegsToCANID,f,c
 15035  002CB4  90D8               	bcf	status,0,c
 15036  002CB6  320C               	rrcf	??__RegsToCANID,f,c
 15037  002CB8  90D8               	bcf	status,0,c
 15038  002CBA  300C               	rrcf	??__RegsToCANID,w,c
 15039                           
 15040                           ;ECAN.c: 1176: ptr++;
 15041                           
 15042                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 15043  002CBC  D82F               	call	PL40	;call to abstracted procedure
 15044  002CBE  0E03               	movlw	3
 15045  002CC0  160C               	andwf	??__RegsToCANID,f,c
 15046  002CC2  D81C               	call	PL22	;call to abstracted procedure
 15047  002CC4  500C               	movf	??__RegsToCANID,w,c
 15048  002CC6  12DF               	iorwf	indf2,f,c
 15049                           
 15050                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 15051  002CC8  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15052  002CCC  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15053  002CD0  50DF               	movf	indf2,w,c
 15054  002CD2  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15055  002CD4  90D8               	bcf	status,0,c
 15056  002CD6  320C               	rrcf	??__RegsToCANID,f,c
 15057  002CD8  90D8               	bcf	status,0,c
 15058  002CDA  320C               	rrcf	??__RegsToCANID,f,c
 15059  002CDC  90D8               	bcf	status,0,c
 15060  002CDE  320C               	rrcf	??__RegsToCANID,f,c
 15061  002CE0  0E1C               	movlw	28
 15062  002CE2  160C               	andwf	??__RegsToCANID,f,c
 15063  002CE4  D80B               	call	PL22	;call to abstracted procedure
 15064  002CE6  500C               	movf	??__RegsToCANID,w,c
 15065  002CE8  12DF               	iorwf	indf2,f,c
 15066                           
 15067                           ;ECAN.c: 1180: ptr++;
 15068                           
 15069                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 15070  002CEA  D822               	call	PL48	;call to abstracted procedure
 15071  002CEC  2AE1               	incf	fsr1l,f,c
 15072  002CEE  6AE2               	clrf	fsr1h,c
 15073  002CF0  CFDF FFE7          	movff	indf2,indf1
 15074                           
 15075                           ;ECAN.c: 1182: ptr++;
 15076                           
 15077                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 15078  002CF4  D81D               	call	PL48	;call to abstracted procedure
 15079  002CF6  CFDF FFE7          	movff	indf2,indf1
 15080  002CFA                     l924:
 15081  002CFA  0012               	return	
 15082  002CFC                     __end_of__RegsToCANID:
 15083                           	opt stack 0
 15084  002CFC                     PL22:
 15085                           	opt stack 24
 15086  002CFC  500E               	movf	__RegsToCANID@Value,w,c
 15087  002CFE  6ED9               	movwf	fsr2l,c
 15088  002D00  6ADA               	clrf	fsr2h,c
 15089  002D02  0E02               	movlw	2
 15090  002D04  26D9               	addwf	fsr2l,f,c
 15091  002D06  6ADA               	clrf	fsr2h,c
 15092  002D08  0012               	return	
 15093  002D0A                     __end_ofPL22:
 15094                           	opt stack 0
 15095  002D0A                     PL38:
 15096                           	opt stack 24
 15097  002D0A  6ADA               	clrf	fsr2h,c
 15098  002D0C  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 15099  002D10  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 15100  002D14  50E7               	movf	indf1,w,c
 15101  002D16  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15102  002D18  90D8               	bcf	status,0,c
 15103  002D1A  0012               	return	
 15104  002D1C                     __end_ofPL38:
 15105                           	opt stack 0
 15106  002D1C                     PL40:
 15107                           	opt stack 24
 15108  002D1C  6EDF               	movwf	indf2,c
 15109  002D1E  4A08               	infsnz	__RegsToCANID@ptr,f,c
 15110  002D20  2A09               	incf	__RegsToCANID@ptr+1,f,c
 15111  002D22  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15112  002D26  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15113  002D2A  50DF               	movf	indf2,w,c
 15114  002D2C  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15115  002D2E  0012               	return	
 15116  002D30                     __end_ofPL40:
 15117                           	opt stack 0
 15118  002D30                     PL48:
 15119                           	opt stack 24
 15120  002D30  4A08               	infsnz	__RegsToCANID@ptr,f,c
 15121  002D32  2A09               	incf	__RegsToCANID@ptr+1,f,c
 15122  002D34  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 15123  002D38  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 15124  002D3C  500E               	movf	__RegsToCANID@Value,w,c
 15125  002D3E  6EE1               	movwf	fsr1l,c
 15126  002D40  6AE2               	clrf	fsr1h,c
 15127  002D42  0012               	return	
 15128  002D44                     __end_ofPL48:
 15129                           	opt stack 0
 15130  002D44                     PL50:
 15131                           	opt stack 24
 15132  002D44  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 15133  002D48  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 15134  002D4C  50E7               	movf	indf1,w,c
 15135  002D4E  6E0C               	movwf	??__RegsToCANID& (0+255),c
 15136  002D50  0E05               	movlw	5
 15137  002D52  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 15138  002D54  0C05               	retlw	5
 15139  002D56                     __end_ofPL50:
 15140                           	opt stack 0
 15141                           tblptru	equ	0xFF8
 15142                           tblptrh	equ	0xFF7
 15143                           tblptrl	equ	0xFF6
 15144                           tablat	equ	0xFF5
 15145                           prodh	equ	0xFF4
 15146                           prodl	equ	0xFF3
 15147                           intcon	equ	0xFF2
 15148                           postinc0	equ	0xFEE
 15149                           wreg	equ	0xFE8
 15150                           indf1	equ	0xFE7
 15151                           fsr1h	equ	0xFE2
 15152                           fsr1l	equ	0xFE1
 15153                           indf2	equ	0xFDF
 15154                           postinc2	equ	0xFDE
 15155                           postdec2	equ	0xFDD
 15156                           plusw2	equ	0xFDB
 15157                           fsr2h	equ	0xFDA
 15158                           fsr2l	equ	0xFD9
 15159                           status	equ	0xFD8
 15160                           
 15161 ;; *************** function __ECANPointBuffer *****************
 15162 ;; Defined at:
 15163 ;;		line 1207 in file "../ECAN.c"
 15164 ;; Parameters:    Size  Location     Type
 15165 ;;  b               1    wreg     unsigned char 
 15166 ;; Auto vars:     Size  Location     Type
 15167 ;;  b               1   10[COMRAM] unsigned char 
 15168 ;;  pt              2   11[COMRAM] PTR unsigned char 
 15169 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 15170 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 15171 ;; Return value:  Size  Location     Type
 15172 ;;                  2    7[COMRAM] PTR unsigned char 
 15173 ;; Registers used:
 15174 ;;		wreg, status,2, status,0
 15175 ;; Tracked objects:
 15176 ;;		On entry : F/0
 15177 ;;		On exit  : 0/0
 15178 ;;		Unchanged: 0/0
 15179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15180 ;;      Params:         3       0       0       0       0       0       0
 15181 ;;      Locals:         3       0       0       0       0       0       0
 15182 ;;      Temps:          0       0       0       0       0       0       0
 15183 ;;      Totals:         6       0       0       0       0       0       0
 15184 ;;Total ram usage:        6 bytes
 15185 ;; Hardware stack levels used:    1
 15186 ;; Hardware stack levels required when called:    2
 15187 ;; This function calls:
 15188 ;;		Nothing
 15189 ;; This function is called by:
 15190 ;;		_ECANReceiveMessage
 15191 ;; This function uses a non-reentrant model
 15192 ;;
 15193                           
 15194                           	psect	text61
 15195  003652                     __ptext61:
 15196                           	opt stack 0
 15197  003652                     __ECANPointBuffer:
 15198                           	opt stack 24
 15199                           
 15200                           ;incstack = 0
 15201                           ;incstack = 0
 15202                           ;__ECANPointBuffer@b stored from wreg
 15203  003652  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 15204                           
 15205                           ; BSR set to: 0
 15206                           ;ECAN.c: 1208: BYTE* pt;
 15207                           ;ECAN.c: 1210: switch(b)
 15208  003656  D024               	goto	l7207
 15209  003658                     l7189:
 15210                           
 15211                           ; BSR set to: 0
 15212                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 15213  003658  0E0F               	movlw	15	;volatile
 15214  00365A  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15215  00365C  0E60               	movlw	96	;volatile
 15216  00365E  D01E               	goto	L58
 15217  003660                     l7191:
 15218                           
 15219                           ; BSR set to: 0
 15220                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 15221  003660  010F               	movlb	15	; () banked
 15222  003662  0E0F               	movlw	15	;volatile
 15223  003664  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15224  003666  0E50               	movlw	80	;volatile
 15225  003668  D019               	goto	L58
 15226  00366A                     l7193:
 15227                           
 15228                           ; BSR set to: 0
 15229                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 15230  00366A  010E               	movlb	14	; () banked
 15231  00366C  0E0E               	movlw	14	;volatile
 15232  00366E  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15233  003670  0E20               	movlw	32	;volatile
 15234  003672  D014               	goto	L58
 15235  003674                     l7195:
 15236                           
 15237                           ; BSR set to: 0
 15238                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 15239  003674  010E               	movlb	14	; () banked
 15240  003676  0E0E               	movlw	14	;volatile
 15241  003678  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15242  00367A  0E30               	movlw	48	;volatile
 15243  00367C  D00F               	goto	L58
 15244  00367E                     l7197:
 15245                           
 15246                           ; BSR set to: 0
 15247                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 15248  00367E  010E               	movlb	14	; () banked
 15249  003680  0E0E               	movlw	14	;volatile
 15250  003682  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15251  003684  0E40               	movlw	64	;volatile
 15252  003686  D00A               	goto	L58
 15253  003688                     l7199:
 15254                           
 15255                           ; BSR set to: 0
 15256                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 15257  003688  010E               	movlb	14	; () banked
 15258  00368A  0E0E               	movlw	14	;volatile
 15259  00368C  D7EB               	goto	L59
 15260  00368E                     l7201:
 15261                           
 15262                           ; BSR set to: 0
 15263                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 15264  00368E  010E               	movlb	14	; () banked
 15265  003690  0E0E               	movlw	14	;volatile
 15266  003692  D7E3               	goto	L60
 15267  003694                     l7203:
 15268                           
 15269                           ; BSR set to: 0
 15270                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 15271  003694  010E               	movlb	14	; () banked
 15272  003696  0E0E               	movlw	14	;volatile
 15273  003698  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15274  00369A  0E70               	movlw	112	;volatile
 15275  00369C                     L58:
 15276  00369C  6E0C               	movwf	__ECANPointBuffer@pt,c
 15277                           
 15278                           ;ECAN.c: 1235: break;
 15279  00369E  D00F               	goto	l929
 15280  0036A0                     l7207:
 15281                           
 15282                           ; BSR set to: 0
 15283  0036A0  500B               	movf	__ECANPointBuffer@b,w,c
 15284                           
 15285                           ; Switch size 1, requested type "space"
 15286                           ; Number of cases is 7, Range of values is 0 to 6
 15287                           ; switch strategies available:
 15288                           ; Name         Instructions Cycles
 15289                           ; simple_byte           22    12 (average)
 15290                           ;	Chosen strategy is simple_byte
 15291  0036A2  E0DA               	bz	l7189
 15292  0036A4  0A01               	xorlw	1	; case 1
 15293  0036A6  E0DC               	bz	l7191
 15294  0036A8  0A03               	xorlw	3	; case 2
 15295  0036AA  E0DF               	bz	l7193
 15296  0036AC  0A01               	xorlw	1	; case 3
 15297  0036AE  E0E2               	bz	l7195
 15298  0036B0  0A07               	xorlw	7	; case 4
 15299  0036B2  E0E5               	bz	l7197
 15300  0036B4  0A01               	xorlw	1	; case 5
 15301  0036B6  E0E8               	bz	l7199
 15302  0036B8  0A03               	xorlw	3	; case 6
 15303  0036BA  E0E9               	bz	l7201
 15304  0036BC  D7EB               	goto	l7203
 15305  0036BE                     l929:
 15306                           
 15307                           ;ECAN.c: 1237: return (pt);
 15308  0036BE  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 15309  0036C2  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 15310  0036C6  0012               	return	
 15311  0036C8                     __end_of__ECANPointBuffer:
 15312                           	opt stack 0
 15313                           tblptru	equ	0xFF8
 15314                           tblptrh	equ	0xFF7
 15315                           tblptrl	equ	0xFF6
 15316                           tablat	equ	0xFF5
 15317                           prodh	equ	0xFF4
 15318                           prodl	equ	0xFF3
 15319                           intcon	equ	0xFF2
 15320                           postinc0	equ	0xFEE
 15321                           wreg	equ	0xFE8
 15322                           indf1	equ	0xFE7
 15323                           fsr1h	equ	0xFE2
 15324                           fsr1l	equ	0xFE1
 15325                           indf2	equ	0xFDF
 15326                           postinc2	equ	0xFDE
 15327                           postdec2	equ	0xFDD
 15328                           plusw2	equ	0xFDB
 15329                           fsr2h	equ	0xFDA
 15330                           fsr2l	equ	0xFD9
 15331                           status	equ	0xFD8
 15332                           
 15333 ;; *************** function _vscp_check_pstorage *****************
 15334 ;; Defined at:
 15335 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 15336 ;; Parameters:    Size  Location     Type
 15337 ;;		None
 15338 ;; Auto vars:     Size  Location     Type
 15339 ;;		None
 15340 ;; Return value:  Size  Location     Type
 15341 ;;                  1    wreg      unsigned char 
 15342 ;; Registers used:
 15343 ;;		wreg, status,2, status,0, cstack
 15344 ;; Tracked objects:
 15345 ;;		On entry : 0/0
 15346 ;;		On exit  : 0/0
 15347 ;;		Unchanged: 0/0
 15348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15349 ;;      Params:         0       0       0       0       0       0       0
 15350 ;;      Locals:         0       0       0       0       0       0       0
 15351 ;;      Temps:          0       0       0       0       0       0       0
 15352 ;;      Totals:         0       0       0       0       0       0       0
 15353 ;;Total ram usage:        0 bytes
 15354 ;; Hardware stack levels used:    1
 15355 ;; Hardware stack levels required when called:    4
 15356 ;; This function calls:
 15357 ;;		_vscp_writeNicknamePermanent
 15358 ;;		_vscp_getSegmentCRC
 15359 ;;		_vscp_setSegmentCRC
 15360 ;;		_vscp_setControlByte
 15361 ;; This function is called by:
 15362 ;;		_main
 15363 ;; This function uses a non-reentrant model
 15364 ;;
 15365                           
 15366                           	psect	text62
 15367  003AA8                     __ptext62:
 15368                           	opt stack 0
 15369  003AA8                     _vscp_check_pstorage:
 15370                           	opt stack 26
 15371                           
 15372                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 15373                           
 15374                           ;incstack = 0
 15375                           ;incstack = 0
 15376  003AA8  EC6A  F01E         	call	_vscp_getSegmentCRC	;wreg free
 15377  003AAC  0BC0               	andlw	192
 15378  003AAE  0A40               	xorlw	64
 15379  003AB0  E102               	bnz	l7681
 15380                           
 15381                           ;vscp_firmware.c: 172: return !0;
 15382  003AB2  0E01               	movlw	1
 15383  003AB4  D00A               	goto	l1049
 15384  003AB6                     l7681:
 15385                           
 15386                           ;vscp_firmware.c: 173: }
 15387                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 15388  003AB6  0EFF               	movlw	255
 15389  003AB8  EC0D  F01E         	call	_vscp_writeNicknamePermanent
 15390                           
 15391                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 15392  003ABC  0E00               	movlw	0
 15393  003ABE  EC02  F01E         	call	_vscp_setSegmentCRC
 15394                           
 15395                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 15396  003AC2  0EA0               	movlw	160
 15397  003AC4  ECF7  F01D         	call	_vscp_setControlByte
 15398                           
 15399                           ;vscp_firmware.c: 185: return 0;
 15400  003AC8  0E00               	movlw	0
 15401  003ACA                     l1049:
 15402  003ACA  0012               	return	
 15403  003ACC                     __end_of_vscp_check_pstorage:
 15404                           	opt stack 0
 15405                           tblptru	equ	0xFF8
 15406                           tblptrh	equ	0xFF7
 15407                           tblptrl	equ	0xFF6
 15408                           tablat	equ	0xFF5
 15409                           prodh	equ	0xFF4
 15410                           prodl	equ	0xFF3
 15411                           intcon	equ	0xFF2
 15412                           postinc0	equ	0xFEE
 15413                           wreg	equ	0xFE8
 15414                           indf1	equ	0xFE7
 15415                           fsr1h	equ	0xFE2
 15416                           fsr1l	equ	0xFE1
 15417                           indf2	equ	0xFDF
 15418                           postinc2	equ	0xFDE
 15419                           postdec2	equ	0xFDD
 15420                           plusw2	equ	0xFDB
 15421                           fsr2h	equ	0xFDA
 15422                           fsr2l	equ	0xFD9
 15423                           status	equ	0xFD8
 15424                           
 15425 ;; *************** function _vscp_setControlByte *****************
 15426 ;; Defined at:
 15427 ;;		line 2404 in file "../main.c"
 15428 ;; Parameters:    Size  Location     Type
 15429 ;;  ctrl            1    wreg     unsigned char 
 15430 ;; Auto vars:     Size  Location     Type
 15431 ;;  ctrl            1   11[COMRAM] unsigned char 
 15432 ;; Return value:  Size  Location     Type
 15433 ;;		None               void
 15434 ;; Registers used:
 15435 ;;		wreg, status,2, cstack
 15436 ;; Tracked objects:
 15437 ;;		On entry : 0/0
 15438 ;;		On exit  : 0/0
 15439 ;;		Unchanged: 0/0
 15440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15441 ;;      Params:         0       0       0       0       0       0       0
 15442 ;;      Locals:         1       0       0       0       0       0       0
 15443 ;;      Temps:          0       0       0       0       0       0       0
 15444 ;;      Totals:         1       0       0       0       0       0       0
 15445 ;;Total ram usage:        1 bytes
 15446 ;; Hardware stack levels used:    1
 15447 ;; Hardware stack levels required when called:    3
 15448 ;; This function calls:
 15449 ;;		_Busy_eep
 15450 ;;		_Write_b_eep
 15451 ;; This function is called by:
 15452 ;;		_vscp_check_pstorage
 15453 ;; This function uses a non-reentrant model
 15454 ;;
 15455                           
 15456                           	psect	text63
 15457  003BEE                     __ptext63:
 15458                           	opt stack 0
 15459  003BEE                     _vscp_setControlByte:
 15460                           	opt stack 26
 15461                           
 15462                           ;incstack = 0
 15463                           ;incstack = 0
 15464                           ;vscp_setControlByte@ctrl stored from wreg
 15465  003BEE  CFE8 F00C          	movff	wreg,vscp_setControlByte@ctrl
 15466                           
 15467                           ;main.c: 2405: (Busy_eep(), Write_b_eep(0x03,ctrl));
 15468  003BF2  EC73  F01E         	call	_Busy_eep	;wreg free
 15469  003BF6  6A09               	clrf	?_Write_b_eep+1,c
 15470  003BF8  0E03               	movlw	3
 15471  003BFA  6E08               	movwf	?_Write_b_eep,c
 15472  003BFC  C00C  F00A         	movff	vscp_setControlByte@ctrl,?_Write_b_eep+2
 15473  003C00  EF59  F01C         	goto	_Write_b_eep	;wreg free
 15474  003C04                     __end_of_vscp_setControlByte:
 15475                           	opt stack 0
 15476                           tblptru	equ	0xFF8
 15477                           tblptrh	equ	0xFF7
 15478                           tblptrl	equ	0xFF6
 15479                           tablat	equ	0xFF5
 15480                           prodh	equ	0xFF4
 15481                           prodl	equ	0xFF3
 15482                           intcon	equ	0xFF2
 15483                           postinc0	equ	0xFEE
 15484                           wreg	equ	0xFE8
 15485                           indf1	equ	0xFE7
 15486                           fsr1h	equ	0xFE2
 15487                           fsr1l	equ	0xFE1
 15488                           indf2	equ	0xFDF
 15489                           postinc2	equ	0xFDE
 15490                           postdec2	equ	0xFDD
 15491                           plusw2	equ	0xFDB
 15492                           fsr2h	equ	0xFDA
 15493                           fsr2l	equ	0xFD9
 15494                           status	equ	0xFD8
 15495                           
 15496 ;; *************** function _vscp_setSegmentCRC *****************
 15497 ;; Defined at:
 15498 ;;		line 2395 in file "../main.c"
 15499 ;; Parameters:    Size  Location     Type
 15500 ;;  crc             1    wreg     unsigned char 
 15501 ;; Auto vars:     Size  Location     Type
 15502 ;;  crc             1   11[COMRAM] unsigned char 
 15503 ;; Return value:  Size  Location     Type
 15504 ;;		None               void
 15505 ;; Registers used:
 15506 ;;		wreg, status,2, cstack
 15507 ;; Tracked objects:
 15508 ;;		On entry : 0/0
 15509 ;;		On exit  : 0/0
 15510 ;;		Unchanged: 0/0
 15511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15512 ;;      Params:         0       0       0       0       0       0       0
 15513 ;;      Locals:         1       0       0       0       0       0       0
 15514 ;;      Temps:          0       0       0       0       0       0       0
 15515 ;;      Totals:         1       0       0       0       0       0       0
 15516 ;;Total ram usage:        1 bytes
 15517 ;; Hardware stack levels used:    1
 15518 ;; Hardware stack levels required when called:    3
 15519 ;; This function calls:
 15520 ;;		_Busy_eep
 15521 ;;		_Write_b_eep
 15522 ;; This function is called by:
 15523 ;;		_vscp_check_pstorage
 15524 ;;		_vscp_handleProbeState
 15525 ;;		_vscp_handleHeartbeat
 15526 ;;		_vscp_handleSetNickname
 15527 ;; This function uses a non-reentrant model
 15528 ;;
 15529                           
 15530                           	psect	text64
 15531  003C04                     __ptext64:
 15532                           	opt stack 0
 15533  003C04                     _vscp_setSegmentCRC:
 15534                           	opt stack 25
 15535                           
 15536                           ;incstack = 0
 15537                           ;incstack = 0
 15538                           ;vscp_setSegmentCRC@crc stored from wreg
 15539  003C04  CFE8 F00C          	movff	wreg,vscp_setSegmentCRC@crc
 15540                           
 15541                           ;main.c: 2396: (Busy_eep(), Write_b_eep(0x02,crc));
 15542  003C08  EC73  F01E         	call	_Busy_eep	;wreg free
 15543  003C0C  6A09               	clrf	?_Write_b_eep+1,c
 15544  003C0E  0E02               	movlw	2
 15545  003C10  6E08               	movwf	?_Write_b_eep,c
 15546  003C12  C00C  F00A         	movff	vscp_setSegmentCRC@crc,?_Write_b_eep+2
 15547  003C16  EF59  F01C         	goto	_Write_b_eep	;wreg free
 15548  003C1A                     __end_of_vscp_setSegmentCRC:
 15549                           	opt stack 0
 15550                           tblptru	equ	0xFF8
 15551                           tblptrh	equ	0xFF7
 15552                           tblptrl	equ	0xFF6
 15553                           tablat	equ	0xFF5
 15554                           prodh	equ	0xFF4
 15555                           prodl	equ	0xFF3
 15556                           intcon	equ	0xFF2
 15557                           postinc0	equ	0xFEE
 15558                           wreg	equ	0xFE8
 15559                           indf1	equ	0xFE7
 15560                           fsr1h	equ	0xFE2
 15561                           fsr1l	equ	0xFE1
 15562                           indf2	equ	0xFDF
 15563                           postinc2	equ	0xFDE
 15564                           postdec2	equ	0xFDD
 15565                           plusw2	equ	0xFDB
 15566                           fsr2h	equ	0xFDA
 15567                           fsr2l	equ	0xFD9
 15568                           status	equ	0xFD8
 15569                           
 15570 ;; *************** function _vscp_getSegmentCRC *****************
 15571 ;; Defined at:
 15572 ;;		line 2386 in file "../main.c"
 15573 ;; Parameters:    Size  Location     Type
 15574 ;;		None
 15575 ;; Auto vars:     Size  Location     Type
 15576 ;;		None
 15577 ;; Return value:  Size  Location     Type
 15578 ;;                  1    wreg      unsigned char 
 15579 ;; Registers used:
 15580 ;;		wreg, status,2, cstack
 15581 ;; Tracked objects:
 15582 ;;		On entry : 0/0
 15583 ;;		On exit  : 0/0
 15584 ;;		Unchanged: 0/0
 15585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15586 ;;      Params:         0       0       0       0       0       0       0
 15587 ;;      Locals:         0       0       0       0       0       0       0
 15588 ;;      Temps:          0       0       0       0       0       0       0
 15589 ;;      Totals:         0       0       0       0       0       0       0
 15590 ;;Total ram usage:        0 bytes
 15591 ;; Hardware stack levels used:    1
 15592 ;; Hardware stack levels required when called:    3
 15593 ;; This function calls:
 15594 ;;		_Read_b_eep
 15595 ;; This function is called by:
 15596 ;;		_vscp_check_pstorage
 15597 ;;		_vscp_handleHeartbeat
 15598 ;; This function uses a non-reentrant model
 15599 ;;
 15600                           
 15601                           	psect	text65
 15602  003CD4                     __ptext65:
 15603                           	opt stack 0
 15604  003CD4                     _vscp_getSegmentCRC:
 15605                           	opt stack 25
 15606                           
 15607                           ;main.c: 2387: return Read_b_eep(0x02);
 15608                           
 15609                           ;incstack = 0
 15610                           ;incstack = 0
 15611  003CD4  6A09               	clrf	?_Read_b_eep+1,c
 15612  003CD6  0E02               	movlw	2
 15613  003CD8  6E08               	movwf	?_Read_b_eep,c
 15614  003CDA  EF3F  F01E         	goto	_Read_b_eep	;wreg free
 15615  003CDE                     __end_of_vscp_getSegmentCRC:
 15616                           	opt stack 0
 15617                           tblptru	equ	0xFF8
 15618                           tblptrh	equ	0xFF7
 15619                           tblptrl	equ	0xFF6
 15620                           tablat	equ	0xFF5
 15621                           prodh	equ	0xFF4
 15622                           prodl	equ	0xFF3
 15623                           intcon	equ	0xFF2
 15624                           postinc0	equ	0xFEE
 15625                           wreg	equ	0xFE8
 15626                           indf1	equ	0xFE7
 15627                           fsr1h	equ	0xFE2
 15628                           fsr1l	equ	0xFE1
 15629                           indf2	equ	0xFDF
 15630                           postinc2	equ	0xFDE
 15631                           postdec2	equ	0xFDD
 15632                           plusw2	equ	0xFDB
 15633                           fsr2h	equ	0xFDA
 15634                           fsr2l	equ	0xFD9
 15635                           status	equ	0xFD8
 15636                           
 15637 ;; *************** function _vscp_writeNicknamePermanent *****************
 15638 ;; Defined at:
 15639 ;;		line 856 in file "../main.c"
 15640 ;; Parameters:    Size  Location     Type
 15641 ;;  nickname        1    wreg     unsigned char 
 15642 ;; Auto vars:     Size  Location     Type
 15643 ;;  nickname        1   11[COMRAM] unsigned char 
 15644 ;; Return value:  Size  Location     Type
 15645 ;;		None               void
 15646 ;; Registers used:
 15647 ;;		wreg, status,2, cstack
 15648 ;; Tracked objects:
 15649 ;;		On entry : 0/0
 15650 ;;		On exit  : 0/0
 15651 ;;		Unchanged: 0/0
 15652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15653 ;;      Params:         0       0       0       0       0       0       0
 15654 ;;      Locals:         1       0       0       0       0       0       0
 15655 ;;      Temps:          0       0       0       0       0       0       0
 15656 ;;      Totals:         1       0       0       0       0       0       0
 15657 ;;Total ram usage:        1 bytes
 15658 ;; Hardware stack levels used:    1
 15659 ;; Hardware stack levels required when called:    3
 15660 ;; This function calls:
 15661 ;;		_Busy_eep
 15662 ;;		_Write_b_eep
 15663 ;; This function is called by:
 15664 ;;		_vscp_check_pstorage
 15665 ;;		_vscp_handleProbeState
 15666 ;;		_vscp_handleHeartbeat
 15667 ;;		_vscp_handleSetNickname
 15668 ;;		_vscp_handleDropNickname
 15669 ;; This function uses a non-reentrant model
 15670 ;;
 15671                           
 15672                           	psect	text66
 15673  003C1A                     __ptext66:
 15674                           	opt stack 0
 15675  003C1A                     _vscp_writeNicknamePermanent:
 15676                           	opt stack 25
 15677                           
 15678                           ;incstack = 0
 15679                           ;incstack = 0
 15680                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 15681  003C1A  CFE8 F00C          	movff	wreg,vscp_writeNicknamePermanent@nickname
 15682                           
 15683                           ;main.c: 857: (Busy_eep(), Write_b_eep(0x01,nickname));
 15684  003C1E  EC73  F01E         	call	_Busy_eep	;wreg free
 15685  003C22  6A09               	clrf	?_Write_b_eep+1,c
 15686  003C24  0E01               	movlw	1
 15687  003C26  6E08               	movwf	?_Write_b_eep,c
 15688  003C28  C00C  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_Write_b_eep+2
 15689  003C2C  EF59  F01C         	goto	_Write_b_eep	;wreg free
 15690  003C30                     __end_of_vscp_writeNicknamePermanent:
 15691                           	opt stack 0
 15692                           tblptru	equ	0xFF8
 15693                           tblptrh	equ	0xFF7
 15694                           tblptrl	equ	0xFF6
 15695                           tablat	equ	0xFF5
 15696                           prodh	equ	0xFF4
 15697                           prodl	equ	0xFF3
 15698                           intcon	equ	0xFF2
 15699                           postinc0	equ	0xFEE
 15700                           wreg	equ	0xFE8
 15701                           indf1	equ	0xFE7
 15702                           fsr1h	equ	0xFE2
 15703                           fsr1l	equ	0xFE1
 15704                           indf2	equ	0xFDF
 15705                           postinc2	equ	0xFDE
 15706                           postdec2	equ	0xFDD
 15707                           plusw2	equ	0xFDB
 15708                           fsr2h	equ	0xFDA
 15709                           fsr2l	equ	0xFD9
 15710                           status	equ	0xFD8
 15711                           
 15712 ;; *************** function _Write_b_eep *****************
 15713 ;; Defined at:
 15714 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 15715 ;; Parameters:    Size  Location     Type
 15716 ;;  badd            2    7[COMRAM] unsigned int 
 15717 ;;  bdat            1    9[COMRAM] unsigned char 
 15718 ;; Auto vars:     Size  Location     Type
 15719 ;;  GIE_BIT_VAL     1   10[COMRAM] unsigned char 
 15720 ;; Return value:  Size  Location     Type
 15721 ;;		None               void
 15722 ;; Registers used:
 15723 ;;		wreg, status,2
 15724 ;; Tracked objects:
 15725 ;;		On entry : 0/0
 15726 ;;		On exit  : 0/0
 15727 ;;		Unchanged: 0/0
 15728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15729 ;;      Params:         3       0       0       0       0       0       0
 15730 ;;      Locals:         1       0       0       0       0       0       0
 15731 ;;      Temps:          0       0       0       0       0       0       0
 15732 ;;      Totals:         4       0       0       0       0       0       0
 15733 ;;Total ram usage:        4 bytes
 15734 ;; Hardware stack levels used:    1
 15735 ;; Hardware stack levels required when called:    2
 15736 ;; This function calls:
 15737 ;;		Nothing
 15738 ;; This function is called by:
 15739 ;;		_main
 15740 ;;		_init_app_eeprom
 15741 ;;		_vscp_setGUID
 15742 ;;		_vscp_setManufacturerId
 15743 ;;		_vscp_writeNicknamePermanent
 15744 ;;		_vscp_writeAppReg
 15745 ;;		_doActionDisable
 15746 ;;		_vscp_setUserID
 15747 ;;		_vscp_setSegmentCRC
 15748 ;;		_vscp_setControlByte
 15749 ;;		_vscp_goBootloaderMode
 15750 ;; This function uses a non-reentrant model
 15751 ;;
 15752                           
 15753                           	psect	text67
 15754  0038B2                     __ptext67:
 15755                           	opt stack 0
 15756  0038B2                     _Write_b_eep:
 15757                           	opt stack 26
 15758                           
 15759                           ;incstack = 0
 15760                           ;incstack = 0
 15761  0038B2  C008  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 15762  0038B6  C00A  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 15763  0038BA  9EA6               	bcf	4006,7,c	;volatile
 15764  0038BC  9CA6               	bcf	4006,6,c	;volatile
 15765  0038BE  84A6               	bsf	4006,2,c	;volatile
 15766  0038C0  0E00               	movlw	0
 15767  0038C2  BEF2               	btfsc	intcon,7,c	;volatile
 15768  0038C4  0E01               	movlw	1
 15769  0038C6  6E0B               	movwf	Write_b_eep@GIE_BIT_VAL,c
 15770  0038C8  9EF2               	bcf	intcon,7,c	;volatile
 15771  0038CA  0E55               	movlw	85
 15772  0038CC  6EA7               	movwf	4007,c	;volatile
 15773  0038CE  0EAA               	movlw	170
 15774  0038D0  6EA7               	movwf	4007,c	;volatile
 15775  0038D2  82A6               	bsf	4006,1,c	;volatile
 15776  0038D4                     l1324:
 15777  0038D4  B2A6               	btfsc	4006,1,c	;volatile
 15778  0038D6  D7FE               	goto	l1324
 15779  0038D8  B00B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 15780  0038DA  D002               	bra	u4215
 15781  0038DC  9EF2               	bcf	intcon,7,c	;volatile
 15782  0038DE  D001               	bra	u4216
 15783  0038E0                     u4215:
 15784  0038E0  8EF2               	bsf	intcon,7,c	;volatile
 15785  0038E2                     u4216:
 15786  0038E2  94A6               	bcf	4006,2,c	;volatile
 15787  0038E4  0012               	return	
 15788  0038E6                     __end_of_Write_b_eep:
 15789                           	opt stack 0
 15790                           tblptru	equ	0xFF8
 15791                           tblptrh	equ	0xFF7
 15792                           tblptrl	equ	0xFF6
 15793                           tablat	equ	0xFF5
 15794                           prodh	equ	0xFF4
 15795                           prodl	equ	0xFF3
 15796                           intcon	equ	0xFF2
 15797                           postinc0	equ	0xFEE
 15798                           wreg	equ	0xFE8
 15799                           indf1	equ	0xFE7
 15800                           fsr1h	equ	0xFE2
 15801                           fsr1l	equ	0xFE1
 15802                           indf2	equ	0xFDF
 15803                           postinc2	equ	0xFDE
 15804                           postdec2	equ	0xFDD
 15805                           plusw2	equ	0xFDB
 15806                           fsr2h	equ	0xFDA
 15807                           fsr2l	equ	0xFD9
 15808                           status	equ	0xFD8
 15809                           
 15810 ;; *************** function _Busy_eep *****************
 15811 ;; Defined at:
 15812 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 15813 ;; Parameters:    Size  Location     Type
 15814 ;;		None
 15815 ;; Auto vars:     Size  Location     Type
 15816 ;;		None
 15817 ;; Return value:  Size  Location     Type
 15818 ;;		None               void
 15819 ;; Registers used:
 15820 ;;		None
 15821 ;; Tracked objects:
 15822 ;;		On entry : 0/0
 15823 ;;		On exit  : 0/0
 15824 ;;		Unchanged: 0/0
 15825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15826 ;;      Params:         0       0       0       0       0       0       0
 15827 ;;      Locals:         0       0       0       0       0       0       0
 15828 ;;      Temps:          0       0       0       0       0       0       0
 15829 ;;      Totals:         0       0       0       0       0       0       0
 15830 ;;Total ram usage:        0 bytes
 15831 ;; Hardware stack levels used:    1
 15832 ;; Hardware stack levels required when called:    2
 15833 ;; This function calls:
 15834 ;;		Nothing
 15835 ;; This function is called by:
 15836 ;;		_main
 15837 ;;		_init_app_eeprom
 15838 ;;		_vscp_setGUID
 15839 ;;		_vscp_setManufacturerId
 15840 ;;		_vscp_writeNicknamePermanent
 15841 ;;		_vscp_writeAppReg
 15842 ;;		_doActionDisable
 15843 ;;		_vscp_setUserID
 15844 ;;		_vscp_setSegmentCRC
 15845 ;;		_vscp_setControlByte
 15846 ;;		_vscp_goBootloaderMode
 15847 ;; This function uses a non-reentrant model
 15848 ;;
 15849                           
 15850                           	psect	text68
 15851  003CE6                     __ptext68:
 15852                           	opt stack 0
 15853  003CE6                     _Busy_eep:
 15854                           	opt stack 26
 15855  003CE6                     l1299:
 15856  003CE6  A2A6               	btfss	4006,1,c	;volatile
 15857  003CE8  0012               	return	
 15858  003CEA  D7FD               	goto	l1299
 15859  003CEC                     __end_of_Busy_eep:
 15860                           	opt stack 0
 15861                           tblptru	equ	0xFF8
 15862                           tblptrh	equ	0xFF7
 15863                           tblptrl	equ	0xFF6
 15864                           tablat	equ	0xFF5
 15865                           prodh	equ	0xFF4
 15866                           prodl	equ	0xFF3
 15867                           intcon	equ	0xFF2
 15868                           postinc0	equ	0xFEE
 15869                           wreg	equ	0xFE8
 15870                           indf1	equ	0xFE7
 15871                           fsr1h	equ	0xFE2
 15872                           fsr1l	equ	0xFE1
 15873                           indf2	equ	0xFDF
 15874                           postinc2	equ	0xFDE
 15875                           postdec2	equ	0xFDD
 15876                           plusw2	equ	0xFDB
 15877                           fsr2h	equ	0xFDA
 15878                           fsr2l	equ	0xFD9
 15879                           status	equ	0xFD8
 15880                           
 15881 ;; *************** function _init *****************
 15882 ;; Defined at:
 15883 ;;		line 318 in file "../main.c"
 15884 ;; Parameters:    Size  Location     Type
 15885 ;;		None
 15886 ;; Auto vars:     Size  Location     Type
 15887 ;;		None
 15888 ;; Return value:  Size  Location     Type
 15889 ;;		None               void
 15890 ;; Registers used:
 15891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15892 ;; Tracked objects:
 15893 ;;		On entry : 0/0
 15894 ;;		On exit  : 0/0
 15895 ;;		Unchanged: 0/0
 15896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15897 ;;      Params:         0       0       0       0       0       0       0
 15898 ;;      Locals:         0       0       0       0       0       0       0
 15899 ;;      Temps:          0       0       0       0       0       0       0
 15900 ;;      Totals:         0       0       0       0       0       0       0
 15901 ;;Total ram usage:        0 bytes
 15902 ;; Hardware stack levels used:    1
 15903 ;; Hardware stack levels required when called:    4
 15904 ;; This function calls:
 15905 ;;		_WriteTimer0
 15906 ;;		_init_app_ram
 15907 ;;		_OpenTimer0
 15908 ;;		_ECANInitialize
 15909 ;; This function is called by:
 15910 ;;		_main
 15911 ;; This function uses a non-reentrant model
 15912 ;;
 15913                           
 15914                           	psect	text69
 15915  003874                     __ptext69:
 15916                           	opt stack 0
 15917  003874                     _init:
 15918                           	opt stack 26
 15919                           
 15920                           ;main.c: 323: init_app_ram();
 15921                           
 15922                           ;incstack = 0
 15923                           ;incstack = 0
 15924  003874  EC3E  F018         	call	_init_app_ram	;wreg free
 15925                           
 15926                           ;main.c: 334: TRISA = 0x00;
 15927  003878  6A92               	clrf	3986,c	;volatile
 15928                           
 15929                           ;main.c: 335: PORTA = 0x00;
 15930  00387A  6A80               	clrf	3968,c	;volatile
 15931                           
 15932                           ;main.c: 347: TRISB = 0b00001000;
 15933  00387C  0E08               	movlw	8
 15934  00387E  6E93               	movwf	3987,c	;volatile
 15935                           
 15936                           ;main.c: 348: PORTB = 0x00;
 15937  003880  6A81               	clrf	3969,c	;volatile
 15938                           
 15939                           ;main.c: 358: TRISC = 0b00000001;
 15940  003882  0E01               	movlw	1
 15941  003884  6E94               	movwf	3988,c	;volatile
 15942                           
 15943                           ;main.c: 359: PORTC = 0x00;
 15944  003886  6A82               	clrf	3970,c	;volatile
 15945                           
 15946                           ;main.c: 385: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 15947  003888  0E92               	movlw	146
 15948  00388A  ECA7  F01D         	call	_OpenTimer0
 15949                           
 15950                           ;main.c: 386: WriteTimer0( 0xfb1d );
 15951  00388E  0EFB               	movlw	251
 15952  003890  6E09               	movwf	?_WriteTimer0+1,c
 15953  003892  0E1D               	movlw	29
 15954  003894  6E08               	movwf	?_WriteTimer0,c
 15955  003896  EC36  F01E         	call	_WriteTimer0	;wreg free
 15956                           
 15957                           ;main.c: 389: LATBbits.LATB4 = 0;
 15958  00389A  988A               	bcf	3978,4,c	;volatile
 15959                           
 15960                           ;main.c: 390: LATBbits.LATB1 = 0;
 15961  00389C  928A               	bcf	3978,1,c	;volatile
 15962                           
 15963                           ;main.c: 391: LATBbits.LATB0 = 0;
 15964  00389E  908A               	bcf	3978,0,c	;volatile
 15965                           
 15966                           ;main.c: 392: LATCbits.LATC7 = 0;
 15967  0038A0  9E8B               	bcf	3979,7,c	;volatile
 15968                           
 15969                           ;main.c: 393: LATCbits.LATC6 = 0;
 15970  0038A2  9C8B               	bcf	3979,6,c	;volatile
 15971                           
 15972                           ;main.c: 394: LATCbits.LATC5 = 0;
 15973  0038A4  9A8B               	bcf	3979,5,c	;volatile
 15974                           
 15975                           ;main.c: 395: LATCbits.LATC4 = 0;
 15976  0038A6  988B               	bcf	3979,4,c	;volatile
 15977                           
 15978                           ;main.c: 398: ECANInitialize();
 15979  0038A8  ECA2  F01A         	call	_ECANInitialize	;wreg free
 15980                           
 15981                           ;main.c: 419: INTCONbits.PEIE = 1;
 15982  0038AC  8CF2               	bsf	intcon,6,c	;volatile
 15983                           
 15984                           ;main.c: 422: INTCONbits.GIE = 1;
 15985  0038AE  8EF2               	bsf	intcon,7,c	;volatile
 15986  0038B0  0012               	return	
 15987  0038B2                     __end_of_init:
 15988                           	opt stack 0
 15989                           tblptru	equ	0xFF8
 15990                           tblptrh	equ	0xFF7
 15991                           tblptrl	equ	0xFF6
 15992                           tablat	equ	0xFF5
 15993                           prodh	equ	0xFF4
 15994                           prodl	equ	0xFF3
 15995                           intcon	equ	0xFF2
 15996                           postinc0	equ	0xFEE
 15997                           wreg	equ	0xFE8
 15998                           indf1	equ	0xFE7
 15999                           fsr1h	equ	0xFE2
 16000                           fsr1l	equ	0xFE1
 16001                           indf2	equ	0xFDF
 16002                           postinc2	equ	0xFDE
 16003                           postdec2	equ	0xFDD
 16004                           plusw2	equ	0xFDB
 16005                           fsr2h	equ	0xFDA
 16006                           fsr2l	equ	0xFD9
 16007                           status	equ	0xFD8
 16008                           
 16009 ;; *************** function _ECANInitialize *****************
 16010 ;; Defined at:
 16011 ;;		line 168 in file "../ECAN.c"
 16012 ;; Parameters:    Size  Location     Type
 16013 ;;		None
 16014 ;; Auto vars:     Size  Location     Type
 16015 ;;		None
 16016 ;; Return value:  Size  Location     Type
 16017 ;;		None               void
 16018 ;; Registers used:
 16019 ;;		wreg, status,2, status,0, cstack
 16020 ;; Tracked objects:
 16021 ;;		On entry : 0/0
 16022 ;;		On exit  : 0/0
 16023 ;;		Unchanged: 0/0
 16024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16025 ;;      Params:         0       0       0       0       0       0       0
 16026 ;;      Locals:         0       0       0       0       0       0       0
 16027 ;;      Temps:          0       0       0       0       0       0       0
 16028 ;;      Totals:         0       0       0       0       0       0       0
 16029 ;;Total ram usage:        0 bytes
 16030 ;; Hardware stack levels used:    1
 16031 ;; Hardware stack levels required when called:    3
 16032 ;; This function calls:
 16033 ;;		_ECANSetOperationMode
 16034 ;; This function is called by:
 16035 ;;		_init
 16036 ;; This function uses a non-reentrant model
 16037 ;;
 16038                           
 16039                           	psect	text70
 16040  003544                     __ptext70:
 16041                           	opt stack 0
 16042  003544                     _ECANInitialize:
 16043                           	opt stack 26
 16044                           
 16045                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 16046                           
 16047                           ;incstack = 0
 16048                           ;incstack = 0
 16049  003544  0E80               	movlw	128
 16050  003546  ECEB  F01D         	call	_ECANSetOperationMode
 16051                           
 16052                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 16053  00354A  0E09               	movlw	9
 16054  00354C  6E70               	movwf	3952,c	;volatile
 16055                           
 16056                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 16057  00354E  0EFC               	movlw	252
 16058  003550  6E71               	movwf	3953,c	;volatile
 16059                           
 16060                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 16061                           ;ECAN.c: 181: (0 << 6) |
 16062                           ;ECAN.c: 182: (2-1);
 16063  003552  0E01               	movlw	1
 16064  003554  6E72               	movwf	3954,c	;volatile
 16065                           
 16066                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 16067  003556  0E20               	movlw	32
 16068  003558  6E73               	movwf	3955,c	;volatile
 16069                           
 16070                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 16071  00355A  8E77               	bsf	3959,7,c	;volatile
 16072                           
 16073                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 16074  00355C  9C77               	bcf	3959,6,c	;volatile
 16075                           
 16076                           ;ECAN.c: 205: RXB0CON = 0;
 16077  00355E  6A60               	clrf	3936,c	;volatile
 16078                           
 16079                           ;ECAN.c: 211: RXB1CON = 0;
 16080  003560  010F               	movlb	15	; () banked
 16081  003562  6B50               	clrf	80,b	;volatile
 16082                           
 16083                           ; BSR set to: 15
 16084                           ;ECAN.c: 221: B0CON = 0;
 16085  003564  010E               	movlb	14	; () banked
 16086  003566  6B20               	clrf	32,b	;volatile
 16087                           
 16088                           ; BSR set to: 14
 16089                           ;ECAN.c: 231: B1CON = 0;
 16090  003568  6B30               	clrf	48,b	;volatile
 16091                           
 16092                           ; BSR set to: 14
 16093                           ;ECAN.c: 241: B2CON = 0;
 16094  00356A  6B40               	clrf	64,b	;volatile
 16095                           
 16096                           ; BSR set to: 14
 16097                           ;ECAN.c: 254: B3CON = 0 << 2;
 16098  00356C  6B50               	clrf	80,b	;volatile
 16099                           
 16100                           ; BSR set to: 14
 16101                           ;ECAN.c: 264: B4CON = 0 << 2;
 16102  00356E  6B60               	clrf	96,b	;volatile
 16103                           
 16104                           ; BSR set to: 14
 16105                           ;ECAN.c: 274: B5CON = 0 << 2;
 16106  003570  6B70               	clrf	112,b	;volatile
 16107                           
 16108                           ; BSR set to: 14
 16109                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 16110  003572  0EE0               	movlw	224
 16111  003574  010D               	movlb	13	; () banked
 16112  003576  6FF8               	movwf	248,b	;volatile
 16113                           
 16114                           ; BSR set to: 13
 16115                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 16116  003578  010F               	movlb	15	; () banked
 16117  00357A  6B00               	clrf	0,b	;volatile
 16118                           
 16119                           ; BSR set to: 15
 16120  00357C  0E08               	movlw	8
 16121  00357E  6F01               	movwf	1,b	;volatile
 16122                           
 16123                           ; BSR set to: 15
 16124  003580  6B02               	clrf	2,b	;volatile
 16125                           
 16126                           ; BSR set to: 15
 16127  003582  6B03               	clrf	3,b	;volatile
 16128                           
 16129                           ; BSR set to: 15
 16130                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 16131  003584  6B04               	clrf	4,b	;volatile
 16132                           
 16133                           ; BSR set to: 15
 16134  003586  0EE8               	movlw	232
 16135  003588  6F05               	movwf	5,b	;volatile
 16136                           
 16137                           ; BSR set to: 15
 16138  00358A  0E1A               	movlw	26
 16139  00358C  6F06               	movwf	6,b	;volatile
 16140                           
 16141                           ; BSR set to: 15
 16142  00358E  6B07               	clrf	7,b	;volatile
 16143                           
 16144                           ; BSR set to: 15
 16145                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 16146  003590  0E03               	movlw	3
 16147  003592  010D               	movlb	13	; () banked
 16148  003594  6FD4               	movwf	212,b	;volatile
 16149                           
 16150                           ; BSR set to: 13
 16151                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 16152  003596  6BD5               	clrf	213,b	;volatile
 16153                           
 16154                           ; BSR set to: 13
 16155                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 16156  003598  6BE0               	clrf	224,b	;volatile
 16157                           
 16158                           ; BSR set to: 13
 16159                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 16160  00359A  0E11               	movlw	17
 16161  00359C  6FE1               	movwf	225,b	;volatile
 16162                           
 16163                           ; BSR set to: 13
 16164                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 16165  00359E  6FE2               	movwf	226,b	;volatile
 16166                           
 16167                           ; BSR set to: 13
 16168                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 16169  0035A0  6BE3               	clrf	227,b	;volatile
 16170                           
 16171                           ; BSR set to: 13
 16172                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 16173  0035A2  6BE4               	clrf	228,b	;volatile
 16174                           
 16175                           ; BSR set to: 13
 16176                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 16177  0035A4  6BE5               	clrf	229,b	;volatile
 16178                           
 16179                           ; BSR set to: 13
 16180                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 16181  0035A6  6BE6               	clrf	230,b	;volatile
 16182                           
 16183                           ; BSR set to: 13
 16184                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 16185  0035A8  6BE7               	clrf	231,b	;volatile
 16186                           
 16187                           ; BSR set to: 13
 16188                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 16189  0035AA  0E54               	movlw	84
 16190  0035AC  6FF0               	movwf	240,b	;volatile
 16191                           
 16192                           ; BSR set to: 13
 16193                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 16194  0035AE  0E05               	movlw	5
 16195  0035B0  6FF1               	movwf	241,b	;volatile
 16196                           
 16197                           ; BSR set to: 13
 16198                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 16199  0035B2  6BF2               	clrf	242,b	;volatile
 16200                           
 16201                           ; BSR set to: 13
 16202                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 16203  0035B4  6BF2               	clrf	242,b	;volatile
 16204                           
 16205                           ; BSR set to: 13
 16206                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 16207  0035B6  0E0F               	movlw	15
 16208  0035B8  010F               	movlb	15	; () banked
 16209  0035BA  6F18               	movwf	24,b	;volatile
 16210                           
 16211                           ; BSR set to: 15
 16212  0035BC  0EE0               	movlw	224
 16213  0035BE  6F19               	movwf	25,b	;volatile
 16214                           
 16215                           ; BSR set to: 15
 16216  0035C0  6B1A               	clrf	26,b	;volatile
 16217                           
 16218                           ; BSR set to: 15
 16219  0035C2  6B1B               	clrf	27,b	;volatile
 16220                           
 16221                           ; BSR set to: 15
 16222                           ;ECAN.c: 482: RXM0EXIDM = 1;
 16223  0035C4  8719               	bsf	25,3,b	;volatile
 16224                           
 16225                           ; BSR set to: 15
 16226                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 16227  0035C6  0E0F               	movlw	15
 16228  0035C8  6F1C               	movwf	28,b	;volatile
 16229                           
 16230                           ; BSR set to: 15
 16231  0035CA  0EE0               	movlw	224
 16232  0035CC  6F1D               	movwf	29,b	;volatile
 16233                           
 16234                           ; BSR set to: 15
 16235  0035CE  691E               	setf	30,b	;volatile
 16236                           
 16237                           ; BSR set to: 15
 16238  0035D0  6B1F               	clrf	31,b	;volatile
 16239                           
 16240                           ; BSR set to: 15
 16241                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 16242  0035D2  871D               	bsf	29,3,b	;volatile
 16243                           
 16244                           ; BSR set to: 15
 16245                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 16246  0035D4  0E00               	movlw	0
 16247  0035D6  EFEB  F01D         	goto	_ECANSetOperationMode
 16248  0035DA                     __end_of_ECANInitialize:
 16249                           	opt stack 0
 16250                           tblptru	equ	0xFF8
 16251                           tblptrh	equ	0xFF7
 16252                           tblptrl	equ	0xFF6
 16253                           tablat	equ	0xFF5
 16254                           prodh	equ	0xFF4
 16255                           prodl	equ	0xFF3
 16256                           intcon	equ	0xFF2
 16257                           postinc0	equ	0xFEE
 16258                           wreg	equ	0xFE8
 16259                           indf1	equ	0xFE7
 16260                           fsr1h	equ	0xFE2
 16261                           fsr1l	equ	0xFE1
 16262                           indf2	equ	0xFDF
 16263                           postinc2	equ	0xFDE
 16264                           postdec2	equ	0xFDD
 16265                           plusw2	equ	0xFDB
 16266                           fsr2h	equ	0xFDA
 16267                           fsr2l	equ	0xFD9
 16268                           status	equ	0xFD8
 16269                           
 16270 ;; *************** function _ECANSetOperationMode *****************
 16271 ;; Defined at:
 16272 ;;		line 1012 in file "../ECAN.c"
 16273 ;; Parameters:    Size  Location     Type
 16274 ;;  mode            1    wreg     enum E16337
 16275 ;; Auto vars:     Size  Location     Type
 16276 ;;  mode            1    7[COMRAM] enum E16337
 16277 ;; Return value:  Size  Location     Type
 16278 ;;		None               void
 16279 ;; Registers used:
 16280 ;;		wreg, status,2, status,0
 16281 ;; Tracked objects:
 16282 ;;		On entry : 0/0
 16283 ;;		On exit  : 0/0
 16284 ;;		Unchanged: 0/0
 16285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16286 ;;      Params:         0       0       0       0       0       0       0
 16287 ;;      Locals:         1       0       0       0       0       0       0
 16288 ;;      Temps:          0       0       0       0       0       0       0
 16289 ;;      Totals:         1       0       0       0       0       0       0
 16290 ;;Total ram usage:        1 bytes
 16291 ;; Hardware stack levels used:    1
 16292 ;; Hardware stack levels required when called:    2
 16293 ;; This function calls:
 16294 ;;		Nothing
 16295 ;; This function is called by:
 16296 ;;		_calculateSetFilterMask
 16297 ;;		_ECANInitialize
 16298 ;; This function uses a non-reentrant model
 16299 ;;
 16300                           
 16301                           	psect	text71
 16302  003BD6                     __ptext71:
 16303                           	opt stack 0
 16304  003BD6                     _ECANSetOperationMode:
 16305                           	opt stack 24
 16306                           
 16307                           ;incstack = 0
 16308                           ;incstack = 0
 16309                           ;ECANSetOperationMode@mode stored from wreg
 16310  003BD6  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 16311                           
 16312                           ;ECAN.c: 1013: CANCON &= 0x1F;
 16313  003BDA  0E1F               	movlw	31
 16314  003BDC  166F               	andwf	3951,f,c	;volatile
 16315                           
 16316                           ;ECAN.c: 1014: CANCON |= mode;
 16317  003BDE  5008               	movf	ECANSetOperationMode@mode,w,c
 16318  003BE0  126F               	iorwf	3951,f,c	;volatile
 16319  003BE2                     l7159:
 16320  003BE2  506F               	movf	3951,w,c	;volatile
 16321  003BE4  0BE0               	andlw	224
 16322  003BE6  1808               	xorwf	ECANSetOperationMode@mode,w,c
 16323  003BE8  B4D8               	btfsc	status,2,c
 16324  003BEA  0012               	return	
 16325  003BEC  D7FA               	goto	l7159
 16326  003BEE                     __end_of_ECANSetOperationMode:
 16327                           	opt stack 0
 16328                           tblptru	equ	0xFF8
 16329                           tblptrh	equ	0xFF7
 16330                           tblptrl	equ	0xFF6
 16331                           tablat	equ	0xFF5
 16332                           prodh	equ	0xFF4
 16333                           prodl	equ	0xFF3
 16334                           intcon	equ	0xFF2
 16335                           postinc0	equ	0xFEE
 16336                           wreg	equ	0xFE8
 16337                           indf1	equ	0xFE7
 16338                           fsr1h	equ	0xFE2
 16339                           fsr1l	equ	0xFE1
 16340                           indf2	equ	0xFDF
 16341                           postinc2	equ	0xFDE
 16342                           postdec2	equ	0xFDD
 16343                           plusw2	equ	0xFDB
 16344                           fsr2h	equ	0xFDA
 16345                           fsr2l	equ	0xFD9
 16346                           status	equ	0xFD8
 16347                           
 16348 ;; *************** function _OpenTimer0 *****************
 16349 ;; Defined at:
 16350 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 16351 ;; Parameters:    Size  Location     Type
 16352 ;;  config          1    wreg     unsigned char 
 16353 ;; Auto vars:     Size  Location     Type
 16354 ;;  config          1    7[COMRAM] unsigned char 
 16355 ;; Return value:  Size  Location     Type
 16356 ;;		None               void
 16357 ;; Registers used:
 16358 ;;		wreg, status,2, status,0
 16359 ;; Tracked objects:
 16360 ;;		On entry : 0/0
 16361 ;;		On exit  : 0/0
 16362 ;;		Unchanged: 0/0
 16363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16364 ;;      Params:         0       0       0       0       0       0       0
 16365 ;;      Locals:         1       0       0       0       0       0       0
 16366 ;;      Temps:          0       0       0       0       0       0       0
 16367 ;;      Totals:         1       0       0       0       0       0       0
 16368 ;;Total ram usage:        1 bytes
 16369 ;; Hardware stack levels used:    1
 16370 ;; Hardware stack levels required when called:    2
 16371 ;; This function calls:
 16372 ;;		Nothing
 16373 ;; This function is called by:
 16374 ;;		_init
 16375 ;; This function uses a non-reentrant model
 16376 ;;
 16377                           
 16378                           	psect	text72
 16379  003B4E                     __ptext72:
 16380                           	opt stack 0
 16381  003B4E                     _OpenTimer0:
 16382                           	opt stack 27
 16383                           
 16384                           ;incstack = 0
 16385                           ;incstack = 0
 16386                           ;OpenTimer0@config stored from wreg
 16387  003B4E  CFE8 F008          	movff	wreg,OpenTimer0@config
 16388  003B52  5008               	movf	OpenTimer0@config,w,c
 16389  003B54  0B7F               	andlw	127
 16390  003B56  6ED5               	movwf	4053,c	;volatile
 16391  003B58  6AD7               	clrf	4055,c	;volatile
 16392  003B5A  6AD6               	clrf	4054,c	;volatile
 16393  003B5C  94F2               	bcf	intcon,2,c	;volatile
 16394  003B5E  AE08               	btfss	OpenTimer0@config,7,c
 16395  003B60  D002               	goto	l1340
 16396  003B62  8AF2               	bsf	intcon,5,c	;volatile
 16397  003B64  D001               	goto	l1341
 16398  003B66                     l1340:
 16399  003B66  9AF2               	bcf	intcon,5,c	;volatile
 16400  003B68                     l1341:
 16401  003B68  8ED5               	bsf	4053,7,c	;volatile
 16402  003B6A  0012               	return	
 16403  003B6C                     __end_of_OpenTimer0:
 16404                           	opt stack 0
 16405                           tblptru	equ	0xFF8
 16406                           tblptrh	equ	0xFF7
 16407                           tblptrl	equ	0xFF6
 16408                           tablat	equ	0xFF5
 16409                           prodh	equ	0xFF4
 16410                           prodl	equ	0xFF3
 16411                           intcon	equ	0xFF2
 16412                           postinc0	equ	0xFEE
 16413                           wreg	equ	0xFE8
 16414                           indf1	equ	0xFE7
 16415                           fsr1h	equ	0xFE2
 16416                           fsr1l	equ	0xFE1
 16417                           indf2	equ	0xFDF
 16418                           postinc2	equ	0xFDE
 16419                           postdec2	equ	0xFDD
 16420                           plusw2	equ	0xFDB
 16421                           fsr2h	equ	0xFDA
 16422                           fsr2l	equ	0xFD9
 16423                           status	equ	0xFD8
 16424                           
 16425 ;; *************** function _init_app_ram *****************
 16426 ;; Defined at:
 16427 ;;		line 432 in file "../main.c"
 16428 ;; Parameters:    Size  Location     Type
 16429 ;;		None
 16430 ;; Auto vars:     Size  Location     Type
 16431 ;;  i               1   11[COMRAM] unsigned char 
 16432 ;; Return value:  Size  Location     Type
 16433 ;;		None               void
 16434 ;; Registers used:
 16435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16436 ;; Tracked objects:
 16437 ;;		On entry : 0/0
 16438 ;;		On exit  : 0/0
 16439 ;;		Unchanged: 0/0
 16440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16441 ;;      Params:         0       0       0       0       0       0       0
 16442 ;;      Locals:         1       0       0       0       0       0       0
 16443 ;;      Temps:          2       0       0       0       0       0       0
 16444 ;;      Totals:         3       0       0       0       0       0       0
 16445 ;;Total ram usage:        3 bytes
 16446 ;; Hardware stack levels used:    1
 16447 ;; Hardware stack levels required when called:    3
 16448 ;; This function calls:
 16449 ;;		_Read_b_eep
 16450 ;; This function is called by:
 16451 ;;		_main
 16452 ;;		_init
 16453 ;;		_vscp_restoreDefaults
 16454 ;; This function uses a non-reentrant model
 16455 ;;
 16456                           
 16457                           	psect	text73
 16458  00307C                     __ptext73:
 16459                           	opt stack 0
 16460  00307C                     _init_app_ram:
 16461                           	opt stack 24
 16462                           
 16463                           ;main.c: 433: uint8_t i;
 16464                           ;main.c: 435: measurement_clock = 0;
 16465                           
 16466                           ;incstack = 0
 16467                           ;incstack = 0
 16468  00307C  0100               	movlb	0	; () banked
 16469  00307E  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
 16470  003080  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 16471  003082  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 16472  003084  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 16473                           
 16474                           ;main.c: 437: seconds = 0;
 16475  003086  6B8B               	clrf	_seconds& (0+255),b
 16476                           
 16477                           ;main.c: 438: minutes = 0;
 16478  003088  6B89               	clrf	_minutes& (0+255),b
 16479                           
 16480                           ;main.c: 439: hours = 0;
 16481  00308A  6B88               	clrf	_hours& (0+255),b
 16482                           
 16483                           ;main.c: 441: relay_pulse_flags = 0;
 16484  00308C  6B8A               	clrf	_relay_pulse_flags& (0+255),b
 16485                           
 16486                           ;main.c: 444: for ( i = 0; i < 8; i++ ) {
 16487  00308E  6A0C               	clrf	init_app_ram@i,c
 16488  003090                     l7693:
 16489                           
 16490                           ; BSR set to: 0
 16491                           ;main.c: 445: relay_pulse_timer[ i ] = 0;
 16492  003090  500C               	movf	init_app_ram@i,w,c
 16493  003092  0D02               	mullw	2
 16494  003094  50F3               	movf	prodl,w,c
 16495  003096  0F70               	addlw	low _relay_pulse_timer
 16496  003098  6ED9               	movwf	fsr2l,c
 16497  00309A  6ADA               	clrf	fsr2h,c
 16498  00309C  6ADE               	clrf	postinc2,c
 16499  00309E  6ADD               	clrf	postdec2,c
 16500                           
 16501                           ;main.c: 446: relay_protection_timer[ i ] = 0;
 16502  0030A0  500C               	movf	init_app_ram@i,w,c
 16503  0030A2  0D02               	mullw	2
 16504  0030A4  50F3               	movf	prodl,w,c
 16505  0030A6  0F60               	addlw	low _relay_protection_timer
 16506  0030A8  6ED9               	movwf	fsr2l,c
 16507  0030AA  6ADA               	clrf	fsr2h,c
 16508  0030AC  6ADE               	clrf	postinc2,c
 16509  0030AE  6ADD               	clrf	postdec2,c
 16510                           
 16511                           ; BSR set to: 0
 16512  0030B0  2A0C               	incf	init_app_ram@i,f,c
 16513                           
 16514                           ; BSR set to: 0
 16515  0030B2  0E07               	movlw	7
 16516  0030B4  640C               	cpfsgt	init_app_ram@i,c
 16517  0030B6  D7EC               	goto	l7693
 16518                           
 16519                           ; BSR set to: 0
 16520                           ;main.c: 447: }
 16521                           ;main.c: 449: for ( i=0; i<7; i++ ) {
 16522  0030B8  6A0C               	clrf	init_app_ram@i,c
 16523  0030BA                     l7703:
 16524                           
 16525                           ;main.c: 452: if ( Read_b_eep(0x43 + 10 + i) &
 16526                           ;main.c: 453: 0x01 ) {
 16527  0030BA  0E4D               	movlw	77
 16528  0030BC  240C               	addwf	init_app_ram@i,w,c
 16529  0030BE  6E08               	movwf	?_Read_b_eep,c
 16530  0030C0  6A09               	clrf	?_Read_b_eep+1,c
 16531  0030C2  0E00               	movlw	0
 16532  0030C4  2209               	addwfc	?_Read_b_eep+1,f,c
 16533  0030C6  EC3F  F01E         	call	_Read_b_eep	;wreg free
 16534  0030CA  6E0A               	movwf	??_init_app_ram& (0+255),c
 16535  0030CC  A00A               	btfss	??_init_app_ram,0,c
 16536  0030CE  D027               	goto	l7709
 16537                           
 16538                           ;main.c: 455: relay_pulse_flags |= (1<<i);
 16539  0030D0  C00C  F00A         	movff	init_app_ram@i,??_init_app_ram
 16540  0030D4  0E01               	movlw	1
 16541  0030D6  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16542  0030D8  2A0A               	incf	??_init_app_ram,f,c
 16543  0030DA  D002               	goto	u8114
 16544  0030DC                     u8115:
 16545  0030DC  90D8               	bcf	status,0,c
 16546  0030DE  360B               	rlcf	??_init_app_ram+1,f,c
 16547  0030E0                     u8114:
 16548  0030E0  2E0A               	decfsz	??_init_app_ram,f,c
 16549  0030E2  D7FC               	goto	u8115
 16550  0030E4  500B               	movf	??_init_app_ram+1,w,c
 16551  0030E6  0100               	movlb	0	; () banked
 16552  0030E8  138A               	iorwf	_relay_pulse_flags& (0+255),f,b
 16553                           
 16554                           ; BSR set to: 0
 16555                           ;main.c: 456: relay_pulse_timer[ i ] =
 16556                           ;main.c: 457: Read_b_eep(0x43 + 18 + i) * 256 +
 16557                           ;main.c: 458: Read_b_eep(0x43 + 19 + i);
 16558  0030EA  0E55               	movlw	85
 16559  0030EC  240C               	addwf	init_app_ram@i,w,c
 16560  0030EE  6E08               	movwf	?_Read_b_eep,c
 16561  0030F0  6A09               	clrf	?_Read_b_eep+1,c
 16562  0030F2  0E00               	movlw	0
 16563  0030F4  2209               	addwfc	?_Read_b_eep+1,f,c
 16564  0030F6  EC3F  F01E         	call	_Read_b_eep	;wreg free
 16565  0030FA  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16566  0030FC  6A0A               	clrf	??_init_app_ram& (0+255),c
 16567  0030FE  0E56               	movlw	86
 16568  003100  240C               	addwf	init_app_ram@i,w,c
 16569  003102  6E08               	movwf	?_Read_b_eep,c
 16570  003104  6A09               	clrf	?_Read_b_eep+1,c
 16571  003106  0E00               	movlw	0
 16572  003108  2209               	addwfc	?_Read_b_eep+1,f,c
 16573  00310A  EC3F  F01E         	call	_Read_b_eep	;wreg free
 16574  00310E  D831               	call	PL64	;call to abstracted procedure
 16575  003110  0F70               	addlw	low _relay_pulse_timer
 16576  003112  6ED9               	movwf	fsr2l,c
 16577  003114  6ADA               	clrf	fsr2h,c
 16578  003116  C00A  FFDE         	movff	??_init_app_ram,postinc2
 16579  00311A  C00B  FFDD         	movff	??_init_app_ram+1,postdec2
 16580  00311E                     l7709:
 16581                           
 16582                           ;main.c: 459: }
 16583                           ;main.c: 462: if ( Read_b_eep(0x43 + 15 + i) & 0x04) {
 16584  00311E  0E52               	movlw	82
 16585  003120  240C               	addwf	init_app_ram@i,w,c
 16586  003122  6E08               	movwf	?_Read_b_eep,c
 16587  003124  6A09               	clrf	?_Read_b_eep+1,c
 16588  003126  0E00               	movlw	0
 16589  003128  2209               	addwfc	?_Read_b_eep+1,f,c
 16590  00312A  EC3F  F01E         	call	_Read_b_eep	;wreg free
 16591  00312E  6E0A               	movwf	??_init_app_ram& (0+255),c
 16592  003130  A40A               	btfss	??_init_app_ram,2,c
 16593  003132  D01A               	goto	l7713
 16594                           
 16595                           ;main.c: 463: relay_protection_timer[ i ] =
 16596                           ;main.c: 464: Read_b_eep(0x43 + 44 + i) * 256 +
 16597                           ;main.c: 465: Read_b_eep(0x43 + 45 + i);
 16598  003134  0E6F               	movlw	111
 16599  003136  240C               	addwf	init_app_ram@i,w,c
 16600  003138  6E08               	movwf	?_Read_b_eep,c
 16601  00313A  6A09               	clrf	?_Read_b_eep+1,c
 16602  00313C  0E00               	movlw	0
 16603  00313E  2209               	addwfc	?_Read_b_eep+1,f,c
 16604  003140  EC3F  F01E         	call	_Read_b_eep	;wreg free
 16605  003144  6E0B               	movwf	(??_init_app_ram+1)& (0+255),c
 16606  003146  6A0A               	clrf	??_init_app_ram& (0+255),c
 16607  003148  0E70               	movlw	112
 16608  00314A  240C               	addwf	init_app_ram@i,w,c
 16609  00314C  6E08               	movwf	?_Read_b_eep,c
 16610  00314E  6A09               	clrf	?_Read_b_eep+1,c
 16611  003150  0E00               	movlw	0
 16612  003152  2209               	addwfc	?_Read_b_eep+1,f,c
 16613  003154  EC3F  F01E         	call	_Read_b_eep	;wreg free
 16614  003158  D80C               	call	PL64	;call to abstracted procedure
 16615  00315A  0F60               	addlw	low _relay_protection_timer
 16616  00315C  6ED9               	movwf	fsr2l,c
 16617  00315E  6ADA               	clrf	fsr2h,c
 16618  003160  C00A  FFDE         	movff	??_init_app_ram,postinc2
 16619  003164  C00B  FFDD         	movff	??_init_app_ram+1,postdec2
 16620  003168                     l7713:
 16621  003168  2A0C               	incf	init_app_ram@i,f,c
 16622  00316A  0E06               	movlw	6
 16623  00316C  640C               	cpfsgt	init_app_ram@i,c
 16624  00316E  D7A5               	goto	l7703
 16625  003170  0C06               	retlw	6
 16626  003172                     __end_of_init_app_ram:
 16627                           	opt stack 0
 16628  003172                     PL64:
 16629                           	opt stack 24
 16630  003172  260A               	addwf	??_init_app_ram,f,c
 16631  003174  0E00               	movlw	0
 16632  003176  220B               	addwfc	??_init_app_ram+1,f,c
 16633  003178  500C               	movf	init_app_ram@i,w,c
 16634  00317A  0D02               	mullw	2
 16635  00317C  50F3               	movf	prodl,w,c
 16636  00317E  0100               	movlb	0	; () banked
 16637  003180  0012               	return	
 16638  003182                     __end_ofPL64:
 16639                           	opt stack 0
 16640                           tblptru	equ	0xFF8
 16641                           tblptrh	equ	0xFF7
 16642                           tblptrl	equ	0xFF6
 16643                           tablat	equ	0xFF5
 16644                           prodh	equ	0xFF4
 16645                           prodl	equ	0xFF3
 16646                           intcon	equ	0xFF2
 16647                           postinc0	equ	0xFEE
 16648                           wreg	equ	0xFE8
 16649                           indf1	equ	0xFE7
 16650                           fsr1h	equ	0xFE2
 16651                           fsr1l	equ	0xFE1
 16652                           indf2	equ	0xFDF
 16653                           postinc2	equ	0xFDE
 16654                           postdec2	equ	0xFDD
 16655                           plusw2	equ	0xFDB
 16656                           fsr2h	equ	0xFDA
 16657                           fsr2l	equ	0xFD9
 16658                           status	equ	0xFD8
 16659                           
 16660 ;; *************** function _WriteTimer0 *****************
 16661 ;; Defined at:
 16662 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16663 ;; Parameters:    Size  Location     Type
 16664 ;;  timer0          2    7[COMRAM] unsigned int 
 16665 ;; Auto vars:     Size  Location     Type
 16666 ;;  timer           2    9[COMRAM] struct Timers
 16667 ;; Return value:  Size  Location     Type
 16668 ;;		None               void
 16669 ;; Registers used:
 16670 ;;		None
 16671 ;; Tracked objects:
 16672 ;;		On entry : 0/0
 16673 ;;		On exit  : 0/0
 16674 ;;		Unchanged: 0/0
 16675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16676 ;;      Params:         2       0       0       0       0       0       0
 16677 ;;      Locals:         2       0       0       0       0       0       0
 16678 ;;      Temps:          0       0       0       0       0       0       0
 16679 ;;      Totals:         4       0       0       0       0       0       0
 16680 ;;Total ram usage:        4 bytes
 16681 ;; Hardware stack levels used:    1
 16682 ;; Hardware stack levels required when called:    2
 16683 ;; This function calls:
 16684 ;;		Nothing
 16685 ;; This function is called by:
 16686 ;;		_init
 16687 ;; This function uses a non-reentrant model
 16688 ;;
 16689                           
 16690                           	psect	text74
 16691  003C6C                     __ptext74:
 16692                           	opt stack 0
 16693  003C6C                     _WriteTimer0:
 16694                           	opt stack 27
 16695                           
 16696                           ;incstack = 0
 16697                           ;incstack = 0
 16698  003C6C  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 16699  003C70  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 16700  003C74  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 16701  003C78  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 16702  003C7C  0012               	return	
 16703  003C7E                     __end_of_WriteTimer0:
 16704                           	opt stack 0
 16705                           tblptru	equ	0xFF8
 16706                           tblptrh	equ	0xFF7
 16707                           tblptrl	equ	0xFF6
 16708                           tablat	equ	0xFF5
 16709                           prodh	equ	0xFF4
 16710                           prodl	equ	0xFF3
 16711                           intcon	equ	0xFF2
 16712                           postinc0	equ	0xFEE
 16713                           wreg	equ	0xFE8
 16714                           indf1	equ	0xFE7
 16715                           fsr1h	equ	0xFE2
 16716                           fsr1l	equ	0xFE1
 16717                           indf2	equ	0xFDF
 16718                           postinc2	equ	0xFDE
 16719                           postdec2	equ	0xFDD
 16720                           plusw2	equ	0xFDB
 16721                           fsr2h	equ	0xFDA
 16722                           fsr2l	equ	0xFD9
 16723                           status	equ	0xFD8
 16724                           
 16725 ;; *************** function _Read_b_eep *****************
 16726 ;; Defined at:
 16727 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 16728 ;; Parameters:    Size  Location     Type
 16729 ;;  badd            2    7[COMRAM] unsigned int 
 16730 ;; Auto vars:     Size  Location     Type
 16731 ;;		None
 16732 ;; Return value:  Size  Location     Type
 16733 ;;                  1    wreg      unsigned char 
 16734 ;; Registers used:
 16735 ;;		wreg, status,2
 16736 ;; Tracked objects:
 16737 ;;		On entry : 0/0
 16738 ;;		On exit  : 0/0
 16739 ;;		Unchanged: 0/0
 16740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16741 ;;      Params:         2       0       0       0       0       0       0
 16742 ;;      Locals:         0       0       0       0       0       0       0
 16743 ;;      Temps:          0       0       0       0       0       0       0
 16744 ;;      Totals:         2       0       0       0       0       0       0
 16745 ;;Total ram usage:        2 bytes
 16746 ;; Hardware stack levels used:    1
 16747 ;; Hardware stack levels required when called:    2
 16748 ;; This function calls:
 16749 ;;		Nothing
 16750 ;; This function is called by:
 16751 ;;		_init_app_ram
 16752 ;;		_doApplicationOneSecondWork
 16753 ;;		_vscp_readNicknamePermanent
 16754 ;;		_vscp_getZone
 16755 ;;		_vscp_getSubzone
 16756 ;;		_vscp_readAppReg
 16757 ;;		_vscp_writeAppReg
 16758 ;;		_SendInformationEvent
 16759 ;;		_doDM
 16760 ;;		_doActionOn
 16761 ;;		_doActionOff
 16762 ;;		_doActionPulse
 16763 ;;		_doActionStatus
 16764 ;;		_doActionDisable
 16765 ;;		_doActionToggle
 16766 ;;		_vscp_getGUID
 16767 ;;		_vscp_getUserID
 16768 ;;		_vscp_getManufacturerId
 16769 ;;		_vscp_getSegmentCRC
 16770 ;;		_calculateSetFilterMask
 16771 ;; This function uses a non-reentrant model
 16772 ;;
 16773                           
 16774                           	psect	text75
 16775  003C7E                     __ptext75:
 16776                           	opt stack 0
 16777  003C7E                     _Read_b_eep:
 16778                           	opt stack 26
 16779                           
 16780                           ;incstack = 0
 16781                           ;incstack = 0
 16782  003C7E  C008  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 16783  003C82  9CA6               	bcf	4006,6,c	;volatile
 16784  003C84  9EA6               	bcf	4006,7,c	;volatile
 16785  003C86  80A6               	bsf	4006,0,c	;volatile
 16786  003C88  F000               	nop		;# 
 16787  003C8A  F000               	nop		;# 
 16788  003C8C  50A8               	movf	4008,w,c	;volatile
 16789  003C8E  0012               	return	
 16790  003C90                     __end_of_Read_b_eep:
 16791                           	opt stack 0
 16792                           tblptru	equ	0xFF8
 16793                           tblptrh	equ	0xFF7
 16794                           tblptrl	equ	0xFF6
 16795                           tablat	equ	0xFF5
 16796                           prodh	equ	0xFF4
 16797                           prodl	equ	0xFF3
 16798                           intcon	equ	0xFF2
 16799                           postinc0	equ	0xFEE
 16800                           wreg	equ	0xFE8
 16801                           indf1	equ	0xFE7
 16802                           fsr1h	equ	0xFE2
 16803                           fsr1l	equ	0xFE1
 16804                           indf2	equ	0xFDF
 16805                           postinc2	equ	0xFDE
 16806                           postdec2	equ	0xFDD
 16807                           plusw2	equ	0xFDB
 16808                           fsr2h	equ	0xFDA
 16809                           fsr2l	equ	0xFD9
 16810                           status	equ	0xFD8
 16811                           
 16812 ;; *************** function _vscp_readAppReg *****************
 16813 ;; Defined at:
 16814 ;;		line 896 in file "../main.c"
 16815 ;; Parameters:    Size  Location     Type
 16816 ;;  reg             1    wreg     unsigned char 
 16817 ;; Auto vars:     Size  Location     Type
 16818 ;;  reg             1   10[COMRAM] unsigned char 
 16819 ;;  rv              1    9[COMRAM] unsigned char 
 16820 ;; Return value:  Size  Location     Type
 16821 ;;                  1    wreg      unsigned char 
 16822 ;; Registers used:
 16823 ;;		wreg, status,2, status,0, cstack
 16824 ;; Tracked objects:
 16825 ;;		On entry : F/0
 16826 ;;		On exit  : 0/0
 16827 ;;		Unchanged: 0/0
 16828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16829 ;;      Params:         0       0       0       0       0       0       0
 16830 ;;      Locals:         2       0       0       0       0       0       0
 16831 ;;      Temps:          0       0       0       0       0       0       0
 16832 ;;      Totals:         2       0       0       0       0       0       0
 16833 ;;Total ram usage:        2 bytes
 16834 ;; Hardware stack levels used:    1
 16835 ;; Hardware stack levels required when called:    3
 16836 ;; This function calls:
 16837 ;;		_Read_b_eep
 16838 ;; This function is called by:
 16839 ;;		_vscp_readRegister
 16840 ;;		_vscp_handleProtocolEvent
 16841 ;; This function uses a non-reentrant model
 16842 ;;
 16843                           
 16844                           	psect	text76
 16845  00348E                     __ptext76:
 16846                           	opt stack 0
 16847  00348E                     _vscp_readAppReg:
 16848                           	opt stack 25
 16849                           
 16850                           ;incstack = 0
 16851                           ;incstack = 0
 16852                           ;vscp_readAppReg@reg stored from wreg
 16853  00348E  CFE8 F00B          	movff	wreg,vscp_readAppReg@reg
 16854                           
 16855                           ; BSR set to: 0
 16856                           ;main.c: 897: uint8_t rv;
 16857                           ;main.c: 899: rv = 0x00;
 16858  003492  6A0A               	clrf	vscp_readAppReg@rv,c
 16859                           
 16860                           ; BSR set to: 0
 16861                           ;main.c: 902: if ( reg == 0x00 ) {
 16862  003494  660B               	tstfsz	vscp_readAppReg@reg,c
 16863  003496  D006               	goto	l8501
 16864                           
 16865                           ; BSR set to: 0
 16866                           ;main.c: 903: rv = Read_b_eep(0x43 + 0);
 16867  003498  6A09               	clrf	?_Read_b_eep+1,c
 16868  00349A  0E43               	movlw	67
 16869  00349C  6E08               	movwf	?_Read_b_eep,c
 16870  00349E  EC3F  F01E         	call	_Read_b_eep	;wreg free
 16871  0034A2  D04D               	goto	L63
 16872  0034A4                     l8501:
 16873                           
 16874                           ; BSR set to: 0
 16875                           ;main.c: 906: else if ( reg == 0x01 ) {
 16876  0034A4  040B               	decf	vscp_readAppReg@reg,w,c
 16877  0034A6  E106               	bnz	l8505
 16878                           
 16879                           ; BSR set to: 0
 16880                           ;main.c: 907: rv = Read_b_eep(0x43 + 1);
 16881  0034A8  6A09               	clrf	?_Read_b_eep+1,c
 16882  0034AA  0E44               	movlw	68
 16883  0034AC  6E08               	movwf	?_Read_b_eep,c
 16884  0034AE  EC3F  F01E         	call	_Read_b_eep	;wreg free
 16885  0034B2  D045               	goto	L63
 16886  0034B4                     l8505:
 16887                           
 16888                           ; BSR set to: 0
 16889                           ;main.c: 909: else if ( (reg >= 2) && (reg < 10) ) {
 16890  0034B4  0E01               	movlw	1
 16891  0034B6  640B               	cpfsgt	vscp_readAppReg@reg,c
 16892  0034B8  D034               	goto	l8529
 16893                           
 16894                           ; BSR set to: 0
 16895  0034BA  0E0A               	movlw	10
 16896  0034BC  600B               	cpfslt	vscp_readAppReg@reg,c
 16897  0034BE  D031               	goto	l8529
 16898  0034C0  D01E               	goto	l8527
 16899  0034C2                     l8511:
 16900                           
 16901                           ; BSR set to: 0
 16902                           ;main.c: 915: rv = LATBbits.LATB4;
 16903  0034C2  0E00               	movlw	0
 16904  0034C4  B88A               	btfsc	3978,4,c	;volatile
 16905  0034C6  0E01               	movlw	1
 16906  0034C8  D03A               	goto	L63
 16907  0034CA                     l8513:
 16908                           
 16909                           ; BSR set to: 0
 16910                           ;main.c: 920: rv = LATBbits.LATB1;
 16911  0034CA  0E00               	movlw	0
 16912  0034CC  B28A               	btfsc	3978,1,c	;volatile
 16913  0034CE  0E01               	movlw	1
 16914  0034D0  D036               	goto	L63
 16915  0034D2                     l8515:
 16916                           
 16917                           ; BSR set to: 0
 16918                           ;main.c: 925: rv = LATBbits.LATB0;
 16919  0034D2  0E00               	movlw	0
 16920  0034D4  B08A               	btfsc	3978,0,c	;volatile
 16921  0034D6  0E01               	movlw	1
 16922  0034D8  D032               	goto	L63
 16923  0034DA                     l8517:
 16924                           
 16925                           ; BSR set to: 0
 16926                           ;main.c: 930: rv = LATCbits.LATC7;
 16927  0034DA  0E00               	movlw	0
 16928  0034DC  BE8B               	btfsc	3979,7,c	;volatile
 16929  0034DE  0E01               	movlw	1
 16930  0034E0  D02E               	goto	L63
 16931  0034E2                     l8519:
 16932                           
 16933                           ; BSR set to: 0
 16934                           ;main.c: 935: rv = LATCbits.LATC6;
 16935  0034E2  0E00               	movlw	0
 16936  0034E4  BC8B               	btfsc	3979,6,c	;volatile
 16937  0034E6  0E01               	movlw	1
 16938  0034E8  D02A               	goto	L63
 16939  0034EA                     l8521:
 16940                           
 16941                           ; BSR set to: 0
 16942                           ;main.c: 940: rv = LATCbits.LATC5;
 16943  0034EA  0E00               	movlw	0
 16944  0034EC  BA8B               	btfsc	3979,5,c	;volatile
 16945  0034EE  0E01               	movlw	1
 16946  0034F0  D026               	goto	L63
 16947  0034F2                     l8523:
 16948                           
 16949                           ; BSR set to: 0
 16950                           ;main.c: 945: rv = LATCbits.LATC4;
 16951  0034F2  0E00               	movlw	0
 16952  0034F4  B88B               	btfsc	3979,4,c	;volatile
 16953  0034F6  0E01               	movlw	1
 16954  0034F8  D022               	goto	L63
 16955  0034FA                     l292:
 16956                           
 16957                           ; BSR set to: 0
 16958                           ;main.c: 950: rv = 0;
 16959  0034FA  6A0A               	clrf	vscp_readAppReg@rv,c
 16960                           
 16961                           ;main.c: 951: break;
 16962  0034FC  D021               	goto	l8535
 16963  0034FE                     l8527:
 16964                           
 16965                           ; BSR set to: 0
 16966  0034FE  500B               	movf	vscp_readAppReg@reg,w,c
 16967                           
 16968                           ; Switch size 1, requested type "space"
 16969                           ; Number of cases is 8, Range of values is 2 to 9
 16970                           ; switch strategies available:
 16971                           ; Name         Instructions Cycles
 16972                           ; simple_byte           25    13 (average)
 16973                           ;	Chosen strategy is simple_byte
 16974  003500  0A02               	xorlw	2	; case 2
 16975  003502  E0DF               	bz	l8511
 16976  003504  0A01               	xorlw	1	; case 3
 16977  003506  E0E1               	bz	l8513
 16978  003508  0A07               	xorlw	7	; case 4
 16979  00350A  E0E3               	bz	l8515
 16980  00350C  0A01               	xorlw	1	; case 5
 16981  00350E  E0E5               	bz	l8517
 16982  003510  0A03               	xorlw	3	; case 6
 16983  003512  E0E7               	bz	l8519
 16984  003514  0A01               	xorlw	1	; case 7
 16985  003516  E0E9               	bz	l8521
 16986  003518  0A0F               	xorlw	15	; case 8
 16987  00351A  E0EB               	bz	l8523
 16988  00351C  0A01               	xorlw	1	; case 9
 16989  00351E  E0ED               	bz	l292
 16990  003520  D00F               	goto	l8535
 16991  003522                     l8529:
 16992                           
 16993                           ; BSR set to: 0
 16994                           ;main.c: 956: else if ( ( reg >= 10 ) &&
 16995                           ;main.c: 957: (reg < (72 + 7 * 8 ) ) ) {
 16996  003522  0E09               	movlw	9
 16997  003524  640B               	cpfsgt	vscp_readAppReg@reg,c
 16998  003526  D00C               	goto	l8535
 16999                           
 17000                           ; BSR set to: 0
 17001  003528  0E80               	movlw	128
 17002  00352A  600B               	cpfslt	vscp_readAppReg@reg,c
 17003  00352C  D009               	goto	l8535
 17004                           
 17005                           ; BSR set to: 0
 17006                           ;main.c: 958: rv = Read_b_eep(0x43 + reg);
 17007  00352E  0E43               	movlw	67
 17008  003530  240B               	addwf	vscp_readAppReg@reg,w,c
 17009  003532  6E08               	movwf	?_Read_b_eep,c
 17010  003534  6A09               	clrf	?_Read_b_eep+1,c
 17011  003536  0E00               	movlw	0
 17012  003538  2209               	addwfc	?_Read_b_eep+1,f,c
 17013  00353A  EC3F  F01E         	call	_Read_b_eep	;wreg free
 17014  00353E                     L63:
 17015  00353E  6E0A               	movwf	vscp_readAppReg@rv,c
 17016  003540                     l8535:
 17017                           
 17018                           ;main.c: 959: }
 17019                           ;main.c: 961: return rv;
 17020  003540  500A               	movf	vscp_readAppReg@rv,w,c
 17021  003542  0012               	return	
 17022  003544                     __end_of_vscp_readAppReg:
 17023                           	opt stack 0
 17024                           tblptru	equ	0xFF8
 17025                           tblptrh	equ	0xFF7
 17026                           tblptrl	equ	0xFF6
 17027                           tablat	equ	0xFF5
 17028                           prodh	equ	0xFF4
 17029                           prodl	equ	0xFF3
 17030                           intcon	equ	0xFF2
 17031                           postinc0	equ	0xFEE
 17032                           wreg	equ	0xFE8
 17033                           indf1	equ	0xFE7
 17034                           fsr1h	equ	0xFE2
 17035                           fsr1l	equ	0xFE1
 17036                           indf2	equ	0xFDF
 17037                           postinc2	equ	0xFDE
 17038                           postdec2	equ	0xFDD
 17039                           plusw2	equ	0xFDB
 17040                           fsr2h	equ	0xFDA
 17041                           fsr2l	equ	0xFD9
 17042                           status	equ	0xFD8
 17043                           
 17044 ;; *************** function _interrupt_at_low_vector *****************
 17045 ;; Defined at:
 17046 ;;		line 133 in file "../main.c"
 17047 ;; Parameters:    Size  Location     Type
 17048 ;;		None
 17049 ;; Auto vars:     Size  Location     Type
 17050 ;;		None
 17051 ;; Return value:  Size  Location     Type
 17052 ;;		None               void
 17053 ;; Registers used:
 17054 ;;		wreg, status,2, status,0, cstack
 17055 ;; Tracked objects:
 17056 ;;		On entry : 0/0
 17057 ;;		On exit  : 0/0
 17058 ;;		Unchanged: 0/0
 17059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17060 ;;      Params:         0       0       0       0       0       0       0
 17061 ;;      Locals:         0       0       0       0       0       0       0
 17062 ;;      Temps:          3       0       0       0       0       0       0
 17063 ;;      Totals:         3       0       0       0       0       0       0
 17064 ;;Total ram usage:        3 bytes
 17065 ;; Hardware stack levels used:    1
 17066 ;; Hardware stack levels required when called:    1
 17067 ;; This function calls:
 17068 ;;		i1_WriteTimer0
 17069 ;; This function is called by:
 17070 ;;		Interrupt level 1
 17071 ;; This function uses a non-reentrant model
 17072 ;;
 17073                           
 17074                           	psect	intcodelo
 17075  000018                     __pintcodelo:
 17076                           	opt stack 0
 17077  000018                     _interrupt_at_low_vector:
 17078                           	opt stack 21
 17079                           
 17080                           ;incstack = 0
 17081  000018  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 17082  00001C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 17083  000020  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 17084  000024                     
 17085                           ;main.c: 135: if ( INTCONbits.TMR0IF ) {
 17086  000024  A4F2               	btfss	intcon,2,c	;volatile
 17087  000026  D001               	goto	i1u790_21
 17088  000028  D001               	goto	i1u790_20
 17089  00002A                     i1u790_21:
 17090  00002A  D03E               	goto	i1l147
 17091  00002C                     i1u790_20:
 17092  00002C                     
 17093                           ;main.c: 138: WriteTimer0(0xfb1d);
 17094  00002C  0EFB               	movlw	251
 17095  00002E  6E02               	movwf	?i1_WriteTimer0+1,c
 17096  000030  0E1D               	movlw	29
 17097  000032  6E01               	movwf	?i1_WriteTimer0,c
 17098  000034  EC48  F01E         	call	i1_WriteTimer0	;wreg free
 17099  000038                     
 17100                           ;main.c: 140: vscp_timer++;
 17101  000038  0100               	movlb	0	; () banked
 17102  00003A  4B86               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 17103  00003C  2B87               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 17104  00003E                     
 17105                           ; BSR set to: 0
 17106                           ;main.c: 141: vscp_configtimer++;
 17107  00003E  4B84               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 17108  000040  2B85               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 17109  000042                     
 17110                           ; BSR set to: 0
 17111                           ;main.c: 143: sendTimer++;
 17112  000042  0E01               	movlw	1
 17113  000044  2780               	addwf	_measurement_clock& (0+255),f,b	;volatile
 17114  000046  0E00               	movlw	0
 17115  000048  2381               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 17116  00004A  0E00               	movlw	0
 17117  00004C  2382               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 17118  00004E  0E00               	movlw	0
 17119  000050  2383               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 17120  000052                     
 17121                           ; BSR set to: 0
 17122                           ;main.c: 146: if ( PORTCbits.RC0 ) {
 17123  000052  A082               	btfss	3970,0,c	;volatile
 17124  000054  D001               	goto	i1u791_21
 17125  000056  D001               	goto	i1u791_20
 17126  000058                     i1u791_21:
 17127  000058  D002               	goto	i1l7515
 17128  00005A                     i1u791_20:
 17129  00005A                     
 17130                           ; BSR set to: 0
 17131                           ;main.c: 147: vscp_initbtncnt = 0;
 17132  00005A  6B8E               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 17133                           
 17134                           ;main.c: 148: } else {
 17135  00005C  D001               	goto	i1l139
 17136  00005E                     i1l7515:
 17137                           
 17138                           ; BSR set to: 0
 17139                           ;main.c: 150: vscp_initbtncnt++;
 17140  00005E  2B8E               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 17141  000060                     i1l139:
 17142                           
 17143                           ; BSR set to: 0
 17144                           ;main.c: 151: }
 17145                           ;main.c: 154: vscp_statuscnt++;
 17146  000060  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 17147  000062                     
 17148                           ; BSR set to: 0
 17149                           ;main.c: 155: if ( ( 0x02 == vscp_initledfunc ) &&
 17150                           ;main.c: 156: ( vscp_statuscnt > 100 ) ) {
 17151  000062  5056               	movf	_vscp_initledfunc,w,c
 17152  000064  0A02               	xorlw	2
 17153  000066  A4D8               	btfss	status,2,c
 17154  000068  D001               	goto	i1u792_21
 17155  00006A  D001               	goto	i1u792_20
 17156  00006C                     i1u792_21:
 17157  00006C  D00E               	goto	i1l7525
 17158  00006E                     i1u792_20:
 17159  00006E                     
 17160                           ; BSR set to: 0
 17161  00006E  0E64               	movlw	100
 17162  000070  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 17163  000072  D001               	goto	i1u793_21
 17164  000074  D001               	goto	i1u793_20
 17165  000076                     i1u793_21:
 17166  000076  D009               	goto	i1l7525
 17167  000078                     i1u793_20:
 17168  000078                     
 17169                           ; BSR set to: 0
 17170                           ;main.c: 158: if ( PORTCbits.RC1 ) {
 17171  000078  A282               	btfss	3970,1,c	;volatile
 17172  00007A  D001               	goto	i1u794_21
 17173  00007C  D001               	goto	i1u794_20
 17174  00007E                     i1u794_21:
 17175  00007E  D002               	goto	i1l141
 17176  000080                     i1u794_20:
 17177  000080                     
 17178                           ; BSR set to: 0
 17179                           ;main.c: 159: PORTCbits.RC1 = 0;
 17180  000080  9282               	bcf	3970,1,c	;volatile
 17181                           
 17182                           ;main.c: 160: }
 17183  000082  D001               	goto	i1l142
 17184  000084                     i1l141:
 17185                           
 17186                           ; BSR set to: 0
 17187                           ;main.c: 161: else {
 17188                           ;main.c: 162: PORTCbits.RC1 = 1;
 17189  000084  8282               	bsf	3970,1,c	;volatile
 17190  000086                     i1l142:
 17191                           
 17192                           ; BSR set to: 0
 17193                           ;main.c: 163: }
 17194                           ;main.c: 165: vscp_statuscnt = 0;
 17195  000086  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17196                           
 17197                           ;main.c: 167: }
 17198  000088  D00E               	goto	i1l143
 17199  00008A                     i1l7525:
 17200                           
 17201                           ; BSR set to: 0
 17202                           ;main.c: 168: else if (0x01 == vscp_initledfunc) {
 17203  00008A  0456               	decf	_vscp_initledfunc,w,c
 17204  00008C  A4D8               	btfss	status,2,c
 17205  00008E  D001               	goto	i1u795_21
 17206  000090  D001               	goto	i1u795_20
 17207  000092                     i1u795_21:
 17208  000092  D003               	goto	i1l144
 17209  000094                     i1u795_20:
 17210  000094                     
 17211                           ; BSR set to: 0
 17212                           ;main.c: 169: PORTCbits.RC1 = 1;
 17213  000094  8282               	bsf	3970,1,c	;volatile
 17214                           
 17215                           ;main.c: 170: vscp_statuscnt = 0;
 17216  000096  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17217                           
 17218                           ;main.c: 171: }
 17219  000098  D006               	goto	i1l143
 17220  00009A                     i1l144:
 17221                           
 17222                           ; BSR set to: 0
 17223                           ;main.c: 172: else if (0x00 == vscp_initledfunc) {
 17224  00009A  6656               	tstfsz	_vscp_initledfunc,c
 17225  00009C  D001               	goto	i1u796_21
 17226  00009E  D001               	goto	i1u796_20
 17227  0000A0                     i1u796_21:
 17228  0000A0  D002               	goto	i1l143
 17229  0000A2                     i1u796_20:
 17230  0000A2                     
 17231                           ; BSR set to: 0
 17232                           ;main.c: 173: PORTCbits.RC1 = 0;
 17233  0000A2  9282               	bcf	3970,1,c	;volatile
 17234                           
 17235                           ;main.c: 174: vscp_statuscnt = 0;
 17236  0000A4  6A58               	clrf	_vscp_statuscnt,c	;volatile
 17237  0000A6                     i1l143:
 17238                           
 17239                           ; BSR set to: 0
 17240                           ;main.c: 175: }
 17241                           ;main.c: 177: INTCONbits.TMR0IF = 0;
 17242  0000A6  94F2               	bcf	intcon,2,c	;volatile
 17243  0000A8                     i1l147:
 17244  0000A8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 17245  0000AC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 17246  0000B0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 17247  0000B4  0010               	retfie	
 17248  0000B6                     __end_of_interrupt_at_low_vector:
 17249                           	opt stack 0
 17250                           tblptru	equ	0xFF8
 17251                           tblptrh	equ	0xFF7
 17252                           tblptrl	equ	0xFF6
 17253                           tablat	equ	0xFF5
 17254                           prodh	equ	0xFF4
 17255                           prodl	equ	0xFF3
 17256                           intcon	equ	0xFF2
 17257                           postinc0	equ	0xFEE
 17258                           wreg	equ	0xFE8
 17259                           indf1	equ	0xFE7
 17260                           fsr1h	equ	0xFE2
 17261                           fsr1l	equ	0xFE1
 17262                           bsr	equ	0xFE0
 17263                           indf2	equ	0xFDF
 17264                           postinc2	equ	0xFDE
 17265                           postdec2	equ	0xFDD
 17266                           plusw2	equ	0xFDB
 17267                           fsr2h	equ	0xFDA
 17268                           fsr2l	equ	0xFD9
 17269                           status	equ	0xFD8
 17270                           
 17271 ;; *************** function i1_WriteTimer0 *****************
 17272 ;; Defined at:
 17273 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 17274 ;; Parameters:    Size  Location     Type
 17275 ;;  timer0          2    0[COMRAM] unsigned int 
 17276 ;; Auto vars:     Size  Location     Type
 17277 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 17278 ;; Return value:  Size  Location     Type
 17279 ;;		None               void
 17280 ;; Registers used:
 17281 ;;		None
 17282 ;; Tracked objects:
 17283 ;;		On entry : 0/0
 17284 ;;		On exit  : 0/0
 17285 ;;		Unchanged: 0/0
 17286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17287 ;;      Params:         2       0       0       0       0       0       0
 17288 ;;      Locals:         2       0       0       0       0       0       0
 17289 ;;      Temps:          0       0       0       0       0       0       0
 17290 ;;      Totals:         4       0       0       0       0       0       0
 17291 ;;Total ram usage:        4 bytes
 17292 ;; Hardware stack levels used:    1
 17293 ;; This function calls:
 17294 ;;		Nothing
 17295 ;; This function is called by:
 17296 ;;		_interrupt_at_low_vector
 17297 ;; This function uses a non-reentrant model
 17298 ;;
 17299                           
 17300                           	psect	text78
 17301  003C90                     __ptext78:
 17302                           	opt stack 0
 17303  003C90                     i1_WriteTimer0:
 17304                           	opt stack 21
 17305                           
 17306                           ;incstack = 0
 17307                           ;incstack = 0
 17308  003C90  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 17309  003C94  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 17310  003C98  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 17311  003C9C  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 17312  003CA0  0012               	return	
 17313  003CA2                     __end_ofi1_WriteTimer0:
 17314                           	opt stack 0
 17315                           tblptru	equ	0xFF8
 17316                           tblptrh	equ	0xFF7
 17317                           tblptrl	equ	0xFF6
 17318                           tablat	equ	0xFF5
 17319                           prodh	equ	0xFF4
 17320                           prodl	equ	0xFF3
 17321                           intcon	equ	0xFF2
 17322                           postinc0	equ	0xFEE
 17323                           wreg	equ	0xFE8
 17324                           indf1	equ	0xFE7
 17325                           fsr1h	equ	0xFE2
 17326                           fsr1l	equ	0xFE1
 17327                           bsr	equ	0xFE0
 17328                           indf2	equ	0xFDF
 17329                           postinc2	equ	0xFDE
 17330                           postdec2	equ	0xFDD
 17331                           plusw2	equ	0xFDB
 17332                           fsr2h	equ	0xFDA
 17333                           fsr2l	equ	0xFD9
 17334                           status	equ	0xFD8
 17335                           tblptru	equ	0xFF8
 17336                           tblptrh	equ	0xFF7
 17337                           tblptrl	equ	0xFF6
 17338                           tablat	equ	0xFF5
 17339                           prodh	equ	0xFF4
 17340                           prodl	equ	0xFF3
 17341                           intcon	equ	0xFF2
 17342                           postinc0	equ	0xFEE
 17343                           wreg	equ	0xFE8
 17344                           indf1	equ	0xFE7
 17345                           fsr1h	equ	0xFE2
 17346                           fsr1l	equ	0xFE1
 17347                           bsr	equ	0xFE0
 17348                           indf2	equ	0xFDF
 17349                           postinc2	equ	0xFDE
 17350                           postdec2	equ	0xFDD
 17351                           plusw2	equ	0xFDB
 17352                           fsr2h	equ	0xFDA
 17353                           fsr2l	equ	0xFD9
 17354                           status	equ	0xFD8
 17355                           
 17356                           	psect	rparam
 17357  0000                     tblptru	equ	0xFF8
 17358                           tblptrh	equ	0xFF7
 17359                           tblptrl	equ	0xFF6
 17360                           tablat	equ	0xFF5
 17361                           prodh	equ	0xFF4
 17362                           prodl	equ	0xFF3
 17363                           intcon	equ	0xFF2
 17364                           postinc0	equ	0xFEE
 17365                           wreg	equ	0xFE8
 17366                           indf1	equ	0xFE7
 17367                           fsr1h	equ	0xFE2
 17368                           fsr1l	equ	0xFE1
 17369                           bsr	equ	0xFE0
 17370                           indf2	equ	0xFDF
 17371                           postinc2	equ	0xFDE
 17372                           postdec2	equ	0xFDD
 17373                           plusw2	equ	0xFDB
 17374                           fsr2h	equ	0xFDA
 17375                           fsr2l	equ	0xFD9
 17376                           status	equ	0xFD8
 17377                           tblptru	equ	0xFF8
 17378                           tblptrh	equ	0xFF7
 17379                           tblptrl	equ	0xFF6
 17380                           tablat	equ	0xFF5
 17381                           prodh	equ	0xFF4
 17382                           prodl	equ	0xFF3
 17383                           intcon	equ	0xFF2
 17384                           postinc0	equ	0xFEE
 17385                           wreg	equ	0xFE8
 17386                           indf1	equ	0xFE7
 17387                           fsr1h	equ	0xFE2
 17388                           fsr1l	equ	0xFE1
 17389                           bsr	equ	0xFE0
 17390                           indf2	equ	0xFDF
 17391                           postinc2	equ	0xFDE
 17392                           postdec2	equ	0xFDD
 17393                           plusw2	equ	0xFDB
 17394                           fsr2h	equ	0xFDA
 17395                           fsr2l	equ	0xFD9
 17396                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         87
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     60     140
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_Read_b_eep
    _vscp_getZone->_Read_b_eep
    _doDM->_doActionOff
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionDisable->_Write_b_eep
    _doActionStatus->_SendInformationEvent
    _doActionPulse->_Read_b_eep
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeAppReg
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_Write_b_eep
    _vscp_setUserID->_Write_b_eep
    _vscp_setManufacturerId->_Write_b_eep
    _vscp_setGUID->_Write_b_eep
    _vscp_writeAppReg->_SendInformationEvent
    _calculateSetFilterMask->__CANIDToRegs
    _SendInformationEvent->_sendVSCPFrame
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_Read_b_eep
    _vscp_getUserID->_Read_b_eep
    _vscp_getGUID->_Read_b_eep
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_Read_b_eep
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_Write_b_eep
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_Write_b_eep
    _vscp_setSegmentCRC->_Write_b_eep
    _vscp_getSegmentCRC->_Read_b_eep
    _vscp_writeNicknamePermanent->_Write_b_eep
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_Read_b_eep
    _vscp_readAppReg->_Read_b_eep

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   69573
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                           _Busy_eep
                        _Write_b_eep
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           6     6      0    7354
                                             27 BANK0      6     6      0
                         _Read_b_eep
                        _doActionOff
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2370
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                17    17      0   15355
                                             28 BANK0     17    17      0
                         _Read_b_eep
                        _doActionOff
                         _doActionOn
                      _doActionPulse
                     _doActionStatus
                    _doActionDisable
                     _doActionToggle
 ---------------------------------------------------------------------------------
 (2) _doActionToggle                                       7     6      1    3386
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionDisable                                      6     5      1     387
                                             11 COMRAM     6     5      1
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _doActionStatus                                       7     6      1    3344
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulse                                        7     6      1     319
                                              9 COMRAM     7     6      1
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _doActionOn                                           7     6      1    3128
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOff                                          6     5      1    3128
                                             80 COMRAM     1     0      1
                                             22 BANK0      5     5      0
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   34199
                                             32 BANK0     28    28      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1   11224
                                             30 BANK0      2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    2151
                                             15 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     712
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     204
                                             11 COMRAM     4     4      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     112
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     134
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     134
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     9     8      1    8863
                                             80 COMRAM     1     0      1
                                             22 BANK0      8     8      0
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
               _SendInformationEvent
                    _vscp_readAppReg (ARG)
             _calculateSetFilterMask
 ---------------------------------------------------------------------------------
 (4) _calculateSetFilterMask                              50    50      0    1845
                                             17 COMRAM    50    50      0
                         _Read_b_eep
               _ECANSetOperationMode
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _SendInformationEvent                                 8     6      2    2533
                                             74 COMRAM     6     6      0
                                             20 BANK0      2     0      2
                         _Read_b_eep
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1773
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1334
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      62
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     217
                                             12 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      31
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     180
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     211
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4672
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     301
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      90
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _Write_b_eep                                          4     1      3      68
                                              7 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     666
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (5) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         3     3      0     508
                                              9 COMRAM     3     3      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      31
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     346
                                              9 COMRAM     2     2      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      31
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_getSegmentCRC
       _Read_b_eep
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
     _vscp_setControlByte
       _Busy_eep
       _Write_b_eep
   _init_app_eeprom
     _Busy_eep
     _Write_b_eep
   _init_app_ram
     _Read_b_eep
   _vscp_init
     _vscp_readNicknamePermanent
       _Read_b_eep
   _Busy_eep
   _Write_b_eep
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _Read_b_eep
     _vscp_readAppReg
       _Read_b_eep
     _vscp_writeAppReg
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_readAppReg (ARG)
         _Read_b_eep
       _calculateSetFilterMask (ARG)
         _Read_b_eep
         _ECANSetOperationMode
         __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _Read_b_eep
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _Busy_eep
       _Write_b_eep
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_getSegmentCRC
         _Read_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _Read_b_eep
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _Read_b_eep
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _Read_b_eep
         _vscp_getMDF_URL
         _vscp_getUserID
           _Read_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _Read_b_eep
       _vscp_getMDF_URL
       _vscp_getUserID
         _Read_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _Busy_eep
         _Write_b_eep
         _Read_b_eep
         _SendInformationEvent
           _Read_b_eep
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
         _vscp_readAppReg (ARG)
           _Read_b_eep
         _calculateSetFilterMask (ARG)
           _Read_b_eep
           _ECANSetOperationMode
           __CANIDToRegs
       _vscp_writeStdReg
         _vscp_setGUID
           _Busy_eep
           _Write_b_eep
         _vscp_setManufacturerId
           _Busy_eep
           _Write_b_eep
         _vscp_getGUID
           _Read_b_eep
         _vscp_getUserID
           _Read_b_eep
         _vscp_setUserID
           _Busy_eep
           _Write_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_restoreDefaults
           _init_app_eeprom
             _Busy_eep
             _Write_b_eep
           _init_app_ram
             _Read_b_eep
     _vscp_writeStdReg
       _vscp_setGUID
         _Busy_eep
         _Write_b_eep
       _vscp_setManufacturerId
         _Busy_eep
         _Write_b_eep
       _vscp_getGUID
         _Read_b_eep
       _vscp_getUserID
         _Read_b_eep
       _vscp_setUserID
         _Busy_eep
         _Write_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_restoreDefaults
         _init_app_eeprom
           _Busy_eep
           _Write_b_eep
         _init_app_ram
           _Read_b_eep
     ___lbmod
   _doDM
     _Read_b_eep
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionOn
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulse
       _Read_b_eep
     _doActionStatus
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionDisable
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
     _doActionToggle
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _Read_b_eep
     _vscp_getSubzone
       _Read_b_eep
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _Read_b_eep
       _vscp_getSubzone (ARG)
         _Read_b_eep
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
     _Read_b_eep
     _doActionOff
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _SendInformationEvent
       _Read_b_eep
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3C      8C       5       87.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E4       3        0.0%
DATA                 0      0      F0      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sun Sep 13 15:47:58 2015

                      doActionToggle@val 00C9                  __end_of_vscp_readAppReg 3544  
                  __end_of_sendVSCPFrame 348E                                       PL2 2410  
                                     PL4 0E4C                                       PL6 0E60  
                                     PL8 1C1C             ?_vscp_writeNicknamePermanent 0001  
            ??_vscp_getRegisterPagesUsed 0008                                       bsr 000FE0  
    vscp_writeNicknamePermanent@nickname 000C                              __CFG_BORV$3 000000  
                __end_of_vscp_readStdReg 298E                    doActionToggle@dmflags 00C8  
                                    PL10 1C5A                                      PL20 1F48  
                                    PL12 1C72                                      PL30 2E3A  
                                    PL22 2CFC                                      PL14 1CA6  
                                    PL40 2D1C                                      PL32 1F64  
                                    PL24 1F56                                      PL16 242A  
                                    PL50 2D44                                      PL42 1CD6  
                                    PL34 14D2                                      PL26 2E2A  
                                    PL18 2E16                                      PL60 0EA6  
                                    PL52 1F72                                      PL44 2E4C  
                                    PL36 0E70                                      PL28 14BA  
                                    PL70 14E6                                      PL62 0EB6  
                                    PL54 1F84                                      PL46 298E  
                                    PL38 2D0A                                      PL80 14F4  
                                    PL72 2632                                      PL64 3172  
                                    PL56 0E84                                      PL48 2D30  
                                    PL82 1CF4                                      PL74 2E60  
                                    PL66 0EC6                                      PL58 0E96  
                                    PL76 29A2                                      PL68 0ED6  
                                    PL78 1CEA                                      l210 1DF8  
                                    l211 1E00                                      l220 1E24  
                                    l213 1E04                                      l222 1E28  
                                    l214 1E0C                                      l206 1DE8  
                                    l223 1E30                                      l207 1DF0  
                                    l151 319A                                      l312 0740  
                                    l216 1E10                                      l160 31E2  
                                    l225 1E34                                      l217 1E18  
                                    l322 0808                                      l306 06EC  
                                    l226 1E3E                                      l219 1E1C  
                                    l404 0E20                                      l332 08D0  
                                    l500 2696                                      l420 240E  
                                    l228 1EFA                                      l236 1F46  
                                    l164 31FC                                      l317 07A4  
                                    l253 3A36                                      l502 26C6  
                                    l327 086C                                      l503 26F6  
                                    l504 2726                                      l424 225A  
                                    l337 0934                                      l249 3A5C  
                                    l505 2756                       vscp_readStdReg@idx 0019  
                                    l506 2786                                      l426 2274  
                                    l187 1914                                      l451 1FEE  
                                    l507 27B6                                      l292 34FA  
                                    l460 20EE                                      l453 21D2  
                                    l462 212E                                      l454 202E  
                                    l526 2F48                                      l551 2B6A  
                                    l480 32F0                                      l464 216E  
                                    l456 206E                                      l552 2B72  
                                    l481 32BC                                      l561 2B92  
                                    l634 3BA2                                      l482 32C0  
                                    l458 20AE                                      l570 2BB6  
                                    l562 2B9A                                      l483 32C4  
                                    l571 2BC0                                      l555 2B7A  
                                    l484 32C8                                      l564 2B9E  
                                    l556 2B82                                      l901 25A2  
                                    l485 32CC                                      l573 2C0A  
                                    l565 2BA6                                      l902 25BC  
                                    l670 396E                                      l486 32D0  
                                    l558 2B86                                      l479 32B8  
                                    l567 2BAA                                      l559 2B8E  
                                    l568 2BB2                                      l659 3650  
                      doActionStatus@bOn 00C9                                      l924 2CFA  
                                    l870 2470                       vscp_readStdReg@reg 001C  
                                    l919 2E14                                      l880 253E  
                                    l929 36BE                                      l881 24BE  
                                    l865 2B16                                      l857 2A7A  
                                    l891 2518                                      l883 24CC  
                                    l859 2A98                                      l893 2528  
                                    l885 24E0                                      l877 2630  
                                    l887 24F4                                      l889 2508  
                           __CFG_CPB$OFF 000000           __size_of_vscp_handleProbeState 00BA  
                      doActionStatus@arg 0051                           getVSCPFrame@id 0028  
                      doActionStatus@val 00CA            __end_of_vscp_handleProbeState 33D8  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                   __size_of_Write_b_eep 0034                   _calculateSetFilterMask 1960  
                                    wreg 000FE8              ?_doApplicationOneSecondWork 0001  
                           __CFG_LVP$OFF 000000                             __CFG_WDT$OFF 000000  
                                   l1102 3908                                     l1103 3914  
                                   l1120 3BBC                                     l1107 3998  
                                   l1060 3360                                     l1044 3804  
                                   l1116 37F0                     __size_of_doActionOff 00BA  
                                   l1049 3ACA                                     l1225 10AC  
                                   l1250 123C                                     l1067 33C2  
                                   l1059 33D4                                     l1251 1278  
                                   l1340 3B66                                     l1324 38D4  
                                   l1068 33A2                                     l1092 3872  
                                   l1260 12B4                                     l1341 3B68  
                                   l1165 3B0E                                     l1191 3076  
                                   l1096 3AA6                                     l1249 1228  
                                   l1293 39C2                                     l1285 14B8  
                                   l1299 3CE6                      vscp_readStdReg@code 0011  
                                   l7201 368E                                     l7203 3694  
                                   l7107 2572                                     l7221 2C96  
                                   l7133 25EA                                     l7141 2604  
                                   l7125 25BE                                     l7045 249E  
                                   l7029 245E                                     l7053 24AC  
                                   l7207 36A0                                     l7039 2488  
                                   l7047 24A8                vscp_getManufacturerId@idx 000A  
                                   l9001 1972                                     l7147 261A  
                                   l9021 1B0A                                     l7159 3BE2  
                                   l7191 3660                                     l7193 366A  
                                   l7097 2552                                     l9041 1BAA  
                                   l9017 1A96                                     l9009 1A84  
                                   l7195 3674                                     l9035 1B28  
                                   l8323 37C6                                     l8501 34A4  
                                   l7197 367E                                     l7189 3658  
                                   l9045 1BC0                                     l8333 37D8  
                                   l8511 34C2                                     l7703 30BA  
                                   l7199 3688                                     l9039 1BA2  
                                   l4991 1916                                     l8521 34EA  
                                   l8513 34CA                                     l8505 34B4  
                                   l7713 3168                                     l6921 3950  
                                   l6905 35F4                                     l9401 2A7E  
                                   l5937 3A44                                     l5945 3A1E  
                                   l8329 37D0                                     l8523 34F2  
                                   l8515 34D2                                     l9147 267E  
                                   l9139 2646                                     l8517 34DA  
                                   l7709 311E                                     l6917 394C  
                                   l9413 2AC8                                     l9421 2AE6  
                                   l7493 39E4                                     l7485 39CE  
                                   l8519 34E2                                     l8527 34FE  
                                   l8535 3540                                     l9407 2A9A  
                                   l9431 2B0C                                     l6871 3B1C  
                                   l9183 27E6                                     l9263 372E  
                                   l8529 3522                                     l7681 3AB6  
                                   l9433 2B0E                                     l7753 333E  
                                   l7809 33C6                                     l9601 291C  
                                   l9185 2806                                     l9257 3702  
                                   l9249 36CE                                     l9427 2B08  
                                   l7755 3344                                     l7739 3320  
                                   l9611 2964                                     l9523 3BB6  
                                   l7693 3090                                     l9373 2A04  
                                   l9357 3916                                     l7773 337A  
                                   l9541 2838                                     l9621 298A  
                                   l9533 2824                                     l9391 2A3E  
                                   l9449 2DA2                                     l7777 337E  
                                   l9617 297A                                     l9561 2876  
                                   l9553 285A                                     l9545 2842  
                                   l9537 282E                                     l9801 3256  
                                   l9379 2A14                                     l7779 3382  
                                   l9571 2898                                     l9651 2FC0  
                                   l9811 0EF0                                     l9557 2866  
                                   l9549 284E                                     l9645 2FA0  
                                   l9813 0EF6                                     l9805 325E  
                                   l9487 386A                                     l9591 28D2  
                                   l9583 28BA                                     l9575 28A4  
                                   l9567 288C                                     l9903 0FDC  
                                   l9815 0EFC                                     l9681 3048  
                                   l9665 2FFA                                     l9657 2FDC  
                                   l9913 1010                                     l9817 0F02  
                                   l9761 31D2                                     l9753 31C0  
                                   l9587 28C6                                     l9579 28AE  
                                   l9667 2FFE                                     l9923 1044  
                                   l9819 0F08                                     l9763 31D6  
                                   l9739 3196                                     l9669 3014  
                                   l9933 1078                                     l9853 0F4E  
                                   l9837 0F40                                     l9773 31F6  
                                   l9765 31DC                                     l9757 31C8  
                                   l9951 10DE                                     l9839 0F46  
                                   l9689 305C                                     l9961 113C  
                                   l9945 10B0                                     l9873 0F74  
                                   l9777 3200                                     l9699 3078  
                                   l9955 10F6                                     l9947 10CE  
                                   l9779 3218                                     l9965 1152  
                                   l9981 1178                                     l9789 3242  
                                   l9983 117A                                     l9887 0F80  
                                   l9993 119E                                     l9985 1184  
                                   l9999 11CA                                     u4215 38E0  
                                   u4216 38E2              __size_of_vscp_getMatrixInfo 0020  
                         sendCANFrame@id 0037                                     u8114 30E0  
                                   u8115 30DC                                     u7315 2C5E  
                                   u7325 2C6E                                     u7335 2C9A  
                                   u6820 3644                                     u6825 363A  
                                   u6995 2466                                     u6997 2468  
                                   u9990 1AB6                                     u9975 19CA  
                                   u9995 1AAC                         ??_ECANInitialize 0009  
                           __CFG_PWRT$ON 000000                vscp_setManufacturerId@idx 000D  
                                   _doDM 2200                    __size_of_vscp_getGUID 0014  
                       ?_vscp_getMDF_URL 0001                                     _main 3182  
                                   _init 3874                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     indf1 000FE7  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                    __size_of_vscp_getZone 000A  
                    i1WriteTimer0@timer0 0001                         _vscp_writeAppReg 0622  
                            _vscp_minute 008F                              _vscp_second 0094  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 00B6                     doActionPulse@dmflags 000E  
          __size_of_vscp_doOneSecondWork 004E                        vscp_getUserID@idx 000A  
                  __size_of_vscp_setGUID 0026                         _vscp_writeStdReg 2F76  
                        _doActionDisable 36C8                ECANReceiveMessage@dataLen 0010  
                  getVSCPFrame@pPriority 0020                     __end_of_getVSCPFrame 3652  
            __size_of_vscp_getSegmentCRC 000A                         __RegsToCANID@val 000A  
                       __RegsToCANID@ptr 0008                     __size_of_getCANFrame 002C  
                                  l10011 11DC                                    l10203 13E0  
                                  l10115 12B6                                    l10043 121C  
                                  l10027 11FC                                    l11003 2F6C  
                                  l11021 2B54                                    l11013 2B20  
                                  l10301 23DA                                    l10207 1408  
                                  l10151 132C                                    l10071 125C  
                                  l10063 123E                                    l10303 2404  
                                  l10129 12DE                                    l11025 2B74  
                                  l10313 1D08                                    l10155 133E  
                                  l10139 1300                                    l10075 1264  
                                  l10331 1D78                                    l10181 1384  
                                  l10173 1354                                    l10157 1344  
                                  l10093 1294                                    l10229 1458  
                                  l11061 2BF6                                    l11053 2BC4  
                                  l10245 220C                                    l10333 1DB0  
                                  l10309 1D00                                    l10503 0750  
                                  l10079 126C                                    l10423 32D4  
                                  l10415 329E                                    l10431 3314  
                                  l10407 326A                                    l11055 2BE0  
                                  l11071 2C2E                                    l10343 1DF2  
                                  _B0CON 000E20                                    l10185 139C  
                                  l10177 136E                                    l10089 127A  
                                  l10523 07B4                                    l10515 0778  
                                  l11083 3B04                                    l10195 13C6  
                                  l10427 3302                                    l11067 2C1C  
                                  l10283 2358                                    l10267 228E  
                                  l10371 1E42                                    l10613 097C  
                                  l10605 0944                                    l10293 23A6  
                                  l10381 1ED4                                    l10373 1E5E  
                                  l10543 0818                                    l10535 07DC  
                                  l10463 0698                                    l10607 096E  
                                  l10455 0672                                    l10447 0650  
                                  l10295 23C0                                    l10287 2372  
                                  l10279 233E                                    l10391 1F0C  
                                  _B1CON 000E30                                    l10801 0C4A  
                                  l10705 0AC2                                    l10633 09BC  
                                  l10481 06FA                                    l10289 238C  
                                  l10385 1EE6                                    ?_doDM 0001  
                                  l10803 0C6A                                    l10723 0B06  
                                  l10651 09FE                                    l10627 09B6  
                                  l10563 087C                                    l10555 0840  
                                  l10483 06FE                                    l10475 06C0  
                                  l10395 1F20                                    l10805 0C8A  
                                  l10813 0CF6                                    l10733 0B12  
                                  l10709 0AC8                                    l10661 0A34  
                                  l10637 09C2                                    l10397 1F42  
                                  l10807 0CAA                                    l10815 0D1C  
                                  l10583 08E0                                    l10575 08A4  
                                  l10495 0726                                    _B2CON 000E40  
                                  l10809 0CCA                                    l10753 0B56  
                                  l10729 0B0C                                    l10681 0A78  
                                  l10657 0A04                                    l10905 1FD4  
                                  l10843 0D6A                                    l10771 0B9A  
                                  l10747 0B50                                    l10675 0A72  
                                  l10595 0908                                    l10853 0DB2  
                                  l10845 0D9C                                    l10757 0B5C  
                                  l10685 0A7E                                    l10941 21AE  
                                  l10855 0DBE                                    l10839 0D3E  
                                  l10783 0BA6                                    _B3CON 000E50  
                                  l10777 0BA0                                    l10785 0BCE  
                                  l10945 21E4                                    l10883 0E34  
                                  l10795 0BF0                                    l10699 0ABC  
                                  l10867 0DDA                                    l10971 2EC6  
                                  l10877 0E0A                                    l10797 0C0C  
                                  l10949 21F6                                    l10981 2EF8  
                                  l10973 2ED0                                    l10887 0E48  
                                  l10799 0C2A                                    l10975 2EDA  
                                  l10967 2EA6                                    l10959 2E72  
                                  _B4CON 000E60                                    l10897 1F9C  
                                  l10993 2F34                                    l10977 2EE4  
                                  l10969 2EBC                                    l10985 2F02  
          __size_of_SendInformationEvent 006C                                    l10979 2EEE  
                                  l10987 2F1E            __size_of_vscp_getMajorVersion 0002  
                                  l10999 2F5A                                    _B5CON 000E70  
             __end_of_vscp_goActiveState 3B4E            ??_vscp_writeNicknamePermanent 000C  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                            i1_WriteTimer0 3C90  
                                  _EEADR 000FA9                          __end_of___lbmod 39EC  
                _vscp_handleDropNickname 38E6                                    _BSEL0 000DF8  
                                  u10000 1ADE                                    u10005 1AD4  
                                  u10024 1AF4                                    u10025 1AF2  
                                  u10115 3414                                    u10054 1B5E  
                                  u10055 1B5A                                    u11120 295C  
                                  u10064 1B76                                    u10065 1B72  
                                  u10084 1B8C                                    u11125 295A  
                                  u10085 1B8A                                    _T0CON 000FD5  
                                  u11090 2912                                    u10284 2656  
                                  u10444 36DE                                    u10285 2652  
                                  u10445 36DA                                    u11095 2910  
                                  u12224 1D56                                    u12225 1D52  
                                  u13204 2E82                                    u12244 1DC0  
                                  u13205 2E7E                                    u12245 1DBC  
                                  u12414 327A                                    u13054 1FAC  
                                  u12415 3276                                    u13055 1FA8  
                                  u13304 2B30                                    u13305 2B2C  
                                  u10775 2D7C                                    u10785 2D8C  
                                  u10795 2DAA                                    i1l141 0084  
                                  i1l142 0086                                    i1l143 00A6  
                                  i1l144 009A                                    i1l139 0060  
                                  i1l147 00A8                          sendCANFrame@dlc 003B  
                                  _MSEL0 000DF0                                    _MSEL1 000DF1  
                                  _MSEL2 000DF2                                    _IRXIF 007D27  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 3CD4               _vscp_readNicknamePermanent 3CCA  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                       ?_vscp_getSubzone 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                             _vscp_getGUID 3C58  
                                  doDM@i 00DC                            __CFG_WRTD$OFF 000000  
                         Read_b_eep@badd 0008                           __CFG_EBTRB$OFF 000000  
                 Write_b_eep@GIE_BIT_VAL 000B                             _vscp_getZone 3CAC  
                     vscp_writeAppReg@rv 00CB                                    _hours 0088  
              _vscp_getRegisterPagesUsed 3CF2                   __size_of_vscp_getEvent 002A  
                           _vscp_setGUID 3A38                                    tablat 000FF5  
                _vscp_getSubMinorVersion 3CF8                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 3A12  
                   _ECANSetOperationMode 3BD6                          __initialization 3ACC  
                           __end_of_doDM 2410                             __end_of_main 3264  
                           __end_of_init 38B2                         ?_vscp_readAppReg 0001  
                             _Read_b_eep 3C7E                  _interrupt_at_low_vector 0018  
                       __end_of_Busy_eep 3CEC                           doDM@class_mask 00D1  
                         __CFG_OSC$HSPLL 000000                        ??_ECANSendMessage 001A  
                         ?i1_WriteTimer0 0001                                   ??_doDM 00CC  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 001E  
                 ??_vscp_restoreDefaults 0010                                   ??_main 0052  
                                 ??_init 000D            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 000A                 ??_vscp_setManufacturerId 000D  
               _vscp_handleProtocolEvent 0EE6                            __activetblptr 000002  
                      __RegsToCANID@type 000B               ECANReceiveMessage@msgFlags 0011  
          doApplicationOneSecondWork@bOn 00CE                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                 __size_of_doActionPulse 01D0               ECANReceiveMessage@savedPtr 0012  
                                 _CANCON 000F6F                                   _EEDATA 000FA8  
                                 _EECON2 000FA7                                   _CIOCON 000F73  
                          doDM@type_mask 00D4                       vscp_writeStdReg@rv 0015  
                          ?_init_app_ram 0001                                   _MDSEL0 007BBE  
                                 _MDSEL1 007BBF                               _OpenTimer0 3B4E  
                                 i1l7501 0024                                   i1l7511 0052  
                                 i1l7503 002C                                   i1l7521 0078  
                                 i1l7513 005A                                   i1l7505 0038  
                                 i1l7523 0080                                   i1l7515 005E  
                                 i1l7507 003E                                   i1l7525 008A  
                                 i1l7517 0062                                   i1l7509 0042  
                                 i1l7527 0094                                   i1l7519 006E  
                                 i1l7529 00A2                          _init_app_eeprom 14FE  
                                 _RXB0IF 007D20                                   _RXB1IF 007D21  
                __end_of_doActionDisable 3738                                   _RXF1EN 006EA1  
                 ECANReceiveMessage@data 000F                   ECANReceiveMessage@mode 0016  
                 ECANReceiveMessage@temp 0017                        getVSCPFrame@pData 0022  
                      getVSCPFrame@pSize 0021                       _vscp_newNodeOnline 3970  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0011  
 vscp_handleProtocolEvent@page_save_1294 00D9                           getCANFrame@pid 001C  
                         __CFG_STVREN$ON 000000                                ??___lbmod 0009  
                          _vscp_getEvent 399A                                   _doWork 3CF0  
                       OpenTimer0@config 0008                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 000D                      vscp_writeAppReg@bOn 00CC  
        calculateSetFilterMask@rowfilter 003E               calculateSetFilterMask@mask 0036  
                    vscp_writeAppReg@reg 00CD               __end_of_vscp_setSegmentCRC 3C1A  
                    vscp_writeAppReg@val 0051                                   clear_0 3AD2  
                                 clear_1 3ADE                            ?_sendCANFrame 0037  
           vscp_handleProtocolEvent@byte 00E6                  __size_of_vscp_getUserID 0014  
                          _vscp_nickname 0090                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                    vscp_setSegmentCRC@crc 000C  
              ??_vscp_getSubMinorVersion 0008     __size_of_vscp_getBootLoaderAlgorithm 0002  
                         ??_init_app_ram 000A                     ??_vscp_newNodeOnline 004C  
                        ___lbmod@divisor 0008                          doActionToggle@i 00CB  
                             __accesstop 0060                  __end_of__initialization 3AE4  
                        ___lbmod@counter 000A            __size_of_vscp_getMinorVersion 0002  
                        doActionStatus@i 00CB                    __size_of_getVSCPFrame 0078  
                     _vscp_writeRegister 3AEE                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 0026                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001                            _doActionPulse 2640  
            __end_of_vscp_check_pstorage 3ACC                  __size_of_vscp_setUserID 001C  
                            ?_Read_b_eep 0008                          ??i1_WriteTimer0 0003  
                    ?_vscp_writeRegister 00CE                               __end_ofPL2 242A  
                             __end_ofPL4 0E60                               __end_ofPL6 0E70  
                             __end_ofPL8 1C5A                           ??_sendCANFrame 003E  
                             _doActionOn 1F96                  ?_calculateSetFilterMask 0001  
          calculateSetFilterMask@lastOID 0035               __end_of_vscp_getFamilyCode 3CCA  
                          ?__RegsToCANID 0008              __size_of_ECANReceiveMessage 01FA  
                     sendVSCPFrame@pData 0045               __end_of_vscp_getFamilyType 3CC0  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 00CE  
        __size_of_vscp_setManufacturerId 0026                 __end_of_vscp_writeAppReg 0E4C  
                 getVSCPFrame@pvscpclass 0027                  __end_of_init_app_eeprom 1960  
            __end_of_vscp_setControlByte 3C04                 __end_of_vscp_writeStdReg 307C  
          calculateSetFilterMask@rowmask 0031                       __RegsToCANID@Value 000E  
                   ??_vscp_writeRegister 0052          __end_of_vscp_handleDropNickname 3916  
                           _getVSCPFrame 35DA                               __pbssBANK0 0060  
                            ?_OpenTimer0 0001               __end_of_vscp_getBufferSize 3CF6  
                              ?_Busy_eep 0001                         ?_doActionDisable 000C  
                  vscp_writeRegister@reg 00CF                   ??_ECANSetOperationMode 0008  
     __size_of_vscp_getRegisterPagesUsed 0002                           ?_doActionPulse 000A  
        __end_of_vscp_getSubMinorVersion 3CFA                 ECANSetOperationMode@mode 0008  
                                _B0RXFUL 007107                                  _B1RXFUL 007187  
                   __ECANRxFilterHitInfo 0054                                  _B2RXFUL 007207  
                                _B3RXFUL 007287                                  _B4RXFUL 007307  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 000C  
                                _B5RXFUL 007387           __end_of_calculateSetFilterMask 1C1C  
                __size_of_doActionToggle 0120                         WriteTimer0@timer 000A  
                __size_of_doActionStatus 010C                                  _ECANCON 000F77  
                          ??_WriteTimer0 000A                           ??__RegsToCANID 000C  
                          ??_Write_b_eep 000B                    sendVSCPFrame@priority 0043  
                                _BRGCON1 000F70                                  _BRGCON2 000F71  
                                _BRGCON3 000F72           SendInformationEvent@eventClass 00C4  
                    vscp_writeStdReg@reg 0016             __end_of_vscp_doOneSecondWork 37F2  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 0041  
                          ??_doActionOff 00C6          __end_of_interrupt_at_low_vector 00B6  
               vscp_readStdReg@code_1267 0015                        sendCANFrame@pdata 003C  
                  _vscp_handleProbeState 331E                                  _RXB0CON 000F60  
                                _RXB1CON 000F50                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 3652               __end_of_vscp_getMatrixInfo 3B30  
                                _TXB0CON 000F40                                  _TXB1CON 000F30  
                                _TXB2CON 000F20                                  _RXFCON0 000DD4  
                                _RXFCON1 000DD5                    doActionStatus@dmflags 00C8  
                     _vscp_goActiveState 3B30                   __size_of_sendVSCPFrame 00B6  
           __end_of_SendInformationEvent 37A4             __end_of_vscp_getMajorVersion 3CFE  
                    __size_of_Read_b_eep 0012                       __size_of_vscp_init 0044  
                             ??_Busy_eep 0008                  SendInformationEvent@idx 0050  
                 _vscp_getManufacturerId 3C30                   _vscp_setManufacturerId 3A12  
                        _ECANSendMessage 29AE                      ?_vscp_goActiveState 0001  
                                __Hparam 0000                          ??_vscp_getEvent 002C  
                                __Lparam 0000                       _vscp_node_substate 0092  
             __end_of_vscp_getSegmentCRC 3CDE               ??_vscp_handleProtocolEvent 00D0  
                          ??_getCANFrame 001C                             doActionOff@i 00CA  
      __end_of_vscp_getRegisterPagesUsed 3CF4                 __size_of_vscp_getMDF_URL 0018  
                                ___lbmod 39C4                          getCANFrame@pdlc 001A  
                vscp_writeAppReg@val_682 00CA                                _FIFOEMPTY 007BA7  
                        __size_of_doWork 0002                             __psmallconst 0600  
                   __end_of_init_app_ram 3172                       _vscp_sendHeartBeat 39EC  
                                __pcinit 3ACC                           _vscp_deviceURL 0600  
                            ?_doActionOn 0051                                  __ramtop 0600  
                    __size_of_OpenTimer0 001E                                  __ptext0 3182  
                                __ptext1 3CF0                                  __ptext2 1CFC  
                                __ptext3 37A4                                  __ptext4 39EC  
                                __ptext5 3CA2                                  __ptext6 3CAC  
                                __ptext7 3CEC                                  __ptext8 2200  
                                __ptext9 2B18                           _vscp_getUserID 3C44  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 004C  
                       doActionDisable@i 0011                    vscp_writeStdReg@value 0010  
                    ?_vscp_sendHeartBeat 00C4                 ??_vscp_handleSetNickname 000D  
                                _minutes 0089                                  _seconds 008B  
                    __end_of_WriteTimer0 3C7E                         ?_init_app_eeprom 0001  
                    __end_of_Write_b_eep 38E6                        vscp_readAppReg@rv 000A  
                     vscp_getMDF_URL@idx 0009            vscp_handleProtocolEvent@bytes 00DD  
                   end_of_initialization 3AE4                      __end_of_doActionOff 331E  
           __end_of_vscp_handleHeartbeat 3874                 __size_of_vscp_getSubzone 000A  
                          __Lmediumconst 0000                     __end_of_sendCANFrame 3944  
              vscp_handleProtocolEvent@i 00EA                vscp_handleProtocolEvent@j 00EB  
              vscp_handleProtocolEvent@k 00E4                          ??_doActionPulse 000B  
                 doActionDisable@dmflags 000F                     ??_vscp_sendHeartBeat 004C  
                         _vscp_sendEvent 3A5E                        ECANSendMessage@id 0012  
                      ECANSendMessage@pb 001B                                  postdec2 000FDD  
                __size_of_ECANInitialize 0096                           _vscp_setUserID 3B6C  
                                postinc0 000FEE                                  postinc2 000FDE  
                 __end_of_vscp_deviceURL 0620      __end_of_vscp_writeNicknamePermanent 3C30  
            _vscp_writeNicknamePermanent 3C1A                       __ECANPointBuffer@b 000B  
                          _sendVSCPFrame 33D8                   __end_of_vscp_getUserID 3C58  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0078CB  
                      __end_of_vscp_init 3836                           _vscp_probe_cnt 0093  
                              _PORTCbits 000F82                      __end_of_getCANFrame 3970  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
               __size_of_vscp_readAppReg 00B6                         ___lbmod@dividend 0009  
                       doActionPulse@arg 000A                           _vscp_statuscnt 0058  
               __size_of_vscp_readStdReg 017E                         doActionPulse@val 000F  
                     _vscp_setSegmentCRC 3C04               vscp_handleProtocolEvent@cb 00E2  
                __end_of_ECANSendMessage 2B18                        vscp_readStdReg@rv 001B  
                            ___lbmod@rem 000B                            ?__CANIDToRegs 0008  
                            doDM@dmflags 00DB                     __end_of__RegsToCANID 2CFC  
                    __size_of_doActionOn 026A                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 3A84                               _vscp_error 3CEC  
                   _vscp_doOneSecondWork 37A4                       i1WriteTimer0@timer 0003  
                             _vscp_timer 0086                   __end_of_vscp_setUserID 3B88  
                 vscp_sendHeartBeat@zone 004C                             ??_Read_b_eep 000A  
                         ?_sendVSCPFrame 003F              doApplicationOneSecondWork@i 00D0  
                         _doActionToggle 2B18                           _doActionStatus 2E6A  
                        ?_vscp_getUserID 0001                           __end_of_doWork 3CF2  
           __end_of_vscp_getMinorVersion 3CFC                              _WriteTimer0 3C6C  
                   _SendInformationEvent 3738                     _vscp_getMajorVersion 3CFC  
                            _Write_b_eep 38B2                     ??_vscp_setSegmentCRC 000C  
                      ??_vscp_getMDF_URL 0008            ??_vscp_getBootLoaderAlgorithm 0008  
                            __end_ofPL10 1C72                              __end_ofPL20 1F56  
                            __end_ofPL12 1CA6                        ?_vscp_writeAppReg 0051  
                            __end_ofPL30 2E4C                              __end_ofPL22 2D0A  
                            __end_ofPL14 1CD6                              __end_ofPL40 2D30  
                            __end_ofPL32 1F72                              __end_ofPL24 1F64  
                            __end_ofPL16 2438                              __end_ofPL50 2D56  
                            __end_ofPL42 1CEA                              __end_ofPL34 14E6  
                            __end_ofPL26 2E3A                              __end_ofPL18 2E2A  
                            __end_ofPL60 0EB6                              __end_ofPL52 1F84  
                            __end_ofPL44 2E60                              __end_ofPL36 0E84  
                            __end_ofPL28 14D2                              __end_ofPL70 14F4  
                            __end_ofPL62 0EC6                              __end_ofPL54 1F96  
                            __end_ofPL46 29A2                              __end_ofPL38 2D1C  
                            __end_ofPL80 14FE                              __end_ofPL72 2640  
                            __end_ofPL64 3182                              __end_ofPL56 0E96  
                            __end_ofPL48 2D44                              __end_ofPL82 1CFC  
                            __end_ofPL74 2E6A                              __end_ofPL66 0ED6  
                            __end_ofPL58 0EA6                              __end_ofPL76 29AE  
                            __end_ofPL68 0EE6                              __end_ofPL78 1CF4  
                    start_initialization 3ACC                              _doActionOff 3264  
        __size_of_vscp_handleSetNickname 0024                       ??_vscp_writeAppReg 00C6  
                      ?_vscp_writeStdReg 0010                   _relay_protection_timer 0060  
                    __CFG_BOREN$BOACTIVE 000000              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 0008                       ??_vscp_writeStdReg 0011  
                     _vscp_getFamilyCode 3CC0                           ??__CANIDToRegs 000F  
                     _vscp_getFamilyType 3CB6                         doDM@class_filter 00CF  
                     __end_of_Read_b_eep 3C90                      sendVSCPFrame@nodeid 0042  
                      _vscp_readRegister 3BA4                          ?_vscp_sendEvent 0001  
vscp_handleProtocolEvent@bytes_this_time 00E1                    ?_vscp_doOneSecondWork 0001  
                      __size_of_Busy_eep 0006                    ECANReceiveMessage@ptr 0018  
                    ?_vscp_getFamilyCode 0008                       ?_vscp_readRegister 0001  
       __end_of_vscp_handleProtocolEvent 14BA                                _doDM$2152 00D5  
                        ?_vscp_setUserID 000C                                _doDM$2153 00D6  
                              _doDM$2154 00D7                                _doDM$2155 00D8  
                              _doDM$2156 00D9                                _doDM$2157 00DA  
                    ?_vscp_getFamilyType 0008                    __size_of_init_app_ram 00F6  
               ?_vscp_handleDropNickname 0001                   __end_of_doActionToggle 2C38  
                      ??_vscp_getSubzone 000A                   __end_of_doActionStatus 2F76  
               __end_of__ECANPointBuffer 36C8                        __CANIDToRegs@type 000E  
                            _getCANFrame 3944                                 ??_doWork 0008  
                     _vscp_getBufferSize 3CF4              vscp_handleProtocolEvent@len 00DE  
                         doActionOff@arg 0051              vscp_handleProtocolEvent@pos 00DC  
             __end_of_ECANReceiveMessage 2632                           doActionOff@val 00C9  
                    ??_vscp_readRegister 001D           __size_of_vscp_goBootloaderMode 001C  
                  ?_SendInformationEvent 00C4                    ?_vscp_getMajorVersion 0001  
                  __end_ofi1_WriteTimer0 3CA2            __end_of_vscp_goBootloaderMode 3BA4  
                   _vscp_handleHeartbeat 3836                       __end_of_OpenTimer0 3B6C  
    __size_of_doApplicationOneSecondWork 024C                      ?_vscp_getBufferSize 0001  
                         doActionPulse@i 0010             __size_of_vscp_check_pstorage 0024  
                   ??_vscp_getFamilyCode 000C                 ?_vscp_getSubMinorVersion 0001  
                            __pbssCOMRAM 0052                     ??_vscp_getFamilyType 000C  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 00B0  
                       _vscp_alarmstatus 0055                            ?_vscp_getZone 0001  
                  __size_of_sendCANFrame 002E                  ?_vscp_getManufacturerId 0001  
                ?_vscp_setManufacturerId 000C                            ?_vscp_setGUID 000C  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0012  
                      ??_vscp_readAppReg 000A                        sendVSCPFrame@size 0044  
              __end_of_vscp_readRegister 3BBE                        _relay_pulse_flags 008A  
                           _init_app_ram 307C                        _relay_pulse_timer 0070  
           __size_of_vscp_setControlByte 0016                 ?_interrupt_at_low_vector 0001  
                      ??_vscp_readStdReg 000C                     ??_vscp_getBufferSize 0008  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 3B10  
                 _vscp_handleSetNickname 3A84            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 00B0                          ?_doActionToggle 0051  
                         _ECANInitialize 3544                          ?_doActionStatus 0051  
               __size_of_doActionDisable 0070                                 ?___lbmod 0008  
                    ?_vscp_getMatrixInfo 0001                  calculateSetFilterMask@i 0043  
                calculateSetFilterMask@j 0042                          vscp_getGUID@idx 000A  
                            __pintcodelo 0018                             ??_doActionOn 00C6  
                  ?_vscp_handleHeartbeat 0001         vscp_handleProtocolEvent@len_1284 00E0  
                vscp_readStdReg@idx_1268 001A               vscp_setManufacturerId@data 000C  
                           _sendCANFrame 3916                              __smallconst 0600  
                      WriteTimer0@timer0 0008                       _vscp_getSegmentCRC 3CD4  
                         ??_vscp_getGUID 000A                           ??_vscp_getZone 000A  
                            doActionOn@i 00CB           __end_of_vscp_getManufacturerId 3C44  
         __end_of_vscp_setManufacturerId 3A38                    __size_of__RegsToCANID 00C4  
       vscp_handleProtocolEvent@pos_1283 00DF                          doDM@type_filter 00D3  
                         ??_vscp_setGUID 000D                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 0008                         _vscp_configtimer 0084  
                     doActionDisable@arg 000C                       doActionDisable@val 0010  
        SendInformationEvent@eventTypeId 00C5                   ??_vscp_doOneSecondWork 004D  
                 sendVSCPFrame@vscpclass 003F                                 _LATBbits 000F8A  
                   _vscp_getMinorVersion 3CFA                                 _LATCbits 000F8B  
                     __end_of_doActionOn 2200                   __end_of_ECANInitialize 35DA  
                               i1u790_20 002C                                 i1u790_21 002A  
                               i1u791_20 005A                                 i1u791_21 0058  
                               i1u792_20 006E                                 i1u792_21 006C  
                               i1u793_20 0078                                 i1u793_21 0076  
                               i1u794_20 0080                                 i1u794_21 007E  
                               i1u795_20 0094                                 i1u795_21 0092  
                               i1u796_20 00A2                                 i1u796_21 00A0  
                       ECANSendMessage@i 0034                         ECANSendMessage@j 002F  
                  __end_of_vscp_getEvent 39C4                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 002C  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 000A                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                   ??_SendInformationEvent 004B  
                               _RXM1SIDH 000F1C                   ??_vscp_getMajorVersion 0008  
                               _RXM1SIDL 000F1D               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 004C                       vscp_setUserID@data 000C  
                   __end_of__CANIDToRegs 2E16                             __RegsToCANID 2C38  
                     _vscp_probe_address 0057                          Write_b_eep@badd 0008  
                        Write_b_eep@bdat 000A                       doActionOff@dmflags 00C8  
            __size_of_vscp_goActiveState 001E                      getVSCPFrame@pNodeId 001F  
                              _vscp_init 37F2                                _vscp_imsg 0095  
                              _vscp_hour 008D                                _vscp_omsg 00A3  
                       vscp_setGUID@data 000C        __size_of_vscp_handleProtocolEvent 05D4  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
               SendInformationEvent@data 004D     __size_of_vscp_writeNicknamePermanent 0016  
     __end_of_doApplicationOneSecondWork 1F48               _doApplicationOneSecondWork 1CFC  
                       _vscp_page_select 0052               __size_of_vscp_readRegister 001A  
                      _measurement_clock 0080                                 _Busy_eep 3CE6  
                  ?_vscp_getMinorVersion 0001                 __size_of_init_app_eeprom 0462  
           __end_of_vscp_restoreDefaults 3CE6                               _EECON1bits 000FA6  
                        ?_ECANInitialize 0001                 ??_calculateSetFilterMask 0012  
                               __Hrparam 0000                     ECANReceiveMessage@id 0014  
            __size_of_vscp_sendHeartBeat 0026                         ??_vscp_getUserID 000A  
                        _vscp_getMDF_URL 3BBE                                 __Lrparam 0000  
                  __end_of_doActionPulse 2810                         __CANIDToRegs@val 000A  
                       __CANIDToRegs@ptr 0008                            doActionOn@arg 0051  
                          doActionOn@val 00CA                         _vscp_initledfunc 0056  
                       __size_of___lbmod 0028                   ??_vscp_handleHeartbeat 000D  
                       getCANFrame@flags 001D                             ?_WriteTimer0 0008  
                       getCANFrame@pdata 001B                             ?_Write_b_eep 0008  
                      ??_doActionDisable 000D               vscp_writeAppReg@bInfoEvent 00C9  
                             ?_vscp_init 0001                             ?_doActionOff 0051  
                               __ptext10 36C8                                 __ptext11 2E6A  
                               __ptext20 14FE                                 __ptext12 2640  
                               __ptext21 3B6C                                 __ptext13 1F96  
                               __ptext30 3CB6                                 __ptext22 3A12  
                               __ptext14 3264                                 __ptext31 3CC0  
                               __ptext23 3A38                                 __ptext15 0EE6  
                               __ptext40 3CFC                                 __ptext32 3CF4  
                               __ptext24 0622                                 __ptext16 39C4  
                               __ptext41 3970                                 __ptext33 3CF6  
                               __ptext25 1960                                 __ptext17 3AEE  
                               __ptext50 3B30                                 __ptext42 38E6  
                               __ptext34 3C30                                 __ptext26 3738  
                               __ptext18 2F76                                 __ptext51 3A5E  
                               __ptext43 37F2                                 __ptext35 3C44  
                               __ptext27 3BA4                                 __ptext19 3CDE  
                               __ptext60 2C38                                 __ptext52 33D8  
                               __ptext44 3CCA                                 __ptext36 3BBE  
                               __ptext28 2810                                 __ptext61 3652  
                               __ptext53 3916                                 __ptext45 3A84  
                               __ptext37 3C58                                 __ptext29 3CF2  
                               __ptext70 3544                                 __ptext62 3AA8  
                               __ptext54 29AE                                 __ptext46 3836  
                               __ptext38 3CF8                                 __ptext71 3BD6  
                               __ptext63 3BEE                                 __ptext55 2D56  
                               __ptext47 3B10                                 __ptext39 3CFA  
                               __ptext72 3B4E                                 __ptext64 3C04  
                               __ptext56 399A                                 __ptext48 3B88  
                               __ptext73 307C                                 __ptext65 3CD4  
                               __ptext57 35DA                                 __ptext49 331E  
                               __ptext74 3C6C                                 __ptext66 3C1A  
                               __ptext58 3944                                 __ptext75 3C7E  
                               __ptext67 38B2                                 __ptext59 2438  
                               __ptext76 348E                                 __ptext68 3CE6  
                               __ptext69 3874                                 __ptext78 3C90  
         vscp_goBootloaderMode@algorithm 000C                vscp_sendHeartBeat@subzone 00C4  
                          ?_getVSCPFrame 001E                         ??_vscp_sendEvent 004B  
                        _vscp_getSubzone 3CA2             calculateSetFilterMask@filter 003A  
                       ??_vscp_setUserID 000D                            __size_of_doDM 0210  
                          __size_of_main 00E2                            __size_of_init 003E  
              __size_of_vscp_writeAppReg 082A                      _vscp_check_pstorage 3AA8  
                          init_app_ram@i 000C           vscp_handleProtocolEvent@i_1282 00E5  
         vscp_handleProtocolEvent@i_1285 00E9           vscp_handleProtocolEvent@i_1293 00E3  
                   __end_of_vscp_getGUID 3C6C                __size_of_vscp_writeStdReg 0106  
                    ECANSendMessage@data 0016                 ECANSendMessage@tempBSEL0 0030  
                           ?_getCANFrame 001A                      ECANSendMessage@mode 002D  
                   __end_of_vscp_getZone 3CB6                      ECANSendMessage@temp 0033  
                      ?__ECANPointBuffer 0008                        doActionOn@dmflags 00C9  
                      vscp_setUserID@idx 000D                     __end_of_vscp_setGUID 3A5E  
                     vscp_readAppReg@reg 000B                       ??__ECANPointBuffer 000B  
         vscp_handleProtocolEvent@offset 00DB                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 000D                         init_app_eeprom@i 000E  
                       init_app_eeprom@j 000F                      _vscp_setControlByte 3BEE  
            __size_of_vscp_setSegmentCRC 0016                          _vscp_readAppReg 348E  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F50  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
           ??_vscp_readNicknamePermanent 000A                      ECANReceiveMessage@i 0015  
                        _vscp_guid_reset 008C                          _vscp_readStdReg 2810  
           vscp_handleDropNickname@bytes 000D               __end_of_vscp_newNodeOnline 399A  
                     _ECANReceiveMessage 2438                           ??_getVSCPFrame 0023  
                        _vscp_initbtncnt 008E                          sendVSCPFrame@id 0047  
                               intlevel1 0000                   ??_vscp_getMinorVersion 0008  
                vscp_getMatrixInfo@pData 0001                  __end_of_vscp_getMDF_URL 3BD6  
                   ?_vscp_setControlByte 0001                      ?_ECANReceiveMessage 000F  
                ?_vscp_handleSetNickname 0001                         ??_doActionToggle 00C6  
       __size_of_vscp_getSubMinorVersion 0002                         ??_doActionStatus 00C6  
                        _vscp_node_state 0091                             ??_vscp_error 0008  
                ECANSendMessage@msgFlags 0019                      vscp_getMatrixInfo@i 0008  
        __size_of_calculateSetFilterMask 02BC                  vscp_setControlByte@ctrl 000C  
                     ECANSendMessage@ptr 0035                        ??_init_app_eeprom 000C  
                  __size_of__CANIDToRegs 00C0      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 3CF8              _vscp_getBootLoaderAlgorithm 3CF6  
       __size_of_interrupt_at_low_vector 009E                   ECANSendMessage@dataLen 0018  
                    __ECANPointBuffer@pt 000C                     ??_ECANReceiveMessage 0012  
                  ??_vscp_check_pstorage 000D                   ECANSendMessage@buffers 002E  
                  _vscp_goBootloaderMode 3B88             __end_of_ECANSetOperationMode 3BEE  
                   _vscp_restoreDefaults 3CDE              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 000A                  __end_of_vscp_getSubzone 3CAC  
            __size_of_vscp_getFamilyType 000A                               _RXM1EXIDEN 0078EB  
             __end_of_vscp_writeRegister 3B10                       __end_of_vscp_error 3CF0  
                 ECANSendMessage@tempPtr 0031           __end_of_vscp_handleSetNickname 3AA8  
     vscp_handleProtocolEvent@bytes_1289 00E7                    ??_vscp_setControlByte 000C  
                   vscp_readRegister@reg 001D             ??_doApplicationOneSecondWork 00CB  
                           __CANIDToRegs 2D56                   __size_ofi1_WriteTimer0 0012  
      vscp_handleProtocolEvent@page_save 00D7              __size_of_vscp_getBufferSize 0002  
      doApplicationOneSecondWork@ctrlreg 00CF                 __size_of_ECANSendMessage 016A  
                      doActionToggle@bOn 00CA                        doActionToggle@arg 0051  
