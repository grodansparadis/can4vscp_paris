

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Tue Mar 24 10:25:06 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	text74,global,reloc=2,class=CODE,delta=1
    86                           	psect	text75,global,reloc=2,class=CODE,delta=1
    87                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    88                           	psect	text77,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    91                           	psect	pa_nodes,global,class=CODE,delta=1
    92  0000                     tblptrh	equ	0xFF7
    93                           tblptrl	equ	0xFF6
    94                           tablat	equ	0xFF5
    95                           prodh	equ	0xFF4
    96                           prodl	equ	0xFF3
    97                           intcon	equ	0xFF2
    98                           wreg	equ	0xFE8
    99                           indf1	equ	0xFE7
   100                           fsr1h	equ	0xFE2
   101                           fsr1l	equ	0xFE1
   102                           indf2	equ	0xFDF
   103                           postinc2	equ	0xFDE
   104                           postdec2	equ	0xFDD
   105                           plusw2	equ	0xFDB
   106                           fsr2h	equ	0xFDA
   107                           fsr2l	equ	0xFD9
   108                           status	equ	0xFD8
   109                           
   110                           	psect	smallconst
   111  000600                     __psmallconst:
   112                           	opt stack 0
   113  000600                     _vscp_deviceURL:
   114                           	opt stack 0
   115  000600  77                 	db	119
   116  000601  77                 	db	119
   117  000602  77                 	db	119
   118  000603  2E                 	db	46
   119  000604  65                 	db	101
   120  000605  75                 	db	117
   121  000606  72                 	db	114
   122  000607  6F                 	db	111
   123  000608  73                 	db	115
   124  000609  6F                 	db	111
   125  00060A  75                 	db	117
   126  00060B  72                 	db	114
   127  00060C  63                 	db	99
   128  00060D  65                 	db	101
   129  00060E  2E                 	db	46
   130  00060F  73                 	db	115
   131  000610  65                 	db	101
   132  000611  2F                 	db	47
   133  000612  70                 	db	112
   134  000613  61                 	db	97
   135  000614  72                 	db	114
   136  000615  69                 	db	105
   137  000616  73                 	db	115
   138  000617  5F                 	db	95
   139  000618  30                 	db	48
   140  000619  31                 	db	49
   141  00061A  30                 	db	48
   142  00061B  2E                 	db	46
   143  00061C  78                 	db	120
   144  00061D  6D                 	db	109
   145  00061E  6C                 	db	108
   146  00061F  00                 	db	0
   147  000620                     __end_of_vscp_deviceURL:
   148                           	opt stack 0
   149  0000                     _BRGCON1	set	3952
   150  0000                     _BRGCON2	set	3953
   151  0000                     _BRGCON3	set	3954
   152  0000                     _BSEL0	set	3576
   153  0000                     _CANCON	set	3951
   154  0000                     _CIOCON	set	3955
   155  0000                     _ECANCON	set	3959
   156  0000                     _EEADR	set	4009
   157  0000                     _EECON1bits	set	4006
   158  0000                     _EECON2	set	4007
   159  0000                     _EEDATA	set	4008
   160  0000                     _INTCONbits	set	4082
   161  0000                     _LATBbits	set	3978
   162  0000                     _LATCbits	set	3979
   163  0000                     _MSEL0	set	3568
   164  0000                     _MSEL1	set	3569
   165  0000                     _MSEL2	set	3570
   166  0000                     _PIR2bits	set	4001
   167  0000                     _PORTA	set	3968
   168  0000                     _PORTB	set	3969
   169  0000                     _PORTC	set	3970
   170  0000                     _PORTCbits	set	3970
   171  0000                     _RXB1CONbits	set	3920
   172  0000                     _RXF0EIDH	set	3842
   173  0000                     _RXF0EIDL	set	3843
   174  0000                     _RXF0SIDH	set	3840
   175  0000                     _RXF0SIDL	set	3841
   176  0000                     _RXF1EIDH	set	3846
   177  0000                     _RXF1EIDL	set	3847
   178  0000                     _RXF1SIDL	set	3845
   179  0000                     _RXFBCON0	set	3552
   180  0000                     _RXFBCON1	set	3553
   181  0000                     _RXFBCON2	set	3554
   182  0000                     _RXFBCON3	set	3555
   183  0000                     _RXFBCON4	set	3556
   184  0000                     _RXFBCON5	set	3557
   185  0000                     _RXFBCON6	set	3558
   186  0000                     _RXFBCON7	set	3559
   187  0000                     _RXFCON0	set	3540
   188  0000                     _RXFCON1	set	3541
   189  0000                     _RXM0EIDH	set	3866
   190  0000                     _RXM0EIDL	set	3867
   191  0000                     _RXM0SIDH	set	3864
   192  0000                     _RXM0SIDL	set	3865
   193  0000                     _RXM1EIDH	set	3870
   194  0000                     _RXM1EIDL	set	3871
   195  0000                     _RXM1SIDL	set	3869
   196  0000                     _T0CON	set	4053
   197  0000                     _T0CONbits	set	4053
   198  0000                     _TMR0H	set	4055
   199  0000                     _TMR0L	set	4054
   200  0000                     _TRISA	set	3986
   201  0000                     _TRISB	set	3987
   202  0000                     _TRISC	set	3988
   203  0000                     _B0RXFUL	set	28935
   204  0000                     _B0TXEN	set	28610
   205  0000                     _B1RXFUL	set	29063
   206  0000                     _B1TXEN	set	28611
   207  0000                     _B2RXFUL	set	29191
   208  0000                     _B2TXEN	set	28612
   209  0000                     _B3RXFUL	set	29319
   210  0000                     _B3TXEN	set	28613
   211  0000                     _B4RXFUL	set	29447
   212  0000                     _B4TXEN	set	28614
   213  0000                     _B5RXFUL	set	29575
   214  0000                     _B5TXEN	set	28615
   215  0000                     _FIFOEMPTY	set	31655
   216  0000                     _IRXIF	set	32039
   217  0000                     _MDSEL0	set	31678
   218  0000                     _MDSEL1	set	31679
   219  0000                     _RXB0FILHIT0	set	31488
   220  0000                     _RXB0FUL	set	31495
   221  0000                     _RXB0IF	set	32032
   222  0000                     _RXB0OVFL	set	31655
   223  0000                     _RXB1IF	set	32033
   224  0000                     _RXB1OVFL	set	31654
   225  0000                     _RXF1EN	set	28321
   226  0000                     _RXM0EXIDM	set	30923
   227  0000                     _RXM1EXIDEN	set	30955
   228  0000                     _B0CON	set	3616
   229  0000                     _B1CON	set	3632
   230  0000                     _B2CON	set	3648
   231  0000                     _B3CON	set	3664
   232  0000                     _B4CON	set	3680
   233  0000                     _B5CON	set	3696
   234  0000                     _RXB0CON	set	3936
   235  0000                     _RXB1CON	set	3920
   236  0000                     _RXF1SIDH	set	3844
   237  0000                     _RXM1SIDH	set	3868
   238  0000                     _TXB0CON	set	3904
   239  0000                     _TXB1CON	set	3888
   240  0000                     _TXB2CON	set	3872
   241                           
   242                           ; #config settings
   243  000620  00                 	db	0	; dummy byte at the end
   244  0000                     tblptrh	equ	0xFF7
   245                           tblptrl	equ	0xFF6
   246                           tablat	equ	0xFF5
   247                           prodh	equ	0xFF4
   248                           prodl	equ	0xFF3
   249                           intcon	equ	0xFF2
   250                           wreg	equ	0xFE8
   251                           indf1	equ	0xFE7
   252                           fsr1h	equ	0xFE2
   253                           fsr1l	equ	0xFE1
   254                           indf2	equ	0xFDF
   255                           postinc2	equ	0xFDE
   256                           postdec2	equ	0xFDD
   257                           plusw2	equ	0xFDB
   258                           fsr2h	equ	0xFDA
   259                           fsr2l	equ	0xFD9
   260                           status	equ	0xFD8
   261                           
   262                           	psect	cinit
   263  0038F6                     __pcinit:
   264                           	opt stack 0
   265  0038F6                     start_initialization:
   266                           	opt stack 0
   267  0038F6                     __initialization:
   268                           	opt stack 0
   269                           
   270                           ; Clear objects allocated to BANK0 (81 bytes)
   271  0038F6  EE00  F060         	lfsr	0,__pbssBANK0
   272  0038FA  0E51               	movlw	81
   273  0038FC                     clear_0:
   274  0038FC  6AEE               	clrf	postinc0,c
   275  0038FE  06E8               	decf	wreg,f,c
   276  003900  E1FD               	bnz	clear_0
   277                           
   278                           ; Clear objects allocated to COMRAM (7 bytes)
   279  003902  EE00  F052         	lfsr	0,__pbssCOMRAM
   280  003906  0E07               	movlw	7
   281  003908                     clear_1:
   282  003908  6AEE               	clrf	postinc0,c
   283  00390A  06E8               	decf	wreg,f,c
   284  00390C  E1FD               	bnz	clear_1
   285  00390E                     end_of_initialization:
   286                           	opt stack 0
   287  00390E                     __end_of__initialization:
   288                           	opt stack 0
   289  00390E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   290  003910  6EF8               	movwf	tblptru,c
   291  003912  0100               	movlb	0
   292  003914  EFFD  F017         	goto	_main	;jump to C main() function
   293                           tblptru	equ	0xFF8
   294                           tblptrh	equ	0xFF7
   295                           tblptrl	equ	0xFF6
   296                           tablat	equ	0xFF5
   297                           prodh	equ	0xFF4
   298                           prodl	equ	0xFF3
   299                           intcon	equ	0xFF2
   300                           postinc0	equ	0xFEE
   301                           wreg	equ	0xFE8
   302                           indf1	equ	0xFE7
   303                           fsr1h	equ	0xFE2
   304                           fsr1l	equ	0xFE1
   305                           indf2	equ	0xFDF
   306                           postinc2	equ	0xFDE
   307                           postdec2	equ	0xFDD
   308                           plusw2	equ	0xFDB
   309                           fsr2h	equ	0xFDA
   310                           fsr2l	equ	0xFD9
   311                           status	equ	0xFD8
   312                           
   313                           	psect	bssCOMRAM
   314  000052                     __pbssCOMRAM:
   315                           	opt stack 0
   316  000052                     _vscp_page_select:
   317                           	opt stack 0
   318  000052                     	ds	2
   319  000054                     __ECANRxFilterHitInfo:
   320                           	opt stack 0
   321  000054                     	ds	1
   322  000055                     _sendTimer:
   323                           	opt stack 0
   324  000055                     	ds	1
   325  000056                     _vscp_initledfunc:
   326                           	opt stack 0
   327  000056                     	ds	1
   328  000057                     _vscp_probe_address:
   329                           	opt stack 0
   330  000057                     	ds	1
   331  000058                     _vscp_statuscnt:
   332                           	opt stack 0
   333  000058                     	ds	1
   334                           tblptru	equ	0xFF8
   335                           tblptrh	equ	0xFF7
   336                           tblptrl	equ	0xFF6
   337                           tablat	equ	0xFF5
   338                           prodh	equ	0xFF4
   339                           prodl	equ	0xFF3
   340                           intcon	equ	0xFF2
   341                           postinc0	equ	0xFEE
   342                           wreg	equ	0xFE8
   343                           indf1	equ	0xFE7
   344                           fsr1h	equ	0xFE2
   345                           fsr1l	equ	0xFE1
   346                           indf2	equ	0xFDF
   347                           postinc2	equ	0xFDE
   348                           postdec2	equ	0xFDD
   349                           plusw2	equ	0xFDB
   350                           fsr2h	equ	0xFDA
   351                           fsr2l	equ	0xFD9
   352                           status	equ	0xFD8
   353                           
   354                           	psect	bssBANK0
   355  000060                     __pbssBANK0:
   356                           	opt stack 0
   357  000060                     _relay_protection_timer:
   358                           	opt stack 0
   359  000060                     	ds	16
   360  000070                     _relay_pulse_timer:
   361                           	opt stack 0
   362  000070                     	ds	16
   363  000080                     _measurement_clock:
   364                           	opt stack 0
   365  000080                     	ds	4
   366  000084                     _vscp_configtimer:
   367                           	opt stack 0
   368  000084                     	ds	2
   369  000086                     _vscp_timer:
   370                           	opt stack 0
   371  000086                     	ds	2
   372  000088                     _hours:
   373                           	opt stack 0
   374  000088                     	ds	1
   375  000089                     _minutes:
   376                           	opt stack 0
   377  000089                     	ds	1
   378  00008A                     _relay_pulse_flags:
   379                           	opt stack 0
   380  00008A                     	ds	1
   381  00008B                     _seconds:
   382                           	opt stack 0
   383  00008B                     	ds	1
   384  00008C                     _vscp_alarmstatus:
   385                           	opt stack 0
   386  00008C                     	ds	1
   387  00008D                     _vscp_guid_reset:
   388                           	opt stack 0
   389  00008D                     	ds	1
   390  00008E                     _vscp_hour:
   391                           	opt stack 0
   392  00008E                     	ds	1
   393  00008F                     _vscp_initbtncnt:
   394                           	opt stack 0
   395  00008F                     	ds	1
   396  000090                     _vscp_minute:
   397                           	opt stack 0
   398  000090                     	ds	1
   399  000091                     _vscp_nickname:
   400                           	opt stack 0
   401  000091                     	ds	1
   402  000092                     _vscp_node_state:
   403                           	opt stack 0
   404  000092                     	ds	1
   405  000093                     _vscp_node_substate:
   406                           	opt stack 0
   407  000093                     	ds	1
   408  000094                     _vscp_probe_cnt:
   409                           	opt stack 0
   410  000094                     	ds	1
   411  000095                     _vscp_second:
   412                           	opt stack 0
   413  000095                     	ds	1
   414  000096                     _vscp_imsg:
   415                           	opt stack 0
   416  000096                     	ds	14
   417  0000A4                     _vscp_omsg:
   418                           	opt stack 0
   419  0000A4                     	ds	13
   420                           tblptru	equ	0xFF8
   421                           tblptrh	equ	0xFF7
   422                           tblptrl	equ	0xFF6
   423                           tablat	equ	0xFF5
   424                           prodh	equ	0xFF4
   425                           prodl	equ	0xFF3
   426                           intcon	equ	0xFF2
   427                           postinc0	equ	0xFEE
   428                           wreg	equ	0xFE8
   429                           indf1	equ	0xFE7
   430                           fsr1h	equ	0xFE2
   431                           fsr1l	equ	0xFE1
   432                           indf2	equ	0xFDF
   433                           postinc2	equ	0xFDE
   434                           postdec2	equ	0xFDD
   435                           plusw2	equ	0xFDB
   436                           fsr2h	equ	0xFDA
   437                           fsr2l	equ	0xFD9
   438                           status	equ	0xFD8
   439                           
   440                           	psect	cstackBANK0
   441  0000B1                     __pcstackBANK0:
   442                           	opt stack 0
   443  0000B1                     ??_sendVSCPFrame:
   444                           
   445                           ; 0 bytes @ 0x0
   446  0000B1                     	ds	20
   447  0000C5                     ?_SendInformationEvent:
   448                           	opt stack 0
   449  0000C5                     ?_vscp_sendHeartBeat:
   450                           	opt stack 0
   451  0000C5                     SendInformationEvent@eventClass:
   452                           	opt stack 0
   453  0000C5                     vscp_sendHeartBeat@subzone:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x14
   457  0000C5                     	ds	1
   458  0000C6                     SendInformationEvent@eventTypeId:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0x15
   462  0000C6                     	ds	1
   463  0000C7                     ??_doActionOff:
   464  0000C7                     ??_doActionOn:
   465  0000C7                     ??_doActionStatus:
   466  0000C7                     ??_doActionToggle:
   467  0000C7                     ??_vscp_writeAppReg:
   468                           
   469                           ; 0 bytes @ 0x16
   470  0000C7                     	ds	2
   471  0000C9                     doActionOff@dmflags:
   472                           	opt stack 0
   473  0000C9                     doActionStatus@dmflags:
   474                           	opt stack 0
   475  0000C9                     doActionToggle@dmflags:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x18
   479  0000C9                     	ds	1
   480  0000CA                     vscp_writeAppReg@bInfoEvent:
   481                           	opt stack 0
   482  0000CA                     doActionOn@dmflags:
   483                           	opt stack 0
   484  0000CA                     doActionOff@val:
   485                           	opt stack 0
   486  0000CA                     doActionStatus@bOn:
   487                           	opt stack 0
   488  0000CA                     doActionToggle@val:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x19
   492  0000CA                     	ds	1
   493  0000CB                     vscp_writeAppReg@val_678:
   494                           	opt stack 0
   495  0000CB                     doActionOn@val:
   496                           	opt stack 0
   497  0000CB                     doActionOff@i:
   498                           	opt stack 0
   499  0000CB                     doActionStatus@val:
   500                           	opt stack 0
   501  0000CB                     doActionToggle@bOn:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x1A
   505  0000CB                     	ds	1
   506  0000CC                     ??_doApplicationOneSecondWork:
   507  0000CC                     vscp_writeAppReg@bOn:
   508                           	opt stack 0
   509  0000CC                     doActionOn@i:
   510                           	opt stack 0
   511  0000CC                     doActionStatus@i:
   512                           	opt stack 0
   513  0000CC                     doActionToggle@i:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x1B
   517  0000CC                     	ds	1
   518  0000CD                     ??_doDM:
   519  0000CD                     vscp_writeAppReg@rv:
   520                           	opt stack 0
   521                           
   522                           ; 1 bytes @ 0x1C
   523  0000CD                     	ds	1
   524  0000CE                     vscp_writeAppReg@reg:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x1D
   528  0000CE                     	ds	1
   529  0000CF                     ?_vscp_writeRegister:
   530                           	opt stack 0
   531  0000CF                     doApplicationOneSecondWork@bOn:
   532                           	opt stack 0
   533  0000CF                     vscp_writeRegister@value:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x1E
   537  0000CF                     	ds	1
   538  0000D0                     doApplicationOneSecondWork@ctrlreg:
   539                           	opt stack 0
   540  0000D0                     vscp_writeRegister@reg:
   541                           	opt stack 0
   542  0000D0                     doDM@class_filter:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x1F
   546  0000D0                     	ds	1
   547  0000D1                     ??_vscp_handleProtocolEvent:
   548  0000D1                     doApplicationOneSecondWork@i:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x20
   552  0000D1                     	ds	1
   553  0000D2                     doDM@class_mask:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x21
   557  0000D2                     	ds	2
   558  0000D4                     doDM@type_filter:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x23
   562  0000D4                     	ds	1
   563  0000D5                     doDM@type_mask:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0x24
   567  0000D5                     	ds	1
   568  0000D6                     _doDM$2146:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x25
   572  0000D6                     	ds	1
   573  0000D7                     _doDM$2147:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x26
   577  0000D7                     	ds	1
   578  0000D8                     _doDM$2148:
   579                           	opt stack 0
   580  0000D8                     vscp_handleProtocolEvent@page_save:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x27
   584  0000D8                     	ds	1
   585  0000D9                     _doDM$2149:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x28
   589  0000D9                     	ds	1
   590  0000DA                     _doDM$2150:
   591                           	opt stack 0
   592  0000DA                     vscp_handleProtocolEvent@page_save_1290:
   593                           	opt stack 0
   594                           
   595                           ; 2 bytes @ 0x29
   596  0000DA                     	ds	1
   597  0000DB                     _doDM$2151:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x2A
   601  0000DB                     	ds	1
   602  0000DC                     doDM@dmflags:
   603                           	opt stack 0
   604  0000DC                     vscp_handleProtocolEvent@offset:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x2B
   608  0000DC                     	ds	1
   609  0000DD                     doDM@i:
   610                           	opt stack 0
   611  0000DD                     vscp_handleProtocolEvent@pos:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x2C
   615  0000DD                     	ds	1
   616  0000DE                     vscp_handleProtocolEvent@bytes:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x2D
   620  0000DE                     	ds	1
   621  0000DF                     vscp_handleProtocolEvent@len:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x2E
   625  0000DF                     	ds	1
   626  0000E0                     vscp_handleProtocolEvent@pos_1279:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x2F
   630  0000E0                     	ds	1
   631  0000E1                     vscp_handleProtocolEvent@len_1280:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x30
   635  0000E1                     	ds	1
   636  0000E2                     vscp_handleProtocolEvent@bytes_this_time:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x31
   640  0000E2                     	ds	1
   641  0000E3                     vscp_handleProtocolEvent@cb:
   642                           	opt stack 0
   643                           
   644                           ; 1 bytes @ 0x32
   645  0000E3                     	ds	1
   646  0000E4                     vscp_handleProtocolEvent@i_1289:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x33
   650  0000E4                     	ds	1
   651  0000E5                     vscp_handleProtocolEvent@k:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0x34
   655  0000E5                     	ds	1
   656  0000E6                     vscp_handleProtocolEvent@bytes_1286:
   657                           	opt stack 0
   658                           
   659                           ; 1 bytes @ 0x35
   660  0000E6                     	ds	1
   661  0000E7                     vscp_handleProtocolEvent@i_1278:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0x36
   665  0000E7                     	ds	1
   666  0000E8                     vscp_handleProtocolEvent@byte:
   667                           	opt stack 0
   668                           
   669                           ; 1 bytes @ 0x37
   670  0000E8                     	ds	1
   671  0000E9                     vscp_handleProtocolEvent@i_1281:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x38
   675  0000E9                     	ds	1
   676  0000EA                     vscp_handleProtocolEvent@i:
   677                           	opt stack 0
   678                           
   679                           ; 1 bytes @ 0x39
   680  0000EA                     	ds	1
   681  0000EB                     vscp_handleProtocolEvent@j:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x3A
   685  0000EB                     	ds	1
   686                           tblptru	equ	0xFF8
   687                           tblptrh	equ	0xFF7
   688                           tblptrl	equ	0xFF6
   689                           tablat	equ	0xFF5
   690                           prodh	equ	0xFF4
   691                           prodl	equ	0xFF3
   692                           intcon	equ	0xFF2
   693                           postinc0	equ	0xFEE
   694                           wreg	equ	0xFE8
   695                           indf1	equ	0xFE7
   696                           fsr1h	equ	0xFE2
   697                           fsr1l	equ	0xFE1
   698                           indf2	equ	0xFDF
   699                           postinc2	equ	0xFDE
   700                           postdec2	equ	0xFDD
   701                           plusw2	equ	0xFDB
   702                           fsr2h	equ	0xFDA
   703                           fsr2l	equ	0xFD9
   704                           status	equ	0xFD8
   705                           
   706                           	psect	cstackCOMRAM
   707  000001                     __pcstackCOMRAM:
   708                           	opt stack 0
   709  000001                     ?i1_WriteTimer0:
   710                           	opt stack 0
   711  000001                     i1WriteTimer0@timer0:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x0
   715  000001                     	ds	2
   716  000003                     i1WriteTimer0@timer:
   717                           	opt stack 0
   718                           
   719                           ; 2 bytes @ 0x2
   720  000003                     	ds	2
   721  000005                     ??_interrupt_at_low_vector:
   722                           
   723                           ; 0 bytes @ 0x4
   724  000005                     	ds	3
   725  000008                     ?_WriteTimer0:
   726                           	opt stack 0
   727  000008                     ?_writeEEPROM:
   728                           	opt stack 0
   729  000008                     ?__CANIDToRegs:
   730                           	opt stack 0
   731  000008                     ?__RegsToCANID:
   732                           	opt stack 0
   733  000008                     ??_vscp_getMDF_URL:
   734  000008                     ?_readEEPROM:
   735                           	opt stack 0
   736  000008                     ?___lbmod:
   737                           	opt stack 0
   738  000008                     ?__ECANPointBuffer:
   739                           	opt stack 0
   740  000008                     ?_vscp_getFamilyCode:
   741                           	opt stack 0
   742  000008                     ?_vscp_getFamilyType:
   743                           	opt stack 0
   744  000008                     vscp_getMatrixInfo@i:
   745                           	opt stack 0
   746  000008                     ECANSetOperationMode@mode:
   747                           	opt stack 0
   748  000008                     OpenTimer0@config:
   749                           	opt stack 0
   750  000008                     ___lbmod@divisor:
   751                           	opt stack 0
   752  000008                     __CANIDToRegs@ptr:
   753                           	opt stack 0
   754  000008                     __RegsToCANID@ptr:
   755                           	opt stack 0
   756  000008                     writeEEPROM@address:
   757                           	opt stack 0
   758  000008                     readEEPROM@address:
   759                           	opt stack 0
   760  000008                     WriteTimer0@timer0:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x7
   764  000008                     	ds	1
   765  000009                     vscp_getMDF_URL@idx:
   766                           	opt stack 0
   767  000009                     ___lbmod@dividend:
   768                           	opt stack 0
   769                           
   770                           ; 1 bytes @ 0x8
   771  000009                     	ds	1
   772  00000A                     __RegsToCANID@val:
   773                           	opt stack 0
   774  00000A                     writeEEPROM@data:
   775                           	opt stack 0
   776  00000A                     readEEPROM@data:
   777                           	opt stack 0
   778  00000A                     ___lbmod@counter:
   779                           	opt stack 0
   780  00000A                     WriteTimer0@timer:
   781                           	opt stack 0
   782  00000A                     __CANIDToRegs@val:
   783                           	opt stack 0
   784                           
   785                           ; 4 bytes @ 0x9
   786  00000A                     	ds	1
   787  00000B                     ??_init_app_eeprom:
   788  00000B                     ??_init_app_ram:
   789  00000B                     ?_doActionPulse:
   790                           	opt stack 0
   791  00000B                     ?_doActionDisable:
   792                           	opt stack 0
   793  00000B                     ?_vscp_setGUID:
   794                           	opt stack 0
   795  00000B                     ?_vscp_setManufacturerId:
   796                           	opt stack 0
   797  00000B                     ?_vscp_setUserID:
   798                           	opt stack 0
   799  00000B                     vscp_setGUID@data:
   800                           	opt stack 0
   801  00000B                     vscp_setManufacturerId@data:
   802                           	opt stack 0
   803  00000B                     vscp_writeNicknamePermanent@nickname:
   804                           	opt stack 0
   805  00000B                     vscp_readAppReg@rv:
   806                           	opt stack 0
   807  00000B                     doActionPulse@arg:
   808                           	opt stack 0
   809  00000B                     doActionDisable@arg:
   810                           	opt stack 0
   811  00000B                     vscp_getGUID@idx:
   812                           	opt stack 0
   813  00000B                     vscp_getUserID@idx:
   814                           	opt stack 0
   815  00000B                     vscp_setUserID@data:
   816                           	opt stack 0
   817  00000B                     vscp_getManufacturerId@idx:
   818                           	opt stack 0
   819  00000B                     vscp_setSegmentCRC@crc:
   820                           	opt stack 0
   821  00000B                     vscp_setControlByte@ctrl:
   822                           	opt stack 0
   823  00000B                     vscp_goBootloaderMode@algorithm:
   824                           	opt stack 0
   825  00000B                     __RegsToCANID@type:
   826                           	opt stack 0
   827  00000B                     __ECANPointBuffer@b:
   828                           	opt stack 0
   829  00000B                     ___lbmod@rem:
   830                           	opt stack 0
   831                           
   832                           ; 1 bytes @ 0xA
   833  00000B                     	ds	1
   834  00000C                     ??_doActionPulse:
   835  00000C                     ??_doActionDisable:
   836  00000C                     ??__RegsToCANID:
   837  00000C                     vscp_setGUID@idx:
   838                           	opt stack 0
   839  00000C                     vscp_setManufacturerId@idx:
   840                           	opt stack 0
   841  00000C                     vscp_readAppReg@reg:
   842                           	opt stack 0
   843  00000C                     vscp_setUserID@idx:
   844                           	opt stack 0
   845  00000C                     vscp_handleDropNickname@bytes:
   846                           	opt stack 0
   847  00000C                     vscp_readStdReg@rv:
   848                           	opt stack 0
   849  00000C                     __ECANPointBuffer@pt:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0xB
   853  00000C                     	ds	1
   854  00000D                     init_app_ram@i:
   855                           	opt stack 0
   856  00000D                     init_app_eeprom@i:
   857                           	opt stack 0
   858  00000D                     vscp_readStdReg@reg:
   859                           	opt stack 0
   860                           
   861                           ; 1 bytes @ 0xC
   862  00000D                     	ds	1
   863  00000E                     init_app_eeprom@j:
   864                           	opt stack 0
   865  00000E                     doActionDisable@dmflags:
   866                           	opt stack 0
   867  00000E                     __CANIDToRegs@type:
   868                           	opt stack 0
   869  00000E                     __RegsToCANID@Value:
   870                           	opt stack 0
   871  00000E                     vscp_readRegister@reg:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0xD
   875  00000E                     	ds	1
   876  00000F                     ??__CANIDToRegs:
   877  00000F                     ?_ECANReceiveMessage:
   878                           	opt stack 0
   879  00000F                     ?_vscp_writeStdReg:
   880                           	opt stack 0
   881  00000F                     doActionPulse@dmflags:
   882                           	opt stack 0
   883  00000F                     doActionDisable@val:
   884                           	opt stack 0
   885  00000F                     ECANReceiveMessage@data:
   886                           	opt stack 0
   887  00000F                     vscp_writeStdReg@value:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0xE
   891  00000F                     	ds	1
   892  000010                     ??_vscp_writeStdReg:
   893  000010                     doActionPulse@val:
   894                           	opt stack 0
   895  000010                     doActionDisable@i:
   896                           	opt stack 0
   897  000010                     ECANReceiveMessage@dataLen:
   898                           	opt stack 0
   899                           
   900                           ; 1 bytes @ 0xF
   901  000010                     	ds	1
   902  000011                     doActionPulse@i:
   903                           	opt stack 0
   904  000011                     ECANReceiveMessage@msgFlags:
   905                           	opt stack 0
   906  000011                     __CANIDToRegs@Value:
   907                           	opt stack 0
   908                           
   909                           ; 1 bytes @ 0x10
   910  000011                     	ds	1
   911  000012                     ??_calculateSetFilterMask:
   912  000012                     ?_ECANSendMessage:
   913                           	opt stack 0
   914  000012                     ECANReceiveMessage@savedPtr:
   915                           	opt stack 0
   916  000012                     ECANSendMessage@id:
   917                           	opt stack 0
   918                           
   919                           ; 4 bytes @ 0x11
   920  000012                     	ds	2
   921  000014                     ECANReceiveMessage@id:
   922                           	opt stack 0
   923                           
   924                           ; 1 bytes @ 0x13
   925  000014                     	ds	1
   926  000015                     ECANReceiveMessage@i:
   927                           	opt stack 0
   928  000015                     vscp_writeStdReg@code:
   929                           	opt stack 0
   930                           
   931                           ; 4 bytes @ 0x14
   932  000015                     	ds	1
   933  000016                     ECANReceiveMessage@mode:
   934                           	opt stack 0
   935  000016                     ECANSendMessage@data:
   936                           	opt stack 0
   937                           
   938                           ; 2 bytes @ 0x15
   939  000016                     	ds	1
   940  000017                     ECANReceiveMessage@temp:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x16
   944  000017                     	ds	1
   945  000018                     ECANSendMessage@dataLen:
   946                           	opt stack 0
   947  000018                     ECANReceiveMessage@ptr:
   948                           	opt stack 0
   949                           
   950                           ; 2 bytes @ 0x17
   951  000018                     	ds	1
   952  000019                     ECANSendMessage@msgFlags:
   953                           	opt stack 0
   954  000019                     vscp_writeStdReg@code_1270:
   955                           	opt stack 0
   956                           
   957                           ; 4 bytes @ 0x18
   958  000019                     	ds	1
   959  00001A                     ??_ECANSendMessage:
   960  00001A                     ?_getCANFrame:
   961                           	opt stack 0
   962  00001A                     getCANFrame@pdlc:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x19
   966  00001A                     	ds	1
   967  00001B                     getCANFrame@pdata:
   968                           	opt stack 0
   969  00001B                     ECANSendMessage@pb:
   970                           	opt stack 0
   971                           
   972                           ; 18 bytes @ 0x1A
   973  00001B                     	ds	1
   974  00001C                     getCANFrame@pid:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0x1B
   978  00001C                     	ds	1
   979  00001D                     getCANFrame@flags:
   980                           	opt stack 0
   981  00001D                     vscp_writeStdReg@idx:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x1C
   985  00001D                     	ds	1
   986  00001E                     ?_getVSCPFrame:
   987                           	opt stack 0
   988  00001E                     getVSCPFrame@pvscptype:
   989                           	opt stack 0
   990  00001E                     vscp_writeStdReg@idx_1271:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0x1D
   994  00001E                     	ds	1
   995  00001F                     getVSCPFrame@pNodeId:
   996                           	opt stack 0
   997  00001F                     vscp_writeStdReg@rv:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x1E
  1001  00001F                     	ds	1
  1002  000020                     getVSCPFrame@pPriority:
  1003                           	opt stack 0
  1004  000020                     vscp_writeStdReg@reg:
  1005                           	opt stack 0
  1006                           
  1007                           ; 1 bytes @ 0x1F
  1008  000020                     	ds	1
  1009  000021                     getVSCPFrame@pSize:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x20
  1013  000021                     	ds	1
  1014  000022                     getVSCPFrame@pData:
  1015                           	opt stack 0
  1016                           
  1017                           ; 1 bytes @ 0x21
  1018  000022                     	ds	1
  1019  000023                     ??_getVSCPFrame:
  1020                           
  1021                           ; 0 bytes @ 0x22
  1022  000023                     	ds	4
  1023  000027                     getVSCPFrame@pvscpclass:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x26
  1027  000027                     	ds	1
  1028  000028                     getVSCPFrame@id:
  1029                           	opt stack 0
  1030                           
  1031                           ; 4 bytes @ 0x27
  1032  000028                     	ds	4
  1033  00002C                     vscp_getEvent@rv:
  1034                           	opt stack 0
  1035                           
  1036                           ; 1 bytes @ 0x2B
  1037  00002C                     	ds	1
  1038  00002D                     ECANSendMessage@mode:
  1039                           	opt stack 0
  1040                           
  1041                           ; 1 bytes @ 0x2C
  1042  00002D                     	ds	1
  1043  00002E                     ECANSendMessage@buffers:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0x2D
  1047  00002E                     	ds	1
  1048  00002F                     ECANSendMessage@j:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x2E
  1052  00002F                     	ds	1
  1053  000030                     ECANSendMessage@tempBSEL0:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x2F
  1057  000030                     	ds	1
  1058  000031                     ECANSendMessage@tempPtr:
  1059                           	opt stack 0
  1060  000031                     calculateSetFilterMask@rowmask:
  1061                           	opt stack 0
  1062                           
  1063                           ; 4 bytes @ 0x30
  1064  000031                     	ds	2
  1065  000033                     ECANSendMessage@temp:
  1066                           	opt stack 0
  1067                           
  1068                           ; 1 bytes @ 0x32
  1069  000033                     	ds	1
  1070  000034                     ECANSendMessage@i:
  1071                           	opt stack 0
  1072                           
  1073                           ; 1 bytes @ 0x33
  1074  000034                     	ds	1
  1075  000035                     calculateSetFilterMask@lastOID:
  1076                           	opt stack 0
  1077  000035                     ECANSendMessage@ptr:
  1078                           	opt stack 0
  1079                           
  1080                           ; 2 bytes @ 0x34
  1081  000035                     	ds	1
  1082  000036                     calculateSetFilterMask@mask:
  1083                           	opt stack 0
  1084                           
  1085                           ; 4 bytes @ 0x35
  1086  000036                     	ds	1
  1087  000037                     ?_sendCANFrame:
  1088                           	opt stack 0
  1089  000037                     sendCANFrame@id:
  1090                           	opt stack 0
  1091                           
  1092                           ; 4 bytes @ 0x36
  1093  000037                     	ds	3
  1094  00003A                     calculateSetFilterMask@filter:
  1095                           	opt stack 0
  1096                           
  1097                           ; 4 bytes @ 0x39
  1098  00003A                     	ds	1
  1099  00003B                     sendCANFrame@dlc:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x3A
  1103  00003B                     	ds	1
  1104  00003C                     sendCANFrame@pdata:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0x3B
  1108  00003C                     	ds	2
  1109  00003E                     sendCANFrame@rv:
  1110                           	opt stack 0
  1111  00003E                     calculateSetFilterMask@rowfilter:
  1112                           	opt stack 0
  1113                           
  1114                           ; 4 bytes @ 0x3D
  1115  00003E                     	ds	1
  1116  00003F                     ?_sendVSCPFrame:
  1117                           	opt stack 0
  1118  00003F                     sendVSCPFrame@vscpclass:
  1119                           	opt stack 0
  1120                           
  1121                           ; 2 bytes @ 0x3E
  1122  00003F                     	ds	2
  1123  000041                     sendVSCPFrame@vscptype:
  1124                           	opt stack 0
  1125                           
  1126                           ; 1 bytes @ 0x40
  1127  000041                     	ds	1
  1128  000042                     sendVSCPFrame@nodeid:
  1129                           	opt stack 0
  1130  000042                     calculateSetFilterMask@j:
  1131                           	opt stack 0
  1132                           
  1133                           ; 1 bytes @ 0x41
  1134  000042                     	ds	1
  1135  000043                     sendVSCPFrame@priority:
  1136                           	opt stack 0
  1137  000043                     calculateSetFilterMask@i:
  1138                           	opt stack 0
  1139                           
  1140                           ; 1 bytes @ 0x42
  1141  000043                     	ds	1
  1142  000044                     sendVSCPFrame@size:
  1143                           	opt stack 0
  1144                           
  1145                           ; 1 bytes @ 0x43
  1146  000044                     	ds	1
  1147  000045                     sendVSCPFrame@pData:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x44
  1151  000045                     	ds	2
  1152  000047                     sendVSCPFrame@id:
  1153                           	opt stack 0
  1154                           
  1155                           ; 4 bytes @ 0x46
  1156  000047                     	ds	4
  1157  00004B                     ??_SendInformationEvent:
  1158  00004B                     
  1159                           ; 0 bytes @ 0x4A
  1160  00004B                     	ds	1
  1161  00004C                     ??_vscp_newNodeOnline:
  1162  00004C                     vscp_sendHeartBeat@zone:
  1163                           	opt stack 0
  1164                           
  1165                           ; 1 bytes @ 0x4B
  1166  00004C                     	ds	1
  1167  00004D                     ??_vscp_doOneSecondWork:
  1168  00004D                     SendInformationEvent@data:
  1169                           	opt stack 0
  1170                           
  1171                           ; 3 bytes @ 0x4C
  1172  00004D                     	ds	3
  1173  000050                     SendInformationEvent@idx:
  1174                           	opt stack 0
  1175                           
  1176                           ; 1 bytes @ 0x4F
  1177  000050                     	ds	1
  1178  000051                     ?_doActionOff:
  1179                           	opt stack 0
  1180  000051                     ?_doActionOn:
  1181                           	opt stack 0
  1182  000051                     ?_doActionStatus:
  1183                           	opt stack 0
  1184  000051                     ?_doActionToggle:
  1185                           	opt stack 0
  1186  000051                     ?_vscp_writeAppReg:
  1187                           	opt stack 0
  1188  000051                     vscp_writeAppReg@val:
  1189                           	opt stack 0
  1190  000051                     doActionOn@arg:
  1191                           	opt stack 0
  1192  000051                     doActionOff@arg:
  1193                           	opt stack 0
  1194  000051                     doActionStatus@arg:
  1195                           	opt stack 0
  1196  000051                     doActionToggle@arg:
  1197                           	opt stack 0
  1198                           
  1199                           ; 1 bytes @ 0x50
  1200  000051                     	ds	1
  1201  000052                     tblptru	equ	0xFF8
  1202                           tblptrh	equ	0xFF7
  1203                           tblptrl	equ	0xFF6
  1204                           tablat	equ	0xFF5
  1205                           prodh	equ	0xFF4
  1206                           prodl	equ	0xFF3
  1207                           intcon	equ	0xFF2
  1208                           postinc0	equ	0xFEE
  1209                           wreg	equ	0xFE8
  1210                           indf1	equ	0xFE7
  1211                           fsr1h	equ	0xFE2
  1212                           fsr1l	equ	0xFE1
  1213                           indf2	equ	0xFDF
  1214                           postinc2	equ	0xFDE
  1215                           postdec2	equ	0xFDD
  1216                           plusw2	equ	0xFDB
  1217                           fsr2h	equ	0xFDA
  1218                           fsr2l	equ	0xFD9
  1219                           status	equ	0xFD8
  1220                           
  1221                           ; 0 bytes @ 0x51
  1222 ;;
  1223 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1224 ;;
  1225 ;; *************** function _main *****************
  1226 ;; Defined at:
  1227 ;;		line 190 in file "../main.c"
  1228 ;; Parameters:    Size  Location     Type
  1229 ;;		None
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;		None
  1232 ;; Return value:  Size  Location     Type
  1233 ;;		None               void
  1234 ;; Registers used:
  1235 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1236 ;; Tracked objects:
  1237 ;;		On entry : 0/0
  1238 ;;		On exit  : F/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1241 ;;      Params:         0       0       0       0       0       0       0
  1242 ;;      Locals:         0       0       0       0       0       0       0
  1243 ;;      Temps:          0       0       0       0       0       0       0
  1244 ;;      Totals:         0       0       0       0       0       0       0
  1245 ;;Total ram usage:        0 bytes
  1246 ;; Hardware stack levels required when called:   10
  1247 ;; This function calls:
  1248 ;;		_init
  1249 ;;		_vscp_check_pstorage
  1250 ;;		_init_app_eeprom
  1251 ;;		_init_app_ram
  1252 ;;		_vscp_init
  1253 ;;		_writeEEPROM
  1254 ;;		_vscp_getEvent
  1255 ;;		_vscp_goActiveState
  1256 ;;		_vscp_handleProbeState
  1257 ;;		_vscp_handleProtocolEvent
  1258 ;;		_doDM
  1259 ;;		_vscp_error
  1260 ;;		_vscp_doOneSecondWork
  1261 ;;		_doApplicationOneSecondWork
  1262 ;;		_doWork
  1263 ;; This function is called by:
  1264 ;;		Startup code after reset
  1265 ;; This function uses a non-reentrant model
  1266 ;;
  1267                           
  1268                           	psect	text0
  1269  002FFA                     __ptext0:
  1270                           	opt stack 0
  1271  002FFA                     _main:
  1272                           	opt stack 21
  1273                           
  1274                           ;main.c: 191: init();
  1275                           
  1276                           ;incstack = 0
  1277                           ;incstack = 0
  1278  002FFA  EC93  F01B         	call	_init	;wreg free
  1279                           
  1280                           ;main.c: 195: if ( !vscp_check_pstorage() ) {
  1281  002FFE  EC69  F01C         	call	_vscp_check_pstorage	;wreg free
  1282  003002  0900               	iorlw	0
  1283  003004  E104               	bnz	l9195
  1284                           
  1285                           ;main.c: 198: init_app_eeprom();
  1286  003006  EC11  F00C         	call	_init_app_eeprom	;wreg free
  1287                           
  1288                           ;main.c: 199: init_app_ram();
  1289  00300A  EC08  F017         	call	_init_app_ram	;wreg free
  1290  00300E                     l9195:
  1291                           
  1292                           ;main.c: 202: }
  1293                           ;main.c: 204: vscp_init();
  1294  00300E  EC32  F01B         	call	_vscp_init	;wreg free
  1295  003012                     l149:
  1296                           
  1297                           ; BSR set to: 0
  1298  003012  0004               	clrwdt		;# 
  1299                           
  1300                           ;main.c: 210: if ( ( vscp_initbtncnt > 250 ) &&
  1301                           ;main.c: 211: ( 0x01 != vscp_node_state ) ) {
  1302  003014  0EFA               	movlw	250
  1303  003016  0100               	movlb	0	; () banked
  1304  003018  658F               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1305  00301A  D00C               	goto	l9205
  1306                           
  1307                           ; BSR set to: 0
  1308  00301C  0592               	decf	_vscp_node_state& (0+255),w,b
  1309  00301E  E00A               	bz	l9205
  1310                           
  1311                           ; BSR set to: 0
  1312                           ;main.c: 214: vscp_nickname = 0xff;
  1313  003020  6991               	setf	_vscp_nickname& (0+255),b
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;main.c: 215: writeEEPROM( 0x01, 0xff );
  1317  003022  6A09               	clrf	?_writeEEPROM+1,c
  1318  003024  0E01               	movlw	1
  1319  003026  6E08               	movwf	?_writeEEPROM,c
  1320  003028  0EFF               	movlw	255
  1321  00302A  680A               	setf	?_writeEEPROM+2,c
  1322  00302C  EC44  F01C         	call	_writeEEPROM	;wreg free
  1323                           
  1324                           ;main.c: 216: vscp_init();
  1325  003030  EC32  F01B         	call	_vscp_init	;wreg free
  1326  003034                     l9205:
  1327                           
  1328                           ; BSR set to: 0
  1329                           ;main.c: 218: }
  1330                           ;main.c: 221: vscp_imsg.flags = 0;
  1331  003034  6B96               	clrf	_vscp_imsg& (0+255),b
  1332                           
  1333                           ; BSR set to: 0
  1334                           ;main.c: 222: vscp_getEvent();
  1335  003036  ECF5  F01B         	call	_vscp_getEvent	;wreg free
  1336                           
  1337                           ;main.c: 224: switch ( vscp_node_state ) {
  1338  00303A  D01C               	goto	l9229
  1339  00303C                     l9209:
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;main.c: 229: if (0xff == vscp_nickname) {
  1343  00303C  2991               	incf	_vscp_nickname& (0+255),w,b
  1344  00303E  E103               	bnz	l9213
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;main.c: 231: vscp_node_state = 0x01;
  1348  003040  0E01               	movlw	1
  1349  003042  6F92               	movwf	_vscp_node_state& (0+255),b
  1350                           
  1351                           ;main.c: 232: } else {
  1352  003044  D023               	goto	l9231
  1353  003046                     l9213:
  1354                           
  1355                           ; BSR set to: 0
  1356                           ;main.c: 234: vscp_node_state = 0x03;
  1357  003046  0E03               	movlw	3
  1358  003048  6F92               	movwf	_vscp_node_state& (0+255),b
  1359  00304A                     l9215:
  1360                           
  1361                           ; BSR set to: 0
  1362                           ;main.c: 235: vscp_goActiveState();
  1363  00304A  ECCF  F01C         	call	_vscp_goActiveState	;wreg free
  1364  00304E  D01E               	goto	l9231
  1365  003050                     l9217:
  1366                           
  1367                           ; BSR set to: 0
  1368                           ;main.c: 240: vscp_handleProbeState();
  1369  003050  ECCA  F018         	call	_vscp_handleProbeState	;wreg free
  1370                           
  1371                           ;main.c: 241: break;
  1372  003054  D01B               	goto	l9231
  1373  003056                     l158:
  1374                           
  1375                           ; BSR set to: 0
  1376                           ;main.c: 250: if (vscp_imsg.flags & 0x80) {
  1377  003056  AF96               	btfss	_vscp_imsg& (0+255),7,b
  1378  003058  D019               	goto	l9231
  1379                           
  1380                           ; BSR set to: 0
  1381                           ;main.c: 252: if ( 0 == vscp_imsg.vscp_class ) {
  1382  00305A  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  1383  00305C  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1384  00305E  B4D8               	btfsc	status,2,c
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;main.c: 255: vscp_handleProtocolEvent();
  1388  003060  EC48  F007         	call	_vscp_handleProtocolEvent	;wreg free
  1389                           
  1390                           ;main.c: 257: }
  1391                           ;main.c: 259: doDM();
  1392  003064  EC4E  F010         	call	_doDM	;wreg free
  1393  003068  D011               	goto	l9231
  1394  00306A                     l9225:
  1395                           
  1396                           ; BSR set to: 0
  1397                           ;main.c: 265: vscp_error();
  1398  00306A  ECA0  F01D         	call	_vscp_error	;wreg free
  1399                           
  1400                           ;main.c: 266: break;
  1401  00306E  D00E               	goto	l9231
  1402  003070                     l162:
  1403                           
  1404                           ; BSR set to: 0
  1405                           ;main.c: 269: vscp_node_state = 0x00;
  1406  003070  6B92               	clrf	_vscp_node_state& (0+255),b
  1407                           
  1408                           ;main.c: 270: break;
  1409  003072  D00C               	goto	l9231
  1410  003074                     l9229:
  1411  003074  0100               	movlb	0	; () banked
  1412  003076  5192               	movf	_vscp_node_state& (0+255),w,b
  1413                           
  1414                           ; Switch size 1, requested type "space"
  1415                           ; Number of cases is 5, Range of values is 0 to 4
  1416                           ; switch strategies available:
  1417                           ; Name         Instructions Cycles
  1418                           ; simple_byte           16     9 (average)
  1419                           ;	Chosen strategy is simple_byte
  1420  003078  E0E1               	bz	l9209
  1421  00307A  0A01               	xorlw	1	; case 1
  1422  00307C  E0E9               	bz	l9217
  1423  00307E  0A03               	xorlw	3	; case 2
  1424  003080  E0E4               	bz	l9215
  1425  003082  0A01               	xorlw	1	; case 3
  1426  003084  E0E8               	bz	l158
  1427  003086  0A07               	xorlw	7	; case 4
  1428  003088  E0F0               	bz	l9225
  1429  00308A  D7F2               	goto	l162
  1430  00308C                     l9231:
  1431                           
  1432                           ;main.c: 275: if ( measurement_clock > 1000 ) {
  1433  00308C  0EE9               	movlw	233
  1434  00308E  0100               	movlb	0	; () banked
  1435  003090  5D80               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1436  003092  0E03               	movlw	3
  1437  003094  5981               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1438  003096  0E00               	movlw	0
  1439  003098  5982               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1440  00309A  0E00               	movlw	0
  1441  00309C  5983               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1442  00309E  E30C               	bnc	l9243
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;main.c: 277: measurement_clock = 0;
  1446  0030A0  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
  1447  0030A2  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1448  0030A4  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1449  0030A6  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;main.c: 279: sendTimer++;
  1453  0030A8  2A55               	incf	_sendTimer,f,c
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;main.c: 282: vscp_doOneSecondWork();
  1457  0030AA  EC0B  F01B         	call	_vscp_doOneSecondWork	;wreg free
  1458                           
  1459                           ; BSR set to: 0
  1460                           ;main.c: 286: if ( 0x03 == vscp_node_state ) {
  1461  0030AE  5192               	movf	_vscp_node_state& (0+255),w,b
  1462  0030B0  0A03               	xorlw	3
  1463  0030B2  B4D8               	btfsc	status,2,c
  1464                           
  1465                           ; BSR set to: 0
  1466                           ;main.c: 289: doApplicationOneSecondWork();
  1467  0030B4  ECCC  F00D         	call	_doApplicationOneSecondWork	;wreg free
  1468  0030B8                     l9243:
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;main.c: 291: }
  1472                           ;main.c: 293: }
  1473                           ;main.c: 296: if ( seconds > 59 ) {
  1474  0030B8  0E3B               	movlw	59
  1475  0030BA  658B               	cpfsgt	_seconds& (0+255),b
  1476  0030BC  D00B               	goto	l9259
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;main.c: 298: seconds = 0;
  1480  0030BE  6B8B               	clrf	_seconds& (0+255),b
  1481                           
  1482                           ; BSR set to: 0
  1483                           ;main.c: 299: minutes++;
  1484  0030C0  2B89               	incf	_minutes& (0+255),f,b
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;main.c: 301: if ( minutes > 59 ) {
  1488  0030C2  0E3B               	movlw	59
  1489  0030C4  6589               	cpfsgt	_minutes& (0+255),b
  1490  0030C6  D002               	goto	l9255
  1491                           
  1492                           ; BSR set to: 0
  1493                           ;main.c: 302: minutes = 0;
  1494  0030C8  6B89               	clrf	_minutes& (0+255),b
  1495                           
  1496                           ; BSR set to: 0
  1497                           ;main.c: 303: hours++;
  1498  0030CA  2B88               	incf	_hours& (0+255),f,b
  1499  0030CC                     l9255:
  1500                           
  1501                           ; BSR set to: 0
  1502                           ;main.c: 304: }
  1503                           ;main.c: 306: if ( hours > 23 ) hours = 0;
  1504  0030CC  0E17               	movlw	23
  1505  0030CE  6588               	cpfsgt	_hours& (0+255),b
  1506  0030D0  D001               	goto	l9259
  1507                           
  1508                           ; BSR set to: 0
  1509  0030D2  6B88               	clrf	_hours& (0+255),b
  1510  0030D4                     l9259:
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;main.c: 308: }
  1514                           ;main.c: 310: doWork();
  1515  0030D4  ECA2  F01D         	call	_doWork	;wreg free
  1516  0030D8  D79C               	goto	l149
  1517  0030DA                     __end_of_main:
  1518                           	opt stack 0
  1519                           tblptru	equ	0xFF8
  1520                           tblptrh	equ	0xFF7
  1521                           tblptrl	equ	0xFF6
  1522                           tablat	equ	0xFF5
  1523                           prodh	equ	0xFF4
  1524                           prodl	equ	0xFF3
  1525                           intcon	equ	0xFF2
  1526                           postinc0	equ	0xFEE
  1527                           wreg	equ	0xFE8
  1528                           indf1	equ	0xFE7
  1529                           fsr1h	equ	0xFE2
  1530                           fsr1l	equ	0xFE1
  1531                           indf2	equ	0xFDF
  1532                           postinc2	equ	0xFDE
  1533                           postdec2	equ	0xFDD
  1534                           plusw2	equ	0xFDB
  1535                           fsr2h	equ	0xFDA
  1536                           fsr2l	equ	0xFD9
  1537                           status	equ	0xFD8
  1538                           
  1539 ;; *************** function _doWork *****************
  1540 ;; Defined at:
  1541 ;;		line 887 in file "../main.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;		None
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;		None
  1546 ;; Return value:  Size  Location     Type
  1547 ;;		None               void
  1548 ;; Registers used:
  1549 ;;		wreg, status,2, status,0
  1550 ;; Tracked objects:
  1551 ;;		On entry : F/0
  1552 ;;		On exit  : F/0
  1553 ;;		Unchanged: F/0
  1554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1555 ;;      Params:         0       0       0       0       0       0       0
  1556 ;;      Locals:         0       0       0       0       0       0       0
  1557 ;;      Temps:          0       0       0       0       0       0       0
  1558 ;;      Totals:         0       0       0       0       0       0       0
  1559 ;;Total ram usage:        0 bytes
  1560 ;; Hardware stack levels used:    1
  1561 ;; Hardware stack levels required when called:    2
  1562 ;; This function calls:
  1563 ;;		Nothing
  1564 ;; This function is called by:
  1565 ;;		_main
  1566 ;; This function uses a non-reentrant model
  1567 ;;
  1568                           
  1569                           	psect	text1
  1570  003B44                     __ptext1:
  1571                           	opt stack 0
  1572  003B44                     _doWork:
  1573                           	opt stack 28
  1574                           
  1575                           ; BSR set to: 0
  1576                           
  1577                           ; BSR set to: 0
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;incstack = 0
  1581                           ;incstack = 0
  1582  003B44  0012               	return	
  1583  003B46                     __end_of_doWork:
  1584                           	opt stack 0
  1585                           tblptru	equ	0xFF8
  1586                           tblptrh	equ	0xFF7
  1587                           tblptrl	equ	0xFF6
  1588                           tablat	equ	0xFF5
  1589                           prodh	equ	0xFF4
  1590                           prodl	equ	0xFF3
  1591                           intcon	equ	0xFF2
  1592                           postinc0	equ	0xFEE
  1593                           wreg	equ	0xFE8
  1594                           indf1	equ	0xFE7
  1595                           fsr1h	equ	0xFE2
  1596                           fsr1l	equ	0xFE1
  1597                           indf2	equ	0xFDF
  1598                           postinc2	equ	0xFDE
  1599                           postdec2	equ	0xFDD
  1600                           plusw2	equ	0xFDB
  1601                           fsr2h	equ	0xFDA
  1602                           fsr2l	equ	0xFD9
  1603                           status	equ	0xFD8
  1604                           
  1605 ;; *************** function _doApplicationOneSecondWork *****************
  1606 ;; Defined at:
  1607 ;;		line 592 in file "../main.c"
  1608 ;; Parameters:    Size  Location     Type
  1609 ;;		None
  1610 ;; Auto vars:     Size  Location     Type
  1611 ;;  i               1   32[BANK0 ] unsigned char 
  1612 ;;  ctrlreg         1   31[BANK0 ] unsigned char 
  1613 ;;  bOn             1   30[BANK0 ] enum E15660
  1614 ;; Return value:  Size  Location     Type
  1615 ;;		None               void
  1616 ;; Registers used:
  1617 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1618 ;; Tracked objects:
  1619 ;;		On entry : F/0
  1620 ;;		On exit  : F/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1623 ;;      Params:         0       0       0       0       0       0       0
  1624 ;;      Locals:         0       3       0       0       0       0       0
  1625 ;;      Temps:          0       3       0       0       0       0       0
  1626 ;;      Totals:         0       6       0       0       0       0       0
  1627 ;;Total ram usage:        6 bytes
  1628 ;; Hardware stack levels used:    1
  1629 ;; Hardware stack levels required when called:    8
  1630 ;; This function calls:
  1631 ;;		_readEEPROM
  1632 ;;		_doActionOff
  1633 ;;		_SendInformationEvent
  1634 ;; This function is called by:
  1635 ;;		_main
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text2
  1640  001B98                     __ptext2:
  1641                           	opt stack 0
  1642  001B98                     _doApplicationOneSecondWork:
  1643                           	opt stack 22
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;main.c: 594: uint8_t i;
  1647                           ;main.c: 595: uint8_t ctrlreg;
  1648                           ;main.c: 596: BOOL bOn = 0;
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;incstack = 0
  1652                           ;incstack = 0
  1653  001B98  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1654                           
  1655                           ;main.c: 598: for ( i = 0; i < 8; i++ ) {
  1656  001B9A  6BD1               	clrf	doApplicationOneSecondWork@i& (0+255),b
  1657  001B9C                     l9751:
  1658                           
  1659                           ; BSR set to: 0
  1660  001B9C  0E07               	movlw	7
  1661  001B9E  65D1               	cpfsgt	doApplicationOneSecondWork@i& (0+255),b
  1662  001BA0  D001               	goto	l9755
  1663  001BA2  D11F               	goto	l234
  1664  001BA4                     l9755:
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;main.c: 601: ctrlreg = readEEPROM( 0x43 + 10 + i );
  1668  001BA4  D92D               	call	PL32	;call to abstracted procedure
  1669  001BA6  EC6C  F01D         	call	_readEEPROM	;wreg free
  1670  001BAA  0100               	movlb	0	; () banked
  1671  001BAC  6FD0               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;main.c: 604: if ( !( ctrlreg & 0x80 ) ) continue;
  1675  001BAE  AFD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  1676  001BB0  D116               	goto	l9839
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;main.c: 608: if ( relay_protection_timer[ i ] ) {
  1680                           
  1681                           ; BSR set to: 0
  1682  001BB2  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1683  001BB4  0D02               	mullw	2
  1684  001BB6  50F3               	movf	prodl,w,c
  1685  001BB8  0F60               	addlw	low _relay_protection_timer
  1686  001BBA  6ED9               	movwf	fsr2l,c
  1687  001BBC  6ADA               	clrf	fsr2h,c
  1688  001BBE  50DE               	movf	postinc2,w,c
  1689  001BC0  10DD               	iorwf	postdec2,w,c
  1690  001BC2  E028               	bz	l9773
  1691                           
  1692                           ; BSR set to: 0
  1693                           ;main.c: 610: relay_protection_timer[ i ]--;
  1694  001BC4  D916               	call	PL22	;call to abstracted procedure
  1695  001BC6  06DE               	decf	postinc2,f,c
  1696  001BC8  0E00               	movlw	0
  1697  001BCA  5ADD               	subwfb	postdec2,f,c
  1698                           
  1699                           ;main.c: 613: if ( !relay_protection_timer[ i ] &&
  1700                           ;main.c: 614: ( readEEPROM( 0x43 + 10 + i ) &
  1701                           ;main.c: 615: 0x04 ) ) {
  1702  001BCC  D912               	call	PL22	;call to abstracted procedure
  1703  001BCE  50DE               	movf	postinc2,w,c
  1704  001BD0  10DD               	iorwf	postdec2,w,c
  1705  001BD2  E13C               	bnz	l9775
  1706                           
  1707                           ; BSR set to: 0
  1708  001BD4  D915               	call	PL32	;call to abstracted procedure
  1709  001BD6  EC6C  F01D         	call	_readEEPROM	;wreg free
  1710  001BDA  0100               	movlb	0	; () banked
  1711  001BDC  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1712  001BDE  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1713  001BE0  D035               	goto	l9775
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;main.c: 618: doActionOff( 0, (1 << i) );
  1717  001BE2  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1718  001BE6  0E01               	movlw	1
  1719  001BE8  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1720  001BEA  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1721  001BEC  D002               	goto	u12024
  1722  001BEE                     u12025:
  1723  001BEE  90D8               	bcf	status,0,c
  1724  001BF0  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1725  001BF2                     u12024:
  1726  001BF2  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1727  001BF4  D7FC               	goto	u12025
  1728  001BF6  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1729  001BF8  6E51               	movwf	?_doActionOff,c
  1730  001BFA  0E00               	movlw	0
  1731  001BFC  EC6D  F018         	call	_doActionOff
  1732                           
  1733                           ; BSR set to: 0
  1734                           ;main.c: 621: if ( ctrlreg & 0x02 ) {
  1735  001C00  A3D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  1736  001C02  D024               	goto	l9775
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;main.c: 622: SendInformationEvent( i, 1,
  1740                           ;main.c: 623: 2 );
  1741  001C04  0E01               	movlw	1
  1742  001C06  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1743  001C08  0E02               	movlw	2
  1744  001C0A  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1745  001C0C  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1746  001C0E  ECD5  F01A         	call	_SendInformationEvent
  1747  001C12  D01C               	goto	l9775
  1748  001C14                     l9773:
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;main.c: 628: else {
  1752                           ;main.c: 630: relay_protection_timer[ i ] =
  1753                           ;main.c: 631: readEEPROM(0x43 + 34 + i ) * 256 +
  1754                           ;main.c: 632: readEEPROM(0x43 + 35 + i );
  1755  001C14  0E65               	movlw	101
  1756  001C16  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1757  001C18  6E08               	movwf	?_readEEPROM,c
  1758  001C1A  6A09               	clrf	?_readEEPROM+1,c
  1759  001C1C  0E00               	movlw	0
  1760  001C1E  2209               	addwfc	?_readEEPROM+1,f,c
  1761  001C20  EC6C  F01D         	call	_readEEPROM	;wreg free
  1762  001C24  0100               	movlb	0	; () banked
  1763  001C26  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1764  001C28  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1765  001C2A  0E66               	movlw	102
  1766  001C2C  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1767  001C2E  6E08               	movwf	?_readEEPROM,c
  1768  001C30  6A09               	clrf	?_readEEPROM+1,c
  1769  001C32  0E00               	movlw	0
  1770  001C34  2209               	addwfc	?_readEEPROM+1,f,c
  1771  001C36  EC6C  F01D         	call	_readEEPROM	;wreg free
  1772  001C3A  0100               	movlb	0	; () banked
  1773  001C3C  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1774  001C3E  0E00               	movlw	0
  1775  001C40  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1776  001C42  D8D7               	call	PL22	;call to abstracted procedure
  1777  001C44  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1778  001C48  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1779  001C4C                     l9775:
  1780                           
  1781                           ; BSR set to: 0
  1782                           ;main.c: 633: }
  1783                           ;main.c: 636: if ( relay_pulse_flags & (1 << i) ) {
  1784  001C4C  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1785  001C50  0E01               	movlw	1
  1786  001C52  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1787  001C54  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1788  001C56  D002               	goto	u12044
  1789  001C58                     u12045:
  1790  001C58  90D8               	bcf	status,0,c
  1791  001C5A  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1792  001C5C                     u12044:
  1793  001C5C  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1794  001C5E  D7FC               	goto	u12045
  1795  001C60  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1796  001C62  158A               	andwf	_relay_pulse_flags& (0+255),w,b
  1797  001C64  E101 D0BB          	bz	l9839
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;main.c: 638: if ( relay_pulse_timer[ i ] ) {
  1801  001C68  D8BD               	call	PL20	;call to abstracted procedure
  1802  001C6A  50DE               	movf	postinc2,w,c
  1803  001C6C  10DD               	iorwf	postdec2,w,c
  1804  001C6E  E101 D0A5          	bz	l9837
  1805                           
  1806                           ; BSR set to: 0
  1807                           ;main.c: 640: relay_pulse_timer[ i ]--;
  1808  001C72  D8B8               	call	PL20	;call to abstracted procedure
  1809  001C74  06DE               	decf	postinc2,f,c
  1810  001C76  0E00               	movlw	0
  1811  001C78  5ADD               	subwfb	postdec2,f,c
  1812                           
  1813                           ;main.c: 643: if ( !relay_pulse_timer[ i ] ) {
  1814  001C7A  D8B4               	call	PL20	;call to abstracted procedure
  1815  001C7C  50DE               	movf	postinc2,w,c
  1816  001C7E  10DD               	iorwf	postdec2,w,c
  1817  001C80  E02E               	bz	l9813
  1818  001C82  D0AD               	goto	l9839
  1819  001C84                     l204:
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;main.c: 648: if ( LATBbits.LATB4 ) {
  1823  001C84  A88A               	btfss	3978,4,c	;volatile
  1824  001C86  D002               	goto	l205
  1825                           
  1826                           ; BSR set to: 0
  1827                           ;main.c: 649: LATBbits.LATB4 = 0;
  1828  001C88  988A               	bcf	3978,4,c	;volatile
  1829  001C8A  D025               	goto	L6
  1830  001C8C                     l205:
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;main.c: 652: LATBbits.LATB4 = 1;
  1834  001C8C  888A               	bsf	3978,4,c	;volatile
  1835  001C8E                     l9785:
  1836                           
  1837                           ; BSR set to: 0
  1838                           ;main.c: 653: bOn = 1;
  1839  001C8E  0E01               	movlw	1
  1840  001C90  6FCF               	movwf	doApplicationOneSecondWork@bOn& (0+255),b
  1841  001C92  D033               	goto	l9815
  1842  001C94                     l208:
  1843                           
  1844                           ; BSR set to: 0
  1845                           ;main.c: 658: if ( LATBbits.LATB1 ) {
  1846  001C94  A28A               	btfss	3978,1,c	;volatile
  1847  001C96  D002               	goto	l209
  1848                           
  1849                           ; BSR set to: 0
  1850                           ;main.c: 659: LATBbits.LATB1 = 0;
  1851  001C98  928A               	bcf	3978,1,c	;volatile
  1852  001C9A  D01D               	goto	L6
  1853  001C9C                     l209:
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;main.c: 662: LATBbits.LATB1 = 1;
  1857  001C9C  828A               	bsf	3978,1,c	;volatile
  1858  001C9E  D7F7               	goto	l9785
  1859  001CA0                     l211:
  1860                           
  1861                           ; BSR set to: 0
  1862                           ;main.c: 668: if ( LATBbits.LATB0 ) {
  1863  001CA0  A08A               	btfss	3978,0,c	;volatile
  1864  001CA2  D002               	goto	l212
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;main.c: 669: LATBbits.LATB0 = 0;
  1868  001CA4  908A               	bcf	3978,0,c	;volatile
  1869  001CA6  D017               	goto	L6
  1870  001CA8                     l212:
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;main.c: 672: LATBbits.LATB0 = 1;
  1874  001CA8  808A               	bsf	3978,0,c	;volatile
  1875  001CAA  D7F1               	goto	l9785
  1876  001CAC                     l214:
  1877                           
  1878                           ; BSR set to: 0
  1879                           ;main.c: 678: if ( LATCbits.LATC7 ) {
  1880  001CAC  AE8B               	btfss	3979,7,c	;volatile
  1881  001CAE  D002               	goto	l215
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;main.c: 679: LATCbits.LATC7 = 0;
  1885  001CB0  9E8B               	bcf	3979,7,c	;volatile
  1886  001CB2  D011               	goto	L6
  1887  001CB4                     l215:
  1888                           
  1889                           ; BSR set to: 0
  1890                           ;main.c: 682: LATCbits.LATC7 = 1;
  1891  001CB4  8E8B               	bsf	3979,7,c	;volatile
  1892  001CB6  D7EB               	goto	l9785
  1893  001CB8                     l217:
  1894                           
  1895                           ; BSR set to: 0
  1896                           ;main.c: 688: if ( LATCbits.LATC6 ) {
  1897  001CB8  AC8B               	btfss	3979,6,c	;volatile
  1898  001CBA  D002               	goto	l218
  1899                           
  1900                           ; BSR set to: 0
  1901                           ;main.c: 689: LATCbits.LATC6 = 0;
  1902  001CBC  9C8B               	bcf	3979,6,c	;volatile
  1903  001CBE  D00B               	goto	L6
  1904  001CC0                     l218:
  1905                           
  1906                           ; BSR set to: 0
  1907                           ;main.c: 692: LATCbits.LATC6 = 1;
  1908  001CC0  8C8B               	bsf	3979,6,c	;volatile
  1909  001CC2  D7E5               	goto	l9785
  1910  001CC4                     l220:
  1911                           
  1912                           ; BSR set to: 0
  1913                           ;main.c: 698: if ( LATCbits.LATC5 ) {
  1914  001CC4  AA8B               	btfss	3979,5,c	;volatile
  1915  001CC6  D002               	goto	l221
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;main.c: 699: LATCbits.LATC5 = 0;
  1919  001CC8  9A8B               	bcf	3979,5,c	;volatile
  1920  001CCA  D005               	goto	L6
  1921  001CCC                     l221:
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;main.c: 702: LATCbits.LATC5 = 1;
  1925  001CCC  8A8B               	bsf	3979,5,c	;volatile
  1926  001CCE  D7DF               	goto	l9785
  1927  001CD0                     l223:
  1928                           
  1929                           ; BSR set to: 0
  1930                           ;main.c: 708: if ( LATCbits.LATC4 ) {
  1931  001CD0  A88B               	btfss	3979,4,c	;volatile
  1932  001CD2  D003               	goto	l224
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;main.c: 709: LATCbits.LATC4 = 0;
  1936  001CD4  988B               	bcf	3979,4,c	;volatile
  1937  001CD6                     L6:
  1938                           
  1939                           ;main.c: 710: bOn = 0;
  1940  001CD6  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1941                           
  1942                           ;main.c: 711: } else {
  1943  001CD8  D010               	goto	l9815
  1944  001CDA                     l224:
  1945                           
  1946                           ; BSR set to: 0
  1947                           ;main.c: 712: LATCbits.LATC4 = 1;
  1948  001CDA  888B               	bsf	3979,4,c	;volatile
  1949  001CDC  D7D8               	goto	l9785
  1950  001CDE                     l9813:
  1951                           
  1952                           ; BSR set to: 0
  1953  001CDE  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1954                           
  1955                           ; Switch size 1, requested type "space"
  1956                           ; Number of cases is 7, Range of values is 0 to 6
  1957                           ; switch strategies available:
  1958                           ; Name         Instructions Cycles
  1959                           ; simple_byte           22    12 (average)
  1960                           ;	Chosen strategy is simple_byte
  1961  001CE0  E0D1               	bz	l204
  1962  001CE2  0A01               	xorlw	1	; case 1
  1963  001CE4  E0D7               	bz	l208
  1964  001CE6  0A03               	xorlw	3	; case 2
  1965  001CE8  E0DB               	bz	l211
  1966  001CEA  0A01               	xorlw	1	; case 3
  1967  001CEC  E0DF               	bz	l214
  1968  001CEE  0A07               	xorlw	7	; case 4
  1969  001CF0  E0E3               	bz	l217
  1970  001CF2  0A01               	xorlw	1	; case 5
  1971  001CF4  E0E7               	bz	l220
  1972  001CF6  0A03               	xorlw	3	; case 6
  1973  001CF8  E0EB               	bz	l223
  1974  001CFA                     l9815:
  1975                           
  1976                           ; BSR set to: 0
  1977                           ;main.c: 720: relay_pulse_timer[ i ] =
  1978                           ;main.c: 721: readEEPROM( 0x43 +
  1979                           ;main.c: 722: 18 + 2*i ) * 256 +
  1980                           ;main.c: 723: readEEPROM( 0x43 +
  1981                           ;main.c: 724: 19 + 2*i );
  1982  001CFA  D889               	call	PL52	;call to abstracted procedure
  1983  001CFC  EC6C  F01D         	call	_readEEPROM	;wreg free
  1984  001D00  0100               	movlb	0	; () banked
  1985  001D02  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1986  001D04  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1987  001D06  D88C               	call	PL54	;call to abstracted procedure
  1988  001D08  EC6C  F01D         	call	_readEEPROM	;wreg free
  1989  001D0C  0100               	movlb	0	; () banked
  1990  001D0E  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1991  001D10  0E00               	movlw	0
  1992  001D12  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1993  001D14  D867               	call	PL20	;call to abstracted procedure
  1994  001D16  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1995  001D1A  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;main.c: 726: if ( bOn ) {
  1999  001D1E  51CF               	movf	doApplicationOneSecondWork@bOn& (0+255),w,b
  2000  001D20  E03A               	bz	l226
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;main.c: 729: if ( readEEPROM( 0x43 + 10 + i ) & 0x04 ) {
  2004  001D22  D86E               	call	PL32	;call to abstracted procedure
  2005  001D24  EC6C  F01D         	call	_readEEPROM	;wreg free
  2006  001D28  0100               	movlb	0	; () banked
  2007  001D2A  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2008  001D2C  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  2009  001D2E  D020               	goto	l9823
  2010                           
  2011                           ; BSR set to: 0
  2012                           ;main.c: 730: relay_protection_timer[ i ] =
  2013                           ;main.c: 731: readEEPROM( 0x43 + 34 + 2*i ) * 256 +
  2014                           ;main.c: 732: readEEPROM( 0x43 + 35 + 2*i );
  2015  001D30  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2016  001D32  0D02               	mullw	2
  2017  001D34  0E65               	movlw	101
  2018  001D36  24F3               	addwf	prodl,w,c
  2019  001D38  6E08               	movwf	?_readEEPROM,c
  2020  001D3A  0E00               	movlw	0
  2021  001D3C  20F4               	addwfc	prodh,w,c
  2022  001D3E  6E09               	movwf	?_readEEPROM+1,c
  2023  001D40  EC6C  F01D         	call	_readEEPROM	;wreg free
  2024  001D44  0100               	movlb	0	; () banked
  2025  001D46  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2026  001D48  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  2027  001D4A  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2028  001D4C  0D02               	mullw	2
  2029  001D4E  0E66               	movlw	102
  2030  001D50  24F3               	addwf	prodl,w,c
  2031  001D52  6E08               	movwf	?_readEEPROM,c
  2032  001D54  0E00               	movlw	0
  2033  001D56  20F4               	addwfc	prodh,w,c
  2034  001D58  6E09               	movwf	?_readEEPROM+1,c
  2035  001D5A  EC6C  F01D         	call	_readEEPROM	;wreg free
  2036  001D5E  0100               	movlb	0	; () banked
  2037  001D60  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  2038  001D62  0E00               	movlw	0
  2039  001D64  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  2040  001D66  D845               	call	PL22	;call to abstracted procedure
  2041  001D68  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  2042  001D6C  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  2043  001D70                     l9823:
  2044                           
  2045                           ; BSR set to: 0
  2046                           ;main.c: 733: }
  2047                           ;main.c: 735: if ( ctrlreg & 0x08 ) {
  2048  001D70  A7D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  2049  001D72  D007               	goto	l9827
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;main.c: 736: SendInformationEvent( i, 20,
  2053                           ;main.c: 737: 3 );
  2054  001D74  0E14               	movlw	20
  2055  001D76  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2056  001D78  0E03               	movlw	3
  2057  001D7A  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2058  001D7C  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2059  001D7E  ECD5  F01A         	call	_SendInformationEvent
  2060  001D82                     l9827:
  2061                           
  2062                           ; BSR set to: 0
  2063                           ;main.c: 738: }
  2064                           ;main.c: 740: if ( ctrlreg & 0x20 ) {
  2065  001D82  ABD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  2066  001D84  D02C               	goto	l9839
  2067                           
  2068                           ; BSR set to: 0
  2069                           ;main.c: 741: SendInformationEvent( i, 20,
  2070                           ;main.c: 742: 25 );
  2071  001D86  0E14               	movlw	20
  2072  001D88  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2073  001D8A  0E19               	movlw	25
  2074  001D8C  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2075  001D8E  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2076  001D90  ECD5  F01A         	call	_SendInformationEvent
  2077  001D94  D024               	goto	l9839
  2078  001D96                     l226:
  2079                           
  2080                           ; BSR set to: 0
  2081                           ;main.c: 747: if ( ctrlreg & 0x10 ) {
  2082  001D96  A9D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  2083  001D98  D007               	goto	l9833
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;main.c: 748: SendInformationEvent( i, 20,
  2087                           ;main.c: 749: 4 );
  2088  001D9A  0E14               	movlw	20
  2089  001D9C  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2090  001D9E  0E04               	movlw	4
  2091  001DA0  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2092  001DA2  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2093  001DA4  ECD5  F01A         	call	_SendInformationEvent
  2094  001DA8                     l9833:
  2095                           
  2096                           ; BSR set to: 0
  2097                           ;main.c: 750: }
  2098                           ;main.c: 752: if (ctrlreg & 0x40) {
  2099  001DA8  ADD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),6,b
  2100  001DAA  D019               	goto	l9839
  2101                           
  2102                           ; BSR set to: 0
  2103                           ;main.c: 753: SendInformationEvent( i, 20,
  2104                           ;main.c: 754: 24 );
  2105  001DAC  0E14               	movlw	20
  2106  001DAE  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2107  001DB0  0E18               	movlw	24
  2108  001DB2  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2109  001DB4  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2110  001DB6  ECD5  F01A         	call	_SendInformationEvent
  2111  001DBA  D011               	goto	l9839
  2112  001DBC                     l9837:
  2113                           
  2114                           ; BSR set to: 0
  2115                           ;main.c: 761: else {
  2116                           ;main.c: 763: relay_pulse_timer[ 0 ] =
  2117                           ;main.c: 764: readEEPROM( 0x43 + 18 + 2*i ) * 256 +
  2118                           ;main.c: 765: readEEPROM( 0x43 + 19 + 2*i );
  2119  001DBC  D831               	call	PL54	;call to abstracted procedure
  2120  001DBE  EC6C  F01D         	call	_readEEPROM	;wreg free
  2121  001DC2  0100               	movlb	0	; () banked
  2122  001DC4  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2123  001DC6  D823               	call	PL52	;call to abstracted procedure
  2124  001DC8  EC6C  F01D         	call	_readEEPROM	;wreg free
  2125  001DCC  0100               	movlb	0	; () banked
  2126  001DCE  6FCE               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  2127  001DD0  6BCD               	clrf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2128  001DD2  51CC               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  2129  001DD4  25CD               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2130  001DD6  6F70               	movwf	_relay_pulse_timer& (0+255),b
  2131  001DD8  0E00               	movlw	0
  2132  001DDA  21CE               	addwfc	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2133  001DDC  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  2134  001DDE                     l9839:
  2135                           
  2136                           ; BSR set to: 0
  2137  001DDE  2BD1               	incf	doApplicationOneSecondWork@i& (0+255),f,b
  2138  001DE0  D6DD               	goto	l9751
  2139  001DE2                     l234:
  2140                           
  2141                           ; BSR set to: 0
  2142  001DE2  0012               	return	
  2143  001DE4                     __end_of_doApplicationOneSecondWork:
  2144                           	opt stack 0
  2145  001DE4                     PL20:
  2146                           	opt stack 22
  2147  001DE4  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2148  001DE6  0D02               	mullw	2
  2149  001DE8  50F3               	movf	prodl,w,c
  2150  001DEA  0F70               	addlw	low _relay_pulse_timer
  2151  001DEC  6ED9               	movwf	fsr2l,c
  2152  001DEE  6ADA               	clrf	fsr2h,c
  2153  001DF0  0012               	return	
  2154  001DF2                     __end_ofPL20:
  2155                           	opt stack 0
  2156  001DF2                     PL22:
  2157                           	opt stack 22
  2158  001DF2  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2159  001DF4  0D02               	mullw	2
  2160  001DF6  50F3               	movf	prodl,w,c
  2161  001DF8  0F60               	addlw	low _relay_protection_timer
  2162  001DFA  6ED9               	movwf	fsr2l,c
  2163  001DFC  6ADA               	clrf	fsr2h,c
  2164  001DFE  0012               	return	
  2165  001E00                     __end_ofPL22:
  2166                           	opt stack 0
  2167  001E00                     PL32:
  2168                           	opt stack 22
  2169  001E00  0E4D               	movlw	77
  2170  001E02  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  2171  001E04  6E08               	movwf	?_readEEPROM,c
  2172  001E06  6A09               	clrf	?_readEEPROM+1,c
  2173  001E08  0E00               	movlw	0
  2174  001E0A  2209               	addwfc	?_readEEPROM+1,f,c
  2175  001E0C  0C00               	retlw	0
  2176  001E0E                     __end_ofPL32:
  2177                           	opt stack 0
  2178  001E0E                     PL52:
  2179                           	opt stack 22
  2180  001E0E  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2181  001E10  0D02               	mullw	2
  2182  001E12  0E55               	movlw	85
  2183  001E14  24F3               	addwf	prodl,w,c
  2184  001E16  6E08               	movwf	?_readEEPROM,c
  2185  001E18  0E00               	movlw	0
  2186  001E1A  20F4               	addwfc	prodh,w,c
  2187  001E1C  6E09               	movwf	?_readEEPROM+1,c
  2188  001E1E  0012               	return	
  2189  001E20                     __end_ofPL52:
  2190                           	opt stack 0
  2191  001E20                     PL54:
  2192                           	opt stack 22
  2193  001E20  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2194  001E22  0D02               	mullw	2
  2195  001E24  0E56               	movlw	86
  2196  001E26  24F3               	addwf	prodl,w,c
  2197  001E28  6E08               	movwf	?_readEEPROM,c
  2198  001E2A  0E00               	movlw	0
  2199  001E2C  20F4               	addwfc	prodh,w,c
  2200  001E2E  6E09               	movwf	?_readEEPROM+1,c
  2201  001E30  0012               	return	
  2202  001E32                     __end_ofPL54:
  2203                           	opt stack 0
  2204                           tblptru	equ	0xFF8
  2205                           tblptrh	equ	0xFF7
  2206                           tblptrl	equ	0xFF6
  2207                           tablat	equ	0xFF5
  2208                           prodh	equ	0xFF4
  2209                           prodl	equ	0xFF3
  2210                           intcon	equ	0xFF2
  2211                           postinc0	equ	0xFEE
  2212                           wreg	equ	0xFE8
  2213                           indf1	equ	0xFE7
  2214                           fsr1h	equ	0xFE2
  2215                           fsr1l	equ	0xFE1
  2216                           indf2	equ	0xFDF
  2217                           postinc2	equ	0xFDE
  2218                           postdec2	equ	0xFDD
  2219                           plusw2	equ	0xFDB
  2220                           fsr2h	equ	0xFDA
  2221                           fsr2l	equ	0xFD9
  2222                           status	equ	0xFD8
  2223                           
  2224 ;; *************** function _vscp_doOneSecondWork *****************
  2225 ;; Defined at:
  2226 ;;		line 516 in file "../../vscp_firmware/common/vscp_firmware.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;		None
  2229 ;; Auto vars:     Size  Location     Type
  2230 ;;		None
  2231 ;; Return value:  Size  Location     Type
  2232 ;;		None               void
  2233 ;; Registers used:
  2234 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2235 ;; Tracked objects:
  2236 ;;		On entry : F/0
  2237 ;;		On exit  : F/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2240 ;;      Params:         0       0       0       0       0       0       0
  2241 ;;      Locals:         0       0       0       0       0       0       0
  2242 ;;      Temps:          1       0       0       0       0       0       0
  2243 ;;      Totals:         1       0       0       0       0       0       0
  2244 ;;Total ram usage:        1 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; Hardware stack levels required when called:    8
  2247 ;; This function calls:
  2248 ;;		_vscp_getZone
  2249 ;;		_vscp_getSubzone
  2250 ;;		_vscp_sendHeartBeat
  2251 ;; This function is called by:
  2252 ;;		_main
  2253 ;; This function uses a non-reentrant model
  2254 ;;
  2255                           
  2256                           	psect	text3
  2257  003616                     __ptext3:
  2258                           	opt stack 0
  2259  003616                     _vscp_doOneSecondWork:
  2260                           	opt stack 22
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;vscp_firmware.c: 518: ++vscp_second;
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;incstack = 0
  2267                           ;incstack = 0
  2268  003616  2B95               	incf	_vscp_second& (0+255),f,b
  2269                           
  2270                           ; BSR set to: 0
  2271                           ;vscp_firmware.c: 520: if (vscp_second > 59) {
  2272  003618  0E3B               	movlw	59
  2273  00361A  6595               	cpfsgt	_vscp_second& (0+255),b
  2274  00361C  D00D               	goto	l7875
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;vscp_firmware.c: 521: vscp_second = 0;
  2278  00361E  6B95               	clrf	_vscp_second& (0+255),b
  2279                           
  2280                           ; BSR set to: 0
  2281                           ;vscp_firmware.c: 522: vscp_minute++;
  2282  003620  2B90               	incf	_vscp_minute& (0+255),f,b
  2283                           
  2284                           ; BSR set to: 0
  2285                           ;vscp_firmware.c: 525: if (0x03 == vscp_node_state) {
  2286  003622  5192               	movf	_vscp_node_state& (0+255),w,b
  2287  003624  0A03               	xorlw	3
  2288  003626  E108               	bnz	l7875
  2289                           
  2290                           ; BSR set to: 0
  2291                           ;vscp_firmware.c: 526: vscp_sendHeartBeat(vscp_getZone(),
  2292                           ;vscp_firmware.c: 527: vscp_getSubzone());
  2293  003628  EC7E  F01D         	call	_vscp_getSubzone	;wreg free
  2294  00362C  0100               	movlb	0	; () banked
  2295  00362E  6FC5               	movwf	?_vscp_sendHeartBeat& (0+255),b
  2296  003630  EC83  F01D         	call	_vscp_getZone	;wreg free
  2297  003634  EC1E  F01C         	call	_vscp_sendHeartBeat
  2298  003638                     l7875:
  2299                           
  2300                           ; BSR set to: 0
  2301                           ;vscp_firmware.c: 528: }
  2302                           ;vscp_firmware.c: 529: }
  2303                           ;vscp_firmware.c: 531: if (vscp_minute > 59) {
  2304  003638  0E3B               	movlw	59
  2305  00363A  6590               	cpfsgt	_vscp_minute& (0+255),b
  2306  00363C  D002               	goto	l7881
  2307                           
  2308                           ; BSR set to: 0
  2309                           ;vscp_firmware.c: 532: vscp_minute = 0;
  2310  00363E  6B90               	clrf	_vscp_minute& (0+255),b
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;vscp_firmware.c: 533: vscp_hour++;
  2314  003640  2B8E               	incf	_vscp_hour& (0+255),f,b
  2315  003642                     l7881:
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;vscp_firmware.c: 534: }
  2319                           ;vscp_firmware.c: 536: if (vscp_hour > 23) vscp_hour = 0;
  2320  003642  0E17               	movlw	23
  2321  003644  658E               	cpfsgt	_vscp_hour& (0+255),b
  2322  003646  D001               	goto	l7885
  2323                           
  2324                           ; BSR set to: 0
  2325  003648  6B8E               	clrf	_vscp_hour& (0+255),b
  2326  00364A                     l7885:
  2327                           
  2328                           ; BSR set to: 0
  2329                           ;vscp_firmware.c: 540: if (0x03 == vscp_node_state) {
  2330  00364A  5192               	movf	_vscp_node_state& (0+255),w,b
  2331  00364C  0A03               	xorlw	3
  2332  00364E  E109               	bnz	l1104
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;vscp_firmware.c: 541: vscp_guid_reset++;
  2336  003650  2B8D               	incf	_vscp_guid_reset& (0+255),f,b
  2337                           
  2338                           ; BSR set to: 0
  2339                           ;vscp_firmware.c: 542: if ((vscp_guid_reset & 0x0f) >= 2) {
  2340  003652  C08D  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  2341  003656  0E0F               	movlw	15
  2342  003658  164D               	andwf	??_vscp_doOneSecondWork,f,c
  2343  00365A  0E02               	movlw	2
  2344  00365C  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  2345  00365E  B0D8               	btfsc	status,0,c
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;vscp_firmware.c: 543: vscp_guid_reset = 0;
  2349  003660  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  2350  003662                     l1104:
  2351                           
  2352                           ; BSR set to: 0
  2353  003662  0012               	return	
  2354  003664                     __end_of_vscp_doOneSecondWork:
  2355                           	opt stack 0
  2356                           tblptru	equ	0xFF8
  2357                           tblptrh	equ	0xFF7
  2358                           tblptrl	equ	0xFF6
  2359                           tablat	equ	0xFF5
  2360                           prodh	equ	0xFF4
  2361                           prodl	equ	0xFF3
  2362                           intcon	equ	0xFF2
  2363                           postinc0	equ	0xFEE
  2364                           wreg	equ	0xFE8
  2365                           indf1	equ	0xFE7
  2366                           fsr1h	equ	0xFE2
  2367                           fsr1l	equ	0xFE1
  2368                           indf2	equ	0xFDF
  2369                           postinc2	equ	0xFDE
  2370                           postdec2	equ	0xFDD
  2371                           plusw2	equ	0xFDB
  2372                           fsr2h	equ	0xFDA
  2373                           fsr2l	equ	0xFD9
  2374                           status	equ	0xFD8
  2375                           
  2376 ;; *************** function _vscp_sendHeartBeat *****************
  2377 ;; Defined at:
  2378 ;;		line 370 in file "../../vscp_firmware/common/vscp_firmware.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;  zone            1    wreg     unsigned char 
  2381 ;;  subzone         1   20[BANK0 ] unsigned char 
  2382 ;; Auto vars:     Size  Location     Type
  2383 ;;  zone            1   75[COMRAM] unsigned char 
  2384 ;; Return value:  Size  Location     Type
  2385 ;;		None               void
  2386 ;; Registers used:
  2387 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2388 ;; Tracked objects:
  2389 ;;		On entry : 0/0
  2390 ;;		On exit  : F/0
  2391 ;;		Unchanged: 0/0
  2392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2393 ;;      Params:         0       1       0       0       0       0       0
  2394 ;;      Locals:         1       0       0       0       0       0       0
  2395 ;;      Temps:          0       0       0       0       0       0       0
  2396 ;;      Totals:         1       1       0       0       0       0       0
  2397 ;;Total ram usage:        2 bytes
  2398 ;; Hardware stack levels used:    1
  2399 ;; Hardware stack levels required when called:    7
  2400 ;; This function calls:
  2401 ;;		_vscp_sendEvent
  2402 ;; This function is called by:
  2403 ;;		_vscp_doOneSecondWork
  2404 ;; This function uses a non-reentrant model
  2405 ;;
  2406                           
  2407                           	psect	text4
  2408  00383C                     __ptext4:
  2409                           	opt stack 0
  2410  00383C                     _vscp_sendHeartBeat:
  2411                           	opt stack 22
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;incstack = 0
  2415                           ;incstack = 0
  2416                           ;vscp_sendHeartBeat@zone stored from wreg
  2417  00383C  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  2418                           
  2419                           ;vscp_firmware.c: 371: vscp_omsg.flags = 0x80 + 3;
  2420  003840  0E83               	movlw	131
  2421  003842  0100               	movlb	0	; () banked
  2422  003844  6FA4               	movwf	_vscp_omsg& (0+255),b
  2423                           
  2424                           ;vscp_firmware.c: 372: vscp_omsg.priority = 0x07;
  2425  003846  0E07               	movlw	7
  2426  003848  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  2427                           
  2428                           ;vscp_firmware.c: 373: vscp_omsg.vscp_class = 20;
  2429  00384A  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  2430  00384C  0E14               	movlw	20
  2431  00384E  6FA6               	movwf	(_vscp_omsg+2)& (0+255),b
  2432                           
  2433                           ;vscp_firmware.c: 374: vscp_omsg.vscp_type = 9;
  2434  003850  0E09               	movlw	9
  2435  003852  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;vscp_firmware.c: 375: vscp_omsg.data[ 0 ] = 0;
  2439  003854  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;vscp_firmware.c: 376: vscp_omsg.data[ 1 ] = zone;
  2443  003856  C04C  F0AA         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;vscp_firmware.c: 377: vscp_omsg.data[ 2 ] = subzone;
  2447  00385A  C0C5  F0AB         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;vscp_firmware.c: 380: vscp_sendEvent();
  2451  00385E  EF31  F01C         	goto	_vscp_sendEvent	;wreg free
  2452  003862                     __end_of_vscp_sendHeartBeat:
  2453                           	opt stack 0
  2454                           tblptru	equ	0xFF8
  2455                           tblptrh	equ	0xFF7
  2456                           tblptrl	equ	0xFF6
  2457                           tablat	equ	0xFF5
  2458                           prodh	equ	0xFF4
  2459                           prodl	equ	0xFF3
  2460                           intcon	equ	0xFF2
  2461                           postinc0	equ	0xFEE
  2462                           wreg	equ	0xFE8
  2463                           indf1	equ	0xFE7
  2464                           fsr1h	equ	0xFE2
  2465                           fsr1l	equ	0xFE1
  2466                           indf2	equ	0xFDF
  2467                           postinc2	equ	0xFDE
  2468                           postdec2	equ	0xFDD
  2469                           plusw2	equ	0xFDB
  2470                           fsr2h	equ	0xFDA
  2471                           fsr2l	equ	0xFD9
  2472                           status	equ	0xFD8
  2473                           
  2474 ;; *************** function _vscp_getSubzone *****************
  2475 ;; Defined at:
  2476 ;;		line 876 in file "../main.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;		None
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;		None
  2481 ;; Return value:  Size  Location     Type
  2482 ;;                  1    wreg      unsigned char 
  2483 ;; Registers used:
  2484 ;;		wreg, status,2, cstack
  2485 ;; Tracked objects:
  2486 ;;		On entry : F/0
  2487 ;;		On exit  : 0/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2490 ;;      Params:         0       0       0       0       0       0       0
  2491 ;;      Locals:         0       0       0       0       0       0       0
  2492 ;;      Temps:          0       0       0       0       0       0       0
  2493 ;;      Totals:         0       0       0       0       0       0       0
  2494 ;;Total ram usage:        0 bytes
  2495 ;; Hardware stack levels used:    1
  2496 ;; Hardware stack levels required when called:    3
  2497 ;; This function calls:
  2498 ;;		_readEEPROM
  2499 ;; This function is called by:
  2500 ;;		_vscp_doOneSecondWork
  2501 ;; This function uses a non-reentrant model
  2502 ;;
  2503                           
  2504                           	psect	text5
  2505  003AFC                     __ptext5:
  2506                           	opt stack 0
  2507  003AFC                     _vscp_getSubzone:
  2508                           	opt stack 26
  2509                           
  2510                           ; BSR set to: 0
  2511                           ;main.c: 877: return readEEPROM( 0x43 + 1 );
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;incstack = 0
  2515                           ;incstack = 0
  2516  003AFC  6A09               	clrf	?_readEEPROM+1,c
  2517  003AFE  0E44               	movlw	68
  2518  003B00  6E08               	movwf	?_readEEPROM,c
  2519  003B02  EF6C  F01D         	goto	_readEEPROM	;wreg free
  2520  003B06                     __end_of_vscp_getSubzone:
  2521                           	opt stack 0
  2522                           tblptru	equ	0xFF8
  2523                           tblptrh	equ	0xFF7
  2524                           tblptrl	equ	0xFF6
  2525                           tablat	equ	0xFF5
  2526                           prodh	equ	0xFF4
  2527                           prodl	equ	0xFF3
  2528                           intcon	equ	0xFF2
  2529                           postinc0	equ	0xFEE
  2530                           wreg	equ	0xFE8
  2531                           indf1	equ	0xFE7
  2532                           fsr1h	equ	0xFE2
  2533                           fsr1l	equ	0xFE1
  2534                           indf2	equ	0xFDF
  2535                           postinc2	equ	0xFDE
  2536                           postdec2	equ	0xFDD
  2537                           plusw2	equ	0xFDB
  2538                           fsr2h	equ	0xFDA
  2539                           fsr2l	equ	0xFD9
  2540                           status	equ	0xFD8
  2541                           
  2542 ;; *************** function _vscp_getZone *****************
  2543 ;; Defined at:
  2544 ;;		line 867 in file "../main.c"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;		None
  2547 ;; Auto vars:     Size  Location     Type
  2548 ;;		None
  2549 ;; Return value:  Size  Location     Type
  2550 ;;                  1    wreg      unsigned char 
  2551 ;; Registers used:
  2552 ;;		wreg, status,2, cstack
  2553 ;; Tracked objects:
  2554 ;;		On entry : F/0
  2555 ;;		On exit  : 0/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2558 ;;      Params:         0       0       0       0       0       0       0
  2559 ;;      Locals:         0       0       0       0       0       0       0
  2560 ;;      Temps:          0       0       0       0       0       0       0
  2561 ;;      Totals:         0       0       0       0       0       0       0
  2562 ;;Total ram usage:        0 bytes
  2563 ;; Hardware stack levels used:    1
  2564 ;; Hardware stack levels required when called:    3
  2565 ;; This function calls:
  2566 ;;		_readEEPROM
  2567 ;; This function is called by:
  2568 ;;		_vscp_doOneSecondWork
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           	psect	text6
  2573  003B06                     __ptext6:
  2574                           	opt stack 0
  2575  003B06                     _vscp_getZone:
  2576                           	opt stack 26
  2577                           
  2578                           ; BSR set to: 0
  2579                           ;main.c: 868: return readEEPROM( 0x43 + 0 );
  2580                           
  2581                           ;incstack = 0
  2582                           ;incstack = 0
  2583  003B06  6A09               	clrf	?_readEEPROM+1,c
  2584  003B08  0E43               	movlw	67
  2585  003B0A  6E08               	movwf	?_readEEPROM,c
  2586  003B0C  EF6C  F01D         	goto	_readEEPROM	;wreg free
  2587  003B10                     __end_of_vscp_getZone:
  2588                           	opt stack 0
  2589                           tblptru	equ	0xFF8
  2590                           tblptrh	equ	0xFF7
  2591                           tblptrl	equ	0xFF6
  2592                           tablat	equ	0xFF5
  2593                           prodh	equ	0xFF4
  2594                           prodl	equ	0xFF3
  2595                           intcon	equ	0xFF2
  2596                           postinc0	equ	0xFEE
  2597                           wreg	equ	0xFE8
  2598                           indf1	equ	0xFE7
  2599                           fsr1h	equ	0xFE2
  2600                           fsr1l	equ	0xFE1
  2601                           indf2	equ	0xFDF
  2602                           postinc2	equ	0xFDE
  2603                           postdec2	equ	0xFDD
  2604                           plusw2	equ	0xFDB
  2605                           fsr2h	equ	0xFDA
  2606                           fsr2l	equ	0xFD9
  2607                           status	equ	0xFD8
  2608                           
  2609 ;; *************** function _vscp_error *****************
  2610 ;; Defined at:
  2611 ;;		line 191 in file "../../vscp_firmware/common/vscp_firmware.c"
  2612 ;; Parameters:    Size  Location     Type
  2613 ;;		None
  2614 ;; Auto vars:     Size  Location     Type
  2615 ;;		None
  2616 ;; Return value:  Size  Location     Type
  2617 ;;		None               void
  2618 ;; Registers used:
  2619 ;;		None
  2620 ;; Tracked objects:
  2621 ;;		On entry : 0/0
  2622 ;;		On exit  : 0/0
  2623 ;;		Unchanged: 0/0
  2624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2625 ;;      Params:         0       0       0       0       0       0       0
  2626 ;;      Locals:         0       0       0       0       0       0       0
  2627 ;;      Temps:          0       0       0       0       0       0       0
  2628 ;;      Totals:         0       0       0       0       0       0       0
  2629 ;;Total ram usage:        0 bytes
  2630 ;; Hardware stack levels used:    1
  2631 ;; Hardware stack levels required when called:    2
  2632 ;; This function calls:
  2633 ;;		Nothing
  2634 ;; This function is called by:
  2635 ;;		_main
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           	psect	text7
  2640  003B40                     __ptext7:
  2641                           	opt stack 0
  2642  003B40                     _vscp_error:
  2643                           	opt stack 28
  2644                           
  2645                           ;vscp_firmware.c: 192: vscp_initledfunc = 0x00;
  2646                           
  2647                           ;incstack = 0
  2648                           ;incstack = 0
  2649  003B40  6A56               	clrf	_vscp_initledfunc,c
  2650  003B42  0012               	return	
  2651  003B44                     __end_of_vscp_error:
  2652                           	opt stack 0
  2653                           tblptru	equ	0xFF8
  2654                           tblptrh	equ	0xFF7
  2655                           tblptrl	equ	0xFF6
  2656                           tablat	equ	0xFF5
  2657                           prodh	equ	0xFF4
  2658                           prodl	equ	0xFF3
  2659                           intcon	equ	0xFF2
  2660                           postinc0	equ	0xFEE
  2661                           wreg	equ	0xFE8
  2662                           indf1	equ	0xFE7
  2663                           fsr1h	equ	0xFE2
  2664                           fsr1l	equ	0xFE1
  2665                           indf2	equ	0xFDF
  2666                           postinc2	equ	0xFDE
  2667                           postdec2	equ	0xFDD
  2668                           plusw2	equ	0xFDB
  2669                           fsr2h	equ	0xFDA
  2670                           fsr2l	equ	0xFD9
  2671                           status	equ	0xFD8
  2672                           
  2673 ;; *************** function _doDM *****************
  2674 ;; Defined at:
  2675 ;;		line 1596 in file "../main.c"
  2676 ;; Parameters:    Size  Location     Type
  2677 ;;		None
  2678 ;; Auto vars:     Size  Location     Type
  2679 ;;  class_mask      2   33[BANK0 ] unsigned short 
  2680 ;;  class_filter    2   31[BANK0 ] unsigned short 
  2681 ;;  i               1   44[BANK0 ] unsigned char 
  2682 ;;  dmflags         1   43[BANK0 ] unsigned char 
  2683 ;;  type_mask       1   36[BANK0 ] unsigned char 
  2684 ;;  type_filter     1   35[BANK0 ] unsigned char 
  2685 ;; Return value:  Size  Location     Type
  2686 ;;		None               void
  2687 ;; Registers used:
  2688 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2689 ;; Tracked objects:
  2690 ;;		On entry : 0/0
  2691 ;;		On exit  : F/0
  2692 ;;		Unchanged: 0/0
  2693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2694 ;;      Params:         0       0       0       0       0       0       0
  2695 ;;      Locals:         0      14       0       0       0       0       0
  2696 ;;      Temps:          0       3       0       0       0       0       0
  2697 ;;      Totals:         0      17       0       0       0       0       0
  2698 ;;Total ram usage:       17 bytes
  2699 ;; Hardware stack levels used:    1
  2700 ;; Hardware stack levels required when called:    8
  2701 ;; This function calls:
  2702 ;;		_readEEPROM
  2703 ;;		_doActionOff
  2704 ;;		_doActionOn
  2705 ;;		_doActionPulse
  2706 ;;		_doActionStatus
  2707 ;;		_doActionDisable
  2708 ;;		_doActionToggle
  2709 ;; This function is called by:
  2710 ;;		_main
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text8
  2715  00209C                     __ptext8:
  2716                           	opt stack 0
  2717  00209C                     _doDM:
  2718                           	opt stack 22
  2719                           
  2720                           ;main.c: 1597: unsigned char i;
  2721                           ;main.c: 1598: unsigned char dmflags;
  2722                           ;main.c: 1599: unsigned short class_filter;
  2723                           ;main.c: 1600: unsigned short class_mask;
  2724                           ;main.c: 1601: unsigned char type_filter;
  2725                           ;main.c: 1602: unsigned char type_mask;
  2726                           ;main.c: 1605: if ( 0 == vscp_imsg.vscp_class ) return;
  2727                           
  2728                           ;incstack = 0
  2729                           ;incstack = 0
  2730  00209C  0100               	movlb	0	; () banked
  2731  00209E  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  2732  0020A0  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  2733  0020A2  E101 D0F5          	bz	l411
  2734                           
  2735                           ; BSR set to: 0
  2736                           ;main.c: 1607: for (i = 0; i < 7; i++) {
  2737  0020A6  6BDD               	clrf	doDM@i& (0+255),b
  2738  0020A8                     l9693:
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;main.c: 1610: dmflags = readEEPROM( 0x43 + 72 + 1 + (8 * i) );
  2742  0020A8  D8F4               	call	PL2	;call to abstracted procedure
  2743  0020AA  0E8C               	movlw	140
  2744  0020AC  25CD               	addwf	??_doDM& (0+255),w,b
  2745  0020AE  6E08               	movwf	?_readEEPROM,c
  2746  0020B0  0E00               	movlw	0
  2747  0020B2  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2748  0020B4  6E09               	movwf	?_readEEPROM+1,c
  2749  0020B6  EC6C  F01D         	call	_readEEPROM	;wreg free
  2750  0020BA  0100               	movlb	0	; () banked
  2751  0020BC  6FDC               	movwf	doDM@dmflags& (0+255),b
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;main.c: 1613: if ( dmflags & 0x80 ) {
  2755  0020BE  AFDC               	btfss	doDM@dmflags& (0+255),7,b
  2756  0020C0  D0E2               	goto	l9745
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;main.c: 1616: if ( ( dmflags & 0x40 ) &&
  2760                           ;main.c: 1617: ( vscp_imsg.oaddr != readEEPROM( 0x43 + 72 + (8 * i) ) ) ) {
  2761  0020C2  ADDC               	btfss	doDM@dmflags& (0+255),6,b
  2762  0020C4  D018               	goto	l415
  2763                           
  2764                           ; BSR set to: 0
  2765  0020C6  51DD               	movf	doDM@i& (0+255),w,b
  2766  0020C8  6FCD               	movwf	??_doDM& (0+255),b
  2767  0020CA  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2768  0020CC  90D8               	bcf	status,0,c
  2769  0020CE  37CD               	rlcf	??_doDM& (0+255),f,b
  2770  0020D0  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2771  0020D2  90D8               	bcf	status,0,c
  2772  0020D4  37CD               	rlcf	??_doDM& (0+255),f,b
  2773  0020D6  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2774  0020D8  90D8               	bcf	status,0,c
  2775  0020DA  37CD               	rlcf	??_doDM& (0+255),f,b
  2776  0020DC  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2777  0020DE  0E8B               	movlw	139
  2778  0020E0  25CD               	addwf	??_doDM& (0+255),w,b
  2779  0020E2  6E08               	movwf	?_readEEPROM,c
  2780  0020E4  0E00               	movlw	0
  2781  0020E6  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2782  0020E8  6E09               	movwf	?_readEEPROM+1,c
  2783  0020EA  EC6C  F01D         	call	_readEEPROM	;wreg free
  2784  0020EE  0100               	movlb	0	; () banked
  2785  0020F0  199B               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  2786  0020F2  E001 D0C8          	bnz	l9745
  2787  0020F6                     l415:
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;main.c: 1619: }
  2791                           ;main.c: 1622: if ( dmflags & 0x10 ) {
  2792  0020F6  A9DC               	btfss	doDM@dmflags& (0+255),4,b
  2793  0020F8  D00B               	goto	l9709
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;main.c: 1623: if ( 255 != vscp_imsg.data[ 1 ] ) {
  2797  0020FA  299D               	incf	(_vscp_imsg+7)& (0+255),w,b
  2798  0020FC  E009               	bz	l9709
  2799                           
  2800                           ; BSR set to: 0
  2801                           ;main.c: 1624: if ( vscp_imsg.data[ 1 ] != readEEPROM( 0x43 + 0 ) ) {
  2802  0020FE  6A09               	clrf	?_readEEPROM+1,c
  2803  002100  0E43               	movlw	67
  2804  002102  6E08               	movwf	?_readEEPROM,c
  2805  002104  EC6C  F01D         	call	_readEEPROM	;wreg free
  2806  002108  0100               	movlb	0	; () banked
  2807  00210A  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2808  00210C  E001 D0BB          	bnz	l9745
  2809  002110                     l9709:
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;main.c: 1626: }
  2813                           ;main.c: 1627: }
  2814                           ;main.c: 1628: }
  2815                           ;main.c: 1630: class_filter = ( dmflags & 0x01)*256 +
  2816                           ;main.c: 1631: readEEPROM( 0x43 +
  2817                           ;main.c: 1632: 72 +
  2818                           ;main.c: 1633: (8 * i) +
  2819                           ;main.c: 1634: 3);
  2820  002110  51DD               	movf	doDM@i& (0+255),w,b
  2821  002112  0D08               	mullw	8
  2822  002114  0E8E               	movlw	142
  2823  002116  24F3               	addwf	prodl,w,c
  2824  002118  6E08               	movwf	?_readEEPROM,c
  2825  00211A  0E00               	movlw	0
  2826  00211C  20F4               	addwfc	prodh,w,c
  2827  00211E  6E09               	movwf	?_readEEPROM+1,c
  2828  002120  EC6C  F01D         	call	_readEEPROM	;wreg free
  2829  002124  0100               	movlb	0	; () banked
  2830  002126  6FCD               	movwf	??_doDM& (0+255),b
  2831  002128  51DC               	movf	doDM@dmflags& (0+255),w,b
  2832  00212A  0B01               	andlw	1
  2833  00212C  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2834  00212E  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2835  002130  51CD               	movf	??_doDM& (0+255),w,b
  2836  002132  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2837  002134  6FD0               	movwf	doDM@class_filter& (0+255),b
  2838  002136  0E00               	movlw	0
  2839  002138  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2840  00213A  6FD1               	movwf	(doDM@class_filter+1)& (0+255),b
  2841                           
  2842                           ;main.c: 1635: class_mask = ( dmflags & 0x02)*256 +
  2843                           ;main.c: 1636: readEEPROM( 0x43 +
  2844                           ;main.c: 1637: 72 +
  2845                           ;main.c: 1638: (8 * i) +
  2846                           ;main.c: 1639: 2);
  2847  00213C  51DD               	movf	doDM@i& (0+255),w,b
  2848  00213E  0D08               	mullw	8
  2849  002140  0E8D               	movlw	141
  2850  002142  24F3               	addwf	prodl,w,c
  2851  002144  6E08               	movwf	?_readEEPROM,c
  2852  002146  0E00               	movlw	0
  2853  002148  20F4               	addwfc	prodh,w,c
  2854  00214A  6E09               	movwf	?_readEEPROM+1,c
  2855  00214C  EC6C  F01D         	call	_readEEPROM	;wreg free
  2856  002150  0100               	movlb	0	; () banked
  2857  002152  6FCD               	movwf	??_doDM& (0+255),b
  2858  002154  51DC               	movf	doDM@dmflags& (0+255),w,b
  2859  002156  0B02               	andlw	2
  2860  002158  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2861  00215A  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2862  00215C  51CD               	movf	??_doDM& (0+255),w,b
  2863  00215E  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2864  002160  6FD2               	movwf	doDM@class_mask& (0+255),b
  2865  002162  0E00               	movlw	0
  2866  002164  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2867  002166  6FD3               	movwf	(doDM@class_mask+1)& (0+255),b
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;main.c: 1640: type_filter = readEEPROM( 0x43 +
  2871                           ;main.c: 1641: 72 +
  2872                           ;main.c: 1642: (8 * i) +
  2873                           ;main.c: 1643: 5);
  2874  002168  D894               	call	PL2	;call to abstracted procedure
  2875  00216A  0E90               	movlw	144
  2876  00216C  25CD               	addwf	??_doDM& (0+255),w,b
  2877  00216E  6E08               	movwf	?_readEEPROM,c
  2878  002170  0E00               	movlw	0
  2879  002172  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2880  002174  6E09               	movwf	?_readEEPROM+1,c
  2881  002176  EC6C  F01D         	call	_readEEPROM	;wreg free
  2882  00217A  0100               	movlb	0	; () banked
  2883  00217C  6FD4               	movwf	doDM@type_filter& (0+255),b
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;main.c: 1644: type_mask = readEEPROM( 0x43 +
  2887                           ;main.c: 1645: 72 +
  2888                           ;main.c: 1646: (8 * i) +
  2889                           ;main.c: 1647: 4);
  2890  00217E  D889               	call	PL2	;call to abstracted procedure
  2891  002180  0E8F               	movlw	143
  2892  002182  25CD               	addwf	??_doDM& (0+255),w,b
  2893  002184  6E08               	movwf	?_readEEPROM,c
  2894  002186  0E00               	movlw	0
  2895  002188  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2896  00218A  6E09               	movwf	?_readEEPROM+1,c
  2897  00218C  EC6C  F01D         	call	_readEEPROM	;wreg free
  2898  002190  0100               	movlb	0	; () banked
  2899  002192  6FD5               	movwf	doDM@type_mask& (0+255),b
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;main.c: 1649: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2903                           ;main.c: 1650: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2904  002194  EE20  F098         	lfsr	2,_vscp_imsg+2
  2905  002198  CFDE F0CD          	movff	postinc2,??_doDM
  2906  00219C  CFDD F0CE          	movff	postdec2,??_doDM+1
  2907  0021A0  51D0               	movf	doDM@class_filter& (0+255),w,b
  2908  0021A2  1BCD               	xorwf	??_doDM& (0+255),f,b
  2909  0021A4  51D1               	movf	(doDM@class_filter+1)& (0+255),w,b
  2910  0021A6  1BCE               	xorwf	(??_doDM+1)& (0+255),f,b
  2911  0021A8  51D2               	movf	doDM@class_mask& (0+255),w,b
  2912  0021AA  17CD               	andwf	??_doDM& (0+255),f,b
  2913  0021AC  51D3               	movf	(doDM@class_mask+1)& (0+255),w,b
  2914  0021AE  17CE               	andwf	(??_doDM+1)& (0+255),f,b
  2915  0021B0  51CE               	movf	(??_doDM+1)& (0+255),w,b
  2916  0021B2  11CD               	iorwf	??_doDM& (0+255),w,b
  2917  0021B4  E168               	bnz	l9745
  2918                           
  2919                           ; BSR set to: 0
  2920  0021B6  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  2921  0021B8  19D4               	xorwf	doDM@type_filter& (0+255),w,b
  2922  0021BA  15D5               	andwf	doDM@type_mask& (0+255),w,b
  2923  0021BC  E04F               	bz	l9743
  2924  0021BE  D063               	goto	l9745
  2925  0021C0                     l9721:
  2926                           
  2927                           ;main.c: 1656: doActionOn( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2928  0021C0  0100               	movlb	0	; () banked
  2929  0021C2  D867               	call	PL2	;call to abstracted procedure
  2930  0021C4  D873               	call	PL16	;call to abstracted procedure
  2931  0021C6  EC6C  F01D         	call	_readEEPROM	;wreg free
  2932  0021CA  0100               	movlb	0	; () banked
  2933  0021CC  6FD6               	movwf	_doDM$2146& (0+255),b
  2934                           
  2935                           ; BSR set to: 0
  2936                           ;main.c: 1656: doActionOn( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2937  0021CE  C0D6  F051         	movff	_doDM$2146,?_doActionOn
  2938  0021D2  51DC               	movf	doDM@dmflags& (0+255),w,b
  2939  0021D4  EC19  F00F         	call	_doActionOn
  2940                           
  2941                           ;main.c: 1657: break;
  2942  0021D8  D056               	goto	l9745
  2943  0021DA                     l9725:
  2944                           
  2945                           ;main.c: 1660: doActionOff( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2946  0021DA  0100               	movlb	0	; () banked
  2947  0021DC  D85A               	call	PL2	;call to abstracted procedure
  2948  0021DE  D866               	call	PL16	;call to abstracted procedure
  2949  0021E0  EC6C  F01D         	call	_readEEPROM	;wreg free
  2950  0021E4  0100               	movlb	0	; () banked
  2951  0021E6  6FD7               	movwf	_doDM$2147& (0+255),b
  2952                           
  2953                           ; BSR set to: 0
  2954                           ;main.c: 1660: doActionOff( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2955  0021E8  C0D7  F051         	movff	_doDM$2147,?_doActionOff
  2956  0021EC  51DC               	movf	doDM@dmflags& (0+255),w,b
  2957  0021EE  EC6D  F018         	call	_doActionOff
  2958                           
  2959                           ;main.c: 1661: break;
  2960  0021F2  D049               	goto	l9745
  2961  0021F4                     l9729:
  2962                           
  2963                           ;main.c: 1664: doActionPulse( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2964  0021F4  0100               	movlb	0	; () banked
  2965  0021F6  D84D               	call	PL2	;call to abstracted procedure
  2966  0021F8  D859               	call	PL16	;call to abstracted procedure
  2967  0021FA  EC6C  F01D         	call	_readEEPROM	;wreg free
  2968  0021FE  0100               	movlb	0	; () banked
  2969  002200  6FD8               	movwf	_doDM$2148& (0+255),b
  2970                           
  2971                           ;main.c: 1664: doActionPulse( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2972  002202  C0D8  F00B         	movff	_doDM$2148,?_doActionPulse
  2973  002206  51DC               	movf	doDM@dmflags& (0+255),w,b
  2974  002208  EC61  F012         	call	_doActionPulse
  2975                           
  2976                           ;main.c: 1665: break;
  2977  00220C  D03C               	goto	l9745
  2978  00220E                     l9731:
  2979                           
  2980                           ;main.c: 1668: doActionStatus( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2981  00220E  0100               	movlb	0	; () banked
  2982  002210  D840               	call	PL2	;call to abstracted procedure
  2983  002212  D84C               	call	PL16	;call to abstracted procedure
  2984  002214  EC6C  F01D         	call	_readEEPROM	;wreg free
  2985  002218  0100               	movlb	0	; () banked
  2986  00221A  6FD9               	movwf	_doDM$2149& (0+255),b
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;main.c: 1668: doActionStatus( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2990  00221C  C0D9  F051         	movff	_doDM$2149,?_doActionStatus
  2991  002220  51DC               	movf	doDM@dmflags& (0+255),w,b
  2992  002222  EC82  F016         	call	_doActionStatus
  2993                           
  2994                           ;main.c: 1669: break;
  2995  002226  D02F               	goto	l9745
  2996  002228                     l9735:
  2997                           
  2998                           ;main.c: 1672: doActionDisable( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2999  002228  0100               	movlb	0	; () banked
  3000  00222A  D833               	call	PL2	;call to abstracted procedure
  3001  00222C  D83F               	call	PL16	;call to abstracted procedure
  3002  00222E  EC6C  F01D         	call	_readEEPROM	;wreg free
  3003  002232  0100               	movlb	0	; () banked
  3004  002234  6FDA               	movwf	_doDM$2150& (0+255),b
  3005                           
  3006                           ;main.c: 1672: doActionDisable( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3007  002236  C0DA  F00B         	movff	_doDM$2150,?_doActionDisable
  3008  00223A  51DC               	movf	doDM@dmflags& (0+255),w,b
  3009  00223C  EC9F  F01A         	call	_doActionDisable
  3010                           
  3011                           ;main.c: 1673: break;
  3012  002240  D022               	goto	l9745
  3013  002242                     l9737:
  3014                           
  3015                           ;main.c: 1676: doActionToggle( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3016  002242  0100               	movlb	0	; () banked
  3017  002244  D826               	call	PL2	;call to abstracted procedure
  3018  002246  D832               	call	PL16	;call to abstracted procedure
  3019  002248  EC6C  F01D         	call	_readEEPROM	;wreg free
  3020  00224C  0100               	movlb	0	; () banked
  3021  00224E  6FDB               	movwf	_doDM$2151& (0+255),b
  3022                           
  3023                           ; BSR set to: 0
  3024                           ;main.c: 1676: doActionToggle( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3025  002250  C0DB  F051         	movff	_doDM$2151,?_doActionToggle
  3026  002254  51DC               	movf	doDM@dmflags& (0+255),w,b
  3027  002256  ECD9  F014         	call	_doActionToggle
  3028                           
  3029                           ;main.c: 1677: break;
  3030  00225A  D015               	goto	l9745
  3031  00225C                     l9743:
  3032                           
  3033                           ; BSR set to: 0
  3034  00225C  D81A               	call	PL2	;call to abstracted procedure
  3035  00225E  0E91               	movlw	145
  3036  002260  25CD               	addwf	??_doDM& (0+255),w,b
  3037  002262  6E08               	movwf	?_readEEPROM,c
  3038  002264  0E00               	movlw	0
  3039  002266  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  3040  002268  6E09               	movwf	?_readEEPROM+1,c
  3041  00226A  EC6C  F01D         	call	_readEEPROM	;wreg free
  3042                           
  3043                           ; Switch size 1, requested type "space"
  3044                           ; Number of cases is 6, Range of values is 1 to 16
  3045                           ; switch strategies available:
  3046                           ; Name         Instructions Cycles
  3047                           ; simple_byte           19    10 (average)
  3048                           ;	Chosen strategy is simple_byte
  3049  00226E  0A01               	xorlw	1	; case 1
  3050  002270  E0A7               	bz	l9721
  3051  002272  0A03               	xorlw	3	; case 2
  3052  002274  E0B2               	bz	l9725
  3053  002276  0A01               	xorlw	1	; case 3
  3054  002278  E0BD               	bz	l9729
  3055  00227A  0A07               	xorlw	7	; case 4
  3056  00227C  E0E2               	bz	l9737
  3057  00227E  0A0E               	xorlw	14	; case 10
  3058  002280  E0C6               	bz	l9731
  3059  002282  0A1A               	xorlw	26	; case 16
  3060  002284  E0D1               	bz	l9735
  3061  002286                     l9745:
  3062  002286  0100               	movlb	0	; () banked
  3063  002288  2BDD               	incf	doDM@i& (0+255),f,b
  3064                           
  3065                           ; BSR set to: 0
  3066  00228A  0E06               	movlw	6
  3067  00228C  65DD               	cpfsgt	doDM@i& (0+255),b
  3068  00228E  D70C               	goto	l9693
  3069  002290                     l411:
  3070                           
  3071                           ; BSR set to: 0
  3072  002290  0012               	return	
  3073  002292                     __end_of_doDM:
  3074                           	opt stack 0
  3075  002292                     PL2:
  3076                           	opt stack 22
  3077  002292  51DD               	movf	doDM@i& (0+255),w,b
  3078  002294  6FCD               	movwf	??_doDM& (0+255),b
  3079  002296  6BCE               	clrf	(??_doDM+1)& (0+255),b
  3080  002298  90D8               	bcf	status,0,c
  3081  00229A  37CD               	rlcf	??_doDM& (0+255),f,b
  3082  00229C  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  3083  00229E  90D8               	bcf	status,0,c
  3084  0022A0  37CD               	rlcf	??_doDM& (0+255),f,b
  3085  0022A2  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  3086  0022A4  90D8               	bcf	status,0,c
  3087  0022A6  37CD               	rlcf	??_doDM& (0+255),f,b
  3088  0022A8  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  3089  0022AA  0012               	return	
  3090  0022AC                     __end_ofPL2:
  3091                           	opt stack 0
  3092  0022AC                     PL16:
  3093                           	opt stack 22
  3094  0022AC  0E92               	movlw	146
  3095  0022AE  25CD               	addwf	??_doDM& (0+255),w,b
  3096  0022B0  6E08               	movwf	?_readEEPROM,c
  3097  0022B2  0E00               	movlw	0
  3098  0022B4  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  3099  0022B6  6E09               	movwf	?_readEEPROM+1,c
  3100  0022B8  0012               	return	
  3101  0022BA                     __end_ofPL16:
  3102                           	opt stack 0
  3103                           tblptru	equ	0xFF8
  3104                           tblptrh	equ	0xFF7
  3105                           tblptrl	equ	0xFF6
  3106                           tablat	equ	0xFF5
  3107                           prodh	equ	0xFF4
  3108                           prodl	equ	0xFF3
  3109                           intcon	equ	0xFF2
  3110                           postinc0	equ	0xFEE
  3111                           wreg	equ	0xFE8
  3112                           indf1	equ	0xFE7
  3113                           fsr1h	equ	0xFE2
  3114                           fsr1l	equ	0xFE1
  3115                           indf2	equ	0xFDF
  3116                           postinc2	equ	0xFDE
  3117                           postdec2	equ	0xFDD
  3118                           plusw2	equ	0xFDB
  3119                           fsr2h	equ	0xFDA
  3120                           fsr2l	equ	0xFD9
  3121                           status	equ	0xFD8
  3122                           
  3123 ;; *************** function _doActionToggle *****************
  3124 ;; Defined at:
  3125 ;;		line 2088 in file "../main.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;  dmflags         1    wreg     unsigned char 
  3128 ;;  arg             1   80[COMRAM] unsigned char 
  3129 ;; Auto vars:     Size  Location     Type
  3130 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3131 ;;  i               1   27[BANK0 ] unsigned char 
  3132 ;;  bOn             1   26[BANK0 ] enum E15660
  3133 ;;  val             1   25[BANK0 ] unsigned char 
  3134 ;; Return value:  Size  Location     Type
  3135 ;;		None               void
  3136 ;; Registers used:
  3137 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3138 ;; Tracked objects:
  3139 ;;		On entry : F/0
  3140 ;;		On exit  : F/0
  3141 ;;		Unchanged: 0/0
  3142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3143 ;;      Params:         1       0       0       0       0       0       0
  3144 ;;      Locals:         0       4       0       0       0       0       0
  3145 ;;      Temps:          0       2       0       0       0       0       0
  3146 ;;      Totals:         1       6       0       0       0       0       0
  3147 ;;Total ram usage:        7 bytes
  3148 ;; Hardware stack levels used:    1
  3149 ;; Hardware stack levels required when called:    7
  3150 ;; This function calls:
  3151 ;;		_readEEPROM
  3152 ;;		_SendInformationEvent
  3153 ;; This function is called by:
  3154 ;;		_doDM
  3155 ;; This function uses a non-reentrant model
  3156 ;;
  3157                           
  3158                           	psect	text9
  3159  0029B2                     __ptext9:
  3160                           	opt stack 0
  3161  0029B2                     _doActionToggle:
  3162                           	opt stack 22
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;incstack = 0
  3166                           ;incstack = 0
  3167                           ;doActionToggle@dmflags stored from wreg
  3168  0029B2  CFE8 F0C9          	movff	wreg,doActionToggle@dmflags
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;main.c: 2090: unsigned char i;
  3172                           ;main.c: 2091: unsigned char val;
  3173                           ;main.c: 2092: BOOL bOn = 0;
  3174  0029B6  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3175                           
  3176                           ;main.c: 2094: for ( i = 0; i < 8; i++ ) {
  3177  0029B8  6BCC               	clrf	doActionToggle@i& (0+255),b
  3178  0029BA                     l10363:
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;main.c: 2097: if ( !( arg & (1 << i) ) ) continue;
  3182  0029BA  C0CC  F0C7         	movff	doActionToggle@i,??_doActionToggle
  3183  0029BE  0E01               	movlw	1
  3184  0029C0  6FC8               	movwf	(??_doActionToggle+1)& (0+255),b
  3185  0029C2  2BC7               	incf	??_doActionToggle& (0+255),f,b
  3186  0029C4  D002               	goto	u13104
  3187  0029C6                     u13105:
  3188  0029C6  90D8               	bcf	status,0,c
  3189  0029C8  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3190  0029CA                     u13104:
  3191  0029CA  2FC7               	decfsz	??_doActionToggle& (0+255),f,b
  3192  0029CC  D7FC               	goto	u13105
  3193  0029CE  51C8               	movf	(??_doActionToggle+1)& (0+255),w,b
  3194  0029D0  1451               	andwf	doActionToggle@arg,w,c
  3195  0029D2  E07A               	bz	l10421
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;main.c: 2100: if ( dmflags & 0x08 ) {
  3199  0029D4  A7C9               	btfss	doActionToggle@dmflags& (0+255),3,b
  3200  0029D6  D00B               	goto	l10371
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;main.c: 2101: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3204                           ;main.c: 2102: 53 +
  3205                           ;main.c: 2103: i ) ) {
  3206  0029D8  0E78               	movlw	120
  3207  0029DA  25CC               	addwf	doActionToggle@i& (0+255),w,b
  3208  0029DC  6E08               	movwf	?_readEEPROM,c
  3209  0029DE  6A09               	clrf	?_readEEPROM+1,c
  3210  0029E0  0E00               	movlw	0
  3211  0029E2  2209               	addwfc	?_readEEPROM+1,f,c
  3212  0029E4  EC6C  F01D         	call	_readEEPROM	;wreg free
  3213  0029E8  0100               	movlb	0	; () banked
  3214  0029EA  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3215  0029EC  E16D               	bnz	l10421
  3216  0029EE                     l10371:
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;main.c: 2105: }
  3220                           ;main.c: 2106: }
  3221                           ;main.c: 2108: val = readEEPROM(0x43 + 10 + i);
  3222  0029EE  0E4D               	movlw	77
  3223  0029F0  25CC               	addwf	doActionToggle@i& (0+255),w,b
  3224  0029F2  6E08               	movwf	?_readEEPROM,c
  3225  0029F4  6A09               	clrf	?_readEEPROM+1,c
  3226  0029F6  0E00               	movlw	0
  3227  0029F8  2209               	addwfc	?_readEEPROM+1,f,c
  3228  0029FA  EC6C  F01D         	call	_readEEPROM	;wreg free
  3229  0029FE  0100               	movlb	0	; () banked
  3230  002A00  6FCA               	movwf	doActionToggle@val& (0+255),b
  3231                           
  3232                           ;main.c: 2110: switch ( i ) {
  3233  002A02  D02D               	goto	l10403
  3234  002A04                     l539:
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;main.c: 2113: if ( LATBbits.LATB4 ) {
  3238  002A04  A88A               	btfss	3978,4,c	;volatile
  3239  002A06  D002               	goto	l540
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;main.c: 2114: LATBbits.LATB4 = 0;
  3243  002A08  988A               	bcf	3978,4,c	;volatile
  3244  002A0A  D025               	goto	L12
  3245  002A0C                     l540:
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;main.c: 2117: LATBbits.LATB4 = 1;
  3249  002A0C  888A               	bsf	3978,4,c	;volatile
  3250  002A0E                     l10375:
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;main.c: 2118: bOn = 1;
  3254  002A0E  0E01               	movlw	1
  3255  002A10  6FCB               	movwf	doActionToggle@bOn& (0+255),b
  3256  002A12  D033               	goto	l10405
  3257  002A14                     l543:
  3258                           
  3259                           ; BSR set to: 0
  3260                           ;main.c: 2123: if ( LATBbits.LATB1 ) {
  3261  002A14  A28A               	btfss	3978,1,c	;volatile
  3262  002A16  D002               	goto	l544
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;main.c: 2124: LATBbits.LATB1 = 0;
  3266  002A18  928A               	bcf	3978,1,c	;volatile
  3267  002A1A  D01D               	goto	L12
  3268  002A1C                     l544:
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;main.c: 2127: LATBbits.LATB1 = 1;
  3272  002A1C  828A               	bsf	3978,1,c	;volatile
  3273  002A1E  D7F7               	goto	l10375
  3274  002A20                     l546:
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;main.c: 2133: if ( LATBbits.LATB0 ) {
  3278  002A20  A08A               	btfss	3978,0,c	;volatile
  3279  002A22  D002               	goto	l547
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;main.c: 2134: LATBbits.LATB0 = 0;
  3283  002A24  908A               	bcf	3978,0,c	;volatile
  3284  002A26  D017               	goto	L12
  3285  002A28                     l547:
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;main.c: 2137: LATBbits.LATB0 = 1;
  3289  002A28  808A               	bsf	3978,0,c	;volatile
  3290  002A2A  D7F1               	goto	l10375
  3291  002A2C                     l549:
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;main.c: 2143: if ( LATCbits.LATC7 ) {
  3295  002A2C  AE8B               	btfss	3979,7,c	;volatile
  3296  002A2E  D002               	goto	l550
  3297                           
  3298                           ; BSR set to: 0
  3299                           ;main.c: 2144: LATCbits.LATC7 = 0;
  3300  002A30  9E8B               	bcf	3979,7,c	;volatile
  3301  002A32  D011               	goto	L12
  3302  002A34                     l550:
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;main.c: 2147: LATCbits.LATC7 = 1;
  3306  002A34  8E8B               	bsf	3979,7,c	;volatile
  3307  002A36  D7EB               	goto	l10375
  3308  002A38                     l552:
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;main.c: 2153: if ( LATCbits.LATC6 ) {
  3312  002A38  AC8B               	btfss	3979,6,c	;volatile
  3313  002A3A  D002               	goto	l553
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;main.c: 2154: LATCbits.LATC6 = 0;
  3317  002A3C  9C8B               	bcf	3979,6,c	;volatile
  3318  002A3E  D00B               	goto	L12
  3319  002A40                     l553:
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;main.c: 2157: LATCbits.LATC6 = 1;
  3323  002A40  8C8B               	bsf	3979,6,c	;volatile
  3324  002A42  D7E5               	goto	l10375
  3325  002A44                     l555:
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;main.c: 2163: if ( LATCbits.LATC5 ) {
  3329  002A44  AA8B               	btfss	3979,5,c	;volatile
  3330  002A46  D002               	goto	l556
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;main.c: 2164: LATCbits.LATC5 = 0;
  3334  002A48  9A8B               	bcf	3979,5,c	;volatile
  3335  002A4A  D005               	goto	L12
  3336  002A4C                     l556:
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;main.c: 2167: LATCbits.LATC5 = 1;
  3340  002A4C  8A8B               	bsf	3979,5,c	;volatile
  3341  002A4E  D7DF               	goto	l10375
  3342  002A50                     l558:
  3343                           
  3344                           ; BSR set to: 0
  3345                           ;main.c: 2173: if ( LATCbits.LATC4 ) {
  3346  002A50  A88B               	btfss	3979,4,c	;volatile
  3347  002A52  D003               	goto	l559
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;main.c: 2174: LATCbits.LATC4 = 0;
  3351  002A54  988B               	bcf	3979,4,c	;volatile
  3352  002A56                     L12:
  3353                           
  3354                           ;main.c: 2175: bOn = 0;
  3355  002A56  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3356                           
  3357                           ;main.c: 2176: } else {
  3358  002A58  D010               	goto	l10405
  3359  002A5A                     l559:
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;main.c: 2177: LATCbits.LATC4 = 1;
  3363  002A5A  888B               	bsf	3979,4,c	;volatile
  3364  002A5C  D7D8               	goto	l10375
  3365  002A5E                     l10403:
  3366                           
  3367                           ; BSR set to: 0
  3368  002A5E  51CC               	movf	doActionToggle@i& (0+255),w,b
  3369                           
  3370                           ; Switch size 1, requested type "space"
  3371                           ; Number of cases is 7, Range of values is 0 to 6
  3372                           ; switch strategies available:
  3373                           ; Name         Instructions Cycles
  3374                           ; simple_byte           22    12 (average)
  3375                           ;	Chosen strategy is simple_byte
  3376  002A60  E0D1               	bz	l539
  3377  002A62  0A01               	xorlw	1	; case 1
  3378  002A64  E0D7               	bz	l543
  3379  002A66  0A03               	xorlw	3	; case 2
  3380  002A68  E0DB               	bz	l546
  3381  002A6A  0A01               	xorlw	1	; case 3
  3382  002A6C  E0DF               	bz	l549
  3383  002A6E  0A07               	xorlw	7	; case 4
  3384  002A70  E0E3               	bz	l552
  3385  002A72  0A01               	xorlw	1	; case 5
  3386  002A74  E0E7               	bz	l555
  3387  002A76  0A03               	xorlw	3	; case 6
  3388  002A78  E0EB               	bz	l558
  3389  002A7A                     l10405:
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;main.c: 2184: if ( bOn ) {
  3393  002A7A  51CB               	movf	doActionToggle@bOn& (0+255),w,b
  3394  002A7C  E013               	bz	l561
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;main.c: 2187: if ( val & 0x08 ) {
  3398  002A7E  A7CA               	btfss	doActionToggle@val& (0+255),3,b
  3399  002A80  D007               	goto	l10411
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;main.c: 2188: SendInformationEvent( i, 20, 3 );
  3403  002A82  0E14               	movlw	20
  3404  002A84  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3405  002A86  0E03               	movlw	3
  3406  002A88  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3407  002A8A  51CC               	movf	doActionToggle@i& (0+255),w,b
  3408  002A8C  ECD5  F01A         	call	_SendInformationEvent
  3409  002A90                     l10411:
  3410                           
  3411                           ; BSR set to: 0
  3412                           ;main.c: 2189: }
  3413                           ;main.c: 2192: if ( val & 0x20 ) {
  3414  002A90  ABCA               	btfss	doActionToggle@val& (0+255),5,b
  3415  002A92  D01A               	goto	l10421
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;main.c: 2193: SendInformationEvent( i, 20, 25 );
  3419  002A94  0E14               	movlw	20
  3420  002A96  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3421  002A98  0E19               	movlw	25
  3422  002A9A  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3423  002A9C  51CC               	movf	doActionToggle@i& (0+255),w,b
  3424  002A9E  ECD5  F01A         	call	_SendInformationEvent
  3425  002AA2  D012               	goto	l10421
  3426  002AA4                     l561:
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;main.c: 2197: else {
  3430                           ;main.c: 2200: if ( val & 0x10 ) {
  3431  002AA4  A9CA               	btfss	doActionToggle@val& (0+255),4,b
  3432  002AA6  D007               	goto	l10417
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;main.c: 2201: SendInformationEvent( i, 20, 4 );
  3436  002AA8  0E14               	movlw	20
  3437  002AAA  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3438  002AAC  0E04               	movlw	4
  3439  002AAE  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3440  002AB0  51CC               	movf	doActionToggle@i& (0+255),w,b
  3441  002AB2  ECD5  F01A         	call	_SendInformationEvent
  3442  002AB6                     l10417:
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;main.c: 2202: }
  3446                           ;main.c: 2205: if (val & 0x40 ) {
  3447  002AB6  ADCA               	btfss	doActionToggle@val& (0+255),6,b
  3448  002AB8  D007               	goto	l10421
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;main.c: 2206: SendInformationEvent( i, 20, 24 );
  3452  002ABA  0E14               	movlw	20
  3453  002ABC  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3454  002ABE  0E18               	movlw	24
  3455  002AC0  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3456  002AC2  51CC               	movf	doActionToggle@i& (0+255),w,b
  3457  002AC4  ECD5  F01A         	call	_SendInformationEvent
  3458  002AC8                     l10421:
  3459                           
  3460                           ; BSR set to: 0
  3461  002AC8  2BCC               	incf	doActionToggle@i& (0+255),f,b
  3462                           
  3463                           ; BSR set to: 0
  3464  002ACA  0E07               	movlw	7
  3465  002ACC  65CC               	cpfsgt	doActionToggle@i& (0+255),b
  3466  002ACE  D775               	goto	l10363
  3467                           
  3468                           ; BSR set to: 0
  3469  002AD0  0C07               	retlw	7
  3470  002AD2                     __end_of_doActionToggle:
  3471                           	opt stack 0
  3472                           tblptru	equ	0xFF8
  3473                           tblptrh	equ	0xFF7
  3474                           tblptrl	equ	0xFF6
  3475                           tablat	equ	0xFF5
  3476                           prodh	equ	0xFF4
  3477                           prodl	equ	0xFF3
  3478                           intcon	equ	0xFF2
  3479                           postinc0	equ	0xFEE
  3480                           wreg	equ	0xFE8
  3481                           indf1	equ	0xFE7
  3482                           fsr1h	equ	0xFE2
  3483                           fsr1l	equ	0xFE1
  3484                           indf2	equ	0xFDF
  3485                           postinc2	equ	0xFDE
  3486                           postdec2	equ	0xFDD
  3487                           plusw2	equ	0xFDB
  3488                           fsr2h	equ	0xFDA
  3489                           fsr2l	equ	0xFD9
  3490                           status	equ	0xFD8
  3491                           
  3492 ;; *************** function _doActionDisable *****************
  3493 ;; Defined at:
  3494 ;;		line 2058 in file "../main.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;  dmflags         1    wreg     unsigned char 
  3497 ;;  arg             1   10[COMRAM] unsigned char 
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;  dmflags         1   13[COMRAM] unsigned char 
  3500 ;;  i               1   15[COMRAM] unsigned char 
  3501 ;;  val             1   14[COMRAM] unsigned char 
  3502 ;; Return value:  Size  Location     Type
  3503 ;;		None               void
  3504 ;; Registers used:
  3505 ;;		wreg, status,2, status,0, cstack
  3506 ;; Tracked objects:
  3507 ;;		On entry : F/0
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3511 ;;      Params:         1       0       0       0       0       0       0
  3512 ;;      Locals:         3       0       0       0       0       0       0
  3513 ;;      Temps:          2       0       0       0       0       0       0
  3514 ;;      Totals:         6       0       0       0       0       0       0
  3515 ;;Total ram usage:        6 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:    3
  3518 ;; This function calls:
  3519 ;;		_writeEEPROM
  3520 ;;		_readEEPROM
  3521 ;; This function is called by:
  3522 ;;		_doDM
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text10
  3527  00353E                     __ptext10:
  3528                           	opt stack 0
  3529  00353E                     _doActionDisable:
  3530                           	opt stack 26
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;incstack = 0
  3534                           ;incstack = 0
  3535                           ;doActionDisable@dmflags stored from wreg
  3536  00353E  CFE8 F00E          	movff	wreg,doActionDisable@dmflags
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;main.c: 2060: unsigned char i;
  3540                           ;main.c: 2061: unsigned char val;
  3541                           ;main.c: 2063: for ( i = 0; i < 8; i++ ) {
  3542  003542  6A10               	clrf	doActionDisable@i,c
  3543  003544                     l8709:
  3544                           
  3545                           ;main.c: 2066: if ( !( arg & (1 << i) ) ) continue;
  3546  003544  C010  F00C         	movff	doActionDisable@i,??_doActionDisable
  3547  003548  0E01               	movlw	1
  3548  00354A  6E0D               	movwf	(??_doActionDisable+1)& (0+255),c
  3549  00354C  2A0C               	incf	??_doActionDisable,f,c
  3550  00354E  D002               	goto	u10284
  3551  003550                     u10285:
  3552  003550  90D8               	bcf	status,0,c
  3553  003552  360D               	rlcf	??_doActionDisable+1,f,c
  3554  003554                     u10284:
  3555  003554  2E0C               	decfsz	??_doActionDisable,f,c
  3556  003556  D7FC               	goto	u10285
  3557  003558  500D               	movf	??_doActionDisable+1,w,c
  3558  00355A  140B               	andwf	doActionDisable@arg,w,c
  3559  00355C  E021               	bz	l8719
  3560                           
  3561                           ;main.c: 2069: if ( dmflags & 0x08) {
  3562  00355E  A60E               	btfss	doActionDisable@dmflags,3,c
  3563  003560  D00B               	goto	l8717
  3564                           
  3565                           ;main.c: 2070: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3566                           ;main.c: 2071: 53 +
  3567                           ;main.c: 2072: i ) ) {
  3568  003562  0E78               	movlw	120
  3569  003564  2410               	addwf	doActionDisable@i,w,c
  3570  003566  6E08               	movwf	?_readEEPROM,c
  3571  003568  6A09               	clrf	?_readEEPROM+1,c
  3572  00356A  0E00               	movlw	0
  3573  00356C  2209               	addwfc	?_readEEPROM+1,f,c
  3574  00356E  EC6C  F01D         	call	_readEEPROM	;wreg free
  3575  003572  0100               	movlb	0	; () banked
  3576  003574  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3577  003576  E114               	bnz	l8719
  3578  003578                     l8717:
  3579                           
  3580                           ;main.c: 2074: }
  3581                           ;main.c: 2075: }
  3582                           ;main.c: 2077: val = readEEPROM( 0x43 + 10 + i );
  3583  003578  0E4D               	movlw	77
  3584  00357A  2410               	addwf	doActionDisable@i,w,c
  3585  00357C  6E08               	movwf	?_readEEPROM,c
  3586  00357E  6A09               	clrf	?_readEEPROM+1,c
  3587  003580  0E00               	movlw	0
  3588  003582  2209               	addwfc	?_readEEPROM+1,f,c
  3589  003584  EC6C  F01D         	call	_readEEPROM	;wreg free
  3590  003588  6E0F               	movwf	doActionDisable@val,c
  3591                           
  3592                           ;main.c: 2078: writeEEPROM( 0x43 + 10 + i, val & ~0x80 );
  3593  00358A  0E4D               	movlw	77
  3594  00358C  2410               	addwf	doActionDisable@i,w,c
  3595  00358E  6E08               	movwf	?_writeEEPROM,c
  3596  003590  6A09               	clrf	?_writeEEPROM+1,c
  3597  003592  0E00               	movlw	0
  3598  003594  2209               	addwfc	?_writeEEPROM+1,f,c
  3599  003596  500F               	movf	doActionDisable@val,w,c
  3600  003598  0B7F               	andlw	127
  3601  00359A  6E0A               	movwf	?_writeEEPROM+2,c
  3602  00359C  EC44  F01C         	call	_writeEEPROM	;wreg free
  3603  0035A0                     l8719:
  3604  0035A0  2A10               	incf	doActionDisable@i,f,c
  3605  0035A2  0E07               	movlw	7
  3606  0035A4  6410               	cpfsgt	doActionDisable@i,c
  3607  0035A6  D7CE               	goto	l8709
  3608  0035A8  0C07               	retlw	7
  3609  0035AA                     __end_of_doActionDisable:
  3610                           	opt stack 0
  3611                           tblptru	equ	0xFF8
  3612                           tblptrh	equ	0xFF7
  3613                           tblptrl	equ	0xFF6
  3614                           tablat	equ	0xFF5
  3615                           prodh	equ	0xFF4
  3616                           prodl	equ	0xFF3
  3617                           intcon	equ	0xFF2
  3618                           postinc0	equ	0xFEE
  3619                           wreg	equ	0xFE8
  3620                           indf1	equ	0xFE7
  3621                           fsr1h	equ	0xFE2
  3622                           fsr1l	equ	0xFE1
  3623                           indf2	equ	0xFDF
  3624                           postinc2	equ	0xFDE
  3625                           postdec2	equ	0xFDD
  3626                           plusw2	equ	0xFDB
  3627                           fsr2h	equ	0xFDA
  3628                           fsr2l	equ	0xFD9
  3629                           status	equ	0xFD8
  3630                           
  3631 ;; *************** function _doActionStatus *****************
  3632 ;; Defined at:
  3633 ;;		line 1969 in file "../main.c"
  3634 ;; Parameters:    Size  Location     Type
  3635 ;;  dmflags         1    wreg     unsigned char 
  3636 ;;  arg             1   80[COMRAM] unsigned char 
  3637 ;; Auto vars:     Size  Location     Type
  3638 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3639 ;;  i               1   27[BANK0 ] unsigned char 
  3640 ;;  val             1   26[BANK0 ] unsigned char 
  3641 ;;  bOn             1   25[BANK0 ] enum E15660
  3642 ;; Return value:  Size  Location     Type
  3643 ;;		None               void
  3644 ;; Registers used:
  3645 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3646 ;; Tracked objects:
  3647 ;;		On entry : F/0
  3648 ;;		On exit  : F/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3651 ;;      Params:         1       0       0       0       0       0       0
  3652 ;;      Locals:         0       4       0       0       0       0       0
  3653 ;;      Temps:          0       2       0       0       0       0       0
  3654 ;;      Totals:         1       6       0       0       0       0       0
  3655 ;;Total ram usage:        7 bytes
  3656 ;; Hardware stack levels used:    1
  3657 ;; Hardware stack levels required when called:    7
  3658 ;; This function calls:
  3659 ;;		_readEEPROM
  3660 ;;		_SendInformationEvent
  3661 ;; This function is called by:
  3662 ;;		_doDM
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           	psect	text11
  3667  002D04                     __ptext11:
  3668                           	opt stack 0
  3669  002D04                     _doActionStatus:
  3670                           	opt stack 22
  3671                           
  3672                           ;incstack = 0
  3673                           ;incstack = 0
  3674                           ;doActionStatus@dmflags stored from wreg
  3675  002D04  CFE8 F0C9          	movff	wreg,doActionStatus@dmflags
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;main.c: 1971: unsigned char i;
  3679                           ;main.c: 1972: unsigned char val;
  3680                           ;main.c: 1973: BOOL bOn = 0;
  3681  002D08  6BCA               	clrf	doActionStatus@bOn& (0+255),b
  3682                           
  3683                           ;main.c: 1975: for (i = 0; i < 8; i++) {
  3684  002D0A  6BCC               	clrf	doActionStatus@i& (0+255),b
  3685  002D0C                     l10309:
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;main.c: 1978: if (!(arg & (1 << i))) continue;
  3689  002D0C  C0CC  F0C7         	movff	doActionStatus@i,??_doActionStatus
  3690  002D10  0E01               	movlw	1
  3691  002D12  6FC8               	movwf	(??_doActionStatus+1)& (0+255),b
  3692  002D14  2BC7               	incf	??_doActionStatus& (0+255),f,b
  3693  002D16  D002               	goto	u13004
  3694  002D18                     u13005:
  3695  002D18  90D8               	bcf	status,0,c
  3696  002D1A  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3697  002D1C                     u13004:
  3698  002D1C  2FC7               	decfsz	??_doActionStatus& (0+255),f,b
  3699  002D1E  D7FC               	goto	u13005
  3700  002D20  51C8               	movf	(??_doActionStatus+1)& (0+255),w,b
  3701  002D22  1451               	andwf	doActionStatus@arg,w,c
  3702  002D24  E070               	bz	l10353
  3703                           
  3704                           ; BSR set to: 0
  3705                           ;main.c: 1981: if (dmflags & 0x08) {
  3706  002D26  A7C9               	btfss	doActionStatus@dmflags& (0+255),3,b
  3707  002D28  D00B               	goto	l10317
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;main.c: 1982: if (vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3711                           ;main.c: 1983: 53 +
  3712                           ;main.c: 1984: i ) ) {
  3713  002D2A  0E78               	movlw	120
  3714  002D2C  25CC               	addwf	doActionStatus@i& (0+255),w,b
  3715  002D2E  6E08               	movwf	?_readEEPROM,c
  3716  002D30  6A09               	clrf	?_readEEPROM+1,c
  3717  002D32  0E00               	movlw	0
  3718  002D34  2209               	addwfc	?_readEEPROM+1,f,c
  3719  002D36  EC6C  F01D         	call	_readEEPROM	;wreg free
  3720  002D3A  0100               	movlb	0	; () banked
  3721  002D3C  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3722  002D3E  E163               	bnz	l10353
  3723  002D40                     l10317:
  3724                           
  3725                           ; BSR set to: 0
  3726                           ;main.c: 1986: }
  3727                           ;main.c: 1987: }
  3728                           ;main.c: 1989: val = readEEPROM( 0x43 + 10 + i );
  3729  002D40  0E4D               	movlw	77
  3730  002D42  25CC               	addwf	doActionStatus@i& (0+255),w,b
  3731  002D44  6E08               	movwf	?_readEEPROM,c
  3732  002D46  6A09               	clrf	?_readEEPROM+1,c
  3733  002D48  0E00               	movlw	0
  3734  002D4A  2209               	addwfc	?_readEEPROM+1,f,c
  3735  002D4C  EC6C  F01D         	call	_readEEPROM	;wreg free
  3736  002D50  0100               	movlb	0	; () banked
  3737  002D52  6FCB               	movwf	doActionStatus@val& (0+255),b
  3738                           
  3739                           ;main.c: 1991: switch (i) {
  3740  002D54  D023               	goto	l10335
  3741  002D56                     l10319:
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;main.c: 1994: bOn = LATBbits.LATB4;
  3745  002D56  0E00               	movlw	0
  3746  002D58  B88A               	btfsc	3978,4,c	;volatile
  3747  002D5A  0E01               	movlw	1
  3748  002D5C  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3749                           
  3750                           ;main.c: 1995: break;
  3751  002D5E  D02C               	goto	l10337
  3752  002D60                     l10321:
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;main.c: 1998: bOn = LATBbits.LATB1;
  3756  002D60  0E00               	movlw	0
  3757  002D62  B28A               	btfsc	3978,1,c	;volatile
  3758  002D64  0E01               	movlw	1
  3759  002D66  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3760                           
  3761                           ;main.c: 1999: break;
  3762  002D68  D027               	goto	l10337
  3763  002D6A                     l10323:
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;main.c: 2002: bOn = LATBbits.LATB0;
  3767  002D6A  0E00               	movlw	0
  3768  002D6C  B08A               	btfsc	3978,0,c	;volatile
  3769  002D6E  0E01               	movlw	1
  3770  002D70  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3771                           
  3772                           ;main.c: 2003: break;
  3773  002D72  D022               	goto	l10337
  3774  002D74                     l10325:
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;main.c: 2006: bOn = LATCbits.LATC7;
  3778  002D74  0E00               	movlw	0
  3779  002D76  BE8B               	btfsc	3979,7,c	;volatile
  3780  002D78  0E01               	movlw	1
  3781  002D7A  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3782                           
  3783                           ;main.c: 2007: break;
  3784  002D7C  D01D               	goto	l10337
  3785  002D7E                     l10327:
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;main.c: 2010: bOn = LATCbits.LATC6;
  3789  002D7E  0E00               	movlw	0
  3790  002D80  BC8B               	btfsc	3979,6,c	;volatile
  3791  002D82  0E01               	movlw	1
  3792  002D84  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3793                           
  3794                           ;main.c: 2011: break;
  3795  002D86  D018               	goto	l10337
  3796  002D88                     l10329:
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;main.c: 2014: bOn = LATCbits.LATC5;
  3800  002D88  0E00               	movlw	0
  3801  002D8A  BA8B               	btfsc	3979,5,c	;volatile
  3802  002D8C  0E01               	movlw	1
  3803  002D8E  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3804                           
  3805                           ;main.c: 2015: break;
  3806  002D90  D013               	goto	l10337
  3807  002D92                     l10331:
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;main.c: 2018: bOn = LATCbits.LATC4;
  3811  002D92  0E00               	movlw	0
  3812  002D94  B88B               	btfsc	3979,4,c	;volatile
  3813  002D96  0E01               	movlw	1
  3814  002D98  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3815                           
  3816                           ;main.c: 2019: break;
  3817  002D9A  D00E               	goto	l10337
  3818  002D9C                     l10335:
  3819                           
  3820                           ; BSR set to: 0
  3821  002D9C  51CC               	movf	doActionStatus@i& (0+255),w,b
  3822                           
  3823                           ; Switch size 1, requested type "space"
  3824                           ; Number of cases is 7, Range of values is 0 to 6
  3825                           ; switch strategies available:
  3826                           ; Name         Instructions Cycles
  3827                           ; simple_byte           22    12 (average)
  3828                           ;	Chosen strategy is simple_byte
  3829  002D9E  E0DB               	bz	l10319
  3830  002DA0  0A01               	xorlw	1	; case 1
  3831  002DA2  E0DE               	bz	l10321
  3832  002DA4  0A03               	xorlw	3	; case 2
  3833  002DA6  E0E1               	bz	l10323
  3834  002DA8  0A01               	xorlw	1	; case 3
  3835  002DAA  E0E4               	bz	l10325
  3836  002DAC  0A07               	xorlw	7	; case 4
  3837  002DAE  E0E7               	bz	l10327
  3838  002DB0  0A01               	xorlw	1	; case 5
  3839  002DB2  E0EA               	bz	l10329
  3840  002DB4  0A03               	xorlw	3	; case 6
  3841  002DB6  E0ED               	bz	l10331
  3842  002DB8                     l10337:
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;main.c: 2023: if (bOn) {
  3846  002DB8  51CA               	movf	doActionStatus@bOn& (0+255),w,b
  3847  002DBA  E013               	bz	l514
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;main.c: 2026: if ( val & 0x10 ) {
  3851  002DBC  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3852  002DBE  D007               	goto	l10343
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;main.c: 2027: SendInformationEvent( i, 20, 4 );
  3856  002DC0  0E14               	movlw	20
  3857  002DC2  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3858  002DC4  0E04               	movlw	4
  3859  002DC6  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3860  002DC8  51CC               	movf	doActionStatus@i& (0+255),w,b
  3861  002DCA  ECD5  F01A         	call	_SendInformationEvent
  3862  002DCE                     l10343:
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;main.c: 2028: }
  3866                           ;main.c: 2031: if ( val & 0x40 ) {
  3867  002DCE  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3868  002DD0  D01A               	goto	l10353
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;main.c: 2032: SendInformationEvent( i, 20, 24 );
  3872  002DD2  0E14               	movlw	20
  3873  002DD4  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3874  002DD6  0E18               	movlw	24
  3875  002DD8  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3876  002DDA  51CC               	movf	doActionStatus@i& (0+255),w,b
  3877  002DDC  ECD5  F01A         	call	_SendInformationEvent
  3878  002DE0  D012               	goto	l10353
  3879  002DE2                     l514:
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;main.c: 2036: else {
  3883                           ;main.c: 2039: if ( val & 0x10 ) {
  3884  002DE2  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3885  002DE4  D007               	goto	l10349
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;main.c: 2040: SendInformationEvent( i, 20, 4 );
  3889  002DE6  0E14               	movlw	20
  3890  002DE8  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3891  002DEA  0E04               	movlw	4
  3892  002DEC  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3893  002DEE  51CC               	movf	doActionStatus@i& (0+255),w,b
  3894  002DF0  ECD5  F01A         	call	_SendInformationEvent
  3895  002DF4                     l10349:
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;main.c: 2041: }
  3899                           ;main.c: 2044: if ( val & 0x40 ) {
  3900  002DF4  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3901  002DF6  D007               	goto	l10353
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;main.c: 2045: SendInformationEvent( i, 20, 24 );
  3905  002DF8  0E14               	movlw	20
  3906  002DFA  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3907  002DFC  0E18               	movlw	24
  3908  002DFE  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3909  002E00  51CC               	movf	doActionStatus@i& (0+255),w,b
  3910  002E02  ECD5  F01A         	call	_SendInformationEvent
  3911  002E06                     l10353:
  3912                           
  3913                           ; BSR set to: 0
  3914  002E06  2BCC               	incf	doActionStatus@i& (0+255),f,b
  3915                           
  3916                           ; BSR set to: 0
  3917  002E08  0E07               	movlw	7
  3918  002E0A  65CC               	cpfsgt	doActionStatus@i& (0+255),b
  3919  002E0C  D77F               	goto	l10309
  3920                           
  3921                           ; BSR set to: 0
  3922  002E0E  0C07               	retlw	7
  3923  002E10                     __end_of_doActionStatus:
  3924                           	opt stack 0
  3925                           tblptru	equ	0xFF8
  3926                           tblptrh	equ	0xFF7
  3927                           tblptrl	equ	0xFF6
  3928                           tablat	equ	0xFF5
  3929                           prodh	equ	0xFF4
  3930                           prodl	equ	0xFF3
  3931                           intcon	equ	0xFF2
  3932                           postinc0	equ	0xFEE
  3933                           wreg	equ	0xFE8
  3934                           indf1	equ	0xFE7
  3935                           fsr1h	equ	0xFE2
  3936                           fsr1l	equ	0xFE1
  3937                           indf2	equ	0xFDF
  3938                           postinc2	equ	0xFDE
  3939                           postdec2	equ	0xFDD
  3940                           plusw2	equ	0xFDB
  3941                           fsr2h	equ	0xFDA
  3942                           fsr2l	equ	0xFD9
  3943                           status	equ	0xFD8
  3944                           
  3945 ;; *************** function _doActionPulse *****************
  3946 ;; Defined at:
  3947 ;;		line 1878 in file "../main.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;  dmflags         1    wreg     unsigned char 
  3950 ;;  arg             1   10[COMRAM] unsigned char 
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;  dmflags         1   14[COMRAM] unsigned char 
  3953 ;;  i               1   16[COMRAM] unsigned char 
  3954 ;;  val             1   15[COMRAM] unsigned char 
  3955 ;; Return value:  Size  Location     Type
  3956 ;;		None               void
  3957 ;; Registers used:
  3958 ;;		wreg, status,2, status,0, cstack
  3959 ;; Tracked objects:
  3960 ;;		On entry : F/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3964 ;;      Params:         1       0       0       0       0       0       0
  3965 ;;      Locals:         3       0       0       0       0       0       0
  3966 ;;      Temps:          3       0       0       0       0       0       0
  3967 ;;      Totals:         7       0       0       0       0       0       0
  3968 ;;Total ram usage:        7 bytes
  3969 ;; Hardware stack levels used:    1
  3970 ;; Hardware stack levels required when called:    3
  3971 ;; This function calls:
  3972 ;;		_readEEPROM
  3973 ;; This function is called by:
  3974 ;;		_doDM
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           	psect	text12
  3979  0024C2                     __ptext12:
  3980                           	opt stack 0
  3981  0024C2                     _doActionPulse:
  3982                           	opt stack 26
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;incstack = 0
  3986                           ;incstack = 0
  3987                           ;doActionPulse@dmflags stored from wreg
  3988  0024C2  CFE8 F00F          	movff	wreg,doActionPulse@dmflags
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;main.c: 1880: unsigned char i;
  3992                           ;main.c: 1881: unsigned char val;
  3993                           ;main.c: 1883: for ( i = 0; i < 8; i++ ) {
  3994  0024C6  6A11               	clrf	doActionPulse@i,c
  3995  0024C8                     l8599:
  3996                           
  3997                           ;main.c: 1886: if ( !( arg & ( 1 << i ) ) ) continue;
  3998  0024C8  C011  F00C         	movff	doActionPulse@i,??_doActionPulse
  3999  0024CC  0E01               	movlw	1
  4000  0024CE  6E0D               	movwf	(??_doActionPulse+1)& (0+255),c
  4001  0024D0  2A0C               	incf	??_doActionPulse,f,c
  4002  0024D2  D002               	goto	u10124
  4003  0024D4                     u10125:
  4004  0024D4  90D8               	bcf	status,0,c
  4005  0024D6  360D               	rlcf	??_doActionPulse+1,f,c
  4006  0024D8                     u10124:
  4007  0024D8  2E0C               	decfsz	??_doActionPulse,f,c
  4008  0024DA  D7FC               	goto	u10125
  4009  0024DC  500D               	movf	??_doActionPulse+1,w,c
  4010  0024DE  140B               	andwf	doActionPulse@arg,w,c
  4011  0024E0  E101 D0D2          	bz	l8645
  4012                           
  4013                           ;main.c: 1889: if (dmflags & 0x08) {
  4014  0024E4  A60F               	btfss	doActionPulse@dmflags,3,c
  4015  0024E6  D00C               	goto	l8607
  4016                           
  4017                           ;main.c: 1890: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  4018                           ;main.c: 1891: 53 +
  4019                           ;main.c: 1892: i ) ) {
  4020  0024E8  0E78               	movlw	120
  4021  0024EA  2411               	addwf	doActionPulse@i,w,c
  4022  0024EC  6E08               	movwf	?_readEEPROM,c
  4023  0024EE  6A09               	clrf	?_readEEPROM+1,c
  4024  0024F0  0E00               	movlw	0
  4025  0024F2  2209               	addwfc	?_readEEPROM+1,f,c
  4026  0024F4  EC6C  F01D         	call	_readEEPROM	;wreg free
  4027  0024F8  0100               	movlb	0	; () banked
  4028  0024FA  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4029  0024FC  E001 D0C4          	bnz	l8645
  4030  002500                     l8607:
  4031                           
  4032                           ;main.c: 1894: }
  4033                           ;main.c: 1895: }
  4034                           ;main.c: 1897: val = readEEPROM( 0x43 + 10 + i );
  4035  002500  0E4D               	movlw	77
  4036  002502  2411               	addwf	doActionPulse@i,w,c
  4037  002504  6E08               	movwf	?_readEEPROM,c
  4038  002506  6A09               	clrf	?_readEEPROM+1,c
  4039  002508  0E00               	movlw	0
  4040  00250A  2209               	addwfc	?_readEEPROM+1,f,c
  4041  00250C  EC6C  F01D         	call	_readEEPROM	;wreg free
  4042  002510  6E10               	movwf	doActionPulse@val,c
  4043                           
  4044                           ;main.c: 1900: if ( !( val & 0x80 ) ) continue;
  4045  002512  AE10               	btfss	doActionPulse@val,7,c
  4046  002514  D0B9               	goto	l8645
  4047  002516  D0A8               	goto	l8643
  4048  002518                     l488:
  4049                           
  4050                           ;main.c: 1905: LATBbits.LATB4 = 0;
  4051  002518  988A               	bcf	3978,4,c	;volatile
  4052                           
  4053                           ;main.c: 1906: relay_pulse_flags |= 0x01;
  4054  00251A  0100               	movlb	0	; () banked
  4055  00251C  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  4056                           
  4057                           ; BSR set to: 0
  4058                           ;main.c: 1907: relay_pulse_timer[ 0 ] =
  4059                           ;main.c: 1908: readEEPROM( 0x43 + 18 ) * 256 +
  4060                           ;main.c: 1909: readEEPROM( 0x43 + 19 );
  4061  00251E  6A09               	clrf	?_readEEPROM+1,c
  4062  002520  0E56               	movlw	86
  4063  002522  6E08               	movwf	?_readEEPROM,c
  4064  002524  EC6C  F01D         	call	_readEEPROM	;wreg free
  4065  002528  6E0C               	movwf	??_doActionPulse& (0+255),c
  4066  00252A  6A09               	clrf	?_readEEPROM+1,c
  4067  00252C  0E55               	movlw	85
  4068  00252E  6E08               	movwf	?_readEEPROM,c
  4069  002530  EC6C  F01D         	call	_readEEPROM	;wreg free
  4070  002534  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4071  002536  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4072  002538  500C               	movf	??_doActionPulse,w,c
  4073  00253A  240D               	addwf	??_doActionPulse+1,w,c
  4074  00253C  0100               	movlb	0	; () banked
  4075  00253E  6F70               	movwf	_relay_pulse_timer& (0+255),b
  4076  002540  0E00               	movlw	0
  4077  002542  200E               	addwfc	??_doActionPulse+2,w,c
  4078  002544  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  4079                           
  4080                           ;main.c: 1910: break;
  4081  002546  D0A0               	goto	l8645
  4082  002548                     l490:
  4083                           
  4084                           ;main.c: 1913: LATBbits.LATB1 = 0;
  4085  002548  928A               	bcf	3978,1,c	;volatile
  4086                           
  4087                           ;main.c: 1914: relay_pulse_flags |= 0x02;
  4088  00254A  0100               	movlb	0	; () banked
  4089  00254C  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  4090                           
  4091                           ; BSR set to: 0
  4092                           ;main.c: 1915: relay_pulse_timer[ 1 ] =
  4093                           ;main.c: 1916: readEEPROM( 0x43 + 20 ) * 256 +
  4094                           ;main.c: 1917: readEEPROM( 0x43 + 21 );
  4095  00254E  6A09               	clrf	?_readEEPROM+1,c
  4096  002550  0E58               	movlw	88
  4097  002552  6E08               	movwf	?_readEEPROM,c
  4098  002554  EC6C  F01D         	call	_readEEPROM	;wreg free
  4099  002558  6E0C               	movwf	??_doActionPulse& (0+255),c
  4100  00255A  6A09               	clrf	?_readEEPROM+1,c
  4101  00255C  0E57               	movlw	87
  4102  00255E  6E08               	movwf	?_readEEPROM,c
  4103  002560  EC6C  F01D         	call	_readEEPROM	;wreg free
  4104  002564  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4105  002566  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4106  002568  500C               	movf	??_doActionPulse,w,c
  4107  00256A  240D               	addwf	??_doActionPulse+1,w,c
  4108  00256C  0100               	movlb	0	; () banked
  4109  00256E  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  4110  002570  0E00               	movlw	0
  4111  002572  200E               	addwfc	??_doActionPulse+2,w,c
  4112  002574  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  4113                           
  4114                           ;main.c: 1918: break;
  4115  002576  D088               	goto	l8645
  4116  002578                     l491:
  4117                           
  4118                           ;main.c: 1921: LATBbits.LATB0 = 0;
  4119  002578  908A               	bcf	3978,0,c	;volatile
  4120                           
  4121                           ;main.c: 1922: relay_pulse_flags |= 0x04;
  4122  00257A  0100               	movlb	0	; () banked
  4123  00257C  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;main.c: 1923: relay_pulse_timer[ 2 ] =
  4127                           ;main.c: 1924: readEEPROM( 0x43 + 22 ) * 256 +
  4128                           ;main.c: 1925: readEEPROM( 0x43 + 23 );
  4129  00257E  6A09               	clrf	?_readEEPROM+1,c
  4130  002580  0E5A               	movlw	90
  4131  002582  6E08               	movwf	?_readEEPROM,c
  4132  002584  EC6C  F01D         	call	_readEEPROM	;wreg free
  4133  002588  6E0C               	movwf	??_doActionPulse& (0+255),c
  4134  00258A  6A09               	clrf	?_readEEPROM+1,c
  4135  00258C  0E59               	movlw	89
  4136  00258E  6E08               	movwf	?_readEEPROM,c
  4137  002590  EC6C  F01D         	call	_readEEPROM	;wreg free
  4138  002594  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4139  002596  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4140  002598  500C               	movf	??_doActionPulse,w,c
  4141  00259A  240D               	addwf	??_doActionPulse+1,w,c
  4142  00259C  0100               	movlb	0	; () banked
  4143  00259E  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  4144  0025A0  0E00               	movlw	0
  4145  0025A2  200E               	addwfc	??_doActionPulse+2,w,c
  4146  0025A4  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  4147                           
  4148                           ;main.c: 1926: break;
  4149  0025A6  D070               	goto	l8645
  4150  0025A8                     l492:
  4151                           
  4152                           ;main.c: 1929: LATCbits.LATC7 = 0;
  4153  0025A8  9E8B               	bcf	3979,7,c	;volatile
  4154                           
  4155                           ;main.c: 1930: relay_pulse_flags |= 0x08;
  4156  0025AA  0100               	movlb	0	; () banked
  4157  0025AC  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;main.c: 1931: relay_pulse_timer[ 3 ] =
  4161                           ;main.c: 1932: readEEPROM( 0x43 + 24 ) * 256 +
  4162                           ;main.c: 1933: readEEPROM( 0x43 + 25 );
  4163  0025AE  6A09               	clrf	?_readEEPROM+1,c
  4164  0025B0  0E5C               	movlw	92
  4165  0025B2  6E08               	movwf	?_readEEPROM,c
  4166  0025B4  EC6C  F01D         	call	_readEEPROM	;wreg free
  4167  0025B8  6E0C               	movwf	??_doActionPulse& (0+255),c
  4168  0025BA  6A09               	clrf	?_readEEPROM+1,c
  4169  0025BC  0E5B               	movlw	91
  4170  0025BE  6E08               	movwf	?_readEEPROM,c
  4171  0025C0  EC6C  F01D         	call	_readEEPROM	;wreg free
  4172  0025C4  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4173  0025C6  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4174  0025C8  500C               	movf	??_doActionPulse,w,c
  4175  0025CA  240D               	addwf	??_doActionPulse+1,w,c
  4176  0025CC  0100               	movlb	0	; () banked
  4177  0025CE  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  4178  0025D0  0E00               	movlw	0
  4179  0025D2  200E               	addwfc	??_doActionPulse+2,w,c
  4180  0025D4  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  4181                           
  4182                           ;main.c: 1934: break;
  4183  0025D6  D058               	goto	l8645
  4184  0025D8                     l493:
  4185                           
  4186                           ;main.c: 1937: LATCbits.LATC6 = 0;
  4187  0025D8  9C8B               	bcf	3979,6,c	;volatile
  4188                           
  4189                           ;main.c: 1938: relay_pulse_flags |= 0x10;
  4190  0025DA  0100               	movlb	0	; () banked
  4191  0025DC  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  4192                           
  4193                           ; BSR set to: 0
  4194                           ;main.c: 1939: relay_pulse_timer[ 4 ] =
  4195                           ;main.c: 1940: readEEPROM( 0x43 + 26 ) * 256 +
  4196                           ;main.c: 1941: readEEPROM( 0x43 + 27 );
  4197  0025DE  6A09               	clrf	?_readEEPROM+1,c
  4198  0025E0  0E5E               	movlw	94
  4199  0025E2  6E08               	movwf	?_readEEPROM,c
  4200  0025E4  EC6C  F01D         	call	_readEEPROM	;wreg free
  4201  0025E8  6E0C               	movwf	??_doActionPulse& (0+255),c
  4202  0025EA  6A09               	clrf	?_readEEPROM+1,c
  4203  0025EC  0E5D               	movlw	93
  4204  0025EE  6E08               	movwf	?_readEEPROM,c
  4205  0025F0  EC6C  F01D         	call	_readEEPROM	;wreg free
  4206  0025F4  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4207  0025F6  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4208  0025F8  500C               	movf	??_doActionPulse,w,c
  4209  0025FA  240D               	addwf	??_doActionPulse+1,w,c
  4210  0025FC  0100               	movlb	0	; () banked
  4211  0025FE  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  4212  002600  0E00               	movlw	0
  4213  002602  200E               	addwfc	??_doActionPulse+2,w,c
  4214  002604  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  4215                           
  4216                           ;main.c: 1942: break;
  4217  002606  D040               	goto	l8645
  4218  002608                     l494:
  4219                           
  4220                           ;main.c: 1945: LATCbits.LATC5 = 0;
  4221  002608  9A8B               	bcf	3979,5,c	;volatile
  4222                           
  4223                           ;main.c: 1946: relay_pulse_flags |= 0x20;
  4224  00260A  0100               	movlb	0	; () banked
  4225  00260C  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  4226                           
  4227                           ; BSR set to: 0
  4228                           ;main.c: 1947: relay_pulse_timer[ 5 ] =
  4229                           ;main.c: 1948: readEEPROM( 0x43 + 28 ) * 256 +
  4230                           ;main.c: 1949: readEEPROM( 0x43 + 29 );
  4231  00260E  6A09               	clrf	?_readEEPROM+1,c
  4232  002610  0E60               	movlw	96
  4233  002612  6E08               	movwf	?_readEEPROM,c
  4234  002614  EC6C  F01D         	call	_readEEPROM	;wreg free
  4235  002618  6E0C               	movwf	??_doActionPulse& (0+255),c
  4236  00261A  6A09               	clrf	?_readEEPROM+1,c
  4237  00261C  0E5F               	movlw	95
  4238  00261E  6E08               	movwf	?_readEEPROM,c
  4239  002620  EC6C  F01D         	call	_readEEPROM	;wreg free
  4240  002624  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4241  002626  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4242  002628  500C               	movf	??_doActionPulse,w,c
  4243  00262A  240D               	addwf	??_doActionPulse+1,w,c
  4244  00262C  0100               	movlb	0	; () banked
  4245  00262E  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  4246  002630  0E00               	movlw	0
  4247  002632  200E               	addwfc	??_doActionPulse+2,w,c
  4248  002634  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  4249                           
  4250                           ;main.c: 1950: break;
  4251  002636  D028               	goto	l8645
  4252  002638                     l495:
  4253                           
  4254                           ;main.c: 1953: LATCbits.LATC4 = 0;
  4255  002638  988B               	bcf	3979,4,c	;volatile
  4256                           
  4257                           ;main.c: 1954: relay_pulse_flags |= 0x40;
  4258  00263A  0100               	movlb	0	; () banked
  4259  00263C  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  4260                           
  4261                           ; BSR set to: 0
  4262                           ;main.c: 1955: relay_pulse_timer[ 6 ] =
  4263                           ;main.c: 1956: readEEPROM( 0x43 + 30 ) * 256 +
  4264                           ;main.c: 1957: readEEPROM( 0x43 + 31 );
  4265  00263E  6A09               	clrf	?_readEEPROM+1,c
  4266  002640  0E62               	movlw	98
  4267  002642  6E08               	movwf	?_readEEPROM,c
  4268  002644  EC6C  F01D         	call	_readEEPROM	;wreg free
  4269  002648  6E0C               	movwf	??_doActionPulse& (0+255),c
  4270  00264A  6A09               	clrf	?_readEEPROM+1,c
  4271  00264C  0E61               	movlw	97
  4272  00264E  6E08               	movwf	?_readEEPROM,c
  4273  002650  EC6C  F01D         	call	_readEEPROM	;wreg free
  4274  002654  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4275  002656  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4276  002658  500C               	movf	??_doActionPulse,w,c
  4277  00265A  240D               	addwf	??_doActionPulse+1,w,c
  4278  00265C  0100               	movlb	0	; () banked
  4279  00265E  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  4280  002660  0E00               	movlw	0
  4281  002662  200E               	addwfc	??_doActionPulse+2,w,c
  4282  002664  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  4283                           
  4284                           ;main.c: 1958: break;
  4285  002666  D010               	goto	l8645
  4286  002668                     l8643:
  4287  002668  5011               	movf	doActionPulse@i,w,c
  4288                           
  4289                           ; Switch size 1, requested type "space"
  4290                           ; Number of cases is 7, Range of values is 0 to 6
  4291                           ; switch strategies available:
  4292                           ; Name         Instructions Cycles
  4293                           ; simple_byte           22    12 (average)
  4294                           ;	Chosen strategy is simple_byte
  4295  00266A  E101 D755          	bz	l488
  4296  00266E  0A01               	xorlw	1	; case 1
  4297  002670  E101 D76A          	bz	l490
  4298  002674  0A03               	xorlw	3	; case 2
  4299  002676  E080               	bz	l491
  4300  002678  0A01               	xorlw	1	; case 3
  4301  00267A  E096               	bz	l492
  4302  00267C  0A07               	xorlw	7	; case 4
  4303  00267E  E0AC               	bz	l493
  4304  002680  0A01               	xorlw	1	; case 5
  4305  002682  E0C2               	bz	l494
  4306  002684  0A03               	xorlw	3	; case 6
  4307  002686  E0D8               	bz	l495
  4308  002688                     l8645:
  4309  002688  2A11               	incf	doActionPulse@i,f,c
  4310  00268A  0E07               	movlw	7
  4311  00268C  6411               	cpfsgt	doActionPulse@i,c
  4312  00268E  D71C               	goto	l8599
  4313  002690  0C07               	retlw	7
  4314  002692                     __end_of_doActionPulse:
  4315                           	opt stack 0
  4316                           tblptru	equ	0xFF8
  4317                           tblptrh	equ	0xFF7
  4318                           tblptrl	equ	0xFF6
  4319                           tablat	equ	0xFF5
  4320                           prodh	equ	0xFF4
  4321                           prodl	equ	0xFF3
  4322                           intcon	equ	0xFF2
  4323                           postinc0	equ	0xFEE
  4324                           wreg	equ	0xFE8
  4325                           indf1	equ	0xFE7
  4326                           fsr1h	equ	0xFE2
  4327                           fsr1l	equ	0xFE1
  4328                           indf2	equ	0xFDF
  4329                           postinc2	equ	0xFDE
  4330                           postdec2	equ	0xFDD
  4331                           plusw2	equ	0xFDB
  4332                           fsr2h	equ	0xFDA
  4333                           fsr2l	equ	0xFD9
  4334                           status	equ	0xFD8
  4335                           
  4336 ;; *************** function _doActionOn *****************
  4337 ;; Defined at:
  4338 ;;		line 1690 in file "../main.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;  dmflags         1    wreg     unsigned char 
  4341 ;;  arg             1   80[COMRAM] unsigned char 
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;  dmflags         1   25[BANK0 ] unsigned char 
  4344 ;;  i               1   27[BANK0 ] unsigned char 
  4345 ;;  val             1   26[BANK0 ] unsigned char 
  4346 ;; Return value:  Size  Location     Type
  4347 ;;		None               void
  4348 ;; Registers used:
  4349 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4350 ;; Tracked objects:
  4351 ;;		On entry : F/0
  4352 ;;		On exit  : F/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4355 ;;      Params:         1       0       0       0       0       0       0
  4356 ;;      Locals:         0       3       0       0       0       0       0
  4357 ;;      Temps:          0       3       0       0       0       0       0
  4358 ;;      Totals:         1       6       0       0       0       0       0
  4359 ;;Total ram usage:        7 bytes
  4360 ;; Hardware stack levels used:    1
  4361 ;; Hardware stack levels required when called:    7
  4362 ;; This function calls:
  4363 ;;		_readEEPROM
  4364 ;;		_SendInformationEvent
  4365 ;; This function is called by:
  4366 ;;		_doDM
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           	psect	text13
  4371  001E32                     __ptext13:
  4372                           	opt stack 0
  4373  001E32                     _doActionOn:
  4374                           	opt stack 22
  4375                           
  4376                           ;incstack = 0
  4377                           ;incstack = 0
  4378                           ;doActionOn@dmflags stored from wreg
  4379  001E32  CFE8 F0CA          	movff	wreg,doActionOn@dmflags
  4380                           
  4381                           ; BSR set to: 0
  4382                           ;main.c: 1692: unsigned char i;
  4383                           ;main.c: 1693: unsigned char val;
  4384                           ;main.c: 1695: for (i = 0; i < 8; i++) {
  4385  001E36  6BCC               	clrf	doActionOn@i& (0+255),b
  4386  001E38                     l10247:
  4387                           
  4388                           ; BSR set to: 0
  4389                           ;main.c: 1698: if ( !( arg & ( 1 << i ) ) ) continue;
  4390  001E38  C0CC  F0C7         	movff	doActionOn@i,??_doActionOn
  4391  001E3C  0E01               	movlw	1
  4392  001E3E  6FC8               	movwf	(??_doActionOn+1)& (0+255),b
  4393  001E40  2BC7               	incf	??_doActionOn& (0+255),f,b
  4394  001E42  D002               	goto	u12854
  4395  001E44                     u12855:
  4396  001E44  90D8               	bcf	status,0,c
  4397  001E46  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4398  001E48                     u12854:
  4399  001E48  2FC7               	decfsz	??_doActionOn& (0+255),f,b
  4400  001E4A  D7FC               	goto	u12855
  4401  001E4C  51C8               	movf	(??_doActionOn+1)& (0+255),w,b
  4402  001E4E  1451               	andwf	doActionOn@arg,w,c
  4403  001E50  E101 D11F          	bz	l10299
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;main.c: 1701: if ( dmflags & 0x08 ) {
  4407  001E54  A7CA               	btfss	doActionOn@dmflags& (0+255),3,b
  4408  001E56  D00C               	goto	l10255
  4409                           
  4410                           ; BSR set to: 0
  4411                           ;main.c: 1702: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  4412                           ;main.c: 1703: 53 +
  4413                           ;main.c: 1704: i ) ) {
  4414  001E58  0E78               	movlw	120
  4415  001E5A  25CC               	addwf	doActionOn@i& (0+255),w,b
  4416  001E5C  6E08               	movwf	?_readEEPROM,c
  4417  001E5E  6A09               	clrf	?_readEEPROM+1,c
  4418  001E60  0E00               	movlw	0
  4419  001E62  2209               	addwfc	?_readEEPROM+1,f,c
  4420  001E64  EC6C  F01D         	call	_readEEPROM	;wreg free
  4421  001E68  0100               	movlb	0	; () banked
  4422  001E6A  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4423  001E6C  E001 D111          	bnz	l10299
  4424  001E70                     l10255:
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;main.c: 1706: }
  4428                           ;main.c: 1707: }
  4429                           ;main.c: 1709: val = readEEPROM( 0x43 + 10 + i );
  4430  001E70  0E4D               	movlw	77
  4431  001E72  25CC               	addwf	doActionOn@i& (0+255),w,b
  4432  001E74  6E08               	movwf	?_readEEPROM,c
  4433  001E76  6A09               	clrf	?_readEEPROM+1,c
  4434  001E78  0E00               	movlw	0
  4435  001E7A  2209               	addwfc	?_readEEPROM+1,f,c
  4436  001E7C  EC6C  F01D         	call	_readEEPROM	;wreg free
  4437  001E80  0100               	movlb	0	; () banked
  4438  001E82  6FCB               	movwf	doActionOn@val& (0+255),b
  4439                           
  4440                           ; BSR set to: 0
  4441                           ;main.c: 1712: if ( !( val & 0x80 ) ) continue;
  4442  001E84  AFCB               	btfss	doActionOn@val& (0+255),7,b
  4443  001E86  D105               	goto	l10299
  4444  001E88  D0E0               	goto	l10291
  4445  001E8A                     l439:
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;main.c: 1717: LATBbits.LATB4 = 1;
  4449  001E8A  888A               	bsf	3978,4,c	;volatile
  4450                           
  4451                           ; BSR set to: 0
  4452                           ;main.c: 1719: if (readEEPROM( 0x43 + 10 ) & 0x04 ) {
  4453  001E8C  6A09               	clrf	?_readEEPROM+1,c
  4454  001E8E  0E4D               	movlw	77
  4455  001E90  6E08               	movwf	?_readEEPROM,c
  4456  001E92  EC6C  F01D         	call	_readEEPROM	;wreg free
  4457  001E96  0100               	movlb	0	; () banked
  4458  001E98  6FC7               	movwf	??_doActionOn& (0+255),b
  4459  001E9A  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4460  001E9C  D0E8               	goto	l441
  4461                           
  4462                           ; BSR set to: 0
  4463                           ;main.c: 1720: relay_protection_timer[ 0 ] =
  4464                           ;main.c: 1721: readEEPROM( 0x43 + 34 ) * 256 +
  4465                           ;main.c: 1722: readEEPROM( 0x43 + 35 );
  4466  001E9E  6A09               	clrf	?_readEEPROM+1,c
  4467  001EA0  0E66               	movlw	102
  4468  001EA2  6E08               	movwf	?_readEEPROM,c
  4469  001EA4  EC6C  F01D         	call	_readEEPROM	;wreg free
  4470  001EA8  0100               	movlb	0	; () banked
  4471  001EAA  6FC7               	movwf	??_doActionOn& (0+255),b
  4472  001EAC  6A09               	clrf	?_readEEPROM+1,c
  4473  001EAE  0E65               	movlw	101
  4474  001EB0  6E08               	movwf	?_readEEPROM,c
  4475  001EB2  EC6C  F01D         	call	_readEEPROM	;wreg free
  4476  001EB6  0100               	movlb	0	; () banked
  4477  001EB8  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4478  001EBA  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4479  001EBC  51C7               	movf	??_doActionOn& (0+255),w,b
  4480  001EBE  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4481  001EC0  6F60               	movwf	_relay_protection_timer& (0+255),b
  4482  001EC2  0E00               	movlw	0
  4483  001EC4  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4484  001EC6  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  4485  001EC8  D0D2               	goto	l441
  4486  001ECA                     l442:
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;main.c: 1727: LATBbits.LATB1 = 1;
  4490  001ECA  828A               	bsf	3978,1,c	;volatile
  4491                           
  4492                           ; BSR set to: 0
  4493                           ;main.c: 1729: if (readEEPROM( 0x43 + 11) & 0x04 ) {
  4494  001ECC  6A09               	clrf	?_readEEPROM+1,c
  4495  001ECE  0E4E               	movlw	78
  4496  001ED0  6E08               	movwf	?_readEEPROM,c
  4497  001ED2  EC6C  F01D         	call	_readEEPROM	;wreg free
  4498  001ED6  0100               	movlb	0	; () banked
  4499  001ED8  6FC7               	movwf	??_doActionOn& (0+255),b
  4500  001EDA  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4501  001EDC  D0C8               	goto	l441
  4502                           
  4503                           ; BSR set to: 0
  4504                           ;main.c: 1730: relay_protection_timer[ 1 ] =
  4505                           ;main.c: 1731: readEEPROM( 0x43 + 36 ) * 256 +
  4506                           ;main.c: 1732: readEEPROM( 0x43 + 37 );
  4507  001EDE  6A09               	clrf	?_readEEPROM+1,c
  4508  001EE0  0E68               	movlw	104
  4509  001EE2  6E08               	movwf	?_readEEPROM,c
  4510  001EE4  EC6C  F01D         	call	_readEEPROM	;wreg free
  4511  001EE8  0100               	movlb	0	; () banked
  4512  001EEA  6FC7               	movwf	??_doActionOn& (0+255),b
  4513  001EEC  6A09               	clrf	?_readEEPROM+1,c
  4514  001EEE  0E67               	movlw	103
  4515  001EF0  6E08               	movwf	?_readEEPROM,c
  4516  001EF2  EC6C  F01D         	call	_readEEPROM	;wreg free
  4517  001EF6  0100               	movlb	0	; () banked
  4518  001EF8  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4519  001EFA  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4520  001EFC  51C7               	movf	??_doActionOn& (0+255),w,b
  4521  001EFE  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4522  001F00  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  4523  001F02  0E00               	movlw	0
  4524  001F04  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4525  001F06  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  4526  001F08  D0B2               	goto	l441
  4527  001F0A                     l444:
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;main.c: 1737: LATBbits.LATB0 = 1;
  4531  001F0A  808A               	bsf	3978,0,c	;volatile
  4532                           
  4533                           ; BSR set to: 0
  4534                           ;main.c: 1739: if (readEEPROM( 0x43 + 12) & 0x04 ) {
  4535  001F0C  6A09               	clrf	?_readEEPROM+1,c
  4536  001F0E  0E4F               	movlw	79
  4537  001F10  6E08               	movwf	?_readEEPROM,c
  4538  001F12  EC6C  F01D         	call	_readEEPROM	;wreg free
  4539  001F16  0100               	movlb	0	; () banked
  4540  001F18  6FC7               	movwf	??_doActionOn& (0+255),b
  4541  001F1A  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4542  001F1C  D0A8               	goto	l441
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;main.c: 1740: relay_protection_timer[ 2 ] =
  4546                           ;main.c: 1741: readEEPROM( 0x43 + 38 ) * 256 +
  4547                           ;main.c: 1742: readEEPROM( 0x43 + 39 );
  4548  001F1E  6A09               	clrf	?_readEEPROM+1,c
  4549  001F20  0E6A               	movlw	106
  4550  001F22  6E08               	movwf	?_readEEPROM,c
  4551  001F24  EC6C  F01D         	call	_readEEPROM	;wreg free
  4552  001F28  0100               	movlb	0	; () banked
  4553  001F2A  6FC7               	movwf	??_doActionOn& (0+255),b
  4554  001F2C  6A09               	clrf	?_readEEPROM+1,c
  4555  001F2E  0E69               	movlw	105
  4556  001F30  6E08               	movwf	?_readEEPROM,c
  4557  001F32  EC6C  F01D         	call	_readEEPROM	;wreg free
  4558  001F36  0100               	movlb	0	; () banked
  4559  001F38  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4560  001F3A  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4561  001F3C  51C7               	movf	??_doActionOn& (0+255),w,b
  4562  001F3E  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4563  001F40  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  4564  001F42  0E00               	movlw	0
  4565  001F44  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4566  001F46  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  4567  001F48  D092               	goto	l441
  4568  001F4A                     l446:
  4569                           
  4570                           ; BSR set to: 0
  4571                           ;main.c: 1747: LATCbits.LATC7 = 1;
  4572  001F4A  8E8B               	bsf	3979,7,c	;volatile
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;main.c: 1749: if ( readEEPROM( 0x43 + 13) & 0x04 ) {
  4576  001F4C  6A09               	clrf	?_readEEPROM+1,c
  4577  001F4E  0E50               	movlw	80
  4578  001F50  6E08               	movwf	?_readEEPROM,c
  4579  001F52  EC6C  F01D         	call	_readEEPROM	;wreg free
  4580  001F56  0100               	movlb	0	; () banked
  4581  001F58  6FC7               	movwf	??_doActionOn& (0+255),b
  4582  001F5A  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4583  001F5C  D088               	goto	l441
  4584                           
  4585                           ; BSR set to: 0
  4586                           ;main.c: 1750: relay_protection_timer[ 3 ] =
  4587                           ;main.c: 1751: readEEPROM( 0x43 + 40 ) * 256 +
  4588                           ;main.c: 1752: readEEPROM( 0x43 + 41 );
  4589  001F5E  6A09               	clrf	?_readEEPROM+1,c
  4590  001F60  0E6C               	movlw	108
  4591  001F62  6E08               	movwf	?_readEEPROM,c
  4592  001F64  EC6C  F01D         	call	_readEEPROM	;wreg free
  4593  001F68  0100               	movlb	0	; () banked
  4594  001F6A  6FC7               	movwf	??_doActionOn& (0+255),b
  4595  001F6C  6A09               	clrf	?_readEEPROM+1,c
  4596  001F6E  0E6B               	movlw	107
  4597  001F70  6E08               	movwf	?_readEEPROM,c
  4598  001F72  EC6C  F01D         	call	_readEEPROM	;wreg free
  4599  001F76  0100               	movlb	0	; () banked
  4600  001F78  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4601  001F7A  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4602  001F7C  51C7               	movf	??_doActionOn& (0+255),w,b
  4603  001F7E  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4604  001F80  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  4605  001F82  0E00               	movlw	0
  4606  001F84  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4607  001F86  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  4608  001F88  D072               	goto	l441
  4609  001F8A                     l448:
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;main.c: 1757: LATCbits.LATC6 = 1;
  4613  001F8A  8C8B               	bsf	3979,6,c	;volatile
  4614                           
  4615                           ; BSR set to: 0
  4616                           ;main.c: 1759: if (readEEPROM( 0x43 + 14) & 0x04 ) {
  4617  001F8C  6A09               	clrf	?_readEEPROM+1,c
  4618  001F8E  0E51               	movlw	81
  4619  001F90  6E08               	movwf	?_readEEPROM,c
  4620  001F92  EC6C  F01D         	call	_readEEPROM	;wreg free
  4621  001F96  0100               	movlb	0	; () banked
  4622  001F98  6FC7               	movwf	??_doActionOn& (0+255),b
  4623  001F9A  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4624  001F9C  D068               	goto	l441
  4625                           
  4626                           ; BSR set to: 0
  4627                           ;main.c: 1760: relay_protection_timer[ 4 ] =
  4628                           ;main.c: 1761: readEEPROM( 0x43 + 42 ) * 256 +
  4629                           ;main.c: 1762: readEEPROM( 0x43 + 43 );
  4630  001F9E  6A09               	clrf	?_readEEPROM+1,c
  4631  001FA0  0E6E               	movlw	110
  4632  001FA2  6E08               	movwf	?_readEEPROM,c
  4633  001FA4  EC6C  F01D         	call	_readEEPROM	;wreg free
  4634  001FA8  0100               	movlb	0	; () banked
  4635  001FAA  6FC7               	movwf	??_doActionOn& (0+255),b
  4636  001FAC  6A09               	clrf	?_readEEPROM+1,c
  4637  001FAE  0E6D               	movlw	109
  4638  001FB0  6E08               	movwf	?_readEEPROM,c
  4639  001FB2  EC6C  F01D         	call	_readEEPROM	;wreg free
  4640  001FB6  0100               	movlb	0	; () banked
  4641  001FB8  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4642  001FBA  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4643  001FBC  51C7               	movf	??_doActionOn& (0+255),w,b
  4644  001FBE  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4645  001FC0  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  4646  001FC2  0E00               	movlw	0
  4647  001FC4  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4648  001FC6  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  4649  001FC8  D052               	goto	l441
  4650  001FCA                     l450:
  4651                           
  4652                           ; BSR set to: 0
  4653                           ;main.c: 1767: LATCbits.LATC5 = 1;
  4654  001FCA  8A8B               	bsf	3979,5,c	;volatile
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;main.c: 1769: if (readEEPROM( 0x43 + 15) & 0x04) {
  4658  001FCC  6A09               	clrf	?_readEEPROM+1,c
  4659  001FCE  0E52               	movlw	82
  4660  001FD0  6E08               	movwf	?_readEEPROM,c
  4661  001FD2  EC6C  F01D         	call	_readEEPROM	;wreg free
  4662  001FD6  0100               	movlb	0	; () banked
  4663  001FD8  6FC7               	movwf	??_doActionOn& (0+255),b
  4664  001FDA  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4665  001FDC  D048               	goto	l441
  4666                           
  4667                           ; BSR set to: 0
  4668                           ;main.c: 1770: relay_protection_timer[ 5 ] =
  4669                           ;main.c: 1771: readEEPROM( 0x43 + 44 ) * 256 +
  4670                           ;main.c: 1772: readEEPROM( 0x43 + 45 );
  4671  001FDE  6A09               	clrf	?_readEEPROM+1,c
  4672  001FE0  0E70               	movlw	112
  4673  001FE2  6E08               	movwf	?_readEEPROM,c
  4674  001FE4  EC6C  F01D         	call	_readEEPROM	;wreg free
  4675  001FE8  0100               	movlb	0	; () banked
  4676  001FEA  6FC7               	movwf	??_doActionOn& (0+255),b
  4677  001FEC  6A09               	clrf	?_readEEPROM+1,c
  4678  001FEE  0E6F               	movlw	111
  4679  001FF0  6E08               	movwf	?_readEEPROM,c
  4680  001FF2  EC6C  F01D         	call	_readEEPROM	;wreg free
  4681  001FF6  0100               	movlb	0	; () banked
  4682  001FF8  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4683  001FFA  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4684  001FFC  51C7               	movf	??_doActionOn& (0+255),w,b
  4685  001FFE  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4686  002000  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  4687  002002  0E00               	movlw	0
  4688  002004  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4689  002006  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  4690  002008  D032               	goto	l441
  4691  00200A                     l452:
  4692                           
  4693                           ; BSR set to: 0
  4694                           ;main.c: 1777: LATCbits.LATC4 = 1;
  4695  00200A  888B               	bsf	3979,4,c	;volatile
  4696                           
  4697                           ; BSR set to: 0
  4698                           ;main.c: 1779: if ( readEEPROM( 0x43 + 16) & 0x04) {
  4699  00200C  6A09               	clrf	?_readEEPROM+1,c
  4700  00200E  0E53               	movlw	83
  4701  002010  6E08               	movwf	?_readEEPROM,c
  4702  002012  EC6C  F01D         	call	_readEEPROM	;wreg free
  4703  002016  0100               	movlb	0	; () banked
  4704  002018  6FC7               	movwf	??_doActionOn& (0+255),b
  4705  00201A  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4706  00201C  D028               	goto	l441
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;main.c: 1780: relay_protection_timer[ 6 ] =
  4710                           ;main.c: 1781: readEEPROM( 0x43 + 46 ) * 256 +
  4711                           ;main.c: 1782: readEEPROM( 0x43 + 47 );
  4712  00201E  6A09               	clrf	?_readEEPROM+1,c
  4713  002020  0E72               	movlw	114
  4714  002022  6E08               	movwf	?_readEEPROM,c
  4715  002024  EC6C  F01D         	call	_readEEPROM	;wreg free
  4716  002028  0100               	movlb	0	; () banked
  4717  00202A  6FC7               	movwf	??_doActionOn& (0+255),b
  4718  00202C  6A09               	clrf	?_readEEPROM+1,c
  4719  00202E  0E71               	movlw	113
  4720  002030  6E08               	movwf	?_readEEPROM,c
  4721  002032  EC6C  F01D         	call	_readEEPROM	;wreg free
  4722  002036  0100               	movlb	0	; () banked
  4723  002038  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4724  00203A  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4725  00203C  51C7               	movf	??_doActionOn& (0+255),w,b
  4726  00203E  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4727  002040  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  4728  002042  0E00               	movlw	0
  4729  002044  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4730  002046  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  4731  002048  D012               	goto	l441
  4732  00204A                     l10291:
  4733                           
  4734                           ; BSR set to: 0
  4735  00204A  51CC               	movf	doActionOn@i& (0+255),w,b
  4736                           
  4737                           ; Switch size 1, requested type "space"
  4738                           ; Number of cases is 7, Range of values is 0 to 6
  4739                           ; switch strategies available:
  4740                           ; Name         Instructions Cycles
  4741                           ; simple_byte           22    12 (average)
  4742                           ;	Chosen strategy is simple_byte
  4743  00204C  E101 D71D          	bz	l439
  4744  002050  0A01               	xorlw	1	; case 1
  4745  002052  E101 D73A          	bz	l442
  4746  002056  0A03               	xorlw	3	; case 2
  4747  002058  E101 D757          	bz	l444
  4748  00205C  0A01               	xorlw	1	; case 3
  4749  00205E  E101 D774          	bz	l446
  4750  002062  0A07               	xorlw	7	; case 4
  4751  002064  E092               	bz	l448
  4752  002066  0A01               	xorlw	1	; case 5
  4753  002068  E0B0               	bz	l450
  4754  00206A  0A03               	xorlw	3	; case 6
  4755  00206C  E0CE               	bz	l452
  4756  00206E                     l441:
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;main.c: 1789: if ( val & 0x08 ) {
  4760  00206E  A7CB               	btfss	doActionOn@val& (0+255),3,b
  4761  002070  D007               	goto	l10295
  4762                           
  4763                           ; BSR set to: 0
  4764                           ;main.c: 1790: SendInformationEvent( i, 20, 3 );
  4765  002072  0E14               	movlw	20
  4766  002074  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4767  002076  0E03               	movlw	3
  4768  002078  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4769  00207A  51CC               	movf	doActionOn@i& (0+255),w,b
  4770  00207C  ECD5  F01A         	call	_SendInformationEvent
  4771  002080                     l10295:
  4772                           
  4773                           ; BSR set to: 0
  4774                           ;main.c: 1791: }
  4775                           ;main.c: 1794: if ( val & 0x20 ) {
  4776  002080  ABCB               	btfss	doActionOn@val& (0+255),5,b
  4777  002082  D007               	goto	l10299
  4778                           
  4779                           ; BSR set to: 0
  4780                           ;main.c: 1795: SendInformationEvent( i, 20, 25 );
  4781  002084  0E14               	movlw	20
  4782  002086  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4783  002088  0E19               	movlw	25
  4784  00208A  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4785  00208C  51CC               	movf	doActionOn@i& (0+255),w,b
  4786  00208E  ECD5  F01A         	call	_SendInformationEvent
  4787  002092                     l10299:
  4788                           
  4789                           ; BSR set to: 0
  4790  002092  2BCC               	incf	doActionOn@i& (0+255),f,b
  4791                           
  4792                           ; BSR set to: 0
  4793  002094  0E07               	movlw	7
  4794  002096  65CC               	cpfsgt	doActionOn@i& (0+255),b
  4795  002098  D6CF               	goto	l10247
  4796                           
  4797                           ; BSR set to: 0
  4798  00209A  0C07               	retlw	7
  4799  00209C                     __end_of_doActionOn:
  4800                           	opt stack 0
  4801                           tblptru	equ	0xFF8
  4802                           tblptrh	equ	0xFF7
  4803                           tblptrl	equ	0xFF6
  4804                           tablat	equ	0xFF5
  4805                           prodh	equ	0xFF4
  4806                           prodl	equ	0xFF3
  4807                           intcon	equ	0xFF2
  4808                           postinc0	equ	0xFEE
  4809                           wreg	equ	0xFE8
  4810                           indf1	equ	0xFE7
  4811                           fsr1h	equ	0xFE2
  4812                           fsr1l	equ	0xFE1
  4813                           indf2	equ	0xFDF
  4814                           postinc2	equ	0xFDE
  4815                           postdec2	equ	0xFDD
  4816                           plusw2	equ	0xFDB
  4817                           fsr2h	equ	0xFDA
  4818                           fsr2l	equ	0xFD9
  4819                           status	equ	0xFD8
  4820                           
  4821 ;; *************** function _doActionOff *****************
  4822 ;; Defined at:
  4823 ;;		line 1805 in file "../main.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;  dmflags         1    wreg     unsigned char 
  4826 ;;  arg             1   80[COMRAM] unsigned char 
  4827 ;; Auto vars:     Size  Location     Type
  4828 ;;  dmflags         1   24[BANK0 ] unsigned char 
  4829 ;;  i               1   26[BANK0 ] unsigned char 
  4830 ;;  val             1   25[BANK0 ] unsigned char 
  4831 ;; Return value:  Size  Location     Type
  4832 ;;		None               void
  4833 ;; Registers used:
  4834 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4835 ;; Tracked objects:
  4836 ;;		On entry : F/0
  4837 ;;		On exit  : F/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4840 ;;      Params:         1       0       0       0       0       0       0
  4841 ;;      Locals:         0       3       0       0       0       0       0
  4842 ;;      Temps:          0       2       0       0       0       0       0
  4843 ;;      Totals:         1       5       0       0       0       0       0
  4844 ;;Total ram usage:        6 bytes
  4845 ;; Hardware stack levels used:    1
  4846 ;; Hardware stack levels required when called:    7
  4847 ;; This function calls:
  4848 ;;		_readEEPROM
  4849 ;;		_SendInformationEvent
  4850 ;; This function is called by:
  4851 ;;		_doApplicationOneSecondWork
  4852 ;;		_doDM
  4853 ;; This function uses a non-reentrant model
  4854 ;;
  4855                           
  4856                           	psect	text14
  4857  0030DA                     __ptext14:
  4858                           	opt stack 0
  4859  0030DA                     _doActionOff:
  4860                           	opt stack 22
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;incstack = 0
  4864                           ;incstack = 0
  4865                           ;doActionOff@dmflags stored from wreg
  4866  0030DA  CFE8 F0C9          	movff	wreg,doActionOff@dmflags
  4867                           
  4868                           ; BSR set to: 0
  4869                           ;main.c: 1807: unsigned char i;
  4870                           ;main.c: 1808: unsigned char val;
  4871                           ;main.c: 1810: for ( i = 0; i < 8; i++ ) {
  4872  0030DE  6BCB               	clrf	doActionOff@i& (0+255),b
  4873  0030E0                     l9849:
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;main.c: 1813: if ( !( arg & ( 1 << i ) ) ) continue;
  4877  0030E0  C0CB  F0C7         	movff	doActionOff@i,??_doActionOff
  4878  0030E4  0E01               	movlw	1
  4879  0030E6  6FC8               	movwf	(??_doActionOff+1)& (0+255),b
  4880  0030E8  2BC7               	incf	??_doActionOff& (0+255),f,b
  4881  0030EA  D002               	goto	u12214
  4882  0030EC                     u12215:
  4883  0030EC  90D8               	bcf	status,0,c
  4884  0030EE  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4885  0030F0                     u12214:
  4886  0030F0  2FC7               	decfsz	??_doActionOff& (0+255),f,b
  4887  0030F2  D7FC               	goto	u12215
  4888  0030F4  51C8               	movf	(??_doActionOff+1)& (0+255),w,b
  4889  0030F6  1451               	andwf	doActionOff@arg,w,c
  4890  0030F8  E048               	bz	l9873
  4891                           
  4892                           ; BSR set to: 0
  4893                           ;main.c: 1816: if ( dmflags & 0x08 ) {
  4894  0030FA  A7C9               	btfss	doActionOff@dmflags& (0+255),3,b
  4895  0030FC  D00B               	goto	l9857
  4896                           
  4897                           ; BSR set to: 0
  4898                           ;main.c: 1817: if ( vscp_imsg.data[ 2 ] != readEEPROM(0x43 +
  4899                           ;main.c: 1818: 53 +
  4900                           ;main.c: 1819: i ) ) {
  4901  0030FE  0E78               	movlw	120
  4902  003100  25CB               	addwf	doActionOff@i& (0+255),w,b
  4903  003102  6E08               	movwf	?_readEEPROM,c
  4904  003104  6A09               	clrf	?_readEEPROM+1,c
  4905  003106  0E00               	movlw	0
  4906  003108  2209               	addwfc	?_readEEPROM+1,f,c
  4907  00310A  EC6C  F01D         	call	_readEEPROM	;wreg free
  4908  00310E  0100               	movlb	0	; () banked
  4909  003110  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4910  003112  E13B               	bnz	l9873
  4911  003114                     l9857:
  4912                           
  4913                           ; BSR set to: 0
  4914                           ;main.c: 1821: }
  4915                           ;main.c: 1822: }
  4916                           ;main.c: 1824: val = readEEPROM( 0x43 + 10 + i );
  4917  003114  0E4D               	movlw	77
  4918  003116  25CB               	addwf	doActionOff@i& (0+255),w,b
  4919  003118  6E08               	movwf	?_readEEPROM,c
  4920  00311A  6A09               	clrf	?_readEEPROM+1,c
  4921  00311C  0E00               	movlw	0
  4922  00311E  2209               	addwfc	?_readEEPROM+1,f,c
  4923  003120  EC6C  F01D         	call	_readEEPROM	;wreg free
  4924  003124  0100               	movlb	0	; () banked
  4925  003126  6FCA               	movwf	doActionOff@val& (0+255),b
  4926                           
  4927                           ; BSR set to: 0
  4928                           ;main.c: 1827: if ( !( val & 0x80 ) ) continue;
  4929  003128  AFCA               	btfss	doActionOff@val& (0+255),7,b
  4930  00312A  D02F               	goto	l9873
  4931  00312C  D00E               	goto	l9865
  4932  00312E                     l467:
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;main.c: 1832: LATBbits.LATB4 = 0;
  4936  00312E  988A               	bcf	3978,4,c	;volatile
  4937                           
  4938                           ;main.c: 1833: break;
  4939  003130  D01A               	goto	l468
  4940  003132                     l469:
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;main.c: 1836: LATBbits.LATB1 = 0;
  4944  003132  928A               	bcf	3978,1,c	;volatile
  4945                           
  4946                           ;main.c: 1837: break;
  4947  003134  D018               	goto	l468
  4948  003136                     l470:
  4949                           
  4950                           ; BSR set to: 0
  4951                           ;main.c: 1840: LATBbits.LATB0 = 0;
  4952  003136  908A               	bcf	3978,0,c	;volatile
  4953                           
  4954                           ;main.c: 1841: break;
  4955  003138  D016               	goto	l468
  4956  00313A                     l471:
  4957                           
  4958                           ; BSR set to: 0
  4959                           ;main.c: 1844: LATCbits.LATC7 = 0;
  4960  00313A  9E8B               	bcf	3979,7,c	;volatile
  4961                           
  4962                           ;main.c: 1845: break;
  4963  00313C  D014               	goto	l468
  4964  00313E                     l472:
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;main.c: 1848: LATCbits.LATC6 = 0;
  4968  00313E  9C8B               	bcf	3979,6,c	;volatile
  4969                           
  4970                           ;main.c: 1849: break;
  4971  003140  D012               	goto	l468
  4972  003142                     l473:
  4973                           
  4974                           ; BSR set to: 0
  4975                           ;main.c: 1852: LATCbits.LATC5 = 0;
  4976  003142  9A8B               	bcf	3979,5,c	;volatile
  4977                           
  4978                           ;main.c: 1853: break;
  4979  003144  D010               	goto	l468
  4980  003146                     l474:
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;main.c: 1856: LATCbits.LATC4 = 0;
  4984  003146  988B               	bcf	3979,4,c	;volatile
  4985                           
  4986                           ;main.c: 1857: break;
  4987  003148  D00E               	goto	l468
  4988  00314A                     l9865:
  4989                           
  4990                           ; BSR set to: 0
  4991  00314A  51CB               	movf	doActionOff@i& (0+255),w,b
  4992                           
  4993                           ; Switch size 1, requested type "space"
  4994                           ; Number of cases is 7, Range of values is 0 to 6
  4995                           ; switch strategies available:
  4996                           ; Name         Instructions Cycles
  4997                           ; simple_byte           22    12 (average)
  4998                           ;	Chosen strategy is simple_byte
  4999  00314C  E0F0               	bz	l467
  5000  00314E  0A01               	xorlw	1	; case 1
  5001  003150  E0F0               	bz	l469
  5002  003152  0A03               	xorlw	3	; case 2
  5003  003154  E0F0               	bz	l470
  5004  003156  0A01               	xorlw	1	; case 3
  5005  003158  E0F0               	bz	l471
  5006  00315A  0A07               	xorlw	7	; case 4
  5007  00315C  E0F0               	bz	l472
  5008  00315E  0A01               	xorlw	1	; case 5
  5009  003160  E0F0               	bz	l473
  5010  003162  0A03               	xorlw	3	; case 6
  5011  003164  E0F0               	bz	l474
  5012  003166                     l468:
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;main.c: 1862: if ( val & 0x10 ) {
  5016  003166  A9CA               	btfss	doActionOff@val& (0+255),4,b
  5017  003168  D007               	goto	l9869
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;main.c: 1863: SendInformationEvent( i, 20, 4 );
  5021  00316A  0E14               	movlw	20
  5022  00316C  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  5023  00316E  0E04               	movlw	4
  5024  003170  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5025  003172  51CB               	movf	doActionOff@i& (0+255),w,b
  5026  003174  ECD5  F01A         	call	_SendInformationEvent
  5027  003178                     l9869:
  5028                           
  5029                           ; BSR set to: 0
  5030                           ;main.c: 1864: }
  5031                           ;main.c: 1867: if ( val & 0x40 ) {
  5032  003178  ADCA               	btfss	doActionOff@val& (0+255),6,b
  5033  00317A  D007               	goto	l9873
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;main.c: 1868: SendInformationEvent( i, 20, 24 );
  5037  00317C  0E14               	movlw	20
  5038  00317E  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  5039  003180  0E18               	movlw	24
  5040  003182  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5041  003184  51CB               	movf	doActionOff@i& (0+255),w,b
  5042  003186  ECD5  F01A         	call	_SendInformationEvent
  5043  00318A                     l9873:
  5044                           
  5045                           ; BSR set to: 0
  5046  00318A  2BCB               	incf	doActionOff@i& (0+255),f,b
  5047                           
  5048                           ; BSR set to: 0
  5049  00318C  0E07               	movlw	7
  5050  00318E  65CB               	cpfsgt	doActionOff@i& (0+255),b
  5051  003190  D7A7               	goto	l9849
  5052                           
  5053                           ; BSR set to: 0
  5054  003192  0C07               	retlw	7
  5055  003194                     __end_of_doActionOff:
  5056                           	opt stack 0
  5057                           tblptru	equ	0xFF8
  5058                           tblptrh	equ	0xFF7
  5059                           tblptrl	equ	0xFF6
  5060                           tablat	equ	0xFF5
  5061                           prodh	equ	0xFF4
  5062                           prodl	equ	0xFF3
  5063                           intcon	equ	0xFF2
  5064                           postinc0	equ	0xFEE
  5065                           wreg	equ	0xFE8
  5066                           indf1	equ	0xFE7
  5067                           fsr1h	equ	0xFE2
  5068                           fsr1l	equ	0xFE1
  5069                           indf2	equ	0xFDF
  5070                           postinc2	equ	0xFDE
  5071                           postdec2	equ	0xFDD
  5072                           plusw2	equ	0xFDB
  5073                           fsr2h	equ	0xFDA
  5074                           fsr2l	equ	0xFD9
  5075                           status	equ	0xFD8
  5076                           
  5077 ;; *************** function _vscp_handleProtocolEvent *****************
  5078 ;; Defined at:
  5079 ;;		line 786 in file "../../vscp_firmware/common/vscp_firmware.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;		None
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;  bytes           1   45[BANK0 ] unsigned char 
  5084 ;;  page_save       2   41[BANK0 ] unsigned short 
  5085 ;;  i               1   51[BANK0 ] unsigned char 
  5086 ;;  page_save       2   39[BANK0 ] unsigned short 
  5087 ;;  byte            1   55[BANK0 ] unsigned char 
  5088 ;;  bytes           1   53[BANK0 ] unsigned char 
  5089 ;;  cb              1   50[BANK0 ] unsigned char 
  5090 ;;  bytes_this_t    1   49[BANK0 ] unsigned char 
  5091 ;;  j               1   58[BANK0 ] unsigned char 
  5092 ;;  i               1   56[BANK0 ] unsigned char 
  5093 ;;  k               1   52[BANK0 ] unsigned char 
  5094 ;;  i               1   54[BANK0 ] unsigned char 
  5095 ;;  len             1   48[BANK0 ] unsigned char 
  5096 ;;  pos             1   47[BANK0 ] unsigned char 
  5097 ;;  i               1   57[BANK0 ] unsigned char 
  5098 ;;  len             1   46[BANK0 ] unsigned char 
  5099 ;;  pos             1   44[BANK0 ] unsigned char 
  5100 ;;  offset          1   43[BANK0 ] unsigned char 
  5101 ;; Return value:  Size  Location     Type
  5102 ;;		None               void
  5103 ;; Registers used:
  5104 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5105 ;; Tracked objects:
  5106 ;;		On entry : F/0
  5107 ;;		On exit  : 0/0
  5108 ;;		Unchanged: 0/0
  5109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5110 ;;      Params:         0       0       0       0       0       0       0
  5111 ;;      Locals:         0      20       0       0       0       0       0
  5112 ;;      Temps:          0       7       0       0       0       0       0
  5113 ;;      Totals:         0      27       0       0       0       0       0
  5114 ;;Total ram usage:       27 bytes
  5115 ;; Hardware stack levels used:    1
  5116 ;; Hardware stack levels required when called:    9
  5117 ;; This function calls:
  5118 ;;		_vscp_init
  5119 ;;		_vscp_readAppReg
  5120 ;;		_vscp_writeAppReg
  5121 ;;		_vscp_sendEvent
  5122 ;;		_vscp_getGUID
  5123 ;;		_vscp_getMDF_URL
  5124 ;;		_vscp_goBootloaderMode
  5125 ;;		_vscp_getMatrixInfo
  5126 ;;		_vscp_handleHeartbeat
  5127 ;;		_vscp_handleSetNickname
  5128 ;;		_vscp_handleDropNickname
  5129 ;;		_vscp_newNodeOnline
  5130 ;;		_vscp_readRegister
  5131 ;;		_vscp_readStdReg
  5132 ;;		_vscp_writeRegister
  5133 ;;		_vscp_writeStdReg
  5134 ;;		___lbmod
  5135 ;; This function is called by:
  5136 ;;		_main
  5137 ;; This function uses a non-reentrant model
  5138 ;;
  5139                           
  5140                           	psect	text15
  5141  000E90                     __ptext15:
  5142                           	opt stack 0
  5143  000E90                     _vscp_handleProtocolEvent:
  5144                           	opt stack 21
  5145                           
  5146                           ; BSR set to: 0
  5147                           ;vscp_firmware.c: 788: if (0 == vscp_imsg.vscp_class) {
  5148                           
  5149                           ; BSR set to: 0
  5150                           ;incstack = 0
  5151                           ;incstack = 0
  5152  000E90  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  5153  000E92  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  5154  000E94  E101 D2A4          	bz	l9677
  5155  000E98  D2D3               	goto	l1271
  5156  000E9A                     l9265:
  5157                           
  5158                           ; BSR set to: 0
  5159                           ;vscp_firmware.c: 795: vscp_handleHeartbeat();
  5160  000E9A  EC74  F01B         	call	_vscp_handleHeartbeat	;wreg free
  5161                           
  5162                           ;vscp_firmware.c: 796: break;
  5163  000E9E  D2D0               	goto	l1271
  5164  000EA0                     l9267:
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;vscp_firmware.c: 800: vscp_newNodeOnline();
  5168  000EA0  ECE0  F01B         	call	_vscp_newNodeOnline	;wreg free
  5169                           
  5170                           ;vscp_firmware.c: 801: break;
  5171  000EA4  D2CD               	goto	l1271
  5172  000EA6                     l9269:
  5173                           
  5174                           ; BSR set to: 0
  5175                           ;vscp_firmware.c: 805: vscp_handleSetNickname();
  5176  000EA6  EC57  F01C         	call	_vscp_handleSetNickname	;wreg free
  5177                           
  5178                           ;vscp_firmware.c: 806: break;
  5179  000EAA  D2CA               	goto	l1271
  5180  000EAC                     l9271:
  5181                           
  5182                           ; BSR set to: 0
  5183                           ;vscp_firmware.c: 810: vscp_handleDropNickname();
  5184  000EAC  ECB2  F01B         	call	_vscp_handleDropNickname	;wreg free
  5185                           
  5186                           ;vscp_firmware.c: 811: break;
  5187  000EB0  D2C7               	goto	l1271
  5188  000EB2                     l9273:
  5189                           
  5190                           ; BSR set to: 0
  5191                           ;vscp_firmware.c: 815: if ((2 == (vscp_imsg.flags & 0x0f)) &&
  5192                           ;vscp_firmware.c: 816: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5193  000EB2  5196               	movf	_vscp_imsg& (0+255),w,b
  5194  000EB4  0B0F               	andlw	15
  5195  000EB6  0A02               	xorlw	2
  5196  000EB8  E001 D2C2          	bnz	l1271
  5197                           
  5198                           ; BSR set to: 0
  5199  000EBC  5191               	movf	_vscp_nickname& (0+255),w,b
  5200  000EBE  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5201  000EC2  62DF               	cpfseq	indf2,c
  5202  000EC4  D2BD               	goto	l1271
  5203                           
  5204                           ; BSR set to: 0
  5205                           ;vscp_firmware.c: 818: if (vscp_imsg.data[ 1 ] < 0x80) {
  5206  000EC6  0E80               	movlw	128
  5207  000EC8  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5208  000ECA  D012               	goto	l9293
  5209                           
  5210                           ; BSR set to: 0
  5211                           ;vscp_firmware.c: 821: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  5212  000ECC  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5213  000ECE  EC82  F019         	call	_vscp_readAppReg
  5214  000ED2                     L13:
  5215  000ED2  0100               	movlb	0	; () banked
  5216  000ED4                     L14:
  5217  000ED4  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
  5218                           
  5219                           ; BSR set to: 0
  5220                           ;vscp_firmware.c: 824: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  5221  000ED6  C09D  F0A9         	movff	_vscp_imsg+7,_vscp_omsg+5
  5222                           
  5223                           ; BSR set to: 0
  5224                           ;vscp_firmware.c: 826: vscp_omsg.priority = 0x03;
  5225  000EDA  0E03               	movlw	3
  5226  000EDC  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5227                           
  5228                           ; BSR set to: 0
  5229                           ;vscp_firmware.c: 827: vscp_omsg.flags = 0x80 + 2;
  5230  000EDE  0E82               	movlw	130
  5231  000EE0  6FA4               	movwf	_vscp_omsg& (0+255),b
  5232                           
  5233                           ; BSR set to: 0
  5234                           ;vscp_firmware.c: 828: vscp_omsg.vscp_class = 0;
  5235  000EE2  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5236  000EE4  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;vscp_firmware.c: 829: vscp_omsg.vscp_type = 10;
  5240  000EE6  0E0A               	movlw	10
  5241  000EE8  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5242  000EEA                     l9291:
  5243                           
  5244                           ; BSR set to: 0
  5245                           ;vscp_firmware.c: 832: vscp_sendEvent();
  5246  000EEA  EC31  F01C         	call	_vscp_sendEvent	;wreg free
  5247                           
  5248                           ;vscp_firmware.c: 833: } else {
  5249  000EEE  D2A8               	goto	l1271
  5250  000EF0                     l9293:
  5251                           
  5252                           ; BSR set to: 0
  5253                           ;vscp_firmware.c: 836: vscp_omsg.data[ 1 ] =
  5254                           ;vscp_firmware.c: 837: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  5255  000EF0  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5256  000EF2  EC8B  F017         	call	_vscp_readStdReg
  5257  000EF6  D7ED               	goto	L13
  5258  000EF8                     l9307:
  5259                           
  5260                           ; BSR set to: 0
  5261                           ;vscp_firmware.c: 855: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  5262                           ;vscp_firmware.c: 856: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5263  000EF8  5196               	movf	_vscp_imsg& (0+255),w,b
  5264  000EFA  0B0F               	andlw	15
  5265  000EFC  0A03               	xorlw	3
  5266  000EFE  E001 D29F          	bnz	l1271
  5267                           
  5268                           ; BSR set to: 0
  5269  000F02  5191               	movf	_vscp_nickname& (0+255),w,b
  5270  000F04  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5271  000F08  62DF               	cpfseq	indf2,c
  5272  000F0A  D29A               	goto	l1271
  5273                           
  5274                           ; BSR set to: 0
  5275                           ;vscp_firmware.c: 858: if (vscp_imsg.data[ 1 ] < 0x80) {
  5276  000F0C  0E80               	movlw	128
  5277  000F0E  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5278  000F10  D006               	goto	l9327
  5279                           
  5280                           ; BSR set to: 0
  5281                           ;vscp_firmware.c: 861: vscp_omsg.data[ 1 ] =
  5282                           ;vscp_firmware.c: 862: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5283  000F12  C09E  F051         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  5284  000F16  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5285  000F18  EC11  F003         	call	_vscp_writeAppReg
  5286  000F1C  D7DB               	goto	L14
  5287  000F1E                     l9327:
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;vscp_firmware.c: 878: vscp_omsg.data[ 1 ] =
  5291                           ;vscp_firmware.c: 879: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5292  000F1E  C09E  F00F         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  5293  000F22  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5294  000F24  EC49  F013         	call	_vscp_writeStdReg
  5295  000F28  D7D4               	goto	L13
  5296  000F2A                     l9341:
  5297                           
  5298                           ; BSR set to: 0
  5299                           ;vscp_firmware.c: 897: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  5300                           ;vscp_firmware.c: 899: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  5301                           ;vscp_firmware.c: 900: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  5302                           ;vscp_firmware.c: 901: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  5303                           ;vscp_firmware.c: 902: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  5304                           ;vscp_firmware.c: 903: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  5305                           ;vscp_firmware.c: 904: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  5306  000F2A  5191               	movf	_vscp_nickname& (0+255),w,b
  5307  000F2C  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5308  000F30  62DF               	cpfseq	indf2,c
  5309  000F32  D286               	goto	l1271
  5310                           
  5311                           ; BSR set to: 0
  5312  000F34  0E00               	movlw	0
  5313  000F36  EC3E  F01D         	call	_vscp_getGUID
  5314  000F3A  0100               	movlb	0	; () banked
  5315  000F3C  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5316  000F3E  E001 D27F          	bnz	l1271
  5317                           
  5318                           ; BSR set to: 0
  5319  000F42  0E03               	movlw	3
  5320  000F44  EC3E  F01D         	call	_vscp_getGUID
  5321  000F48  0100               	movlb	0	; () banked
  5322  000F4A  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5323  000F4C  E001 D278          	bnz	l1271
  5324                           
  5325                           ; BSR set to: 0
  5326  000F50  0E05               	movlw	5
  5327  000F52  EC3E  F01D         	call	_vscp_getGUID
  5328  000F56  0100               	movlb	0	; () banked
  5329  000F58  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5330  000F5A  E001 D271          	bnz	l1271
  5331                           
  5332                           ; BSR set to: 0
  5333  000F5E  0E07               	movlw	7
  5334  000F60  EC3E  F01D         	call	_vscp_getGUID
  5335  000F64  0100               	movlb	0	; () banked
  5336  000F66  19A1               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  5337  000F68  E001 D26A          	bnz	l1271
  5338                           
  5339                           ; BSR set to: 0
  5340  000F6C  5053               	movf	_vscp_page_select+1,w,c
  5341  000F6E  19A2               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  5342  000F70  E001 D266          	bnz	l1271
  5343                           
  5344                           ; BSR set to: 0
  5345  000F74  5052               	movf	_vscp_page_select,w,c
  5346  000F76  EE20  F0A3         	lfsr	2,_vscp_imsg+13
  5347  000F7A  62DF               	cpfseq	indf2,c
  5348  000F7C  D261               	goto	l1271
  5349                           
  5350                           ; BSR set to: 0
  5351                           ;vscp_firmware.c: 906: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  5352  000F7E  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5353  000F80  EC12  F01D         	call	_vscp_goBootloaderMode
  5354  000F84  D25D               	goto	l1271
  5355  000F86                     l9357:
  5356                           
  5357                           ; BSR set to: 0
  5358                           ;vscp_firmware.c: 915: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  5359                           ;vscp_firmware.c: 916: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  5360                           ;vscp_firmware.c: 917: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  5361                           ;vscp_firmware.c: 918: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  5362  000F86  0E00               	movlw	0
  5363  000F88  EC3E  F01D         	call	_vscp_getGUID
  5364  000F8C  0100               	movlb	0	; () banked
  5365  000F8E  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5366  000F90  E173               	bnz	l9401
  5367                           
  5368                           ; BSR set to: 0
  5369  000F92  0E01               	movlw	1
  5370  000F94  EC3E  F01D         	call	_vscp_getGUID
  5371  000F98  0100               	movlb	0	; () banked
  5372  000F9A  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5373  000F9C  E16D               	bnz	l9401
  5374                           
  5375                           ; BSR set to: 0
  5376  000F9E  0E02               	movlw	2
  5377  000FA0  EC3E  F01D         	call	_vscp_getGUID
  5378  000FA4  0100               	movlb	0	; () banked
  5379  000FA6  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5380  000FA8  E167               	bnz	l9401
  5381                           
  5382                           ; BSR set to: 0
  5383  000FAA  0E03               	movlw	3
  5384  000FAC  EC3E  F01D         	call	_vscp_getGUID
  5385  000FB0  0100               	movlb	0	; () banked
  5386  000FB2  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5387  000FB4  E161               	bnz	l9401
  5388                           
  5389                           ; BSR set to: 0
  5390                           ;vscp_firmware.c: 919: vscp_guid_reset |= 0x10;
  5391  000FB6  898D               	bsf	_vscp_guid_reset& (0+255),4,b
  5392  000FB8  D05F               	goto	l9401
  5393  000FBA                     l9367:
  5394                           
  5395                           ; BSR set to: 0
  5396                           ;vscp_firmware.c: 924: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  5397                           ;vscp_firmware.c: 925: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  5398                           ;vscp_firmware.c: 926: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  5399                           ;vscp_firmware.c: 927: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  5400  000FBA  0E04               	movlw	4
  5401  000FBC  EC3E  F01D         	call	_vscp_getGUID
  5402  000FC0  0100               	movlb	0	; () banked
  5403  000FC2  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5404  000FC4  E159               	bnz	l9401
  5405                           
  5406                           ; BSR set to: 0
  5407  000FC6  0E05               	movlw	5
  5408  000FC8  EC3E  F01D         	call	_vscp_getGUID
  5409  000FCC  0100               	movlb	0	; () banked
  5410  000FCE  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5411  000FD0  E153               	bnz	l9401
  5412                           
  5413                           ; BSR set to: 0
  5414  000FD2  0E06               	movlw	6
  5415  000FD4  EC3E  F01D         	call	_vscp_getGUID
  5416  000FD8  0100               	movlb	0	; () banked
  5417  000FDA  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5418  000FDC  E14D               	bnz	l9401
  5419                           
  5420                           ; BSR set to: 0
  5421  000FDE  0E07               	movlw	7
  5422  000FE0  EC3E  F01D         	call	_vscp_getGUID
  5423  000FE4  0100               	movlb	0	; () banked
  5424  000FE6  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5425  000FE8  E147               	bnz	l9401
  5426                           
  5427                           ; BSR set to: 0
  5428                           ;vscp_firmware.c: 928: vscp_guid_reset |= 0x20;
  5429  000FEA  8B8D               	bsf	_vscp_guid_reset& (0+255),5,b
  5430  000FEC  D045               	goto	l9401
  5431  000FEE                     l9377:
  5432                           
  5433                           ; BSR set to: 0
  5434                           ;vscp_firmware.c: 933: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  5435                           ;vscp_firmware.c: 934: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  5436                           ;vscp_firmware.c: 935: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  5437                           ;vscp_firmware.c: 936: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  5438  000FEE  0E08               	movlw	8
  5439  000FF0  EC3E  F01D         	call	_vscp_getGUID
  5440  000FF4  0100               	movlb	0	; () banked
  5441  000FF6  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5442  000FF8  E13F               	bnz	l9401
  5443                           
  5444                           ; BSR set to: 0
  5445  000FFA  0E09               	movlw	9
  5446  000FFC  EC3E  F01D         	call	_vscp_getGUID
  5447  001000  0100               	movlb	0	; () banked
  5448  001002  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5449  001004  E139               	bnz	l9401
  5450                           
  5451                           ; BSR set to: 0
  5452  001006  0E0A               	movlw	10
  5453  001008  EC3E  F01D         	call	_vscp_getGUID
  5454  00100C  0100               	movlb	0	; () banked
  5455  00100E  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5456  001010  E133               	bnz	l9401
  5457                           
  5458                           ; BSR set to: 0
  5459  001012  0E0B               	movlw	11
  5460  001014  EC3E  F01D         	call	_vscp_getGUID
  5461  001018  0100               	movlb	0	; () banked
  5462  00101A  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5463  00101C  E12D               	bnz	l9401
  5464                           
  5465                           ; BSR set to: 0
  5466                           ;vscp_firmware.c: 937: vscp_guid_reset |= 0x40;
  5467  00101E  8D8D               	bsf	_vscp_guid_reset& (0+255),6,b
  5468  001020  D02B               	goto	l9401
  5469  001022                     l9387:
  5470                           
  5471                           ; BSR set to: 0
  5472                           ;vscp_firmware.c: 942: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  5473                           ;vscp_firmware.c: 943: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  5474                           ;vscp_firmware.c: 944: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  5475                           ;vscp_firmware.c: 945: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  5476  001022  0E0C               	movlw	12
  5477  001024  EC3E  F01D         	call	_vscp_getGUID
  5478  001028  0100               	movlb	0	; () banked
  5479  00102A  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5480  00102C  E125               	bnz	l9401
  5481                           
  5482                           ; BSR set to: 0
  5483  00102E  0E0D               	movlw	13
  5484  001030  EC3E  F01D         	call	_vscp_getGUID
  5485  001034  0100               	movlb	0	; () banked
  5486  001036  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5487  001038  E11F               	bnz	l9401
  5488                           
  5489                           ; BSR set to: 0
  5490  00103A  0E0E               	movlw	14
  5491  00103C  EC3E  F01D         	call	_vscp_getGUID
  5492  001040  0100               	movlb	0	; () banked
  5493  001042  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5494  001044  E119               	bnz	l9401
  5495                           
  5496                           ; BSR set to: 0
  5497  001046  0E0F               	movlw	15
  5498  001048  EC3E  F01D         	call	_vscp_getGUID
  5499  00104C  0100               	movlb	0	; () banked
  5500  00104E  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5501  001050  E113               	bnz	l9401
  5502                           
  5503                           ; BSR set to: 0
  5504                           ;vscp_firmware.c: 946: vscp_guid_reset |= 0x80;
  5505  001052  8F8D               	bsf	_vscp_guid_reset& (0+255),7,b
  5506  001054  D011               	goto	l9401
  5507  001056                     l1212:
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;vscp_firmware.c: 951: vscp_guid_reset = 0;
  5511  001056  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  5512                           
  5513                           ;vscp_firmware.c: 952: break;
  5514  001058  D00F               	goto	l9401
  5515  00105A                     l9399:
  5516                           
  5517                           ; BSR set to: 0
  5518  00105A  399C               	swapf	(_vscp_imsg+6)& (0+255),w,b
  5519  00105C  0B0F               	andlw	15
  5520  00105E  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5521  001060  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5522                           
  5523                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5524                           ; Switch size 1, requested type "space"
  5525                           ; Number of cases is 1, Range of values is 0 to 0
  5526                           ; switch strategies available:
  5527                           ; Name         Instructions Cycles
  5528                           ; simple_byte            4     3 (average)
  5529                           ;	Chosen strategy is simple_byte
  5530  001062  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5531  001064  E1F8               	bnz	l1212
  5532                           
  5533                           ; BSR set to: 0
  5534                           ; Switch size 1, requested type "space"
  5535                           ; Number of cases is 4, Range of values is 0 to 3
  5536                           ; switch strategies available:
  5537                           ; Name         Instructions Cycles
  5538                           ; simple_byte           13     7 (average)
  5539                           ;	Chosen strategy is simple_byte
  5540  001066  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5541  001068  E08E               	bz	l9357
  5542  00106A  0A01               	xorlw	1	; case 1
  5543  00106C  E0A6               	bz	l9367
  5544  00106E  0A03               	xorlw	3	; case 2
  5545  001070  E0BE               	bz	l9377
  5546  001072  0A01               	xorlw	1	; case 3
  5547  001074  E0D6               	bz	l9387
  5548  001076  D7EF               	goto	l1212
  5549  001078                     l9401:
  5550                           
  5551                           ; BSR set to: 0
  5552                           ;vscp_firmware.c: 955: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  5553  001078  518D               	movf	_vscp_guid_reset& (0+255),w,b
  5554  00107A  0BF0               	andlw	240
  5555  00107C  0AF0               	xorlw	240
  5556  00107E  E001 D1DF          	bnz	l1271
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;vscp_firmware.c: 957: vscp_init();
  5560  001082  EC32  F01B         	call	_vscp_init	;wreg free
  5561  001086  D1DC               	goto	l1271
  5562  001088                     l9405:
  5563                           
  5564                           ; BSR set to: 0
  5565                           ;vscp_firmware.c: 963: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5566  001088  5191               	movf	_vscp_nickname& (0+255),w,b
  5567  00108A  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5568  00108E  62DF               	cpfseq	indf2,c
  5569  001090  D1D7               	goto	l1271
  5570                           
  5571                           ; BSR set to: 0
  5572                           ;vscp_firmware.c: 965: uint8_t i;
  5573                           ;vscp_firmware.c: 966: uint8_t pos = 0;
  5574  001092  6BDD               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  5575                           
  5576                           ;vscp_firmware.c: 967: uint8_t offset = vscp_imsg.data[ 1 ];
  5577  001094  C09D  F0DC         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  5578                           
  5579                           ;vscp_firmware.c: 968: uint8_t len = vscp_imsg.data[ 2 ];
  5580  001098  C09E  F0DF         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  5581                           
  5582                           ;vscp_firmware.c: 970: for (i = 0; i < len; i++) {
  5583  00109C  6BEA               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  5584  00109E  D042               	goto	l9437
  5585  0010A0                     l9409:
  5586                           
  5587                           ; BSR set to: 0
  5588                           ;vscp_firmware.c: 971: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  5589  0010A0  0E07               	movlw	7
  5590  0010A2  6E08               	movwf	?___lbmod,c
  5591  0010A4  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5592  0010A6  EC0A  F01C         	call	___lbmod
  5593  0010AA  0100               	movlb	0	; () banked
  5594  0010AC  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5595  0010AE  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5596  0010B0  0FAA               	addlw	low (_vscp_omsg+6)
  5597  0010B2  6ED9               	movwf	fsr2l,c
  5598  0010B4  6ADA               	clrf	fsr2h,c
  5599  0010B6  51DC               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  5600  0010B8  25EA               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5601  0010BA  ECED  F01C         	call	_vscp_readRegister
  5602  0010BE  6EDF               	movwf	indf2,c
  5603                           
  5604                           ;vscp_firmware.c: 973: if ((i % 7) == 6 || i == (len - 1)) {
  5605  0010C0  0E07               	movlw	7
  5606  0010C2  6E08               	movwf	?___lbmod,c
  5607  0010C4  0100               	movlb	0	; () banked
  5608  0010C6  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5609  0010C8  EC0A  F01C         	call	___lbmod
  5610  0010CC  0A06               	xorlw	6
  5611  0010CE  E00B               	bz	l9415
  5612  0010D0  0EFF               	movlw	255
  5613  0010D2  0100               	movlb	0	; () banked
  5614  0010D4  25DF               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  5615  0010D6  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5616  0010D8  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5617  0010DA  0EFF               	movlw	255
  5618  0010DC  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  5619  0010DE  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5620  0010E0  19D1               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5621  0010E2  11D2               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5622  0010E4  E11E               	bnz	l9435
  5623  0010E6                     l9415:
  5624                           
  5625                           ;vscp_firmware.c: 974: uint8_t bytes;
  5626                           ;vscp_firmware.c: 976: if ((i % 7) == 6) bytes = 7;
  5627  0010E6  0E07               	movlw	7
  5628  0010E8  6E08               	movwf	?___lbmod,c
  5629  0010EA  0100               	movlb	0	; () banked
  5630  0010EC  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5631  0010EE  EC0A  F01C         	call	___lbmod
  5632  0010F2  0A06               	xorlw	6
  5633  0010F4  E103               	bnz	l9419
  5634  0010F6  0E07               	movlw	7
  5635  0010F8  0100               	movlb	0	; () banked
  5636  0010FA  D009               	goto	L15
  5637  0010FC                     l9419:
  5638                           
  5639                           ;vscp_firmware.c: 977: else bytes = (i % 7) + 1;
  5640  0010FC  0E07               	movlw	7
  5641  0010FE  6E08               	movwf	?___lbmod,c
  5642  001100  0100               	movlb	0	; () banked
  5643  001102  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5644  001104  EC0A  F01C         	call	___lbmod
  5645  001108  0100               	movlb	0	; () banked
  5646  00110A  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5647  00110C  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5648  00110E                     L15:
  5649  00110E  6FDE               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;vscp_firmware.c: 979: vscp_omsg.flags = 0x80 + bytes + 1;
  5653  001110  51DE               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  5654  001112  0F81               	addlw	129
  5655  001114  6FA4               	movwf	_vscp_omsg& (0+255),b
  5656                           
  5657                           ; BSR set to: 0
  5658                           ;vscp_firmware.c: 980: vscp_omsg.priority = 0x03;
  5659                           
  5660                           ; BSR set to: 0
  5661                           ;vscp_firmware.c: 981: vscp_omsg.vscp_class = 0;
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;vscp_firmware.c: 982: vscp_omsg.vscp_type = 26;
  5665  001116  D9AB               	call	PL72	;call to abstracted procedure
  5666                           
  5667                           ; BSR set to: 0
  5668                           ;vscp_firmware.c: 983: vscp_omsg.data[ 0 ] = pos;
  5669  001118  C0DD  F0A9         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  5670                           
  5671                           ; BSR set to: 0
  5672                           ;vscp_firmware.c: 986: vscp_sendEvent();
  5673  00111C  EC31  F01C         	call	_vscp_sendEvent	;wreg free
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;vscp_firmware.c: 987: pos++;
  5677  001120  2BDD               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  5678  001122                     l9435:
  5679                           
  5680                           ; BSR set to: 0
  5681  001122  2BEA               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  5682  001124                     l9437:
  5683                           
  5684                           ; BSR set to: 0
  5685  001124  51DF               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  5686  001126  5DEA               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5687  001128  E301 D18A          	bc	l1271
  5688  00112C  D7B9               	goto	l9409
  5689  00112E                     l9439:
  5690                           
  5691                           ; BSR set to: 0
  5692                           ;vscp_firmware.c: 995: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5693  00112E  5191               	movf	_vscp_nickname& (0+255),w,b
  5694  001130  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5695  001134  62DF               	cpfseq	indf2,c
  5696  001136  D184               	goto	l1271
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;vscp_firmware.c: 996: uint8_t i;
  5700                           ;vscp_firmware.c: 997: uint8_t pos = vscp_imsg.data[ 1 ];
  5701  001138  C09D  F0E0         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1279
  5702                           
  5703                           ; BSR set to: 0
  5704                           ;vscp_firmware.c: 998: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  5705  00113C  5196               	movf	_vscp_imsg& (0+255),w,b
  5706  00113E  0FFE               	addlw	254
  5707  001140  0B07               	andlw	7
  5708  001142  6FE1               	movwf	vscp_handleProtocolEvent@len_1280& (0+255),b
  5709                           
  5710                           ; BSR set to: 0
  5711                           ;vscp_firmware.c: 1000: for (i = 0; i < len; i++) {
  5712  001144  6BE7               	clrf	vscp_handleProtocolEvent@i_1278& (0+255),b
  5713  001146  D016               	goto	l9453
  5714  001148                     l9447:
  5715                           
  5716                           ; BSR set to: 0
  5717                           ;vscp_firmware.c: 1002: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  5718  001148  51E7               	movf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5719  00114A  0F9E               	addlw	low (_vscp_imsg+8)
  5720  00114C  6ED9               	movwf	fsr2l,c
  5721  00114E  6ADA               	clrf	fsr2h,c
  5722  001150  50DF               	movf	indf2,w,c
  5723  001152  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  5724  001154  51E0               	movf	vscp_handleProtocolEvent@pos_1279& (0+255),w,b
  5725  001156  25E7               	addwf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5726  001158  EC8C  F01C         	call	_vscp_writeRegister
  5727                           
  5728                           ;vscp_firmware.c: 1003: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  5729  00115C  0100               	movlb	0	; () banked
  5730  00115E  51E7               	movf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5731  001160  0FAA               	addlw	low (_vscp_omsg+6)
  5732  001162  6ED9               	movwf	fsr2l,c
  5733  001164  6ADA               	clrf	fsr2h,c
  5734  001166  51E0               	movf	vscp_handleProtocolEvent@pos_1279& (0+255),w,b
  5735  001168  25E7               	addwf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5736  00116A  ECED  F01C         	call	_vscp_readRegister
  5737  00116E  6EDF               	movwf	indf2,c
  5738  001170  0100               	movlb	0	; () banked
  5739  001172  2BE7               	incf	vscp_handleProtocolEvent@i_1278& (0+255),f,b
  5740  001174                     l9453:
  5741                           
  5742                           ; BSR set to: 0
  5743  001174  51E1               	movf	vscp_handleProtocolEvent@len_1280& (0+255),w,b
  5744  001176  5DE7               	subwf	vscp_handleProtocolEvent@i_1278& (0+255),w,b
  5745  001178  E3E7               	bnc	l9447
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;vscp_firmware.c: 1004: }
  5749                           ;vscp_firmware.c: 1006: vscp_omsg.priority = 0x03;
  5750                           
  5751                           ; BSR set to: 0
  5752                           ;vscp_firmware.c: 1007: vscp_omsg.vscp_class = 0;
  5753                           
  5754                           ;vscp_firmware.c: 1008: vscp_omsg.vscp_type = 26;
  5755  00117A  D979               	call	PL72	;call to abstracted procedure
  5756                           
  5757                           ; BSR set to: 0
  5758                           ;vscp_firmware.c: 1009: vscp_omsg.data[ 0 ] = 0;
  5759  00117C  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;vscp_firmware.c: 1010: vscp_omsg.flags = 0x80 + len + 1;
  5763  00117E  51E1               	movf	vscp_handleProtocolEvent@len_1280& (0+255),w,b
  5764  001180  0F81               	addlw	129
  5765  001182  6FA4               	movwf	_vscp_omsg& (0+255),b
  5766  001184  D6B2               	goto	l9291
  5767  001186                     l9465:
  5768                           
  5769                           ; BSR set to: 0
  5770                           ;vscp_firmware.c: 1020: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5771  001186  5191               	movf	_vscp_nickname& (0+255),w,b
  5772  001188  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5773  00118C  62DF               	cpfseq	indf2,c
  5774  00118E  D158               	goto	l1271
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;vscp_firmware.c: 1022: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5778                           ;vscp_firmware.c: 1023: vscp_imsg.data[ 1 ],
  5779                           ;vscp_firmware.c: 1024: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  5780  001190  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5781  001192  EC82  F019         	call	_vscp_readAppReg
  5782  001196  0100               	movlb	0	; () banked
  5783  001198  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5784  00119A  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5785  00119C  6E51               	movwf	?_vscp_writeAppReg,c
  5786  00119E  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5787  0011A0  EC11  F003         	call	_vscp_writeAppReg
  5788  0011A4  D697               	goto	L14
  5789  0011A6                     l9481:
  5790                           
  5791                           ; BSR set to: 0
  5792                           ;vscp_firmware.c: 1040: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5793  0011A6  5191               	movf	_vscp_nickname& (0+255),w,b
  5794  0011A8  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5795  0011AC  62DF               	cpfseq	indf2,c
  5796  0011AE  D148               	goto	l1271
  5797                           
  5798                           ; BSR set to: 0
  5799                           ;vscp_firmware.c: 1042: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5800                           ;vscp_firmware.c: 1043: vscp_imsg.data[ 1 ],
  5801                           ;vscp_firmware.c: 1044: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  5802  0011B0  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5803  0011B2  EC82  F019         	call	_vscp_readAppReg
  5804  0011B6  0100               	movlb	0	; () banked
  5805  0011B8  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5806  0011BA  05D1               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  5807  0011BC  6E51               	movwf	?_vscp_writeAppReg,c
  5808  0011BE  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5809  0011C0  EC11  F003         	call	_vscp_writeAppReg
  5810  0011C4  D687               	goto	L14
  5811  0011C6                     l9497:
  5812                           
  5813                           ; BSR set to: 0
  5814                           ;vscp_firmware.c: 1060: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  5815                           ;vscp_firmware.c: 1061: (0xff == vscp_imsg.data[ 0 ])) {
  5816  0011C6  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
  5817  0011C8  1991               	xorwf	_vscp_nickname& (0+255),w,b
  5818  0011CA  E003               	bz	l1236
  5819                           
  5820                           ; BSR set to: 0
  5821  0011CC  299C               	incf	(_vscp_imsg+6)& (0+255),w,b
  5822  0011CE  E001 D137          	bnz	l1271
  5823  0011D2                     l1236:
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;vscp_firmware.c: 1063: uint8_t i, j, k = 0;
  5827  0011D2  6BE5               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;vscp_firmware.c: 1067: vscp_omsg.priority = 0x03;
  5831  0011D4  0E03               	movlw	3
  5832  0011D6  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5833                           
  5834                           ;vscp_firmware.c: 1068: vscp_omsg.flags = 0x80 + 8;
  5835  0011D8  0E88               	movlw	136
  5836  0011DA  6FA4               	movwf	_vscp_omsg& (0+255),b
  5837                           
  5838                           ; BSR set to: 0
  5839                           ;vscp_firmware.c: 1069: vscp_omsg.vscp_class = 0;
  5840  0011DC  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5841  0011DE  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5842                           
  5843                           ;vscp_firmware.c: 1070: vscp_omsg.vscp_type = 32;
  5844  0011E0  0E20               	movlw	32
  5845  0011E2  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;vscp_firmware.c: 1072: for (i = 0; i < 3; i++)
  5849  0011E4  6BE9               	clrf	vscp_handleProtocolEvent@i_1281& (0+255),b
  5850  0011E6                     l1237:
  5851                           
  5852                           ; BSR set to: 0
  5853                           ;vscp_firmware.c: 1073: {
  5854                           ;vscp_firmware.c: 1074: vscp_omsg.data[0] = i;
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;vscp_firmware.c: 1076: for (j = 1; j < 8; j++) {
  5858  0011E6  D94A               	call	PL78	;call to abstracted procedure
  5859  0011E8                     l9517:
  5860                           
  5861                           ; BSR set to: 0
  5862                           ;vscp_firmware.c: 1077: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  5863  0011E8  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5864  0011EA  0FA9               	addlw	low (_vscp_omsg+5)
  5865  0011EC  6ED9               	movwf	fsr2l,c
  5866  0011EE  6ADA               	clrf	fsr2h,c
  5867  0011F0  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5868  0011F2  080F               	sublw	15
  5869  0011F4  EC3E  F01D         	call	_vscp_getGUID
  5870  0011F8  6EDF               	movwf	indf2,c
  5871  0011FA  0100               	movlb	0	; () banked
  5872  0011FC  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5873                           
  5874                           ; BSR set to: 0
  5875                           ;vscp_firmware.c: 1078: if (k > 16)
  5876  0011FE  0E10               	movlw	16
  5877  001200  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5878  001202  D001               	goto	l9525
  5879  001204  D004               	goto	l9529
  5880  001206                     l9525:
  5881                           
  5882                           ; BSR set to: 0
  5883  001206  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5884                           
  5885                           ; BSR set to: 0
  5886  001208  0E07               	movlw	7
  5887  00120A  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5888  00120C  D7ED               	goto	l9517
  5889  00120E                     l9529:
  5890                           
  5891                           ; BSR set to: 0
  5892                           ;vscp_firmware.c: 1080: }
  5893                           ;vscp_firmware.c: 1082: if (k > 16)
  5894  00120E  0E10               	movlw	16
  5895  001210  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5896  001212  D001               	goto	l9533
  5897  001214  D006               	goto	l1238
  5898  001216                     l9533:
  5899                           
  5900                           ; BSR set to: 0
  5901                           ;vscp_firmware.c: 1085: vscp_sendEvent();
  5902  001216  EC31  F01C         	call	_vscp_sendEvent	;wreg free
  5903                           
  5904                           ; BSR set to: 0
  5905  00121A  2BE9               	incf	vscp_handleProtocolEvent@i_1281& (0+255),f,b
  5906                           
  5907                           ; BSR set to: 0
  5908  00121C  0E02               	movlw	2
  5909  00121E  65E9               	cpfsgt	vscp_handleProtocolEvent@i_1281& (0+255),b
  5910  001220  D7E2               	goto	l1237
  5911  001222                     l1238:
  5912                           
  5913                           ; BSR set to: 0
  5914                           ;vscp_firmware.c: 1086: }
  5915                           ;vscp_firmware.c: 1088: for (j = 0; j < 5; j++)
  5916  001222  6BEB               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  5917  001224                     l9543:
  5918                           
  5919                           ; BSR set to: 0
  5920                           ;vscp_firmware.c: 1089: {
  5921                           ;vscp_firmware.c: 1090: if (vscp_getMDF_URL(j) > 0)
  5922  001224  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5923  001226  EC06  F01D         	call	_vscp_getMDF_URL
  5924  00122A  0900               	iorlw	0
  5925  00122C  E008               	bz	l9547
  5926                           
  5927                           ; BSR set to: 0
  5928                           ;vscp_firmware.c: 1091: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  5929  00122E  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5930  001230  0FAC               	addlw	low (_vscp_omsg+8)
  5931  001232  6ED9               	movwf	fsr2l,c
  5932  001234  6ADA               	clrf	fsr2h,c
  5933  001236  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5934  001238  EC06  F01D         	call	_vscp_getMDF_URL
  5935  00123C  D005               	goto	L16
  5936  00123E                     l9547:
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;vscp_firmware.c: 1092: else
  5940                           ;vscp_firmware.c: 1093: vscp_omsg.data[3 + j] = 0;
  5941  00123E  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5942  001240  0FAC               	addlw	low (_vscp_omsg+8)
  5943  001242  6ED9               	movwf	fsr2l,c
  5944  001244  6ADA               	clrf	fsr2h,c
  5945  001246  0E00               	movlw	0
  5946  001248                     L16:
  5947  001248  6EDF               	movwf	indf2,c
  5948                           
  5949                           ; BSR set to: 0
  5950  00124A  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5951                           
  5952                           ; BSR set to: 0
  5953  00124C  0E04               	movlw	4
  5954  00124E  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5955  001250  D7E9               	goto	l9543
  5956                           
  5957                           ; BSR set to: 0
  5958                           ;vscp_firmware.c: 1094: }
  5959                           ;vscp_firmware.c: 1096: vscp_sendEvent();
  5960  001252  EC31  F01C         	call	_vscp_sendEvent	;wreg free
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;vscp_firmware.c: 1098: k = 5;
  5964  001256  0E05               	movlw	5
  5965  001258  6FE5               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;vscp_firmware.c: 1099: for (i = 3; i < 7; i++)
  5969  00125A  0E03               	movlw	3
  5970  00125C  6FE9               	movwf	vscp_handleProtocolEvent@i_1281& (0+255),b
  5971  00125E                     l1247:
  5972                           
  5973                           ; BSR set to: 0
  5974                           ;vscp_firmware.c: 1100: {
  5975                           ;vscp_firmware.c: 1101: vscp_omsg.data[0] = i;
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;vscp_firmware.c: 1103: for (j = 1; j < 8; j++) {
  5979  00125E  D90E               	call	PL78	;call to abstracted procedure
  5980  001260                     l9569:
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;vscp_firmware.c: 1104: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  5984  001260  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5985  001262  0FA9               	addlw	low (_vscp_omsg+5)
  5986  001264  6ED9               	movwf	fsr2l,c
  5987  001266  6ADA               	clrf	fsr2h,c
  5988  001268  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5989  00126A  EC06  F01D         	call	_vscp_getMDF_URL
  5990  00126E  6EDF               	movwf	indf2,c
  5991                           
  5992                           ; BSR set to: 0
  5993  001270  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5994                           
  5995                           ; BSR set to: 0
  5996  001272  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5997                           
  5998                           ; BSR set to: 0
  5999  001274  0E07               	movlw	7
  6000  001276  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  6001  001278  D7F3               	goto	l9569
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;vscp_firmware.c: 1105: }
  6005                           ;vscp_firmware.c: 1106: vscp_sendEvent();
  6006  00127A  EC31  F01C         	call	_vscp_sendEvent	;wreg free
  6007                           
  6008                           ; BSR set to: 0
  6009  00127E  2BE9               	incf	vscp_handleProtocolEvent@i_1281& (0+255),f,b
  6010                           
  6011                           ; BSR set to: 0
  6012  001280  0E06               	movlw	6
  6013  001282  65E9               	cpfsgt	vscp_handleProtocolEvent@i_1281& (0+255),b
  6014  001284  D7EC               	goto	l1247
  6015  001286  D0DC               	goto	l1271
  6016  001288                     l9583:
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;vscp_firmware.c: 1115: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  6020  001288  5191               	movf	_vscp_nickname& (0+255),w,b
  6021  00128A  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6022  00128E  62DF               	cpfseq	indf2,c
  6023  001290  D0D7               	goto	l1271
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;vscp_firmware.c: 1117: vscp_omsg.priority = 0x03;
  6027  001292  0E03               	movlw	3
  6028  001294  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6029                           
  6030                           ;vscp_firmware.c: 1118: vscp_omsg.flags = 0x80 + 7;
  6031  001296  0E87               	movlw	135
  6032  001298  6FA4               	movwf	_vscp_omsg& (0+255),b
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;vscp_firmware.c: 1119: vscp_omsg.vscp_class = 0;
  6036  00129A  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6037  00129C  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6038                           
  6039                           ;vscp_firmware.c: 1120: vscp_omsg.vscp_type = 34;
  6040  00129E  0E22               	movlw	34
  6041  0012A0  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;vscp_firmware.c: 1122: vscp_getMatrixInfo((char *) vscp_omsg.data);
  6045  0012A2  0EA9               	movlw	(_vscp_omsg+5)& (0+255)
  6046  0012A4  ECBF  F01C         	call	_vscp_getMatrixInfo
  6047  0012A8  D620               	goto	l9291
  6048  0012AA                     l9593:
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;vscp_firmware.c: 1138: if ( vscp_nickname == vscp_imsg.data[0] ) {
  6052  0012AA  5191               	movf	_vscp_nickname& (0+255),w,b
  6053  0012AC  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6054  0012B0  62DF               	cpfseq	indf2,c
  6055  0012B2  D0C6               	goto	l1271
  6056                           
  6057                           ; BSR set to: 0
  6058                           ;vscp_firmware.c: 1140: uint16_t page_save;
  6059                           ;vscp_firmware.c: 1141: uint8_t byte = 0, bytes = 0;
  6060  0012B4  6BE8               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  6061                           
  6062                           ; BSR set to: 0
  6063                           ;vscp_firmware.c: 1142: uint8_t bytes_this_time, cb;
  6064                           ;vscp_firmware.c: 1146: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  6065  0012B6  C096  F0D1         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  6066  0012BA  0E0F               	movlw	15
  6067  0012BC  17D1               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6068  0012BE  0E04               	movlw	4
  6069  0012C0  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6070  0012C2  E304               	bnc	l9601
  6071                           
  6072                           ; BSR set to: 0
  6073                           ;vscp_firmware.c: 1149: bytes = vscp_imsg.data[4];
  6074  0012C4  C0A0  F0E6         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1286
  6075                           
  6076                           ;vscp_firmware.c: 1151: if ( 0 == bytes ) {
  6077  0012C8  67E6               	tstfsz	vscp_handleProtocolEvent@bytes_1286& (0+255),b
  6078  0012CA  D002               	goto	l9605
  6079  0012CC                     l9601:
  6080                           
  6081                           ; BSR set to: 0
  6082                           ;vscp_firmware.c: 1152: bytes = 1;
  6083  0012CC  0E01               	movlw	1
  6084  0012CE  6FE6               	movwf	vscp_handleProtocolEvent@bytes_1286& (0+255),b
  6085  0012D0                     l9605:
  6086                           
  6087                           ; BSR set to: 0
  6088                           ;vscp_firmware.c: 1157: }
  6089                           ;vscp_firmware.c: 1160: page_save = vscp_page_select;
  6090  0012D0  C052  F0D8         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  6091  0012D4  C053  F0D9         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  6092                           
  6093                           ; BSR set to: 0
  6094                           ;vscp_firmware.c: 1165: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  6095  0012D8  D8B4               	call	PL28	;call to abstracted procedure
  6096                           
  6097                           ; BSR set to: 0
  6098                           ;vscp_firmware.c: 1168: vscp_omsg.priority = 0x03;
  6099  0012DA  0E03               	movlw	3
  6100  0012DC  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;vscp_firmware.c: 1169: vscp_omsg.vscp_class = 0;
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;vscp_firmware.c: 1170: vscp_omsg.vscp_type = 39;
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;vscp_firmware.c: 1171: vscp_omsg.data[0] = 0;
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;vscp_firmware.c: 1172: vscp_omsg.data[1] = vscp_imsg.data[1];
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;vscp_firmware.c: 1173: vscp_omsg.data[2] = vscp_imsg.data[2];
  6116  0012DE  D8BD               	call	PL38	;call to abstracted procedure
  6117  0012E0                     l9621:
  6118                           
  6119                           ; BSR set to: 0
  6120                           ;vscp_firmware.c: 1177: if ( ( bytes - byte ) >= 4 ) {
  6121  0012E0  51E8               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6122  0012E2  C0E6  F0D1         	movff	vscp_handleProtocolEvent@bytes_1286,??_vscp_handleProtocolEvent
  6123  0012E6  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6124  0012E8  5FD1               	subwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6125  0012EA  0E00               	movlw	0
  6126  0012EC  5BD2               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6127  0012EE  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6128  0012F0  0A80               	xorlw	128
  6129  0012F2  0F80               	addlw	-128
  6130  0012F4  0E04               	movlw	4
  6131  0012F6  B4D8               	btfsc	status,2,c
  6132  0012F8  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6133  0012FA  E302               	bnc	l9625
  6134                           
  6135                           ; BSR set to: 0
  6136                           ;vscp_firmware.c: 1178: bytes_this_time = 4;
  6137  0012FC  0E04               	movlw	4
  6138  0012FE  D002               	goto	L18
  6139  001300                     l9625:
  6140                           
  6141                           ; BSR set to: 0
  6142                           ;vscp_firmware.c: 1180: else {
  6143                           ;vscp_firmware.c: 1181: bytes_this_time = (bytes - byte);
  6144  001300  51E8               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6145  001302  5DE6               	subwf	vscp_handleProtocolEvent@bytes_1286& (0+255),w,b
  6146  001304                     L18:
  6147  001304  6FE2               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  6148                           
  6149                           ; BSR set to: 0
  6150                           ;vscp_firmware.c: 1182: }
  6151                           ;vscp_firmware.c: 1185: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  6152  001306  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6153  001308  0F84               	addlw	132
  6154  00130A  6FA4               	movwf	_vscp_omsg& (0+255),b
  6155                           
  6156                           ;vscp_firmware.c: 1186: vscp_omsg.data[3] =
  6157                           ;vscp_firmware.c: 1187: vscp_imsg.data[3] + byte;
  6158  00130C  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6159  00130E  25E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6160  001310  6FAC               	movwf	(_vscp_omsg+8)& (0+255),b
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;vscp_firmware.c: 1190: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  6164  001312  6BE3               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  6165  001314  D00C               	goto	l9633
  6166  001316                     l9629:
  6167                           
  6168                           ; BSR set to: 0
  6169                           ;vscp_firmware.c: 1191: vscp_omsg.data[ (4 + cb) ] =
  6170                           ;vscp_firmware.c: 1192: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  6171  001316  51E3               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6172  001318  0FAD               	addlw	low (_vscp_omsg+9)
  6173  00131A  6ED9               	movwf	fsr2l,c
  6174  00131C  6ADA               	clrf	fsr2h,c
  6175  00131E  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6176  001320  25E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6177  001322  25E3               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6178  001324  ECED  F01C         	call	_vscp_readRegister
  6179  001328  6EDF               	movwf	indf2,c
  6180  00132A  0100               	movlb	0	; () banked
  6181  00132C  2BE3               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  6182  00132E                     l9633:
  6183                           
  6184                           ; BSR set to: 0
  6185  00132E  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6186  001330  5DE3               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6187  001332  E3F1               	bnc	l9629
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;vscp_firmware.c: 1193: }
  6191                           ;vscp_firmware.c: 1196: vscp_sendEvent();
  6192  001334  EC31  F01C         	call	_vscp_sendEvent	;wreg free
  6193                           
  6194                           ; BSR set to: 0
  6195                           ;vscp_firmware.c: 1199: byte += bytes_this_time;
  6196  001338  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6197  00133A  27E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;vscp_firmware.c: 1202: vscp_omsg.data[0] += 1;
  6201  00133C  2BA9               	incf	(_vscp_omsg+5)& (0+255),f,b
  6202                           
  6203                           ; BSR set to: 0
  6204                           ;vscp_firmware.c: 1204: } while (byte < bytes);
  6205  00133E  51E6               	movf	vscp_handleProtocolEvent@bytes_1286& (0+255),w,b
  6206  001340  5DE8               	subwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6207  001342  E3CE               	bnc	l9621
  6208                           
  6209                           ; BSR set to: 0
  6210                           ;vscp_firmware.c: 1207: vscp_page_select = page_save;
  6211  001344  C0D8  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  6212  001348  C0D9  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  6213  00134C  D079               	goto	l1271
  6214  00134E                     l9643:
  6215                           
  6216                           ; BSR set to: 0
  6217                           ;vscp_firmware.c: 1214: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  6218  00134E  5191               	movf	_vscp_nickname& (0+255),w,b
  6219  001350  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6220  001354  62DF               	cpfseq	indf2,c
  6221  001356  D074               	goto	l1271
  6222                           
  6223                           ; BSR set to: 0
  6224                           ;vscp_firmware.c: 1216: uint8_t i;
  6225                           ;vscp_firmware.c: 1217: uint16_t page_save;
  6226                           ;vscp_firmware.c: 1220: page_save = vscp_page_select;
  6227  001358  C052  F0DA         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1290
  6228  00135C  C053  F0DB         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1290+1
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;vscp_firmware.c: 1224: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  6232  001360  D870               	call	PL28	;call to abstracted procedure
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;vscp_firmware.c: 1226: for (i = vscp_imsg.data[ 3 ];
  6236  001362  C09F  F0E4         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1289
  6237                           
  6238                           ;vscp_firmware.c: 1229: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  6239                           ;vscp_firmware.c: 1230: i++) {
  6240  001366  D014               	goto	l9655
  6241  001368                     l9651:
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;vscp_firmware.c: 1231: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  6245                           ;vscp_firmware.c: 1232: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  6246  001368  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6247  00136A  08A0               	sublw	low (_vscp_imsg+10)
  6248  00136C  25E4               	addwf	vscp_handleProtocolEvent@i_1289& (0+255),w,b
  6249  00136E  6ED9               	movwf	fsr2l,c
  6250  001370  6ADA               	clrf	fsr2h,c
  6251  001372  50DF               	movf	indf2,w,c
  6252  001374  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  6253  001376  51E4               	movf	vscp_handleProtocolEvent@i_1289& (0+255),w,b
  6254  001378  EC8C  F01C         	call	_vscp_writeRegister
  6255  00137C  0100               	movlb	0	; () banked
  6256  00137E  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6257  001380  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6258  001382  08AD               	sublw	low (_vscp_omsg+9)
  6259  001384  25E4               	addwf	vscp_handleProtocolEvent@i_1289& (0+255),w,b
  6260  001386  6ED9               	movwf	fsr2l,c
  6261  001388  6ADA               	clrf	fsr2h,c
  6262  00138A  C0D1  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  6263                           
  6264                           ; BSR set to: 0
  6265  00138E  2BE4               	incf	vscp_handleProtocolEvent@i_1289& (0+255),f,b
  6266  001390                     l9655:
  6267                           
  6268                           ; BSR set to: 0
  6269  001390  5196               	movf	_vscp_imsg& (0+255),w,b
  6270  001392  0B0F               	andlw	15
  6271  001394  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6272  001396  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6273  001398  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6274  00139A  27D1               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6275  00139C  0E00               	movlw	0
  6276  00139E  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6277  0013A0  0EFC               	movlw	252
  6278  0013A2  25D1               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6279  0013A4  6FD3               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  6280  0013A6  0EFF               	movlw	255
  6281  0013A8  21D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6282  0013AA  6FD4               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  6283  0013AC  51E4               	movf	vscp_handleProtocolEvent@i_1289& (0+255),w,b
  6284  0013AE  6FD5               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  6285  0013B0  6BD6               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  6286  0013B2  51D6               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  6287  0013B4  0A80               	xorlw	128
  6288  0013B6  6FD7               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  6289  0013B8  51D3               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  6290  0013BA  5DD5               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  6291  0013BC  51D4               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  6292  0013BE  0A80               	xorlw	128
  6293  0013C0  59D7               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  6294  0013C2  E3D2               	bnc	l9651
  6295                           
  6296                           ; BSR set to: 0
  6297                           ;vscp_firmware.c: 1233: }
  6298                           ;vscp_firmware.c: 1236: vscp_page_select = page_save;
  6299  0013C4  C0DA  F052         	movff	vscp_handleProtocolEvent@page_save_1290,_vscp_page_select
  6300  0013C8  C0DB  F053         	movff	vscp_handleProtocolEvent@page_save_1290+1,_vscp_page_select+1
  6301                           
  6302                           ; BSR set to: 0
  6303                           ;vscp_firmware.c: 1238: vscp_omsg.priority = 0x03;
  6304  0013CC  0E03               	movlw	3
  6305  0013CE  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6306                           
  6307                           ; BSR set to: 0
  6308                           ;vscp_firmware.c: 1239: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  6309  0013D0  5196               	movf	_vscp_imsg& (0+255),w,b
  6310  0013D2  0B0F               	andlw	15
  6311  0013D4  0F80               	addlw	128
  6312  0013D6  6FA4               	movwf	_vscp_omsg& (0+255),b
  6313                           
  6314                           ; BSR set to: 0
  6315                           ;vscp_firmware.c: 1240: vscp_omsg.vscp_class = 0;
  6316                           
  6317                           ; BSR set to: 0
  6318                           ;vscp_firmware.c: 1241: vscp_omsg.vscp_type = 39;
  6319                           
  6320                           ; BSR set to: 0
  6321                           ;vscp_firmware.c: 1242: vscp_omsg.data[0] = 0;
  6322                           
  6323                           ; BSR set to: 0
  6324                           ;vscp_firmware.c: 1243: vscp_omsg.data[1] = vscp_imsg.data[1];
  6325                           
  6326                           ; BSR set to: 0
  6327                           ;vscp_firmware.c: 1244: vscp_omsg.data[2] = vscp_imsg.data[2];
  6328  0013D8  D840               	call	PL38	;call to abstracted procedure
  6329                           
  6330                           ; BSR set to: 0
  6331                           ;vscp_firmware.c: 1245: vscp_omsg.data[3] = vscp_imsg.data[3];
  6332  0013DA  C09F  F0AC         	movff	_vscp_imsg+9,_vscp_omsg+8
  6333  0013DE  D585               	goto	l9291
  6334  0013E0                     l9677:
  6335                           
  6336                           ; BSR set to: 0
  6337  0013E0  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  6338                           
  6339                           ; Switch size 1, requested type "space"
  6340                           ; Number of cases is 16, Range of values is 1 to 38
  6341                           ; switch strategies available:
  6342                           ; Name         Instructions Cycles
  6343                           ; simple_byte           49    25 (average)
  6344                           ;	Chosen strategy is simple_byte
  6345  0013E2  0A01               	xorlw	1	; case 1
  6346  0013E4  E101 D559          	bz	l9265
  6347  0013E8  0A03               	xorlw	3	; case 2
  6348  0013EA  E101 D559          	bz	l9267
  6349  0013EE  0A04               	xorlw	4	; case 6
  6350  0013F0  E101 D559          	bz	l9269
  6351  0013F4  0A0E               	xorlw	14	; case 8
  6352  0013F6  E101 D559          	bz	l9271
  6353  0013FA  0A01               	xorlw	1	; case 9
  6354  0013FC  E101 D559          	bz	l9273
  6355  001400  0A02               	xorlw	2	; case 11
  6356  001402  E101 D579          	bz	l9307
  6357  001406  0A07               	xorlw	7	; case 12
  6358  001408  E101 D58F          	bz	l9341
  6359  00140C  0A1B               	xorlw	27	; case 23
  6360  00140E  E101 D624          	bz	l9399
  6361  001412  0A0F               	xorlw	15	; case 24
  6362  001414  E101 D638          	bz	l9405
  6363  001418  0A01               	xorlw	1	; case 25
  6364  00141A  E101 D688          	bz	l9439
  6365  00141E  0A04               	xorlw	4	; case 29
  6366  001420  E101 D6B1          	bz	l9465
  6367  001424  0A03               	xorlw	3	; case 30
  6368  001426  E101 D6BE          	bz	l9481
  6369  00142A  0A01               	xorlw	1	; case 31
  6370  00142C  E101 D6CB          	bz	l9497
  6371  001430  0A3E               	xorlw	62	; case 33
  6372  001432  E101 D729          	bz	l9583
  6373  001436  0A04               	xorlw	4	; case 37
  6374  001438  E101 D737          	bz	l9593
  6375  00143C  0A03               	xorlw	3	; case 38
  6376  00143E  E087               	bz	l9643
  6377  001440                     l1271:
  6378  001440  0012               	return	
  6379  001442                     __end_of_vscp_handleProtocolEvent:
  6380                           	opt stack 0
  6381  001442                     PL28:
  6382                           	opt stack 21
  6383  001442  519E               	movf	(_vscp_imsg+8)& (0+255),w,b
  6384  001444  C09D  F0D1         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6385  001448  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6386  00144A  C0D1  F0D2         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6387  00144E  6BD1               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6388  001450  11D1               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6389  001452  6E52               	movwf	_vscp_page_select,c
  6390  001454  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6391  001456  6E53               	movwf	_vscp_page_select+1,c
  6392  001458  0012               	return	
  6393  00145A                     __end_ofPL28:
  6394                           	opt stack 0
  6395  00145A                     PL38:
  6396                           	opt stack 21
  6397  00145A  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6398  00145C  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6399  00145E  0E27               	movlw	39
  6400  001460  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6401  001462  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  6402  001464  C09D  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+6
  6403  001468  C09E  F0AB         	movff	_vscp_imsg+8,_vscp_omsg+7
  6404  00146C  0012               	return	
  6405  00146E                     __end_ofPL38:
  6406                           	opt stack 0
  6407  00146E                     PL72:
  6408                           	opt stack 21
  6409  00146E  0E03               	movlw	3
  6410  001470  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6411  001472  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6412  001474  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6413  001476  0E1A               	movlw	26
  6414  001478  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6415  00147A  0C1A               	retlw	26
  6416  00147C                     __end_ofPL72:
  6417                           	opt stack 0
  6418  00147C                     PL78:
  6419                           	opt stack 21
  6420  00147C  C0E9  F0A9         	movff	vscp_handleProtocolEvent@i_1281,_vscp_omsg+5
  6421  001480  0E01               	movlw	1
  6422  001482  6FEB               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  6423  001484  0C01               	retlw	1
  6424  001486                     __end_ofPL78:
  6425                           	opt stack 0
  6426                           tblptru	equ	0xFF8
  6427                           tblptrh	equ	0xFF7
  6428                           tblptrl	equ	0xFF6
  6429                           tablat	equ	0xFF5
  6430                           prodh	equ	0xFF4
  6431                           prodl	equ	0xFF3
  6432                           intcon	equ	0xFF2
  6433                           postinc0	equ	0xFEE
  6434                           wreg	equ	0xFE8
  6435                           indf1	equ	0xFE7
  6436                           fsr1h	equ	0xFE2
  6437                           fsr1l	equ	0xFE1
  6438                           indf2	equ	0xFDF
  6439                           postinc2	equ	0xFDE
  6440                           postdec2	equ	0xFDD
  6441                           plusw2	equ	0xFDB
  6442                           fsr2h	equ	0xFDA
  6443                           fsr2l	equ	0xFD9
  6444                           status	equ	0xFD8
  6445                           
  6446 ;; *************** function ___lbmod *****************
  6447 ;; Defined at:
  6448 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  6449 ;; Parameters:    Size  Location     Type
  6450 ;;  dividend        1    wreg     unsigned char 
  6451 ;;  divisor         1    7[COMRAM] unsigned char 
  6452 ;; Auto vars:     Size  Location     Type
  6453 ;;  dividend        1    8[COMRAM] unsigned char 
  6454 ;;  rem             1   10[COMRAM] unsigned char 
  6455 ;;  counter         1    9[COMRAM] unsigned char 
  6456 ;; Return value:  Size  Location     Type
  6457 ;;                  1    wreg      unsigned char 
  6458 ;; Registers used:
  6459 ;;		wreg, status,2, status,0
  6460 ;; Tracked objects:
  6461 ;;		On entry : F/0
  6462 ;;		On exit  : 0/0
  6463 ;;		Unchanged: 0/0
  6464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6465 ;;      Params:         1       0       0       0       0       0       0
  6466 ;;      Locals:         3       0       0       0       0       0       0
  6467 ;;      Temps:          0       0       0       0       0       0       0
  6468 ;;      Totals:         4       0       0       0       0       0       0
  6469 ;;Total ram usage:        4 bytes
  6470 ;; Hardware stack levels used:    1
  6471 ;; Hardware stack levels required when called:    2
  6472 ;; This function calls:
  6473 ;;		Nothing
  6474 ;; This function is called by:
  6475 ;;		_vscp_handleProtocolEvent
  6476 ;; This function uses a non-reentrant model
  6477 ;;
  6478                           
  6479                           	psect	text16
  6480  003814                     __ptext16:
  6481                           	opt stack 0
  6482  003814                     ___lbmod:
  6483                           	opt stack 27
  6484                           
  6485                           ;incstack = 0
  6486                           ;incstack = 0
  6487                           ;___lbmod@dividend stored from wreg
  6488  003814  CFE8 F009          	movff	wreg,___lbmod@dividend
  6489                           
  6490                           ; BSR set to: 0
  6491  003818  0E08               	movlw	8
  6492  00381A  6E0A               	movwf	___lbmod@counter,c
  6493                           
  6494                           ; BSR set to: 0
  6495  00381C  6A0B               	clrf	___lbmod@rem,c
  6496  00381E                     l7051:
  6497  00381E  90D8               	bcf	status,0,c
  6498  003820  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  6499  003822  340B               	rlcf	___lbmod@rem& (0+255),w,c
  6500  003824  6E0B               	movwf	___lbmod@rem,c
  6501  003826  90D8               	bcf	status,0,c
  6502  003828  3609               	rlcf	___lbmod@dividend,f,c
  6503  00382A  5008               	movf	___lbmod@divisor,w,c
  6504  00382C  5C0B               	subwf	___lbmod@rem,w,c
  6505  00382E  E302               	bnc	l7059
  6506  003830  5008               	movf	___lbmod@divisor,w,c
  6507  003832  5E0B               	subwf	___lbmod@rem,f,c
  6508  003834                     l7059:
  6509  003834  2E0A               	decfsz	___lbmod@counter,f,c
  6510  003836  D7F3               	goto	l7051
  6511  003838  500B               	movf	___lbmod@rem,w,c
  6512  00383A  0012               	return	
  6513  00383C                     __end_of___lbmod:
  6514                           	opt stack 0
  6515                           tblptru	equ	0xFF8
  6516                           tblptrh	equ	0xFF7
  6517                           tblptrl	equ	0xFF6
  6518                           tablat	equ	0xFF5
  6519                           prodh	equ	0xFF4
  6520                           prodl	equ	0xFF3
  6521                           intcon	equ	0xFF2
  6522                           postinc0	equ	0xFEE
  6523                           wreg	equ	0xFE8
  6524                           indf1	equ	0xFE7
  6525                           fsr1h	equ	0xFE2
  6526                           fsr1l	equ	0xFE1
  6527                           indf2	equ	0xFDF
  6528                           postinc2	equ	0xFDE
  6529                           postdec2	equ	0xFDD
  6530                           plusw2	equ	0xFDB
  6531                           fsr2h	equ	0xFDA
  6532                           fsr2l	equ	0xFD9
  6533                           status	equ	0xFD8
  6534                           
  6535 ;; *************** function _vscp_writeRegister *****************
  6536 ;; Defined at:
  6537 ;;		line 678 in file "../../vscp_firmware/common/vscp_firmware.c"
  6538 ;; Parameters:    Size  Location     Type
  6539 ;;  reg             1    wreg     unsigned char 
  6540 ;;  value           1   30[BANK0 ] unsigned char 
  6541 ;; Auto vars:     Size  Location     Type
  6542 ;;  reg             1   31[BANK0 ] unsigned char 
  6543 ;; Return value:  Size  Location     Type
  6544 ;;                  1    wreg      unsigned char 
  6545 ;; Registers used:
  6546 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6547 ;; Tracked objects:
  6548 ;;		On entry : F/0
  6549 ;;		On exit  : 0/0
  6550 ;;		Unchanged: 0/0
  6551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6552 ;;      Params:         0       1       0       0       0       0       0
  6553 ;;      Locals:         0       1       0       0       0       0       0
  6554 ;;      Temps:          0       0       0       0       0       0       0
  6555 ;;      Totals:         0       2       0       0       0       0       0
  6556 ;;Total ram usage:        2 bytes
  6557 ;; Hardware stack levels used:    1
  6558 ;; Hardware stack levels required when called:    8
  6559 ;; This function calls:
  6560 ;;		_vscp_writeAppReg
  6561 ;;		_vscp_writeStdReg
  6562 ;; This function is called by:
  6563 ;;		_vscp_handleProtocolEvent
  6564 ;; This function uses a non-reentrant model
  6565 ;;
  6566                           
  6567                           	psect	text17
  6568  003918                     __ptext17:
  6569                           	opt stack 0
  6570  003918                     _vscp_writeRegister:
  6571                           	opt stack 21
  6572                           
  6573                           ;incstack = 0
  6574                           ;incstack = 0
  6575                           ;vscp_writeRegister@reg stored from wreg
  6576  003918  CFE8 F0D0          	movff	wreg,vscp_writeRegister@reg
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;vscp_firmware.c: 679: if (reg >= 0x80) {
  6580  00391C  0E7F               	movlw	127
  6581  00391E  65D0               	cpfsgt	vscp_writeRegister@reg& (0+255),b
  6582  003920  D006               	goto	l10433
  6583                           
  6584                           ; BSR set to: 0
  6585                           ;vscp_firmware.c: 680: return vscp_writeStdReg(reg, value);
  6586  003922  C0CF  F00F         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  6587  003926  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6588  003928  EC49  F013         	call	_vscp_writeStdReg
  6589  00392C  D005               	goto	l1148
  6590  00392E                     l10433:
  6591                           
  6592                           ; BSR set to: 0
  6593                           ;vscp_firmware.c: 682: return vscp_writeAppReg(reg, value);
  6594  00392E  C0CF  F051         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  6595  003932  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6596  003934  EC11  F003         	call	_vscp_writeAppReg
  6597  003938                     l1148:
  6598  003938  0012               	return	
  6599  00393A                     __end_of_vscp_writeRegister:
  6600                           	opt stack 0
  6601                           tblptru	equ	0xFF8
  6602                           tblptrh	equ	0xFF7
  6603                           tblptrl	equ	0xFF6
  6604                           tablat	equ	0xFF5
  6605                           prodh	equ	0xFF4
  6606                           prodl	equ	0xFF3
  6607                           intcon	equ	0xFF2
  6608                           postinc0	equ	0xFEE
  6609                           wreg	equ	0xFE8
  6610                           indf1	equ	0xFE7
  6611                           fsr1h	equ	0xFE2
  6612                           fsr1l	equ	0xFE1
  6613                           indf2	equ	0xFDF
  6614                           postinc2	equ	0xFDE
  6615                           postdec2	equ	0xFDD
  6616                           plusw2	equ	0xFDB
  6617                           fsr2h	equ	0xFDA
  6618                           fsr2l	equ	0xFD9
  6619                           status	equ	0xFD8
  6620                           
  6621 ;; *************** function _vscp_writeStdReg *****************
  6622 ;; Defined at:
  6623 ;;		line 691 in file "../../vscp_firmware/common/vscp_firmware.c"
  6624 ;; Parameters:    Size  Location     Type
  6625 ;;  reg             1    wreg     unsigned char 
  6626 ;;  value           1   14[COMRAM] unsigned char 
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;  reg             1   31[COMRAM] unsigned char 
  6629 ;;  code            4   24[COMRAM] unsigned long 
  6630 ;;  idx             1   29[COMRAM] unsigned char 
  6631 ;;  code            4   20[COMRAM] unsigned long 
  6632 ;;  idx             1   28[COMRAM] unsigned char 
  6633 ;;  rv              1   30[COMRAM] unsigned char 
  6634 ;; Return value:  Size  Location     Type
  6635 ;;                  1    wreg      unsigned char 
  6636 ;; Registers used:
  6637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6638 ;; Tracked objects:
  6639 ;;		On entry : F/0
  6640 ;;		On exit  : 0/0
  6641 ;;		Unchanged: 0/0
  6642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6643 ;;      Params:         1       0       0       0       0       0       0
  6644 ;;      Locals:        12       0       0       0       0       0       0
  6645 ;;      Temps:          5       0       0       0       0       0       0
  6646 ;;      Totals:        18       0       0       0       0       0       0
  6647 ;;Total ram usage:       18 bytes
  6648 ;; Hardware stack levels used:    1
  6649 ;; Hardware stack levels required when called:    5
  6650 ;; This function calls:
  6651 ;;		_vscp_setGUID
  6652 ;;		_vscp_setManufacturerId
  6653 ;;		_vscp_getGUID
  6654 ;;		_vscp_getUserID
  6655 ;;		_vscp_setUserID
  6656 ;;		_vscp_getManufacturerId
  6657 ;;		_vscp_getFamilyCode
  6658 ;;		_vscp_getFamilyType
  6659 ;;		_vscp_restoreDefaults
  6660 ;; This function is called by:
  6661 ;;		_vscp_writeRegister
  6662 ;;		_vscp_handleProtocolEvent
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           	psect	text18
  6667  002692                     __ptext18:
  6668                           	opt stack 0
  6669  002692                     _vscp_writeStdReg:
  6670                           	opt stack 24
  6671                           
  6672                           ;incstack = 0
  6673                           ;incstack = 0
  6674                           ;vscp_writeStdReg@reg stored from wreg
  6675  002692  CFE8 F020          	movff	wreg,vscp_writeStdReg@reg
  6676                           
  6677                           ; BSR set to: 0
  6678                           ;vscp_firmware.c: 692: uint8_t rv = ~value;
  6679  002696  1C0F               	comf	vscp_writeStdReg@value,w,c
  6680  002698  6E1F               	movwf	vscp_writeStdReg@rv,c
  6681                           
  6682                           ; BSR set to: 0
  6683                           ;vscp_firmware.c: 694: if ((reg > (0x82 + 1)) &&
  6684                           ;vscp_firmware.c: 695: (reg < 0x89)) {
  6685  00269A  0E83               	movlw	131
  6686  00269C  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6687  00269E  D00E               	goto	l9081
  6688                           
  6689                           ; BSR set to: 0
  6690  0026A0  0E89               	movlw	137
  6691  0026A2  6020               	cpfslt	vscp_writeStdReg@reg,c
  6692  0026A4  D00B               	goto	l9081
  6693                           
  6694                           ; BSR set to: 0
  6695                           ;vscp_firmware.c: 698: vscp_setUserID((reg - 0x84), value);
  6696  0026A6  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  6697  0026AA  5020               	movf	vscp_writeStdReg@reg,w,c
  6698  0026AC  0F7C               	addlw	124
  6699  0026AE  ECFA  F01C         	call	_vscp_setUserID
  6700                           
  6701                           ;vscp_firmware.c: 699: rv = vscp_getUserID((reg - 0x84));
  6702  0026B2  5020               	movf	vscp_writeStdReg@reg,w,c
  6703  0026B4  0F7C               	addlw	124
  6704  0026B6  EC34  F01D         	call	_vscp_getUserID
  6705  0026BA  D077               	goto	L23
  6706  0026BC                     l9081:
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;vscp_firmware.c: 702: else if (0x92 == reg) {
  6710  0026BC  5020               	movf	vscp_writeStdReg@reg,w,c
  6711  0026BE  0A92               	xorlw	146
  6712  0026C0  E10D               	bnz	l9087
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;vscp_firmware.c: 705: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  6716  0026C2  500F               	movf	vscp_writeStdReg@value,w,c
  6717  0026C4  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6718  0026C6  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  6719  0026C8  5052               	movf	_vscp_page_select,w,c
  6720  0026CA  6E12               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  6721  0026CC  6A13               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  6722  0026CE  1010               	iorwf	??_vscp_writeStdReg,w,c
  6723  0026D0  6E52               	movwf	_vscp_page_select,c
  6724  0026D2  5011               	movf	??_vscp_writeStdReg+1,w,c
  6725  0026D4  1013               	iorwf	??_vscp_writeStdReg+3,w,c
  6726  0026D6  6E53               	movwf	_vscp_page_select+1,c
  6727                           
  6728                           ; BSR set to: 0
  6729                           ;vscp_firmware.c: 706: rv = (vscp_page_select >> 8) & 0xff;
  6730  0026D8  5053               	movf	_vscp_page_select+1,w,c
  6731  0026DA  D067               	goto	L23
  6732  0026DC                     l9087:
  6733                           
  6734                           ; BSR set to: 0
  6735                           ;vscp_firmware.c: 708: else if (0x93 == reg) {
  6736  0026DC  5020               	movf	vscp_writeStdReg@reg,w,c
  6737  0026DE  0A93               	xorlw	147
  6738  0026E0  E10B               	bnz	l9093
  6739                           
  6740                           ; BSR set to: 0
  6741                           ;vscp_firmware.c: 711: vscp_page_select = (vscp_page_select & 0xff00) | value;
  6742  0026E2  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  6743  0026E4  5053               	movf	_vscp_page_select+1,w,c
  6744  0026E6  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6745  0026E8  500F               	movf	vscp_writeStdReg@value,w,c
  6746  0026EA  1010               	iorwf	??_vscp_writeStdReg,w,c
  6747  0026EC  6E52               	movwf	_vscp_page_select,c
  6748  0026EE  5011               	movf	??_vscp_writeStdReg+1,w,c
  6749  0026F0  6E53               	movwf	_vscp_page_select+1,c
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;vscp_firmware.c: 712: rv = (vscp_page_select & 0xff);
  6753  0026F2  C052  F01F         	movff	_vscp_page_select,vscp_writeStdReg@rv
  6754                           
  6755                           ;vscp_firmware.c: 713: }
  6756  0026F6  D096               	goto	l9155
  6757  0026F8                     l9093:
  6758                           
  6759                           ; BSR set to: 0
  6760                           ;vscp_firmware.c: 718: else if ((reg > 0x88) && (reg < 0x91)) {
  6761  0026F8  0E88               	movlw	136
  6762  0026FA  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6763  0026FC  D019               	goto	l9105
  6764                           
  6765                           ; BSR set to: 0
  6766  0026FE  0E91               	movlw	145
  6767  002700  6020               	cpfslt	vscp_writeStdReg@reg,c
  6768  002702  D016               	goto	l9105
  6769                           
  6770                           ; BSR set to: 0
  6771                           ;vscp_firmware.c: 720: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6772                           ;vscp_firmware.c: 721: (0xff != (vscp_page_select & 0xff))) {
  6773  002704  C053  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6774  002708  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6775  00270C  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6776  00270E  2811               	incf	??_vscp_writeStdReg+1,w,c
  6777  002710  E102               	bnz	l9101
  6778                           
  6779                           ; BSR set to: 0
  6780  002712  2852               	incf	_vscp_page_select,w,c
  6781  002714  E002               	bz	l9103
  6782  002716                     l9101:
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;vscp_firmware.c: 723: rv = ~value;
  6786  002716  1C0F               	comf	vscp_writeStdReg@value,w,c
  6787  002718  D048               	goto	L23
  6788  00271A                     l9103:
  6789                           
  6790                           ; BSR set to: 0
  6791                           ;vscp_firmware.c: 726: vscp_setManufacturerId(reg - 0x89, value);
  6792  00271A  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  6793  00271E  5020               	movf	vscp_writeStdReg@reg,w,c
  6794  002720  0F77               	addlw	119
  6795  002722  EC9D  F01C         	call	_vscp_setManufacturerId
  6796                           
  6797                           ;vscp_firmware.c: 727: rv = vscp_getManufacturerId(reg - 0x89);
  6798  002726  5020               	movf	vscp_writeStdReg@reg,w,c
  6799  002728  0F77               	addlw	119
  6800  00272A  EC2A  F01D         	call	_vscp_getManufacturerId
  6801  00272E  D03D               	goto	L23
  6802  002730                     l9105:
  6803                           
  6804                           ; BSR set to: 0
  6805                           ;vscp_firmware.c: 730: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  6806  002730  0ECF               	movlw	207
  6807  002732  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6808  002734  D017               	goto	l9117
  6809                           
  6810                           ; BSR set to: 0
  6811  002736  0EE0               	movlw	224
  6812  002738  6020               	cpfslt	vscp_writeStdReg@reg,c
  6813  00273A  D014               	goto	l9117
  6814                           
  6815                           ; BSR set to: 0
  6816                           ;vscp_firmware.c: 732: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6817                           ;vscp_firmware.c: 733: (0xff != (vscp_page_select & 0xff))) {
  6818  00273C  C053  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6819  002740  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6820  002744  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6821  002746  2811               	incf	??_vscp_writeStdReg+1,w,c
  6822  002748  E1E6               	bnz	l9101
  6823                           
  6824                           ; BSR set to: 0
  6825  00274A  2852               	incf	_vscp_page_select,w,c
  6826  00274C  E1E4               	bnz	l9101
  6827                           
  6828                           ; BSR set to: 0
  6829                           ;vscp_firmware.c: 737: else {
  6830                           ;vscp_firmware.c: 738: vscp_setGUID(reg - 0xD0, value);
  6831  00274E  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  6832  002752  5020               	movf	vscp_writeStdReg@reg,w,c
  6833  002754  0F30               	addlw	48
  6834  002756  ECAE  F01C         	call	_vscp_setGUID
  6835                           
  6836                           ;vscp_firmware.c: 739: rv = vscp_getGUID(reg - 0xD0);
  6837  00275A  5020               	movf	vscp_writeStdReg@reg,w,c
  6838  00275C  0F30               	addlw	48
  6839  00275E  EC3E  F01D         	call	_vscp_getGUID
  6840  002762  D023               	goto	L23
  6841  002764                     l9117:
  6842                           
  6843                           ; BSR set to: 0
  6844                           ;vscp_firmware.c: 743: else if ( ( reg >= 0x9A ) &&
  6845                           ;vscp_firmware.c: 744: ( reg < 0x9E ) ) {
  6846  002764  0E99               	movlw	153
  6847  002766  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6848  002768  D022               	goto	l9127
  6849                           
  6850                           ; BSR set to: 0
  6851  00276A  0E9E               	movlw	158
  6852  00276C  6020               	cpfslt	vscp_writeStdReg@reg,c
  6853  00276E  D01F               	goto	l9127
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;vscp_firmware.c: 746: uint32_t code = vscp_getFamilyCode();
  6857  002770  EC8D  F01D         	call	_vscp_getFamilyCode	;wreg free
  6858  002774  C00B  F018         	movff	?_vscp_getFamilyCode+3,vscp_writeStdReg@code+3
  6859  002778  C00A  F017         	movff	?_vscp_getFamilyCode+2,vscp_writeStdReg@code+2
  6860  00277C  C009  F016         	movff	?_vscp_getFamilyCode+1,vscp_writeStdReg@code+1
  6861  002780  C008  F015         	movff	?_vscp_getFamilyCode,vscp_writeStdReg@code
  6862                           
  6863                           ; BSR set to: 0
  6864                           ;vscp_firmware.c: 747: uint8_t idx = reg - 0x9A;
  6865  002784  5020               	movf	vscp_writeStdReg@reg,w,c
  6866  002786  0F66               	addlw	102
  6867  002788  6E1D               	movwf	vscp_writeStdReg@idx,c
  6868                           
  6869                           ; BSR set to: 0
  6870                           ;vscp_firmware.c: 748: rv = code >> (((3-idx)*8) & 0xff);
  6871  00278A  501D               	movf	vscp_writeStdReg@idx,w,c
  6872  00278C  D84D               	call	PL36	;call to abstracted procedure
  6873  00278E  C015  F011         	movff	vscp_writeStdReg@code,??_vscp_writeStdReg+1
  6874  002792  C016  F012         	movff	vscp_writeStdReg@code+1,??_vscp_writeStdReg+2
  6875  002796  C017  F013         	movff	vscp_writeStdReg@code+2,??_vscp_writeStdReg+3
  6876  00279A  C018  F014         	movff	vscp_writeStdReg@code+3,??_vscp_writeStdReg+4
  6877  00279E  2AE8               	incf	wreg,f,c
  6878  0027A0  D001               	goto	u11090
  6879  0027A2                     u11095:
  6880  0027A2  D84C               	call	PL76	;call to abstracted procedure
  6881  0027A4                     u11090:
  6882  0027A4  2EE8               	decfsz	wreg,f,c
  6883  0027A6  D7FD               	goto	u11095
  6884  0027A8  D024               	goto	L24
  6885  0027AA                     L23:
  6886  0027AA  6E1F               	movwf	vscp_writeStdReg@rv,c
  6887                           
  6888                           ;vscp_firmware.c: 749: }
  6889  0027AC  D03B               	goto	l9155
  6890  0027AE                     l9127:
  6891                           
  6892                           ; BSR set to: 0
  6893                           ;vscp_firmware.c: 750: else if ( ( reg >= 0x9E ) &&
  6894                           ;vscp_firmware.c: 751: ( reg < 0xA2 ) ) {
  6895  0027AE  0E9D               	movlw	157
  6896  0027B0  6420               	cpfsgt	vscp_writeStdReg@reg,c
  6897  0027B2  D021               	goto	l9137
  6898                           
  6899                           ; BSR set to: 0
  6900  0027B4  0EA2               	movlw	162
  6901  0027B6  6020               	cpfslt	vscp_writeStdReg@reg,c
  6902  0027B8  D01E               	goto	l9137
  6903                           
  6904                           ; BSR set to: 0
  6905                           ;vscp_firmware.c: 753: uint32_t code = vscp_getFamilyType();
  6906  0027BA  EC88  F01D         	call	_vscp_getFamilyType	;wreg free
  6907  0027BE  C00B  F01C         	movff	?_vscp_getFamilyType+3,vscp_writeStdReg@code_1270+3
  6908  0027C2  C00A  F01B         	movff	?_vscp_getFamilyType+2,vscp_writeStdReg@code_1270+2
  6909  0027C6  C009  F01A         	movff	?_vscp_getFamilyType+1,vscp_writeStdReg@code_1270+1
  6910  0027CA  C008  F019         	movff	?_vscp_getFamilyType,vscp_writeStdReg@code_1270
  6911                           
  6912                           ; BSR set to: 0
  6913                           ;vscp_firmware.c: 754: uint8_t idx = reg - 0x9E;
  6914  0027CE  5020               	movf	vscp_writeStdReg@reg,w,c
  6915  0027D0  0F62               	addlw	98
  6916  0027D2  6E1E               	movwf	vscp_writeStdReg@idx_1271,c
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;vscp_firmware.c: 755: rv = code >> (((3-idx)*8) & 0xff);
  6920  0027D4  501E               	movf	vscp_writeStdReg@idx_1271,w,c
  6921  0027D6  D828               	call	PL36	;call to abstracted procedure
  6922  0027D8  C019  F011         	movff	vscp_writeStdReg@code_1270,??_vscp_writeStdReg+1
  6923  0027DC  C01A  F012         	movff	vscp_writeStdReg@code_1270+1,??_vscp_writeStdReg+2
  6924  0027E0  C01B  F013         	movff	vscp_writeStdReg@code_1270+2,??_vscp_writeStdReg+3
  6925  0027E4  C01C  F014         	movff	vscp_writeStdReg@code_1270+3,??_vscp_writeStdReg+4
  6926  0027E8  2AE8               	incf	wreg,f,c
  6927  0027EA  D001               	goto	u11120
  6928  0027EC                     u11125:
  6929  0027EC  D827               	call	PL76	;call to abstracted procedure
  6930  0027EE                     u11120:
  6931  0027EE  2EE8               	decfsz	wreg,f,c
  6932  0027F0  D7FD               	goto	u11125
  6933  0027F2                     L24:
  6934  0027F2  5011               	movf	??_vscp_writeStdReg+1,w,c
  6935  0027F4  D7DA               	goto	L23
  6936  0027F6                     l9137:
  6937                           
  6938                           ; BSR set to: 0
  6939                           ;vscp_firmware.c: 757: else if ( 0xA2 == reg ) {
  6940  0027F6  5020               	movf	vscp_writeStdReg@reg,w,c
  6941  0027F8  0AA2               	xorlw	162
  6942  0027FA  E18D               	bnz	l9101
  6943                           
  6944                           ; BSR set to: 0
  6945                           ;vscp_firmware.c: 758: if ( 0x55 == value ) {
  6946  0027FC  500F               	movf	vscp_writeStdReg@value,w,c
  6947  0027FE  0A55               	xorlw	85
  6948  002800  E104               	bnz	l9145
  6949                           
  6950                           ; BSR set to: 0
  6951                           ;vscp_firmware.c: 759: vscp_configtimer = 0;
  6952  002802  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
  6953  002804  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  6954                           
  6955                           ; BSR set to: 0
  6956                           ;vscp_firmware.c: 760: rv = 0x55;
  6957  002806  0E55               	movlw	85
  6958  002808  D7D0               	goto	L23
  6959  00280A                     l9145:
  6960                           
  6961                           ; BSR set to: 0
  6962                           ;vscp_firmware.c: 762: else if ( 0xaa == value ) {
  6963  00280A  500F               	movf	vscp_writeStdReg@value,w,c
  6964  00280C  0AAA               	xorlw	170
  6965  00280E  E10A               	bnz	l9155
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;vscp_firmware.c: 763: if ( vscp_configtimer < 1000 ) {
  6969  002810  0EE8               	movlw	232
  6970  002812  5D84               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  6971  002814  0E03               	movlw	3
  6972  002816  5985               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  6973  002818  E204               	bc	l1178
  6974                           
  6975                           ; BSR set to: 0
  6976                           ;vscp_firmware.c: 764: vscp_restoreDefaults();
  6977  00281A  EC9C  F01D         	call	_vscp_restoreDefaults	;wreg free
  6978                           
  6979                           ;vscp_firmware.c: 765: rv = 0xaa;
  6980  00281E  0EAA               	movlw	170
  6981  002820  D7C4               	goto	L23
  6982  002822                     l1178:
  6983                           
  6984                           ; BSR set to: 0
  6985                           ;vscp_firmware.c: 767: else {
  6986                           ;vscp_firmware.c: 768: rv = 0;
  6987  002822  6A1F               	clrf	vscp_writeStdReg@rv,c
  6988  002824                     l9155:
  6989                           
  6990                           ;vscp_firmware.c: 776: }
  6991                           ;vscp_firmware.c: 778: return rv;
  6992  002824  501F               	movf	vscp_writeStdReg@rv,w,c
  6993  002826  0012               	return	
  6994  002828                     __end_of_vscp_writeStdReg:
  6995                           	opt stack 0
  6996  002828                     PL36:
  6997                           	opt stack 24
  6998  002828  0803               	sublw	3
  6999  00282A  6E10               	movwf	??_vscp_writeStdReg& (0+255),c
  7000  00282C  90D8               	bcf	status,0,c
  7001  00282E  3610               	rlcf	??_vscp_writeStdReg,f,c
  7002  002830  90D8               	bcf	status,0,c
  7003  002832  3610               	rlcf	??_vscp_writeStdReg,f,c
  7004  002834  90D8               	bcf	status,0,c
  7005  002836  3610               	rlcf	??_vscp_writeStdReg,f,c
  7006  002838  5010               	movf	??_vscp_writeStdReg,w,c
  7007  00283A  0012               	return	
  7008  00283C                     __end_ofPL36:
  7009                           	opt stack 0
  7010  00283C                     PL76:
  7011                           	opt stack 24
  7012  00283C  90D8               	bcf	status,0,c
  7013  00283E  3214               	rrcf	??_vscp_writeStdReg+4,f,c
  7014  002840  3213               	rrcf	??_vscp_writeStdReg+3,f,c
  7015  002842  3212               	rrcf	??_vscp_writeStdReg+2,f,c
  7016  002844  3211               	rrcf	??_vscp_writeStdReg+1,f,c
  7017  002846  0012               	return	
  7018  002848                     __end_ofPL76:
  7019                           	opt stack 0
  7020                           tblptru	equ	0xFF8
  7021                           tblptrh	equ	0xFF7
  7022                           tblptrl	equ	0xFF6
  7023                           tablat	equ	0xFF5
  7024                           prodh	equ	0xFF4
  7025                           prodl	equ	0xFF3
  7026                           intcon	equ	0xFF2
  7027                           postinc0	equ	0xFEE
  7028                           wreg	equ	0xFE8
  7029                           indf1	equ	0xFE7
  7030                           fsr1h	equ	0xFE2
  7031                           fsr1l	equ	0xFE1
  7032                           indf2	equ	0xFDF
  7033                           postinc2	equ	0xFDE
  7034                           postdec2	equ	0xFDD
  7035                           plusw2	equ	0xFDB
  7036                           fsr2h	equ	0xFDA
  7037                           fsr2l	equ	0xFD9
  7038                           status	equ	0xFD8
  7039                           
  7040 ;; *************** function _vscp_restoreDefaults *****************
  7041 ;; Defined at:
  7042 ;;		line 2471 in file "../main.c"
  7043 ;; Parameters:    Size  Location     Type
  7044 ;;		None
  7045 ;; Auto vars:     Size  Location     Type
  7046 ;;		None
  7047 ;; Return value:  Size  Location     Type
  7048 ;;		None               void
  7049 ;; Registers used:
  7050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7051 ;; Tracked objects:
  7052 ;;		On entry : F/0
  7053 ;;		On exit  : 0/0
  7054 ;;		Unchanged: 0/0
  7055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7056 ;;      Params:         0       0       0       0       0       0       0
  7057 ;;      Locals:         0       0       0       0       0       0       0
  7058 ;;      Temps:          0       0       0       0       0       0       0
  7059 ;;      Totals:         0       0       0       0       0       0       0
  7060 ;;Total ram usage:        0 bytes
  7061 ;; Hardware stack levels used:    1
  7062 ;; Hardware stack levels required when called:    4
  7063 ;; This function calls:
  7064 ;;		_init_app_eeprom
  7065 ;;		_init_app_ram
  7066 ;; This function is called by:
  7067 ;;		_vscp_writeStdReg
  7068 ;; This function uses a non-reentrant model
  7069 ;;
  7070                           
  7071                           	psect	text19
  7072  003B38                     __ptext19:
  7073                           	opt stack 0
  7074  003B38                     _vscp_restoreDefaults:
  7075                           	opt stack 24
  7076                           
  7077                           ; BSR set to: 0
  7078                           ;main.c: 2472: init_app_eeprom();
  7079                           
  7080                           ;incstack = 0
  7081                           ;incstack = 0
  7082  003B38  EC11  F00C         	call	_init_app_eeprom	;wreg free
  7083                           
  7084                           ;main.c: 2473: init_app_ram();
  7085  003B3C  EF08  F017         	goto	_init_app_ram	;wreg free
  7086  003B40                     __end_of_vscp_restoreDefaults:
  7087                           	opt stack 0
  7088                           tblptru	equ	0xFF8
  7089                           tblptrh	equ	0xFF7
  7090                           tblptrl	equ	0xFF6
  7091                           tablat	equ	0xFF5
  7092                           prodh	equ	0xFF4
  7093                           prodl	equ	0xFF3
  7094                           intcon	equ	0xFF2
  7095                           postinc0	equ	0xFEE
  7096                           wreg	equ	0xFE8
  7097                           indf1	equ	0xFE7
  7098                           fsr1h	equ	0xFE2
  7099                           fsr1l	equ	0xFE1
  7100                           indf2	equ	0xFDF
  7101                           postinc2	equ	0xFDE
  7102                           postdec2	equ	0xFDD
  7103                           plusw2	equ	0xFDB
  7104                           fsr2h	equ	0xFDA
  7105                           fsr2l	equ	0xFD9
  7106                           status	equ	0xFD8
  7107                           
  7108 ;; *************** function _init_app_eeprom *****************
  7109 ;; Defined at:
  7110 ;;		line 480 in file "../main.c"
  7111 ;; Parameters:    Size  Location     Type
  7112 ;;		None
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;  j               1   13[COMRAM] unsigned char 
  7115 ;;  i               1   12[COMRAM] unsigned char 
  7116 ;; Return value:  Size  Location     Type
  7117 ;;		None               void
  7118 ;; Registers used:
  7119 ;;		wreg, status,2, status,0, cstack
  7120 ;; Tracked objects:
  7121 ;;		On entry : 0/0
  7122 ;;		On exit  : 0/0
  7123 ;;		Unchanged: 0/0
  7124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7125 ;;      Params:         0       0       0       0       0       0       0
  7126 ;;      Locals:         2       0       0       0       0       0       0
  7127 ;;      Temps:          2       0       0       0       0       0       0
  7128 ;;      Totals:         4       0       0       0       0       0       0
  7129 ;;Total ram usage:        4 bytes
  7130 ;; Hardware stack levels used:    1
  7131 ;; Hardware stack levels required when called:    3
  7132 ;; This function calls:
  7133 ;;		_writeEEPROM
  7134 ;; This function is called by:
  7135 ;;		_main
  7136 ;;		_vscp_restoreDefaults
  7137 ;; This function uses a non-reentrant model
  7138 ;;
  7139                           
  7140                           	psect	text20
  7141  001822                     __ptext20:
  7142                           	opt stack 0
  7143  001822                     _init_app_eeprom:
  7144                           	opt stack 24
  7145                           
  7146                           ;main.c: 481: unsigned char i, j;
  7147                           ;main.c: 483: writeEEPROM( 0x43 + 0, 0 );
  7148                           
  7149                           ;incstack = 0
  7150                           ;incstack = 0
  7151  001822  6A09               	clrf	?_writeEEPROM+1,c
  7152  001824  0E43               	movlw	67
  7153  001826  6E08               	movwf	?_writeEEPROM,c
  7154  001828  0E00               	movlw	0
  7155  00182A  6A0A               	clrf	?_writeEEPROM+2,c
  7156  00182C  EC44  F01C         	call	_writeEEPROM	;wreg free
  7157                           
  7158                           ;main.c: 484: writeEEPROM( 0x43 + 1, 0 );
  7159  001830  6A09               	clrf	?_writeEEPROM+1,c
  7160  001832  0E44               	movlw	68
  7161  001834  6E08               	movwf	?_writeEEPROM,c
  7162  001836  0E00               	movlw	0
  7163  001838  6A0A               	clrf	?_writeEEPROM+2,c
  7164  00183A  EC44  F01C         	call	_writeEEPROM	;wreg free
  7165                           
  7166                           ;main.c: 486: writeEEPROM( 0x43 + 10,
  7167                           ;main.c: 487: 0x08 |
  7168                           ;main.c: 488: 0x10 |
  7169                           ;main.c: 489: 0x80 );
  7170  00183E  6A09               	clrf	?_writeEEPROM+1,c
  7171  001840  0E4D               	movlw	77
  7172  001842  6E08               	movwf	?_writeEEPROM,c
  7173  001844  0E98               	movlw	152
  7174  001846  6E0A               	movwf	?_writeEEPROM+2,c
  7175  001848  EC44  F01C         	call	_writeEEPROM	;wreg free
  7176                           
  7177                           ;main.c: 491: writeEEPROM( 0x43 + 11,
  7178                           ;main.c: 492: 0x08 |
  7179                           ;main.c: 493: 0x10 |
  7180                           ;main.c: 494: 0x80 );
  7181  00184C  6A09               	clrf	?_writeEEPROM+1,c
  7182  00184E  0E4E               	movlw	78
  7183  001850  6E08               	movwf	?_writeEEPROM,c
  7184  001852  0E98               	movlw	152
  7185  001854  6E0A               	movwf	?_writeEEPROM+2,c
  7186  001856  EC44  F01C         	call	_writeEEPROM	;wreg free
  7187                           
  7188                           ;main.c: 496: writeEEPROM( 0x43 + 12,
  7189                           ;main.c: 497: 0x08 |
  7190                           ;main.c: 498: 0x10 |
  7191                           ;main.c: 499: 0x80 );
  7192  00185A  6A09               	clrf	?_writeEEPROM+1,c
  7193  00185C  0E4F               	movlw	79
  7194  00185E  6E08               	movwf	?_writeEEPROM,c
  7195  001860  0E98               	movlw	152
  7196  001862  6E0A               	movwf	?_writeEEPROM+2,c
  7197  001864  EC44  F01C         	call	_writeEEPROM	;wreg free
  7198                           
  7199                           ;main.c: 501: writeEEPROM( 0x43 + 13,
  7200                           ;main.c: 502: 0x08 |
  7201                           ;main.c: 503: 0x10 |
  7202                           ;main.c: 504: 0x80 );
  7203  001868  6A09               	clrf	?_writeEEPROM+1,c
  7204  00186A  0E50               	movlw	80
  7205  00186C  6E08               	movwf	?_writeEEPROM,c
  7206  00186E  0E98               	movlw	152
  7207  001870  6E0A               	movwf	?_writeEEPROM+2,c
  7208  001872  EC44  F01C         	call	_writeEEPROM	;wreg free
  7209                           
  7210                           ;main.c: 506: writeEEPROM( 0x43 + 14,
  7211                           ;main.c: 507: 0x08 |
  7212                           ;main.c: 508: 0x10 |
  7213                           ;main.c: 509: 0x80 );
  7214  001876  6A09               	clrf	?_writeEEPROM+1,c
  7215  001878  0E51               	movlw	81
  7216  00187A  6E08               	movwf	?_writeEEPROM,c
  7217  00187C  0E98               	movlw	152
  7218  00187E  6E0A               	movwf	?_writeEEPROM+2,c
  7219  001880  EC44  F01C         	call	_writeEEPROM	;wreg free
  7220                           
  7221                           ;main.c: 511: writeEEPROM( 0x43 + 15,
  7222                           ;main.c: 512: 0x08 |
  7223                           ;main.c: 513: 0x10 |
  7224                           ;main.c: 514: 0x80 );
  7225  001884  6A09               	clrf	?_writeEEPROM+1,c
  7226  001886  0E52               	movlw	82
  7227  001888  6E08               	movwf	?_writeEEPROM,c
  7228  00188A  0E98               	movlw	152
  7229  00188C  6E0A               	movwf	?_writeEEPROM+2,c
  7230  00188E  EC44  F01C         	call	_writeEEPROM	;wreg free
  7231                           
  7232                           ;main.c: 516: writeEEPROM( 0x43 + 16,
  7233                           ;main.c: 517: 0x08 |
  7234                           ;main.c: 518: 0x10 |
  7235                           ;main.c: 519: 0x80 );
  7236  001892  6A09               	clrf	?_writeEEPROM+1,c
  7237  001894  0E53               	movlw	83
  7238  001896  6E08               	movwf	?_writeEEPROM,c
  7239  001898  0E98               	movlw	152
  7240  00189A  6E0A               	movwf	?_writeEEPROM+2,c
  7241  00189C  EC44  F01C         	call	_writeEEPROM	;wreg free
  7242                           
  7243                           ;main.c: 521: writeEEPROM( 0x43 + 17,
  7244                           ;main.c: 522: 0x08 |
  7245                           ;main.c: 523: 0x10 |
  7246                           ;main.c: 524: 0x80 );
  7247  0018A0  6A09               	clrf	?_writeEEPROM+1,c
  7248  0018A2  0E54               	movlw	84
  7249  0018A4  6E08               	movwf	?_writeEEPROM,c
  7250  0018A6  0E98               	movlw	152
  7251  0018A8  6E0A               	movwf	?_writeEEPROM+2,c
  7252  0018AA  EC44  F01C         	call	_writeEEPROM	;wreg free
  7253                           
  7254                           ;main.c: 526: writeEEPROM( 0x43 + 18, 0 );
  7255  0018AE  6A09               	clrf	?_writeEEPROM+1,c
  7256  0018B0  0E55               	movlw	85
  7257  0018B2  6E08               	movwf	?_writeEEPROM,c
  7258  0018B4  0E00               	movlw	0
  7259  0018B6  6A0A               	clrf	?_writeEEPROM+2,c
  7260  0018B8  EC44  F01C         	call	_writeEEPROM	;wreg free
  7261                           
  7262                           ;main.c: 527: writeEEPROM( 0x43 + 19, 0 );
  7263  0018BC  6A09               	clrf	?_writeEEPROM+1,c
  7264  0018BE  0E56               	movlw	86
  7265  0018C0  6E08               	movwf	?_writeEEPROM,c
  7266  0018C2  0E00               	movlw	0
  7267  0018C4  6A0A               	clrf	?_writeEEPROM+2,c
  7268  0018C6  EC44  F01C         	call	_writeEEPROM	;wreg free
  7269                           
  7270                           ;main.c: 528: writeEEPROM( 0x43 + 20, 0 );
  7271  0018CA  6A09               	clrf	?_writeEEPROM+1,c
  7272  0018CC  0E57               	movlw	87
  7273  0018CE  6E08               	movwf	?_writeEEPROM,c
  7274  0018D0  0E00               	movlw	0
  7275  0018D2  6A0A               	clrf	?_writeEEPROM+2,c
  7276  0018D4  EC44  F01C         	call	_writeEEPROM	;wreg free
  7277                           
  7278                           ;main.c: 529: writeEEPROM( 0x43 + 21, 0 );
  7279  0018D8  6A09               	clrf	?_writeEEPROM+1,c
  7280  0018DA  0E58               	movlw	88
  7281  0018DC  6E08               	movwf	?_writeEEPROM,c
  7282  0018DE  0E00               	movlw	0
  7283  0018E0  6A0A               	clrf	?_writeEEPROM+2,c
  7284  0018E2  EC44  F01C         	call	_writeEEPROM	;wreg free
  7285                           
  7286                           ;main.c: 530: writeEEPROM( 0x43 + 22, 0 );
  7287  0018E6  6A09               	clrf	?_writeEEPROM+1,c
  7288  0018E8  0E59               	movlw	89
  7289  0018EA  6E08               	movwf	?_writeEEPROM,c
  7290  0018EC  0E00               	movlw	0
  7291  0018EE  6A0A               	clrf	?_writeEEPROM+2,c
  7292  0018F0  EC44  F01C         	call	_writeEEPROM	;wreg free
  7293                           
  7294                           ;main.c: 531: writeEEPROM( 0x43 + 23, 0 );
  7295  0018F4  6A09               	clrf	?_writeEEPROM+1,c
  7296  0018F6  0E5A               	movlw	90
  7297  0018F8  6E08               	movwf	?_writeEEPROM,c
  7298  0018FA  0E00               	movlw	0
  7299  0018FC  6A0A               	clrf	?_writeEEPROM+2,c
  7300  0018FE  EC44  F01C         	call	_writeEEPROM	;wreg free
  7301                           
  7302                           ;main.c: 532: writeEEPROM( 0x43 + 24, 0 );
  7303  001902  6A09               	clrf	?_writeEEPROM+1,c
  7304  001904  0E5B               	movlw	91
  7305  001906  6E08               	movwf	?_writeEEPROM,c
  7306  001908  0E00               	movlw	0
  7307  00190A  6A0A               	clrf	?_writeEEPROM+2,c
  7308  00190C  EC44  F01C         	call	_writeEEPROM	;wreg free
  7309                           
  7310                           ;main.c: 533: writeEEPROM( 0x43 + 25, 0 );
  7311  001910  6A09               	clrf	?_writeEEPROM+1,c
  7312  001912  0E5C               	movlw	92
  7313  001914  6E08               	movwf	?_writeEEPROM,c
  7314  001916  0E00               	movlw	0
  7315  001918  6A0A               	clrf	?_writeEEPROM+2,c
  7316  00191A  EC44  F01C         	call	_writeEEPROM	;wreg free
  7317                           
  7318                           ;main.c: 534: writeEEPROM( 0x43 + 26, 0 );
  7319  00191E  6A09               	clrf	?_writeEEPROM+1,c
  7320  001920  0E5D               	movlw	93
  7321  001922  6E08               	movwf	?_writeEEPROM,c
  7322  001924  0E00               	movlw	0
  7323  001926  6A0A               	clrf	?_writeEEPROM+2,c
  7324  001928  EC44  F01C         	call	_writeEEPROM	;wreg free
  7325                           
  7326                           ;main.c: 535: writeEEPROM( 0x43 + 27, 0 );
  7327  00192C  6A09               	clrf	?_writeEEPROM+1,c
  7328  00192E  0E5E               	movlw	94
  7329  001930  6E08               	movwf	?_writeEEPROM,c
  7330  001932  0E00               	movlw	0
  7331  001934  6A0A               	clrf	?_writeEEPROM+2,c
  7332  001936  EC44  F01C         	call	_writeEEPROM	;wreg free
  7333                           
  7334                           ;main.c: 536: writeEEPROM( 0x43 + 28, 0 );
  7335  00193A  6A09               	clrf	?_writeEEPROM+1,c
  7336  00193C  0E5F               	movlw	95
  7337  00193E  6E08               	movwf	?_writeEEPROM,c
  7338  001940  0E00               	movlw	0
  7339  001942  6A0A               	clrf	?_writeEEPROM+2,c
  7340  001944  EC44  F01C         	call	_writeEEPROM	;wreg free
  7341                           
  7342                           ;main.c: 537: writeEEPROM( 0x43 + 29, 0 );
  7343  001948  6A09               	clrf	?_writeEEPROM+1,c
  7344  00194A  0E60               	movlw	96
  7345  00194C  6E08               	movwf	?_writeEEPROM,c
  7346  00194E  0E00               	movlw	0
  7347  001950  6A0A               	clrf	?_writeEEPROM+2,c
  7348  001952  EC44  F01C         	call	_writeEEPROM	;wreg free
  7349                           
  7350                           ;main.c: 538: writeEEPROM( 0x43 + 30, 0 );
  7351  001956  6A09               	clrf	?_writeEEPROM+1,c
  7352  001958  0E61               	movlw	97
  7353  00195A  6E08               	movwf	?_writeEEPROM,c
  7354  00195C  0E00               	movlw	0
  7355  00195E  6A0A               	clrf	?_writeEEPROM+2,c
  7356  001960  EC44  F01C         	call	_writeEEPROM	;wreg free
  7357                           
  7358                           ;main.c: 539: writeEEPROM( 0x43 + 31, 0 );
  7359  001964  6A09               	clrf	?_writeEEPROM+1,c
  7360  001966  0E62               	movlw	98
  7361  001968  6E08               	movwf	?_writeEEPROM,c
  7362  00196A  0E00               	movlw	0
  7363  00196C  6A0A               	clrf	?_writeEEPROM+2,c
  7364  00196E  EC44  F01C         	call	_writeEEPROM	;wreg free
  7365                           
  7366                           ;main.c: 540: writeEEPROM( 0x43 + 32, 0 );
  7367  001972  6A09               	clrf	?_writeEEPROM+1,c
  7368  001974  0E63               	movlw	99
  7369  001976  6E08               	movwf	?_writeEEPROM,c
  7370  001978  0E00               	movlw	0
  7371  00197A  6A0A               	clrf	?_writeEEPROM+2,c
  7372  00197C  EC44  F01C         	call	_writeEEPROM	;wreg free
  7373                           
  7374                           ;main.c: 541: writeEEPROM( 0x43 + 33, 0 );
  7375  001980  6A09               	clrf	?_writeEEPROM+1,c
  7376  001982  0E64               	movlw	100
  7377  001984  6E08               	movwf	?_writeEEPROM,c
  7378  001986  0E00               	movlw	0
  7379  001988  6A0A               	clrf	?_writeEEPROM+2,c
  7380  00198A  EC44  F01C         	call	_writeEEPROM	;wreg free
  7381                           
  7382                           ;main.c: 543: writeEEPROM( 0x43 + 34, 0 );
  7383  00198E  6A09               	clrf	?_writeEEPROM+1,c
  7384  001990  0E65               	movlw	101
  7385  001992  6E08               	movwf	?_writeEEPROM,c
  7386  001994  0E00               	movlw	0
  7387  001996  6A0A               	clrf	?_writeEEPROM+2,c
  7388  001998  EC44  F01C         	call	_writeEEPROM	;wreg free
  7389                           
  7390                           ;main.c: 544: writeEEPROM( 0x43 + 35, 0 );
  7391  00199C  6A09               	clrf	?_writeEEPROM+1,c
  7392  00199E  0E66               	movlw	102
  7393  0019A0  6E08               	movwf	?_writeEEPROM,c
  7394  0019A2  0E00               	movlw	0
  7395  0019A4  6A0A               	clrf	?_writeEEPROM+2,c
  7396  0019A6  EC44  F01C         	call	_writeEEPROM	;wreg free
  7397                           
  7398                           ;main.c: 545: writeEEPROM( 0x43 + 36, 0 );
  7399  0019AA  6A09               	clrf	?_writeEEPROM+1,c
  7400  0019AC  0E67               	movlw	103
  7401  0019AE  6E08               	movwf	?_writeEEPROM,c
  7402  0019B0  0E00               	movlw	0
  7403  0019B2  6A0A               	clrf	?_writeEEPROM+2,c
  7404  0019B4  EC44  F01C         	call	_writeEEPROM	;wreg free
  7405                           
  7406                           ;main.c: 546: writeEEPROM( 0x43 + 37, 0 );
  7407  0019B8  6A09               	clrf	?_writeEEPROM+1,c
  7408  0019BA  0E68               	movlw	104
  7409  0019BC  6E08               	movwf	?_writeEEPROM,c
  7410  0019BE  0E00               	movlw	0
  7411  0019C0  6A0A               	clrf	?_writeEEPROM+2,c
  7412  0019C2  EC44  F01C         	call	_writeEEPROM	;wreg free
  7413                           
  7414                           ;main.c: 547: writeEEPROM( 0x43 + 38, 0 );
  7415  0019C6  6A09               	clrf	?_writeEEPROM+1,c
  7416  0019C8  0E69               	movlw	105
  7417  0019CA  6E08               	movwf	?_writeEEPROM,c
  7418  0019CC  0E00               	movlw	0
  7419  0019CE  6A0A               	clrf	?_writeEEPROM+2,c
  7420  0019D0  EC44  F01C         	call	_writeEEPROM	;wreg free
  7421                           
  7422                           ;main.c: 548: writeEEPROM( 0x43 + 39, 0 );
  7423  0019D4  6A09               	clrf	?_writeEEPROM+1,c
  7424  0019D6  0E6A               	movlw	106
  7425  0019D8  6E08               	movwf	?_writeEEPROM,c
  7426  0019DA  0E00               	movlw	0
  7427  0019DC  6A0A               	clrf	?_writeEEPROM+2,c
  7428  0019DE  EC44  F01C         	call	_writeEEPROM	;wreg free
  7429                           
  7430                           ;main.c: 549: writeEEPROM( 0x43 + 40, 0 );
  7431  0019E2  6A09               	clrf	?_writeEEPROM+1,c
  7432  0019E4  0E6B               	movlw	107
  7433  0019E6  6E08               	movwf	?_writeEEPROM,c
  7434  0019E8  0E00               	movlw	0
  7435  0019EA  6A0A               	clrf	?_writeEEPROM+2,c
  7436  0019EC  EC44  F01C         	call	_writeEEPROM	;wreg free
  7437                           
  7438                           ;main.c: 550: writeEEPROM( 0x43 + 41, 0 );
  7439  0019F0  6A09               	clrf	?_writeEEPROM+1,c
  7440  0019F2  0E6C               	movlw	108
  7441  0019F4  6E08               	movwf	?_writeEEPROM,c
  7442  0019F6  0E00               	movlw	0
  7443  0019F8  6A0A               	clrf	?_writeEEPROM+2,c
  7444  0019FA  EC44  F01C         	call	_writeEEPROM	;wreg free
  7445                           
  7446                           ;main.c: 551: writeEEPROM( 0x43 + 42, 0 );
  7447  0019FE  6A09               	clrf	?_writeEEPROM+1,c
  7448  001A00  0E6D               	movlw	109
  7449  001A02  6E08               	movwf	?_writeEEPROM,c
  7450  001A04  0E00               	movlw	0
  7451  001A06  6A0A               	clrf	?_writeEEPROM+2,c
  7452  001A08  EC44  F01C         	call	_writeEEPROM	;wreg free
  7453                           
  7454                           ;main.c: 552: writeEEPROM( 0x43 + 43, 0 );
  7455  001A0C  6A09               	clrf	?_writeEEPROM+1,c
  7456  001A0E  0E6E               	movlw	110
  7457  001A10  6E08               	movwf	?_writeEEPROM,c
  7458  001A12  0E00               	movlw	0
  7459  001A14  6A0A               	clrf	?_writeEEPROM+2,c
  7460  001A16  EC44  F01C         	call	_writeEEPROM	;wreg free
  7461                           
  7462                           ;main.c: 553: writeEEPROM( 0x43 + 44, 0 );
  7463  001A1A  6A09               	clrf	?_writeEEPROM+1,c
  7464  001A1C  0E6F               	movlw	111
  7465  001A1E  6E08               	movwf	?_writeEEPROM,c
  7466  001A20  0E00               	movlw	0
  7467  001A22  6A0A               	clrf	?_writeEEPROM+2,c
  7468  001A24  EC44  F01C         	call	_writeEEPROM	;wreg free
  7469                           
  7470                           ;main.c: 554: writeEEPROM( 0x43 + 45, 0 );
  7471  001A28  6A09               	clrf	?_writeEEPROM+1,c
  7472  001A2A  0E70               	movlw	112
  7473  001A2C  6E08               	movwf	?_writeEEPROM,c
  7474  001A2E  0E00               	movlw	0
  7475  001A30  6A0A               	clrf	?_writeEEPROM+2,c
  7476  001A32  EC44  F01C         	call	_writeEEPROM	;wreg free
  7477                           
  7478                           ;main.c: 555: writeEEPROM( 0x43 + 46, 0 );
  7479  001A36  6A09               	clrf	?_writeEEPROM+1,c
  7480  001A38  0E71               	movlw	113
  7481  001A3A  6E08               	movwf	?_writeEEPROM,c
  7482  001A3C  0E00               	movlw	0
  7483  001A3E  6A0A               	clrf	?_writeEEPROM+2,c
  7484  001A40  EC44  F01C         	call	_writeEEPROM	;wreg free
  7485                           
  7486                           ;main.c: 556: writeEEPROM( 0x43 + 47, 0 );
  7487  001A44  6A09               	clrf	?_writeEEPROM+1,c
  7488  001A46  0E72               	movlw	114
  7489  001A48  6E08               	movwf	?_writeEEPROM,c
  7490  001A4A  0E00               	movlw	0
  7491  001A4C  6A0A               	clrf	?_writeEEPROM+2,c
  7492  001A4E  EC44  F01C         	call	_writeEEPROM	;wreg free
  7493                           
  7494                           ;main.c: 557: writeEEPROM( 0x43 + 48, 0 );
  7495  001A52  6A09               	clrf	?_writeEEPROM+1,c
  7496  001A54  0E73               	movlw	115
  7497  001A56  6E08               	movwf	?_writeEEPROM,c
  7498  001A58  0E00               	movlw	0
  7499  001A5A  6A0A               	clrf	?_writeEEPROM+2,c
  7500  001A5C  EC44  F01C         	call	_writeEEPROM	;wreg free
  7501                           
  7502                           ;main.c: 558: writeEEPROM( 0x43 + 49, 0 );
  7503  001A60  6A09               	clrf	?_writeEEPROM+1,c
  7504  001A62  0E74               	movlw	116
  7505  001A64  6E08               	movwf	?_writeEEPROM,c
  7506  001A66  0E00               	movlw	0
  7507  001A68  6A0A               	clrf	?_writeEEPROM+2,c
  7508  001A6A  EC44  F01C         	call	_writeEEPROM	;wreg free
  7509                           
  7510                           ;main.c: 560: writeEEPROM( 0x43 + 50, 0 );
  7511  001A6E  6A09               	clrf	?_writeEEPROM+1,c
  7512  001A70  0E75               	movlw	117
  7513  001A72  6E08               	movwf	?_writeEEPROM,c
  7514  001A74  0E00               	movlw	0
  7515  001A76  6A0A               	clrf	?_writeEEPROM+2,c
  7516  001A78  EC44  F01C         	call	_writeEEPROM	;wreg free
  7517                           
  7518                           ;main.c: 561: writeEEPROM( 0x43 + 51, 0 );
  7519  001A7C  6A09               	clrf	?_writeEEPROM+1,c
  7520  001A7E  0E76               	movlw	118
  7521  001A80  6E08               	movwf	?_writeEEPROM,c
  7522  001A82  0E00               	movlw	0
  7523  001A84  6A0A               	clrf	?_writeEEPROM+2,c
  7524  001A86  EC44  F01C         	call	_writeEEPROM	;wreg free
  7525                           
  7526                           ;main.c: 562: writeEEPROM( 0x43 + 52, 0 );
  7527  001A8A  6A09               	clrf	?_writeEEPROM+1,c
  7528  001A8C  0E77               	movlw	119
  7529  001A8E  6E08               	movwf	?_writeEEPROM,c
  7530  001A90  0E00               	movlw	0
  7531  001A92  6A0A               	clrf	?_writeEEPROM+2,c
  7532  001A94  EC44  F01C         	call	_writeEEPROM	;wreg free
  7533                           
  7534                           ;main.c: 563: writeEEPROM( 0x43 + 53, 0 );
  7535  001A98  6A09               	clrf	?_writeEEPROM+1,c
  7536  001A9A  0E78               	movlw	120
  7537  001A9C  6E08               	movwf	?_writeEEPROM,c
  7538  001A9E  0E00               	movlw	0
  7539  001AA0  6A0A               	clrf	?_writeEEPROM+2,c
  7540  001AA2  EC44  F01C         	call	_writeEEPROM	;wreg free
  7541                           
  7542                           ;main.c: 564: writeEEPROM( 0x43 + 54, 0 );
  7543  001AA6  6A09               	clrf	?_writeEEPROM+1,c
  7544  001AA8  0E79               	movlw	121
  7545  001AAA  6E08               	movwf	?_writeEEPROM,c
  7546  001AAC  0E00               	movlw	0
  7547  001AAE  6A0A               	clrf	?_writeEEPROM+2,c
  7548  001AB0  EC44  F01C         	call	_writeEEPROM	;wreg free
  7549                           
  7550                           ;main.c: 565: writeEEPROM( 0x43 + 55, 0 );
  7551  001AB4  6A09               	clrf	?_writeEEPROM+1,c
  7552  001AB6  0E7A               	movlw	122
  7553  001AB8  6E08               	movwf	?_writeEEPROM,c
  7554  001ABA  0E00               	movlw	0
  7555  001ABC  6A0A               	clrf	?_writeEEPROM+2,c
  7556  001ABE  EC44  F01C         	call	_writeEEPROM	;wreg free
  7557                           
  7558                           ;main.c: 566: writeEEPROM( 0x43 + 56, 0 );
  7559  001AC2  6A09               	clrf	?_writeEEPROM+1,c
  7560  001AC4  0E7B               	movlw	123
  7561  001AC6  6E08               	movwf	?_writeEEPROM,c
  7562  001AC8  0E00               	movlw	0
  7563  001ACA  6A0A               	clrf	?_writeEEPROM+2,c
  7564  001ACC  EC44  F01C         	call	_writeEEPROM	;wreg free
  7565                           
  7566                           ;main.c: 567: writeEEPROM( 0x43 + 57, 0 );
  7567  001AD0  6A09               	clrf	?_writeEEPROM+1,c
  7568  001AD2  0E7C               	movlw	124
  7569  001AD4  6E08               	movwf	?_writeEEPROM,c
  7570  001AD6  0E00               	movlw	0
  7571  001AD8  6A0A               	clrf	?_writeEEPROM+2,c
  7572  001ADA  EC44  F01C         	call	_writeEEPROM	;wreg free
  7573                           
  7574                           ;main.c: 568: writeEEPROM( 0x43 + 58, 0 );
  7575  001ADE  6A09               	clrf	?_writeEEPROM+1,c
  7576  001AE0  0E7D               	movlw	125
  7577  001AE2  6E08               	movwf	?_writeEEPROM,c
  7578  001AE4  0E00               	movlw	0
  7579  001AE6  6A0A               	clrf	?_writeEEPROM+2,c
  7580  001AE8  EC44  F01C         	call	_writeEEPROM	;wreg free
  7581                           
  7582                           ;main.c: 569: writeEEPROM( 0x43 + 59, 0 );
  7583  001AEC  6A09               	clrf	?_writeEEPROM+1,c
  7584  001AEE  0E7E               	movlw	126
  7585  001AF0  6E08               	movwf	?_writeEEPROM,c
  7586  001AF2  0E00               	movlw	0
  7587  001AF4  6A0A               	clrf	?_writeEEPROM+2,c
  7588  001AF6  EC44  F01C         	call	_writeEEPROM	;wreg free
  7589                           
  7590                           ;main.c: 570: writeEEPROM( 0x43 + 60, 0 );
  7591  001AFA  6A09               	clrf	?_writeEEPROM+1,c
  7592  001AFC  0E7F               	movlw	127
  7593  001AFE  6E08               	movwf	?_writeEEPROM,c
  7594  001B00  0E00               	movlw	0
  7595  001B02  6A0A               	clrf	?_writeEEPROM+2,c
  7596  001B04  EC44  F01C         	call	_writeEEPROM	;wreg free
  7597                           
  7598                           ;main.c: 571: writeEEPROM( 0x43 + 61, 0 );
  7599  001B08  6A09               	clrf	?_writeEEPROM+1,c
  7600  001B0A  0E80               	movlw	128
  7601  001B0C  6E08               	movwf	?_writeEEPROM,c
  7602  001B0E  0E00               	movlw	0
  7603  001B10  6A0A               	clrf	?_writeEEPROM+2,c
  7604  001B12  EC44  F01C         	call	_writeEEPROM	;wreg free
  7605                           
  7606                           ;main.c: 572: writeEEPROM( 0x43 + 62, 0 );
  7607  001B16  6A09               	clrf	?_writeEEPROM+1,c
  7608  001B18  0E81               	movlw	129
  7609  001B1A  6E08               	movwf	?_writeEEPROM,c
  7610  001B1C  0E00               	movlw	0
  7611  001B1E  6A0A               	clrf	?_writeEEPROM+2,c
  7612  001B20  EC44  F01C         	call	_writeEEPROM	;wreg free
  7613                           
  7614                           ;main.c: 573: writeEEPROM( 0x43 + 63, 0 );
  7615  001B24  6A09               	clrf	?_writeEEPROM+1,c
  7616  001B26  0E82               	movlw	130
  7617  001B28  6E08               	movwf	?_writeEEPROM,c
  7618  001B2A  0E00               	movlw	0
  7619  001B2C  6A0A               	clrf	?_writeEEPROM+2,c
  7620  001B2E  EC44  F01C         	call	_writeEEPROM	;wreg free
  7621                           
  7622                           ;main.c: 574: writeEEPROM( 0x43 + 64, 0 );
  7623  001B32  6A09               	clrf	?_writeEEPROM+1,c
  7624  001B34  0E83               	movlw	131
  7625  001B36  6E08               	movwf	?_writeEEPROM,c
  7626  001B38  0E00               	movlw	0
  7627  001B3A  6A0A               	clrf	?_writeEEPROM+2,c
  7628  001B3C  EC44  F01C         	call	_writeEEPROM	;wreg free
  7629                           
  7630                           ;main.c: 575: writeEEPROM( 0x43 + 65, 0 );
  7631  001B40  6A09               	clrf	?_writeEEPROM+1,c
  7632  001B42  0E84               	movlw	132
  7633  001B44  6E08               	movwf	?_writeEEPROM,c
  7634  001B46  0E00               	movlw	0
  7635  001B48  6A0A               	clrf	?_writeEEPROM+2,c
  7636  001B4A  EC44  F01C         	call	_writeEEPROM	;wreg free
  7637                           
  7638                           ;main.c: 579: for ( i = 0; i < 7; i++ ) {
  7639  001B4E  6A0D               	clrf	init_app_eeprom@i,c
  7640  001B50                     l185:
  7641                           
  7642                           ;main.c: 580: for ( j = 0; j < 8; j++ ) {
  7643  001B50  6A0E               	clrf	init_app_eeprom@j,c
  7644  001B52                     l4685:
  7645                           
  7646                           ;main.c: 581: writeEEPROM( 0x43 + 72 + i * 8 + j, 0 );
  7647  001B52  500E               	movf	init_app_eeprom@j,w,c
  7648  001B54  C00D  F00B         	movff	init_app_eeprom@i,??_init_app_eeprom
  7649  001B58  6A0C               	clrf	(??_init_app_eeprom+1)& (0+255),c
  7650  001B5A  90D8               	bcf	status,0,c
  7651  001B5C  360B               	rlcf	??_init_app_eeprom,f,c
  7652  001B5E  360C               	rlcf	??_init_app_eeprom+1,f,c
  7653  001B60  90D8               	bcf	status,0,c
  7654  001B62  360B               	rlcf	??_init_app_eeprom,f,c
  7655  001B64  360C               	rlcf	??_init_app_eeprom+1,f,c
  7656  001B66  90D8               	bcf	status,0,c
  7657  001B68  360B               	rlcf	??_init_app_eeprom,f,c
  7658  001B6A  360C               	rlcf	??_init_app_eeprom+1,f,c
  7659  001B6C  260B               	addwf	??_init_app_eeprom,f,c
  7660  001B6E  0E00               	movlw	0
  7661  001B70  220C               	addwfc	??_init_app_eeprom+1,f,c
  7662  001B72  0E8B               	movlw	139
  7663  001B74  240B               	addwf	??_init_app_eeprom,w,c
  7664  001B76  6E08               	movwf	?_writeEEPROM,c
  7665  001B78  0E00               	movlw	0
  7666  001B7A  200C               	addwfc	??_init_app_eeprom+1,w,c
  7667  001B7C  6E09               	movwf	?_writeEEPROM+1,c
  7668  001B7E  0E00               	movlw	0
  7669  001B80  6A0A               	clrf	?_writeEEPROM+2,c
  7670  001B82  EC44  F01C         	call	_writeEEPROM	;wreg free
  7671  001B86  2A0E               	incf	init_app_eeprom@j,f,c
  7672  001B88  0E07               	movlw	7
  7673  001B8A  640E               	cpfsgt	init_app_eeprom@j,c
  7674  001B8C  D7E2               	goto	l4685
  7675  001B8E  2A0D               	incf	init_app_eeprom@i,f,c
  7676  001B90  0E06               	movlw	6
  7677  001B92  640D               	cpfsgt	init_app_eeprom@i,c
  7678  001B94  D7DD               	goto	l185
  7679  001B96  0C06               	retlw	6
  7680  001B98                     __end_of_init_app_eeprom:
  7681                           	opt stack 0
  7682                           tblptru	equ	0xFF8
  7683                           tblptrh	equ	0xFF7
  7684                           tblptrl	equ	0xFF6
  7685                           tablat	equ	0xFF5
  7686                           prodh	equ	0xFF4
  7687                           prodl	equ	0xFF3
  7688                           intcon	equ	0xFF2
  7689                           postinc0	equ	0xFEE
  7690                           wreg	equ	0xFE8
  7691                           indf1	equ	0xFE7
  7692                           fsr1h	equ	0xFE2
  7693                           fsr1l	equ	0xFE1
  7694                           indf2	equ	0xFDF
  7695                           postinc2	equ	0xFDE
  7696                           postdec2	equ	0xFDD
  7697                           plusw2	equ	0xFDB
  7698                           fsr2h	equ	0xFDA
  7699                           fsr2l	equ	0xFD9
  7700                           status	equ	0xFD8
  7701                           
  7702 ;; *************** function _vscp_getFamilyType *****************
  7703 ;; Defined at:
  7704 ;;		line 2463 in file "../main.c"
  7705 ;; Parameters:    Size  Location     Type
  7706 ;;		None
  7707 ;; Auto vars:     Size  Location     Type
  7708 ;;		None
  7709 ;; Return value:  Size  Location     Type
  7710 ;;                  4    7[COMRAM] unsigned long 
  7711 ;; Registers used:
  7712 ;;		None
  7713 ;; Tracked objects:
  7714 ;;		On entry : F/0
  7715 ;;		On exit  : F/0
  7716 ;;		Unchanged: F/0
  7717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7718 ;;      Params:         4       0       0       0       0       0       0
  7719 ;;      Locals:         0       0       0       0       0       0       0
  7720 ;;      Temps:          0       0       0       0       0       0       0
  7721 ;;      Totals:         4       0       0       0       0       0       0
  7722 ;;Total ram usage:        4 bytes
  7723 ;; Hardware stack levels used:    1
  7724 ;; Hardware stack levels required when called:    2
  7725 ;; This function calls:
  7726 ;;		Nothing
  7727 ;; This function is called by:
  7728 ;;		_vscp_writeStdReg
  7729 ;; This function uses a non-reentrant model
  7730 ;;
  7731                           
  7732                           	psect	text21
  7733  003B10                     __ptext21:
  7734                           	opt stack 0
  7735  003B10                     _vscp_getFamilyType:
  7736                           	opt stack 26
  7737                           
  7738                           ; BSR set to: 0
  7739                           ;main.c: 2464: return 0;
  7740                           
  7741                           ;incstack = 0
  7742                           ;incstack = 0
  7743  003B10  6A08               	clrf	?_vscp_getFamilyType,c
  7744  003B12  6A09               	clrf	?_vscp_getFamilyType+1,c
  7745  003B14  6A0A               	clrf	?_vscp_getFamilyType+2,c
  7746  003B16  6A0B               	clrf	?_vscp_getFamilyType+3,c
  7747                           
  7748                           ; BSR set to: 0
  7749  003B18  0012               	return	
  7750  003B1A                     __end_of_vscp_getFamilyType:
  7751                           	opt stack 0
  7752                           tblptru	equ	0xFF8
  7753                           tblptrh	equ	0xFF7
  7754                           tblptrl	equ	0xFF6
  7755                           tablat	equ	0xFF5
  7756                           prodh	equ	0xFF4
  7757                           prodl	equ	0xFF3
  7758                           intcon	equ	0xFF2
  7759                           postinc0	equ	0xFEE
  7760                           wreg	equ	0xFE8
  7761                           indf1	equ	0xFE7
  7762                           fsr1h	equ	0xFE2
  7763                           fsr1l	equ	0xFE1
  7764                           indf2	equ	0xFDF
  7765                           postinc2	equ	0xFDE
  7766                           postdec2	equ	0xFDD
  7767                           plusw2	equ	0xFDB
  7768                           fsr2h	equ	0xFDA
  7769                           fsr2l	equ	0xFD9
  7770                           status	equ	0xFD8
  7771                           
  7772 ;; *************** function _vscp_getFamilyCode *****************
  7773 ;; Defined at:
  7774 ;;		line 2454 in file "../main.c"
  7775 ;; Parameters:    Size  Location     Type
  7776 ;;		None
  7777 ;; Auto vars:     Size  Location     Type
  7778 ;;		None
  7779 ;; Return value:  Size  Location     Type
  7780 ;;                  4    7[COMRAM] unsigned long 
  7781 ;; Registers used:
  7782 ;;		None
  7783 ;; Tracked objects:
  7784 ;;		On entry : F/0
  7785 ;;		On exit  : F/0
  7786 ;;		Unchanged: F/0
  7787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7788 ;;      Params:         4       0       0       0       0       0       0
  7789 ;;      Locals:         0       0       0       0       0       0       0
  7790 ;;      Temps:          0       0       0       0       0       0       0
  7791 ;;      Totals:         4       0       0       0       0       0       0
  7792 ;;Total ram usage:        4 bytes
  7793 ;; Hardware stack levels used:    1
  7794 ;; Hardware stack levels required when called:    2
  7795 ;; This function calls:
  7796 ;;		Nothing
  7797 ;; This function is called by:
  7798 ;;		_vscp_writeStdReg
  7799 ;; This function uses a non-reentrant model
  7800 ;;
  7801                           
  7802                           	psect	text22
  7803  003B1A                     __ptext22:
  7804                           	opt stack 0
  7805  003B1A                     _vscp_getFamilyCode:
  7806                           	opt stack 26
  7807                           
  7808                           ; BSR set to: 0
  7809                           ;main.c: 2455: return 0L;
  7810                           
  7811                           ; BSR set to: 0
  7812                           ;incstack = 0
  7813                           ;incstack = 0
  7814  003B1A  6A08               	clrf	?_vscp_getFamilyCode,c
  7815  003B1C  6A09               	clrf	?_vscp_getFamilyCode+1,c
  7816  003B1E  6A0A               	clrf	?_vscp_getFamilyCode+2,c
  7817  003B20  6A0B               	clrf	?_vscp_getFamilyCode+3,c
  7818                           
  7819                           ; BSR set to: 0
  7820  003B22  0012               	return	
  7821  003B24                     __end_of_vscp_getFamilyCode:
  7822                           	opt stack 0
  7823                           tblptru	equ	0xFF8
  7824                           tblptrh	equ	0xFF7
  7825                           tblptrl	equ	0xFF6
  7826                           tablat	equ	0xFF5
  7827                           prodh	equ	0xFF4
  7828                           prodl	equ	0xFF3
  7829                           intcon	equ	0xFF2
  7830                           postinc0	equ	0xFEE
  7831                           wreg	equ	0xFE8
  7832                           indf1	equ	0xFE7
  7833                           fsr1h	equ	0xFE2
  7834                           fsr1l	equ	0xFE1
  7835                           indf2	equ	0xFDF
  7836                           postinc2	equ	0xFDE
  7837                           postdec2	equ	0xFDD
  7838                           plusw2	equ	0xFDB
  7839                           fsr2h	equ	0xFDA
  7840                           fsr2l	equ	0xFD9
  7841                           status	equ	0xFD8
  7842                           
  7843 ;; *************** function _vscp_setUserID *****************
  7844 ;; Defined at:
  7845 ;;		line 2286 in file "../main.c"
  7846 ;; Parameters:    Size  Location     Type
  7847 ;;  idx             1    wreg     unsigned char 
  7848 ;;  data            1   10[COMRAM] unsigned char 
  7849 ;; Auto vars:     Size  Location     Type
  7850 ;;  idx             1   11[COMRAM] unsigned char 
  7851 ;; Return value:  Size  Location     Type
  7852 ;;		None               void
  7853 ;; Registers used:
  7854 ;;		wreg, status,2, status,0, cstack
  7855 ;; Tracked objects:
  7856 ;;		On entry : F/0
  7857 ;;		On exit  : 0/0
  7858 ;;		Unchanged: 0/0
  7859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7860 ;;      Params:         1       0       0       0       0       0       0
  7861 ;;      Locals:         1       0       0       0       0       0       0
  7862 ;;      Temps:          0       0       0       0       0       0       0
  7863 ;;      Totals:         2       0       0       0       0       0       0
  7864 ;;Total ram usage:        2 bytes
  7865 ;; Hardware stack levels used:    1
  7866 ;; Hardware stack levels required when called:    3
  7867 ;; This function calls:
  7868 ;;		_writeEEPROM
  7869 ;; This function is called by:
  7870 ;;		_vscp_writeStdReg
  7871 ;; This function uses a non-reentrant model
  7872 ;;
  7873                           
  7874                           	psect	text23
  7875  0039F4                     __ptext23:
  7876                           	opt stack 0
  7877  0039F4                     _vscp_setUserID:
  7878                           	opt stack 25
  7879                           
  7880                           ; BSR set to: 0
  7881                           ;incstack = 0
  7882                           ;incstack = 0
  7883                           ;vscp_setUserID@idx stored from wreg
  7884  0039F4  CFE8 F00C          	movff	wreg,vscp_setUserID@idx
  7885                           
  7886                           ; BSR set to: 0
  7887                           ;main.c: 2287: writeEEPROM( idx + 0x06, data );
  7888  0039F8  0E06               	movlw	6
  7889  0039FA  240C               	addwf	vscp_setUserID@idx,w,c
  7890  0039FC  6E08               	movwf	?_writeEEPROM,c
  7891  0039FE  6A09               	clrf	?_writeEEPROM+1,c
  7892  003A00  0E00               	movlw	0
  7893  003A02  2209               	addwfc	?_writeEEPROM+1,f,c
  7894  003A04  C00B  F00A         	movff	vscp_setUserID@data,?_writeEEPROM+2
  7895  003A08  EF44  F01C         	goto	_writeEEPROM	;wreg free
  7896  003A0C                     __end_of_vscp_setUserID:
  7897                           	opt stack 0
  7898                           tblptru	equ	0xFF8
  7899                           tblptrh	equ	0xFF7
  7900                           tblptrl	equ	0xFF6
  7901                           tablat	equ	0xFF5
  7902                           prodh	equ	0xFF4
  7903                           prodl	equ	0xFF3
  7904                           intcon	equ	0xFF2
  7905                           postinc0	equ	0xFEE
  7906                           wreg	equ	0xFE8
  7907                           indf1	equ	0xFE7
  7908                           fsr1h	equ	0xFE2
  7909                           fsr1l	equ	0xFE1
  7910                           indf2	equ	0xFDF
  7911                           postinc2	equ	0xFDE
  7912                           postdec2	equ	0xFDD
  7913                           plusw2	equ	0xFDB
  7914                           fsr2h	equ	0xFDA
  7915                           fsr2l	equ	0xFD9
  7916                           status	equ	0xFD8
  7917                           
  7918 ;; *************** function _vscp_setManufacturerId *****************
  7919 ;; Defined at:
  7920 ;;		line 820 in file "../main.c"
  7921 ;; Parameters:    Size  Location     Type
  7922 ;;  idx             1    wreg     unsigned char 
  7923 ;;  data            1   10[COMRAM] unsigned char 
  7924 ;; Auto vars:     Size  Location     Type
  7925 ;;  idx             1   11[COMRAM] unsigned char 
  7926 ;; Return value:  Size  Location     Type
  7927 ;;		None               void
  7928 ;; Registers used:
  7929 ;;		wreg, status,2, status,0, cstack
  7930 ;; Tracked objects:
  7931 ;;		On entry : F/0
  7932 ;;		On exit  : 0/0
  7933 ;;		Unchanged: 0/0
  7934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7935 ;;      Params:         1       0       0       0       0       0       0
  7936 ;;      Locals:         1       0       0       0       0       0       0
  7937 ;;      Temps:          0       0       0       0       0       0       0
  7938 ;;      Totals:         2       0       0       0       0       0       0
  7939 ;;Total ram usage:        2 bytes
  7940 ;; Hardware stack levels used:    1
  7941 ;; Hardware stack levels required when called:    3
  7942 ;; This function calls:
  7943 ;;		_writeEEPROM
  7944 ;; This function is called by:
  7945 ;;		_vscp_writeStdReg
  7946 ;; This function uses a non-reentrant model
  7947 ;;
  7948                           
  7949                           	psect	text24
  7950  00393A                     __ptext24:
  7951                           	opt stack 0
  7952  00393A                     _vscp_setManufacturerId:
  7953                           	opt stack 25
  7954                           
  7955                           ;incstack = 0
  7956                           ;incstack = 0
  7957                           ;vscp_setManufacturerId@idx stored from wreg
  7958  00393A  CFE8 F00C          	movff	wreg,vscp_setManufacturerId@idx
  7959                           
  7960                           ; BSR set to: 0
  7961                           ;main.c: 821: if ( idx>7 ) return;
  7962  00393E  0E07               	movlw	7
  7963  003940  640C               	cpfsgt	vscp_setManufacturerId@idx,c
  7964  003942  D001               	goto	l5619
  7965  003944  D00A               	goto	l251
  7966  003946                     l5619:
  7967                           
  7968                           ; BSR set to: 0
  7969                           ;main.c: 822: writeEEPROM(0x0B + idx, data);
  7970  003946  0E0B               	movlw	11
  7971  003948  240C               	addwf	vscp_setManufacturerId@idx,w,c
  7972  00394A  6E08               	movwf	?_writeEEPROM,c
  7973  00394C  6A09               	clrf	?_writeEEPROM+1,c
  7974  00394E  0E00               	movlw	0
  7975  003950  2209               	addwfc	?_writeEEPROM+1,f,c
  7976  003952  C00B  F00A         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
  7977  003956  EC44  F01C         	call	_writeEEPROM	;wreg free
  7978  00395A                     l251:
  7979  00395A  0012               	return	
  7980  00395C                     __end_of_vscp_setManufacturerId:
  7981                           	opt stack 0
  7982                           tblptru	equ	0xFF8
  7983                           tblptrh	equ	0xFF7
  7984                           tblptrl	equ	0xFF6
  7985                           tablat	equ	0xFF5
  7986                           prodh	equ	0xFF4
  7987                           prodl	equ	0xFF3
  7988                           intcon	equ	0xFF2
  7989                           postinc0	equ	0xFEE
  7990                           wreg	equ	0xFE8
  7991                           indf1	equ	0xFE7
  7992                           fsr1h	equ	0xFE2
  7993                           fsr1l	equ	0xFE1
  7994                           indf2	equ	0xFDF
  7995                           postinc2	equ	0xFDE
  7996                           postdec2	equ	0xFDD
  7997                           plusw2	equ	0xFDB
  7998                           fsr2h	equ	0xFDA
  7999                           fsr2l	equ	0xFD9
  8000                           status	equ	0xFD8
  8001                           
  8002 ;; *************** function _vscp_setGUID *****************
  8003 ;; Defined at:
  8004 ;;		line 808 in file "../main.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;  idx             1    wreg     unsigned char 
  8007 ;;  data            1   10[COMRAM] unsigned char 
  8008 ;; Auto vars:     Size  Location     Type
  8009 ;;  idx             1   11[COMRAM] unsigned char 
  8010 ;; Return value:  Size  Location     Type
  8011 ;;		None               void
  8012 ;; Registers used:
  8013 ;;		wreg, status,2, status,0, cstack
  8014 ;; Tracked objects:
  8015 ;;		On entry : F/0
  8016 ;;		On exit  : 0/0
  8017 ;;		Unchanged: 0/0
  8018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8019 ;;      Params:         1       0       0       0       0       0       0
  8020 ;;      Locals:         1       0       0       0       0       0       0
  8021 ;;      Temps:          0       0       0       0       0       0       0
  8022 ;;      Totals:         2       0       0       0       0       0       0
  8023 ;;Total ram usage:        2 bytes
  8024 ;; Hardware stack levels used:    1
  8025 ;; Hardware stack levels required when called:    3
  8026 ;; This function calls:
  8027 ;;		_writeEEPROM
  8028 ;; This function is called by:
  8029 ;;		_vscp_writeStdReg
  8030 ;; This function uses a non-reentrant model
  8031 ;;
  8032                           
  8033                           	psect	text25
  8034  00395C                     __ptext25:
  8035                           	opt stack 0
  8036  00395C                     _vscp_setGUID:
  8037                           	opt stack 25
  8038                           
  8039                           ;incstack = 0
  8040                           ;incstack = 0
  8041                           ;vscp_setGUID@idx stored from wreg
  8042  00395C  CFE8 F00C          	movff	wreg,vscp_setGUID@idx
  8043                           
  8044                           ; BSR set to: 0
  8045                           ;main.c: 809: if ( idx>15 ) return;
  8046  003960  0E0F               	movlw	15
  8047  003962  640C               	cpfsgt	vscp_setGUID@idx,c
  8048  003964  D001               	goto	l5613
  8049  003966  D00A               	goto	l247
  8050  003968                     l5613:
  8051                           
  8052                           ; BSR set to: 0
  8053                           ;main.c: 810: writeEEPROM(0x13 + idx, data);
  8054  003968  0E13               	movlw	19
  8055  00396A  240C               	addwf	vscp_setGUID@idx,w,c
  8056  00396C  6E08               	movwf	?_writeEEPROM,c
  8057  00396E  6A09               	clrf	?_writeEEPROM+1,c
  8058  003970  0E00               	movlw	0
  8059  003972  2209               	addwfc	?_writeEEPROM+1,f,c
  8060  003974  C00B  F00A         	movff	vscp_setGUID@data,?_writeEEPROM+2
  8061  003978  EC44  F01C         	call	_writeEEPROM	;wreg free
  8062  00397C                     l247:
  8063  00397C  0012               	return	
  8064  00397E                     __end_of_vscp_setGUID:
  8065                           	opt stack 0
  8066                           tblptru	equ	0xFF8
  8067                           tblptrh	equ	0xFF7
  8068                           tblptrl	equ	0xFF6
  8069                           tablat	equ	0xFF5
  8070                           prodh	equ	0xFF4
  8071                           prodl	equ	0xFF3
  8072                           intcon	equ	0xFF2
  8073                           postinc0	equ	0xFEE
  8074                           wreg	equ	0xFE8
  8075                           indf1	equ	0xFE7
  8076                           fsr1h	equ	0xFE2
  8077                           fsr1l	equ	0xFE1
  8078                           indf2	equ	0xFDF
  8079                           postinc2	equ	0xFDE
  8080                           postdec2	equ	0xFDD
  8081                           plusw2	equ	0xFDB
  8082                           fsr2h	equ	0xFDA
  8083                           fsr2l	equ	0xFD9
  8084                           status	equ	0xFD8
  8085                           
  8086 ;; *************** function _vscp_writeAppReg *****************
  8087 ;; Defined at:
  8088 ;;		line 971 in file "../main.c"
  8089 ;; Parameters:    Size  Location     Type
  8090 ;;  reg             1    wreg     unsigned char 
  8091 ;;  val             1   80[COMRAM] unsigned char 
  8092 ;; Auto vars:     Size  Location     Type
  8093 ;;  reg             1   29[BANK0 ] unsigned char 
  8094 ;;  val             1   26[BANK0 ] unsigned char 
  8095 ;;  rv              1   28[BANK0 ] unsigned char 
  8096 ;;  bOn             1   27[BANK0 ] enum E15660
  8097 ;;  bInfoEvent      1   25[BANK0 ] enum E15660
  8098 ;; Return value:  Size  Location     Type
  8099 ;;                  1    wreg      unsigned char 
  8100 ;; Registers used:
  8101 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8102 ;; Tracked objects:
  8103 ;;		On entry : F/0
  8104 ;;		On exit  : F/0
  8105 ;;		Unchanged: 0/0
  8106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8107 ;;      Params:         1       0       0       0       0       0       0
  8108 ;;      Locals:         0       5       0       0       0       0       0
  8109 ;;      Temps:          0       3       0       0       0       0       0
  8110 ;;      Totals:         1       8       0       0       0       0       0
  8111 ;;Total ram usage:        9 bytes
  8112 ;; Hardware stack levels used:    1
  8113 ;; Hardware stack levels required when called:    7
  8114 ;; This function calls:
  8115 ;;		_writeEEPROM
  8116 ;;		_readEEPROM
  8117 ;;		_SendInformationEvent
  8118 ;;		_calculateSetFilterMask
  8119 ;; This function is called by:
  8120 ;;		_vscp_writeRegister
  8121 ;;		_vscp_handleProtocolEvent
  8122 ;; This function uses a non-reentrant model
  8123 ;;
  8124                           
  8125                           	psect	text26
  8126  000622                     __ptext26:
  8127                           	opt stack 0
  8128  000622                     _vscp_writeAppReg:
  8129                           	opt stack 21
  8130                           
  8131                           ;incstack = 0
  8132                           ;incstack = 0
  8133                           ;vscp_writeAppReg@reg stored from wreg
  8134  000622  CFE8 F0CE          	movff	wreg,vscp_writeAppReg@reg
  8135                           
  8136                           ; BSR set to: 0
  8137                           ;main.c: 972: uint8_t rv;
  8138                           ;main.c: 973: BOOL bInfoEvent = 0;
  8139  000626  6BCA               	clrf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8140                           
  8141                           ;main.c: 974: BOOL bOn = 0;
  8142  000628  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8143                           
  8144                           ; BSR set to: 0
  8145                           ;main.c: 976: rv = ~val;
  8146  00062A  1C51               	comf	vscp_writeAppReg@val,w,c
  8147  00062C  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8148                           
  8149                           ; BSR set to: 0
  8150                           ;main.c: 979: if ( reg == 0 ) {
  8151  00062E  67CE               	tstfsz	vscp_writeAppReg@reg& (0+255),b
  8152  000630  D00D               	goto	l9885
  8153                           
  8154                           ; BSR set to: 0
  8155                           ;main.c: 980: writeEEPROM(0x43 + 0, val);
  8156  000632  6A09               	clrf	?_writeEEPROM+1,c
  8157  000634  0E43               	movlw	67
  8158  000636  6E08               	movwf	?_writeEEPROM,c
  8159  000638  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8160  00063C  EC44  F01C         	call	_writeEEPROM	;wreg free
  8161                           
  8162                           ;main.c: 981: rv = readEEPROM(0x43 + 0);
  8163  000640  6A09               	clrf	?_readEEPROM+1,c
  8164  000642  0E43               	movlw	67
  8165  000644  6E08               	movwf	?_readEEPROM,c
  8166  000646  EC6C  F01D         	call	_readEEPROM	;wreg free
  8167  00064A  D39C               	goto	L25
  8168  00064C                     l9885:
  8169                           
  8170                           ; BSR set to: 0
  8171                           ;main.c: 983: else if ( reg == 1 ) {
  8172  00064C  05CE               	decf	vscp_writeAppReg@reg& (0+255),w,b
  8173  00064E  E10D               	bnz	l9889
  8174                           
  8175                           ; BSR set to: 0
  8176                           ;main.c: 985: writeEEPROM(0x43 + 1, val);
  8177  000650  6A09               	clrf	?_writeEEPROM+1,c
  8178  000652  0E44               	movlw	68
  8179  000654  6E08               	movwf	?_writeEEPROM,c
  8180  000656  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  8181  00065A  EC44  F01C         	call	_writeEEPROM	;wreg free
  8182                           
  8183                           ;main.c: 986: rv = readEEPROM(0x43 + 1);
  8184  00065E  6A09               	clrf	?_readEEPROM+1,c
  8185  000660  0E44               	movlw	68
  8186  000662  6E08               	movwf	?_readEEPROM,c
  8187  000664  EC6C  F01D         	call	_readEEPROM	;wreg free
  8188  000668  D38D               	goto	L25
  8189  00066A                     l9889:
  8190                           
  8191                           ; BSR set to: 0
  8192                           ;main.c: 989: else if ( (reg >= 2) && (reg <= 9) ) {
  8193  00066A  0E01               	movlw	1
  8194  00066C  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8195  00066E  D17B               	goto	l10041
  8196                           
  8197                           ; BSR set to: 0
  8198  000670  0E0A               	movlw	10
  8199  000672  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8200  000674  D178               	goto	l10041
  8201                           
  8202                           ; BSR set to: 0
  8203                           ;main.c: 991: if ( readEEPROM( 0x43 +
  8204                           ;main.c: 992: 10 + reg - 2 ) &
  8205                           ;main.c: 993: 0x80 ) {
  8206  000676  0E4B               	movlw	75
  8207  000678  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  8208  00067A  6E08               	movwf	?_readEEPROM,c
  8209  00067C  6A09               	clrf	?_readEEPROM+1,c
  8210  00067E  0E00               	movlw	0
  8211  000680  2209               	addwfc	?_readEEPROM+1,f,c
  8212  000682  EC6C  F01D         	call	_readEEPROM	;wreg free
  8213  000686  0100               	movlb	0	; () banked
  8214  000688  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8215  00068A  BFC7               	btfsc	??_vscp_writeAppReg& (0+255),7,b
  8216  00068C  D157               	goto	l10039
  8217  00068E  D37C               	goto	l10217
  8218  000690                     l9897:
  8219                           
  8220                           ; BSR set to: 0
  8221                           ;main.c: 1000: bInfoEvent = 1;
  8222  000690  0E01               	movlw	1
  8223  000692  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8224                           
  8225                           ; BSR set to: 0
  8226                           ;main.c: 1002: if ( 1 == val ) {
  8227  000694  0451               	decf	vscp_writeAppReg@val,w,c
  8228  000696  E126               	bnz	l304
  8229                           
  8230                           ; BSR set to: 0
  8231                           ;main.c: 1004: LATBbits.LATB4 = 1;
  8232  000698  888A               	bsf	3978,4,c	;volatile
  8233                           
  8234                           ; BSR set to: 0
  8235                           ;main.c: 1005: rv = LATBbits.LATB4;
  8236  00069A  0E00               	movlw	0
  8237  00069C  B88A               	btfsc	3978,4,c	;volatile
  8238  00069E  0E01               	movlw	1
  8239  0006A0  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8240                           
  8241                           ; BSR set to: 0
  8242                           ;main.c: 1006: bOn = 1;
  8243  0006A2  0E01               	movlw	1
  8244  0006A4  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8245                           
  8246                           ; BSR set to: 0
  8247                           ;main.c: 1009: if ( readEEPROM( 0x43 + 10 ) & 0x04 ) {
  8248  0006A6  6A09               	clrf	?_readEEPROM+1,c
  8249  0006A8  0E4D               	movlw	77
  8250  0006AA  6E08               	movwf	?_readEEPROM,c
  8251  0006AC  EC6C  F01D         	call	_readEEPROM	;wreg free
  8252  0006B0  0100               	movlb	0	; () banked
  8253  0006B2  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8254  0006B4  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8255  0006B6  D368               	goto	l10217
  8256  0006B8                     l9909:
  8257                           
  8258                           ; BSR set to: 0
  8259                           ;main.c: 1010: relay_protection_timer[ 0 ] =
  8260                           ;main.c: 1011: readEEPROM( 0x43 + 34 ) * 256 +
  8261                           ;main.c: 1012: readEEPROM( 0x43 + 35 );
  8262  0006B8  6A09               	clrf	?_readEEPROM+1,c
  8263  0006BA  0E66               	movlw	102
  8264  0006BC  6E08               	movwf	?_readEEPROM,c
  8265  0006BE  EC6C  F01D         	call	_readEEPROM	;wreg free
  8266  0006C2  0100               	movlb	0	; () banked
  8267  0006C4  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8268  0006C6  6A09               	clrf	?_readEEPROM+1,c
  8269  0006C8  0E65               	movlw	101
  8270  0006CA  6E08               	movwf	?_readEEPROM,c
  8271  0006CC  EC6C  F01D         	call	_readEEPROM	;wreg free
  8272  0006D0  0100               	movlb	0	; () banked
  8273  0006D2  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8274  0006D4  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8275  0006D6  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8276  0006D8  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8277  0006DA  6F60               	movwf	_relay_protection_timer& (0+255),b
  8278  0006DC  0E00               	movlw	0
  8279  0006DE  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8280  0006E0  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  8281  0006E2  D352               	goto	l10217
  8282  0006E4                     l304:
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;main.c: 1016: else if (0 == val) {
  8286  0006E4  6651               	tstfsz	vscp_writeAppReg@val,c
  8287  0006E6  D350               	goto	l10217
  8288                           
  8289                           ; BSR set to: 0
  8290                           ;main.c: 1017: LATBbits.LATB4 = 0;
  8291  0006E8  988A               	bcf	3978,4,c	;volatile
  8292                           
  8293                           ; BSR set to: 0
  8294                           ;main.c: 1018: rv = LATBbits.LATB4;
  8295  0006EA  0E00               	movlw	0
  8296  0006EC  B88A               	btfsc	3978,4,c	;volatile
  8297  0006EE  0E01               	movlw	1
  8298  0006F0  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8299  0006F2                     l9915:
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;main.c: 1019: bOn = 0;
  8303  0006F2  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8304  0006F4  D349               	goto	l10217
  8305  0006F6                     l9917:
  8306                           
  8307                           ; BSR set to: 0
  8308                           ;main.c: 1026: bInfoEvent = 1;
  8309  0006F6  0E01               	movlw	1
  8310  0006F8  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8311                           
  8312                           ; BSR set to: 0
  8313                           ;main.c: 1028: if (1 == val) {
  8314  0006FA  0451               	decf	vscp_writeAppReg@val,w,c
  8315  0006FC  E11D               	bnz	l310
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;main.c: 1030: LATBbits.LATB1 = 1;
  8319  0006FE  828A               	bsf	3978,1,c	;volatile
  8320                           
  8321                           ; BSR set to: 0
  8322                           ;main.c: 1031: rv = LATBbits.LATB1;
  8323  000700  0E00               	movlw	0
  8324  000702  B28A               	btfsc	3978,1,c	;volatile
  8325  000704  0E01               	movlw	1
  8326  000706  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8327                           
  8328                           ; BSR set to: 0
  8329                           ;main.c: 1032: bOn = 1;
  8330  000708  0E01               	movlw	1
  8331  00070A  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8332                           
  8333                           ; BSR set to: 0
  8334                           ;main.c: 1034: if (readEEPROM(0x43 + 11) & 0x04) {
  8335  00070C  6A09               	clrf	?_readEEPROM+1,c
  8336  00070E  0E4E               	movlw	78
  8337  000710  6E08               	movwf	?_readEEPROM,c
  8338  000712  EC6C  F01D         	call	_readEEPROM	;wreg free
  8339  000716  0100               	movlb	0	; () banked
  8340  000718  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8341  00071A  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8342  00071C  D335               	goto	l10217
  8343  00071E                     l9929:
  8344                           
  8345                           ; BSR set to: 0
  8346                           ;main.c: 1035: relay_protection_timer[ 1 ] =
  8347                           ;main.c: 1036: readEEPROM(0x43 + 36) * 256 +
  8348                           ;main.c: 1037: readEEPROM(0x43 + 37);
  8349  00071E  6A09               	clrf	?_readEEPROM+1,c
  8350  000720  0E68               	movlw	104
  8351  000722  6E08               	movwf	?_readEEPROM,c
  8352  000724  EC6C  F01D         	call	_readEEPROM	;wreg free
  8353  000728  0100               	movlb	0	; () banked
  8354  00072A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8355  00072C  6A09               	clrf	?_readEEPROM+1,c
  8356  00072E  0E67               	movlw	103
  8357  000730  6E08               	movwf	?_readEEPROM,c
  8358  000732  EC6C  F01D         	call	_readEEPROM	;wreg free
  8359  000736  D166               	goto	L26
  8360  000738                     l310:
  8361                           
  8362                           ; BSR set to: 0
  8363                           ;main.c: 1041: else if (0 == val) {
  8364  000738  6651               	tstfsz	vscp_writeAppReg@val,c
  8365  00073A  D326               	goto	l10217
  8366                           
  8367                           ; BSR set to: 0
  8368                           ;main.c: 1042: LATBbits.LATB1 = 0;
  8369  00073C  928A               	bcf	3978,1,c	;volatile
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;main.c: 1043: rv = LATBbits.LATB1;
  8373  00073E  0E00               	movlw	0
  8374  000740  B28A               	btfsc	3978,1,c	;volatile
  8375  000742  0E01               	movlw	1
  8376  000744  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8377  000746  D7D5               	goto	l9915
  8378  000748                     l9937:
  8379                           
  8380                           ; BSR set to: 0
  8381                           ;main.c: 1051: bInfoEvent = 1;
  8382  000748  0E01               	movlw	1
  8383  00074A  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8384                           
  8385                           ; BSR set to: 0
  8386                           ;main.c: 1053: if (1 == val) {
  8387  00074C  0451               	decf	vscp_writeAppReg@val,w,c
  8388  00074E  E126               	bnz	l315
  8389                           
  8390                           ; BSR set to: 0
  8391                           ;main.c: 1055: LATBbits.LATB0 = 1;
  8392  000750  808A               	bsf	3978,0,c	;volatile
  8393                           
  8394                           ; BSR set to: 0
  8395                           ;main.c: 1056: rv = LATBbits.LATB0;
  8396  000752  0E00               	movlw	0
  8397  000754  B08A               	btfsc	3978,0,c	;volatile
  8398  000756  0E01               	movlw	1
  8399  000758  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8400                           
  8401                           ; BSR set to: 0
  8402                           ;main.c: 1057: bOn = 1;
  8403  00075A  0E01               	movlw	1
  8404  00075C  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8405                           
  8406                           ; BSR set to: 0
  8407                           ;main.c: 1059: if ( readEEPROM(0x43 + 12) & 0x04) {
  8408  00075E  6A09               	clrf	?_readEEPROM+1,c
  8409  000760  0E4F               	movlw	79
  8410  000762  6E08               	movwf	?_readEEPROM,c
  8411  000764  EC6C  F01D         	call	_readEEPROM	;wreg free
  8412  000768  0100               	movlb	0	; () banked
  8413  00076A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8414  00076C  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8415  00076E  D30C               	goto	l10217
  8416  000770                     l9949:
  8417                           
  8418                           ; BSR set to: 0
  8419                           ;main.c: 1060: relay_protection_timer[ 2 ] =
  8420                           ;main.c: 1061: readEEPROM(0x43 + 38) * 256 +
  8421                           ;main.c: 1062: readEEPROM(0x43 + 39);
  8422  000770  6A09               	clrf	?_readEEPROM+1,c
  8423  000772  0E6A               	movlw	106
  8424  000774  6E08               	movwf	?_readEEPROM,c
  8425  000776  EC6C  F01D         	call	_readEEPROM	;wreg free
  8426  00077A  0100               	movlb	0	; () banked
  8427  00077C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8428  00077E  6A09               	clrf	?_readEEPROM+1,c
  8429  000780  0E69               	movlw	105
  8430  000782  6E08               	movwf	?_readEEPROM,c
  8431  000784  EC6C  F01D         	call	_readEEPROM	;wreg free
  8432  000788  0100               	movlb	0	; () banked
  8433  00078A  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8434  00078C  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8435  00078E  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8436  000790  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8437  000792  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  8438  000794  0E00               	movlw	0
  8439  000796  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8440  000798  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  8441  00079A  D2F6               	goto	l10217
  8442  00079C                     l315:
  8443                           
  8444                           ; BSR set to: 0
  8445                           ;main.c: 1066: else if (0 == val) {
  8446  00079C  6651               	tstfsz	vscp_writeAppReg@val,c
  8447  00079E  D2F4               	goto	l10217
  8448                           
  8449                           ; BSR set to: 0
  8450                           ;main.c: 1067: LATBbits.LATB0 = 0;
  8451  0007A0  908A               	bcf	3978,0,c	;volatile
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;main.c: 1068: rv = LATBbits.LATB0;
  8455  0007A2  0E00               	movlw	0
  8456  0007A4  B08A               	btfsc	3978,0,c	;volatile
  8457  0007A6  0E01               	movlw	1
  8458  0007A8  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8459  0007AA  D7A3               	goto	l9915
  8460  0007AC                     l9957:
  8461                           
  8462                           ; BSR set to: 0
  8463                           ;main.c: 1077: bInfoEvent = 1;
  8464  0007AC  0E01               	movlw	1
  8465  0007AE  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8466                           
  8467                           ; BSR set to: 0
  8468                           ;main.c: 1079: if (1 == val) {
  8469  0007B0  0451               	decf	vscp_writeAppReg@val,w,c
  8470  0007B2  E126               	bnz	l320
  8471                           
  8472                           ; BSR set to: 0
  8473                           ;main.c: 1081: LATCbits.LATC7 = 1;
  8474  0007B4  8E8B               	bsf	3979,7,c	;volatile
  8475                           
  8476                           ; BSR set to: 0
  8477                           ;main.c: 1082: rv = LATCbits.LATC7;
  8478  0007B6  0E00               	movlw	0
  8479  0007B8  BE8B               	btfsc	3979,7,c	;volatile
  8480  0007BA  0E01               	movlw	1
  8481  0007BC  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8482                           
  8483                           ; BSR set to: 0
  8484                           ;main.c: 1083: bOn = 1;
  8485  0007BE  0E01               	movlw	1
  8486  0007C0  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8487                           
  8488                           ; BSR set to: 0
  8489                           ;main.c: 1085: if (readEEPROM(0x43 + 13) & 0x04) {
  8490  0007C2  6A09               	clrf	?_readEEPROM+1,c
  8491  0007C4  0E50               	movlw	80
  8492  0007C6  6E08               	movwf	?_readEEPROM,c
  8493  0007C8  EC6C  F01D         	call	_readEEPROM	;wreg free
  8494  0007CC  0100               	movlb	0	; () banked
  8495  0007CE  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8496  0007D0  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8497  0007D2  D2DA               	goto	l10217
  8498  0007D4                     l9969:
  8499                           
  8500                           ; BSR set to: 0
  8501                           ;main.c: 1086: relay_protection_timer[ 3 ] =
  8502                           ;main.c: 1087: readEEPROM(0x43 + 40) * 256 +
  8503                           ;main.c: 1088: readEEPROM(0x43 + 41);
  8504  0007D4  6A09               	clrf	?_readEEPROM+1,c
  8505  0007D6  0E6C               	movlw	108
  8506  0007D8  6E08               	movwf	?_readEEPROM,c
  8507  0007DA  EC6C  F01D         	call	_readEEPROM	;wreg free
  8508  0007DE  0100               	movlb	0	; () banked
  8509  0007E0  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8510  0007E2  6A09               	clrf	?_readEEPROM+1,c
  8511  0007E4  0E6B               	movlw	107
  8512  0007E6  6E08               	movwf	?_readEEPROM,c
  8513  0007E8  EC6C  F01D         	call	_readEEPROM	;wreg free
  8514  0007EC  0100               	movlb	0	; () banked
  8515  0007EE  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8516  0007F0  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8517  0007F2  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8518  0007F4  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8519  0007F6  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  8520  0007F8  0E00               	movlw	0
  8521  0007FA  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8522  0007FC  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  8523  0007FE  D2C4               	goto	l10217
  8524  000800                     l320:
  8525                           
  8526                           ; BSR set to: 0
  8527                           ;main.c: 1092: else if (0 == val) {
  8528  000800  6651               	tstfsz	vscp_writeAppReg@val,c
  8529  000802  D2C2               	goto	l10217
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;main.c: 1093: LATCbits.LATC7 = 0;
  8533  000804  9E8B               	bcf	3979,7,c	;volatile
  8534                           
  8535                           ; BSR set to: 0
  8536                           ;main.c: 1094: rv = LATCbits.LATC7;
  8537  000806  0E00               	movlw	0
  8538  000808  BE8B               	btfsc	3979,7,c	;volatile
  8539  00080A  0E01               	movlw	1
  8540  00080C  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8541  00080E  D771               	goto	l9915
  8542  000810                     l9977:
  8543                           
  8544                           ; BSR set to: 0
  8545                           ;main.c: 1103: bInfoEvent = 1;
  8546  000810  0E01               	movlw	1
  8547  000812  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8548                           
  8549                           ; BSR set to: 0
  8550                           ;main.c: 1105: if (1 == val) {
  8551  000814  0451               	decf	vscp_writeAppReg@val,w,c
  8552  000816  E126               	bnz	l325
  8553                           
  8554                           ; BSR set to: 0
  8555                           ;main.c: 1107: LATCbits.LATC6 = 1;
  8556  000818  8C8B               	bsf	3979,6,c	;volatile
  8557                           
  8558                           ; BSR set to: 0
  8559                           ;main.c: 1108: rv = LATCbits.LATC6;
  8560  00081A  0E00               	movlw	0
  8561  00081C  BC8B               	btfsc	3979,6,c	;volatile
  8562  00081E  0E01               	movlw	1
  8563  000820  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8564                           
  8565                           ; BSR set to: 0
  8566                           ;main.c: 1109: bOn = 1;
  8567  000822  0E01               	movlw	1
  8568  000824  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8569                           
  8570                           ; BSR set to: 0
  8571                           ;main.c: 1111: if (readEEPROM(0x43 + 14) & 0x04) {
  8572  000826  6A09               	clrf	?_readEEPROM+1,c
  8573  000828  0E51               	movlw	81
  8574  00082A  6E08               	movwf	?_readEEPROM,c
  8575  00082C  EC6C  F01D         	call	_readEEPROM	;wreg free
  8576  000830  0100               	movlb	0	; () banked
  8577  000832  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8578  000834  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8579  000836  D2A8               	goto	l10217
  8580  000838                     l9989:
  8581                           
  8582                           ; BSR set to: 0
  8583                           ;main.c: 1112: relay_protection_timer[ 4 ] =
  8584                           ;main.c: 1113: readEEPROM(0x43 + 42) * 256 +
  8585                           ;main.c: 1114: readEEPROM(0x43 + 43);
  8586  000838  6A09               	clrf	?_readEEPROM+1,c
  8587  00083A  0E6E               	movlw	110
  8588  00083C  6E08               	movwf	?_readEEPROM,c
  8589  00083E  EC6C  F01D         	call	_readEEPROM	;wreg free
  8590  000842  0100               	movlb	0	; () banked
  8591  000844  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8592  000846  6A09               	clrf	?_readEEPROM+1,c
  8593  000848  0E6D               	movlw	109
  8594  00084A  6E08               	movwf	?_readEEPROM,c
  8595  00084C  EC6C  F01D         	call	_readEEPROM	;wreg free
  8596  000850  0100               	movlb	0	; () banked
  8597  000852  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8598  000854  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8599  000856  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8600  000858  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8601  00085A  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  8602  00085C  0E00               	movlw	0
  8603  00085E  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8604  000860  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  8605  000862  D292               	goto	l10217
  8606  000864                     l325:
  8607                           
  8608                           ; BSR set to: 0
  8609                           ;main.c: 1118: else if (0 == val) {
  8610  000864  6651               	tstfsz	vscp_writeAppReg@val,c
  8611  000866  D290               	goto	l10217
  8612                           
  8613                           ; BSR set to: 0
  8614                           ;main.c: 1119: LATCbits.LATC6 = 0;
  8615  000868  9C8B               	bcf	3979,6,c	;volatile
  8616                           
  8617                           ; BSR set to: 0
  8618                           ;main.c: 1120: rv = LATCbits.LATC6;
  8619  00086A  0E00               	movlw	0
  8620  00086C  BC8B               	btfsc	3979,6,c	;volatile
  8621  00086E  0E01               	movlw	1
  8622  000870  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8623  000872  D73F               	goto	l9915
  8624  000874                     l9997:
  8625                           
  8626                           ; BSR set to: 0
  8627                           ;main.c: 1129: bInfoEvent = 1;
  8628  000874  0E01               	movlw	1
  8629  000876  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8630                           
  8631                           ; BSR set to: 0
  8632                           ;main.c: 1131: if (1 == val) {
  8633  000878  0451               	decf	vscp_writeAppReg@val,w,c
  8634  00087A  E126               	bnz	l330
  8635                           
  8636                           ; BSR set to: 0
  8637                           ;main.c: 1133: LATCbits.LATC5 = 1;
  8638  00087C  8A8B               	bsf	3979,5,c	;volatile
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;main.c: 1134: rv = LATCbits.LATC5;
  8642  00087E  0E00               	movlw	0
  8643  000880  BA8B               	btfsc	3979,5,c	;volatile
  8644  000882  0E01               	movlw	1
  8645  000884  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8646                           
  8647                           ; BSR set to: 0
  8648                           ;main.c: 1135: bOn = 1;
  8649  000886  0E01               	movlw	1
  8650  000888  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;main.c: 1137: if (readEEPROM(0x43 + 15) & 0x04) {
  8654  00088A  6A09               	clrf	?_readEEPROM+1,c
  8655  00088C  0E52               	movlw	82
  8656  00088E  6E08               	movwf	?_readEEPROM,c
  8657  000890  EC6C  F01D         	call	_readEEPROM	;wreg free
  8658  000894  0100               	movlb	0	; () banked
  8659  000896  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8660  000898  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8661  00089A  D276               	goto	l10217
  8662  00089C                     l10009:
  8663                           
  8664                           ; BSR set to: 0
  8665                           ;main.c: 1138: relay_protection_timer[ 5 ] =
  8666                           ;main.c: 1139: readEEPROM(0x43 + 44) * 256 +
  8667                           ;main.c: 1140: readEEPROM(0x43 + 45);
  8668  00089C  6A09               	clrf	?_readEEPROM+1,c
  8669  00089E  0E70               	movlw	112
  8670  0008A0  6E08               	movwf	?_readEEPROM,c
  8671  0008A2  EC6C  F01D         	call	_readEEPROM	;wreg free
  8672  0008A6  0100               	movlb	0	; () banked
  8673  0008A8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8674  0008AA  6A09               	clrf	?_readEEPROM+1,c
  8675  0008AC  0E6F               	movlw	111
  8676  0008AE  6E08               	movwf	?_readEEPROM,c
  8677  0008B0  EC6C  F01D         	call	_readEEPROM	;wreg free
  8678  0008B4  0100               	movlb	0	; () banked
  8679  0008B6  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8680  0008B8  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8681  0008BA  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8682  0008BC  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8683  0008BE  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  8684  0008C0  0E00               	movlw	0
  8685  0008C2  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8686  0008C4  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  8687  0008C6  D260               	goto	l10217
  8688  0008C8                     l330:
  8689                           
  8690                           ; BSR set to: 0
  8691                           ;main.c: 1144: else if (0 == val) {
  8692  0008C8  6651               	tstfsz	vscp_writeAppReg@val,c
  8693  0008CA  D25E               	goto	l10217
  8694                           
  8695                           ; BSR set to: 0
  8696                           ;main.c: 1145: LATCbits.LATC5 = 0;
  8697  0008CC  9A8B               	bcf	3979,5,c	;volatile
  8698                           
  8699                           ; BSR set to: 0
  8700                           ;main.c: 1146: rv = LATCbits.LATC5;
  8701  0008CE  0E00               	movlw	0
  8702  0008D0  BA8B               	btfsc	3979,5,c	;volatile
  8703  0008D2  0E01               	movlw	1
  8704  0008D4  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8705  0008D6  D70D               	goto	l9915
  8706  0008D8                     l10017:
  8707                           
  8708                           ; BSR set to: 0
  8709                           ;main.c: 1154: bInfoEvent = 1;
  8710  0008D8  0E01               	movlw	1
  8711  0008DA  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8712                           
  8713                           ; BSR set to: 0
  8714                           ;main.c: 1156: if (1 == val) {
  8715  0008DC  0451               	decf	vscp_writeAppReg@val,w,c
  8716  0008DE  E126               	bnz	l335
  8717                           
  8718                           ; BSR set to: 0
  8719                           ;main.c: 1158: LATCbits.LATC4 = 1;
  8720  0008E0  888B               	bsf	3979,4,c	;volatile
  8721                           
  8722                           ; BSR set to: 0
  8723                           ;main.c: 1159: rv = LATCbits.LATC4;
  8724  0008E2  0E00               	movlw	0
  8725  0008E4  B88B               	btfsc	3979,4,c	;volatile
  8726  0008E6  0E01               	movlw	1
  8727  0008E8  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8728                           
  8729                           ; BSR set to: 0
  8730                           ;main.c: 1160: bOn = 1;
  8731  0008EA  0E01               	movlw	1
  8732  0008EC  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8733                           
  8734                           ; BSR set to: 0
  8735                           ;main.c: 1162: if (readEEPROM(0x43 + 16) & 0x04) {
  8736  0008EE  6A09               	clrf	?_readEEPROM+1,c
  8737  0008F0  0E53               	movlw	83
  8738  0008F2  6E08               	movwf	?_readEEPROM,c
  8739  0008F4  EC6C  F01D         	call	_readEEPROM	;wreg free
  8740  0008F8  0100               	movlb	0	; () banked
  8741  0008FA  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8742  0008FC  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8743  0008FE  D244               	goto	l10217
  8744  000900                     l10029:
  8745                           
  8746                           ; BSR set to: 0
  8747                           ;main.c: 1163: relay_protection_timer[ 6 ] =
  8748                           ;main.c: 1164: readEEPROM(0x43 + 46) * 256 +
  8749                           ;main.c: 1165: readEEPROM(0x43 + 47);
  8750  000900  6A09               	clrf	?_readEEPROM+1,c
  8751  000902  0E72               	movlw	114
  8752  000904  6E08               	movwf	?_readEEPROM,c
  8753  000906  EC6C  F01D         	call	_readEEPROM	;wreg free
  8754  00090A  0100               	movlb	0	; () banked
  8755  00090C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8756  00090E  6A09               	clrf	?_readEEPROM+1,c
  8757  000910  0E71               	movlw	113
  8758  000912  6E08               	movwf	?_readEEPROM,c
  8759  000914  EC6C  F01D         	call	_readEEPROM	;wreg free
  8760  000918  0100               	movlb	0	; () banked
  8761  00091A  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8762  00091C  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8763  00091E  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8764  000920  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8765  000922  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  8766  000924  0E00               	movlw	0
  8767  000926  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8768  000928  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  8769  00092A  D22E               	goto	l10217
  8770  00092C                     l335:
  8771                           
  8772                           ; BSR set to: 0
  8773                           ;main.c: 1169: else if (0 == val) {
  8774  00092C  6651               	tstfsz	vscp_writeAppReg@val,c
  8775  00092E  D22C               	goto	l10217
  8776                           
  8777                           ; BSR set to: 0
  8778                           ;main.c: 1170: LATCbits.LATC4 = 0;
  8779  000930  988B               	bcf	3979,4,c	;volatile
  8780                           
  8781                           ; BSR set to: 0
  8782                           ;main.c: 1171: rv = LATCbits.LATC4;
  8783  000932  0E00               	movlw	0
  8784  000934  B88B               	btfsc	3979,4,c	;volatile
  8785  000936  0E01               	movlw	1
  8786  000938  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8787  00093A  D6DB               	goto	l9915
  8788  00093C                     l10039:
  8789                           
  8790                           ; BSR set to: 0
  8791  00093C  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  8792                           
  8793                           ; Switch size 1, requested type "space"
  8794                           ; Number of cases is 7, Range of values is 2 to 8
  8795                           ; switch strategies available:
  8796                           ; Name         Instructions Cycles
  8797                           ; simple_byte           22    12 (average)
  8798                           ;	Chosen strategy is simple_byte
  8799  00093E  0A02               	xorlw	2	; case 2
  8800  000940  E101 D6A6          	bz	l9897
  8801  000944  0A01               	xorlw	1	; case 3
  8802  000946  E101 D6D6          	bz	l9917
  8803  00094A  0A07               	xorlw	7	; case 4
  8804  00094C  E101 D6FC          	bz	l9937
  8805  000950  0A01               	xorlw	1	; case 5
  8806  000952  E101 D72B          	bz	l9957
  8807  000956  0A03               	xorlw	3	; case 6
  8808  000958  E101 D75A          	bz	l9977
  8809  00095C  0A01               	xorlw	1	; case 7
  8810  00095E  E08A               	bz	l9997
  8811  000960  0A0F               	xorlw	15	; case 8
  8812  000962  E0BA               	bz	l10017
  8813                           
  8814                           ; BSR set to: 0
  8815                           ;main.c: 1177: }
  8816                           ;main.c: 1178: }
  8817  000964  D211               	goto	l10217
  8818  000966                     l10041:
  8819                           
  8820                           ; BSR set to: 0
  8821                           ;main.c: 1181: else if ( (reg >= 10 ) &&
  8822                           ;main.c: 1182: (reg <= 17) ) {
  8823  000966  0E09               	movlw	9
  8824  000968  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8825  00096A  D10A               	goto	l10149
  8826                           
  8827                           ; BSR set to: 0
  8828  00096C  0E12               	movlw	18
  8829  00096E  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8830  000970  D107               	goto	l10149
  8831  000972  D0F2               	goto	l10147
  8832  000974                     l10047:
  8833                           
  8834                           ; BSR set to: 0
  8835                           ;main.c: 1188: writeEEPROM( 0x43 + reg, val );
  8836  000974  0E43               	movlw	67
  8837  000976  DA41               	call	PL4	;call to abstracted procedure
  8838  000978  EC44  F01C         	call	_writeEEPROM	;wreg free
  8839                           
  8840                           ;main.c: 1189: rv = readEEPROM( 0x43 + reg );
  8841  00097C  DA46               	call	PL6	;call to abstracted procedure
  8842  00097E  EC6C  F01D         	call	_readEEPROM	;wreg free
  8843  000982  0100               	movlb	0	; () banked
  8844  000984  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8845                           
  8846                           ; BSR set to: 0
  8847                           ;main.c: 1191: if ( val & 0x01 ) {
  8848  000986  A051               	btfss	vscp_writeAppReg@val,0,c
  8849  000988  D010               	goto	l10057
  8850                           
  8851                           ; BSR set to: 0
  8852                           ;main.c: 1193: LATBbits.LATB4 = 0;
  8853  00098A  988A               	bcf	3978,4,c	;volatile
  8854                           
  8855                           ;main.c: 1194: bOn = 0;
  8856  00098C  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8857                           
  8858                           ; BSR set to: 0
  8859                           ;main.c: 1196: relay_pulse_flags |= 0x01;
  8860  00098E  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  8861                           
  8862                           ; BSR set to: 0
  8863                           ;main.c: 1197: relay_pulse_timer[ 0 ] =
  8864                           ;main.c: 1198: readEEPROM( 0x43 + 18 ) * 256 +
  8865                           ;main.c: 1199: readEEPROM( 0x43 + 19 );
  8866  000990  6A09               	clrf	?_readEEPROM+1,c
  8867  000992  0E56               	movlw	86
  8868  000994  6E08               	movwf	?_readEEPROM,c
  8869  000996  EC6C  F01D         	call	_readEEPROM	;wreg free
  8870  00099A  0100               	movlb	0	; () banked
  8871  00099C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8872  00099E  6A09               	clrf	?_readEEPROM+1,c
  8873  0009A0  0E55               	movlw	85
  8874  0009A2  6E08               	movwf	?_readEEPROM,c
  8875  0009A4  EC6C  F01D         	call	_readEEPROM	;wreg free
  8876  0009A8  DA38               	call	PL40	;call to abstracted procedure
  8877  0009AA                     l10057:
  8878                           
  8879                           ; BSR set to: 0
  8880                           ;main.c: 1200: }
  8881                           ;main.c: 1202: if ( val & 0x04 ) {
  8882  0009AA  B451               	btfsc	vscp_writeAppReg@val,2,c
  8883  0009AC  D685               	goto	l9909
  8884  0009AE  D1EC               	goto	l10217
  8885  0009B0                     l10061:
  8886                           
  8887                           ; BSR set to: 0
  8888                           ;main.c: 1211: writeEEPROM( 0x43 + reg, val );
  8889  0009B0  0E43               	movlw	67
  8890  0009B2  DA23               	call	PL4	;call to abstracted procedure
  8891  0009B4  EC44  F01C         	call	_writeEEPROM	;wreg free
  8892                           
  8893                           ;main.c: 1212: rv = readEEPROM( 0x43 + reg );
  8894  0009B8  DA28               	call	PL6	;call to abstracted procedure
  8895  0009BA  EC6C  F01D         	call	_readEEPROM	;wreg free
  8896  0009BE  0100               	movlb	0	; () banked
  8897  0009C0  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8898                           
  8899                           ; BSR set to: 0
  8900                           ;main.c: 1214: if ( val & 0x01 ) {
  8901  0009C2  A051               	btfss	vscp_writeAppReg@val,0,c
  8902  0009C4  D011               	goto	l10071
  8903                           
  8904                           ; BSR set to: 0
  8905                           ;main.c: 1216: LATBbits.LATB1 = 0;
  8906  0009C6  928A               	bcf	3978,1,c	;volatile
  8907                           
  8908                           ;main.c: 1217: bOn = 0;
  8909  0009C8  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8910                           
  8911                           ; BSR set to: 0
  8912                           ;main.c: 1219: relay_pulse_flags |= 0x02;
  8913  0009CA  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  8914                           
  8915                           ; BSR set to: 0
  8916                           ;main.c: 1220: relay_pulse_timer[ 1 ] =
  8917                           ;main.c: 1221: readEEPROM( 0x43 + 18) * 256 +
  8918                           ;main.c: 1222: readEEPROM( 0x43 + 19);
  8919  0009CC  6A09               	clrf	?_readEEPROM+1,c
  8920  0009CE  0E56               	movlw	86
  8921  0009D0  6E08               	movwf	?_readEEPROM,c
  8922  0009D2  EC6C  F01D         	call	_readEEPROM	;wreg free
  8923  0009D6  0100               	movlb	0	; () banked
  8924  0009D8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8925  0009DA  6A09               	clrf	?_readEEPROM+1,c
  8926  0009DC  0E55               	movlw	85
  8927  0009DE  6E08               	movwf	?_readEEPROM,c
  8928  0009E0  EC6C  F01D         	call	_readEEPROM	;wreg free
  8929  0009E4  0100               	movlb	0	; () banked
  8930  0009E6  DA23               	call	PL56	;call to abstracted procedure
  8931  0009E8                     l10071:
  8932                           
  8933                           ; BSR set to: 0
  8934                           ;main.c: 1223: }
  8935                           ;main.c: 1225: if ( val & 0x04 ) {
  8936  0009E8  A451               	btfss	vscp_writeAppReg@val,2,c
  8937  0009EA  D1CE               	goto	l10217
  8938                           
  8939                           ; BSR set to: 0
  8940                           ;main.c: 1226: relay_protection_timer[ 1 ] =
  8941                           ;main.c: 1227: readEEPROM( 0x43 + 34 ) * 256 +
  8942                           ;main.c: 1228: readEEPROM( 0x43 + 35 );
  8943  0009EC  6A09               	clrf	?_readEEPROM+1,c
  8944  0009EE  0E66               	movlw	102
  8945  0009F0  6E08               	movwf	?_readEEPROM,c
  8946  0009F2  EC6C  F01D         	call	_readEEPROM	;wreg free
  8947  0009F6  0100               	movlb	0	; () banked
  8948  0009F8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8949  0009FA  6A09               	clrf	?_readEEPROM+1,c
  8950  0009FC  0E65               	movlw	101
  8951  0009FE  6E08               	movwf	?_readEEPROM,c
  8952  000A00  EC6C  F01D         	call	_readEEPROM	;wreg free
  8953  000A04                     L26:
  8954  000A04  0100               	movlb	0	; () banked
  8955  000A06  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8956  000A08  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8957  000A0A  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8958  000A0C  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8959  000A0E  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  8960  000A10  0E00               	movlw	0
  8961  000A12  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8962  000A14  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  8963  000A16  D1B8               	goto	l10217
  8964  000A18                     l10075:
  8965                           
  8966                           ; BSR set to: 0
  8967                           ;main.c: 1234: writeEEPROM( 0x43 + reg, val );
  8968  000A18  0E43               	movlw	67
  8969  000A1A  D9EF               	call	PL4	;call to abstracted procedure
  8970  000A1C  EC44  F01C         	call	_writeEEPROM	;wreg free
  8971                           
  8972                           ;main.c: 1235: rv = readEEPROM( 0x43 + reg );
  8973  000A20  D9F4               	call	PL6	;call to abstracted procedure
  8974  000A22  EC6C  F01D         	call	_readEEPROM	;wreg free
  8975  000A26  0100               	movlb	0	; () banked
  8976  000A28  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8977                           
  8978                           ; BSR set to: 0
  8979                           ;main.c: 1237: if ( val & 0x01 ) {
  8980  000A2A  A051               	btfss	vscp_writeAppReg@val,0,c
  8981  000A2C  D012               	goto	l10085
  8982                           
  8983                           ; BSR set to: 0
  8984                           ;main.c: 1239: LATBbits.LATB0 = 0;
  8985  000A2E  908A               	bcf	3978,0,c	;volatile
  8986                           
  8987                           ;main.c: 1240: bOn = 0;
  8988  000A30  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8989                           
  8990                           ; BSR set to: 0
  8991                           ;main.c: 1242: relay_pulse_flags |= 0x04;
  8992  000A32  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  8993                           
  8994                           ; BSR set to: 0
  8995                           ;main.c: 1243: relay_pulse_timer[ 2 ] =
  8996                           ;main.c: 1244: readEEPROM( 0x43 + 22) * 256 +
  8997                           ;main.c: 1245: readEEPROM( 0x43 + 23);
  8998  000A34  6A09               	clrf	?_readEEPROM+1,c
  8999  000A36  0E5A               	movlw	90
  9000  000A38  6E08               	movwf	?_readEEPROM,c
  9001  000A3A  EC6C  F01D         	call	_readEEPROM	;wreg free
  9002  000A3E  0100               	movlb	0	; () banked
  9003  000A40  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9004  000A42  6A09               	clrf	?_readEEPROM+1,c
  9005  000A44  0E59               	movlw	89
  9006  000A46  6E08               	movwf	?_readEEPROM,c
  9007  000A48  EC6C  F01D         	call	_readEEPROM	;wreg free
  9008  000A4C  0100               	movlb	0	; () banked
  9009  000A4E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9010  000A50  DA07               	call	PL64	;call to abstracted procedure
  9011  000A52                     l10085:
  9012                           
  9013                           ; BSR set to: 0
  9014                           ;main.c: 1246: }
  9015                           ;main.c: 1248: if ( val & 0x04 ) {
  9016  000A52  B451               	btfsc	vscp_writeAppReg@val,2,c
  9017  000A54  D68D               	goto	l9949
  9018  000A56  D198               	goto	l10217
  9019  000A58                     l10089:
  9020                           
  9021                           ; BSR set to: 0
  9022                           ;main.c: 1257: writeEEPROM( 0x43 + reg, val );
  9023  000A58  0E43               	movlw	67
  9024  000A5A  D9CF               	call	PL4	;call to abstracted procedure
  9025  000A5C  EC44  F01C         	call	_writeEEPROM	;wreg free
  9026                           
  9027                           ;main.c: 1258: rv = readEEPROM( 0x43 + reg );
  9028  000A60  D9D4               	call	PL6	;call to abstracted procedure
  9029  000A62  EC6C  F01D         	call	_readEEPROM	;wreg free
  9030  000A66  0100               	movlb	0	; () banked
  9031  000A68  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9032                           
  9033                           ; BSR set to: 0
  9034                           ;main.c: 1260: if ( val & 0x01 ) {
  9035  000A6A  A051               	btfss	vscp_writeAppReg@val,0,c
  9036  000A6C  D012               	goto	l10099
  9037                           
  9038                           ; BSR set to: 0
  9039                           ;main.c: 1262: LATCbits.LATC7 = 0;
  9040  000A6E  9E8B               	bcf	3979,7,c	;volatile
  9041                           
  9042                           ;main.c: 1263: bOn = 0;
  9043  000A70  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9044                           
  9045                           ; BSR set to: 0
  9046                           ;main.c: 1265: relay_pulse_flags |= 0x08;
  9047  000A72  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  9048                           
  9049                           ; BSR set to: 0
  9050                           ;main.c: 1266: relay_pulse_timer[ 3 ] =
  9051                           ;main.c: 1267: readEEPROM( 0x43 + 24) * 256 +
  9052                           ;main.c: 1268: readEEPROM( 0x43 + 25);
  9053  000A74  6A09               	clrf	?_readEEPROM+1,c
  9054  000A76  0E5C               	movlw	92
  9055  000A78  6E08               	movwf	?_readEEPROM,c
  9056  000A7A  EC6C  F01D         	call	_readEEPROM	;wreg free
  9057  000A7E  0100               	movlb	0	; () banked
  9058  000A80  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9059  000A82  6A09               	clrf	?_readEEPROM+1,c
  9060  000A84  0E5B               	movlw	91
  9061  000A86  6E08               	movwf	?_readEEPROM,c
  9062  000A88  EC6C  F01D         	call	_readEEPROM	;wreg free
  9063  000A8C  0100               	movlb	0	; () banked
  9064  000A8E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9065  000A90  D9EF               	call	PL66	;call to abstracted procedure
  9066  000A92                     l10099:
  9067                           
  9068                           ; BSR set to: 0
  9069                           ;main.c: 1269: }
  9070                           ;main.c: 1271: if ( val & 0x04 ) {
  9071  000A92  B451               	btfsc	vscp_writeAppReg@val,2,c
  9072  000A94  D69F               	goto	l9969
  9073  000A96  D178               	goto	l10217
  9074  000A98                     l10103:
  9075                           
  9076                           ; BSR set to: 0
  9077                           ;main.c: 1280: writeEEPROM( 0x43 + reg, val );
  9078  000A98  0E43               	movlw	67
  9079  000A9A  D9AF               	call	PL4	;call to abstracted procedure
  9080  000A9C  EC44  F01C         	call	_writeEEPROM	;wreg free
  9081                           
  9082                           ;main.c: 1281: rv = readEEPROM( 0x43 + reg );
  9083  000AA0  D9B4               	call	PL6	;call to abstracted procedure
  9084  000AA2  EC6C  F01D         	call	_readEEPROM	;wreg free
  9085  000AA6  0100               	movlb	0	; () banked
  9086  000AA8  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9087                           
  9088                           ; BSR set to: 0
  9089                           ;main.c: 1283: if ( val & 0x01 ) {
  9090  000AAA  A051               	btfss	vscp_writeAppReg@val,0,c
  9091  000AAC  D012               	goto	l10113
  9092                           
  9093                           ; BSR set to: 0
  9094                           ;main.c: 1285: LATCbits.LATC6 = 0;
  9095  000AAE  9C8B               	bcf	3979,6,c	;volatile
  9096                           
  9097                           ;main.c: 1286: bOn = 0;
  9098  000AB0  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9099                           
  9100                           ; BSR set to: 0
  9101                           ;main.c: 1288: relay_pulse_flags |= 0x10;
  9102  000AB2  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  9103                           
  9104                           ; BSR set to: 0
  9105                           ;main.c: 1289: relay_pulse_timer[ 4 ] =
  9106                           ;main.c: 1290: readEEPROM( 0x43 + 26) * 256 +
  9107                           ;main.c: 1291: readEEPROM( 0x43 + 27);
  9108  000AB4  6A09               	clrf	?_readEEPROM+1,c
  9109  000AB6  0E5E               	movlw	94
  9110  000AB8  6E08               	movwf	?_readEEPROM,c
  9111  000ABA  EC6C  F01D         	call	_readEEPROM	;wreg free
  9112  000ABE  0100               	movlb	0	; () banked
  9113  000AC0  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9114  000AC2  6A09               	clrf	?_readEEPROM+1,c
  9115  000AC4  0E5D               	movlw	93
  9116  000AC6  6E08               	movwf	?_readEEPROM,c
  9117  000AC8  EC6C  F01D         	call	_readEEPROM	;wreg free
  9118  000ACC  0100               	movlb	0	; () banked
  9119  000ACE  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9120  000AD0  D9BF               	call	PL62	;call to abstracted procedure
  9121  000AD2                     l10113:
  9122                           
  9123                           ; BSR set to: 0
  9124                           ;main.c: 1292: }
  9125                           ;main.c: 1294: if ( val & 0x04 ) {
  9126  000AD2  B451               	btfsc	vscp_writeAppReg@val,2,c
  9127  000AD4  D6B1               	goto	l9989
  9128  000AD6  D158               	goto	l10217
  9129  000AD8                     l10117:
  9130                           
  9131                           ; BSR set to: 0
  9132                           ;main.c: 1303: writeEEPROM( 0x43 + reg, val );
  9133  000AD8  0E43               	movlw	67
  9134  000ADA  D98F               	call	PL4	;call to abstracted procedure
  9135  000ADC  EC44  F01C         	call	_writeEEPROM	;wreg free
  9136                           
  9137                           ;main.c: 1304: rv = readEEPROM( 0x43 + reg );
  9138  000AE0  D994               	call	PL6	;call to abstracted procedure
  9139  000AE2  EC6C  F01D         	call	_readEEPROM	;wreg free
  9140  000AE6  0100               	movlb	0	; () banked
  9141  000AE8  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9142                           
  9143                           ; BSR set to: 0
  9144                           ;main.c: 1306: if ( val & 0x01 ) {
  9145  000AEA  A051               	btfss	vscp_writeAppReg@val,0,c
  9146  000AEC  D012               	goto	l10127
  9147                           
  9148                           ; BSR set to: 0
  9149                           ;main.c: 1308: LATCbits.LATC5 = 0;
  9150  000AEE  9A8B               	bcf	3979,5,c	;volatile
  9151                           
  9152                           ;main.c: 1309: bOn = 0;
  9153  000AF0  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9154                           
  9155                           ; BSR set to: 0
  9156                           ;main.c: 1311: relay_pulse_flags |= 0x20;
  9157  000AF2  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  9158                           
  9159                           ; BSR set to: 0
  9160                           ;main.c: 1312: relay_pulse_timer[ 5 ] =
  9161                           ;main.c: 1313: readEEPROM( 0x43 + 28) * 256 +
  9162                           ;main.c: 1314: readEEPROM( 0x43 + 29);
  9163  000AF4  6A09               	clrf	?_readEEPROM+1,c
  9164  000AF6  0E60               	movlw	96
  9165  000AF8  6E08               	movwf	?_readEEPROM,c
  9166  000AFA  EC6C  F01D         	call	_readEEPROM	;wreg free
  9167  000AFE  0100               	movlb	0	; () banked
  9168  000B00  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9169  000B02  6A09               	clrf	?_readEEPROM+1,c
  9170  000B04  0E5F               	movlw	95
  9171  000B06  6E08               	movwf	?_readEEPROM,c
  9172  000B08  EC6C  F01D         	call	_readEEPROM	;wreg free
  9173  000B0C  0100               	movlb	0	; () banked
  9174  000B0E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9175  000B10  D997               	call	PL60	;call to abstracted procedure
  9176  000B12                     l10127:
  9177                           
  9178                           ; BSR set to: 0
  9179                           ;main.c: 1315: }
  9180                           ;main.c: 1317: if ( val & 0x04 ) {
  9181  000B12  B451               	btfsc	vscp_writeAppReg@val,2,c
  9182  000B14  D6C3               	goto	l10009
  9183  000B16  D138               	goto	l10217
  9184  000B18                     l10131:
  9185                           
  9186                           ; BSR set to: 0
  9187                           ;main.c: 1326: writeEEPROM( 0x43 + reg, val );
  9188  000B18  0E43               	movlw	67
  9189  000B1A  D96F               	call	PL4	;call to abstracted procedure
  9190  000B1C  EC44  F01C         	call	_writeEEPROM	;wreg free
  9191                           
  9192                           ;main.c: 1327: rv = readEEPROM( 0x43 + reg );
  9193  000B20  D974               	call	PL6	;call to abstracted procedure
  9194  000B22  EC6C  F01D         	call	_readEEPROM	;wreg free
  9195  000B26  0100               	movlb	0	; () banked
  9196  000B28  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9197                           
  9198                           ; BSR set to: 0
  9199                           ;main.c: 1329: if ( val & 0x01 ) {
  9200  000B2A  A051               	btfss	vscp_writeAppReg@val,0,c
  9201  000B2C  D012               	goto	l10141
  9202                           
  9203                           ; BSR set to: 0
  9204                           ;main.c: 1331: LATCbits.LATC4 = 0;
  9205  000B2E  988B               	bcf	3979,4,c	;volatile
  9206                           
  9207                           ;main.c: 1332: bOn = 0;
  9208  000B30  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  9209                           
  9210                           ; BSR set to: 0
  9211                           ;main.c: 1334: relay_pulse_flags |= 0x40;
  9212  000B32  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  9213                           
  9214                           ; BSR set to: 0
  9215                           ;main.c: 1335: relay_pulse_timer[ 6 ] =
  9216                           ;main.c: 1336: readEEPROM( 0x43 + 30) * 256 +
  9217                           ;main.c: 1337: readEEPROM( 0x43 + 31);
  9218  000B34  6A09               	clrf	?_readEEPROM+1,c
  9219  000B36  0E62               	movlw	98
  9220  000B38  6E08               	movwf	?_readEEPROM,c
  9221  000B3A  EC6C  F01D         	call	_readEEPROM	;wreg free
  9222  000B3E  0100               	movlb	0	; () banked
  9223  000B40  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9224  000B42  6A09               	clrf	?_readEEPROM+1,c
  9225  000B44  0E61               	movlw	97
  9226  000B46  6E08               	movwf	?_readEEPROM,c
  9227  000B48  EC6C  F01D         	call	_readEEPROM	;wreg free
  9228  000B4C  0100               	movlb	0	; () banked
  9229  000B4E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9230  000B50  D997               	call	PL68	;call to abstracted procedure
  9231  000B52                     l10141:
  9232                           
  9233                           ; BSR set to: 0
  9234                           ;main.c: 1338: }
  9235                           ;main.c: 1340: if ( val & 0x04 ) {
  9236  000B52  B451               	btfsc	vscp_writeAppReg@val,2,c
  9237  000B54  D6D5               	goto	l10029
  9238  000B56  D118               	goto	l10217
  9239  000B58                     l10147:
  9240                           
  9241                           ; BSR set to: 0
  9242  000B58  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9243                           
  9244                           ; Switch size 1, requested type "space"
  9245                           ; Number of cases is 7, Range of values is 10 to 16
  9246                           ; switch strategies available:
  9247                           ; Name         Instructions Cycles
  9248                           ; simple_byte           22    12 (average)
  9249                           ;	Chosen strategy is simple_byte
  9250  000B5A  0A0A               	xorlw	10	; case 10
  9251  000B5C  E101 D70A          	bz	l10047
  9252  000B60  0A01               	xorlw	1	; case 11
  9253  000B62  E101 D725          	bz	l10061
  9254  000B66  0A07               	xorlw	7	; case 12
  9255  000B68  E101 D756          	bz	l10075
  9256  000B6C  0A01               	xorlw	1	; case 13
  9257  000B6E  E101 D773          	bz	l10089
  9258  000B72  0A03               	xorlw	3	; case 14
  9259  000B74  E091               	bz	l10103
  9260  000B76  0A01               	xorlw	1	; case 15
  9261  000B78  E0AF               	bz	l10117
  9262  000B7A  0A1F               	xorlw	31	; case 16
  9263  000B7C  E0CD               	bz	l10131
  9264  000B7E  D104               	goto	l10217
  9265  000B80                     l10149:
  9266                           
  9267                           ; BSR set to: 0
  9268                           ;main.c: 1351: else if ( (reg >= 18 ) &&
  9269                           ;main.c: 1352: (reg <= 33 ) ) {
  9270  000B80  0E11               	movlw	17
  9271  000B82  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9272  000B84  D0A3               	goto	l10175
  9273                           
  9274                           ; BSR set to: 0
  9275  000B86  0E22               	movlw	34
  9276  000B88  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9277  000B8A  D0A0               	goto	l10175
  9278                           
  9279                           ; BSR set to: 0
  9280                           ;main.c: 1355: writeEEPROM( 0x43 + reg, val );
  9281  000B8C  0E43               	movlw	67
  9282  000B8E  D935               	call	PL4	;call to abstracted procedure
  9283  000B90  EC44  F01C         	call	_writeEEPROM	;wreg free
  9284                           
  9285                           ;main.c: 1356: rv = readEEPROM( 0x43 + reg );
  9286  000B94  D93A               	call	PL6	;call to abstracted procedure
  9287  000B96  EC6C  F01D         	call	_readEEPROM	;wreg free
  9288  000B9A  0100               	movlb	0	; () banked
  9289  000B9C  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9290                           
  9291                           ;main.c: 1360: switch ( reg ) {
  9292  000B9E  D083               	goto	l10173
  9293  000BA0                     l10155:
  9294                           
  9295                           ; BSR set to: 0
  9296                           ;main.c: 1363: relay_pulse_timer[ 0 ] =
  9297                           ;main.c: 1364: readEEPROM( 0x43 + 18) * 256 +
  9298                           ;main.c: 1365: readEEPROM( 0x43 + 19);
  9299  000BA0  6A09               	clrf	?_readEEPROM+1,c
  9300  000BA2  0E56               	movlw	86
  9301  000BA4  6E08               	movwf	?_readEEPROM,c
  9302  000BA6  EC6C  F01D         	call	_readEEPROM	;wreg free
  9303  000BAA  0100               	movlb	0	; () banked
  9304  000BAC  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9305  000BAE  6A09               	clrf	?_readEEPROM+1,c
  9306  000BB0  0E55               	movlw	85
  9307  000BB2  6E08               	movwf	?_readEEPROM,c
  9308  000BB4  EC6C  F01D         	call	_readEEPROM	;wreg free
  9309  000BB8  D930               	call	PL40	;call to abstracted procedure
  9310                           
  9311                           ;main.c: 1366: break;
  9312  000BBA  D0E6               	goto	l10217
  9313  000BBC                     l10157:
  9314                           
  9315                           ; BSR set to: 0
  9316                           ;main.c: 1369: relay_pulse_timer[ 1 ] =
  9317                           ;main.c: 1370: readEEPROM( 0x43 + 20) * 256 +
  9318                           ;main.c: 1371: readEEPROM( 0x43 + 21);
  9319  000BBC  6A09               	clrf	?_readEEPROM+1,c
  9320  000BBE  0E58               	movlw	88
  9321  000BC0  6E08               	movwf	?_readEEPROM,c
  9322  000BC2  EC6C  F01D         	call	_readEEPROM	;wreg free
  9323  000BC6  0100               	movlb	0	; () banked
  9324  000BC8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9325  000BCA  6A09               	clrf	?_readEEPROM+1,c
  9326  000BCC  0E57               	movlw	87
  9327  000BCE  6E08               	movwf	?_readEEPROM,c
  9328  000BD0  EC6C  F01D         	call	_readEEPROM	;wreg free
  9329  000BD4  0100               	movlb	0	; () banked
  9330  000BD6  D92B               	call	PL56	;call to abstracted procedure
  9331                           
  9332                           ;main.c: 1372: break;
  9333  000BD8  D0D7               	goto	l10217
  9334  000BDA                     l10159:
  9335                           
  9336                           ; BSR set to: 0
  9337                           ;main.c: 1375: relay_pulse_timer[ 2 ] =
  9338                           ;main.c: 1376: readEEPROM( 0x43 + 22) * 256 +
  9339                           ;main.c: 1377: readEEPROM( 0x43 + 23);
  9340  000BDA  6A09               	clrf	?_readEEPROM+1,c
  9341  000BDC  0E5A               	movlw	90
  9342  000BDE  6E08               	movwf	?_readEEPROM,c
  9343  000BE0  EC6C  F01D         	call	_readEEPROM	;wreg free
  9344  000BE4  0100               	movlb	0	; () banked
  9345  000BE6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9346  000BE8  6A09               	clrf	?_readEEPROM+1,c
  9347  000BEA  0E59               	movlw	89
  9348  000BEC  6E08               	movwf	?_readEEPROM,c
  9349  000BEE  EC6C  F01D         	call	_readEEPROM	;wreg free
  9350  000BF2  0100               	movlb	0	; () banked
  9351  000BF4  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9352  000BF6  D934               	call	PL64	;call to abstracted procedure
  9353                           
  9354                           ;main.c: 1378: break;
  9355  000BF8  D0C7               	goto	l10217
  9356  000BFA                     l10161:
  9357                           
  9358                           ; BSR set to: 0
  9359                           ;main.c: 1381: relay_pulse_timer[ 3 ] =
  9360                           ;main.c: 1382: readEEPROM( 0x43 + 24) * 256 +
  9361                           ;main.c: 1383: readEEPROM( 0x43 + 25);
  9362  000BFA  6A09               	clrf	?_readEEPROM+1,c
  9363  000BFC  0E5C               	movlw	92
  9364  000BFE  6E08               	movwf	?_readEEPROM,c
  9365  000C00  EC6C  F01D         	call	_readEEPROM	;wreg free
  9366  000C04  0100               	movlb	0	; () banked
  9367  000C06  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9368  000C08  6A09               	clrf	?_readEEPROM+1,c
  9369  000C0A  0E5B               	movlw	91
  9370  000C0C  6E08               	movwf	?_readEEPROM,c
  9371  000C0E  EC6C  F01D         	call	_readEEPROM	;wreg free
  9372  000C12  0100               	movlb	0	; () banked
  9373  000C14  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9374  000C16  D92C               	call	PL66	;call to abstracted procedure
  9375                           
  9376                           ;main.c: 1384: break;
  9377  000C18  D0B7               	goto	l10217
  9378  000C1A                     l10163:
  9379                           
  9380                           ; BSR set to: 0
  9381                           ;main.c: 1387: relay_pulse_timer[ 4 ] =
  9382                           ;main.c: 1388: readEEPROM( 0x43 + 26) * 256 +
  9383                           ;main.c: 1389: readEEPROM( 0x43 + 27);
  9384  000C1A  6A09               	clrf	?_readEEPROM+1,c
  9385  000C1C  0E5E               	movlw	94
  9386  000C1E  6E08               	movwf	?_readEEPROM,c
  9387  000C20  EC6C  F01D         	call	_readEEPROM	;wreg free
  9388  000C24  0100               	movlb	0	; () banked
  9389  000C26  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9390  000C28  6A09               	clrf	?_readEEPROM+1,c
  9391  000C2A  0E5D               	movlw	93
  9392  000C2C  6E08               	movwf	?_readEEPROM,c
  9393  000C2E  EC6C  F01D         	call	_readEEPROM	;wreg free
  9394  000C32  0100               	movlb	0	; () banked
  9395  000C34  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9396  000C36  D90C               	call	PL62	;call to abstracted procedure
  9397                           
  9398                           ;main.c: 1390: break;
  9399  000C38  D0A7               	goto	l10217
  9400  000C3A                     l10165:
  9401                           
  9402                           ; BSR set to: 0
  9403                           ;main.c: 1393: relay_pulse_timer[ 5 ] =
  9404                           ;main.c: 1394: readEEPROM( 0x43 + 28) * 256 +
  9405                           ;main.c: 1395: readEEPROM( 0x43 + 29);
  9406  000C3A  6A09               	clrf	?_readEEPROM+1,c
  9407  000C3C  0E60               	movlw	96
  9408  000C3E  6E08               	movwf	?_readEEPROM,c
  9409  000C40  EC6C  F01D         	call	_readEEPROM	;wreg free
  9410  000C44  0100               	movlb	0	; () banked
  9411  000C46  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9412  000C48  6A09               	clrf	?_readEEPROM+1,c
  9413  000C4A  0E5F               	movlw	95
  9414  000C4C  6E08               	movwf	?_readEEPROM,c
  9415  000C4E  EC6C  F01D         	call	_readEEPROM	;wreg free
  9416  000C52  0100               	movlb	0	; () banked
  9417  000C54  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9418  000C56  D8F4               	call	PL60	;call to abstracted procedure
  9419                           
  9420                           ;main.c: 1396: break;
  9421  000C58  D097               	goto	l10217
  9422  000C5A                     l10167:
  9423                           
  9424                           ; BSR set to: 0
  9425                           ;main.c: 1399: relay_pulse_timer[ 6 ] =
  9426                           ;main.c: 1400: readEEPROM( 0x43 + 30) * 256 +
  9427                           ;main.c: 1401: readEEPROM( 0x43 + 31);
  9428  000C5A  6A09               	clrf	?_readEEPROM+1,c
  9429  000C5C  0E62               	movlw	98
  9430  000C5E  6E08               	movwf	?_readEEPROM,c
  9431  000C60  EC6C  F01D         	call	_readEEPROM	;wreg free
  9432  000C64  0100               	movlb	0	; () banked
  9433  000C66  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9434  000C68  6A09               	clrf	?_readEEPROM+1,c
  9435  000C6A  0E61               	movlw	97
  9436  000C6C  6E08               	movwf	?_readEEPROM,c
  9437  000C6E  EC6C  F01D         	call	_readEEPROM	;wreg free
  9438  000C72  0100               	movlb	0	; () banked
  9439  000C74  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9440  000C76  D904               	call	PL68	;call to abstracted procedure
  9441                           
  9442                           ;main.c: 1402: break;
  9443  000C78  D087               	goto	l10217
  9444  000C7A                     l10169:
  9445                           
  9446                           ; BSR set to: 0
  9447                           ;main.c: 1405: relay_pulse_timer[ 7 ] =
  9448                           ;main.c: 1406: readEEPROM( 0x43 + 32) * 256 +
  9449                           ;main.c: 1407: readEEPROM( 0x43 + 33);
  9450  000C7A  6A09               	clrf	?_readEEPROM+1,c
  9451  000C7C  0E64               	movlw	100
  9452  000C7E  6E08               	movwf	?_readEEPROM,c
  9453  000C80  EC6C  F01D         	call	_readEEPROM	;wreg free
  9454  000C84  0100               	movlb	0	; () banked
  9455  000C86  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9456  000C88  6A09               	clrf	?_readEEPROM+1,c
  9457  000C8A  0E63               	movlw	99
  9458  000C8C  6E08               	movwf	?_readEEPROM,c
  9459  000C8E  EC6C  F01D         	call	_readEEPROM	;wreg free
  9460  000C92  0100               	movlb	0	; () banked
  9461  000C94  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9462  000C96  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9463  000C98  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9464  000C9A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9465  000C9C  6F7E               	movwf	(_relay_pulse_timer+14)& (0+255),b
  9466  000C9E  0E00               	movlw	0
  9467  000CA0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9468  000CA2  6F7F               	movwf	(_relay_pulse_timer+15)& (0+255),b
  9469                           
  9470                           ;main.c: 1408: break;
  9471  000CA4  D071               	goto	l10217
  9472  000CA6                     l10173:
  9473                           
  9474                           ; BSR set to: 0
  9475  000CA6  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9476                           
  9477                           ; Switch size 1, requested type "space"
  9478                           ; Number of cases is 8, Range of values is 19 to 33
  9479                           ; switch strategies available:
  9480                           ; Name         Instructions Cycles
  9481                           ; simple_byte           25    13 (average)
  9482                           ;	Chosen strategy is simple_byte
  9483  000CA8  0A13               	xorlw	19	; case 19
  9484  000CAA  E101 D779          	bz	l10155
  9485  000CAE  0A06               	xorlw	6	; case 21
  9486  000CB0  E085               	bz	l10157
  9487  000CB2  0A02               	xorlw	2	; case 23
  9488  000CB4  E092               	bz	l10159
  9489  000CB6  0A0E               	xorlw	14	; case 25
  9490  000CB8  E0A0               	bz	l10161
  9491  000CBA  0A02               	xorlw	2	; case 27
  9492  000CBC  E0AE               	bz	l10163
  9493  000CBE  0A06               	xorlw	6	; case 29
  9494  000CC0  E0BC               	bz	l10165
  9495  000CC2  0A02               	xorlw	2	; case 31
  9496  000CC4  E0CA               	bz	l10167
  9497  000CC6  0A3E               	xorlw	62	; case 33
  9498  000CC8  E0D8               	bz	l10169
  9499  000CCA  D05E               	goto	l10217
  9500  000CCC                     l10175:
  9501                           
  9502                           ; BSR set to: 0
  9503                           ;main.c: 1416: else if ( ( reg >= 34 ) &&
  9504                           ;main.c: 1417: ( reg <= 49 ) ) {
  9505  000CCC  0E21               	movlw	33
  9506  000CCE  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9507  000CD0  D03C               	goto	l10201
  9508                           
  9509                           ; BSR set to: 0
  9510  000CD2  0E32               	movlw	50
  9511  000CD4  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9512  000CD6  D039               	goto	l10201
  9513                           
  9514                           ; BSR set to: 0
  9515                           ;main.c: 1420: writeEEPROM( 0x43 + reg, val );
  9516  000CD8  0E43               	movlw	67
  9517  000CDA  D88F               	call	PL4	;call to abstracted procedure
  9518  000CDC  EC44  F01C         	call	_writeEEPROM	;wreg free
  9519                           
  9520                           ;main.c: 1421: rv = readEEPROM( 0x43 + reg );
  9521  000CE0  D894               	call	PL6	;call to abstracted procedure
  9522  000CE2  EC6C  F01D         	call	_readEEPROM	;wreg free
  9523  000CE6  0100               	movlb	0	; () banked
  9524  000CE8  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9525                           
  9526                           ;main.c: 1423: switch ( reg ) {
  9527  000CEA  D016               	goto	l10199
  9528  000CEC                     l10195:
  9529                           
  9530                           ; BSR set to: 0
  9531                           ;main.c: 1468: relay_protection_timer[ 7 ] =
  9532                           ;main.c: 1469: readEEPROM( 0x43 + 48 ) * 256 +
  9533                           ;main.c: 1470: readEEPROM( 0x43 + 49 );
  9534  000CEC  6A09               	clrf	?_readEEPROM+1,c
  9535  000CEE  0E74               	movlw	116
  9536  000CF0  6E08               	movwf	?_readEEPROM,c
  9537  000CF2  EC6C  F01D         	call	_readEEPROM	;wreg free
  9538  000CF6  0100               	movlb	0	; () banked
  9539  000CF8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9540  000CFA  6A09               	clrf	?_readEEPROM+1,c
  9541  000CFC  0E73               	movlw	115
  9542  000CFE  6E08               	movwf	?_readEEPROM,c
  9543  000D00  EC6C  F01D         	call	_readEEPROM	;wreg free
  9544  000D04  0100               	movlb	0	; () banked
  9545  000D06  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9546  000D08  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9547  000D0A  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9548  000D0C  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9549  000D0E  6F6E               	movwf	(_relay_protection_timer+14)& (0+255),b
  9550  000D10  0E00               	movlw	0
  9551  000D12  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9552  000D14  6F6F               	movwf	(_relay_protection_timer+15)& (0+255),b
  9553                           
  9554                           ;main.c: 1471: break;
  9555  000D16  D038               	goto	l10217
  9556  000D18                     l10199:
  9557                           
  9558                           ; BSR set to: 0
  9559  000D18  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9560                           
  9561                           ; Switch size 1, requested type "space"
  9562                           ; Number of cases is 8, Range of values is 35 to 49
  9563                           ; switch strategies available:
  9564                           ; Name         Instructions Cycles
  9565                           ; simple_byte           25    13 (average)
  9566                           ;	Chosen strategy is simple_byte
  9567  000D1A  0A23               	xorlw	35	; case 35
  9568  000D1C  E101 D4CC          	bz	l9909
  9569  000D20  0A06               	xorlw	6	; case 37
  9570  000D22  E101 D4FC          	bz	l9929
  9571  000D26  0A02               	xorlw	2	; case 39
  9572  000D28  E101 D522          	bz	l9949
  9573  000D2C  0A0E               	xorlw	14	; case 41
  9574  000D2E  E101 D551          	bz	l9969
  9575  000D32  0A02               	xorlw	2	; case 43
  9576  000D34  E101 D580          	bz	l9989
  9577  000D38  0A06               	xorlw	6	; case 45
  9578  000D3A  E101 D5AF          	bz	l10009
  9579  000D3E  0A02               	xorlw	2	; case 47
  9580  000D40  E101 D5DE          	bz	l10029
  9581  000D44  0A1E               	xorlw	30	; case 49
  9582  000D46  E0D2               	bz	l10195
  9583  000D48  D01F               	goto	l10217
  9584  000D4A                     l10201:
  9585                           
  9586                           ; BSR set to: 0
  9587                           ;main.c: 1479: else if ( (reg >= 50 ) && (reg <= 65) ) {
  9588  000D4A  0E31               	movlw	49
  9589  000D4C  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9590  000D4E  D00B               	goto	l10207
  9591                           
  9592                           ; BSR set to: 0
  9593  000D50  0E42               	movlw	66
  9594  000D52  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9595  000D54  D008               	goto	l10207
  9596                           
  9597                           ; BSR set to: 0
  9598                           ;main.c: 1482: writeEEPROM( 0x43 + reg, val );
  9599  000D56  0E43               	movlw	67
  9600  000D58  D850               	call	PL4	;call to abstracted procedure
  9601  000D5A  EC44  F01C         	call	_writeEEPROM	;wreg free
  9602                           
  9603                           ;main.c: 1483: rv = readEEPROM( 0x43 + reg );
  9604  000D5E  D855               	call	PL6	;call to abstracted procedure
  9605  000D60  EC6C  F01D         	call	_readEEPROM	;wreg free
  9606  000D64  D00F               	goto	L25
  9607  000D66                     l10207:
  9608                           
  9609                           ; BSR set to: 0
  9610                           ;main.c: 1486: else if ( (reg >= 72) &&
  9611                           ;main.c: 1487: (reg < (72 + 7 * 8)) ) {
  9612  000D66  0E47               	movlw	71
  9613  000D68  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9614  000D6A  D00E               	goto	l10217
  9615                           
  9616                           ; BSR set to: 0
  9617  000D6C  0E80               	movlw	128
  9618  000D6E  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9619  000D70  D00B               	goto	l10217
  9620                           
  9621                           ; BSR set to: 0
  9622                           ;main.c: 1488: writeEEPROM( 0x43 + reg, val );
  9623  000D72  0E43               	movlw	67
  9624  000D74  D842               	call	PL4	;call to abstracted procedure
  9625  000D76  EC44  F01C         	call	_writeEEPROM	;wreg free
  9626                           
  9627                           ;main.c: 1489: calculateSetFilterMask();
  9628  000D7A  EC43  F00A         	call	_calculateSetFilterMask	;wreg free
  9629                           
  9630                           ;main.c: 1490: rv = readEEPROM( 0x43 + reg );
  9631  000D7E  D845               	call	PL6	;call to abstracted procedure
  9632  000D80  EC6C  F01D         	call	_readEEPROM	;wreg free
  9633  000D84                     L25:
  9634  000D84  0100               	movlb	0	; () banked
  9635  000D86  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9636  000D88                     l10217:
  9637                           
  9638                           ; BSR set to: 0
  9639                           ;main.c: 1491: }
  9640                           ;main.c: 1497: if ( bInfoEvent ) {
  9641  000D88  51CA               	movf	vscp_writeAppReg@bInfoEvent& (0+255),w,b
  9642  000D8A  E035               	bz	l10237
  9643                           
  9644                           ; BSR set to: 0
  9645                           ;main.c: 1499: unsigned char val;
  9646                           ;main.c: 1500: val = readEEPROM( 0x43 +
  9647                           ;main.c: 1501: 10 + (reg - 2) );
  9648  000D8C  0E4B               	movlw	75
  9649  000D8E  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9650  000D90  6E08               	movwf	?_readEEPROM,c
  9651  000D92  6A09               	clrf	?_readEEPROM+1,c
  9652  000D94  0E00               	movlw	0
  9653  000D96  2209               	addwfc	?_readEEPROM+1,f,c
  9654  000D98  EC6C  F01D         	call	_readEEPROM	;wreg free
  9655  000D9C  0100               	movlb	0	; () banked
  9656  000D9E  6FCB               	movwf	vscp_writeAppReg@val_678& (0+255),b
  9657                           
  9658                           ; BSR set to: 0
  9659                           ;main.c: 1503: if ( bOn ) {
  9660  000DA0  51CC               	movf	vscp_writeAppReg@bOn& (0+255),w,b
  9661  000DA2  E015               	bz	l395
  9662                           
  9663                           ; BSR set to: 0
  9664                           ;main.c: 1505: if ( val & 0x08 ) {
  9665  000DA4  A7CB               	btfss	vscp_writeAppReg@val_678& (0+255),3,b
  9666  000DA6  D008               	goto	l10227
  9667                           
  9668                           ; BSR set to: 0
  9669                           ;main.c: 1506: SendInformationEvent( reg - 2,
  9670                           ;main.c: 1507: 20,
  9671                           ;main.c: 1508: 3 );
  9672  000DA8  0E14               	movlw	20
  9673  000DAA  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9674  000DAC  0E03               	movlw	3
  9675  000DAE  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9676  000DB0  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9677  000DB2  0FFE               	addlw	254
  9678  000DB4  ECD5  F01A         	call	_SendInformationEvent
  9679  000DB8                     l10227:
  9680                           
  9681                           ; BSR set to: 0
  9682                           ;main.c: 1509: }
  9683                           ;main.c: 1511: if ( val & 0x20 ) {
  9684  000DB8  ABCB               	btfss	vscp_writeAppReg@val_678& (0+255),5,b
  9685  000DBA  D01D               	goto	l10237
  9686                           
  9687                           ; BSR set to: 0
  9688                           ;main.c: 1512: SendInformationEvent( reg - 2,
  9689                           ;main.c: 1513: 20,
  9690                           ;main.c: 1514: 25 );
  9691  000DBC  0E14               	movlw	20
  9692  000DBE  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9693  000DC0  0E19               	movlw	25
  9694  000DC2  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9695  000DC4  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9696  000DC6  0FFE               	addlw	254
  9697  000DC8  ECD5  F01A         	call	_SendInformationEvent
  9698  000DCC  D014               	goto	l10237
  9699  000DCE                     l395:
  9700                           
  9701                           ; BSR set to: 0
  9702                           ;main.c: 1518: else {
  9703                           ;main.c: 1520: if ( val & 0x10 ) {
  9704  000DCE  A9CB               	btfss	vscp_writeAppReg@val_678& (0+255),4,b
  9705  000DD0  D008               	goto	l10233
  9706                           
  9707                           ; BSR set to: 0
  9708                           ;main.c: 1521: SendInformationEvent( reg - 2,
  9709                           ;main.c: 1522: 20,
  9710                           ;main.c: 1523: 4 );
  9711  000DD2  0E14               	movlw	20
  9712  000DD4  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9713  000DD6  0E04               	movlw	4
  9714  000DD8  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9715  000DDA  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9716  000DDC  0FFE               	addlw	254
  9717  000DDE  ECD5  F01A         	call	_SendInformationEvent
  9718  000DE2                     l10233:
  9719                           
  9720                           ; BSR set to: 0
  9721                           ;main.c: 1524: }
  9722                           ;main.c: 1526: if ( val & 0x40 ) {
  9723  000DE2  ADCB               	btfss	vscp_writeAppReg@val_678& (0+255),6,b
  9724  000DE4  D008               	goto	l10237
  9725                           
  9726                           ; BSR set to: 0
  9727                           ;main.c: 1527: SendInformationEvent( reg - 2,
  9728                           ;main.c: 1528: 20,
  9729                           ;main.c: 1529: 24 );
  9730  000DE6  0E14               	movlw	20
  9731  000DE8  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9732  000DEA  0E18               	movlw	24
  9733  000DEC  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9734  000DEE  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9735  000DF0  0FFE               	addlw	254
  9736  000DF2  ECD5  F01A         	call	_SendInformationEvent
  9737  000DF6                     l10237:
  9738                           
  9739                           ; BSR set to: 0
  9740                           ;main.c: 1530: }
  9741                           ;main.c: 1531: }
  9742                           ;main.c: 1532: }
  9743                           ;main.c: 1534: return rv;
  9744  000DF6  51CD               	movf	vscp_writeAppReg@rv& (0+255),w,b
  9745                           
  9746                           ; BSR set to: 0
  9747  000DF8  0012               	return	
  9748  000DFA                     __end_of_vscp_writeAppReg:
  9749                           	opt stack 0
  9750  000DFA                     PL4:
  9751                           	opt stack 21
  9752  000DFA  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9753  000DFC  6E08               	movwf	?_writeEEPROM,c
  9754  000DFE  6A09               	clrf	?_writeEEPROM+1,c
  9755  000E00  0E00               	movlw	0
  9756  000E02  2209               	addwfc	?_writeEEPROM+1,f,c
  9757  000E04  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9758  000E08  0C00               	retlw	0
  9759  000E0A                     __end_ofPL4:
  9760                           	opt stack 0
  9761  000E0A                     PL6:
  9762                           	opt stack 21
  9763  000E0A  0E43               	movlw	67
  9764  000E0C  0100               	movlb	0	; () banked
  9765  000E0E  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9766  000E10  6E08               	movwf	?_readEEPROM,c
  9767  000E12  6A09               	clrf	?_readEEPROM+1,c
  9768  000E14  0E00               	movlw	0
  9769  000E16  2209               	addwfc	?_readEEPROM+1,f,c
  9770  000E18  0C00               	retlw	0
  9771  000E1A                     __end_ofPL6:
  9772                           	opt stack 0
  9773  000E1A                     PL40:
  9774                           	opt stack 21
  9775  000E1A  0100               	movlb	0	; () banked
  9776  000E1C  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9777  000E1E  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9778  000E20  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9779  000E22  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9780  000E24  6F70               	movwf	_relay_pulse_timer& (0+255),b
  9781  000E26  0E00               	movlw	0
  9782  000E28  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9783  000E2A  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  9784  000E2C  0012               	return	
  9785  000E2E                     __end_ofPL40:
  9786                           	opt stack 0
  9787  000E2E                     PL56:
  9788                           	opt stack 21
  9789  000E2E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9790  000E30  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9791  000E32  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9792  000E34  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9793  000E36  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  9794  000E38  0E00               	movlw	0
  9795  000E3A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9796  000E3C  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  9797  000E3E  0012               	return	
  9798  000E40                     __end_ofPL56:
  9799                           	opt stack 0
  9800  000E40                     PL60:
  9801                           	opt stack 21
  9802  000E40  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9803  000E42  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9804  000E44  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9805  000E46  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9806  000E48  0E00               	movlw	0
  9807  000E4A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9808  000E4C  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9809  000E4E  0012               	return	
  9810  000E50                     __end_ofPL60:
  9811                           	opt stack 0
  9812  000E50                     PL62:
  9813                           	opt stack 21
  9814  000E50  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9815  000E52  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9816  000E54  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9817  000E56  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9818  000E58  0E00               	movlw	0
  9819  000E5A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9820  000E5C  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9821  000E5E  0012               	return	
  9822  000E60                     __end_ofPL62:
  9823                           	opt stack 0
  9824  000E60                     PL64:
  9825                           	opt stack 21
  9826  000E60  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9827  000E62  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9828  000E64  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9829  000E66  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  9830  000E68  0E00               	movlw	0
  9831  000E6A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9832  000E6C  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  9833  000E6E  0012               	return	
  9834  000E70                     __end_ofPL64:
  9835                           	opt stack 0
  9836  000E70                     PL66:
  9837                           	opt stack 21
  9838  000E70  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9839  000E72  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9840  000E74  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9841  000E76  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  9842  000E78  0E00               	movlw	0
  9843  000E7A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9844  000E7C  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  9845  000E7E  0012               	return	
  9846  000E80                     __end_ofPL66:
  9847                           	opt stack 0
  9848  000E80                     PL68:
  9849                           	opt stack 21
  9850  000E80  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9851  000E82  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9852  000E84  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9853  000E86  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9854  000E88  0E00               	movlw	0
  9855  000E8A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9856  000E8C  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9857  000E8E  0012               	return	
  9858  000E90                     __end_ofPL68:
  9859                           	opt stack 0
  9860                           tblptru	equ	0xFF8
  9861                           tblptrh	equ	0xFF7
  9862                           tblptrl	equ	0xFF6
  9863                           tablat	equ	0xFF5
  9864                           prodh	equ	0xFF4
  9865                           prodl	equ	0xFF3
  9866                           intcon	equ	0xFF2
  9867                           postinc0	equ	0xFEE
  9868                           wreg	equ	0xFE8
  9869                           indf1	equ	0xFE7
  9870                           fsr1h	equ	0xFE2
  9871                           fsr1l	equ	0xFE1
  9872                           indf2	equ	0xFDF
  9873                           postinc2	equ	0xFDE
  9874                           postdec2	equ	0xFDD
  9875                           plusw2	equ	0xFDB
  9876                           fsr2h	equ	0xFDA
  9877                           fsr2l	equ	0xFD9
  9878                           status	equ	0xFD8
  9879                           
  9880 ;; *************** function _calculateSetFilterMask *****************
  9881 ;; Defined at:
  9882 ;;		line 2592 in file "../main.c"
  9883 ;; Parameters:    Size  Location     Type
  9884 ;;		None
  9885 ;; Auto vars:     Size  Location     Type
  9886 ;;  rowfilter       4   61[COMRAM] unsigned long 
  9887 ;;  filter          4   57[COMRAM] unsigned long 
  9888 ;;  mask            4   53[COMRAM] unsigned long 
  9889 ;;  rowmask         4   48[COMRAM] unsigned long 
  9890 ;;  i               1   66[COMRAM] unsigned char 
  9891 ;;  j               1   65[COMRAM] unsigned char 
  9892 ;;  lastOID         1   52[COMRAM] unsigned char 
  9893 ;; Return value:  Size  Location     Type
  9894 ;;		None               void
  9895 ;; Registers used:
  9896 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9897 ;; Tracked objects:
  9898 ;;		On entry : 0/0
  9899 ;;		On exit  : 0/0
  9900 ;;		Unchanged: 0/0
  9901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9902 ;;      Params:         0       0       0       0       0       0       0
  9903 ;;      Locals:        19       0       0       0       0       0       0
  9904 ;;      Temps:         31       0       0       0       0       0       0
  9905 ;;      Totals:        50       0       0       0       0       0       0
  9906 ;;Total ram usage:       50 bytes
  9907 ;; Hardware stack levels used:    1
  9908 ;; Hardware stack levels required when called:    3
  9909 ;; This function calls:
  9910 ;;		_readEEPROM
  9911 ;;		_ECANSetOperationMode
  9912 ;;		__CANIDToRegs
  9913 ;; This function is called by:
  9914 ;;		_vscp_writeAppReg
  9915 ;; This function uses a non-reentrant model
  9916 ;;
  9917                           
  9918                           	psect	text27
  9919  001486                     __ptext27:
  9920                           	opt stack 0
  9921  001486                     _calculateSetFilterMask:
  9922                           	opt stack 24
  9923                           
  9924                           ;main.c: 2593: uint8_t i,j;
  9925                           ;main.c: 2594: uint8_t lastOID;
  9926                           ;main.c: 2595: uint32_t rowmask;
  9927                           ;main.c: 2596: uint32_t rowfilter;
  9928                           ;main.c: 2599: uint32_t mask = 0xffffffff;
  9929                           
  9930                           ; BSR set to: 0
  9931                           ;incstack = 0
  9932                           ;incstack = 0
  9933  001486  6836               	setf	calculateSetFilterMask@mask,c
  9934  001488  6837               	setf	calculateSetFilterMask@mask+1,c
  9935  00148A  6838               	setf	calculateSetFilterMask@mask+2,c
  9936  00148C  6839               	setf	calculateSetFilterMask@mask+3,c
  9937                           
  9938                           ;main.c: 2600: uint32_t filter = 0;
  9939  00148E  6A3A               	clrf	calculateSetFilterMask@filter,c
  9940  001490  6A3B               	clrf	calculateSetFilterMask@filter+1,c
  9941  001492  6A3C               	clrf	calculateSetFilterMask@filter+2,c
  9942  001494  6A3D               	clrf	calculateSetFilterMask@filter+3,c
  9943                           
  9944                           ;main.c: 2603: for ( i=0; i < 7; i++ ) {
  9945  001496  6A43               	clrf	calculateSetFilterMask@i,c
  9946  001498                     l8461:
  9947                           
  9948                           ;main.c: 2606: if ( readEEPROM( 0x43 + 8*i + 1 ) & 0x80 ) {
  9949  001498  5043               	movf	calculateSetFilterMask@i,w,c
  9950  00149A  D972               	call	PL10	;call to abstracted procedure
  9951  00149C  0E44               	movlw	68
  9952  00149E  2412               	addwf	??_calculateSetFilterMask,w,c
  9953  0014A0  6E08               	movwf	?_readEEPROM,c
  9954  0014A2  0E00               	movlw	0
  9955  0014A4  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9956  0014A6  6E09               	movwf	?_readEEPROM+1,c
  9957  0014A8  EC6C  F01D         	call	_readEEPROM	;wreg free
  9958  0014AC  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
  9959  0014AE  AE14               	btfss	??_calculateSetFilterMask+2,7,c
  9960  0014B0  D11A               	goto	l8505
  9961                           
  9962                           ;main.c: 2615: rowmask =
  9963                           ;main.c: 2617: ( (uint32_t)( readEEPROM( 0x43 + 8*i + 1 ) & 2 ) << 23 ) |
  9964                           ;main.c: 2619: ( (uint32_t)readEEPROM( 0x43 + 8*i + 2 ) << 16 ) |
  9965                           ;main.c: 2621: ( (uint32_t)readEEPROM( 0x43 + 8*i + 4 ) << 8 ) |
  9966                           ;main.c: 2623: 0xff;
  9967  0014B2  5043               	movf	calculateSetFilterMask@i,w,c
  9968  0014B4  D965               	call	PL10	;call to abstracted procedure
  9969  0014B6  0E47               	movlw	71
  9970  0014B8  2412               	addwf	??_calculateSetFilterMask,w,c
  9971  0014BA  6E08               	movwf	?_readEEPROM,c
  9972  0014BC  0E00               	movlw	0
  9973  0014BE  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9974  0014C0  6E09               	movwf	?_readEEPROM+1,c
  9975  0014C2  EC6C  F01D         	call	_readEEPROM	;wreg free
  9976  0014C6  D968               	call	PL12	;call to abstracted procedure
  9977  0014C8  0E45               	movlw	69
  9978  0014CA  2419               	addwf	??_calculateSetFilterMask+7,w,c
  9979  0014CC  6E08               	movwf	?_readEEPROM,c
  9980  0014CE  0E00               	movlw	0
  9981  0014D0  201A               	addwfc	??_calculateSetFilterMask+8,w,c
  9982  0014D2  6E09               	movwf	?_readEEPROM+1,c
  9983  0014D4  EC6C  F01D         	call	_readEEPROM	;wreg free
  9984  0014D8  D934               	call	PL8	;call to abstracted procedure
  9985  0014DA  EC6C  F01D         	call	_readEEPROM	;wreg free
  9986  0014DE  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
  9987  0014E0  0E02               	movlw	2
  9988  0014E2  1622               	andwf	??_calculateSetFilterMask+16,f,c
  9989  0014E4  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
  9990  0014E8  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
  9991  0014EA  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
  9992  0014EC  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
  9993  0014EE  0E17               	movlw	23
  9994  0014F0                     u9815:
  9995  0014F0  90D8               	bcf	status,0,c
  9996  0014F2  3623               	rlcf	??_calculateSetFilterMask+17,f,c
  9997  0014F4  3624               	rlcf	??_calculateSetFilterMask+18,f,c
  9998  0014F6  3625               	rlcf	??_calculateSetFilterMask+19,f,c
  9999  0014F8  3626               	rlcf	??_calculateSetFilterMask+20,f,c
 10000  0014FA  2EE8               	decfsz	wreg,f,c
 10001  0014FC  D7F9               	goto	u9815
 10002  0014FE  501C               	movf	??_calculateSetFilterMask+10,w,c
 10003  001500  D965               	call	PL14	;call to abstracted procedure
 10004  001502  0EFF               	movlw	255
 10005  001504  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 10006  001506  6E31               	movwf	calculateSetFilterMask@rowmask,c
 10007  001508  502C               	movf	??_calculateSetFilterMask+26,w,c
 10008  00150A  6E32               	movwf	calculateSetFilterMask@rowmask+1,c
 10009  00150C  502D               	movf	??_calculateSetFilterMask+27,w,c
 10010  00150E  6E33               	movwf	calculateSetFilterMask@rowmask+2,c
 10011  001510  502E               	movf	??_calculateSetFilterMask+28,w,c
 10012  001512  6E34               	movwf	calculateSetFilterMask@rowmask+3,c
 10013                           
 10014                           ;main.c: 2624: ;
 10015                           ;main.c: 2629: rowfilter =
 10016                           ;main.c: 2631: ( (uint32_t)( readEEPROM( 0x43 + 8*i + 1 ) & 1 ) << 24 ) |
 10017                           ;main.c: 2633: ( (uint32_t)readEEPROM( 0x43 + 8*i + 3 ) << 16 ) |
 10018                           ;main.c: 2635: ( (uint32_t)readEEPROM( 0x43 + 8*i + 5 ) << 8 ) |
 10019                           ;main.c: 2638: readEEPROM( 0x43 + 8*i );
 10020  001514  5043               	movf	calculateSetFilterMask@i,w,c
 10021  001516  D934               	call	PL10	;call to abstracted procedure
 10022  001518  0E48               	movlw	72
 10023  00151A  2412               	addwf	??_calculateSetFilterMask,w,c
 10024  00151C  6E08               	movwf	?_readEEPROM,c
 10025  00151E  0E00               	movlw	0
 10026  001520  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10027  001522  6E09               	movwf	?_readEEPROM+1,c
 10028  001524  EC6C  F01D         	call	_readEEPROM	;wreg free
 10029  001528  D937               	call	PL12	;call to abstracted procedure
 10030  00152A  0E46               	movlw	70
 10031  00152C  2419               	addwf	??_calculateSetFilterMask+7,w,c
 10032  00152E  6E08               	movwf	?_readEEPROM,c
 10033  001530  0E00               	movlw	0
 10034  001532  201A               	addwfc	??_calculateSetFilterMask+8,w,c
 10035  001534  6E09               	movwf	?_readEEPROM+1,c
 10036  001536  EC6C  F01D         	call	_readEEPROM	;wreg free
 10037  00153A  D903               	call	PL8	;call to abstracted procedure
 10038  00153C  EC6C  F01D         	call	_readEEPROM	;wreg free
 10039  001540  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
 10040  001542  0E01               	movlw	1
 10041  001544  1622               	andwf	??_calculateSetFilterMask+16,f,c
 10042  001546  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
 10043  00154A  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
 10044  00154C  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
 10045  00154E  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
 10046  001550  C023  F026         	movff	??_calculateSetFilterMask+17,??_calculateSetFilterMask+20
 10047  001554  6A25               	clrf	??_calculateSetFilterMask+19,c
 10048  001556  6A24               	clrf	??_calculateSetFilterMask+18,c
 10049  001558  6A23               	clrf	??_calculateSetFilterMask+17,c
 10050  00155A  501C               	movf	??_calculateSetFilterMask+10,w,c
 10051  00155C  D937               	call	PL14	;call to abstracted procedure
 10052  00155E  5043               	movf	calculateSetFilterMask@i,w,c
 10053  001560  6E2F               	movwf	(??_calculateSetFilterMask+29)& (0+255),c
 10054  001562  6A30               	clrf	(??_calculateSetFilterMask+30)& (0+255),c
 10055  001564  90D8               	bcf	status,0,c
 10056  001566  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10057  001568  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10058  00156A  90D8               	bcf	status,0,c
 10059  00156C  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10060  00156E  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10061  001570  90D8               	bcf	status,0,c
 10062  001572  362F               	rlcf	??_calculateSetFilterMask+29,f,c
 10063  001574  3630               	rlcf	??_calculateSetFilterMask+30,f,c
 10064  001576  0E43               	movlw	67
 10065  001578  242F               	addwf	??_calculateSetFilterMask+29,w,c
 10066  00157A  6E08               	movwf	?_readEEPROM,c
 10067  00157C  0E00               	movlw	0
 10068  00157E  2030               	addwfc	??_calculateSetFilterMask+30,w,c
 10069  001580  6E09               	movwf	?_readEEPROM+1,c
 10070  001582  EC6C  F01D         	call	_readEEPROM	;wreg free
 10071  001586  102B               	iorwf	??_calculateSetFilterMask+25,w,c
 10072  001588  6E3E               	movwf	calculateSetFilterMask@rowfilter,c
 10073  00158A  502C               	movf	??_calculateSetFilterMask+26,w,c
 10074  00158C  6E3F               	movwf	calculateSetFilterMask@rowfilter+1,c
 10075  00158E  502D               	movf	??_calculateSetFilterMask+27,w,c
 10076  001590  6E40               	movwf	calculateSetFilterMask@rowfilter+2,c
 10077  001592  502E               	movf	??_calculateSetFilterMask+28,w,c
 10078  001594  6E41               	movwf	calculateSetFilterMask@rowfilter+3,c
 10079                           
 10080                           ;main.c: 2640: if ( 0 == i ) filter = rowfilter;
 10081  001596  6643               	tstfsz	calculateSetFilterMask@i,c
 10082  001598  D008               	goto	l8469
 10083  00159A  C03E  F03A         	movff	calculateSetFilterMask@rowfilter,calculateSetFilterMask@filter
 10084  00159E  C03F  F03B         	movff	calculateSetFilterMask@rowfilter+1,calculateSetFilterMask@filter+1
 10085  0015A2  C040  F03C         	movff	calculateSetFilterMask@rowfilter+2,calculateSetFilterMask@filter+2
 10086  0015A6  C041  F03D         	movff	calculateSetFilterMask@rowfilter+3,calculateSetFilterMask@filter+3
 10087  0015AA                     l8469:
 10088                           
 10089                           ;main.c: 2644: mask &= rowmask;
 10090  0015AA  5031               	movf	calculateSetFilterMask@rowmask,w,c
 10091  0015AC  1636               	andwf	calculateSetFilterMask@mask,f,c
 10092  0015AE  5032               	movf	calculateSetFilterMask@rowmask+1,w,c
 10093  0015B0  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10094  0015B2  5033               	movf	calculateSetFilterMask@rowmask+2,w,c
 10095  0015B4  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10096  0015B6  5034               	movf	calculateSetFilterMask@rowmask+3,w,c
 10097  0015B8  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10098                           
 10099                           ;main.c: 2649: for ( j=0; j<32; j++ ) {
 10100  0015BA  6A42               	clrf	calculateSetFilterMask@j,c
 10101  0015BC                     l8477:
 10102                           
 10103                           ;main.c: 2651: if ( ( ( filter >> j ) & 1 ) != ( ( rowfilter >> j ) & 1 ) ) {
 10104  0015BC  5042               	movf	calculateSetFilterMask@j,w,c
 10105  0015BE  C03E  F012         	movff	calculateSetFilterMask@rowfilter,??_calculateSetFilterMask
 10106  0015C2  C03F  F013         	movff	calculateSetFilterMask@rowfilter+1,??_calculateSetFilterMask+1
 10107  0015C6  C040  F014         	movff	calculateSetFilterMask@rowfilter+2,??_calculateSetFilterMask+2
 10108  0015CA  C041  F015         	movff	calculateSetFilterMask@rowfilter+3,??_calculateSetFilterMask+3
 10109  0015CE  2AE8               	incf	wreg,f,c
 10110  0015D0  D005               	goto	u9830
 10111  0015D2                     u9835:
 10112  0015D2  90D8               	bcf	status,0,c
 10113  0015D4  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10114  0015D6  3214               	rrcf	??_calculateSetFilterMask+2,f,c
 10115  0015D8  3213               	rrcf	??_calculateSetFilterMask+1,f,c
 10116  0015DA  3212               	rrcf	??_calculateSetFilterMask,f,c
 10117  0015DC                     u9830:
 10118  0015DC  2EE8               	decfsz	wreg,f,c
 10119  0015DE  D7F9               	goto	u9835
 10120  0015E0  0E01               	movlw	1
 10121  0015E2  1612               	andwf	??_calculateSetFilterMask,f,c
 10122  0015E4  5042               	movf	calculateSetFilterMask@j,w,c
 10123  0015E6  C03A  F016         	movff	calculateSetFilterMask@filter,??_calculateSetFilterMask+4
 10124  0015EA  C03B  F017         	movff	calculateSetFilterMask@filter+1,??_calculateSetFilterMask+5
 10125  0015EE  C03C  F018         	movff	calculateSetFilterMask@filter+2,??_calculateSetFilterMask+6
 10126  0015F2  C03D  F019         	movff	calculateSetFilterMask@filter+3,??_calculateSetFilterMask+7
 10127  0015F6  2AE8               	incf	wreg,f,c
 10128  0015F8  D005               	goto	u9840
 10129  0015FA                     u9845:
 10130  0015FA  90D8               	bcf	status,0,c
 10131  0015FC  3219               	rrcf	??_calculateSetFilterMask+7,f,c
 10132  0015FE  3218               	rrcf	??_calculateSetFilterMask+6,f,c
 10133  001600  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10134  001602  3216               	rrcf	??_calculateSetFilterMask+4,f,c
 10135  001604                     u9840:
 10136  001604  2EE8               	decfsz	wreg,f,c
 10137  001606  D7F9               	goto	u9845
 10138  001608  5016               	movf	??_calculateSetFilterMask+4,w,c
 10139  00160A  0B01               	andlw	1
 10140  00160C  1812               	xorwf	??_calculateSetFilterMask,w,c
 10141  00160E  E010               	bz	l8481
 10142                           
 10143                           ;main.c: 2652: mask &= ~(1<<j);
 10144  001610  C042  F012         	movff	calculateSetFilterMask@j,??_calculateSetFilterMask
 10145  001614  D8FD               	call	PL80	;call to abstracted procedure
 10146  001616  D001               	goto	u9864
 10147  001618                     u9865:
 10148  001618  D900               	call	PL82	;call to abstracted procedure
 10149  00161A                     u9864:
 10150  00161A  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10151  00161C  D7FD               	goto	u9865
 10152  00161E  1C13               	comf	??_calculateSetFilterMask+1,w,c
 10153  001620  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10154  001622  1C14               	comf	??_calculateSetFilterMask+2,w,c
 10155  001624  6E16               	movwf	(??_calculateSetFilterMask+4)& (0+255),c
 10156  001626  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10157  001628  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10158  00162A  0617               	decf	(??_calculateSetFilterMask+5)& (0+255),f,c
 10159  00162C  5017               	movf	(??_calculateSetFilterMask+5)& (0+255),w,c
 10160  00162E  D8E6               	call	PL46	;call to abstracted procedure
 10161  001630                     l8481:
 10162  001630  2A42               	incf	calculateSetFilterMask@j,f,c
 10163  001632  0E1F               	movlw	31
 10164  001634  6442               	cpfsgt	calculateSetFilterMask@j,c
 10165  001636  D7C2               	goto	l8477
 10166                           
 10167                           ;main.c: 2653: }
 10168                           ;main.c: 2654: }
 10169                           ;main.c: 2660: filter &= rowfilter;
 10170  001638  503E               	movf	calculateSetFilterMask@rowfilter,w,c
 10171  00163A  163A               	andwf	calculateSetFilterMask@filter,f,c
 10172  00163C  503F               	movf	calculateSetFilterMask@rowfilter+1,w,c
 10173  00163E  163B               	andwf	calculateSetFilterMask@filter+1,f,c
 10174  001640  5040               	movf	calculateSetFilterMask@rowfilter+2,w,c
 10175  001642  163C               	andwf	calculateSetFilterMask@filter+2,f,c
 10176  001644  5041               	movf	calculateSetFilterMask@rowfilter+3,w,c
 10177  001646  163D               	andwf	calculateSetFilterMask@filter+3,f,c
 10178                           
 10179                           ;main.c: 2668: }
 10180                           ;main.c: 2670: if (i) {
 10181                           
 10182                           ;main.c: 2663: if ( !readEEPROM( 0x43 + 8*i + 1 ) & 0x40 ) {
 10183  001648  5043               	movf	calculateSetFilterMask@i,w,c
 10184  00164A  E042               	bz	l8501
 10185                           
 10186                           ;main.c: 2673: for (j = 0; j < 8; j++) {
 10187  00164C  6A42               	clrf	calculateSetFilterMask@j,c
 10188  00164E                     l8495:
 10189                           
 10190                           ;main.c: 2674: if ((lastOID >> i & 1)
 10191                           ;main.c: 2675: != (readEEPROM(0x43 + 8 * i) >> i & 1)) {
 10192  00164E  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10193  001652  5043               	movf	calculateSetFilterMask@i,w,c
 10194  001654  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10195  001656  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10196  001658  90D8               	bcf	status,0,c
 10197  00165A  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10198  00165C  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10199  00165E  90D8               	bcf	status,0,c
 10200  001660  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10201  001662  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10202  001664  90D8               	bcf	status,0,c
 10203  001666  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10204  001668  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10205  00166A  0E43               	movlw	67
 10206  00166C  2413               	addwf	??_calculateSetFilterMask+1,w,c
 10207  00166E  6E08               	movwf	?_readEEPROM,c
 10208  001670  0E00               	movlw	0
 10209  001672  2014               	addwfc	??_calculateSetFilterMask+2,w,c
 10210  001674  6E09               	movwf	?_readEEPROM+1,c
 10211  001676  EC6C  F01D         	call	_readEEPROM	;wreg free
 10212  00167A  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
 10213  00167C  2A12               	incf	??_calculateSetFilterMask,f,c
 10214  00167E  D002               	goto	u9894
 10215  001680                     u9895:
 10216  001680  90D8               	bcf	status,0,c
 10217  001682  3215               	rrcf	??_calculateSetFilterMask+3,f,c
 10218  001684                     u9894:
 10219  001684  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10220  001686  D7FC               	goto	u9895
 10221  001688  0E01               	movlw	1
 10222  00168A  1615               	andwf	??_calculateSetFilterMask+3,f,c
 10223  00168C  C043  F016         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask+4
 10224  001690  C035  F017         	movff	calculateSetFilterMask@lastOID,??_calculateSetFilterMask+5
 10225  001694  2A16               	incf	??_calculateSetFilterMask+4,f,c
 10226  001696  D002               	goto	u9904
 10227  001698                     u9905:
 10228  001698  90D8               	bcf	status,0,c
 10229  00169A  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10230  00169C                     u9904:
 10231  00169C  2E16               	decfsz	??_calculateSetFilterMask+4,f,c
 10232  00169E  D7FC               	goto	u9905
 10233  0016A0  5017               	movf	??_calculateSetFilterMask+5,w,c
 10234  0016A2  0B01               	andlw	1
 10235  0016A4  1815               	xorwf	??_calculateSetFilterMask+3,w,c
 10236  0016A6  E010               	bz	l8499
 10237                           
 10238                           ;main.c: 2676: mask &= (1 << i);
 10239  0016A8  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10240  0016AC  D8B1               	call	PL80	;call to abstracted procedure
 10241  0016AE  D001               	goto	u9924
 10242  0016B0                     u9925:
 10243  0016B0  D8B4               	call	PL82	;call to abstracted procedure
 10244  0016B2                     u9924:
 10245  0016B2  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10246  0016B4  D7FD               	goto	u9925
 10247  0016B6  C013  F015         	movff	??_calculateSetFilterMask+1,??_calculateSetFilterMask+3
 10248  0016BA  C014  F016         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+4
 10249  0016BE  0E00               	movlw	0
 10250  0016C0  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10251  0016C2  0EFF               	movlw	255
 10252  0016C4  6E17               	movwf	(??_calculateSetFilterMask+5)& (0+255),c
 10253  0016C6  D89A               	call	PL46	;call to abstracted procedure
 10254  0016C8                     l8499:
 10255  0016C8  2A42               	incf	calculateSetFilterMask@j,f,c
 10256  0016CA  0E07               	movlw	7
 10257  0016CC  6442               	cpfsgt	calculateSetFilterMask@j,c
 10258  0016CE  D7BF               	goto	l8495
 10259  0016D0                     l8501:
 10260                           
 10261                           ;main.c: 2677: }
 10262                           ;main.c: 2678: }
 10263                           ;main.c: 2680: lastOID = readEEPROM(0x43 + 8 * i);
 10264  0016D0  5043               	movf	calculateSetFilterMask@i,w,c
 10265  0016D2  D856               	call	PL10	;call to abstracted procedure
 10266  0016D4  0E43               	movlw	67
 10267  0016D6  2412               	addwf	??_calculateSetFilterMask,w,c
 10268  0016D8  6E08               	movwf	?_readEEPROM,c
 10269  0016DA  0E00               	movlw	0
 10270  0016DC  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10271  0016DE  6E09               	movwf	?_readEEPROM+1,c
 10272  0016E0  EC6C  F01D         	call	_readEEPROM	;wreg free
 10273  0016E4  6E35               	movwf	calculateSetFilterMask@lastOID,c
 10274  0016E6                     l8505:
 10275  0016E6  2A43               	incf	calculateSetFilterMask@i,f,c
 10276  0016E8  0E06               	movlw	6
 10277  0016EA  6443               	cpfsgt	calculateSetFilterMask@i,c
 10278  0016EC  D6D5               	goto	l8461
 10279                           
 10280                           ;main.c: 2686: }
 10281                           ;main.c: 2688: }
 10282                           ;main.c: 2689: }
 10283                           ;main.c: 2692: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 10284  0016EE  0E80               	movlw	128
 10285  0016F0  EC1E  F01D         	call	_ECANSetOperationMode
 10286                           
 10287                           ;main.c: 2695: _CANIDToRegs((BYTE*)&RXM1SIDH, mask, 1);
 10288  0016F4  010F               	movlb	15	; () banked
 10289  0016F6  0E0F               	movlw	15	;volatile
 10290  0016F8  6E09               	movwf	?__CANIDToRegs+1,c
 10291  0016FA  0E1C               	movlw	28	;volatile
 10292  0016FC  6E08               	movwf	?__CANIDToRegs,c
 10293  0016FE  C036  F00A         	movff	calculateSetFilterMask@mask,?__CANIDToRegs+2
 10294  001702  C037  F00B         	movff	calculateSetFilterMask@mask+1,?__CANIDToRegs+3
 10295  001706  C038  F00C         	movff	calculateSetFilterMask@mask+2,?__CANIDToRegs+4
 10296  00170A  C039  F00D         	movff	calculateSetFilterMask@mask+3,?__CANIDToRegs+5
 10297  00170E  0E01               	movlw	1
 10298  001710  6E0E               	movwf	?__CANIDToRegs+6,c
 10299  001712  ECF8  F015         	call	__CANIDToRegs	;wreg free
 10300                           
 10301                           ;main.c: 2698: RXF1EN = 1; _CANIDToRegs((BYTE*)&RXF1SIDH, filter, 1);;
 10302  001716  010D               	movlb	13	; () banked
 10303  001718  83D4               	bsf	212,1,b	;volatile
 10304                           
 10305                           ; BSR set to: 13
 10306  00171A  010F               	movlb	15	; () banked
 10307  00171C  0E0F               	movlw	15	;volatile
 10308  00171E  6E09               	movwf	?__CANIDToRegs+1,c
 10309  001720  0E04               	movlw	4	;volatile
 10310  001722  6E08               	movwf	?__CANIDToRegs,c
 10311  001724  C03A  F00A         	movff	calculateSetFilterMask@filter,?__CANIDToRegs+2
 10312  001728  C03B  F00B         	movff	calculateSetFilterMask@filter+1,?__CANIDToRegs+3
 10313  00172C  C03C  F00C         	movff	calculateSetFilterMask@filter+2,?__CANIDToRegs+4
 10314  001730  C03D  F00D         	movff	calculateSetFilterMask@filter+3,?__CANIDToRegs+5
 10315  001734  0E01               	movlw	1
 10316  001736  6E0E               	movwf	?__CANIDToRegs+6,c
 10317  001738  ECF8  F015         	call	__CANIDToRegs	;wreg free
 10318                           
 10319                           ;main.c: 2701: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
 10320  00173C  0E00               	movlw	0
 10321  00173E  EF1E  F01D         	goto	_ECANSetOperationMode
 10322  001742                     __end_of_calculateSetFilterMask:
 10323                           	opt stack 0
 10324  001742                     PL8:
 10325                           	opt stack 24
 10326  001742  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
 10327  001744  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 10328  001748  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 10329  00174A  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 10330  00174C  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 10331  00174E  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 10332  001752  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 10333  001756  6A1D               	clrf	??_calculateSetFilterMask+11,c
 10334  001758  6A1C               	clrf	??_calculateSetFilterMask+10,c
 10335  00175A  5043               	movf	calculateSetFilterMask@i,w,c
 10336  00175C  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 10337  00175E  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 10338  001760  90D8               	bcf	status,0,c
 10339  001762  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10340  001764  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10341  001766  90D8               	bcf	status,0,c
 10342  001768  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10343  00176A  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10344  00176C  90D8               	bcf	status,0,c
 10345  00176E  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10346  001770  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10347  001772  0E44               	movlw	68
 10348  001774  2420               	addwf	??_calculateSetFilterMask+14,w,c
 10349  001776  6E08               	movwf	?_readEEPROM,c
 10350  001778  0E00               	movlw	0
 10351  00177A  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 10352  00177C  6E09               	movwf	?_readEEPROM+1,c
 10353  00177E  0012               	return	
 10354  001780                     __end_ofPL8:
 10355                           	opt stack 0
 10356  001780                     PL10:
 10357                           	opt stack 24
 10358  001780  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10359  001782  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10360  001784  90D8               	bcf	status,0,c
 10361  001786  3612               	rlcf	??_calculateSetFilterMask,f,c
 10362  001788  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10363  00178A  90D8               	bcf	status,0,c
 10364  00178C  3612               	rlcf	??_calculateSetFilterMask,f,c
 10365  00178E  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10366  001790  90D8               	bcf	status,0,c
 10367  001792  3612               	rlcf	??_calculateSetFilterMask,f,c
 10368  001794  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10369  001796  0012               	return	
 10370  001798                     __end_ofPL10:
 10371                           	opt stack 0
 10372  001798                     PL12:
 10373                           	opt stack 24
 10374  001798  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 10375  00179A  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
 10376  00179E  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
 10377  0017A0  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10378  0017A2  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
 10379  0017A4  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
 10380  0017A8  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
 10381  0017AC  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
 10382  0017B0  6A15               	clrf	??_calculateSetFilterMask+3,c
 10383  0017B2  5043               	movf	calculateSetFilterMask@i,w,c
 10384  0017B4  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
 10385  0017B6  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
 10386  0017B8  90D8               	bcf	status,0,c
 10387  0017BA  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10388  0017BC  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10389  0017BE  90D8               	bcf	status,0,c
 10390  0017C0  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10391  0017C2  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10392  0017C4  90D8               	bcf	status,0,c
 10393  0017C6  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10394  0017C8  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10395  0017CA  0012               	return	
 10396  0017CC                     __end_ofPL12:
 10397                           	opt stack 0
 10398  0017CC                     PL14:
 10399                           	opt stack 24
 10400  0017CC  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 10401  0017CE  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 10402  0017D0  501D               	movf	??_calculateSetFilterMask+11,w,c
 10403  0017D2  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 10404  0017D4  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 10405  0017D6  501E               	movf	??_calculateSetFilterMask+12,w,c
 10406  0017D8  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 10407  0017DA  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 10408  0017DC  501F               	movf	??_calculateSetFilterMask+13,w,c
 10409  0017DE  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 10410  0017E0  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 10411  0017E2  5015               	movf	??_calculateSetFilterMask+3,w,c
 10412  0017E4  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 10413  0017E6  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 10414  0017E8  5016               	movf	??_calculateSetFilterMask+4,w,c
 10415  0017EA  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 10416  0017EC  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 10417  0017EE  5017               	movf	??_calculateSetFilterMask+5,w,c
 10418  0017F0  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 10419  0017F2  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 10420  0017F4  5018               	movf	??_calculateSetFilterMask+6,w,c
 10421  0017F6  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 10422  0017F8  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 10423  0017FA  0012               	return	
 10424  0017FC                     __end_ofPL14:
 10425                           	opt stack 0
 10426  0017FC                     PL46:
 10427                           	opt stack 24
 10428  0017FC  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10429  0017FE  5015               	movf	??_calculateSetFilterMask+3,w,c
 10430  001800  1636               	andwf	calculateSetFilterMask@mask,f,c
 10431  001802  5016               	movf	??_calculateSetFilterMask+4,w,c
 10432  001804  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10433  001806  5017               	movf	??_calculateSetFilterMask+5,w,c
 10434  001808  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10435  00180A  5018               	movf	??_calculateSetFilterMask+6,w,c
 10436  00180C  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10437  00180E  0012               	return	
 10438  001810                     __end_ofPL46:
 10439                           	opt stack 0
 10440  001810                     PL80:
 10441                           	opt stack 24
 10442  001810  0E01               	movlw	1
 10443  001812  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10444  001814  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10445  001816  2A12               	incf	??_calculateSetFilterMask,f,c
 10446  001818  0012               	return	
 10447  00181A                     __end_ofPL80:
 10448                           	opt stack 0
 10449  00181A                     PL82:
 10450                           	opt stack 24
 10451  00181A  90D8               	bcf	status,0,c
 10452  00181C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10453  00181E  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10454  001820  0012               	return	
 10455  001822                     __end_ofPL82:
 10456                           	opt stack 0
 10457                           tblptru	equ	0xFF8
 10458                           tblptrh	equ	0xFF7
 10459                           tblptrl	equ	0xFF6
 10460                           tablat	equ	0xFF5
 10461                           prodh	equ	0xFF4
 10462                           prodl	equ	0xFF3
 10463                           intcon	equ	0xFF2
 10464                           postinc0	equ	0xFEE
 10465                           wreg	equ	0xFE8
 10466                           indf1	equ	0xFE7
 10467                           fsr1h	equ	0xFE2
 10468                           fsr1l	equ	0xFE1
 10469                           indf2	equ	0xFDF
 10470                           postinc2	equ	0xFDE
 10471                           postdec2	equ	0xFDD
 10472                           plusw2	equ	0xFDB
 10473                           fsr2h	equ	0xFDA
 10474                           fsr2l	equ	0xFD9
 10475                           status	equ	0xFD8
 10476                           
 10477 ;; *************** function _SendInformationEvent *****************
 10478 ;; Defined at:
 10479 ;;		line 1564 in file "../main.c"
 10480 ;; Parameters:    Size  Location     Type
 10481 ;;  idx             1    wreg     unsigned char 
 10482 ;;  eventClass      1   20[BANK0 ] unsigned char 
 10483 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
 10484 ;; Auto vars:     Size  Location     Type
 10485 ;;  idx             1   79[COMRAM] unsigned char 
 10486 ;;  data            3   76[COMRAM] unsigned char [3]
 10487 ;; Return value:  Size  Location     Type
 10488 ;;		None               void
 10489 ;; Registers used:
 10490 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 10491 ;; Tracked objects:
 10492 ;;		On entry : F/0
 10493 ;;		On exit  : F/0
 10494 ;;		Unchanged: 0/0
 10495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10496 ;;      Params:         0       2       0       0       0       0       0
 10497 ;;      Locals:         4       0       0       0       0       0       0
 10498 ;;      Temps:          2       0       0       0       0       0       0
 10499 ;;      Totals:         6       2       0       0       0       0       0
 10500 ;;Total ram usage:        8 bytes
 10501 ;; Hardware stack levels used:    1
 10502 ;; Hardware stack levels required when called:    6
 10503 ;; This function calls:
 10504 ;;		_readEEPROM
 10505 ;;		_sendVSCPFrame
 10506 ;; This function is called by:
 10507 ;;		_doApplicationOneSecondWork
 10508 ;;		_vscp_writeAppReg
 10509 ;;		_doActionOn
 10510 ;;		_doActionOff
 10511 ;;		_doActionStatus
 10512 ;;		_doActionToggle
 10513 ;; This function uses a non-reentrant model
 10514 ;;
 10515                           
 10516                           	psect	text28
 10517  0035AA                     __ptext28:
 10518                           	opt stack 0
 10519  0035AA                     _SendInformationEvent:
 10520                           	opt stack 23
 10521                           
 10522                           ;incstack = 0
 10523                           ;incstack = 0
 10524                           ;SendInformationEvent@idx stored from wreg
 10525  0035AA  CFE8 F050          	movff	wreg,SendInformationEvent@idx
 10526                           
 10527                           ; BSR set to: 0
 10528                           ;main.c: 1565: uint8_t data[3];
 10529                           ;main.c: 1578: data[ 0 ] = idx;
 10530  0035AE  C050  F04D         	movff	SendInformationEvent@idx,SendInformationEvent@data
 10531                           
 10532                           ; BSR set to: 0
 10533                           ;main.c: 1579: data[ 1 ] = readEEPROM( 0x43 + 50 + 2*idx );
 10534  0035B2  90D8               	bcf	status,0,c
 10535  0035B4  3450               	rlcf	SendInformationEvent@idx,w,c
 10536  0035B6  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10537  0035B8  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10538  0035BA  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10539  0035BC  0E75               	movlw	117
 10540  0035BE  244B               	addwf	??_SendInformationEvent,w,c
 10541  0035C0  6E08               	movwf	?_readEEPROM,c
 10542  0035C2  0E00               	movlw	0
 10543  0035C4  204C               	addwfc	??_SendInformationEvent+1,w,c
 10544  0035C6  6E09               	movwf	?_readEEPROM+1,c
 10545  0035C8  EC6C  F01D         	call	_readEEPROM	;wreg free
 10546  0035CC  6E4E               	movwf	SendInformationEvent@data+1,c
 10547                           
 10548                           ;main.c: 1580: data[ 2 ] = readEEPROM( 0x43 + 51 + 2*idx );
 10549  0035CE  90D8               	bcf	status,0,c
 10550  0035D0  3450               	rlcf	SendInformationEvent@idx,w,c
 10551  0035D2  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10552  0035D4  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10553  0035D6  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10554  0035D8  0E76               	movlw	118
 10555  0035DA  244B               	addwf	??_SendInformationEvent,w,c
 10556  0035DC  6E08               	movwf	?_readEEPROM,c
 10557  0035DE  0E00               	movlw	0
 10558  0035E0  204C               	addwfc	??_SendInformationEvent+1,w,c
 10559  0035E2  6E09               	movwf	?_readEEPROM+1,c
 10560  0035E4  EC6C  F01D         	call	_readEEPROM	;wreg free
 10561  0035E8  6E4F               	movwf	SendInformationEvent@data+2,c
 10562                           
 10563                           ;main.c: 1581: sendVSCPFrame( eventClass,
 10564                           ;main.c: 1582: eventTypeId,
 10565                           ;main.c: 1583: vscp_nickname,
 10566                           ;main.c: 1584: 0x03,
 10567                           ;main.c: 1585: 3,
 10568                           ;main.c: 1586: data );
 10569  0035EA  0100               	movlb	0	; () banked
 10570  0035EC  C0C5  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
 10571  0035F0  6A40               	clrf	?_sendVSCPFrame+1,c
 10572  0035F2  C0C6  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
 10573  0035F6  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 10574  0035FA  0E03               	movlw	3
 10575  0035FC  6E43               	movwf	?_sendVSCPFrame+4,c
 10576  0035FE  6E44               	movwf	?_sendVSCPFrame+5,c
 10577  003600  0E4D               	movlw	low SendInformationEvent@data
 10578  003602  6E45               	movwf	?_sendVSCPFrame+6,c
 10579  003604  0E00               	movlw	high SendInformationEvent@data
 10580  003606  6E46               	movwf	?_sendVSCPFrame+7,c
 10581  003608  0E0F               	movlw	15
 10582  00360A  6E46               	movwf	?_sendVSCPFrame+7,c
 10583  00360C  0E5F               	movlw	__accesstop+-1
 10584  00360E  6445               	cpfsgt	?_sendVSCPFrame+6,c
 10585  003610  6A46               	clrf	?_sendVSCPFrame+7,c
 10586  003612  EF27  F019         	goto	_sendVSCPFrame	;wreg free
 10587  003616                     __end_of_SendInformationEvent:
 10588                           	opt stack 0
 10589                           tblptru	equ	0xFF8
 10590                           tblptrh	equ	0xFF7
 10591                           tblptrl	equ	0xFF6
 10592                           tablat	equ	0xFF5
 10593                           prodh	equ	0xFF4
 10594                           prodl	equ	0xFF3
 10595                           intcon	equ	0xFF2
 10596                           postinc0	equ	0xFEE
 10597                           wreg	equ	0xFE8
 10598                           indf1	equ	0xFE7
 10599                           fsr1h	equ	0xFE2
 10600                           fsr1l	equ	0xFE1
 10601                           indf2	equ	0xFDF
 10602                           postinc2	equ	0xFDE
 10603                           postdec2	equ	0xFDD
 10604                           plusw2	equ	0xFDB
 10605                           fsr2h	equ	0xFDA
 10606                           fsr2l	equ	0xFD9
 10607                           status	equ	0xFD8
 10608                           
 10609 ;; *************** function _vscp_readRegister *****************
 10610 ;; Defined at:
 10611 ;;		line 553 in file "../../vscp_firmware/common/vscp_firmware.c"
 10612 ;; Parameters:    Size  Location     Type
 10613 ;;  reg             1    wreg     unsigned char 
 10614 ;; Auto vars:     Size  Location     Type
 10615 ;;  reg             1   13[COMRAM] unsigned char 
 10616 ;; Return value:  Size  Location     Type
 10617 ;;                  1    wreg      unsigned char 
 10618 ;; Registers used:
 10619 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10620 ;; Tracked objects:
 10621 ;;		On entry : F/0
 10622 ;;		On exit  : 0/0
 10623 ;;		Unchanged: 0/0
 10624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10625 ;;      Params:         0       0       0       0       0       0       0
 10626 ;;      Locals:         1       0       0       0       0       0       0
 10627 ;;      Temps:          0       0       0       0       0       0       0
 10628 ;;      Totals:         1       0       0       0       0       0       0
 10629 ;;Total ram usage:        1 bytes
 10630 ;; Hardware stack levels used:    1
 10631 ;; Hardware stack levels required when called:    5
 10632 ;; This function calls:
 10633 ;;		_vscp_readAppReg
 10634 ;;		_vscp_readStdReg
 10635 ;; This function is called by:
 10636 ;;		_vscp_handleProtocolEvent
 10637 ;; This function uses a non-reentrant model
 10638 ;;
 10639                           
 10640                           	psect	text29
 10641  0039DA                     __ptext29:
 10642                           	opt stack 0
 10643  0039DA                     _vscp_readRegister:
 10644                           	opt stack 24
 10645                           
 10646                           ; BSR set to: 0
 10647                           ;incstack = 0
 10648                           ;incstack = 0
 10649                           ;vscp_readRegister@reg stored from wreg
 10650  0039DA  CFE8 F00E          	movff	wreg,vscp_readRegister@reg
 10651                           
 10652                           ; BSR set to: 0
 10653                           ;vscp_firmware.c: 554: if (reg >= 0x80) {
 10654  0039DE  0E7F               	movlw	127
 10655  0039E0  640E               	cpfsgt	vscp_readRegister@reg,c
 10656  0039E2  D004               	goto	l8981
 10657                           
 10658                           ; BSR set to: 0
 10659                           ;vscp_firmware.c: 555: return vscp_readStdReg(reg);
 10660  0039E4  500E               	movf	vscp_readRegister@reg,w,c
 10661  0039E6  EC8B  F017         	call	_vscp_readStdReg
 10662  0039EA  D003               	goto	l1108
 10663  0039EC                     l8981:
 10664                           
 10665                           ; BSR set to: 0
 10666                           ;vscp_firmware.c: 557: return vscp_readAppReg(reg);
 10667  0039EC  500E               	movf	vscp_readRegister@reg,w,c
 10668  0039EE  EC82  F019         	call	_vscp_readAppReg
 10669  0039F2                     l1108:
 10670  0039F2  0012               	return	
 10671  0039F4                     __end_of_vscp_readRegister:
 10672                           	opt stack 0
 10673                           tblptru	equ	0xFF8
 10674                           tblptrh	equ	0xFF7
 10675                           tblptrl	equ	0xFF6
 10676                           tablat	equ	0xFF5
 10677                           prodh	equ	0xFF4
 10678                           prodl	equ	0xFF3
 10679                           intcon	equ	0xFF2
 10680                           postinc0	equ	0xFEE
 10681                           wreg	equ	0xFE8
 10682                           indf1	equ	0xFE7
 10683                           fsr1h	equ	0xFE2
 10684                           fsr1l	equ	0xFE1
 10685                           indf2	equ	0xFDF
 10686                           postinc2	equ	0xFDE
 10687                           postdec2	equ	0xFDD
 10688                           plusw2	equ	0xFDB
 10689                           fsr2h	equ	0xFDA
 10690                           fsr2l	equ	0xFD9
 10691                           status	equ	0xFD8
 10692                           
 10693 ;; *************** function _vscp_readStdReg *****************
 10694 ;; Defined at:
 10695 ;;		line 566 in file "../../vscp_firmware/common/vscp_firmware.c"
 10696 ;; Parameters:    Size  Location     Type
 10697 ;;  reg             1    wreg     unsigned char 
 10698 ;; Auto vars:     Size  Location     Type
 10699 ;;  reg             1   12[COMRAM] unsigned char 
 10700 ;;  rv              1   11[COMRAM] unsigned char 
 10701 ;; Return value:  Size  Location     Type
 10702 ;;                  1    wreg      unsigned char 
 10703 ;; Registers used:
 10704 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10705 ;; Tracked objects:
 10706 ;;		On entry : F/0
 10707 ;;		On exit  : 0/0
 10708 ;;		Unchanged: 0/0
 10709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10710 ;;      Params:         0       0       0       0       0       0       0
 10711 ;;      Locals:         2       0       0       0       0       0       0
 10712 ;;      Temps:          0       0       0       0       0       0       0
 10713 ;;      Totals:         2       0       0       0       0       0       0
 10714 ;;Total ram usage:        2 bytes
 10715 ;; Hardware stack levels used:    1
 10716 ;; Hardware stack levels required when called:    4
 10717 ;; This function calls:
 10718 ;;		_vscp_getMajorVersion
 10719 ;;		_vscp_getMinorVersion
 10720 ;;		_vscp_getSubMinorVersion
 10721 ;;		_vscp_getGUID
 10722 ;;		_vscp_getMDF_URL
 10723 ;;		_vscp_getUserID
 10724 ;;		_vscp_getManufacturerId
 10725 ;;		_vscp_getBootLoaderAlgorithm
 10726 ;;		_vscp_getBufferSize
 10727 ;;		_vscp_getRegisterPagesUsed
 10728 ;; This function is called by:
 10729 ;;		_vscp_readRegister
 10730 ;;		_vscp_handleProtocolEvent
 10731 ;; This function uses a non-reentrant model
 10732 ;;
 10733                           
 10734                           	psect	text30
 10735  002F16                     __ptext30:
 10736                           	opt stack 0
 10737  002F16                     _vscp_readStdReg:
 10738                           	opt stack 25
 10739                           
 10740                           ;incstack = 0
 10741                           ;incstack = 0
 10742                           ;vscp_readStdReg@reg stored from wreg
 10743  002F16  CFE8 F00D          	movff	wreg,vscp_readStdReg@reg
 10744                           
 10745                           ; BSR set to: 0
 10746                           ;vscp_firmware.c: 569: if (0x80 == reg) {
 10747                           
 10748                           ; BSR set to: 0
 10749  002F1A  500D               	movf	vscp_readStdReg@reg,w,c
 10750  002F1C  0A80               	xorlw	128
 10751  002F1E  E104               	bnz	l8991
 10752                           
 10753                           ; BSR set to: 0
 10754                           ;vscp_firmware.c: 572: rv = vscp_alarmstatus;
 10755  002F20  C08C  F00C         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 10756                           
 10757                           ;vscp_firmware.c: 573: vscp_alarmstatus = 0x00;
 10758  002F24  6B8C               	clrf	_vscp_alarmstatus& (0+255),b
 10759                           
 10760                           ;vscp_firmware.c: 575: }
 10761  002F26  D067               	goto	l9057
 10762  002F28                     l8991:
 10763                           
 10764                           ; BSR set to: 0
 10765                           ;vscp_firmware.c: 576: else if (0x81 == reg) {
 10766  002F28  500D               	movf	vscp_readStdReg@reg,w,c
 10767  002F2A  0A81               	xorlw	129
 10768  002F2C  E102               	bnz	l8995
 10769                           
 10770                           ; BSR set to: 0
 10771                           ;vscp_firmware.c: 579: rv = 1;
 10772  002F2E  0E01               	movlw	1
 10773  002F30  D061               	goto	L27
 10774  002F32                     l8995:
 10775                           
 10776                           ; BSR set to: 0
 10777                           ;vscp_firmware.c: 582: else if (0x82 == reg) {
 10778  002F32  500D               	movf	vscp_readStdReg@reg,w,c
 10779  002F34  0A82               	xorlw	130
 10780  002F36  E102               	bnz	l8999
 10781                           
 10782                           ; BSR set to: 0
 10783                           ;vscp_firmware.c: 585: rv = 5;
 10784  002F38  0E05               	movlw	5
 10785  002F3A  D05C               	goto	L27
 10786  002F3C                     l8999:
 10787                           
 10788                           ; BSR set to: 0
 10789                           ;vscp_firmware.c: 588: else if (0x83 == reg) {
 10790  002F3C  500D               	movf	vscp_readStdReg@reg,w,c
 10791  002F3E  0A83               	xorlw	131
 10792  002F40  E102               	bnz	l9003
 10793                           
 10794                           ; BSR set to: 0
 10795                           ;vscp_firmware.c: 591: rv = 0;
 10796  002F42  6A0C               	clrf	vscp_readStdReg@rv,c
 10797                           
 10798                           ;vscp_firmware.c: 593: }
 10799  002F44  D058               	goto	l9057
 10800  002F46                     l9003:
 10801                           
 10802                           ; BSR set to: 0
 10803                           ;vscp_firmware.c: 594: else if (0x94 == reg) {
 10804  002F46  500D               	movf	vscp_readStdReg@reg,w,c
 10805  002F48  0A94               	xorlw	148
 10806  002F4A  E103               	bnz	l9007
 10807                           
 10808                           ; BSR set to: 0
 10809                           ;vscp_firmware.c: 597: rv = vscp_getMajorVersion();
 10810  002F4C  ECA8  F01D         	call	_vscp_getMajorVersion	;wreg free
 10811  002F50  D051               	goto	L27
 10812  002F52                     l9007:
 10813                           
 10814                           ; BSR set to: 0
 10815                           ;vscp_firmware.c: 600: else if (0x95 == reg) {
 10816  002F52  500D               	movf	vscp_readStdReg@reg,w,c
 10817  002F54  0A95               	xorlw	149
 10818  002F56  E103               	bnz	l9011
 10819                           
 10820                           ; BSR set to: 0
 10821                           ;vscp_firmware.c: 603: rv = vscp_getMinorVersion();
 10822  002F58  ECA7  F01D         	call	_vscp_getMinorVersion	;wreg free
 10823  002F5C  D04B               	goto	L27
 10824  002F5E                     l9011:
 10825                           
 10826                           ; BSR set to: 0
 10827                           ;vscp_firmware.c: 606: else if (0x96 == reg) {
 10828  002F5E  500D               	movf	vscp_readStdReg@reg,w,c
 10829  002F60  0A96               	xorlw	150
 10830  002F62  E103               	bnz	l9015
 10831                           
 10832                           ; BSR set to: 0
 10833                           ;vscp_firmware.c: 609: rv = vscp_getSubMinorVersion();
 10834  002F64  ECA6  F01D         	call	_vscp_getSubMinorVersion	;wreg free
 10835  002F68  D045               	goto	L27
 10836  002F6A                     l9015:
 10837                           
 10838                           ; BSR set to: 0
 10839                           ;vscp_firmware.c: 612: else if (reg < 0x89) {
 10840  002F6A  0E89               	movlw	137
 10841  002F6C  600D               	cpfslt	vscp_readStdReg@reg,c
 10842  002F6E  D005               	goto	l9019
 10843                           
 10844                           ; BSR set to: 0
 10845                           ;vscp_firmware.c: 615: rv = vscp_getUserID(reg - 0x84);
 10846  002F70  500D               	movf	vscp_readStdReg@reg,w,c
 10847  002F72  0F7C               	addlw	124
 10848  002F74  EC34  F01D         	call	_vscp_getUserID
 10849  002F78  D03D               	goto	L27
 10850  002F7A                     l9019:
 10851                           
 10852                           ; BSR set to: 0
 10853                           ;vscp_firmware.c: 618: else if ((reg > 0x88) &&
 10854                           ;vscp_firmware.c: 619: (reg < 0x91)) {
 10855  002F7A  0E88               	movlw	136
 10856  002F7C  640D               	cpfsgt	vscp_readStdReg@reg,c
 10857  002F7E  D008               	goto	l9025
 10858                           
 10859                           ; BSR set to: 0
 10860  002F80  0E91               	movlw	145
 10861  002F82  600D               	cpfslt	vscp_readStdReg@reg,c
 10862  002F84  D005               	goto	l9025
 10863                           
 10864                           ; BSR set to: 0
 10865                           ;vscp_firmware.c: 622: rv = vscp_getManufacturerId(reg - 0x89);
 10866  002F86  500D               	movf	vscp_readStdReg@reg,w,c
 10867  002F88  0F77               	addlw	119
 10868  002F8A  EC2A  F01D         	call	_vscp_getManufacturerId
 10869  002F8E  D032               	goto	L27
 10870  002F90                     l9025:
 10871                           
 10872                           ; BSR set to: 0
 10873                           ;vscp_firmware.c: 625: else if (0x91 == reg) {
 10874  002F90  500D               	movf	vscp_readStdReg@reg,w,c
 10875  002F92  0A91               	xorlw	145
 10876  002F94  E103               	bnz	l9029
 10877                           
 10878                           ; BSR set to: 0
 10879                           ;vscp_firmware.c: 628: rv = vscp_nickname;
 10880  002F96  C091  F00C         	movff	_vscp_nickname,vscp_readStdReg@rv
 10881                           
 10882                           ;vscp_firmware.c: 630: }
 10883  002F9A  D02D               	goto	l9057
 10884  002F9C                     l9029:
 10885                           
 10886                           ; BSR set to: 0
 10887                           ;vscp_firmware.c: 631: else if (0x93 == reg) {
 10888  002F9C  500D               	movf	vscp_readStdReg@reg,w,c
 10889  002F9E  0A93               	xorlw	147
 10890  002FA0  E103               	bnz	l9033
 10891                           
 10892                           ; BSR set to: 0
 10893                           ;vscp_firmware.c: 634: rv = (vscp_page_select & 0xff);
 10894  002FA2  C052  F00C         	movff	_vscp_page_select,vscp_readStdReg@rv
 10895                           
 10896                           ;vscp_firmware.c: 636: }
 10897  002FA6  D027               	goto	l9057
 10898  002FA8                     l9033:
 10899                           
 10900                           ; BSR set to: 0
 10901                           ;vscp_firmware.c: 638: else if (0x92 == reg) {
 10902  002FA8  500D               	movf	vscp_readStdReg@reg,w,c
 10903  002FAA  0A92               	xorlw	146
 10904  002FAC  E102               	bnz	l9037
 10905                           
 10906                           ; BSR set to: 0
 10907                           ;vscp_firmware.c: 641: rv = (vscp_page_select >> 8) & 0xff;
 10908  002FAE  5053               	movf	_vscp_page_select+1,w,c
 10909  002FB0  D021               	goto	L27
 10910  002FB2                     l9037:
 10911                           
 10912                           ; BSR set to: 0
 10913                           ;vscp_firmware.c: 644: else if (0x97 == reg) {
 10914  002FB2  500D               	movf	vscp_readStdReg@reg,w,c
 10915  002FB4  0A97               	xorlw	151
 10916  002FB6  E103               	bnz	l9041
 10917                           
 10918                           ; BSR set to: 0
 10919                           ;vscp_firmware.c: 646: rv = vscp_getBootLoaderAlgorithm();
 10920  002FB8  ECA5  F01D         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 10921  002FBC  D01B               	goto	L27
 10922  002FBE                     l9041:
 10923                           
 10924                           ; BSR set to: 0
 10925                           ;vscp_firmware.c: 648: else if (0x98 == reg) {
 10926  002FBE  500D               	movf	vscp_readStdReg@reg,w,c
 10927  002FC0  0A98               	xorlw	152
 10928  002FC2  E103               	bnz	l9045
 10929                           
 10930                           ; BSR set to: 0
 10931                           ;vscp_firmware.c: 650: rv = vscp_getBufferSize();
 10932  002FC4  ECA4  F01D         	call	_vscp_getBufferSize	;wreg free
 10933  002FC8  D015               	goto	L27
 10934  002FCA                     l9045:
 10935                           
 10936                           ; BSR set to: 0
 10937                           ;vscp_firmware.c: 652: else if (0x99 == reg) {
 10938  002FCA  500D               	movf	vscp_readStdReg@reg,w,c
 10939  002FCC  0A99               	xorlw	153
 10940  002FCE  E103               	bnz	l9049
 10941                           
 10942                           ; BSR set to: 0
 10943                           ;vscp_firmware.c: 654: rv = vscp_getRegisterPagesUsed();
 10944  002FD0  ECA3  F01D         	call	_vscp_getRegisterPagesUsed	;wreg free
 10945  002FD4  D00F               	goto	L27
 10946  002FD6                     l9049:
 10947                           
 10948                           ; BSR set to: 0
 10949                           ;vscp_firmware.c: 656: else if ((reg > (0xD0 - 1)) &&
 10950                           ;vscp_firmware.c: 657: (reg < 0xE0)) {
 10951  002FD6  0ECF               	movlw	207
 10952  002FD8  640D               	cpfsgt	vscp_readStdReg@reg,c
 10953  002FDA  D008               	goto	l9055
 10954                           
 10955                           ; BSR set to: 0
 10956  002FDC  0EE0               	movlw	224
 10957  002FDE  600D               	cpfslt	vscp_readStdReg@reg,c
 10958  002FE0  D005               	goto	l9055
 10959                           
 10960                           ; BSR set to: 0
 10961                           ;vscp_firmware.c: 660: rv = vscp_getGUID(reg - 0xD0);
 10962  002FE2  500D               	movf	vscp_readStdReg@reg,w,c
 10963  002FE4  0F30               	addlw	48
 10964  002FE6  EC3E  F01D         	call	_vscp_getGUID
 10965  002FEA  D004               	goto	L27
 10966  002FEC                     l9055:
 10967                           
 10968                           ; BSR set to: 0
 10969                           ;vscp_firmware.c: 663: else {
 10970                           ;vscp_firmware.c: 666: rv = vscp_getMDF_URL(reg - 0xE0);
 10971  002FEC  500D               	movf	vscp_readStdReg@reg,w,c
 10972  002FEE  0F20               	addlw	32
 10973  002FF0  EC06  F01D         	call	_vscp_getMDF_URL
 10974  002FF4                     L27:
 10975  002FF4  6E0C               	movwf	vscp_readStdReg@rv,c
 10976  002FF6                     l9057:
 10977                           
 10978                           ;vscp_firmware.c: 668: }
 10979                           ;vscp_firmware.c: 670: return rv;
 10980  002FF6  500C               	movf	vscp_readStdReg@rv,w,c
 10981  002FF8  0012               	return	
 10982  002FFA                     __end_of_vscp_readStdReg:
 10983                           	opt stack 0
 10984                           tblptru	equ	0xFF8
 10985                           tblptrh	equ	0xFF7
 10986                           tblptrl	equ	0xFF6
 10987                           tablat	equ	0xFF5
 10988                           prodh	equ	0xFF4
 10989                           prodl	equ	0xFF3
 10990                           intcon	equ	0xFF2
 10991                           postinc0	equ	0xFEE
 10992                           wreg	equ	0xFE8
 10993                           indf1	equ	0xFE7
 10994                           fsr1h	equ	0xFE2
 10995                           fsr1l	equ	0xFE1
 10996                           indf2	equ	0xFDF
 10997                           postinc2	equ	0xFDE
 10998                           postdec2	equ	0xFDD
 10999                           plusw2	equ	0xFDB
 11000                           fsr2h	equ	0xFDA
 11001                           fsr2l	equ	0xFD9
 11002                           status	equ	0xFD8
 11003                           
 11004 ;; *************** function _vscp_getRegisterPagesUsed *****************
 11005 ;; Defined at:
 11006 ;;		line 2482 in file "../main.c"
 11007 ;; Parameters:    Size  Location     Type
 11008 ;;		None
 11009 ;; Auto vars:     Size  Location     Type
 11010 ;;		None
 11011 ;; Return value:  Size  Location     Type
 11012 ;;                  1    wreg      unsigned char 
 11013 ;; Registers used:
 11014 ;;		wreg
 11015 ;; Tracked objects:
 11016 ;;		On entry : F/0
 11017 ;;		On exit  : F/0
 11018 ;;		Unchanged: F/0
 11019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11020 ;;      Params:         0       0       0       0       0       0       0
 11021 ;;      Locals:         0       0       0       0       0       0       0
 11022 ;;      Temps:          0       0       0       0       0       0       0
 11023 ;;      Totals:         0       0       0       0       0       0       0
 11024 ;;Total ram usage:        0 bytes
 11025 ;; Hardware stack levels used:    1
 11026 ;; Hardware stack levels required when called:    2
 11027 ;; This function calls:
 11028 ;;		Nothing
 11029 ;; This function is called by:
 11030 ;;		_vscp_readStdReg
 11031 ;; This function uses a non-reentrant model
 11032 ;;
 11033                           
 11034                           	psect	text31
 11035  003B46                     __ptext31:
 11036                           	opt stack 0
 11037  003B46                     _vscp_getRegisterPagesUsed:
 11038                           	opt stack 26
 11039                           
 11040                           ; BSR set to: 0
 11041                           
 11042                           ; BSR set to: 0
 11043                           ;main.c: 2483: return 1;
 11044                           
 11045                           ;incstack = 0
 11046                           ;incstack = 0
 11047  003B46  0C01               	retlw	1
 11048  003B48                     __end_of_vscp_getRegisterPagesUsed:
 11049                           	opt stack 0
 11050                           tblptru	equ	0xFF8
 11051                           tblptrh	equ	0xFF7
 11052                           tblptrl	equ	0xFF6
 11053                           tablat	equ	0xFF5
 11054                           prodh	equ	0xFF4
 11055                           prodl	equ	0xFF3
 11056                           intcon	equ	0xFF2
 11057                           postinc0	equ	0xFEE
 11058                           wreg	equ	0xFE8
 11059                           indf1	equ	0xFE7
 11060                           fsr1h	equ	0xFE2
 11061                           fsr1l	equ	0xFE1
 11062                           indf2	equ	0xFDF
 11063                           postinc2	equ	0xFDE
 11064                           postdec2	equ	0xFDD
 11065                           plusw2	equ	0xFDB
 11066                           fsr2h	equ	0xFDA
 11067                           fsr2l	equ	0xFD9
 11068                           status	equ	0xFD8
 11069                           
 11070 ;; *************** function _vscp_getBufferSize *****************
 11071 ;; Defined at:
 11072 ;;		line 2315 in file "../main.c"
 11073 ;; Parameters:    Size  Location     Type
 11074 ;;		None
 11075 ;; Auto vars:     Size  Location     Type
 11076 ;;		None
 11077 ;; Return value:  Size  Location     Type
 11078 ;;                  1    wreg      unsigned char 
 11079 ;; Registers used:
 11080 ;;		wreg
 11081 ;; Tracked objects:
 11082 ;;		On entry : F/0
 11083 ;;		On exit  : F/0
 11084 ;;		Unchanged: F/0
 11085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11086 ;;      Params:         0       0       0       0       0       0       0
 11087 ;;      Locals:         0       0       0       0       0       0       0
 11088 ;;      Temps:          0       0       0       0       0       0       0
 11089 ;;      Totals:         0       0       0       0       0       0       0
 11090 ;;Total ram usage:        0 bytes
 11091 ;; Hardware stack levels used:    1
 11092 ;; Hardware stack levels required when called:    2
 11093 ;; This function calls:
 11094 ;;		Nothing
 11095 ;; This function is called by:
 11096 ;;		_vscp_readStdReg
 11097 ;; This function uses a non-reentrant model
 11098 ;;
 11099                           
 11100                           	psect	text32
 11101  003B48                     __ptext32:
 11102                           	opt stack 0
 11103  003B48                     _vscp_getBufferSize:
 11104                           	opt stack 26
 11105                           
 11106                           ; BSR set to: 0
 11107                           
 11108                           ; BSR set to: 0
 11109                           ;main.c: 2316: return 8;
 11110                           
 11111                           ; BSR set to: 0
 11112                           ;incstack = 0
 11113                           ;incstack = 0
 11114  003B48  0C08               	retlw	8
 11115  003B4A                     __end_of_vscp_getBufferSize:
 11116                           	opt stack 0
 11117                           tblptru	equ	0xFF8
 11118                           tblptrh	equ	0xFF7
 11119                           tblptrl	equ	0xFF6
 11120                           tablat	equ	0xFF5
 11121                           prodh	equ	0xFF4
 11122                           prodl	equ	0xFF3
 11123                           intcon	equ	0xFF2
 11124                           postinc0	equ	0xFEE
 11125                           wreg	equ	0xFE8
 11126                           indf1	equ	0xFE7
 11127                           fsr1h	equ	0xFE2
 11128                           fsr1l	equ	0xFE1
 11129                           indf2	equ	0xFDF
 11130                           postinc2	equ	0xFDE
 11131                           postdec2	equ	0xFDD
 11132                           plusw2	equ	0xFDB
 11133                           fsr2h	equ	0xFDA
 11134                           fsr2l	equ	0xFD9
 11135                           status	equ	0xFD8
 11136                           
 11137 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 11138 ;; Defined at:
 11139 ;;		line 2306 in file "../main.c"
 11140 ;; Parameters:    Size  Location     Type
 11141 ;;		None
 11142 ;; Auto vars:     Size  Location     Type
 11143 ;;		None
 11144 ;; Return value:  Size  Location     Type
 11145 ;;                  1    wreg      unsigned char 
 11146 ;; Registers used:
 11147 ;;		wreg
 11148 ;; Tracked objects:
 11149 ;;		On entry : F/0
 11150 ;;		On exit  : F/0
 11151 ;;		Unchanged: F/0
 11152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11153 ;;      Params:         0       0       0       0       0       0       0
 11154 ;;      Locals:         0       0       0       0       0       0       0
 11155 ;;      Temps:          0       0       0       0       0       0       0
 11156 ;;      Totals:         0       0       0       0       0       0       0
 11157 ;;Total ram usage:        0 bytes
 11158 ;; Hardware stack levels used:    1
 11159 ;; Hardware stack levels required when called:    2
 11160 ;; This function calls:
 11161 ;;		Nothing
 11162 ;; This function is called by:
 11163 ;;		_vscp_readStdReg
 11164 ;; This function uses a non-reentrant model
 11165 ;;
 11166                           
 11167                           	psect	text33
 11168  003B4A                     __ptext33:
 11169                           	opt stack 0
 11170  003B4A                     _vscp_getBootLoaderAlgorithm:
 11171                           	opt stack 26
 11172                           
 11173                           ; BSR set to: 0
 11174                           
 11175                           ; BSR set to: 0
 11176                           ;main.c: 2307: return 0x01;
 11177                           
 11178                           ; BSR set to: 0
 11179                           ;incstack = 0
 11180                           ;incstack = 0
 11181  003B4A  0C01               	retlw	1
 11182  003B4C                     __end_of_vscp_getBootLoaderAlgorithm:
 11183                           	opt stack 0
 11184                           tblptru	equ	0xFF8
 11185                           tblptrh	equ	0xFF7
 11186                           tblptrl	equ	0xFF6
 11187                           tablat	equ	0xFF5
 11188                           prodh	equ	0xFF4
 11189                           prodl	equ	0xFF3
 11190                           intcon	equ	0xFF2
 11191                           postinc0	equ	0xFEE
 11192                           wreg	equ	0xFE8
 11193                           indf1	equ	0xFE7
 11194                           fsr1h	equ	0xFE2
 11195                           fsr1l	equ	0xFE1
 11196                           indf2	equ	0xFDF
 11197                           postinc2	equ	0xFDE
 11198                           postdec2	equ	0xFDD
 11199                           plusw2	equ	0xFDB
 11200                           fsr2h	equ	0xFDA
 11201                           fsr2l	equ	0xFD9
 11202                           status	equ	0xFD8
 11203                           
 11204 ;; *************** function _vscp_getManufacturerId *****************
 11205 ;; Defined at:
 11206 ;;		line 2297 in file "../main.c"
 11207 ;; Parameters:    Size  Location     Type
 11208 ;;  idx             1    wreg     unsigned char 
 11209 ;; Auto vars:     Size  Location     Type
 11210 ;;  idx             1   10[COMRAM] unsigned char 
 11211 ;; Return value:  Size  Location     Type
 11212 ;;                  1    wreg      unsigned char 
 11213 ;; Registers used:
 11214 ;;		wreg, status,2, status,0, cstack
 11215 ;; Tracked objects:
 11216 ;;		On entry : 0/0
 11217 ;;		On exit  : 0/0
 11218 ;;		Unchanged: 0/0
 11219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11220 ;;      Params:         0       0       0       0       0       0       0
 11221 ;;      Locals:         1       0       0       0       0       0       0
 11222 ;;      Temps:          0       0       0       0       0       0       0
 11223 ;;      Totals:         1       0       0       0       0       0       0
 11224 ;;Total ram usage:        1 bytes
 11225 ;; Hardware stack levels used:    1
 11226 ;; Hardware stack levels required when called:    3
 11227 ;; This function calls:
 11228 ;;		_readEEPROM
 11229 ;; This function is called by:
 11230 ;;		_vscp_readStdReg
 11231 ;;		_vscp_writeStdReg
 11232 ;; This function uses a non-reentrant model
 11233 ;;
 11234                           
 11235                           	psect	text34
 11236  003A54                     __ptext34:
 11237                           	opt stack 0
 11238  003A54                     _vscp_getManufacturerId:
 11239                           	opt stack 25
 11240                           
 11241                           ; BSR set to: 0
 11242                           ;incstack = 0
 11243                           ;incstack = 0
 11244                           ;vscp_getManufacturerId@idx stored from wreg
 11245  003A54  CFE8 F00B          	movff	wreg,vscp_getManufacturerId@idx
 11246                           
 11247                           ;main.c: 2298: return readEEPROM( 0x0B + idx );
 11248  003A58  0E0B               	movlw	11
 11249  003A5A  240B               	addwf	vscp_getManufacturerId@idx,w,c
 11250  003A5C  6E08               	movwf	?_readEEPROM,c
 11251  003A5E  6A09               	clrf	?_readEEPROM+1,c
 11252  003A60  0E00               	movlw	0
 11253  003A62  2209               	addwfc	?_readEEPROM+1,f,c
 11254  003A64  EF6C  F01D         	goto	_readEEPROM	;wreg free
 11255  003A68                     __end_of_vscp_getManufacturerId:
 11256                           	opt stack 0
 11257                           tblptru	equ	0xFF8
 11258                           tblptrh	equ	0xFF7
 11259                           tblptrl	equ	0xFF6
 11260                           tablat	equ	0xFF5
 11261                           prodh	equ	0xFF4
 11262                           prodl	equ	0xFF3
 11263                           intcon	equ	0xFF2
 11264                           postinc0	equ	0xFEE
 11265                           wreg	equ	0xFE8
 11266                           indf1	equ	0xFE7
 11267                           fsr1h	equ	0xFE2
 11268                           fsr1l	equ	0xFE1
 11269                           indf2	equ	0xFDF
 11270                           postinc2	equ	0xFDE
 11271                           postdec2	equ	0xFDD
 11272                           plusw2	equ	0xFDB
 11273                           fsr2h	equ	0xFDA
 11274                           fsr2l	equ	0xFD9
 11275                           status	equ	0xFD8
 11276                           
 11277 ;; *************** function _vscp_getUserID *****************
 11278 ;; Defined at:
 11279 ;;		line 2277 in file "../main.c"
 11280 ;; Parameters:    Size  Location     Type
 11281 ;;  idx             1    wreg     unsigned char 
 11282 ;; Auto vars:     Size  Location     Type
 11283 ;;  idx             1   10[COMRAM] unsigned char 
 11284 ;; Return value:  Size  Location     Type
 11285 ;;                  1    wreg      unsigned char 
 11286 ;; Registers used:
 11287 ;;		wreg, status,2, status,0, cstack
 11288 ;; Tracked objects:
 11289 ;;		On entry : 0/0
 11290 ;;		On exit  : 0/0
 11291 ;;		Unchanged: 0/0
 11292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11293 ;;      Params:         0       0       0       0       0       0       0
 11294 ;;      Locals:         1       0       0       0       0       0       0
 11295 ;;      Temps:          0       0       0       0       0       0       0
 11296 ;;      Totals:         1       0       0       0       0       0       0
 11297 ;;Total ram usage:        1 bytes
 11298 ;; Hardware stack levels used:    1
 11299 ;; Hardware stack levels required when called:    3
 11300 ;; This function calls:
 11301 ;;		_readEEPROM
 11302 ;; This function is called by:
 11303 ;;		_vscp_readStdReg
 11304 ;;		_vscp_writeStdReg
 11305 ;; This function uses a non-reentrant model
 11306 ;;
 11307                           
 11308                           	psect	text35
 11309  003A68                     __ptext35:
 11310                           	opt stack 0
 11311  003A68                     _vscp_getUserID:
 11312                           	opt stack 25
 11313                           
 11314                           ;incstack = 0
 11315                           ;incstack = 0
 11316                           ;vscp_getUserID@idx stored from wreg
 11317  003A68  CFE8 F00B          	movff	wreg,vscp_getUserID@idx
 11318                           
 11319                           ;main.c: 2278: return readEEPROM( 0x06 + idx );
 11320  003A6C  0E06               	movlw	6
 11321  003A6E  240B               	addwf	vscp_getUserID@idx,w,c
 11322  003A70  6E08               	movwf	?_readEEPROM,c
 11323  003A72  6A09               	clrf	?_readEEPROM+1,c
 11324  003A74  0E00               	movlw	0
 11325  003A76  2209               	addwfc	?_readEEPROM+1,f,c
 11326  003A78  EF6C  F01D         	goto	_readEEPROM	;wreg free
 11327  003A7C                     __end_of_vscp_getUserID:
 11328                           	opt stack 0
 11329                           tblptru	equ	0xFF8
 11330                           tblptrh	equ	0xFF7
 11331                           tblptrl	equ	0xFF6
 11332                           tablat	equ	0xFF5
 11333                           prodh	equ	0xFF4
 11334                           prodl	equ	0xFF3
 11335                           intcon	equ	0xFF2
 11336                           postinc0	equ	0xFEE
 11337                           wreg	equ	0xFE8
 11338                           indf1	equ	0xFE7
 11339                           fsr1h	equ	0xFE2
 11340                           fsr1l	equ	0xFE1
 11341                           indf2	equ	0xFDF
 11342                           postinc2	equ	0xFDE
 11343                           postdec2	equ	0xFDD
 11344                           plusw2	equ	0xFDB
 11345                           fsr2h	equ	0xFDA
 11346                           fsr2l	equ	0xFD9
 11347                           status	equ	0xFD8
 11348                           
 11349 ;; *************** function _vscp_getMDF_URL *****************
 11350 ;; Defined at:
 11351 ;;		line 2268 in file "../main.c"
 11352 ;; Parameters:    Size  Location     Type
 11353 ;;  idx             1    wreg     unsigned char 
 11354 ;; Auto vars:     Size  Location     Type
 11355 ;;  idx             1    8[COMRAM] unsigned char 
 11356 ;; Return value:  Size  Location     Type
 11357 ;;                  1    wreg      unsigned char 
 11358 ;; Registers used:
 11359 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11360 ;; Tracked objects:
 11361 ;;		On entry : F/0
 11362 ;;		On exit  : F/0
 11363 ;;		Unchanged: F/0
 11364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11365 ;;      Params:         0       0       0       0       0       0       0
 11366 ;;      Locals:         1       0       0       0       0       0       0
 11367 ;;      Temps:          1       0       0       0       0       0       0
 11368 ;;      Totals:         2       0       0       0       0       0       0
 11369 ;;Total ram usage:        2 bytes
 11370 ;; Hardware stack levels used:    1
 11371 ;; Hardware stack levels required when called:    2
 11372 ;; This function calls:
 11373 ;;		Nothing
 11374 ;; This function is called by:
 11375 ;;		_vscp_readStdReg
 11376 ;;		_vscp_handleProtocolEvent
 11377 ;; This function uses a non-reentrant model
 11378 ;;
 11379                           
 11380                           	psect	text36
 11381  003A0C                     __ptext36:
 11382                           	opt stack 0
 11383  003A0C                     _vscp_getMDF_URL:
 11384                           	opt stack 26
 11385                           
 11386                           ;incstack = 0
 11387                           ;incstack = 0
 11388                           ;vscp_getMDF_URL@idx stored from wreg
 11389  003A0C  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
 11390                           
 11391                           ; BSR set to: 0
 11392                           ;main.c: 2269: return vscp_deviceURL[ idx ];
 11393  003A10  5009               	movf	vscp_getMDF_URL@idx,w,c
 11394  003A12  0F00               	addlw	low _vscp_deviceURL
 11395  003A14  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
 11396  003A16  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 11397  003A1A  0E06               	movlw	high __smallconst
 11398  003A1C  6EF7               	movwf	tblptrh,c
 11399  003A1E  0008               	tblrd		*
 11400  003A20  50F5               	movf	tablat,w,c
 11401                           
 11402                           ; BSR set to: 0
 11403  003A22  0012               	return	
 11404  003A24                     __end_of_vscp_getMDF_URL:
 11405                           	opt stack 0
 11406                           tblptru	equ	0xFF8
 11407                           tblptrh	equ	0xFF7
 11408                           tblptrl	equ	0xFF6
 11409                           tablat	equ	0xFF5
 11410                           prodh	equ	0xFF4
 11411                           prodl	equ	0xFF3
 11412                           intcon	equ	0xFF2
 11413                           postinc0	equ	0xFEE
 11414                           wreg	equ	0xFE8
 11415                           indf1	equ	0xFE7
 11416                           fsr1h	equ	0xFE2
 11417                           fsr1l	equ	0xFE1
 11418                           indf2	equ	0xFDF
 11419                           postinc2	equ	0xFDE
 11420                           postdec2	equ	0xFDD
 11421                           plusw2	equ	0xFDB
 11422                           fsr2h	equ	0xFDA
 11423                           fsr2l	equ	0xFD9
 11424                           status	equ	0xFD8
 11425                           
 11426 ;; *************** function _vscp_getGUID *****************
 11427 ;; Defined at:
 11428 ;;		line 2256 in file "../main.c"
 11429 ;; Parameters:    Size  Location     Type
 11430 ;;  idx             1    wreg     unsigned char 
 11431 ;; Auto vars:     Size  Location     Type
 11432 ;;  idx             1   10[COMRAM] unsigned char 
 11433 ;; Return value:  Size  Location     Type
 11434 ;;                  1    wreg      unsigned char 
 11435 ;; Registers used:
 11436 ;;		wreg, status,2, status,0, cstack
 11437 ;; Tracked objects:
 11438 ;;		On entry : 0/0
 11439 ;;		On exit  : 0/0
 11440 ;;		Unchanged: 0/0
 11441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11442 ;;      Params:         0       0       0       0       0       0       0
 11443 ;;      Locals:         1       0       0       0       0       0       0
 11444 ;;      Temps:          0       0       0       0       0       0       0
 11445 ;;      Totals:         1       0       0       0       0       0       0
 11446 ;;Total ram usage:        1 bytes
 11447 ;; Hardware stack levels used:    1
 11448 ;; Hardware stack levels required when called:    3
 11449 ;; This function calls:
 11450 ;;		_readEEPROM
 11451 ;; This function is called by:
 11452 ;;		_vscp_readStdReg
 11453 ;;		_vscp_writeStdReg
 11454 ;;		_vscp_handleProtocolEvent
 11455 ;; This function uses a non-reentrant model
 11456 ;;
 11457                           
 11458                           	psect	text37
 11459  003A7C                     __ptext37:
 11460                           	opt stack 0
 11461  003A7C                     _vscp_getGUID:
 11462                           	opt stack 25
 11463                           
 11464                           ; BSR set to: 0
 11465                           ;incstack = 0
 11466                           ;incstack = 0
 11467                           ;vscp_getGUID@idx stored from wreg
 11468  003A7C  CFE8 F00B          	movff	wreg,vscp_getGUID@idx
 11469                           
 11470                           ;main.c: 2257: return readEEPROM( 0x13 + idx );
 11471  003A80  0E13               	movlw	19
 11472  003A82  240B               	addwf	vscp_getGUID@idx,w,c
 11473  003A84  6E08               	movwf	?_readEEPROM,c
 11474  003A86  6A09               	clrf	?_readEEPROM+1,c
 11475  003A88  0E00               	movlw	0
 11476  003A8A  2209               	addwfc	?_readEEPROM+1,f,c
 11477  003A8C  EF6C  F01D         	goto	_readEEPROM	;wreg free
 11478  003A90                     __end_of_vscp_getGUID:
 11479                           	opt stack 0
 11480                           tblptru	equ	0xFF8
 11481                           tblptrh	equ	0xFF7
 11482                           tblptrl	equ	0xFF6
 11483                           tablat	equ	0xFF5
 11484                           prodh	equ	0xFF4
 11485                           prodl	equ	0xFF3
 11486                           intcon	equ	0xFF2
 11487                           postinc0	equ	0xFEE
 11488                           wreg	equ	0xFE8
 11489                           indf1	equ	0xFE7
 11490                           fsr1h	equ	0xFE2
 11491                           fsr1l	equ	0xFE1
 11492                           indf2	equ	0xFDF
 11493                           postinc2	equ	0xFDE
 11494                           postdec2	equ	0xFDD
 11495                           plusw2	equ	0xFDB
 11496                           fsr2h	equ	0xFDA
 11497                           fsr2l	equ	0xFD9
 11498                           status	equ	0xFD8
 11499                           
 11500 ;; *************** function _vscp_getSubMinorVersion *****************
 11501 ;; Defined at:
 11502 ;;		line 2245 in file "../main.c"
 11503 ;; Parameters:    Size  Location     Type
 11504 ;;		None
 11505 ;; Auto vars:     Size  Location     Type
 11506 ;;		None
 11507 ;; Return value:  Size  Location     Type
 11508 ;;                  1    wreg      unsigned char 
 11509 ;; Registers used:
 11510 ;;		wreg
 11511 ;; Tracked objects:
 11512 ;;		On entry : F/0
 11513 ;;		On exit  : F/0
 11514 ;;		Unchanged: F/0
 11515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11516 ;;      Params:         0       0       0       0       0       0       0
 11517 ;;      Locals:         0       0       0       0       0       0       0
 11518 ;;      Temps:          0       0       0       0       0       0       0
 11519 ;;      Totals:         0       0       0       0       0       0       0
 11520 ;;Total ram usage:        0 bytes
 11521 ;; Hardware stack levels used:    1
 11522 ;; Hardware stack levels required when called:    2
 11523 ;; This function calls:
 11524 ;;		Nothing
 11525 ;; This function is called by:
 11526 ;;		_vscp_readStdReg
 11527 ;; This function uses a non-reentrant model
 11528 ;;
 11529                           
 11530                           	psect	text38
 11531  003B4C                     __ptext38:
 11532                           	opt stack 0
 11533  003B4C                     _vscp_getSubMinorVersion:
 11534                           	opt stack 26
 11535                           
 11536                           ; BSR set to: 0
 11537                           
 11538                           ; BSR set to: 0
 11539                           ;main.c: 2246: return 0;
 11540                           
 11541                           ;incstack = 0
 11542                           ;incstack = 0
 11543  003B4C  0C00               	retlw	0
 11544  003B4E                     __end_of_vscp_getSubMinorVersion:
 11545                           	opt stack 0
 11546                           tblptru	equ	0xFF8
 11547                           tblptrh	equ	0xFF7
 11548                           tblptrl	equ	0xFF6
 11549                           tablat	equ	0xFF5
 11550                           prodh	equ	0xFF4
 11551                           prodl	equ	0xFF3
 11552                           intcon	equ	0xFF2
 11553                           postinc0	equ	0xFEE
 11554                           wreg	equ	0xFE8
 11555                           indf1	equ	0xFE7
 11556                           fsr1h	equ	0xFE2
 11557                           fsr1l	equ	0xFE1
 11558                           indf2	equ	0xFDF
 11559                           postinc2	equ	0xFDE
 11560                           postdec2	equ	0xFDD
 11561                           plusw2	equ	0xFDB
 11562                           fsr2h	equ	0xFDA
 11563                           fsr2l	equ	0xFD9
 11564                           status	equ	0xFD8
 11565                           
 11566 ;; *************** function _vscp_getMinorVersion *****************
 11567 ;; Defined at:
 11568 ;;		line 2236 in file "../main.c"
 11569 ;; Parameters:    Size  Location     Type
 11570 ;;		None
 11571 ;; Auto vars:     Size  Location     Type
 11572 ;;		None
 11573 ;; Return value:  Size  Location     Type
 11574 ;;                  1    wreg      unsigned char 
 11575 ;; Registers used:
 11576 ;;		wreg
 11577 ;; Tracked objects:
 11578 ;;		On entry : F/0
 11579 ;;		On exit  : F/0
 11580 ;;		Unchanged: F/0
 11581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11582 ;;      Params:         0       0       0       0       0       0       0
 11583 ;;      Locals:         0       0       0       0       0       0       0
 11584 ;;      Temps:          0       0       0       0       0       0       0
 11585 ;;      Totals:         0       0       0       0       0       0       0
 11586 ;;Total ram usage:        0 bytes
 11587 ;; Hardware stack levels used:    1
 11588 ;; Hardware stack levels required when called:    2
 11589 ;; This function calls:
 11590 ;;		Nothing
 11591 ;; This function is called by:
 11592 ;;		_vscp_readStdReg
 11593 ;; This function uses a non-reentrant model
 11594 ;;
 11595                           
 11596                           	psect	text39
 11597  003B4E                     __ptext39:
 11598                           	opt stack 0
 11599  003B4E                     _vscp_getMinorVersion:
 11600                           	opt stack 26
 11601                           
 11602                           ; BSR set to: 0
 11603                           
 11604                           ; BSR set to: 0
 11605                           ;main.c: 2237: return 1;
 11606                           
 11607                           ; BSR set to: 0
 11608                           ;incstack = 0
 11609                           ;incstack = 0
 11610  003B4E  0C01               	retlw	1
 11611  003B50                     __end_of_vscp_getMinorVersion:
 11612                           	opt stack 0
 11613                           tblptru	equ	0xFF8
 11614                           tblptrh	equ	0xFF7
 11615                           tblptrl	equ	0xFF6
 11616                           tablat	equ	0xFF5
 11617                           prodh	equ	0xFF4
 11618                           prodl	equ	0xFF3
 11619                           intcon	equ	0xFF2
 11620                           postinc0	equ	0xFEE
 11621                           wreg	equ	0xFE8
 11622                           indf1	equ	0xFE7
 11623                           fsr1h	equ	0xFE2
 11624                           fsr1l	equ	0xFE1
 11625                           indf2	equ	0xFDF
 11626                           postinc2	equ	0xFDE
 11627                           postdec2	equ	0xFDD
 11628                           plusw2	equ	0xFDB
 11629                           fsr2h	equ	0xFDA
 11630                           fsr2l	equ	0xFD9
 11631                           status	equ	0xFD8
 11632                           
 11633 ;; *************** function _vscp_getMajorVersion *****************
 11634 ;; Defined at:
 11635 ;;		line 2227 in file "../main.c"
 11636 ;; Parameters:    Size  Location     Type
 11637 ;;		None
 11638 ;; Auto vars:     Size  Location     Type
 11639 ;;		None
 11640 ;; Return value:  Size  Location     Type
 11641 ;;                  1    wreg      unsigned char 
 11642 ;; Registers used:
 11643 ;;		wreg
 11644 ;; Tracked objects:
 11645 ;;		On entry : F/0
 11646 ;;		On exit  : F/0
 11647 ;;		Unchanged: F/0
 11648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11649 ;;      Params:         0       0       0       0       0       0       0
 11650 ;;      Locals:         0       0       0       0       0       0       0
 11651 ;;      Temps:          0       0       0       0       0       0       0
 11652 ;;      Totals:         0       0       0       0       0       0       0
 11653 ;;Total ram usage:        0 bytes
 11654 ;; Hardware stack levels used:    1
 11655 ;; Hardware stack levels required when called:    2
 11656 ;; This function calls:
 11657 ;;		Nothing
 11658 ;; This function is called by:
 11659 ;;		_vscp_readStdReg
 11660 ;; This function uses a non-reentrant model
 11661 ;;
 11662                           
 11663                           	psect	text40
 11664  003B50                     __ptext40:
 11665                           	opt stack 0
 11666  003B50                     _vscp_getMajorVersion:
 11667                           	opt stack 26
 11668                           
 11669                           ; BSR set to: 0
 11670                           
 11671                           ; BSR set to: 0
 11672                           ;main.c: 2228: return 1;
 11673                           
 11674                           ; BSR set to: 0
 11675                           ;incstack = 0
 11676                           ;incstack = 0
 11677  003B50  0C01               	retlw	1
 11678  003B52                     __end_of_vscp_getMajorVersion:
 11679                           	opt stack 0
 11680                           tblptru	equ	0xFF8
 11681                           tblptrh	equ	0xFF7
 11682                           tblptrl	equ	0xFF6
 11683                           tablat	equ	0xFF5
 11684                           prodh	equ	0xFF4
 11685                           prodl	equ	0xFF3
 11686                           intcon	equ	0xFF2
 11687                           postinc0	equ	0xFEE
 11688                           wreg	equ	0xFE8
 11689                           indf1	equ	0xFE7
 11690                           fsr1h	equ	0xFE2
 11691                           fsr1l	equ	0xFE1
 11692                           indf2	equ	0xFDF
 11693                           postinc2	equ	0xFDE
 11694                           postdec2	equ	0xFDD
 11695                           plusw2	equ	0xFDB
 11696                           fsr2h	equ	0xFDA
 11697                           fsr2l	equ	0xFD9
 11698                           status	equ	0xFD8
 11699                           
 11700 ;; *************** function _vscp_newNodeOnline *****************
 11701 ;; Defined at:
 11702 ;;		line 494 in file "../../vscp_firmware/common/vscp_firmware.c"
 11703 ;; Parameters:    Size  Location     Type
 11704 ;;		None
 11705 ;; Auto vars:     Size  Location     Type
 11706 ;;		None
 11707 ;; Return value:  Size  Location     Type
 11708 ;;		None               void
 11709 ;; Registers used:
 11710 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11711 ;; Tracked objects:
 11712 ;;		On entry : F/0
 11713 ;;		On exit  : F/0
 11714 ;;		Unchanged: 0/0
 11715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11716 ;;      Params:         0       0       0       0       0       0       0
 11717 ;;      Locals:         0       0       0       0       0       0       0
 11718 ;;      Temps:          1       0       0       0       0       0       0
 11719 ;;      Totals:         1       0       0       0       0       0       0
 11720 ;;Total ram usage:        1 bytes
 11721 ;; Hardware stack levels used:    1
 11722 ;; Hardware stack levels required when called:    7
 11723 ;; This function calls:
 11724 ;;		_vscp_sendEvent
 11725 ;; This function is called by:
 11726 ;;		_vscp_handleProtocolEvent
 11727 ;; This function uses a non-reentrant model
 11728 ;;
 11729                           
 11730                           	psect	text41
 11731  0037C0                     __ptext41:
 11732                           	opt stack 0
 11733  0037C0                     _vscp_newNodeOnline:
 11734                           	opt stack 22
 11735                           
 11736                           ; BSR set to: 0
 11737                           ;vscp_firmware.c: 495: if ((1 == (vscp_imsg.flags & 0x0f)) &&
 11738                           ;vscp_firmware.c: 496: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11739                           
 11740                           ; BSR set to: 0
 11741                           ;incstack = 0
 11742                           ;incstack = 0
 11743  0037C0  C096  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
 11744  0037C4  0E0F               	movlw	15
 11745  0037C6  164C               	andwf	??_vscp_newNodeOnline,f,c
 11746  0037C8  044C               	decf	??_vscp_newNodeOnline,w,c
 11747  0037CA  E10E               	bnz	l1095
 11748                           
 11749                           ; BSR set to: 0
 11750  0037CC  5191               	movf	_vscp_nickname& (0+255),w,b
 11751  0037CE  EE20  F09C         	lfsr	2,_vscp_imsg+6
 11752  0037D2  62DF               	cpfseq	indf2,c
 11753  0037D4  D009               	goto	l1095
 11754                           
 11755                           ; BSR set to: 0
 11756                           ;vscp_firmware.c: 502: vscp_omsg.flags = 0x80;
 11757  0037D6  0E80               	movlw	128
 11758  0037D8  6FA4               	movwf	_vscp_omsg& (0+255),b
 11759                           
 11760                           ; BSR set to: 0
 11761                           ;vscp_firmware.c: 503: vscp_omsg.priority = 0x00;
 11762  0037DA  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 11763                           
 11764                           ; BSR set to: 0
 11765                           ;vscp_firmware.c: 504: vscp_omsg.vscp_class = 0;
 11766  0037DC  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 11767  0037DE  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 11768                           
 11769                           ;vscp_firmware.c: 505: vscp_omsg.vscp_type = 3;
 11770  0037E0  0E03               	movlw	3
 11771  0037E2  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 11772                           
 11773                           ; BSR set to: 0
 11774                           ;vscp_firmware.c: 506: vscp_sendEvent();
 11775  0037E4  EC31  F01C         	call	_vscp_sendEvent	;wreg free
 11776  0037E8                     l1095:
 11777                           
 11778                           ; BSR set to: 0
 11779  0037E8  0012               	return	
 11780  0037EA                     __end_of_vscp_newNodeOnline:
 11781                           	opt stack 0
 11782                           tblptru	equ	0xFF8
 11783                           tblptrh	equ	0xFF7
 11784                           tblptrl	equ	0xFF6
 11785                           tablat	equ	0xFF5
 11786                           prodh	equ	0xFF4
 11787                           prodl	equ	0xFF3
 11788                           intcon	equ	0xFF2
 11789                           postinc0	equ	0xFEE
 11790                           wreg	equ	0xFE8
 11791                           indf1	equ	0xFE7
 11792                           fsr1h	equ	0xFE2
 11793                           fsr1l	equ	0xFE1
 11794                           indf2	equ	0xFDF
 11795                           postinc2	equ	0xFDE
 11796                           postdec2	equ	0xFDD
 11797                           plusw2	equ	0xFDB
 11798                           fsr2h	equ	0xFDA
 11799                           fsr2l	equ	0xFD9
 11800                           status	equ	0xFD8
 11801                           
 11802 ;; *************** function _vscp_handleDropNickname *****************
 11803 ;; Defined at:
 11804 ;;		line 430 in file "../../vscp_firmware/common/vscp_firmware.c"
 11805 ;; Parameters:    Size  Location     Type
 11806 ;;		None
 11807 ;; Auto vars:     Size  Location     Type
 11808 ;;  bytes           1   11[COMRAM] unsigned char 
 11809 ;; Return value:  Size  Location     Type
 11810 ;;		None               void
 11811 ;; Registers used:
 11812 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11813 ;; Tracked objects:
 11814 ;;		On entry : F/0
 11815 ;;		On exit  : F/0
 11816 ;;		Unchanged: 0/0
 11817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11818 ;;      Params:         0       0       0       0       0       0       0
 11819 ;;      Locals:         1       0       0       0       0       0       0
 11820 ;;      Temps:          0       0       0       0       0       0       0
 11821 ;;      Totals:         1       0       0       0       0       0       0
 11822 ;;Total ram usage:        1 bytes
 11823 ;; Hardware stack levels used:    1
 11824 ;; Hardware stack levels required when called:    5
 11825 ;; This function calls:
 11826 ;;		_vscp_init
 11827 ;;		_vscp_writeNicknamePermanent
 11828 ;; This function is called by:
 11829 ;;		_vscp_handleProtocolEvent
 11830 ;; This function uses a non-reentrant model
 11831 ;;
 11832                           
 11833                           	psect	text42
 11834  003764                     __ptext42:
 11835                           	opt stack 0
 11836  003764                     _vscp_handleDropNickname:
 11837                           	opt stack 24
 11838                           
 11839                           ; BSR set to: 0
 11840                           ;vscp_firmware.c: 431: uint8_t bytes = vscp_imsg.flags & 0x0f;
 11841                           
 11842                           ; BSR set to: 0
 11843                           ;incstack = 0
 11844                           ;incstack = 0
 11845  003764  5196               	movf	_vscp_imsg& (0+255),w,b
 11846  003766  0B0F               	andlw	15
 11847  003768  6E0C               	movwf	vscp_handleDropNickname@bytes,c
 11848                           
 11849                           ; BSR set to: 0
 11850                           ;vscp_firmware.c: 437: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11851  00376A  500C               	movf	vscp_handleDropNickname@bytes,w,c
 11852  00376C  E012               	bz	l1091
 11853                           
 11854                           ; BSR set to: 0
 11855  00376E  5191               	movf	_vscp_nickname& (0+255),w,b
 11856  003770  EE20  F09C         	lfsr	2,_vscp_imsg+6
 11857  003774  62DF               	cpfseq	indf2,c
 11858  003776  D00D               	goto	l1091
 11859                           
 11860                           ; BSR set to: 0
 11861                           ;vscp_firmware.c: 469: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 11862  003778  040C               	decf	vscp_handleDropNickname@bytes,w,c
 11863  00377A  E005               	bz	l1090
 11864                           
 11865                           ; BSR set to: 0
 11866  00377C  0E01               	movlw	1
 11867  00377E  640C               	cpfsgt	vscp_handleDropNickname@bytes,c
 11868  003780  D008               	goto	l1091
 11869                           
 11870                           ; BSR set to: 0
 11871  003782  679D               	tstfsz	(_vscp_imsg+7)& (0+255),b
 11872  003784  D006               	goto	l1091
 11873  003786                     l1090:
 11874                           
 11875                           ; BSR set to: 0
 11876                           ;vscp_firmware.c: 471: vscp_nickname = 0xff;
 11877  003786  6991               	setf	_vscp_nickname& (0+255),b
 11878                           
 11879                           ; BSR set to: 0
 11880                           ;vscp_firmware.c: 472: vscp_writeNicknamePermanent(0xff);
 11881  003788  0EFF               	movlw	255
 11882  00378A  EC5A  F01D         	call	_vscp_writeNicknamePermanent
 11883                           
 11884                           ;vscp_firmware.c: 473: vscp_init();
 11885  00378E  EC32  F01B         	call	_vscp_init	;wreg free
 11886  003792                     l1091:
 11887                           
 11888                           ; BSR set to: 0
 11889  003792  0012               	return	
 11890  003794                     __end_of_vscp_handleDropNickname:
 11891                           	opt stack 0
 11892                           tblptru	equ	0xFF8
 11893                           tblptrh	equ	0xFF7
 11894                           tblptrl	equ	0xFF6
 11895                           tablat	equ	0xFF5
 11896                           prodh	equ	0xFF4
 11897                           prodl	equ	0xFF3
 11898                           intcon	equ	0xFF2
 11899                           postinc0	equ	0xFEE
 11900                           wreg	equ	0xFE8
 11901                           indf1	equ	0xFE7
 11902                           fsr1h	equ	0xFE2
 11903                           fsr1l	equ	0xFE1
 11904                           indf2	equ	0xFDF
 11905                           postinc2	equ	0xFDE
 11906                           postdec2	equ	0xFDD
 11907                           plusw2	equ	0xFDB
 11908                           fsr2h	equ	0xFDA
 11909                           fsr2l	equ	0xFD9
 11910                           status	equ	0xFD8
 11911                           
 11912 ;; *************** function _vscp_init *****************
 11913 ;; Defined at:
 11914 ;;		line 117 in file "../../vscp_firmware/common/vscp_firmware.c"
 11915 ;; Parameters:    Size  Location     Type
 11916 ;;		None
 11917 ;; Auto vars:     Size  Location     Type
 11918 ;;		None
 11919 ;; Return value:  Size  Location     Type
 11920 ;;		None               void
 11921 ;; Registers used:
 11922 ;;		wreg, status,2, cstack
 11923 ;; Tracked objects:
 11924 ;;		On entry : 0/0
 11925 ;;		On exit  : F/0
 11926 ;;		Unchanged: 0/0
 11927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11928 ;;      Params:         0       0       0       0       0       0       0
 11929 ;;      Locals:         0       0       0       0       0       0       0
 11930 ;;      Temps:          0       0       0       0       0       0       0
 11931 ;;      Totals:         0       0       0       0       0       0       0
 11932 ;;Total ram usage:        0 bytes
 11933 ;; Hardware stack levels used:    1
 11934 ;; Hardware stack levels required when called:    4
 11935 ;; This function calls:
 11936 ;;		_vscp_readNicknamePermanent
 11937 ;; This function is called by:
 11938 ;;		_main
 11939 ;;		_vscp_handleDropNickname
 11940 ;;		_vscp_handleProtocolEvent
 11941 ;; This function uses a non-reentrant model
 11942 ;;
 11943                           
 11944                           	psect	text43
 11945  003664                     __ptext43:
 11946                           	opt stack 0
 11947  003664                     _vscp_init:
 11948                           	opt stack 24
 11949                           
 11950                           ;vscp_firmware.c: 118: vscp_initledfunc = 0x02;
 11951                           
 11952                           ; BSR set to: 0
 11953                           ;incstack = 0
 11954                           ;incstack = 0
 11955  003664  0E02               	movlw	2
 11956  003666  6E56               	movwf	_vscp_initledfunc,c
 11957                           
 11958                           ;vscp_firmware.c: 121: vscp_nickname = vscp_readNicknamePermanent();
 11959  003668  EC92  F01D         	call	_vscp_readNicknamePermanent	;wreg free
 11960  00366C  0100               	movlb	0	; () banked
 11961  00366E  6F91               	movwf	_vscp_nickname& (0+255),b
 11962                           
 11963                           ; BSR set to: 0
 11964                           ;vscp_firmware.c: 124: if (!vscp_nickname) vscp_nickname = 0xff;
 11965  003670  6791               	tstfsz	_vscp_nickname& (0+255),b
 11966  003672  D001               	goto	l1032
 11967                           
 11968                           ; BSR set to: 0
 11969  003674  6991               	setf	_vscp_nickname& (0+255),b
 11970  003676                     l1032:
 11971                           
 11972                           ; BSR set to: 0
 11973                           ;vscp_firmware.c: 127: vscp_imsg.flags = 0;
 11974  003676  6B96               	clrf	_vscp_imsg& (0+255),b
 11975                           
 11976                           ;vscp_firmware.c: 128: vscp_imsg.priority = 0;
 11977  003678  6B97               	clrf	(_vscp_imsg+1)& (0+255),b
 11978                           
 11979                           ;vscp_firmware.c: 129: vscp_imsg.vscp_class = 0;
 11980  00367A  6B98               	clrf	(_vscp_imsg+2)& (0+255),b
 11981  00367C  6B99               	clrf	(_vscp_imsg+3)& (0+255),b
 11982                           
 11983                           ;vscp_firmware.c: 130: vscp_imsg.vscp_type = 0;
 11984  00367E  6B9A               	clrf	(_vscp_imsg+4)& (0+255),b
 11985                           
 11986                           ;vscp_firmware.c: 133: vscp_omsg.flags = 0;
 11987  003680  6BA4               	clrf	_vscp_omsg& (0+255),b
 11988                           
 11989                           ;vscp_firmware.c: 134: vscp_omsg.priority = 0;
 11990  003682  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 11991                           
 11992                           ;vscp_firmware.c: 135: vscp_omsg.vscp_class = 0;
 11993  003684  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 11994  003686  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 11995                           
 11996                           ;vscp_firmware.c: 138: vscp_errorcnt = 0;
 11997  003688  6BA8               	clrf	(_vscp_omsg+4)& (0+255),b
 11998                           
 11999                           ;vscp_firmware.c: 139: vscp_alarmstatus = 0;
 12000  00368A  6B8C               	clrf	_vscp_alarmstatus& (0+255),b
 12001                           
 12002                           ;vscp_firmware.c: 141: vscp_probe_address = 0;
 12003  00368C  6A57               	clrf	_vscp_probe_address,c
 12004                           
 12005                           ;vscp_firmware.c: 144: vscp_node_state = 0x00;
 12006  00368E  6B92               	clrf	_vscp_node_state& (0+255),b
 12007                           
 12008                           ;vscp_firmware.c: 145: vscp_node_substate = 0x00;
 12009  003690  6B93               	clrf	_vscp_node_substate& (0+255),b
 12010                           
 12011                           ;vscp_firmware.c: 147: vscp_probe_cnt = 0;
 12012  003692  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12013                           
 12014                           ;vscp_firmware.c: 148: vscp_page_select = 0;
 12015  003694  6A52               	clrf	_vscp_page_select,c
 12016  003696  6A53               	clrf	_vscp_page_select+1,c
 12017                           
 12018                           ;vscp_firmware.c: 151: vscp_timer = 0;
 12019  003698  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12020  00369A  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12021                           
 12022                           ;vscp_firmware.c: 152: vscp_configtimer = 0;
 12023  00369C  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
 12024  00369E  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 12025                           
 12026                           ;vscp_firmware.c: 153: vscp_second = 0;
 12027  0036A0  6B95               	clrf	_vscp_second& (0+255),b
 12028                           
 12029                           ;vscp_firmware.c: 154: vscp_minute = 0;
 12030  0036A2  6B90               	clrf	_vscp_minute& (0+255),b
 12031                           
 12032                           ;vscp_firmware.c: 155: vscp_hour = 0;
 12033  0036A4  6B8E               	clrf	_vscp_hour& (0+255),b
 12034                           
 12035                           ; BSR set to: 0
 12036  0036A6  0012               	return	
 12037  0036A8                     __end_of_vscp_init:
 12038                           	opt stack 0
 12039                           tblptru	equ	0xFF8
 12040                           tblptrh	equ	0xFF7
 12041                           tblptrl	equ	0xFF6
 12042                           tablat	equ	0xFF5
 12043                           prodh	equ	0xFF4
 12044                           prodl	equ	0xFF3
 12045                           intcon	equ	0xFF2
 12046                           postinc0	equ	0xFEE
 12047                           wreg	equ	0xFE8
 12048                           indf1	equ	0xFE7
 12049                           fsr1h	equ	0xFE2
 12050                           fsr1l	equ	0xFE1
 12051                           indf2	equ	0xFDF
 12052                           postinc2	equ	0xFDE
 12053                           postdec2	equ	0xFDD
 12054                           plusw2	equ	0xFDB
 12055                           fsr2h	equ	0xFDA
 12056                           fsr2l	equ	0xFD9
 12057                           status	equ	0xFD8
 12058                           
 12059 ;; *************** function _vscp_readNicknamePermanent *****************
 12060 ;; Defined at:
 12061 ;;		line 849 in file "../main.c"
 12062 ;; Parameters:    Size  Location     Type
 12063 ;;		None
 12064 ;; Auto vars:     Size  Location     Type
 12065 ;;		None
 12066 ;; Return value:  Size  Location     Type
 12067 ;;                  1    wreg      unsigned char 
 12068 ;; Registers used:
 12069 ;;		wreg, status,2, cstack
 12070 ;; Tracked objects:
 12071 ;;		On entry : 0/0
 12072 ;;		On exit  : 0/0
 12073 ;;		Unchanged: 0/0
 12074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12075 ;;      Params:         0       0       0       0       0       0       0
 12076 ;;      Locals:         0       0       0       0       0       0       0
 12077 ;;      Temps:          0       0       0       0       0       0       0
 12078 ;;      Totals:         0       0       0       0       0       0       0
 12079 ;;Total ram usage:        0 bytes
 12080 ;; Hardware stack levels used:    1
 12081 ;; Hardware stack levels required when called:    3
 12082 ;; This function calls:
 12083 ;;		_readEEPROM
 12084 ;; This function is called by:
 12085 ;;		_vscp_init
 12086 ;; This function uses a non-reentrant model
 12087 ;;
 12088                           
 12089                           	psect	text44
 12090  003B24                     __ptext44:
 12091                           	opt stack 0
 12092  003B24                     _vscp_readNicknamePermanent:
 12093                           	opt stack 24
 12094                           
 12095                           ;main.c: 850: return readEEPROM( 0x01 );
 12096                           
 12097                           ; BSR set to: 0
 12098                           ;incstack = 0
 12099                           ;incstack = 0
 12100  003B24  6A09               	clrf	?_readEEPROM+1,c
 12101  003B26  0E01               	movlw	1
 12102  003B28  6E08               	movwf	?_readEEPROM,c
 12103  003B2A  EF6C  F01D         	goto	_readEEPROM	;wreg free
 12104  003B2E                     __end_of_vscp_readNicknamePermanent:
 12105                           	opt stack 0
 12106                           tblptru	equ	0xFF8
 12107                           tblptrh	equ	0xFF7
 12108                           tblptrl	equ	0xFF6
 12109                           tablat	equ	0xFF5
 12110                           prodh	equ	0xFF4
 12111                           prodl	equ	0xFF3
 12112                           intcon	equ	0xFF2
 12113                           postinc0	equ	0xFEE
 12114                           wreg	equ	0xFE8
 12115                           indf1	equ	0xFE7
 12116                           fsr1h	equ	0xFE2
 12117                           fsr1l	equ	0xFE1
 12118                           indf2	equ	0xFDF
 12119                           postinc2	equ	0xFDE
 12120                           postdec2	equ	0xFDD
 12121                           plusw2	equ	0xFDB
 12122                           fsr2h	equ	0xFDA
 12123                           fsr2l	equ	0xFD9
 12124                           status	equ	0xFD8
 12125                           
 12126 ;; *************** function _vscp_handleSetNickname *****************
 12127 ;; Defined at:
 12128 ;;		line 414 in file "../../vscp_firmware/common/vscp_firmware.c"
 12129 ;; Parameters:    Size  Location     Type
 12130 ;;		None
 12131 ;; Auto vars:     Size  Location     Type
 12132 ;;		None
 12133 ;; Return value:  Size  Location     Type
 12134 ;;		None               void
 12135 ;; Registers used:
 12136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12137 ;; Tracked objects:
 12138 ;;		On entry : F/0
 12139 ;;		On exit  : 0/0
 12140 ;;		Unchanged: 0/0
 12141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12142 ;;      Params:         0       0       0       0       0       0       0
 12143 ;;      Locals:         0       0       0       0       0       0       0
 12144 ;;      Temps:          0       0       0       0       0       0       0
 12145 ;;      Totals:         0       0       0       0       0       0       0
 12146 ;;Total ram usage:        0 bytes
 12147 ;; Hardware stack levels used:    1
 12148 ;; Hardware stack levels required when called:    4
 12149 ;; This function calls:
 12150 ;;		_vscp_writeNicknamePermanent
 12151 ;;		_vscp_setSegmentCRC
 12152 ;; This function is called by:
 12153 ;;		_vscp_handleProtocolEvent
 12154 ;; This function uses a non-reentrant model
 12155 ;;
 12156                           
 12157                           	psect	text45
 12158  0038AE                     __ptext45:
 12159                           	opt stack 0
 12160  0038AE                     _vscp_handleSetNickname:
 12161                           	opt stack 25
 12162                           
 12163                           ; BSR set to: 0
 12164                           ;vscp_firmware.c: 415: if ((2 == (vscp_imsg.flags & 0x0f)) &&
 12165                           ;vscp_firmware.c: 416: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12166                           
 12167                           ;incstack = 0
 12168                           ;incstack = 0
 12169  0038AE  5196               	movf	_vscp_imsg& (0+255),w,b
 12170  0038B0  0B0F               	andlw	15
 12171  0038B2  0A02               	xorlw	2
 12172  0038B4  E10D               	bnz	l1084
 12173                           
 12174                           ; BSR set to: 0
 12175  0038B6  5191               	movf	_vscp_nickname& (0+255),w,b
 12176  0038B8  EE20  F09C         	lfsr	2,_vscp_imsg+6
 12177  0038BC  62DF               	cpfseq	indf2,c
 12178  0038BE  D008               	goto	l1084
 12179                           
 12180                           ; BSR set to: 0
 12181                           ;vscp_firmware.c: 419: vscp_nickname = vscp_imsg.data[ 1 ];
 12182  0038C0  C09D  F091         	movff	_vscp_imsg+7,_vscp_nickname
 12183                           
 12184                           ; BSR set to: 0
 12185                           ;vscp_firmware.c: 420: vscp_writeNicknamePermanent(vscp_nickname);
 12186  0038C4  5191               	movf	_vscp_nickname& (0+255),w,b
 12187  0038C6  EC5A  F01D         	call	_vscp_writeNicknamePermanent
 12188                           
 12189                           ;vscp_firmware.c: 421: vscp_setSegmentCRC(0x40);
 12190  0038CA  0E40               	movlw	64
 12191  0038CC  EC51  F01D         	call	_vscp_setSegmentCRC
 12192  0038D0                     l1084:
 12193  0038D0  0012               	return	
 12194  0038D2                     __end_of_vscp_handleSetNickname:
 12195                           	opt stack 0
 12196                           tblptru	equ	0xFF8
 12197                           tblptrh	equ	0xFF7
 12198                           tblptrl	equ	0xFF6
 12199                           tablat	equ	0xFF5
 12200                           prodh	equ	0xFF4
 12201                           prodl	equ	0xFF3
 12202                           intcon	equ	0xFF2
 12203                           postinc0	equ	0xFEE
 12204                           wreg	equ	0xFE8
 12205                           indf1	equ	0xFE7
 12206                           fsr1h	equ	0xFE2
 12207                           fsr1l	equ	0xFE1
 12208                           indf2	equ	0xFDF
 12209                           postinc2	equ	0xFDE
 12210                           postdec2	equ	0xFDD
 12211                           plusw2	equ	0xFDB
 12212                           fsr2h	equ	0xFDA
 12213                           fsr2l	equ	0xFD9
 12214                           status	equ	0xFD8
 12215                           
 12216 ;; *************** function _vscp_handleHeartbeat *****************
 12217 ;; Defined at:
 12218 ;;		line 388 in file "../../vscp_firmware/common/vscp_firmware.c"
 12219 ;; Parameters:    Size  Location     Type
 12220 ;;		None
 12221 ;; Auto vars:     Size  Location     Type
 12222 ;;		None
 12223 ;; Return value:  Size  Location     Type
 12224 ;;		None               void
 12225 ;; Registers used:
 12226 ;;		wreg, status,2, status,0, cstack
 12227 ;; Tracked objects:
 12228 ;;		On entry : F/0
 12229 ;;		On exit  : 0/0
 12230 ;;		Unchanged: 0/0
 12231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12232 ;;      Params:         0       0       0       0       0       0       0
 12233 ;;      Locals:         0       0       0       0       0       0       0
 12234 ;;      Temps:          0       0       0       0       0       0       0
 12235 ;;      Totals:         0       0       0       0       0       0       0
 12236 ;;Total ram usage:        0 bytes
 12237 ;; Hardware stack levels used:    1
 12238 ;; Hardware stack levels required when called:    4
 12239 ;; This function calls:
 12240 ;;		_vscp_writeNicknamePermanent
 12241 ;;		_vscp_getSegmentCRC
 12242 ;;		_vscp_setSegmentCRC
 12243 ;; This function is called by:
 12244 ;;		_vscp_handleProtocolEvent
 12245 ;; This function uses a non-reentrant model
 12246 ;;
 12247                           
 12248                           	psect	text46
 12249  0036E8                     __ptext46:
 12250                           	opt stack 0
 12251  0036E8                     _vscp_handleHeartbeat:
 12252                           	opt stack 25
 12253                           
 12254                           ; BSR set to: 0
 12255                           ;vscp_firmware.c: 389: if ( !vscp_getSegmentCRC() ) {
 12256                           
 12257                           ;incstack = 0
 12258                           ;incstack = 0
 12259  0036E8  EC97  F01D         	call	_vscp_getSegmentCRC	;wreg free
 12260  0036EC  0900               	iorlw	0
 12261  0036EE  E116               	bnz	l8945
 12262                           
 12263                           ;vscp_firmware.c: 390: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 12264                           ;vscp_firmware.c: 391: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 12265  0036F0  0100               	movlb	0	; () banked
 12266  0036F2  5196               	movf	_vscp_imsg& (0+255),w,b
 12267  0036F4  0B0F               	andlw	15
 12268  0036F6  0A05               	xorlw	5
 12269  0036F8  E115               	bnz	l1080
 12270                           
 12271                           ; BSR set to: 0
 12272  0036FA  EC97  F01D         	call	_vscp_getSegmentCRC	;wreg free
 12273  0036FE  0100               	movlb	0	; () banked
 12274  003700  199C               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 12275  003702  E010               	bz	l1080
 12276                           
 12277                           ; BSR set to: 0
 12278                           ;vscp_firmware.c: 395: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12279  003704  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 12280  003706  EC51  F01D         	call	_vscp_setSegmentCRC
 12281                           
 12282                           ;vscp_firmware.c: 398: vscp_nickname = 0xff;
 12283  00370A  0100               	movlb	0	; () banked
 12284  00370C  6991               	setf	_vscp_nickname& (0+255),b
 12285                           
 12286                           ;vscp_firmware.c: 399: vscp_writeNicknamePermanent(0xff);
 12287  00370E  0EFF               	movlw	255
 12288  003710  EC5A  F01D         	call	_vscp_writeNicknamePermanent
 12289                           
 12290                           ;vscp_firmware.c: 400: vscp_node_state = 0x01;
 12291  003714  0E01               	movlw	1
 12292  003716  0100               	movlb	0	; () banked
 12293  003718  6F92               	movwf	_vscp_node_state& (0+255),b
 12294  00371A  D004               	goto	l1080
 12295  00371C                     l8945:
 12296                           
 12297                           ;vscp_firmware.c: 403: else {
 12298                           ;vscp_firmware.c: 405: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12299  00371C  0100               	movlb	0	; () banked
 12300  00371E  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 12301  003720  EC51  F01D         	call	_vscp_setSegmentCRC
 12302  003724                     l1080:
 12303  003724  0012               	return	
 12304  003726                     __end_of_vscp_handleHeartbeat:
 12305                           	opt stack 0
 12306                           tblptru	equ	0xFF8
 12307                           tblptrh	equ	0xFF7
 12308                           tblptrl	equ	0xFF6
 12309                           tablat	equ	0xFF5
 12310                           prodh	equ	0xFF4
 12311                           prodl	equ	0xFF3
 12312                           intcon	equ	0xFF2
 12313                           postinc0	equ	0xFEE
 12314                           wreg	equ	0xFE8
 12315                           indf1	equ	0xFE7
 12316                           fsr1h	equ	0xFE2
 12317                           fsr1l	equ	0xFE1
 12318                           indf2	equ	0xFDF
 12319                           postinc2	equ	0xFDE
 12320                           postdec2	equ	0xFDD
 12321                           plusw2	equ	0xFDB
 12322                           fsr2h	equ	0xFDA
 12323                           fsr2l	equ	0xFD9
 12324                           status	equ	0xFD8
 12325                           
 12326 ;; *************** function _vscp_getMatrixInfo *****************
 12327 ;; Defined at:
 12328 ;;		line 2437 in file "../main.c"
 12329 ;; Parameters:    Size  Location     Type
 12330 ;;  pData           1    wreg     PTR unsigned char 
 12331 ;;		 -> vscp_omsg(13), 
 12332 ;; Auto vars:     Size  Location     Type
 12333 ;;  pData           1    0[COMRAM] PTR unsigned char 
 12334 ;;		 -> vscp_omsg(13), 
 12335 ;;  i               1    7[COMRAM] unsigned char 
 12336 ;; Return value:  Size  Location     Type
 12337 ;;		None               void
 12338 ;; Registers used:
 12339 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12340 ;; Tracked objects:
 12341 ;;		On entry : F/0
 12342 ;;		On exit  : F/0
 12343 ;;		Unchanged: 0/0
 12344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12345 ;;      Params:         0       0       0       0       0       0       0
 12346 ;;      Locals:         1       0       0       0       0       0       0
 12347 ;;      Temps:          0       0       0       0       0       0       0
 12348 ;;      Totals:         1       0       0       0       0       0       0
 12349 ;;Total ram usage:        1 bytes
 12350 ;; Hardware stack levels used:    1
 12351 ;; Hardware stack levels required when called:    2
 12352 ;; This function calls:
 12353 ;;		Nothing
 12354 ;; This function is called by:
 12355 ;;		_vscp_handleProtocolEvent
 12356 ;; This function uses a non-reentrant model
 12357 ;;
 12358                           
 12359                           	psect	text47
 12360  00397E                     __ptext47:
 12361                           	opt stack 0
 12362  00397E                     _vscp_getMatrixInfo:
 12363                           	opt stack 27
 12364                           
 12365                           ; BSR set to: 0
 12366                           ;main.c: 2438: uint8_t i;
 12367                           ;main.c: 2440: vscp_omsg.data[ 0 ] = 7;
 12368                           
 12369                           ;incstack = 0
 12370                           ;incstack = 0
 12371  00397E  0E07               	movlw	7
 12372  003980  6FA9               	movwf	(_vscp_omsg+5)& (0+255),b
 12373                           
 12374                           ;main.c: 2441: vscp_omsg.data[ 1 ] = 72;
 12375  003982  0E48               	movlw	72
 12376  003984  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
 12377                           
 12378                           ;main.c: 2444: for ( i = 2; i < 8; i++ ) {
 12379  003986  0E02               	movlw	2
 12380  003988  6E08               	movwf	vscp_getMatrixInfo@i,c
 12381  00398A                     l6437:
 12382                           
 12383                           ; BSR set to: 0
 12384                           ;main.c: 2445: vscp_omsg.data[ i ] = 0;
 12385  00398A  5008               	movf	vscp_getMatrixInfo@i,w,c
 12386  00398C  0FA9               	addlw	low (_vscp_omsg+5)
 12387  00398E  6ED9               	movwf	fsr2l,c
 12388  003990  6ADA               	clrf	fsr2h,c
 12389  003992  6ADF               	clrf	indf2,c
 12390                           
 12391                           ; BSR set to: 0
 12392  003994  2A08               	incf	vscp_getMatrixInfo@i,f,c
 12393                           
 12394                           ; BSR set to: 0
 12395  003996  0E07               	movlw	7
 12396  003998  6408               	cpfsgt	vscp_getMatrixInfo@i,c
 12397  00399A  D7F7               	goto	l6437
 12398                           
 12399                           ; BSR set to: 0
 12400  00399C  0C07               	retlw	7
 12401  00399E                     __end_of_vscp_getMatrixInfo:
 12402                           	opt stack 0
 12403                           tblptru	equ	0xFF8
 12404                           tblptrh	equ	0xFF7
 12405                           tblptrl	equ	0xFF6
 12406                           tablat	equ	0xFF5
 12407                           prodh	equ	0xFF4
 12408                           prodl	equ	0xFF3
 12409                           intcon	equ	0xFF2
 12410                           postinc0	equ	0xFEE
 12411                           wreg	equ	0xFE8
 12412                           indf1	equ	0xFE7
 12413                           fsr1h	equ	0xFE2
 12414                           fsr1l	equ	0xFE1
 12415                           indf2	equ	0xFDF
 12416                           postinc2	equ	0xFDE
 12417                           postdec2	equ	0xFDD
 12418                           plusw2	equ	0xFDB
 12419                           fsr2h	equ	0xFDA
 12420                           fsr2l	equ	0xFD9
 12421                           status	equ	0xFD8
 12422                           
 12423 ;; *************** function _vscp_goBootloaderMode *****************
 12424 ;; Defined at:
 12425 ;;		line 2421 in file "../main.c"
 12426 ;; Parameters:    Size  Location     Type
 12427 ;;  algorithm       1    wreg     unsigned char 
 12428 ;; Auto vars:     Size  Location     Type
 12429 ;;  algorithm       1   10[COMRAM] unsigned char 
 12430 ;; Return value:  Size  Location     Type
 12431 ;;		None               void
 12432 ;; Registers used:
 12433 ;;		wreg, status,2, status,0, cstack
 12434 ;; Tracked objects:
 12435 ;;		On entry : F/0
 12436 ;;		On exit  : 0/0
 12437 ;;		Unchanged: 0/0
 12438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12439 ;;      Params:         0       0       0       0       0       0       0
 12440 ;;      Locals:         1       0       0       0       0       0       0
 12441 ;;      Temps:          0       0       0       0       0       0       0
 12442 ;;      Totals:         1       0       0       0       0       0       0
 12443 ;;Total ram usage:        1 bytes
 12444 ;; Hardware stack levels used:    1
 12445 ;; Hardware stack levels required when called:    3
 12446 ;; This function calls:
 12447 ;;		_writeEEPROM
 12448 ;; This function is called by:
 12449 ;;		_vscp_handleProtocolEvent
 12450 ;; This function uses a non-reentrant model
 12451 ;;
 12452                           
 12453                           	psect	text48
 12454  003A24                     __ptext48:
 12455                           	opt stack 0
 12456  003A24                     _vscp_goBootloaderMode:
 12457                           	opt stack 26
 12458                           
 12459                           ; BSR set to: 0
 12460                           ;incstack = 0
 12461                           ;incstack = 0
 12462                           ;vscp_goBootloaderMode@algorithm stored from wreg
 12463  003A24  CFE8 F00B          	movff	wreg,vscp_goBootloaderMode@algorithm
 12464                           
 12465                           ; BSR set to: 0
 12466                           ;main.c: 2422: if ( 0x01 != algorithm ) return;
 12467  003A28  040B               	decf	vscp_goBootloaderMode@algorithm,w,c
 12468  003A2A  E107               	bnz	l622
 12469                           
 12470                           ; BSR set to: 0
 12471                           ;main.c: 2426: writeEEPROM(0x00, 0xff);
 12472  003A2C  6A09               	clrf	?_writeEEPROM+1,c
 12473  003A2E  6A08               	clrf	?_writeEEPROM,c
 12474  003A30  0EFF               	movlw	255
 12475  003A32  680A               	setf	?_writeEEPROM+2,c
 12476  003A34  EC44  F01C         	call	_writeEEPROM	;wreg free
 12477  003A38  00FF               	reset		;# 
 12478  003A3A                     l622:
 12479  003A3A  0012               	return	
 12480  003A3C                     __end_of_vscp_goBootloaderMode:
 12481                           	opt stack 0
 12482                           tblptru	equ	0xFF8
 12483                           tblptrh	equ	0xFF7
 12484                           tblptrl	equ	0xFF6
 12485                           tablat	equ	0xFF5
 12486                           prodh	equ	0xFF4
 12487                           prodl	equ	0xFF3
 12488                           intcon	equ	0xFF2
 12489                           postinc0	equ	0xFEE
 12490                           wreg	equ	0xFE8
 12491                           indf1	equ	0xFE7
 12492                           fsr1h	equ	0xFE2
 12493                           fsr1l	equ	0xFE1
 12494                           indf2	equ	0xFDF
 12495                           postinc2	equ	0xFDE
 12496                           postdec2	equ	0xFDD
 12497                           plusw2	equ	0xFDB
 12498                           fsr2h	equ	0xFDA
 12499                           fsr2l	equ	0xFD9
 12500                           status	equ	0xFD8
 12501                           
 12502 ;; *************** function _vscp_handleProbeState *****************
 12503 ;; Defined at:
 12504 ;;		line 200 in file "../../vscp_firmware/common/vscp_firmware.c"
 12505 ;; Parameters:    Size  Location     Type
 12506 ;;		None
 12507 ;; Auto vars:     Size  Location     Type
 12508 ;;		None
 12509 ;; Return value:  Size  Location     Type
 12510 ;;		None               void
 12511 ;; Registers used:
 12512 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12513 ;; Tracked objects:
 12514 ;;		On entry : 0/0
 12515 ;;		On exit  : F/0
 12516 ;;		Unchanged: 0/0
 12517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12518 ;;      Params:         0       0       0       0       0       0       0
 12519 ;;      Locals:         0       0       0       0       0       0       0
 12520 ;;      Temps:          0       0       0       0       0       0       0
 12521 ;;      Totals:         0       0       0       0       0       0       0
 12522 ;;Total ram usage:        0 bytes
 12523 ;; Hardware stack levels used:    1
 12524 ;; Hardware stack levels required when called:    8
 12525 ;; This function calls:
 12526 ;;		_vscp_goActiveState
 12527 ;;		_vscp_writeNicknamePermanent
 12528 ;;		_vscp_sendEvent
 12529 ;;		_vscp_setSegmentCRC
 12530 ;; This function is called by:
 12531 ;;		_main
 12532 ;; This function uses a non-reentrant model
 12533 ;;
 12534                           
 12535                           	psect	text49
 12536  003194                     __ptext49:
 12537                           	opt stack 0
 12538  003194                     _vscp_handleProbeState:
 12539                           	opt stack 22
 12540                           
 12541                           ;vscp_firmware.c: 201: switch (vscp_node_substate) {
 12542                           
 12543                           ;incstack = 0
 12544                           ;incstack = 0
 12545  003194  D053               	goto	l7373
 12546  003196                     l7303:
 12547                           
 12548                           ; BSR set to: 0
 12549                           ;vscp_firmware.c: 205: if (0xff != vscp_probe_address) {
 12550  003196  2857               	incf	_vscp_probe_address,w,c
 12551  003198  E010               	bz	l7319
 12552                           
 12553                           ; BSR set to: 0
 12554                           ;vscp_firmware.c: 207: vscp_omsg.flags = 0x80 + 1;
 12555  00319A  0E81               	movlw	129
 12556  00319C  6FA4               	movwf	_vscp_omsg& (0+255),b
 12557                           
 12558                           ; BSR set to: 0
 12559                           ;vscp_firmware.c: 208: vscp_omsg.priority = 0x00;
 12560  00319E  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12561                           
 12562                           ; BSR set to: 0
 12563                           ;vscp_firmware.c: 209: vscp_omsg.vscp_class = 0;
 12564  0031A0  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12565  0031A2  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12566                           
 12567                           ;vscp_firmware.c: 210: vscp_omsg.vscp_type = 2;
 12568  0031A4  0E02               	movlw	2
 12569  0031A6  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12570                           
 12571                           ; BSR set to: 0
 12572                           ;vscp_firmware.c: 211: vscp_omsg.data[ 0 ] = vscp_probe_address;
 12573  0031A8  C057  F0A9         	movff	_vscp_probe_address,_vscp_omsg+5
 12574                           
 12575                           ; BSR set to: 0
 12576                           ;vscp_firmware.c: 214: vscp_sendEvent();
 12577  0031AC  EC31  F01C         	call	_vscp_sendEvent	;wreg free
 12578                           
 12579                           ; BSR set to: 0
 12580                           ;vscp_firmware.c: 216: vscp_node_substate = 0x01;
 12581  0031B0  0E01               	movlw	1
 12582  0031B2  6F93               	movwf	_vscp_node_substate& (0+255),b
 12583  0031B4                     l7317:
 12584                           
 12585                           ; BSR set to: 0
 12586                           ;vscp_firmware.c: 217: vscp_timer = 0;
 12587  0031B4  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12588  0031B6  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12589                           
 12590                           ;vscp_firmware.c: 219: } else {
 12591  0031B8  D048               	goto	l1047
 12592  0031BA                     l7319:
 12593                           
 12594                           ; BSR set to: 0
 12595                           ;vscp_firmware.c: 222: vscp_node_state = 0x04;
 12596  0031BA  0E04               	movlw	4
 12597  0031BC  6F92               	movwf	_vscp_node_state& (0+255),b
 12598                           
 12599                           ;vscp_firmware.c: 225: vscp_omsg.flags = 0x80 + 1;
 12600  0031BE  0E81               	movlw	129
 12601  0031C0  6FA4               	movwf	_vscp_omsg& (0+255),b
 12602                           
 12603                           ; BSR set to: 0
 12604                           ;vscp_firmware.c: 226: vscp_omsg.data[ 0 ] = 0xff;
 12605  0031C2  69A9               	setf	(_vscp_omsg+5)& (0+255),b
 12606                           
 12607                           ;vscp_firmware.c: 227: vscp_omsg.priority = 0x07;
 12608  0031C4  0E07               	movlw	7
 12609  0031C6  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
 12610                           
 12611                           ; BSR set to: 0
 12612                           ;vscp_firmware.c: 228: vscp_omsg.vscp_class = 0;
 12613  0031C8  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12614  0031CA  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12615                           
 12616                           ;vscp_firmware.c: 229: vscp_omsg.vscp_type = 3;
 12617  0031CC  0E03               	movlw	3
 12618  0031CE  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12619                           
 12620                           ; BSR set to: 0
 12621                           ;vscp_firmware.c: 232: vscp_sendEvent();
 12622  0031D0  EC31  F01C         	call	_vscp_sendEvent	;wreg free
 12623  0031D4  D03A               	goto	l1047
 12624  0031D6                     l1048:
 12625                           
 12626                           ; BSR set to: 0
 12627                           ;vscp_firmware.c: 239: if (vscp_imsg.flags & 0x80) {
 12628  0031D6  AF96               	btfss	_vscp_imsg& (0+255),7,b
 12629  0031D8  D00F               	goto	l7343
 12630                           
 12631                           ; BSR set to: 0
 12632                           ;vscp_firmware.c: 242: if ((0 == vscp_imsg.vscp_class) &&
 12633                           ;vscp_firmware.c: 243: (3 == vscp_imsg.vscp_type)) {
 12634  0031DA  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
 12635  0031DC  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 12636  0031DE  E135               	bnz	l1047
 12637                           
 12638                           ; BSR set to: 0
 12639  0031E0  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
 12640  0031E2  0A03               	xorlw	3
 12641  0031E4  E132               	bnz	l1047
 12642                           
 12643                           ; BSR set to: 0
 12644                           ;vscp_firmware.c: 246: if (0 == vscp_probe_address) {
 12645  0031E6  6657               	tstfsz	_vscp_probe_address,c
 12646  0031E8  D003               	goto	l7337
 12647                           
 12648                           ; BSR set to: 0
 12649                           ;vscp_firmware.c: 250: vscp_node_state = 0x02;
 12650  0031EA  0E02               	movlw	2
 12651  0031EC  6F92               	movwf	_vscp_node_state& (0+255),b
 12652  0031EE  D7E2               	goto	l7317
 12653  0031F0                     l7337:
 12654                           
 12655                           ; BSR set to: 0
 12656                           ;vscp_firmware.c: 256: vscp_probe_address++;
 12657  0031F0  2A57               	incf	_vscp_probe_address,f,c
 12658                           
 12659                           ; BSR set to: 0
 12660                           ;vscp_firmware.c: 257: vscp_node_substate = 0x00;
 12661  0031F2  6B93               	clrf	_vscp_node_substate& (0+255),b
 12662  0031F4                     l7341:
 12663                           
 12664                           ; BSR set to: 0
 12665                           ;vscp_firmware.c: 258: vscp_probe_cnt = 0;
 12666  0031F4  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12667  0031F6  D029               	goto	l1047
 12668  0031F8                     l7343:
 12669                           
 12670                           ; BSR set to: 0
 12671                           ;vscp_firmware.c: 264: if (vscp_timer > 1000) {
 12672  0031F8  0EE9               	movlw	233
 12673  0031FA  5D86               	subwf	_vscp_timer& (0+255),w,b	;volatile
 12674  0031FC  0E03               	movlw	3
 12675  0031FE  5987               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 12676  003200  E324               	bnc	l1047
 12677                           
 12678                           ; BSR set to: 0
 12679                           ;vscp_firmware.c: 266: vscp_probe_cnt++;
 12680  003202  2B94               	incf	_vscp_probe_cnt& (0+255),f,b
 12681                           
 12682                           ; BSR set to: 0
 12683                           ;vscp_firmware.c: 268: if (vscp_probe_cnt >= 3) {
 12684  003204  0E02               	movlw	2
 12685  003206  6594               	cpfsgt	_vscp_probe_cnt& (0+255),b
 12686  003208  D017               	goto	l1055
 12687                           
 12688                           ; BSR set to: 0
 12689                           ;vscp_firmware.c: 271: if (0 == vscp_probe_address) {
 12690  00320A  6657               	tstfsz	_vscp_probe_address,c
 12691  00320C  D005               	goto	l1056
 12692                           
 12693                           ; BSR set to: 0
 12694                           ;vscp_firmware.c: 274: vscp_probe_address++;
 12695  00320E  2A57               	incf	_vscp_probe_address,f,c
 12696                           
 12697                           ; BSR set to: 0
 12698                           ;vscp_firmware.c: 275: vscp_node_substate = 0x00;
 12699  003210  6B93               	clrf	_vscp_node_substate& (0+255),b
 12700                           
 12701                           ; BSR set to: 0
 12702                           ;vscp_firmware.c: 276: vscp_timer = 0;
 12703  003212  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12704  003214  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12705  003216  D7EE               	goto	l7341
 12706  003218                     l1056:
 12707                           
 12708                           ; BSR set to: 0
 12709                           ;vscp_firmware.c: 282: vscp_nickname = vscp_probe_address;
 12710  003218  C057  F091         	movff	_vscp_probe_address,_vscp_nickname
 12711                           
 12712                           ; BSR set to: 0
 12713                           ;vscp_firmware.c: 283: vscp_node_state = 0x03;
 12714  00321C  0E03               	movlw	3
 12715  00321E  6F92               	movwf	_vscp_node_state& (0+255),b
 12716                           
 12717                           ; BSR set to: 0
 12718                           ;vscp_firmware.c: 284: vscp_node_substate = 0x00;
 12719  003220  6B93               	clrf	_vscp_node_substate& (0+255),b
 12720                           
 12721                           ; BSR set to: 0
 12722                           ;vscp_firmware.c: 285: vscp_writeNicknamePermanent(vscp_nickname);
 12723  003222  5191               	movf	_vscp_nickname& (0+255),w,b
 12724  003224  EC5A  F01D         	call	_vscp_writeNicknamePermanent
 12725                           
 12726                           ;vscp_firmware.c: 286: vscp_setSegmentCRC(0x40);
 12727  003228  0E40               	movlw	64
 12728  00322A  EC51  F01D         	call	_vscp_setSegmentCRC
 12729                           
 12730                           ;vscp_firmware.c: 289: vscp_probe_cnt = 0;
 12731  00322E  0100               	movlb	0	; () banked
 12732  003230  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12733                           
 12734                           ; BSR set to: 0
 12735                           ;vscp_firmware.c: 290: vscp_goActiveState();
 12736  003232  ECCF  F01C         	call	_vscp_goActiveState	;wreg free
 12737  003236  D009               	goto	l1047
 12738  003238                     l1055:
 12739                           
 12740                           ; BSR set to: 0
 12741                           ;vscp_firmware.c: 294: vscp_node_substate = 0x00;
 12742  003238  6B93               	clrf	_vscp_node_substate& (0+255),b
 12743  00323A  D007               	goto	l1047
 12744  00323C                     l7373:
 12745  00323C  0100               	movlb	0	; () banked
 12746  00323E  5193               	movf	_vscp_node_substate& (0+255),w,b
 12747                           
 12748                           ; Switch size 1, requested type "space"
 12749                           ; Number of cases is 3, Range of values is 0 to 2
 12750                           ; switch strategies available:
 12751                           ; Name         Instructions Cycles
 12752                           ; simple_byte           10     6 (average)
 12753                           ;	Chosen strategy is simple_byte
 12754  003240  E0AA               	bz	l7303
 12755  003242  0A01               	xorlw	1	; case 1
 12756  003244  E0C8               	bz	l1048
 12757  003246  0A03               	xorlw	3	; case 2
 12758  003248  E1F7               	bnz	l1055
 12759  00324A                     l1047:
 12760                           
 12761                           ; BSR set to: 0
 12762                           ;vscp_firmware.c: 309: vscp_imsg.flags = 0;
 12763  00324A  6B96               	clrf	_vscp_imsg& (0+255),b
 12764                           
 12765                           ; BSR set to: 0
 12766  00324C  0012               	return	
 12767  00324E                     __end_of_vscp_handleProbeState:
 12768                           	opt stack 0
 12769                           tblptru	equ	0xFF8
 12770                           tblptrh	equ	0xFF7
 12771                           tblptrl	equ	0xFF6
 12772                           tablat	equ	0xFF5
 12773                           prodh	equ	0xFF4
 12774                           prodl	equ	0xFF3
 12775                           intcon	equ	0xFF2
 12776                           postinc0	equ	0xFEE
 12777                           wreg	equ	0xFE8
 12778                           indf1	equ	0xFE7
 12779                           fsr1h	equ	0xFE2
 12780                           fsr1l	equ	0xFE1
 12781                           indf2	equ	0xFDF
 12782                           postinc2	equ	0xFDE
 12783                           postdec2	equ	0xFDD
 12784                           plusw2	equ	0xFDB
 12785                           fsr2h	equ	0xFDA
 12786                           fsr2l	equ	0xFD9
 12787                           status	equ	0xFD8
 12788                           
 12789 ;; *************** function _vscp_goActiveState *****************
 12790 ;; Defined at:
 12791 ;;		line 350 in file "../../vscp_firmware/common/vscp_firmware.c"
 12792 ;; Parameters:    Size  Location     Type
 12793 ;;		None
 12794 ;; Auto vars:     Size  Location     Type
 12795 ;;		None
 12796 ;; Return value:  Size  Location     Type
 12797 ;;		None               void
 12798 ;; Registers used:
 12799 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12800 ;; Tracked objects:
 12801 ;;		On entry : 0/0
 12802 ;;		On exit  : F/0
 12803 ;;		Unchanged: 0/0
 12804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12805 ;;      Params:         0       0       0       0       0       0       0
 12806 ;;      Locals:         0       0       0       0       0       0       0
 12807 ;;      Temps:          0       0       0       0       0       0       0
 12808 ;;      Totals:         0       0       0       0       0       0       0
 12809 ;;Total ram usage:        0 bytes
 12810 ;; Hardware stack levels used:    1
 12811 ;; Hardware stack levels required when called:    7
 12812 ;; This function calls:
 12813 ;;		_vscp_sendEvent
 12814 ;; This function is called by:
 12815 ;;		_main
 12816 ;;		_vscp_handleProbeState
 12817 ;; This function uses a non-reentrant model
 12818 ;;
 12819                           
 12820                           	psect	text50
 12821  00399E                     __ptext50:
 12822                           	opt stack 0
 12823  00399E                     _vscp_goActiveState:
 12824                           	opt stack 22
 12825                           
 12826                           ;vscp_firmware.c: 351: vscp_omsg.flags = 0x80 + 1;
 12827                           
 12828                           ; BSR set to: 0
 12829                           ;incstack = 0
 12830                           ;incstack = 0
 12831  00399E  0E81               	movlw	129
 12832  0039A0  0100               	movlb	0	; () banked
 12833  0039A2  6FA4               	movwf	_vscp_omsg& (0+255),b
 12834                           
 12835                           ; BSR set to: 0
 12836                           ;vscp_firmware.c: 352: vscp_omsg.priority = 0x00;
 12837  0039A4  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12838                           
 12839                           ; BSR set to: 0
 12840                           ;vscp_firmware.c: 353: vscp_omsg.vscp_class = 0;
 12841  0039A6  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12842  0039A8  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12843                           
 12844                           ;vscp_firmware.c: 354: vscp_omsg.vscp_type = 2;
 12845  0039AA  0E02               	movlw	2
 12846  0039AC  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12847                           
 12848                           ; BSR set to: 0
 12849                           ;vscp_firmware.c: 355: vscp_omsg.data[ 0 ] = vscp_nickname;
 12850  0039AE  C091  F0A9         	movff	_vscp_nickname,_vscp_omsg+5
 12851                           
 12852                           ; BSR set to: 0
 12853                           ;vscp_firmware.c: 358: vscp_sendEvent();
 12854  0039B2  EC31  F01C         	call	_vscp_sendEvent	;wreg free
 12855                           
 12856                           ; BSR set to: 0
 12857                           ;vscp_firmware.c: 360: vscp_initledfunc = 0x01;
 12858  0039B6  0E01               	movlw	1
 12859  0039B8  6E56               	movwf	_vscp_initledfunc,c
 12860                           
 12861                           ; BSR set to: 0
 12862  0039BA  0C01               	retlw	1
 12863  0039BC                     __end_of_vscp_goActiveState:
 12864                           	opt stack 0
 12865                           tblptru	equ	0xFF8
 12866                           tblptrh	equ	0xFF7
 12867                           tblptrl	equ	0xFF6
 12868                           tablat	equ	0xFF5
 12869                           prodh	equ	0xFF4
 12870                           prodl	equ	0xFF3
 12871                           intcon	equ	0xFF2
 12872                           postinc0	equ	0xFEE
 12873                           wreg	equ	0xFE8
 12874                           indf1	equ	0xFE7
 12875                           fsr1h	equ	0xFE2
 12876                           fsr1l	equ	0xFE1
 12877                           indf2	equ	0xFDF
 12878                           postinc2	equ	0xFDE
 12879                           postdec2	equ	0xFDD
 12880                           plusw2	equ	0xFDB
 12881                           fsr2h	equ	0xFDA
 12882                           fsr2l	equ	0xFD9
 12883                           status	equ	0xFD8
 12884                           
 12885 ;; *************** function _vscp_sendEvent *****************
 12886 ;; Defined at:
 12887 ;;		line 1270 in file "../../vscp_firmware/common/vscp_firmware.c"
 12888 ;; Parameters:    Size  Location     Type
 12889 ;;		None
 12890 ;; Auto vars:     Size  Location     Type
 12891 ;;  rv              1    0        unsigned char 
 12892 ;; Return value:  Size  Location     Type
 12893 ;;                  1    wreg      unsigned char 
 12894 ;; Registers used:
 12895 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12896 ;; Tracked objects:
 12897 ;;		On entry : F/0
 12898 ;;		On exit  : F/0
 12899 ;;		Unchanged: 0/0
 12900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12901 ;;      Params:         0       0       0       0       0       0       0
 12902 ;;      Locals:         1       0       0       0       0       0       0
 12903 ;;      Temps:          0       0       0       0       0       0       0
 12904 ;;      Totals:         1       0       0       0       0       0       0
 12905 ;;Total ram usage:        1 bytes
 12906 ;; Hardware stack levels used:    1
 12907 ;; Hardware stack levels required when called:    6
 12908 ;; This function calls:
 12909 ;;		_sendVSCPFrame
 12910 ;; This function is called by:
 12911 ;;		_vscp_handleProbeState
 12912 ;;		_vscp_goActiveState
 12913 ;;		_vscp_sendHeartBeat
 12914 ;;		_vscp_newNodeOnline
 12915 ;;		_vscp_handleProtocolEvent
 12916 ;; This function uses a non-reentrant model
 12917 ;;
 12918                           
 12919                           	psect	text51
 12920  003862                     __ptext51:
 12921                           	opt stack 0
 12922  003862                     _vscp_sendEvent:
 12923                           	opt stack 22
 12924                           
 12925                           ; BSR set to: 0
 12926                           
 12927                           ; BSR set to: 0
 12928                           ;incstack = 0
 12929                           ;incstack = 0
 12930  003862  C0A6  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
 12931  003866  C0A7  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 12932  00386A  C0A8  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 12933  00386E  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 12934  003872  C0A5  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 12935  003876  51A4               	movf	_vscp_omsg& (0+255),w,b
 12936  003878  0B0F               	andlw	15
 12937  00387A  6E44               	movwf	?_sendVSCPFrame+5,c
 12938  00387C  0E00               	movlw	high (_vscp_omsg+5)
 12939  00387E  6E46               	movwf	?_sendVSCPFrame+7,c
 12940  003880  0EA9               	movlw	low (_vscp_omsg+5)
 12941  003882  6E45               	movwf	?_sendVSCPFrame+6,c
 12942  003884  EF27  F019         	goto	_sendVSCPFrame	;wreg free
 12943  003888                     __end_of_vscp_sendEvent:
 12944                           	opt stack 0
 12945                           tblptru	equ	0xFF8
 12946                           tblptrh	equ	0xFF7
 12947                           tblptrl	equ	0xFF6
 12948                           tablat	equ	0xFF5
 12949                           prodh	equ	0xFF4
 12950                           prodl	equ	0xFF3
 12951                           intcon	equ	0xFF2
 12952                           postinc0	equ	0xFEE
 12953                           wreg	equ	0xFE8
 12954                           indf1	equ	0xFE7
 12955                           fsr1h	equ	0xFE2
 12956                           fsr1l	equ	0xFE1
 12957                           indf2	equ	0xFDF
 12958                           postinc2	equ	0xFDE
 12959                           postdec2	equ	0xFDD
 12960                           plusw2	equ	0xFDB
 12961                           fsr2h	equ	0xFDA
 12962                           fsr2l	equ	0xFD9
 12963                           status	equ	0xFD8
 12964                           
 12965 ;; *************** function _sendVSCPFrame *****************
 12966 ;; Defined at:
 12967 ;;		line 2496 in file "../main.c"
 12968 ;; Parameters:    Size  Location     Type
 12969 ;;  vscpclass       2   62[COMRAM] unsigned short 
 12970 ;;  vscptype        1   64[COMRAM] unsigned char 
 12971 ;;  nodeid          1   65[COMRAM] unsigned char 
 12972 ;;  priority        1   66[COMRAM] unsigned char 
 12973 ;;  size            1   67[COMRAM] unsigned char 
 12974 ;;  pData           2   68[COMRAM] PTR unsigned char 
 12975 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 12976 ;; Auto vars:     Size  Location     Type
 12977 ;;  id              4   70[COMRAM] unsigned long 
 12978 ;; Return value:  Size  Location     Type
 12979 ;;                  1    wreg      unsigned char 
 12980 ;; Registers used:
 12981 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12982 ;; Tracked objects:
 12983 ;;		On entry : F/0
 12984 ;;		On exit  : F/0
 12985 ;;		Unchanged: 0/0
 12986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12987 ;;      Params:         8       0       0       0       0       0       0
 12988 ;;      Locals:         4       0       0       0       0       0       0
 12989 ;;      Temps:          0      20       0       0       0       0       0
 12990 ;;      Totals:        12      20       0       0       0       0       0
 12991 ;;Total ram usage:       32 bytes
 12992 ;; Hardware stack levels used:    1
 12993 ;; Hardware stack levels required when called:    5
 12994 ;; This function calls:
 12995 ;;		_sendCANFrame
 12996 ;; This function is called by:
 12997 ;;		_SendInformationEvent
 12998 ;;		_vscp_sendEvent
 12999 ;; This function uses a non-reentrant model
 13000 ;;
 13001                           
 13002                           	psect	text52
 13003  00324E                     __ptext52:
 13004                           	opt stack 0
 13005  00324E                     _sendVSCPFrame:
 13006                           	opt stack 23
 13007                           
 13008                           ; BSR set to: 0
 13009                           ;main.c: 2497: uint32_t id = ( (uint32_t)priority << 26 ) |
 13010                           ;main.c: 2498: ( (uint32_t)vscpclass << 16 ) |
 13011                           ;main.c: 2499: ( (uint32_t)vscptype << 8 ) |
 13012                           ;main.c: 2500: nodeid;
 13013                           
 13014                           ; BSR set to: 0
 13015                           ;incstack = 0
 13016                           ;incstack = 0
 13017  00324E  C041  F0B1         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 13018  003252  6BB2               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 13019  003254  6BB3               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 13020  003256  6BB4               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 13021  003258  C0B3  F0B4         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 13022  00325C  C0B2  F0B3         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 13023  003260  C0B1  F0B2         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 13024  003264  6BB1               	clrf	??_sendVSCPFrame& (0+255),b
 13025  003266  503F               	movf	sendVSCPFrame@vscpclass,w,c
 13026  003268  6FB5               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 13027  00326A  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
 13028  00326C  6FB6               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 13029  00326E  6BB7               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 13030  003270  6BB8               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 13031  003272  C0B6  F0B8         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 13032  003276  C0B5  F0B7         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 13033  00327A  6BB6               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 13034  00327C  6BB5               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 13035  00327E  C043  F0B9         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 13036  003282  6BBA               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 13037  003284  6BBB               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 13038  003286  6BBC               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 13039  003288  0E1A               	movlw	26
 13040  00328A                     u9955:
 13041  00328A  90D8               	bcf	status,0,c
 13042  00328C  37B9               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 13043  00328E  37BA               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 13044  003290  37BB               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 13045  003292  37BC               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 13046  003294  2EE8               	decfsz	wreg,f,c
 13047  003296  D7F9               	goto	u9955
 13048  003298  51B5               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 13049  00329A  11B9               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 13050  00329C  6FBD               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 13051  00329E  51B6               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 13052  0032A0  11BA               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 13053  0032A2  6FBE               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 13054  0032A4  51B7               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 13055  0032A6  11BB               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 13056  0032A8  6FBF               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 13057  0032AA  51B8               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 13058  0032AC  11BC               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 13059  0032AE  6FC0               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 13060  0032B0  51B1               	movf	??_sendVSCPFrame& (0+255),w,b
 13061  0032B2  11BD               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 13062  0032B4  6FC1               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 13063  0032B6  51B2               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 13064  0032B8  11BE               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 13065  0032BA  6FC2               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 13066  0032BC  51B3               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 13067  0032BE  11BF               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 13068  0032C0  6FC3               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 13069  0032C2  51B4               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 13070  0032C4  11C0               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 13071  0032C6  6FC4               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 13072  0032C8  5042               	movf	sendVSCPFrame@nodeid,w,c
 13073  0032CA  11C1               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 13074  0032CC  6E47               	movwf	sendVSCPFrame@id,c
 13075  0032CE  51C2               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 13076  0032D0  6E48               	movwf	sendVSCPFrame@id+1,c
 13077  0032D2  51C3               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 13078  0032D4  6E49               	movwf	sendVSCPFrame@id+2,c
 13079  0032D6  51C4               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 13080  0032D8  6E4A               	movwf	sendVSCPFrame@id+3,c
 13081                           
 13082                           ; BSR set to: 0
 13083                           ;main.c: 2502: if ( !sendCANFrame( id, size, pData ) ) {
 13084  0032DA  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
 13085  0032DE  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 13086  0032E2  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 13087  0032E6  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 13088  0032EA  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 13089  0032EE  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 13090  0032F2  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 13091  0032F6  EC54  F01B         	call	_sendCANFrame	;wreg free
 13092  0032FA  0900               	iorlw	0
 13093                           
 13094                           ; BSR set to: 0
 13095                           ;main.c: 2503: return 0;
 13096  0032FC  0E00               	movlw	0
 13097  0032FE  A4D8               	btfss	status,2,c
 13098                           
 13099                           ; BSR set to: 0
 13100                           ;main.c: 2504: }
 13101                           ;main.c: 2506: return 1;
 13102  003300  0E01               	movlw	1
 13103                           
 13104                           ; BSR set to: 0
 13105  003302  0012               	return	
 13106  003304                     __end_of_sendVSCPFrame:
 13107                           	opt stack 0
 13108                           tblptru	equ	0xFF8
 13109                           tblptrh	equ	0xFF7
 13110                           tblptrl	equ	0xFF6
 13111                           tablat	equ	0xFF5
 13112                           prodh	equ	0xFF4
 13113                           prodl	equ	0xFF3
 13114                           intcon	equ	0xFF2
 13115                           postinc0	equ	0xFEE
 13116                           wreg	equ	0xFE8
 13117                           indf1	equ	0xFE7
 13118                           fsr1h	equ	0xFE2
 13119                           fsr1l	equ	0xFE1
 13120                           indf2	equ	0xFDF
 13121                           postinc2	equ	0xFDE
 13122                           postdec2	equ	0xFDD
 13123                           plusw2	equ	0xFDB
 13124                           fsr2h	equ	0xFDA
 13125                           fsr2l	equ	0xFD9
 13126                           status	equ	0xFD8
 13127                           
 13128 ;; *************** function _sendCANFrame *****************
 13129 ;; Defined at:
 13130 ;;		line 2541 in file "../main.c"
 13131 ;; Parameters:    Size  Location     Type
 13132 ;;  id              4   54[COMRAM] unsigned long 
 13133 ;;  dlc             1   58[COMRAM] unsigned char 
 13134 ;;  pdata           2   59[COMRAM] PTR unsigned char 
 13135 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13136 ;; Auto vars:     Size  Location     Type
 13137 ;;  rv              1   61[COMRAM] unsigned char 
 13138 ;; Return value:  Size  Location     Type
 13139 ;;                  1    wreg      unsigned char 
 13140 ;; Registers used:
 13141 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13142 ;; Tracked objects:
 13143 ;;		On entry : F/0
 13144 ;;		On exit  : F/0
 13145 ;;		Unchanged: 0/0
 13146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13147 ;;      Params:         7       0       0       0       0       0       0
 13148 ;;      Locals:         1       0       0       0       0       0       0
 13149 ;;      Temps:          0       0       0       0       0       0       0
 13150 ;;      Totals:         8       0       0       0       0       0       0
 13151 ;;Total ram usage:        8 bytes
 13152 ;; Hardware stack levels used:    1
 13153 ;; Hardware stack levels required when called:    4
 13154 ;; This function calls:
 13155 ;;		_ECANSendMessage
 13156 ;; This function is called by:
 13157 ;;		_sendVSCPFrame
 13158 ;; This function uses a non-reentrant model
 13159 ;;
 13160                           
 13161                           	psect	text53
 13162  0036A8                     __ptext53:
 13163                           	opt stack 0
 13164  0036A8                     _sendCANFrame:
 13165                           	opt stack 23
 13166                           
 13167                           ; BSR set to: 0
 13168                           ;main.c: 2542: uint8_t rv = 0;
 13169                           
 13170                           ; BSR set to: 0
 13171                           ;incstack = 0
 13172                           ;incstack = 0
 13173  0036A8  6A3E               	clrf	sendCANFrame@rv,c
 13174                           
 13175                           ;main.c: 2543: sendTimer = 0;
 13176  0036AA  6A55               	clrf	_sendTimer,c
 13177                           
 13178                           ;main.c: 2545: while ( sendTimer < 1 ) {
 13179  0036AC  D017               	goto	l8817
 13180  0036AE                     l8813:
 13181                           
 13182                           ;main.c: 2546: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 13183  0036AE  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
 13184  0036B2  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 13185  0036B6  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 13186  0036BA  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 13187  0036BE  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 13188  0036C2  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 13189  0036C6  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 13190  0036CA  0E20               	movlw	32
 13191  0036CC  6E19               	movwf	?_ECANSendMessage+7,c
 13192  0036CE  EC24  F014         	call	_ECANSendMessage	;wreg free
 13193  0036D2  0900               	iorlw	0
 13194  0036D4  E003               	bz	l8817
 13195                           
 13196                           ;main.c: 2547: rv = 1;
 13197  0036D6  0E01               	movlw	1
 13198  0036D8  6E3E               	movwf	sendCANFrame@rv,c
 13199                           
 13200                           ;main.c: 2548: break;
 13201  0036DA  D002               	goto	l653
 13202  0036DC                     l8817:
 13203  0036DC  5055               	movf	_sendTimer,w,c
 13204  0036DE  E0E7               	bz	l8813
 13205  0036E0                     l653:
 13206                           
 13207                           ;main.c: 2549: }
 13208                           ;main.c: 2550: }
 13209                           ;main.c: 2552: vscp_omsg.flags = 0;
 13210  0036E0  0100               	movlb	0	; () banked
 13211  0036E2  6BA4               	clrf	_vscp_omsg& (0+255),b
 13212                           
 13213                           ; BSR set to: 0
 13214                           ;main.c: 2554: return rv;
 13215  0036E4  503E               	movf	sendCANFrame@rv,w,c
 13216                           
 13217                           ; BSR set to: 0
 13218  0036E6  0012               	return	
 13219  0036E8                     __end_of_sendCANFrame:
 13220                           	opt stack 0
 13221                           tblptru	equ	0xFF8
 13222                           tblptrh	equ	0xFF7
 13223                           tblptrl	equ	0xFF6
 13224                           tablat	equ	0xFF5
 13225                           prodh	equ	0xFF4
 13226                           prodl	equ	0xFF3
 13227                           intcon	equ	0xFF2
 13228                           postinc0	equ	0xFEE
 13229                           wreg	equ	0xFE8
 13230                           indf1	equ	0xFE7
 13231                           fsr1h	equ	0xFE2
 13232                           fsr1l	equ	0xFE1
 13233                           indf2	equ	0xFDF
 13234                           postinc2	equ	0xFDE
 13235                           postdec2	equ	0xFDD
 13236                           plusw2	equ	0xFDB
 13237                           fsr2h	equ	0xFDA
 13238                           fsr2l	equ	0xFD9
 13239                           status	equ	0xFD8
 13240                           
 13241 ;; *************** function _ECANSendMessage *****************
 13242 ;; Defined at:
 13243 ;;		line 617 in file "../ECAN.c"
 13244 ;; Parameters:    Size  Location     Type
 13245 ;;  id              4   17[COMRAM] unsigned long 
 13246 ;;  data            2   21[COMRAM] PTR unsigned char 
 13247 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13248 ;;  dataLen         1   23[COMRAM] unsigned char 
 13249 ;;  msgFlags        1   24[COMRAM] enum E16306
 13250 ;; Auto vars:     Size  Location     Type
 13251 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
 13252 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13253 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13254 ;;		 -> B0CON(1), 
 13255 ;;  ptr             2   52[COMRAM] PTR unsigned char 
 13256 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13257 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13258 ;;		 -> B0CON(1), 
 13259 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
 13260 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13261 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13262 ;;		 -> B0CON(1), 
 13263 ;;  i               1   51[COMRAM] unsigned char 
 13264 ;;  temp            1   50[COMRAM] unsigned char 
 13265 ;;  tempBSEL0       1   47[COMRAM] struct .
 13266 ;;  j               1   46[COMRAM] unsigned char 
 13267 ;;  buffers         1   45[COMRAM] unsigned char 
 13268 ;;  mode            1   44[COMRAM] unsigned char 
 13269 ;; Return value:  Size  Location     Type
 13270 ;;                  1    wreg      enum E15660
 13271 ;; Registers used:
 13272 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13273 ;; Tracked objects:
 13274 ;;		On entry : 0/0
 13275 ;;		On exit  : 0/0
 13276 ;;		Unchanged: 0/0
 13277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13278 ;;      Params:         8       0       0       0       0       0       0
 13279 ;;      Locals:        28       0       0       0       0       0       0
 13280 ;;      Temps:          1       0       0       0       0       0       0
 13281 ;;      Totals:        37       0       0       0       0       0       0
 13282 ;;Total ram usage:       37 bytes
 13283 ;; Hardware stack levels used:    1
 13284 ;; Hardware stack levels required when called:    3
 13285 ;; This function calls:
 13286 ;;		__CANIDToRegs
 13287 ;; This function is called by:
 13288 ;;		_sendCANFrame
 13289 ;; This function uses a non-reentrant model
 13290 ;;
 13291                           
 13292                           	psect	text54
 13293  002848                     __ptext54:
 13294                           	opt stack 0
 13295  002848                     _ECANSendMessage:
 13296                           	opt stack 23
 13297                           
 13298                           ;ECAN.c: 619: BYTE mode;
 13299                           ;ECAN.c: 620: BYTE buffers;
 13300                           ;ECAN.c: 628: BYTE i,j;
 13301                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 13302                           ;ECAN.c: 630: BYTE* pb[9];
 13303                           ;ECAN.c: 631: BYTE temp;
 13304                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 13305                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 13306                           
 13307                           ; BSR set to: 0
 13308                           ;incstack = 0
 13309                           ;incstack = 0
 13310  002848  0E0F               	movlw	15	;volatile
 13311  00284A  6E1C               	movwf	ECANSendMessage@pb+1,c
 13312  00284C  0E40               	movlw	64	;volatile
 13313  00284E  6E1B               	movwf	ECANSendMessage@pb,c
 13314                           
 13315                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 13316  002850  0E0F               	movlw	15	;volatile
 13317  002852  6E1E               	movwf	ECANSendMessage@pb+3,c
 13318  002854  0E30               	movlw	48	;volatile
 13319  002856  6E1D               	movwf	ECANSendMessage@pb+2,c
 13320                           
 13321                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 13322  002858  0E0F               	movlw	15	;volatile
 13323  00285A  6E20               	movwf	ECANSendMessage@pb+5,c
 13324  00285C  0E20               	movlw	32	;volatile
 13325  00285E  6E1F               	movwf	ECANSendMessage@pb+4,c
 13326                           
 13327                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 13328  002860  0E0E               	movlw	14	;volatile
 13329  002862  6E22               	movwf	ECANSendMessage@pb+7,c
 13330  002864  0E20               	movlw	32	;volatile
 13331  002866  6E21               	movwf	ECANSendMessage@pb+6,c
 13332                           
 13333                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 13334  002868  0E0E               	movlw	14	;volatile
 13335  00286A  6E24               	movwf	ECANSendMessage@pb+9,c
 13336  00286C  0E30               	movlw	48	;volatile
 13337  00286E  6E23               	movwf	ECANSendMessage@pb+8,c
 13338                           
 13339                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 13340  002870  0E0E               	movlw	14	;volatile
 13341  002872  6E26               	movwf	ECANSendMessage@pb+11,c
 13342  002874  0E40               	movlw	64	;volatile
 13343  002876  6E25               	movwf	ECANSendMessage@pb+10,c
 13344                           
 13345                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 13346  002878  0E0E               	movlw	14	;volatile
 13347  00287A  6E28               	movwf	ECANSendMessage@pb+13,c
 13348  00287C  0E50               	movlw	80	;volatile
 13349  00287E  6E27               	movwf	ECANSendMessage@pb+12,c
 13350                           
 13351                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 13352  002880  0E0E               	movlw	14	;volatile
 13353  002882  6E2A               	movwf	ECANSendMessage@pb+15,c
 13354  002884  0E60               	movlw	96	;volatile
 13355  002886  6E29               	movwf	ECANSendMessage@pb+14,c
 13356                           
 13357                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 13358  002888  0E0E               	movlw	14	;volatile
 13359  00288A  6E2C               	movwf	ECANSendMessage@pb+17,c
 13360  00288C  0E70               	movlw	112	;volatile
 13361  00288E  6E2B               	movwf	ECANSendMessage@pb+16,c
 13362                           
 13363                           ; BSR set to: 14
 13364                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 13365  002890  5077               	movf	3959,w,c	;volatile
 13366  002892  0BC0               	andlw	192
 13367  002894  6E2D               	movwf	ECANSendMessage@mode,c
 13368                           
 13369                           ; BSR set to: 14
 13370                           ;ECAN.c: 660: if ( mode == 0x00 )
 13371  002896  662D               	tstfsz	ECANSendMessage@mode,c
 13372  002898  D002               	goto	l8831
 13373                           
 13374                           ; BSR set to: 14
 13375                           ;ECAN.c: 661: buffers = 2;
 13376  00289A  0E02               	movlw	2
 13377  00289C  D001               	goto	L28
 13378  00289E                     l8831:
 13379                           
 13380                           ; BSR set to: 14
 13381                           ;ECAN.c: 662: else
 13382                           ;ECAN.c: 663: buffers = 8;
 13383  00289E  0E08               	movlw	8
 13384  0028A0                     L28:
 13385  0028A0  6E2E               	movwf	ECANSendMessage@buffers,c
 13386                           
 13387                           ; BSR set to: 14
 13388                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 13389  0028A2  010D               	movlb	13	; () banked
 13390  0028A4  90D8               	bcf	status,0,c
 13391  0028A6  31F8               	rrcf	248,w,b	;volatile
 13392  0028A8  6E30               	movwf	ECANSendMessage@tempBSEL0,c
 13393                           
 13394                           ; BSR set to: 13
 13395                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 13396  0028AA  6A34               	clrf	ECANSendMessage@i,c
 13397  0028AC  D07D               	goto	l8891
 13398  0028AE                     l8837:
 13399                           
 13400                           ;ECAN.c: 688: {
 13401                           ;ECAN.c: 693: ptr = pb[i];
 13402  0028AE  5034               	movf	ECANSendMessage@i,w,c
 13403  0028B0  0D02               	mullw	2
 13404  0028B2  50F3               	movf	prodl,w,c
 13405  0028B4  0F1B               	addlw	low ECANSendMessage@pb
 13406  0028B6  6ED9               	movwf	fsr2l,c
 13407  0028B8  6ADA               	clrf	fsr2h,c
 13408  0028BA  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
 13409  0028BE  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
 13410                           
 13411                           ;ECAN.c: 694: tempPtr = ptr;
 13412  0028C2  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 13413  0028C6  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 13414                           
 13415                           ;ECAN.c: 702: if ( i > 2 )
 13416  0028CA  0E02               	movlw	2
 13417  0028CC  6434               	cpfsgt	ECANSendMessage@i,c
 13418  0028CE  D004               	goto	l8849
 13419                           
 13420                           ;ECAN.c: 703: {
 13421                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 13422  0028D0  90D8               	bcf	status,0,c
 13423  0028D2  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
 13424                           
 13425                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 13426  0028D4  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
 13427  0028D6  D067               	goto	l8889
 13428  0028D8                     l8849:
 13429                           
 13430                           ;ECAN.c: 714: }
 13431                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 13432  0028D8  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13433  0028DC  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13434  0028E0  50DF               	movf	indf2,w,c
 13435  0028E2  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13436  0028E4  B61A               	btfsc	??_ECANSendMessage,3,c
 13437  0028E6  D05F               	goto	l8889
 13438                           
 13439                           ;ECAN.c: 721: {
 13440                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 13441  0028E8  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13442  0028EC  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13443  0028F0  0EFC               	movlw	252
 13444  0028F2  16DF               	andwf	indf2,f,c
 13445                           
 13446                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 13447  0028F4  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 13448  0028F8  0E03               	movlw	3
 13449  0028FA  161A               	andwf	??_ECANSendMessage,f,c
 13450  0028FC  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13451  002900  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13452  002904  501A               	movf	??_ECANSendMessage,w,c
 13453  002906  12DF               	iorwf	indf2,f,c
 13454                           
 13455                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 13456  002908  AC19               	btfss	ECANSendMessage@msgFlags,6,c
 13457  00290A  D004               	goto	l845
 13458                           
 13459                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 13460  00290C  5018               	movf	ECANSendMessage@dataLen,w,c
 13461  00290E  0940               	iorlw	64
 13462  002910  6E33               	movwf	ECANSendMessage@temp,c
 13463  002912  D002               	goto	l8859
 13464  002914                     l845:
 13465                           
 13466                           ;ECAN.c: 729: else
 13467                           ;ECAN.c: 730: temp = dataLen;
 13468  002914  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 13469  002918                     l8859:
 13470                           
 13471                           ;ECAN.c: 732: *(ptr+5) = temp;
 13472  002918  EE20 F005          	lfsr	2,5
 13473  00291C  5035               	movf	ECANSendMessage@ptr,w,c
 13474  00291E  26D9               	addwf	fsr2l,f,c
 13475  002920  5036               	movf	ECANSendMessage@ptr+1,w,c
 13476  002922  22DA               	addwfc	fsr2h,f,c
 13477  002924  C033  FFDF         	movff	ECANSendMessage@temp,indf2
 13478                           
 13479                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 13480  002928  AA19               	btfss	ECANSendMessage@msgFlags,5,c
 13481  00292A  D003               	goto	l847
 13482                           
 13483                           ;ECAN.c: 736: temp = 1;
 13484  00292C  0E01               	movlw	1
 13485  00292E  6E33               	movwf	ECANSendMessage@temp,c
 13486  002930  D001               	goto	l8865
 13487  002932                     l847:
 13488                           
 13489                           ;ECAN.c: 738: else
 13490                           ;ECAN.c: 739: temp = 0;
 13491  002932  6A33               	clrf	ECANSendMessage@temp,c
 13492  002934                     l8865:
 13493                           
 13494                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 13495  002934  2835               	incf	ECANSendMessage@ptr,w,c
 13496  002936  6E08               	movwf	?__CANIDToRegs,c
 13497  002938  0E00               	movlw	0
 13498  00293A  2036               	addwfc	ECANSendMessage@ptr+1,w,c
 13499  00293C  6E09               	movwf	?__CANIDToRegs+1,c
 13500  00293E  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 13501  002942  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 13502  002946  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 13503  00294A  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 13504  00294E  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 13505  002952  ECF8  F015         	call	__CANIDToRegs	;wreg free
 13506                           
 13507                           ;ECAN.c: 745: ptr += 6;
 13508  002956  0E06               	movlw	6
 13509  002958  2635               	addwf	ECANSendMessage@ptr,f,c
 13510  00295A  0E00               	movlw	0
 13511  00295C  2236               	addwfc	ECANSendMessage@ptr+1,f,c
 13512                           
 13513                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 13514  00295E  6A2F               	clrf	ECANSendMessage@j,c
 13515  002960  D00F               	goto	l8879
 13516  002962                     l8871:
 13517                           
 13518                           ;ECAN.c: 748: *ptr++ = *data++;
 13519  002962  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
 13520  002966  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 13521  00296A  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 13522  00296E  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 13523  002972  CFDF FFE7          	movff	indf2,indf1
 13524  002976  4A16               	infsnz	ECANSendMessage@data,f,c
 13525  002978  2A17               	incf	ECANSendMessage@data+1,f,c
 13526  00297A  4A35               	infsnz	ECANSendMessage@ptr,f,c
 13527  00297C  2A36               	incf	ECANSendMessage@ptr+1,f,c
 13528  00297E  2A2F               	incf	ECANSendMessage@j,f,c
 13529  002980                     l8879:
 13530  002980  5018               	movf	ECANSendMessage@dataLen,w,c
 13531  002982  5C2F               	subwf	ECANSendMessage@j,w,c
 13532  002984  E3EE               	bnc	l8871
 13533                           
 13534                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 13535  002986  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13536  00298A  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13537  00298E  50DF               	movf	indf2,w,c
 13538  002990  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13539  002992  B41A               	btfsc	??_ECANSendMessage,2,c
 13540  002994  D006               	goto	l8885
 13541                           
 13542                           ;ECAN.c: 753: *tempPtr |= 0x08;
 13543  002996  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13544  00299A  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13545  00299E  0E00               	movlw	0
 13546  0029A0  86DB               	bsf	plusw2,3,c
 13547  0029A2                     l8885:
 13548                           
 13549                           ;ECAN.c: 755: return TRUE;
 13550  0029A2  0E01               	movlw	1
 13551  0029A4  D005               	goto	l853
 13552  0029A6                     l8889:
 13553  0029A6  2A34               	incf	ECANSendMessage@i,f,c
 13554  0029A8                     l8891:
 13555  0029A8  502E               	movf	ECANSendMessage@buffers,w,c
 13556  0029AA  5C34               	subwf	ECANSendMessage@i,w,c
 13557  0029AC  E380               	bnc	l8837
 13558                           
 13559                           ;ECAN.c: 756: }
 13560                           ;ECAN.c: 757: }
 13561                           ;ECAN.c: 760: return FALSE;
 13562  0029AE  0E00               	movlw	0
 13563  0029B0                     l853:
 13564  0029B0  0012               	return	
 13565  0029B2                     __end_of_ECANSendMessage:
 13566                           	opt stack 0
 13567                           tblptru	equ	0xFF8
 13568                           tblptrh	equ	0xFF7
 13569                           tblptrl	equ	0xFF6
 13570                           tablat	equ	0xFF5
 13571                           prodh	equ	0xFF4
 13572                           prodl	equ	0xFF3
 13573                           intcon	equ	0xFF2
 13574                           postinc0	equ	0xFEE
 13575                           wreg	equ	0xFE8
 13576                           indf1	equ	0xFE7
 13577                           fsr1h	equ	0xFE2
 13578                           fsr1l	equ	0xFE1
 13579                           indf2	equ	0xFDF
 13580                           postinc2	equ	0xFDE
 13581                           postdec2	equ	0xFDD
 13582                           plusw2	equ	0xFDB
 13583                           fsr2h	equ	0xFDA
 13584                           fsr2l	equ	0xFD9
 13585                           status	equ	0xFD8
 13586                           
 13587 ;; *************** function __CANIDToRegs *****************
 13588 ;; Defined at:
 13589 ;;		line 1099 in file "../ECAN.c"
 13590 ;; Parameters:    Size  Location     Type
 13591 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 13592 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13593 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13594 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
 13595 ;;  val             4    9[COMRAM] unsigned long 
 13596 ;;  type            1   13[COMRAM] unsigned char 
 13597 ;; Auto vars:     Size  Location     Type
 13598 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
 13599 ;;		 -> _CANIDToRegs@val(4), 
 13600 ;; Return value:  Size  Location     Type
 13601 ;;		None               void
 13602 ;; Registers used:
 13603 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13604 ;; Tracked objects:
 13605 ;;		On entry : 0/F
 13606 ;;		On exit  : 0/0
 13607 ;;		Unchanged: 0/0
 13608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13609 ;;      Params:         7       0       0       0       0       0       0
 13610 ;;      Locals:         1       0       0       0       0       0       0
 13611 ;;      Temps:          2       0       0       0       0       0       0
 13612 ;;      Totals:        10       0       0       0       0       0       0
 13613 ;;Total ram usage:       10 bytes
 13614 ;; Hardware stack levels used:    1
 13615 ;; Hardware stack levels required when called:    2
 13616 ;; This function calls:
 13617 ;;		Nothing
 13618 ;; This function is called by:
 13619 ;;		_calculateSetFilterMask
 13620 ;;		_ECANSendMessage
 13621 ;; This function uses a non-reentrant model
 13622 ;;
 13623                           
 13624                           	psect	text55
 13625  002BF0                     __ptext55:
 13626                           	opt stack 0
 13627  002BF0                     __CANIDToRegs:
 13628                           	opt stack 23
 13629                           
 13630                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 13631                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 13632                           
 13633                           ;incstack = 0
 13634                           ;incstack = 0
 13635  002BF0  0E0A               	movlw	low __CANIDToRegs@val
 13636  002BF2  6E11               	movwf	__CANIDToRegs@Value,c
 13637                           
 13638                           ;ECAN.c: 1104: if ( type == 0 )
 13639  002BF4  660E               	tstfsz	__CANIDToRegs@type,c
 13640  002BF6  D022               	goto	l8907
 13641                           
 13642                           ;ECAN.c: 1105: {
 13643                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 13644  002BF8  5011               	movf	__CANIDToRegs@Value,w,c
 13645  002BFA  6ED9               	movwf	fsr2l,c
 13646  002BFC  6ADA               	clrf	fsr2h,c
 13647  002BFE  50DF               	movf	indf2,w,c
 13648  002C00  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13649  002C02  90D8               	bcf	status,0,c
 13650  002C04  320F               	rrcf	??__CANIDToRegs,f,c
 13651  002C06  90D8               	bcf	status,0,c
 13652  002C08  320F               	rrcf	??__CANIDToRegs,f,c
 13653  002C0A  90D8               	bcf	status,0,c
 13654  002C0C  300F               	rrcf	??__CANIDToRegs,w,c
 13655                           
 13656                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 13657  002C0E  D862               	call	PL30	;call to abstracted procedure
 13658  002C10  2AD9               	incf	fsr2l,f,c
 13659  002C12  6ADA               	clrf	fsr2h,c
 13660  002C14  D872               	call	PL74	;call to abstracted procedure
 13661  002C16                     u10625:
 13662  002C16  90D8               	bcf	status,0,c
 13663  002C18  360F               	rlcf	??__CANIDToRegs,f,c
 13664  002C1A  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13665  002C1C  D7FC               	goto	u10625
 13666  002C1E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13667                           
 13668                           ;ECAN.c: 1109: ptr++;
 13669                           
 13670                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 13671  002C22  D846               	call	PL18	;call to abstracted procedure
 13672  002C24  D86A               	call	PL74	;call to abstracted procedure
 13673  002C26                     u10635:
 13674  002C26  90D8               	bcf	status,0,c
 13675  002C28  360F               	rlcf	??__CANIDToRegs,f,c
 13676  002C2A  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13677  002C2C  D7FC               	goto	u10635
 13678  002C2E  500F               	movf	??__CANIDToRegs,w,c
 13679  002C30  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13680  002C34  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13681  002C38  6EDF               	movwf	indf2,c
 13682                           
 13683                           ;ECAN.c: 1111: }
 13684  002C3A  D039               	goto	l907
 13685  002C3C                     l8907:
 13686                           
 13687                           ;ECAN.c: 1112: else
 13688                           ;ECAN.c: 1113: {
 13689                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 13690  002C3C  5011               	movf	__CANIDToRegs@Value,w,c
 13691  002C3E  D842               	call	PL26	;call to abstracted procedure
 13692  002C40  0E05               	movlw	5
 13693  002C42  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13694  002C44                     u10645:
 13695  002C44  90D8               	bcf	status,0,c
 13696  002C46  320F               	rrcf	??__CANIDToRegs,f,c
 13697  002C48  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13698  002C4A  D7FC               	goto	u10645
 13699  002C4C  500F               	movf	??__CANIDToRegs,w,c
 13700                           
 13701                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 13702  002C4E  D842               	call	PL30	;call to abstracted procedure
 13703  002C50  0E03               	movlw	3
 13704  002C52  D849               	call	PL48	;call to abstracted procedure
 13705  002C54  360F               	rlcf	??__CANIDToRegs,f,c
 13706  002C56  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13707                           
 13708                           ;ECAN.c: 1117: ptr++;
 13709                           
 13710                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 13711  002C5A  D82A               	call	PL18	;call to abstracted procedure
 13712  002C5C  0E02               	movlw	2
 13713  002C5E  D843               	call	PL48	;call to abstracted procedure
 13714  002C60  340F               	rlcf	??__CANIDToRegs,w,c
 13715  002C62  0BE0               	andlw	224
 13716  002C64  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13717  002C68  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13718  002C6C  6EDF               	movwf	indf2,c
 13719                           
 13720                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 13721  002C6E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13722  002C72  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13723  002C76  0E00               	movlw	0
 13724  002C78  86DB               	bsf	plusw2,3,c
 13725                           
 13726                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 13727  002C7A  5011               	movf	__CANIDToRegs@Value,w,c
 13728  002C7C  D823               	call	PL26	;call to abstracted procedure
 13729  002C7E  0E03               	movlw	3
 13730  002C80  160F               	andwf	??__CANIDToRegs,f,c
 13731  002C82  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13732                           
 13733                           ;ECAN.c: 1122: ptr++;
 13734                           
 13735                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 13736  002C86  D814               	call	PL18	;call to abstracted procedure
 13737  002C88  2AD9               	incf	fsr2l,f,c
 13738  002C8A  6ADA               	clrf	fsr2h,c
 13739  002C8C  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13740  002C90  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13741  002C94  CFDF FFE7          	movff	indf2,indf1
 13742                           
 13743                           ;ECAN.c: 1124: ptr++;
 13744  002C98  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13745  002C9A  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13746                           
 13747                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 13748  002C9C  5011               	movf	__CANIDToRegs@Value,w,c
 13749  002C9E  6ED9               	movwf	fsr2l,c
 13750  002CA0  6ADA               	clrf	fsr2h,c
 13751  002CA2  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13752  002CA6  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13753  002CAA  CFDF FFE7          	movff	indf2,indf1
 13754  002CAE                     l907:
 13755  002CAE  0012               	return	
 13756  002CB0                     __end_of__CANIDToRegs:
 13757                           	opt stack 0
 13758  002CB0                     PL18:
 13759                           	opt stack 23
 13760  002CB0  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13761  002CB4  500F               	movf	??__CANIDToRegs,w,c
 13762  002CB6  12DF               	iorwf	indf2,f,c
 13763  002CB8  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13764  002CBA  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13765  002CBC  5011               	movf	__CANIDToRegs@Value,w,c
 13766  002CBE  6ED9               	movwf	fsr2l,c
 13767  002CC0  6ADA               	clrf	fsr2h,c
 13768  002CC2  0012               	return	
 13769  002CC4                     __end_ofPL18:
 13770                           	opt stack 0
 13771  002CC4                     PL26:
 13772                           	opt stack 23
 13773  002CC4  6ED9               	movwf	fsr2l,c
 13774  002CC6  6ADA               	clrf	fsr2h,c
 13775  002CC8  0E02               	movlw	2
 13776  002CCA  26D9               	addwf	fsr2l,f,c
 13777  002CCC  6ADA               	clrf	fsr2h,c
 13778  002CCE  50DF               	movf	indf2,w,c
 13779  002CD0  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13780  002CD2  0012               	return	
 13781  002CD4                     __end_ofPL26:
 13782                           	opt stack 0
 13783  002CD4                     PL30:
 13784                           	opt stack 23
 13785  002CD4  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13786  002CD8  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13787  002CDC  6EDF               	movwf	indf2,c
 13788  002CDE  5011               	movf	__CANIDToRegs@Value,w,c
 13789  002CE0  6ED9               	movwf	fsr2l,c
 13790  002CE2  6ADA               	clrf	fsr2h,c
 13791  002CE4  0012               	return	
 13792  002CE6                     __end_ofPL30:
 13793                           	opt stack 0
 13794  002CE6                     PL48:
 13795                           	opt stack 23
 13796  002CE6  26D9               	addwf	fsr2l,f,c
 13797  002CE8  6ADA               	clrf	fsr2h,c
 13798  002CEA  50DF               	movf	indf2,w,c
 13799  002CEC  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13800  002CEE  90D8               	bcf	status,0,c
 13801  002CF0  360F               	rlcf	??__CANIDToRegs,f,c
 13802  002CF2  90D8               	bcf	status,0,c
 13803  002CF4  360F               	rlcf	??__CANIDToRegs,f,c
 13804  002CF6  90D8               	bcf	status,0,c
 13805  002CF8  0012               	return	
 13806  002CFA                     __end_ofPL48:
 13807                           	opt stack 0
 13808  002CFA                     PL74:
 13809                           	opt stack 23
 13810  002CFA  50DF               	movf	indf2,w,c
 13811  002CFC  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13812  002CFE  0E05               	movlw	5
 13813  002D00  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13814  002D02  0C05               	retlw	5
 13815  002D04                     __end_ofPL74:
 13816                           	opt stack 0
 13817                           tblptru	equ	0xFF8
 13818                           tblptrh	equ	0xFF7
 13819                           tblptrl	equ	0xFF6
 13820                           tablat	equ	0xFF5
 13821                           prodh	equ	0xFF4
 13822                           prodl	equ	0xFF3
 13823                           intcon	equ	0xFF2
 13824                           postinc0	equ	0xFEE
 13825                           wreg	equ	0xFE8
 13826                           indf1	equ	0xFE7
 13827                           fsr1h	equ	0xFE2
 13828                           fsr1l	equ	0xFE1
 13829                           indf2	equ	0xFDF
 13830                           postinc2	equ	0xFDE
 13831                           postdec2	equ	0xFDD
 13832                           plusw2	equ	0xFDB
 13833                           fsr2h	equ	0xFDA
 13834                           fsr2l	equ	0xFD9
 13835                           status	equ	0xFD8
 13836                           
 13837 ;; *************** function _vscp_getEvent *****************
 13838 ;; Defined at:
 13839 ;;		line 1290 in file "../../vscp_firmware/common/vscp_firmware.c"
 13840 ;; Parameters:    Size  Location     Type
 13841 ;;		None
 13842 ;; Auto vars:     Size  Location     Type
 13843 ;;  rv              1   43[COMRAM] unsigned char 
 13844 ;; Return value:  Size  Location     Type
 13845 ;;                  1    wreg      unsigned char 
 13846 ;; Registers used:
 13847 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13848 ;; Tracked objects:
 13849 ;;		On entry : F/0
 13850 ;;		On exit  : 0/0
 13851 ;;		Unchanged: 0/0
 13852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13853 ;;      Params:         0       0       0       0       0       0       0
 13854 ;;      Locals:         1       0       0       0       0       0       0
 13855 ;;      Temps:          0       0       0       0       0       0       0
 13856 ;;      Totals:         1       0       0       0       0       0       0
 13857 ;;Total ram usage:        1 bytes
 13858 ;; Hardware stack levels used:    1
 13859 ;; Hardware stack levels required when called:    6
 13860 ;; This function calls:
 13861 ;;		_getVSCPFrame
 13862 ;; This function is called by:
 13863 ;;		_main
 13864 ;; This function uses a non-reentrant model
 13865 ;;
 13866                           
 13867                           	psect	text56
 13868  0037EA                     __ptext56:
 13869                           	opt stack 0
 13870  0037EA                     _vscp_getEvent:
 13871                           	opt stack 24
 13872                           
 13873                           ; BSR set to: 0
 13874                           ;vscp_firmware.c: 1291: int8_t rv;
 13875                           ;vscp_firmware.c: 1297: if (vscp_imsg.flags & 0x80) return !0;
 13876                           
 13877                           ;incstack = 0
 13878                           ;incstack = 0
 13879  0037EA  BF96               	btfsc	_vscp_imsg& (0+255),7,b
 13880  0037EC  D012               	goto	l1279
 13881                           
 13882                           ; BSR set to: 0
 13883                           ;vscp_firmware.c: 1300: if ((rv = getVSCPFrame(&vscp_imsg.vscp_class,
 13884                           ;vscp_firmware.c: 1301: &vscp_imsg.vscp_type,
 13885                           ;vscp_firmware.c: 1302: &vscp_imsg.oaddr,
 13886                           ;vscp_firmware.c: 1303: &vscp_imsg.priority,
 13887                           ;vscp_firmware.c: 1304: &vscp_imsg.flags,
 13888                           ;vscp_firmware.c: 1305: vscp_imsg.data))) {
 13889  0037EE  0E9A               	movlw	low (_vscp_imsg+4)
 13890  0037F0  6E1E               	movwf	?_getVSCPFrame,c
 13891  0037F2  0E9B               	movlw	low (_vscp_imsg+5)
 13892  0037F4  6E1F               	movwf	?_getVSCPFrame+1,c
 13893  0037F6  0E97               	movlw	low (_vscp_imsg+1)
 13894  0037F8  6E20               	movwf	?_getVSCPFrame+2,c
 13895  0037FA  0E96               	movlw	low _vscp_imsg
 13896  0037FC  6E21               	movwf	?_getVSCPFrame+3,c
 13897  0037FE  0E9C               	movlw	low (_vscp_imsg+6)
 13898  003800  6E22               	movwf	?_getVSCPFrame+4,c
 13899  003802  0E98               	movlw	(_vscp_imsg+2)& (0+255)
 13900  003804  EC28  F01A         	call	_getVSCPFrame
 13901  003808  6E2C               	movwf	vscp_getEvent@rv,c
 13902  00380A  502C               	movf	vscp_getEvent@rv& (0+255),w,c
 13903  00380C  E002               	bz	l1279
 13904                           
 13905                           ;vscp_firmware.c: 1307: vscp_imsg.flags |= 0x80;
 13906  00380E  0100               	movlb	0	; () banked
 13907  003810  8F96               	bsf	_vscp_imsg& (0+255),7,b
 13908  003812                     l1279:
 13909  003812  0012               	return	
 13910  003814                     __end_of_vscp_getEvent:
 13911                           	opt stack 0
 13912                           tblptru	equ	0xFF8
 13913                           tblptrh	equ	0xFF7
 13914                           tblptrl	equ	0xFF6
 13915                           tablat	equ	0xFF5
 13916                           prodh	equ	0xFF4
 13917                           prodl	equ	0xFF3
 13918                           intcon	equ	0xFF2
 13919                           postinc0	equ	0xFEE
 13920                           wreg	equ	0xFE8
 13921                           indf1	equ	0xFE7
 13922                           fsr1h	equ	0xFE2
 13923                           fsr1l	equ	0xFE1
 13924                           indf2	equ	0xFDF
 13925                           postinc2	equ	0xFDE
 13926                           postdec2	equ	0xFDD
 13927                           plusw2	equ	0xFDB
 13928                           fsr2h	equ	0xFDA
 13929                           fsr2l	equ	0xFD9
 13930                           status	equ	0xFD8
 13931                           
 13932 ;; *************** function _getVSCPFrame *****************
 13933 ;; Defined at:
 13934 ;;		line 2520 in file "../main.c"
 13935 ;; Parameters:    Size  Location     Type
 13936 ;;  pvscpclass      1    wreg     PTR unsigned short 
 13937 ;;		 -> vscp_imsg(14), 
 13938 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
 13939 ;;		 -> vscp_imsg(14), 
 13940 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
 13941 ;;		 -> vscp_imsg(14), 
 13942 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
 13943 ;;		 -> vscp_imsg(14), 
 13944 ;;  pSize           1   32[COMRAM] PTR unsigned char 
 13945 ;;		 -> vscp_imsg(14), 
 13946 ;;  pData           1   33[COMRAM] PTR unsigned char 
 13947 ;;		 -> vscp_imsg(14), 
 13948 ;; Auto vars:     Size  Location     Type
 13949 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
 13950 ;;		 -> vscp_imsg(14), 
 13951 ;;  id              4   39[COMRAM] unsigned long 
 13952 ;; Return value:  Size  Location     Type
 13953 ;;                  1    wreg      unsigned char 
 13954 ;; Registers used:
 13955 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13956 ;; Tracked objects:
 13957 ;;		On entry : F/0
 13958 ;;		On exit  : 0/0
 13959 ;;		Unchanged: 0/0
 13960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13961 ;;      Params:         5       0       0       0       0       0       0
 13962 ;;      Locals:         5       0       0       0       0       0       0
 13963 ;;      Temps:          4       0       0       0       0       0       0
 13964 ;;      Totals:        14       0       0       0       0       0       0
 13965 ;;Total ram usage:       14 bytes
 13966 ;; Hardware stack levels used:    1
 13967 ;; Hardware stack levels required when called:    5
 13968 ;; This function calls:
 13969 ;;		_getCANFrame
 13970 ;; This function is called by:
 13971 ;;		_vscp_getEvent
 13972 ;; This function uses a non-reentrant model
 13973 ;;
 13974                           
 13975                           	psect	text57
 13976  003450                     __ptext57:
 13977                           	opt stack 0
 13978  003450                     _getVSCPFrame:
 13979                           	opt stack 24
 13980                           
 13981                           ;incstack = 0
 13982                           ;incstack = 0
 13983                           ;getVSCPFrame@pvscpclass stored from wreg
 13984  003450  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
 13985                           
 13986                           ; BSR set to: 0
 13987                           ;main.c: 2521: uint32_t id;
 13988                           ;main.c: 2523: if ( !getCANFrame(&id, pSize, pData) ) {
 13989  003454  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
 13990  003458  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
 13991  00345C  0E28               	movlw	getVSCPFrame@id& (0+255)
 13992  00345E  ECCA  F01B         	call	_getCANFrame
 13993  003462  0900               	iorlw	0
 13994  003464  E102               	bnz	l6473
 13995                           
 13996                           ;main.c: 2524: return 0;
 13997  003466  0E00               	movlw	0
 13998  003468  D02E               	goto	l647
 13999  00346A                     l6473:
 14000                           
 14001                           ;main.c: 2525: }
 14002                           ;main.c: 2527: *pNodeId = id & 0x0ff;
 14003  00346A  501F               	movf	getVSCPFrame@pNodeId,w,c
 14004  00346C  6ED9               	movwf	fsr2l,c
 14005  00346E  6ADA               	clrf	fsr2h,c
 14006  003470  C028  FFDF         	movff	getVSCPFrame@id,indf2
 14007                           
 14008                           ;main.c: 2528: *pvscptype = (id >> 8) & 0xff;
 14009  003474  501E               	movf	getVSCPFrame@pvscptype,w,c
 14010  003476  6ED9               	movwf	fsr2l,c
 14011  003478  6ADA               	clrf	fsr2h,c
 14012  00347A  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
 14013                           
 14014                           ;main.c: 2529: *pvscpclass = (id >> 16) & 0x1ff;
 14015  00347E  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 14016  003480  6E23               	movwf	??_getVSCPFrame& (0+255),c
 14017  003482  0E01               	movlw	1
 14018  003484  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 14019  003486  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
 14020  003488  5027               	movf	getVSCPFrame@pvscpclass,w,c
 14021  00348A  6ED9               	movwf	fsr2l,c
 14022  00348C  6ADA               	clrf	fsr2h,c
 14023  00348E  C023  FFDE         	movff	??_getVSCPFrame,postinc2
 14024  003492  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 14025                           
 14026                           ;main.c: 2530: *pPriority = (uint16_t) (0x07 & (id >> 26));
 14027  003496  5020               	movf	getVSCPFrame@pPriority,w,c
 14028  003498  6ED9               	movwf	fsr2l,c
 14029  00349A  6ADA               	clrf	fsr2h,c
 14030  00349C  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 14031  0034A0  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 14032  0034A4  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 14033  0034A8  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 14034  0034AC  0E1B               	movlw	27
 14035  0034AE  D005               	goto	u6710
 14036  0034B0                     u6715:
 14037  0034B0  90D8               	bcf	status,0,c
 14038  0034B2  3226               	rrcf	??_getVSCPFrame+3,f,c
 14039  0034B4  3225               	rrcf	??_getVSCPFrame+2,f,c
 14040  0034B6  3224               	rrcf	??_getVSCPFrame+1,f,c
 14041  0034B8  3223               	rrcf	??_getVSCPFrame,f,c
 14042  0034BA                     u6710:
 14043  0034BA  2EE8               	decfsz	wreg,f,c
 14044  0034BC  D7F9               	goto	u6715
 14045  0034BE  5023               	movf	??_getVSCPFrame,w,c
 14046  0034C0  0B07               	andlw	7
 14047  0034C2  6EDF               	movwf	indf2,c
 14048                           
 14049                           ;main.c: 2532: return 1;
 14050  0034C4  0E01               	movlw	1
 14051  0034C6                     l647:
 14052  0034C6  0012               	return	
 14053  0034C8                     __end_of_getVSCPFrame:
 14054                           	opt stack 0
 14055                           tblptru	equ	0xFF8
 14056                           tblptrh	equ	0xFF7
 14057                           tblptrl	equ	0xFF6
 14058                           tablat	equ	0xFF5
 14059                           prodh	equ	0xFF4
 14060                           prodl	equ	0xFF3
 14061                           intcon	equ	0xFF2
 14062                           postinc0	equ	0xFEE
 14063                           wreg	equ	0xFE8
 14064                           indf1	equ	0xFE7
 14065                           fsr1h	equ	0xFE2
 14066                           fsr1l	equ	0xFE1
 14067                           indf2	equ	0xFDF
 14068                           postinc2	equ	0xFDE
 14069                           postdec2	equ	0xFDD
 14070                           plusw2	equ	0xFDB
 14071                           fsr2h	equ	0xFDA
 14072                           fsr2l	equ	0xFD9
 14073                           status	equ	0xFD8
 14074                           
 14075 ;; *************** function _getCANFrame *****************
 14076 ;; Defined at:
 14077 ;;		line 2562 in file "../main.c"
 14078 ;; Parameters:    Size  Location     Type
 14079 ;;  pid             1    wreg     PTR unsigned long 
 14080 ;;		 -> getVSCPFrame@id(4), 
 14081 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 14082 ;;		 -> vscp_imsg(14), 
 14083 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 14084 ;;		 -> vscp_imsg(14), 
 14085 ;; Auto vars:     Size  Location     Type
 14086 ;;  pid             1   27[COMRAM] PTR unsigned long 
 14087 ;;		 -> getVSCPFrame@id(4), 
 14088 ;;  flags           1   28[COMRAM] enum E16349
 14089 ;; Return value:  Size  Location     Type
 14090 ;;                  1    wreg      unsigned char 
 14091 ;; Registers used:
 14092 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14093 ;; Tracked objects:
 14094 ;;		On entry : F/0
 14095 ;;		On exit  : 0/0
 14096 ;;		Unchanged: 0/0
 14097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14098 ;;      Params:         2       0       0       0       0       0       0
 14099 ;;      Locals:         2       0       0       0       0       0       0
 14100 ;;      Temps:          0       0       0       0       0       0       0
 14101 ;;      Totals:         4       0       0       0       0       0       0
 14102 ;;Total ram usage:        4 bytes
 14103 ;; Hardware stack levels used:    1
 14104 ;; Hardware stack levels required when called:    4
 14105 ;; This function calls:
 14106 ;;		_ECANReceiveMessage
 14107 ;; This function is called by:
 14108 ;;		_getVSCPFrame
 14109 ;; This function uses a non-reentrant model
 14110 ;;
 14111                           
 14112                           	psect	text58
 14113  003794                     __ptext58:
 14114                           	opt stack 0
 14115  003794                     _getCANFrame:
 14116                           	opt stack 24
 14117                           
 14118                           ;incstack = 0
 14119                           ;incstack = 0
 14120                           ;getCANFrame@pid stored from wreg
 14121  003794  CFE8 F01C          	movff	wreg,getCANFrame@pid
 14122                           
 14123                           ; BSR set to: 0
 14124                           ;main.c: 2563: ECAN_RX_MSG_FLAGS flags;
 14125                           ;main.c: 2567: if (vscp_imsg.flags & 0x80) return 0;
 14126  003798  AF96               	btfss	_vscp_imsg& (0+255),7,b
 14127  00379A  D002               	goto	l6489
 14128  00379C                     l6485:
 14129  00379C  0E00               	movlw	0
 14130  00379E  D00F               	goto	l658
 14131  0037A0                     l6489:
 14132                           
 14133                           ; BSR set to: 0
 14134                           ;main.c: 2569: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 14135  0037A0  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 14136  0037A4  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 14137  0037A8  0E1D               	movlw	low getCANFrame@flags
 14138  0037AA  6E11               	movwf	?_ECANReceiveMessage+2,c
 14139  0037AC  501C               	movf	getCANFrame@pid,w,c
 14140  0037AE  EC5D  F011         	call	_ECANReceiveMessage
 14141  0037B2  0900               	iorlw	0
 14142  0037B4  E0F3               	bz	l6485
 14143                           
 14144                           ;main.c: 2572: if (flags & ECAN_RX_RTR_FRAME) return 0;
 14145  0037B6  AC1D               	btfss	getCANFrame@flags,6,c
 14146                           
 14147                           ;main.c: 2575: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 14148  0037B8  AA1D               	btfss	getCANFrame@flags,5,c
 14149  0037BA  D7F0               	goto	l6485
 14150                           
 14151                           ;main.c: 2577: return 1;
 14152  0037BC  0E01               	movlw	1
 14153  0037BE                     l658:
 14154  0037BE  0012               	return	
 14155  0037C0                     __end_of_getCANFrame:
 14156                           	opt stack 0
 14157                           tblptru	equ	0xFF8
 14158                           tblptrh	equ	0xFF7
 14159                           tblptrl	equ	0xFF6
 14160                           tablat	equ	0xFF5
 14161                           prodh	equ	0xFF4
 14162                           prodl	equ	0xFF3
 14163                           intcon	equ	0xFF2
 14164                           postinc0	equ	0xFEE
 14165                           wreg	equ	0xFE8
 14166                           indf1	equ	0xFE7
 14167                           fsr1h	equ	0xFE2
 14168                           fsr1l	equ	0xFE1
 14169                           indf2	equ	0xFDF
 14170                           postinc2	equ	0xFDE
 14171                           postdec2	equ	0xFDD
 14172                           plusw2	equ	0xFDB
 14173                           fsr2h	equ	0xFDA
 14174                           fsr2l	equ	0xFD9
 14175                           status	equ	0xFD8
 14176                           
 14177 ;; *************** function _ECANReceiveMessage *****************
 14178 ;; Defined at:
 14179 ;;		line 803 in file "../ECAN.c"
 14180 ;; Parameters:    Size  Location     Type
 14181 ;;  id              1    wreg     PTR unsigned long 
 14182 ;;		 -> getVSCPFrame@id(4), 
 14183 ;;  data            1   14[COMRAM] PTR unsigned char 
 14184 ;;		 -> vscp_imsg(14), 
 14185 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 14186 ;;		 -> vscp_imsg(14), 
 14187 ;;  msgFlags        1   16[COMRAM] PTR enum E16324
 14188 ;;		 -> getCANFrame@flags(1), 
 14189 ;; Auto vars:     Size  Location     Type
 14190 ;;  id              1   19[COMRAM] PTR unsigned long 
 14191 ;;		 -> getVSCPFrame@id(4), 
 14192 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 14193 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14194 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14195 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
 14196 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14197 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14198 ;;  temp            1   22[COMRAM] struct .
 14199 ;;  mode            1   21[COMRAM] unsigned char 
 14200 ;;  i               1   20[COMRAM] unsigned char 
 14201 ;; Return value:  Size  Location     Type
 14202 ;;                  1    wreg      enum E15660
 14203 ;; Registers used:
 14204 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14205 ;; Tracked objects:
 14206 ;;		On entry : F/0
 14207 ;;		On exit  : 0/0
 14208 ;;		Unchanged: 0/0
 14209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14210 ;;      Params:         3       0       0       0       0       0       0
 14211 ;;      Locals:         8       0       0       0       0       0       0
 14212 ;;      Temps:          0       0       0       0       0       0       0
 14213 ;;      Totals:        11       0       0       0       0       0       0
 14214 ;;Total ram usage:       11 bytes
 14215 ;; Hardware stack levels used:    1
 14216 ;; Hardware stack levels required when called:    3
 14217 ;; This function calls:
 14218 ;;		__ECANPointBuffer
 14219 ;;		__RegsToCANID
 14220 ;; This function is called by:
 14221 ;;		_getCANFrame
 14222 ;; This function uses a non-reentrant model
 14223 ;;
 14224                           
 14225                           	psect	text59
 14226  0022BA                     __ptext59:
 14227                           	opt stack 0
 14228  0022BA                     _ECANReceiveMessage:
 14229                           	opt stack 24
 14230                           
 14231                           ;incstack = 0
 14232                           ;incstack = 0
 14233                           ;ECANReceiveMessage@id stored from wreg
 14234  0022BA  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
 14235                           
 14236                           ; BSR set to: 0
 14237                           ;ECAN.c: 805: BYTE mode;
 14238                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 14239                           ;ECAN.c: 809: char i;
 14240                           ;ECAN.c: 810: BYTE_VAL temp;
 14241                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 14242  0022BE  6A54               	clrf	__ECANRxFilterHitInfo,c
 14243                           
 14244                           ; BSR set to: 0
 14245                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 14246  0022C0  5077               	movf	3959,w,c	;volatile
 14247  0022C2  0BC0               	andlw	192
 14248  0022C4  6E16               	movwf	ECANReceiveMessage@mode,c
 14249                           
 14250                           ; BSR set to: 0
 14251                           ;ECAN.c: 816: if ( mode == 0x00 )
 14252  0022C6  6616               	tstfsz	ECANReceiveMessage@mode,c
 14253  0022C8  D032               	goto	l6621
 14254                           
 14255                           ; BSR set to: 0
 14256                           ;ECAN.c: 822: {
 14257                           ;ECAN.c: 824: if ( RXB0FUL )
 14258  0022CA  AE60               	btfss	3936,7,c	;volatile
 14259  0022CC  D012               	goto	l858
 14260                           
 14261                           ; BSR set to: 0
 14262                           ;ECAN.c: 825: {
 14263                           ;ECAN.c: 827: RXB0IF = 0;
 14264  0022CE  90A4               	bcf	4004,0,c	;volatile
 14265                           
 14266                           ;ECAN.c: 830: if ( RXB0OVFL )
 14267  0022D0  AE74               	btfss	3956,7,c	;volatile
 14268  0022D2  D006               	goto	l6597
 14269                           
 14270                           ; BSR set to: 0
 14271                           ;ECAN.c: 831: {
 14272                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 14273  0022D4  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14274  0022D6  6ED9               	movwf	fsr2l,c
 14275  0022D8  6ADA               	clrf	fsr2h,c
 14276  0022DA  0E00               	movlw	0
 14277  0022DC  86DB               	bsf	plusw2,3,c
 14278                           
 14279                           ; BSR set to: 0
 14280                           ;ECAN.c: 833: RXB0OVFL = 0;
 14281  0022DE  9E74               	bcf	3956,7,c	;volatile
 14282  0022E0                     l6597:
 14283                           
 14284                           ; BSR set to: 0
 14285                           ;ECAN.c: 834: }
 14286                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 14287  0022E0  A060               	btfss	3936,0,c	;volatile
 14288  0022E2  D002               	bra	u6885
 14289  0022E4  8054               	bsf	__ECANRxFilterHitInfo,0,c
 14290  0022E6  D001               	bra	u6887
 14291  0022E8                     u6885:
 14292  0022E8  9054               	bcf	__ECANRxFilterHitInfo,0,c
 14293  0022EA                     u6887:
 14294                           
 14295                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 14296  0022EA  0E0F               	movlw	15	;volatile
 14297  0022EC  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14298  0022EE  0E60               	movlw	96	;volatile
 14299  0022F0  D01A               	goto	L29
 14300  0022F2                     l858:
 14301                           
 14302                           ; BSR set to: 0
 14303                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 14304  0022F2  010F               	movlb	15	; () banked
 14305  0022F4  AF50               	btfss	80,7,b	;volatile
 14306  0022F6  D019               	goto	l6615
 14307                           
 14308                           ; BSR set to: 15
 14309                           ;ECAN.c: 842: {
 14310                           ;ECAN.c: 844: RXB1IF = 0;
 14311  0022F8  92A4               	bcf	4004,1,c	;volatile
 14312                           
 14313                           ;ECAN.c: 847: if ( RXB1OVFL )
 14314  0022FA  AC74               	btfss	3956,6,c	;volatile
 14315  0022FC  D006               	goto	l6607
 14316                           
 14317                           ; BSR set to: 15
 14318                           ;ECAN.c: 848: {
 14319                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 14320  0022FE  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14321  002300  6ED9               	movwf	fsr2l,c
 14322  002302  6ADA               	clrf	fsr2h,c
 14323  002304  0E00               	movlw	0
 14324  002306  86DB               	bsf	plusw2,3,c
 14325                           
 14326                           ; BSR set to: 15
 14327                           ;ECAN.c: 850: RXB1OVFL = 0;
 14328  002308  9C74               	bcf	3956,6,c	;volatile
 14329  00230A                     l6607:
 14330                           
 14331                           ; BSR set to: 15
 14332                           ;ECAN.c: 851: }
 14333                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 14334  00230A  5150               	movf	80,w,b	;volatile
 14335  00230C  0B07               	andlw	7
 14336  00230E  6E54               	movwf	__ECANRxFilterHitInfo,c
 14337                           
 14338                           ; BSR set to: 15
 14339                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 14340  002310  0E02               	movlw	2
 14341  002312  6054               	cpfslt	__ECANRxFilterHitInfo,c
 14342  002314  D005               	goto	l6613
 14343                           
 14344                           ; BSR set to: 15
 14345                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 14346  002316  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14347  002318  6ED9               	movwf	fsr2l,c
 14348  00231A  6ADA               	clrf	fsr2h,c
 14349  00231C  0E00               	movlw	0
 14350  00231E  8EDB               	bsf	plusw2,7,c
 14351  002320                     l6613:
 14352                           
 14353                           ; BSR set to: 15
 14354                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 14355  002320  0E0F               	movlw	15	;volatile
 14356  002322  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14357  002324  0E50               	movlw	80	;volatile
 14358  002326                     L29:
 14359  002326  6E18               	movwf	ECANReceiveMessage@ptr,c
 14360                           
 14361                           ;ECAN.c: 860: }
 14362  002328  D065               	goto	l6675
 14363  00232A                     l6615:
 14364                           
 14365                           ;ECAN.c: 861: else
 14366                           ;ECAN.c: 862: return FALSE;
 14367  00232A  0E00               	movlw	0
 14368  00232C  D0C2               	goto	l865
 14369  00232E                     l6621:
 14370                           
 14371                           ; BSR set to: 0
 14372                           ;ECAN.c: 869: else if ( mode == 0x40 )
 14373  00232E  5016               	movf	ECANReceiveMessage@mode,w,c
 14374  002330  0A40               	xorlw	64
 14375  002332  E146               	bnz	l868
 14376                           
 14377                           ; BSR set to: 0
 14378                           ;ECAN.c: 875: {
 14379                           ;ECAN.c: 876: if ( RXB0FUL )
 14380  002334  AE60               	btfss	3936,7,c	;volatile
 14381  002336  D004               	goto	l869
 14382                           
 14383                           ; BSR set to: 0
 14384                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 14385  002338  0E0F               	movlw	15	;volatile
 14386  00233A  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14387  00233C  0E60               	movlw	96	;volatile
 14388  00233E  D03E               	goto	L36
 14389  002340                     l869:
 14390                           
 14391                           ; BSR set to: 0
 14392                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 14393  002340  010F               	movlb	15	; () banked
 14394  002342  AF50               	btfss	80,7,b	;volatile
 14395  002344  D004               	goto	l871
 14396                           
 14397                           ; BSR set to: 15
 14398                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 14399  002346  0E0F               	movlw	15	;volatile
 14400  002348  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14401  00234A  0E50               	movlw	80	;volatile
 14402  00234C  D037               	goto	L36
 14403  00234E                     l871:
 14404                           
 14405                           ; BSR set to: 15
 14406                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 14407  00234E  010D               	movlb	13
 14408  002350  B5F8               	btfsc	248,2,b	;volatile
 14409  002352  D007               	goto	l873
 14410  002354  010E               	movlb	14
 14411  002356  AF20               	btfss	32,7,b	;volatile
 14412  002358  D004               	goto	l873
 14413                           
 14414                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 14415  00235A  0E0E               	movlw	14	;volatile
 14416  00235C  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14417  00235E  0E20               	movlw	32	;volatile
 14418  002360  D02D               	goto	L36
 14419  002362                     l873:
 14420                           
 14421                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 14422  002362  010D               	movlb	13
 14423  002364  B7F8               	btfsc	248,3,b	;volatile
 14424  002366  D007               	goto	l875
 14425  002368  010E               	movlb	14
 14426  00236A  AF30               	btfss	48,7,b	;volatile
 14427  00236C  D004               	goto	l875
 14428                           
 14429                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 14430  00236E  0E0E               	movlw	14	;volatile
 14431  002370  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14432  002372  0E30               	movlw	48	;volatile
 14433  002374  D023               	goto	L36
 14434  002376                     l875:
 14435                           
 14436                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 14437  002376  010D               	movlb	13
 14438  002378  B9F8               	btfsc	248,4,b	;volatile
 14439  00237A  D007               	goto	l877
 14440  00237C  010E               	movlb	14
 14441  00237E  AF40               	btfss	64,7,b	;volatile
 14442  002380  D004               	goto	l877
 14443                           
 14444                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 14445  002382  0E0E               	movlw	14	;volatile
 14446  002384  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14447  002386  0E40               	movlw	64	;volatile
 14448  002388  D019               	goto	L36
 14449  00238A                     l877:
 14450                           
 14451                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 14452  00238A  010D               	movlb	13
 14453  00238C  BBF8               	btfsc	248,5,b	;volatile
 14454  00238E  D005               	goto	l879
 14455  002390  010E               	movlb	14
 14456  002392  AF50               	btfss	80,7,b	;volatile
 14457  002394  D002               	goto	l879
 14458                           
 14459                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 14460  002396  0E0E               	movlw	14	;volatile
 14461  002398  D7D7               	goto	L37
 14462  00239A                     l879:
 14463                           
 14464                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 14465  00239A  010D               	movlb	13
 14466  00239C  BDF8               	btfsc	248,6,b	;volatile
 14467  00239E  D005               	goto	l881
 14468  0023A0  010E               	movlb	14
 14469  0023A2  AF60               	btfss	96,7,b	;volatile
 14470  0023A4  D002               	goto	l881
 14471                           
 14472                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 14473  0023A6  0E0E               	movlw	14	;volatile
 14474  0023A8  D7C8               	goto	L38
 14475  0023AA                     l881:
 14476                           
 14477                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 14478  0023AA  010D               	movlb	13
 14479  0023AC  BFF8               	btfsc	248,7,b	;volatile
 14480  0023AE  D7BD               	goto	l6615
 14481  0023B0  010E               	movlb	14
 14482  0023B2  AF70               	btfss	112,7,b	;volatile
 14483  0023B4  D7BA               	goto	l6615
 14484                           
 14485                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 14486  0023B6  0E0E               	movlw	14	;volatile
 14487  0023B8  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14488  0023BA  0E70               	movlw	112	;volatile
 14489  0023BC                     L36:
 14490  0023BC  6E18               	movwf	ECANReceiveMessage@ptr,c
 14491  0023BE  D00A               	goto	l6665
 14492  0023C0                     l868:
 14493                           
 14494                           ; BSR set to: 0
 14495                           ;ECAN.c: 910: else
 14496                           ;ECAN.c: 915: {
 14497                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 14498  0023C0  AE74               	btfss	3956,7,c	;volatile
 14499  0023C2  D7B3               	goto	l6615
 14500                           
 14501                           ; BSR set to: 0
 14502                           ;ECAN.c: 917: {
 14503                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 14504  0023C4  506F               	movf	3951,w,c	;volatile
 14505  0023C6  0B07               	andlw	7
 14506  0023C8  EC64  F01A         	call	__ECANPointBuffer
 14507  0023CC  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 14508  0023D0  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 14509  0023D4                     l6665:
 14510                           
 14511                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 14512  0023D4  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14513  0023D8  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14514  0023DC  50DF               	movf	indf2,w,c
 14515  0023DE  0B1F               	andlw	31
 14516  0023E0  6E54               	movwf	__ECANRxFilterHitInfo,c
 14517                           
 14518                           ;ECAN.c: 932: RXB1IF = 0;
 14519  0023E2  92A4               	bcf	4004,1,c	;volatile
 14520                           
 14521                           ;ECAN.c: 934: if ( RXB1OVFL )
 14522  0023E4  AC74               	btfss	3956,6,c	;volatile
 14523  0023E6  D006               	goto	l6675
 14524                           
 14525                           ;ECAN.c: 935: {
 14526                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 14527  0023E8  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14528  0023EA  6ED9               	movwf	fsr2l,c
 14529  0023EC  6ADA               	clrf	fsr2h,c
 14530  0023EE  0E00               	movlw	0
 14531  0023F0  86DB               	bsf	plusw2,3,c
 14532                           
 14533                           ;ECAN.c: 937: RXB1OVFL = 0;
 14534  0023F2  9C74               	bcf	3956,6,c	;volatile
 14535  0023F4                     l6675:
 14536                           
 14537                           ;ECAN.c: 942: savedPtr = ptr;
 14538  0023F4  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 14539  0023F8  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 14540                           
 14541                           ;ECAN.c: 943: *msgFlags = 0;
 14542  0023FC  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14543  0023FE  6ED9               	movwf	fsr2l,c
 14544  002400  6ADA               	clrf	fsr2h,c
 14545  002402  6ADF               	clrf	indf2,c
 14546                           
 14547                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 14548  002404  EE20 F005          	lfsr	2,5
 14549  002408  D855               	call	PL70	;call to abstracted procedure
 14550                           
 14551                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 14552  00240A  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14553  00240C  6ED9               	movwf	fsr2l,c
 14554  00240E  6ADA               	clrf	fsr2h,c
 14555  002410  5017               	movf	ECANReceiveMessage@temp,w,c
 14556  002412  0B0F               	andlw	15
 14557  002414  6EDF               	movwf	indf2,c
 14558                           
 14559                           ;ECAN.c: 950: if ( temp.bits.b6 )
 14560  002416  AC17               	btfss	ECANReceiveMessage@temp,6,c
 14561  002418  D005               	goto	l889
 14562                           
 14563                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 14564  00241A  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14565  00241C  6ED9               	movwf	fsr2l,c
 14566  00241E  6ADA               	clrf	fsr2h,c
 14567  002420  0E00               	movlw	0
 14568  002422  8CDB               	bsf	plusw2,6,c
 14569  002424                     l889:
 14570                           
 14571                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 14572  002424  EE20 F002          	lfsr	2,2
 14573  002428  D845               	call	PL70	;call to abstracted procedure
 14574                           
 14575                           ;ECAN.c: 955: if ( temp.bits.b3 )
 14576  00242A  A617               	btfss	ECANReceiveMessage@temp,3,c
 14577  00242C  D008               	goto	l890
 14578                           
 14579                           ;ECAN.c: 956: {
 14580                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 14581  00242E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14582  002430  6ED9               	movwf	fsr2l,c
 14583  002432  6ADA               	clrf	fsr2h,c
 14584  002434  0E00               	movlw	0
 14585  002436  8ADB               	bsf	plusw2,5,c
 14586                           
 14587                           ;ECAN.c: 958: temp.Val = 1;
 14588  002438  0E01               	movlw	1
 14589  00243A  6E17               	movwf	ECANReceiveMessage@temp,c
 14590                           
 14591                           ;ECAN.c: 959: }
 14592  00243C  D001               	goto	l6693
 14593  00243E                     l890:
 14594                           
 14595                           ;ECAN.c: 960: else
 14596                           ;ECAN.c: 961: temp.Val = 0;
 14597  00243E  6A17               	clrf	ECANReceiveMessage@temp,c
 14598  002440                     l6693:
 14599                           
 14600                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 14601  002440  2818               	incf	ECANReceiveMessage@ptr,w,c
 14602  002442  6E08               	movwf	?__RegsToCANID,c
 14603  002444  0E00               	movlw	0
 14604  002446  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 14605  002448  6E09               	movwf	?__RegsToCANID+1,c
 14606  00244A  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 14607  00244E  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 14608  002452  EC69  F015         	call	__RegsToCANID	;wreg free
 14609                           
 14610                           ;ECAN.c: 966: ptr += 6;
 14611  002456  0E06               	movlw	6
 14612  002458  2618               	addwf	ECANReceiveMessage@ptr,f,c
 14613  00245A  0E00               	movlw	0
 14614  00245C  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 14615                           
 14616                           ;ECAN.c: 967: temp.Val = *dataLen;
 14617  00245E  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14618  002460  6ED9               	movwf	fsr2l,c
 14619  002462  6ADA               	clrf	fsr2h,c
 14620  002464  50DF               	movf	indf2,w,c
 14621  002466  6E17               	movwf	ECANReceiveMessage@temp,c
 14622                           
 14623                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 14624  002468  6A15               	clrf	ECANReceiveMessage@i,c
 14625  00246A  D00D               	goto	l6709
 14626  00246C                     l6701:
 14627                           
 14628                           ;ECAN.c: 969: *data++ = *ptr++;
 14629  00246C  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14630  002470  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14631  002474  500F               	movf	ECANReceiveMessage@data,w,c
 14632  002476  6EE1               	movwf	fsr1l,c
 14633  002478  6AE2               	clrf	fsr1h,c
 14634  00247A  CFDF FFE7          	movff	indf2,indf1
 14635  00247E  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 14636  002480  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 14637  002482  2A0F               	incf	ECANReceiveMessage@data,f,c
 14638  002484  2A15               	incf	ECANReceiveMessage@i,f,c
 14639  002486                     l6709:
 14640  002486  5017               	movf	ECANReceiveMessage@temp,w,c
 14641  002488  5C15               	subwf	ECANReceiveMessage@i,w,c
 14642  00248A  E3F0               	bnc	l6701
 14643                           
 14644                           ;ECAN.c: 972: if ( IRXIF )
 14645  00248C  AEA4               	btfss	4004,7,c	;volatile
 14646  00248E  D006               	goto	l6715
 14647                           
 14648                           ;ECAN.c: 973: {
 14649                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 14650  002490  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14651  002492  6ED9               	movwf	fsr2l,c
 14652  002494  6ADA               	clrf	fsr2h,c
 14653  002496  0E00               	movlw	0
 14654  002498  88DB               	bsf	plusw2,4,c
 14655                           
 14656                           ;ECAN.c: 975: IRXIF = 0;
 14657  00249A  9EA4               	bcf	4004,7,c	;volatile
 14658  00249C                     l6715:
 14659                           
 14660                           ;ECAN.c: 976: }
 14661                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 14662  00249C  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 14663  0024A0  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 14664  0024A4  0E7F               	movlw	127
 14665  0024A6  16DF               	andwf	indf2,f,c
 14666                           
 14667                           ;ECAN.c: 983: if ( mode == 0x80 )
 14668  0024A8  5016               	movf	ECANReceiveMessage@mode,w,c
 14669  0024AA  0A80               	xorlw	128
 14670  0024AC  B4D8               	btfsc	status,2,c
 14671                           
 14672                           ;ECAN.c: 984: FIFOEMPTY = 0;
 14673  0024AE  9E74               	bcf	3956,7,c	;volatile
 14674                           
 14675                           ;ECAN.c: 990: return TRUE;
 14676  0024B0  0E01               	movlw	1
 14677  0024B2                     l865:
 14678  0024B2  0012               	return	
 14679  0024B4                     __end_of_ECANReceiveMessage:
 14680                           	opt stack 0
 14681  0024B4                     PL70:
 14682                           	opt stack 24
 14683  0024B4  5018               	movf	ECANReceiveMessage@ptr,w,c
 14684  0024B6  26D9               	addwf	fsr2l,f,c
 14685  0024B8  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14686  0024BA  22DA               	addwfc	fsr2h,f,c
 14687  0024BC  50DF               	movf	indf2,w,c
 14688  0024BE  6E17               	movwf	ECANReceiveMessage@temp,c
 14689  0024C0  0012               	return	
 14690  0024C2                     __end_ofPL70:
 14691                           	opt stack 0
 14692                           tblptru	equ	0xFF8
 14693                           tblptrh	equ	0xFF7
 14694                           tblptrl	equ	0xFF6
 14695                           tablat	equ	0xFF5
 14696                           prodh	equ	0xFF4
 14697                           prodl	equ	0xFF3
 14698                           intcon	equ	0xFF2
 14699                           postinc0	equ	0xFEE
 14700                           wreg	equ	0xFE8
 14701                           indf1	equ	0xFE7
 14702                           fsr1h	equ	0xFE2
 14703                           fsr1l	equ	0xFE1
 14704                           indf2	equ	0xFDF
 14705                           postinc2	equ	0xFDE
 14706                           postdec2	equ	0xFDD
 14707                           plusw2	equ	0xFDB
 14708                           fsr2h	equ	0xFDA
 14709                           fsr2l	equ	0xFD9
 14710                           status	equ	0xFD8
 14711                           
 14712 ;; *************** function __RegsToCANID *****************
 14713 ;; Defined at:
 14714 ;;		line 1156 in file "../ECAN.c"
 14715 ;; Parameters:    Size  Location     Type
 14716 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 14717 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14718 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14719 ;;  val             1    9[COMRAM] PTR unsigned long 
 14720 ;;		 -> getVSCPFrame@id(4), 
 14721 ;;  type            1   10[COMRAM] unsigned char 
 14722 ;; Auto vars:     Size  Location     Type
 14723 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 14724 ;;		 -> getVSCPFrame@id(4), 
 14725 ;; Return value:  Size  Location     Type
 14726 ;;		None               void
 14727 ;; Registers used:
 14728 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14729 ;; Tracked objects:
 14730 ;;		On entry : 0/0
 14731 ;;		On exit  : 0/0
 14732 ;;		Unchanged: 0/0
 14733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14734 ;;      Params:         4       0       0       0       0       0       0
 14735 ;;      Locals:         1       0       0       0       0       0       0
 14736 ;;      Temps:          2       0       0       0       0       0       0
 14737 ;;      Totals:         7       0       0       0       0       0       0
 14738 ;;Total ram usage:        7 bytes
 14739 ;; Hardware stack levels used:    1
 14740 ;; Hardware stack levels required when called:    2
 14741 ;; This function calls:
 14742 ;;		Nothing
 14743 ;; This function is called by:
 14744 ;;		_ECANReceiveMessage
 14745 ;; This function uses a non-reentrant model
 14746 ;;
 14747                           
 14748                           	psect	text60
 14749  002AD2                     __ptext60:
 14750                           	opt stack 0
 14751  002AD2                     __RegsToCANID:
 14752                           	opt stack 24
 14753                           
 14754                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 14755                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 14756                           
 14757                           ;incstack = 0
 14758                           ;incstack = 0
 14759  002AD2  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 14760                           
 14761                           ;ECAN.c: 1161: if ( type == 0 )
 14762  002AD6  660B               	tstfsz	__RegsToCANID@type,c
 14763  002AD8  D02B               	goto	l6789
 14764                           
 14765                           ;ECAN.c: 1162: {
 14766                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 14767  002ADA  500E               	movf	__RegsToCANID@Value,w,c
 14768  002ADC  6ED9               	movwf	fsr2l,c
 14769  002ADE  D86C               	call	PL42	;call to abstracted procedure
 14770  002AE0  360C               	rlcf	??__RegsToCANID,f,c
 14771  002AE2  90D8               	bcf	status,0,c
 14772  002AE4  360C               	rlcf	??__RegsToCANID,f,c
 14773  002AE6  90D8               	bcf	status,0,c
 14774  002AE8  340C               	rlcf	??__RegsToCANID,w,c
 14775  002AEA  6EDF               	movwf	indf2,c
 14776                           
 14777                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 14778  002AEC  500E               	movf	__RegsToCANID@Value,w,c
 14779  002AEE  6ED9               	movwf	fsr2l,c
 14780  002AF0  6ADA               	clrf	fsr2h,c
 14781  002AF2  2AD9               	incf	fsr2l,f,c
 14782  002AF4  6ADA               	clrf	fsr2h,c
 14783  002AF6  D873               	call	PL50	;call to abstracted procedure
 14784  002AF8                     u7205:
 14785  002AF8  90D8               	bcf	status,0,c
 14786  002AFA  320C               	rrcf	??__RegsToCANID,f,c
 14787  002AFC  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14788  002AFE  D7FC               	goto	u7205
 14789  002B00  500C               	movf	??__RegsToCANID,w,c
 14790                           
 14791                           ;ECAN.c: 1166: ptr++;
 14792                           
 14793                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 14794  002B02  D863               	call	PL44	;call to abstracted procedure
 14795  002B04  0E05               	movlw	5
 14796  002B06  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14797  002B08                     u7215:
 14798  002B08  90D8               	bcf	status,0,c
 14799  002B0A  320C               	rrcf	??__RegsToCANID,f,c
 14800  002B0C  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14801  002B0E  D7FC               	goto	u7215
 14802  002B10  500E               	movf	__RegsToCANID@Value,w,c
 14803  002B12  6ED9               	movwf	fsr2l,c
 14804  002B14  6ADA               	clrf	fsr2h,c
 14805  002B16  500C               	movf	??__RegsToCANID,w,c
 14806  002B18  12DF               	iorwf	indf2,f,c
 14807                           
 14808                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 14809  002B1A  D83D               	call	PL24	;call to abstracted procedure
 14810  002B1C  6ADF               	clrf	indf2,c
 14811                           
 14812                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 14813  002B1E  500E               	movf	__RegsToCANID@Value,w,c
 14814  002B20  6ED9               	movwf	fsr2l,c
 14815  002B22  6ADA               	clrf	fsr2h,c
 14816  002B24  0E03               	movlw	3
 14817  002B26  26D9               	addwf	fsr2l,f,c
 14818  002B28  6ADA               	clrf	fsr2h,c
 14819  002B2A  0E00               	movlw	0
 14820  002B2C  6EDF               	movwf	indf2,c
 14821                           
 14822                           ;ECAN.c: 1170: }
 14823  002B2E  D032               	goto	l912
 14824  002B30                     l6789:
 14825                           
 14826                           ;ECAN.c: 1171: else
 14827                           ;ECAN.c: 1172: {
 14828                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 14829  002B30  D832               	call	PL24	;call to abstracted procedure
 14830  002B32  D855               	call	PL50	;call to abstracted procedure
 14831  002B34                     u7225:
 14832  002B34  90D8               	bcf	status,0,c
 14833  002B36  360C               	rlcf	??__RegsToCANID,f,c
 14834  002B38  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14835  002B3A  D7FC               	goto	u7225
 14836  002B3C  500C               	movf	??__RegsToCANID,w,c
 14837  002B3E  6EDF               	movwf	indf2,c
 14838                           
 14839                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 14840  002B40  500E               	movf	__RegsToCANID@Value,w,c
 14841  002B42  6ED9               	movwf	fsr2l,c
 14842  002B44  6ADA               	clrf	fsr2h,c
 14843  002B46  0E03               	movlw	3
 14844  002B48  26D9               	addwf	fsr2l,f,c
 14845  002B4A  D836               	call	PL42	;call to abstracted procedure
 14846  002B4C  320C               	rrcf	??__RegsToCANID,f,c
 14847  002B4E  90D8               	bcf	status,0,c
 14848  002B50  320C               	rrcf	??__RegsToCANID,f,c
 14849  002B52  90D8               	bcf	status,0,c
 14850  002B54  300C               	rrcf	??__RegsToCANID,w,c
 14851                           
 14852                           ;ECAN.c: 1176: ptr++;
 14853                           
 14854                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 14855  002B56  D839               	call	PL44	;call to abstracted procedure
 14856  002B58  0E03               	movlw	3
 14857  002B5A  160C               	andwf	??__RegsToCANID,f,c
 14858  002B5C  D81C               	call	PL24	;call to abstracted procedure
 14859  002B5E  500C               	movf	??__RegsToCANID,w,c
 14860  002B60  12DF               	iorwf	indf2,f,c
 14861                           
 14862                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 14863  002B62  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14864  002B66  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14865  002B6A  50DF               	movf	indf2,w,c
 14866  002B6C  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14867  002B6E  90D8               	bcf	status,0,c
 14868  002B70  320C               	rrcf	??__RegsToCANID,f,c
 14869  002B72  90D8               	bcf	status,0,c
 14870  002B74  320C               	rrcf	??__RegsToCANID,f,c
 14871  002B76  90D8               	bcf	status,0,c
 14872  002B78  320C               	rrcf	??__RegsToCANID,f,c
 14873  002B7A  0E1C               	movlw	28
 14874  002B7C  160C               	andwf	??__RegsToCANID,f,c
 14875  002B7E  D80B               	call	PL24	;call to abstracted procedure
 14876  002B80  500C               	movf	??__RegsToCANID,w,c
 14877  002B82  12DF               	iorwf	indf2,f,c
 14878                           
 14879                           ;ECAN.c: 1180: ptr++;
 14880                           
 14881                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 14882  002B84  D80F               	call	PL34	;call to abstracted procedure
 14883  002B86  2AE1               	incf	fsr1l,f,c
 14884  002B88  6AE2               	clrf	fsr1h,c
 14885  002B8A  CFDF FFE7          	movff	indf2,indf1
 14886                           
 14887                           ;ECAN.c: 1182: ptr++;
 14888                           
 14889                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 14890  002B8E  D80A               	call	PL34	;call to abstracted procedure
 14891  002B90  CFDF FFE7          	movff	indf2,indf1
 14892  002B94                     l912:
 14893  002B94  0012               	return	
 14894  002B96                     __end_of__RegsToCANID:
 14895                           	opt stack 0
 14896  002B96                     PL24:
 14897                           	opt stack 24
 14898  002B96  500E               	movf	__RegsToCANID@Value,w,c
 14899  002B98  6ED9               	movwf	fsr2l,c
 14900  002B9A  6ADA               	clrf	fsr2h,c
 14901  002B9C  0E02               	movlw	2
 14902  002B9E  26D9               	addwf	fsr2l,f,c
 14903  002BA0  6ADA               	clrf	fsr2h,c
 14904  002BA2  0012               	return	
 14905  002BA4                     __end_ofPL24:
 14906                           	opt stack 0
 14907  002BA4                     PL34:
 14908                           	opt stack 24
 14909  002BA4  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14910  002BA6  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14911  002BA8  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14912  002BAC  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14913  002BB0  500E               	movf	__RegsToCANID@Value,w,c
 14914  002BB2  6EE1               	movwf	fsr1l,c
 14915  002BB4  6AE2               	clrf	fsr1h,c
 14916  002BB6  0012               	return	
 14917  002BB8                     __end_ofPL34:
 14918                           	opt stack 0
 14919  002BB8                     PL42:
 14920                           	opt stack 24
 14921  002BB8  6ADA               	clrf	fsr2h,c
 14922  002BBA  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14923  002BBE  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14924  002BC2  50E7               	movf	indf1,w,c
 14925  002BC4  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14926  002BC6  90D8               	bcf	status,0,c
 14927  002BC8  0012               	return	
 14928  002BCA                     __end_ofPL42:
 14929                           	opt stack 0
 14930  002BCA                     PL44:
 14931                           	opt stack 24
 14932  002BCA  6EDF               	movwf	indf2,c
 14933  002BCC  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14934  002BCE  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14935  002BD0  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14936  002BD4  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14937  002BD8  50DF               	movf	indf2,w,c
 14938  002BDA  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14939  002BDC  0012               	return	
 14940  002BDE                     __end_ofPL44:
 14941                           	opt stack 0
 14942  002BDE                     PL50:
 14943                           	opt stack 24
 14944  002BDE  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14945  002BE2  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14946  002BE6  50E7               	movf	indf1,w,c
 14947  002BE8  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14948  002BEA  0E05               	movlw	5
 14949  002BEC  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14950  002BEE  0C05               	retlw	5
 14951  002BF0                     __end_ofPL50:
 14952                           	opt stack 0
 14953                           tblptru	equ	0xFF8
 14954                           tblptrh	equ	0xFF7
 14955                           tblptrl	equ	0xFF6
 14956                           tablat	equ	0xFF5
 14957                           prodh	equ	0xFF4
 14958                           prodl	equ	0xFF3
 14959                           intcon	equ	0xFF2
 14960                           postinc0	equ	0xFEE
 14961                           wreg	equ	0xFE8
 14962                           indf1	equ	0xFE7
 14963                           fsr1h	equ	0xFE2
 14964                           fsr1l	equ	0xFE1
 14965                           indf2	equ	0xFDF
 14966                           postinc2	equ	0xFDE
 14967                           postdec2	equ	0xFDD
 14968                           plusw2	equ	0xFDB
 14969                           fsr2h	equ	0xFDA
 14970                           fsr2l	equ	0xFD9
 14971                           status	equ	0xFD8
 14972                           
 14973 ;; *************** function __ECANPointBuffer *****************
 14974 ;; Defined at:
 14975 ;;		line 1207 in file "../ECAN.c"
 14976 ;; Parameters:    Size  Location     Type
 14977 ;;  b               1    wreg     unsigned char 
 14978 ;; Auto vars:     Size  Location     Type
 14979 ;;  b               1   10[COMRAM] unsigned char 
 14980 ;;  pt              2   11[COMRAM] PTR unsigned char 
 14981 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14982 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14983 ;; Return value:  Size  Location     Type
 14984 ;;                  2    7[COMRAM] PTR unsigned char 
 14985 ;; Registers used:
 14986 ;;		wreg, status,2, status,0
 14987 ;; Tracked objects:
 14988 ;;		On entry : F/0
 14989 ;;		On exit  : 0/0
 14990 ;;		Unchanged: 0/0
 14991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14992 ;;      Params:         3       0       0       0       0       0       0
 14993 ;;      Locals:         3       0       0       0       0       0       0
 14994 ;;      Temps:          0       0       0       0       0       0       0
 14995 ;;      Totals:         6       0       0       0       0       0       0
 14996 ;;Total ram usage:        6 bytes
 14997 ;; Hardware stack levels used:    1
 14998 ;; Hardware stack levels required when called:    2
 14999 ;; This function calls:
 15000 ;;		Nothing
 15001 ;; This function is called by:
 15002 ;;		_ECANReceiveMessage
 15003 ;; This function uses a non-reentrant model
 15004 ;;
 15005                           
 15006                           	psect	text61
 15007  0034C8                     __ptext61:
 15008                           	opt stack 0
 15009  0034C8                     __ECANPointBuffer:
 15010                           	opt stack 24
 15011                           
 15012                           ;incstack = 0
 15013                           ;incstack = 0
 15014                           ;__ECANPointBuffer@b stored from wreg
 15015  0034C8  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 15016                           
 15017                           ; BSR set to: 0
 15018                           ;ECAN.c: 1208: BYTE* pt;
 15019                           ;ECAN.c: 1210: switch(b)
 15020  0034CC  D024               	goto	l6775
 15021  0034CE                     l6757:
 15022                           
 15023                           ; BSR set to: 0
 15024                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 15025  0034CE  0E0F               	movlw	15	;volatile
 15026  0034D0  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15027  0034D2  0E60               	movlw	96	;volatile
 15028  0034D4  D01E               	goto	L45
 15029  0034D6                     l6759:
 15030                           
 15031                           ; BSR set to: 0
 15032                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 15033  0034D6  010F               	movlb	15	; () banked
 15034  0034D8  0E0F               	movlw	15	;volatile
 15035  0034DA  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15036  0034DC  0E50               	movlw	80	;volatile
 15037  0034DE  D019               	goto	L45
 15038  0034E0                     l6761:
 15039                           
 15040                           ; BSR set to: 0
 15041                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 15042  0034E0  010E               	movlb	14	; () banked
 15043  0034E2  0E0E               	movlw	14	;volatile
 15044  0034E4  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15045  0034E6  0E20               	movlw	32	;volatile
 15046  0034E8  D014               	goto	L45
 15047  0034EA                     l6763:
 15048                           
 15049                           ; BSR set to: 0
 15050                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 15051  0034EA  010E               	movlb	14	; () banked
 15052  0034EC  0E0E               	movlw	14	;volatile
 15053  0034EE  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15054  0034F0  0E30               	movlw	48	;volatile
 15055  0034F2  D00F               	goto	L45
 15056  0034F4                     l6765:
 15057                           
 15058                           ; BSR set to: 0
 15059                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 15060  0034F4  010E               	movlb	14	; () banked
 15061  0034F6  0E0E               	movlw	14	;volatile
 15062  0034F8  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15063  0034FA  0E40               	movlw	64	;volatile
 15064  0034FC  D00A               	goto	L45
 15065  0034FE                     l6767:
 15066                           
 15067                           ; BSR set to: 0
 15068                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 15069  0034FE  010E               	movlb	14	; () banked
 15070  003500  0E0E               	movlw	14	;volatile
 15071  003502  D7EB               	goto	L46
 15072  003504                     l6769:
 15073                           
 15074                           ; BSR set to: 0
 15075                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 15076  003504  010E               	movlb	14	; () banked
 15077  003506  0E0E               	movlw	14	;volatile
 15078  003508  D7E3               	goto	L47
 15079  00350A                     l6771:
 15080                           
 15081                           ; BSR set to: 0
 15082                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 15083  00350A  010E               	movlb	14	; () banked
 15084  00350C  0E0E               	movlw	14	;volatile
 15085  00350E  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15086  003510  0E70               	movlw	112	;volatile
 15087  003512                     L45:
 15088  003512  6E0C               	movwf	__ECANPointBuffer@pt,c
 15089                           
 15090                           ;ECAN.c: 1235: break;
 15091  003514  D00F               	goto	l917
 15092  003516                     l6775:
 15093                           
 15094                           ; BSR set to: 0
 15095  003516  500B               	movf	__ECANPointBuffer@b,w,c
 15096                           
 15097                           ; Switch size 1, requested type "space"
 15098                           ; Number of cases is 7, Range of values is 0 to 6
 15099                           ; switch strategies available:
 15100                           ; Name         Instructions Cycles
 15101                           ; simple_byte           22    12 (average)
 15102                           ;	Chosen strategy is simple_byte
 15103  003518  E0DA               	bz	l6757
 15104  00351A  0A01               	xorlw	1	; case 1
 15105  00351C  E0DC               	bz	l6759
 15106  00351E  0A03               	xorlw	3	; case 2
 15107  003520  E0DF               	bz	l6761
 15108  003522  0A01               	xorlw	1	; case 3
 15109  003524  E0E2               	bz	l6763
 15110  003526  0A07               	xorlw	7	; case 4
 15111  003528  E0E5               	bz	l6765
 15112  00352A  0A01               	xorlw	1	; case 5
 15113  00352C  E0E8               	bz	l6767
 15114  00352E  0A03               	xorlw	3	; case 6
 15115  003530  E0E9               	bz	l6769
 15116  003532  D7EB               	goto	l6771
 15117  003534                     l917:
 15118                           
 15119                           ;ECAN.c: 1237: return (pt);
 15120  003534  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 15121  003538  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 15122  00353C  0012               	return	
 15123  00353E                     __end_of__ECANPointBuffer:
 15124                           	opt stack 0
 15125                           tblptru	equ	0xFF8
 15126                           tblptrh	equ	0xFF7
 15127                           tblptrl	equ	0xFF6
 15128                           tablat	equ	0xFF5
 15129                           prodh	equ	0xFF4
 15130                           prodl	equ	0xFF3
 15131                           intcon	equ	0xFF2
 15132                           postinc0	equ	0xFEE
 15133                           wreg	equ	0xFE8
 15134                           indf1	equ	0xFE7
 15135                           fsr1h	equ	0xFE2
 15136                           fsr1l	equ	0xFE1
 15137                           indf2	equ	0xFDF
 15138                           postinc2	equ	0xFDE
 15139                           postdec2	equ	0xFDD
 15140                           plusw2	equ	0xFDB
 15141                           fsr2h	equ	0xFDA
 15142                           fsr2l	equ	0xFD9
 15143                           status	equ	0xFD8
 15144                           
 15145 ;; *************** function _vscp_check_pstorage *****************
 15146 ;; Defined at:
 15147 ;;		line 166 in file "../../vscp_firmware/common/vscp_firmware.c"
 15148 ;; Parameters:    Size  Location     Type
 15149 ;;		None
 15150 ;; Auto vars:     Size  Location     Type
 15151 ;;		None
 15152 ;; Return value:  Size  Location     Type
 15153 ;;                  1    wreg      unsigned char 
 15154 ;; Registers used:
 15155 ;;		wreg, status,2, status,0, cstack
 15156 ;; Tracked objects:
 15157 ;;		On entry : 0/0
 15158 ;;		On exit  : 0/0
 15159 ;;		Unchanged: 0/0
 15160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15161 ;;      Params:         0       0       0       0       0       0       0
 15162 ;;      Locals:         0       0       0       0       0       0       0
 15163 ;;      Temps:          0       0       0       0       0       0       0
 15164 ;;      Totals:         0       0       0       0       0       0       0
 15165 ;;Total ram usage:        0 bytes
 15166 ;; Hardware stack levels used:    1
 15167 ;; Hardware stack levels required when called:    4
 15168 ;; This function calls:
 15169 ;;		_vscp_writeNicknamePermanent
 15170 ;;		_vscp_getSegmentCRC
 15171 ;;		_vscp_setSegmentCRC
 15172 ;;		_vscp_setControlByte
 15173 ;; This function is called by:
 15174 ;;		_main
 15175 ;; This function uses a non-reentrant model
 15176 ;;
 15177                           
 15178                           	psect	text62
 15179  0038D2                     __ptext62:
 15180                           	opt stack 0
 15181  0038D2                     _vscp_check_pstorage:
 15182                           	opt stack 26
 15183                           
 15184                           ;vscp_firmware.c: 169: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 15185                           
 15186                           ;incstack = 0
 15187                           ;incstack = 0
 15188  0038D2  EC97  F01D         	call	_vscp_getSegmentCRC	;wreg free
 15189  0038D6  0BC0               	andlw	192
 15190  0038D8  0A40               	xorlw	64
 15191  0038DA  E102               	bnz	l7245
 15192                           
 15193                           ;vscp_firmware.c: 170: return !0;
 15194  0038DC  0E01               	movlw	1
 15195  0038DE  D00A               	goto	l1037
 15196  0038E0                     l7245:
 15197                           
 15198                           ;vscp_firmware.c: 171: }
 15199                           ;vscp_firmware.c: 174: vscp_writeNicknamePermanent(0xff);
 15200  0038E0  0EFF               	movlw	255
 15201  0038E2  EC5A  F01D         	call	_vscp_writeNicknamePermanent
 15202                           
 15203                           ;vscp_firmware.c: 177: vscp_setSegmentCRC(0x00);
 15204  0038E6  0E00               	movlw	0
 15205  0038E8  EC51  F01D         	call	_vscp_setSegmentCRC
 15206                           
 15207                           ;vscp_firmware.c: 181: vscp_setControlByte(0xA0);
 15208  0038EC  0EA0               	movlw	160
 15209  0038EE  EC48  F01D         	call	_vscp_setControlByte
 15210                           
 15211                           ;vscp_firmware.c: 183: return 0;
 15212  0038F2  0E00               	movlw	0
 15213  0038F4                     l1037:
 15214  0038F4  0012               	return	
 15215  0038F6                     __end_of_vscp_check_pstorage:
 15216                           	opt stack 0
 15217                           tblptru	equ	0xFF8
 15218                           tblptrh	equ	0xFF7
 15219                           tblptrl	equ	0xFF6
 15220                           tablat	equ	0xFF5
 15221                           prodh	equ	0xFF4
 15222                           prodl	equ	0xFF3
 15223                           intcon	equ	0xFF2
 15224                           postinc0	equ	0xFEE
 15225                           wreg	equ	0xFE8
 15226                           indf1	equ	0xFE7
 15227                           fsr1h	equ	0xFE2
 15228                           fsr1l	equ	0xFE1
 15229                           indf2	equ	0xFDF
 15230                           postinc2	equ	0xFDE
 15231                           postdec2	equ	0xFDD
 15232                           plusw2	equ	0xFDB
 15233                           fsr2h	equ	0xFDA
 15234                           fsr2l	equ	0xFD9
 15235                           status	equ	0xFD8
 15236                           
 15237 ;; *************** function _vscp_setControlByte *****************
 15238 ;; Defined at:
 15239 ;;		line 2361 in file "../main.c"
 15240 ;; Parameters:    Size  Location     Type
 15241 ;;  ctrl            1    wreg     unsigned char 
 15242 ;; Auto vars:     Size  Location     Type
 15243 ;;  ctrl            1   10[COMRAM] unsigned char 
 15244 ;; Return value:  Size  Location     Type
 15245 ;;		None               void
 15246 ;; Registers used:
 15247 ;;		wreg, status,2, cstack
 15248 ;; Tracked objects:
 15249 ;;		On entry : 0/0
 15250 ;;		On exit  : 0/0
 15251 ;;		Unchanged: 0/0
 15252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15253 ;;      Params:         0       0       0       0       0       0       0
 15254 ;;      Locals:         1       0       0       0       0       0       0
 15255 ;;      Temps:          0       0       0       0       0       0       0
 15256 ;;      Totals:         1       0       0       0       0       0       0
 15257 ;;Total ram usage:        1 bytes
 15258 ;; Hardware stack levels used:    1
 15259 ;; Hardware stack levels required when called:    3
 15260 ;; This function calls:
 15261 ;;		_writeEEPROM
 15262 ;; This function is called by:
 15263 ;;		_vscp_check_pstorage
 15264 ;; This function uses a non-reentrant model
 15265 ;;
 15266                           
 15267                           	psect	text63
 15268  003A90                     __ptext63:
 15269                           	opt stack 0
 15270  003A90                     _vscp_setControlByte:
 15271                           	opt stack 26
 15272                           
 15273                           ;incstack = 0
 15274                           ;incstack = 0
 15275                           ;vscp_setControlByte@ctrl stored from wreg
 15276  003A90  CFE8 F00B          	movff	wreg,vscp_setControlByte@ctrl
 15277                           
 15278                           ;main.c: 2362: writeEEPROM(0x03, ctrl);
 15279  003A94  6A09               	clrf	?_writeEEPROM+1,c
 15280  003A96  0E03               	movlw	3
 15281  003A98  6E08               	movwf	?_writeEEPROM,c
 15282  003A9A  C00B  F00A         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 15283  003A9E  EF44  F01C         	goto	_writeEEPROM	;wreg free
 15284  003AA2                     __end_of_vscp_setControlByte:
 15285                           	opt stack 0
 15286                           tblptru	equ	0xFF8
 15287                           tblptrh	equ	0xFF7
 15288                           tblptrl	equ	0xFF6
 15289                           tablat	equ	0xFF5
 15290                           prodh	equ	0xFF4
 15291                           prodl	equ	0xFF3
 15292                           intcon	equ	0xFF2
 15293                           postinc0	equ	0xFEE
 15294                           wreg	equ	0xFE8
 15295                           indf1	equ	0xFE7
 15296                           fsr1h	equ	0xFE2
 15297                           fsr1l	equ	0xFE1
 15298                           indf2	equ	0xFDF
 15299                           postinc2	equ	0xFDE
 15300                           postdec2	equ	0xFDD
 15301                           plusw2	equ	0xFDB
 15302                           fsr2h	equ	0xFDA
 15303                           fsr2l	equ	0xFD9
 15304                           status	equ	0xFD8
 15305                           
 15306 ;; *************** function _vscp_setSegmentCRC *****************
 15307 ;; Defined at:
 15308 ;;		line 2352 in file "../main.c"
 15309 ;; Parameters:    Size  Location     Type
 15310 ;;  crc             1    wreg     unsigned char 
 15311 ;; Auto vars:     Size  Location     Type
 15312 ;;  crc             1   10[COMRAM] unsigned char 
 15313 ;; Return value:  Size  Location     Type
 15314 ;;		None               void
 15315 ;; Registers used:
 15316 ;;		wreg, status,2, cstack
 15317 ;; Tracked objects:
 15318 ;;		On entry : 0/0
 15319 ;;		On exit  : 0/0
 15320 ;;		Unchanged: 0/0
 15321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15322 ;;      Params:         0       0       0       0       0       0       0
 15323 ;;      Locals:         1       0       0       0       0       0       0
 15324 ;;      Temps:          0       0       0       0       0       0       0
 15325 ;;      Totals:         1       0       0       0       0       0       0
 15326 ;;Total ram usage:        1 bytes
 15327 ;; Hardware stack levels used:    1
 15328 ;; Hardware stack levels required when called:    3
 15329 ;; This function calls:
 15330 ;;		_writeEEPROM
 15331 ;; This function is called by:
 15332 ;;		_vscp_check_pstorage
 15333 ;;		_vscp_handleProbeState
 15334 ;;		_vscp_handleHeartbeat
 15335 ;;		_vscp_handleSetNickname
 15336 ;; This function uses a non-reentrant model
 15337 ;;
 15338                           
 15339                           	psect	text64
 15340  003AA2                     __ptext64:
 15341                           	opt stack 0
 15342  003AA2                     _vscp_setSegmentCRC:
 15343                           	opt stack 25
 15344                           
 15345                           ;incstack = 0
 15346                           ;incstack = 0
 15347                           ;vscp_setSegmentCRC@crc stored from wreg
 15348  003AA2  CFE8 F00B          	movff	wreg,vscp_setSegmentCRC@crc
 15349                           
 15350                           ;main.c: 2353: writeEEPROM( 0x02, crc );
 15351  003AA6  6A09               	clrf	?_writeEEPROM+1,c
 15352  003AA8  0E02               	movlw	2
 15353  003AAA  6E08               	movwf	?_writeEEPROM,c
 15354  003AAC  C00B  F00A         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 15355  003AB0  EF44  F01C         	goto	_writeEEPROM	;wreg free
 15356  003AB4                     __end_of_vscp_setSegmentCRC:
 15357                           	opt stack 0
 15358                           tblptru	equ	0xFF8
 15359                           tblptrh	equ	0xFF7
 15360                           tblptrl	equ	0xFF6
 15361                           tablat	equ	0xFF5
 15362                           prodh	equ	0xFF4
 15363                           prodl	equ	0xFF3
 15364                           intcon	equ	0xFF2
 15365                           postinc0	equ	0xFEE
 15366                           wreg	equ	0xFE8
 15367                           indf1	equ	0xFE7
 15368                           fsr1h	equ	0xFE2
 15369                           fsr1l	equ	0xFE1
 15370                           indf2	equ	0xFDF
 15371                           postinc2	equ	0xFDE
 15372                           postdec2	equ	0xFDD
 15373                           plusw2	equ	0xFDB
 15374                           fsr2h	equ	0xFDA
 15375                           fsr2l	equ	0xFD9
 15376                           status	equ	0xFD8
 15377                           
 15378 ;; *************** function _vscp_getSegmentCRC *****************
 15379 ;; Defined at:
 15380 ;;		line 2343 in file "../main.c"
 15381 ;; Parameters:    Size  Location     Type
 15382 ;;		None
 15383 ;; Auto vars:     Size  Location     Type
 15384 ;;		None
 15385 ;; Return value:  Size  Location     Type
 15386 ;;                  1    wreg      unsigned char 
 15387 ;; Registers used:
 15388 ;;		wreg, status,2, cstack
 15389 ;; Tracked objects:
 15390 ;;		On entry : 0/0
 15391 ;;		On exit  : 0/0
 15392 ;;		Unchanged: 0/0
 15393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15394 ;;      Params:         0       0       0       0       0       0       0
 15395 ;;      Locals:         0       0       0       0       0       0       0
 15396 ;;      Temps:          0       0       0       0       0       0       0
 15397 ;;      Totals:         0       0       0       0       0       0       0
 15398 ;;Total ram usage:        0 bytes
 15399 ;; Hardware stack levels used:    1
 15400 ;; Hardware stack levels required when called:    3
 15401 ;; This function calls:
 15402 ;;		_readEEPROM
 15403 ;; This function is called by:
 15404 ;;		_vscp_check_pstorage
 15405 ;;		_vscp_handleHeartbeat
 15406 ;; This function uses a non-reentrant model
 15407 ;;
 15408                           
 15409                           	psect	text65
 15410  003B2E                     __ptext65:
 15411                           	opt stack 0
 15412  003B2E                     _vscp_getSegmentCRC:
 15413                           	opt stack 25
 15414                           
 15415                           ;main.c: 2344: return readEEPROM( 0x02 );
 15416                           
 15417                           ;incstack = 0
 15418                           ;incstack = 0
 15419  003B2E  6A09               	clrf	?_readEEPROM+1,c
 15420  003B30  0E02               	movlw	2
 15421  003B32  6E08               	movwf	?_readEEPROM,c
 15422  003B34  EF6C  F01D         	goto	_readEEPROM	;wreg free
 15423  003B38                     __end_of_vscp_getSegmentCRC:
 15424                           	opt stack 0
 15425                           tblptru	equ	0xFF8
 15426                           tblptrh	equ	0xFF7
 15427                           tblptrl	equ	0xFF6
 15428                           tablat	equ	0xFF5
 15429                           prodh	equ	0xFF4
 15430                           prodl	equ	0xFF3
 15431                           intcon	equ	0xFF2
 15432                           postinc0	equ	0xFEE
 15433                           wreg	equ	0xFE8
 15434                           indf1	equ	0xFE7
 15435                           fsr1h	equ	0xFE2
 15436                           fsr1l	equ	0xFE1
 15437                           indf2	equ	0xFDF
 15438                           postinc2	equ	0xFDE
 15439                           postdec2	equ	0xFDD
 15440                           plusw2	equ	0xFDB
 15441                           fsr2h	equ	0xFDA
 15442                           fsr2l	equ	0xFD9
 15443                           status	equ	0xFD8
 15444                           
 15445 ;; *************** function _vscp_writeNicknamePermanent *****************
 15446 ;; Defined at:
 15447 ;;		line 858 in file "../main.c"
 15448 ;; Parameters:    Size  Location     Type
 15449 ;;  nickname        1    wreg     unsigned char 
 15450 ;; Auto vars:     Size  Location     Type
 15451 ;;  nickname        1   10[COMRAM] unsigned char 
 15452 ;; Return value:  Size  Location     Type
 15453 ;;		None               void
 15454 ;; Registers used:
 15455 ;;		wreg, status,2, cstack
 15456 ;; Tracked objects:
 15457 ;;		On entry : 0/0
 15458 ;;		On exit  : 0/0
 15459 ;;		Unchanged: 0/0
 15460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15461 ;;      Params:         0       0       0       0       0       0       0
 15462 ;;      Locals:         1       0       0       0       0       0       0
 15463 ;;      Temps:          0       0       0       0       0       0       0
 15464 ;;      Totals:         1       0       0       0       0       0       0
 15465 ;;Total ram usage:        1 bytes
 15466 ;; Hardware stack levels used:    1
 15467 ;; Hardware stack levels required when called:    3
 15468 ;; This function calls:
 15469 ;;		_writeEEPROM
 15470 ;; This function is called by:
 15471 ;;		_vscp_check_pstorage
 15472 ;;		_vscp_handleProbeState
 15473 ;;		_vscp_handleHeartbeat
 15474 ;;		_vscp_handleSetNickname
 15475 ;;		_vscp_handleDropNickname
 15476 ;; This function uses a non-reentrant model
 15477 ;;
 15478                           
 15479                           	psect	text66
 15480  003AB4                     __ptext66:
 15481                           	opt stack 0
 15482  003AB4                     _vscp_writeNicknamePermanent:
 15483                           	opt stack 25
 15484                           
 15485                           ;incstack = 0
 15486                           ;incstack = 0
 15487                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 15488  003AB4  CFE8 F00B          	movff	wreg,vscp_writeNicknamePermanent@nickname
 15489                           
 15490                           ;main.c: 859: writeEEPROM( 0x01, nickname );
 15491  003AB8  6A09               	clrf	?_writeEEPROM+1,c
 15492  003ABA  0E01               	movlw	1
 15493  003ABC  6E08               	movwf	?_writeEEPROM,c
 15494  003ABE  C00B  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 15495  003AC2  EF44  F01C         	goto	_writeEEPROM	;wreg free
 15496  003AC6                     __end_of_vscp_writeNicknamePermanent:
 15497                           	opt stack 0
 15498                           tblptru	equ	0xFF8
 15499                           tblptrh	equ	0xFF7
 15500                           tblptrl	equ	0xFF6
 15501                           tablat	equ	0xFF5
 15502                           prodh	equ	0xFF4
 15503                           prodl	equ	0xFF3
 15504                           intcon	equ	0xFF2
 15505                           postinc0	equ	0xFEE
 15506                           wreg	equ	0xFE8
 15507                           indf1	equ	0xFE7
 15508                           fsr1h	equ	0xFE2
 15509                           fsr1l	equ	0xFE1
 15510                           indf2	equ	0xFDF
 15511                           postinc2	equ	0xFDE
 15512                           postdec2	equ	0xFDD
 15513                           plusw2	equ	0xFDB
 15514                           fsr2h	equ	0xFDA
 15515                           fsr2l	equ	0xFD9
 15516                           status	equ	0xFD8
 15517                           
 15518 ;; *************** function _writeEEPROM *****************
 15519 ;; Defined at:
 15520 ;;		line 23 in file "../../vscp_firmware/pic/common/eeprom.c"
 15521 ;; Parameters:    Size  Location     Type
 15522 ;;  address         2    7[COMRAM] unsigned short 
 15523 ;;  data            1    9[COMRAM] unsigned char 
 15524 ;; Auto vars:     Size  Location     Type
 15525 ;;		None
 15526 ;; Return value:  Size  Location     Type
 15527 ;;		None               void
 15528 ;; Registers used:
 15529 ;;		wreg, status,2
 15530 ;; Tracked objects:
 15531 ;;		On entry : 0/0
 15532 ;;		On exit  : 0/0
 15533 ;;		Unchanged: 0/0
 15534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15535 ;;      Params:         3       0       0       0       0       0       0
 15536 ;;      Locals:         0       0       0       0       0       0       0
 15537 ;;      Temps:          0       0       0       0       0       0       0
 15538 ;;      Totals:         3       0       0       0       0       0       0
 15539 ;;Total ram usage:        3 bytes
 15540 ;; Hardware stack levels used:    1
 15541 ;; Hardware stack levels required when called:    2
 15542 ;; This function calls:
 15543 ;;		Nothing
 15544 ;; This function is called by:
 15545 ;;		_main
 15546 ;;		_init_app_eeprom
 15547 ;;		_vscp_setGUID
 15548 ;;		_vscp_setManufacturerId
 15549 ;;		_vscp_writeNicknamePermanent
 15550 ;;		_vscp_writeAppReg
 15551 ;;		_doActionDisable
 15552 ;;		_vscp_setUserID
 15553 ;;		_vscp_setSegmentCRC
 15554 ;;		_vscp_setControlByte
 15555 ;;		_vscp_goBootloaderMode
 15556 ;; This function uses a non-reentrant model
 15557 ;;
 15558                           
 15559                           	psect	text67
 15560  003888                     __ptext67:
 15561                           	opt stack 0
 15562  003888                     _writeEEPROM:
 15563                           	opt stack 26
 15564                           
 15565                           ;eeprom.c: 29: EEADR = address & 0xff;
 15566                           
 15567                           ;incstack = 0
 15568                           ;incstack = 0
 15569  003888  C008  FFA9         	movff	writeEEPROM@address,4009	;volatile
 15570                           
 15571                           ;eeprom.c: 30: EEDATA = data;
 15572  00388C  C00A  FFA8         	movff	writeEEPROM@data,4008	;volatile
 15573                           
 15574                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 15575  003890  9EA6               	bcf	4006,7,c	;volatile
 15576                           
 15577                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 15578  003892  9CA6               	bcf	4006,6,c	;volatile
 15579                           
 15580                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 15581  003894  84A6               	bsf	4006,2,c	;volatile
 15582                           
 15583                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 15584  003896  9EF2               	bcf	intcon,7,c	;volatile
 15585                           
 15586                           ;eeprom.c: 37: EECON2 = 0x55;
 15587  003898  0E55               	movlw	85
 15588  00389A  6EA7               	movwf	4007,c	;volatile
 15589                           
 15590                           ;eeprom.c: 38: EECON2 = 0xaa;
 15591  00389C  0EAA               	movlw	170
 15592  00389E  6EA7               	movwf	4007,c	;volatile
 15593                           
 15594                           ;eeprom.c: 39: EECON1bits.WR = 1;
 15595  0038A0  82A6               	bsf	4006,1,c	;volatile
 15596                           
 15597                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 15598  0038A2  8EF2               	bsf	intcon,7,c	;volatile
 15599  0038A4                     l1295:
 15600  0038A4  A8A1               	btfss	4001,4,c	;volatile
 15601  0038A6  D7FE               	goto	l1295
 15602                           
 15603                           ;eeprom.c: 47: PIR2bits.EEIF = 0;
 15604  0038A8  98A1               	bcf	4001,4,c	;volatile
 15605                           
 15606                           ;eeprom.c: 49: EECON1bits.WREN = 0;
 15607  0038AA  94A6               	bcf	4006,2,c	;volatile
 15608  0038AC  0012               	return	
 15609  0038AE                     __end_of_writeEEPROM:
 15610                           	opt stack 0
 15611                           tblptru	equ	0xFF8
 15612                           tblptrh	equ	0xFF7
 15613                           tblptrl	equ	0xFF6
 15614                           tablat	equ	0xFF5
 15615                           prodh	equ	0xFF4
 15616                           prodl	equ	0xFF3
 15617                           intcon	equ	0xFF2
 15618                           postinc0	equ	0xFEE
 15619                           wreg	equ	0xFE8
 15620                           indf1	equ	0xFE7
 15621                           fsr1h	equ	0xFE2
 15622                           fsr1l	equ	0xFE1
 15623                           indf2	equ	0xFDF
 15624                           postinc2	equ	0xFDE
 15625                           postdec2	equ	0xFDD
 15626                           plusw2	equ	0xFDB
 15627                           fsr2h	equ	0xFDA
 15628                           fsr2l	equ	0xFD9
 15629                           status	equ	0xFD8
 15630                           
 15631 ;; *************** function _init *****************
 15632 ;; Defined at:
 15633 ;;		line 320 in file "../main.c"
 15634 ;; Parameters:    Size  Location     Type
 15635 ;;		None
 15636 ;; Auto vars:     Size  Location     Type
 15637 ;;		None
 15638 ;; Return value:  Size  Location     Type
 15639 ;;		None               void
 15640 ;; Registers used:
 15641 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15642 ;; Tracked objects:
 15643 ;;		On entry : 0/0
 15644 ;;		On exit  : 0/0
 15645 ;;		Unchanged: 0/0
 15646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15647 ;;      Params:         0       0       0       0       0       0       0
 15648 ;;      Locals:         0       0       0       0       0       0       0
 15649 ;;      Temps:          0       0       0       0       0       0       0
 15650 ;;      Totals:         0       0       0       0       0       0       0
 15651 ;;Total ram usage:        0 bytes
 15652 ;; Hardware stack levels used:    1
 15653 ;; Hardware stack levels required when called:    4
 15654 ;; This function calls:
 15655 ;;		_WriteTimer0
 15656 ;;		_init_app_ram
 15657 ;;		_OpenTimer0
 15658 ;;		_ECANInitialize
 15659 ;; This function is called by:
 15660 ;;		_main
 15661 ;; This function uses a non-reentrant model
 15662 ;;
 15663                           
 15664                           	psect	text68
 15665  003726                     __ptext68:
 15666                           	opt stack 0
 15667  003726                     _init:
 15668                           	opt stack 26
 15669                           
 15670                           ;main.c: 325: init_app_ram();
 15671                           
 15672                           ;incstack = 0
 15673                           ;incstack = 0
 15674  003726  EC08  F017         	call	_init_app_ram	;wreg free
 15675                           
 15676                           ;main.c: 336: TRISA = 0x00;
 15677  00372A  6A92               	clrf	3986,c	;volatile
 15678                           
 15679                           ;main.c: 337: PORTA = 0x00;
 15680  00372C  6A80               	clrf	3968,c	;volatile
 15681                           
 15682                           ;main.c: 349: TRISB = 0b00001000;
 15683  00372E  0E08               	movlw	8
 15684  003730  6E93               	movwf	3987,c	;volatile
 15685                           
 15686                           ;main.c: 350: PORTB = 0x00;
 15687  003732  6A81               	clrf	3969,c	;volatile
 15688                           
 15689                           ;main.c: 360: TRISC = 0b00000001;
 15690  003734  0E01               	movlw	1
 15691  003736  6E94               	movwf	3988,c	;volatile
 15692                           
 15693                           ;main.c: 361: PORTC = 0x00;
 15694  003738  6A82               	clrf	3970,c	;volatile
 15695                           
 15696                           ;main.c: 387: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 15697  00373A  0E92               	movlw	146
 15698  00373C  ECDE  F01C         	call	_OpenTimer0
 15699                           
 15700                           ;main.c: 388: WriteTimer0( 0xfb1d );
 15701  003740  0EFB               	movlw	251
 15702  003742  6E09               	movwf	?_WriteTimer0+1,c
 15703  003744  0E1D               	movlw	29
 15704  003746  6E08               	movwf	?_WriteTimer0,c
 15705  003748  EC63  F01D         	call	_WriteTimer0	;wreg free
 15706                           
 15707                           ;main.c: 391: LATBbits.LATB4 = 0;
 15708  00374C  988A               	bcf	3978,4,c	;volatile
 15709                           
 15710                           ;main.c: 392: LATBbits.LATB1 = 0;
 15711  00374E  928A               	bcf	3978,1,c	;volatile
 15712                           
 15713                           ;main.c: 393: LATBbits.LATB0 = 0;
 15714  003750  908A               	bcf	3978,0,c	;volatile
 15715                           
 15716                           ;main.c: 394: LATCbits.LATC7 = 0;
 15717  003752  9E8B               	bcf	3979,7,c	;volatile
 15718                           
 15719                           ;main.c: 395: LATCbits.LATC6 = 0;
 15720  003754  9C8B               	bcf	3979,6,c	;volatile
 15721                           
 15722                           ;main.c: 396: LATCbits.LATC5 = 0;
 15723  003756  9A8B               	bcf	3979,5,c	;volatile
 15724                           
 15725                           ;main.c: 397: LATCbits.LATC4 = 0;
 15726  003758  988B               	bcf	3979,4,c	;volatile
 15727                           
 15728                           ;main.c: 400: ECANInitialize();
 15729  00375A  ECDD  F019         	call	_ECANInitialize	;wreg free
 15730                           
 15731                           ;main.c: 421: INTCONbits.PEIE = 1;
 15732  00375E  8CF2               	bsf	intcon,6,c	;volatile
 15733                           
 15734                           ;main.c: 424: INTCONbits.GIE = 1;
 15735  003760  8EF2               	bsf	intcon,7,c	;volatile
 15736  003762  0012               	return	
 15737  003764                     __end_of_init:
 15738                           	opt stack 0
 15739                           tblptru	equ	0xFF8
 15740                           tblptrh	equ	0xFF7
 15741                           tblptrl	equ	0xFF6
 15742                           tablat	equ	0xFF5
 15743                           prodh	equ	0xFF4
 15744                           prodl	equ	0xFF3
 15745                           intcon	equ	0xFF2
 15746                           postinc0	equ	0xFEE
 15747                           wreg	equ	0xFE8
 15748                           indf1	equ	0xFE7
 15749                           fsr1h	equ	0xFE2
 15750                           fsr1l	equ	0xFE1
 15751                           indf2	equ	0xFDF
 15752                           postinc2	equ	0xFDE
 15753                           postdec2	equ	0xFDD
 15754                           plusw2	equ	0xFDB
 15755                           fsr2h	equ	0xFDA
 15756                           fsr2l	equ	0xFD9
 15757                           status	equ	0xFD8
 15758                           
 15759 ;; *************** function _ECANInitialize *****************
 15760 ;; Defined at:
 15761 ;;		line 168 in file "../ECAN.c"
 15762 ;; Parameters:    Size  Location     Type
 15763 ;;		None
 15764 ;; Auto vars:     Size  Location     Type
 15765 ;;		None
 15766 ;; Return value:  Size  Location     Type
 15767 ;;		None               void
 15768 ;; Registers used:
 15769 ;;		wreg, status,2, status,0, cstack
 15770 ;; Tracked objects:
 15771 ;;		On entry : 0/0
 15772 ;;		On exit  : 0/0
 15773 ;;		Unchanged: 0/0
 15774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15775 ;;      Params:         0       0       0       0       0       0       0
 15776 ;;      Locals:         0       0       0       0       0       0       0
 15777 ;;      Temps:          0       0       0       0       0       0       0
 15778 ;;      Totals:         0       0       0       0       0       0       0
 15779 ;;Total ram usage:        0 bytes
 15780 ;; Hardware stack levels used:    1
 15781 ;; Hardware stack levels required when called:    3
 15782 ;; This function calls:
 15783 ;;		_ECANSetOperationMode
 15784 ;; This function is called by:
 15785 ;;		_init
 15786 ;; This function uses a non-reentrant model
 15787 ;;
 15788                           
 15789                           	psect	text69
 15790  0033BA                     __ptext69:
 15791                           	opt stack 0
 15792  0033BA                     _ECANInitialize:
 15793                           	opt stack 26
 15794                           
 15795                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 15796                           
 15797                           ;incstack = 0
 15798                           ;incstack = 0
 15799  0033BA  0E80               	movlw	128
 15800  0033BC  EC1E  F01D         	call	_ECANSetOperationMode
 15801                           
 15802                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 15803  0033C0  0E09               	movlw	9
 15804  0033C2  6E70               	movwf	3952,c	;volatile
 15805                           
 15806                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 15807  0033C4  0EFC               	movlw	252
 15808  0033C6  6E71               	movwf	3953,c	;volatile
 15809                           
 15810                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 15811                           ;ECAN.c: 181: (0 << 6) |
 15812                           ;ECAN.c: 182: (2-1);
 15813  0033C8  0E01               	movlw	1
 15814  0033CA  6E72               	movwf	3954,c	;volatile
 15815                           
 15816                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 15817  0033CC  0E20               	movlw	32
 15818  0033CE  6E73               	movwf	3955,c	;volatile
 15819                           
 15820                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 15821  0033D0  8E77               	bsf	3959,7,c	;volatile
 15822                           
 15823                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 15824  0033D2  9C77               	bcf	3959,6,c	;volatile
 15825                           
 15826                           ;ECAN.c: 205: RXB0CON = 0;
 15827  0033D4  6A60               	clrf	3936,c	;volatile
 15828                           
 15829                           ;ECAN.c: 211: RXB1CON = 0;
 15830  0033D6  010F               	movlb	15	; () banked
 15831  0033D8  6B50               	clrf	80,b	;volatile
 15832                           
 15833                           ; BSR set to: 15
 15834                           ;ECAN.c: 221: B0CON = 0;
 15835  0033DA  010E               	movlb	14	; () banked
 15836  0033DC  6B20               	clrf	32,b	;volatile
 15837                           
 15838                           ; BSR set to: 14
 15839                           ;ECAN.c: 231: B1CON = 0;
 15840  0033DE  6B30               	clrf	48,b	;volatile
 15841                           
 15842                           ; BSR set to: 14
 15843                           ;ECAN.c: 241: B2CON = 0;
 15844  0033E0  6B40               	clrf	64,b	;volatile
 15845                           
 15846                           ; BSR set to: 14
 15847                           ;ECAN.c: 254: B3CON = 0 << 2;
 15848  0033E2  6B50               	clrf	80,b	;volatile
 15849                           
 15850                           ; BSR set to: 14
 15851                           ;ECAN.c: 264: B4CON = 0 << 2;
 15852  0033E4  6B60               	clrf	96,b	;volatile
 15853                           
 15854                           ; BSR set to: 14
 15855                           ;ECAN.c: 274: B5CON = 0 << 2;
 15856  0033E6  6B70               	clrf	112,b	;volatile
 15857                           
 15858                           ; BSR set to: 14
 15859                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 15860  0033E8  0EE0               	movlw	224
 15861  0033EA  010D               	movlb	13	; () banked
 15862  0033EC  6FF8               	movwf	248,b	;volatile
 15863                           
 15864                           ; BSR set to: 13
 15865                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 15866  0033EE  010F               	movlb	15	; () banked
 15867  0033F0  6B00               	clrf	0,b	;volatile
 15868                           
 15869                           ; BSR set to: 15
 15870  0033F2  0E08               	movlw	8
 15871  0033F4  6F01               	movwf	1,b	;volatile
 15872                           
 15873                           ; BSR set to: 15
 15874  0033F6  6B02               	clrf	2,b	;volatile
 15875                           
 15876                           ; BSR set to: 15
 15877  0033F8  6B03               	clrf	3,b	;volatile
 15878                           
 15879                           ; BSR set to: 15
 15880                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 15881  0033FA  6B04               	clrf	4,b	;volatile
 15882                           
 15883                           ; BSR set to: 15
 15884  0033FC  0EE8               	movlw	232
 15885  0033FE  6F05               	movwf	5,b	;volatile
 15886                           
 15887                           ; BSR set to: 15
 15888  003400  0E1A               	movlw	26
 15889  003402  6F06               	movwf	6,b	;volatile
 15890                           
 15891                           ; BSR set to: 15
 15892  003404  6B07               	clrf	7,b	;volatile
 15893                           
 15894                           ; BSR set to: 15
 15895                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 15896  003406  0E03               	movlw	3
 15897  003408  010D               	movlb	13	; () banked
 15898  00340A  6FD4               	movwf	212,b	;volatile
 15899                           
 15900                           ; BSR set to: 13
 15901                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 15902  00340C  6BD5               	clrf	213,b	;volatile
 15903                           
 15904                           ; BSR set to: 13
 15905                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 15906  00340E  6BE0               	clrf	224,b	;volatile
 15907                           
 15908                           ; BSR set to: 13
 15909                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 15910  003410  0E11               	movlw	17
 15911  003412  6FE1               	movwf	225,b	;volatile
 15912                           
 15913                           ; BSR set to: 13
 15914                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 15915  003414  6FE2               	movwf	226,b	;volatile
 15916                           
 15917                           ; BSR set to: 13
 15918                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 15919  003416  6BE3               	clrf	227,b	;volatile
 15920                           
 15921                           ; BSR set to: 13
 15922                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 15923  003418  6BE4               	clrf	228,b	;volatile
 15924                           
 15925                           ; BSR set to: 13
 15926                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 15927  00341A  6BE5               	clrf	229,b	;volatile
 15928                           
 15929                           ; BSR set to: 13
 15930                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 15931  00341C  6BE6               	clrf	230,b	;volatile
 15932                           
 15933                           ; BSR set to: 13
 15934                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 15935  00341E  6BE7               	clrf	231,b	;volatile
 15936                           
 15937                           ; BSR set to: 13
 15938                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 15939  003420  0E54               	movlw	84
 15940  003422  6FF0               	movwf	240,b	;volatile
 15941                           
 15942                           ; BSR set to: 13
 15943                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 15944  003424  0E05               	movlw	5
 15945  003426  6FF1               	movwf	241,b	;volatile
 15946                           
 15947                           ; BSR set to: 13
 15948                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 15949  003428  6BF2               	clrf	242,b	;volatile
 15950                           
 15951                           ; BSR set to: 13
 15952                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 15953  00342A  6BF2               	clrf	242,b	;volatile
 15954                           
 15955                           ; BSR set to: 13
 15956                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 15957  00342C  0E0F               	movlw	15
 15958  00342E  010F               	movlb	15	; () banked
 15959  003430  6F18               	movwf	24,b	;volatile
 15960                           
 15961                           ; BSR set to: 15
 15962  003432  0EE0               	movlw	224
 15963  003434  6F19               	movwf	25,b	;volatile
 15964                           
 15965                           ; BSR set to: 15
 15966  003436  6B1A               	clrf	26,b	;volatile
 15967                           
 15968                           ; BSR set to: 15
 15969  003438  6B1B               	clrf	27,b	;volatile
 15970                           
 15971                           ; BSR set to: 15
 15972                           ;ECAN.c: 482: RXM0EXIDM = 1;
 15973  00343A  8719               	bsf	25,3,b	;volatile
 15974                           
 15975                           ; BSR set to: 15
 15976                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 15977  00343C  0E0F               	movlw	15
 15978  00343E  6F1C               	movwf	28,b	;volatile
 15979                           
 15980                           ; BSR set to: 15
 15981  003440  0EE0               	movlw	224
 15982  003442  6F1D               	movwf	29,b	;volatile
 15983                           
 15984                           ; BSR set to: 15
 15985  003444  691E               	setf	30,b	;volatile
 15986                           
 15987                           ; BSR set to: 15
 15988  003446  6B1F               	clrf	31,b	;volatile
 15989                           
 15990                           ; BSR set to: 15
 15991                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 15992  003448  871D               	bsf	29,3,b	;volatile
 15993                           
 15994                           ; BSR set to: 15
 15995                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 15996  00344A  0E00               	movlw	0
 15997  00344C  EF1E  F01D         	goto	_ECANSetOperationMode
 15998  003450                     __end_of_ECANInitialize:
 15999                           	opt stack 0
 16000                           tblptru	equ	0xFF8
 16001                           tblptrh	equ	0xFF7
 16002                           tblptrl	equ	0xFF6
 16003                           tablat	equ	0xFF5
 16004                           prodh	equ	0xFF4
 16005                           prodl	equ	0xFF3
 16006                           intcon	equ	0xFF2
 16007                           postinc0	equ	0xFEE
 16008                           wreg	equ	0xFE8
 16009                           indf1	equ	0xFE7
 16010                           fsr1h	equ	0xFE2
 16011                           fsr1l	equ	0xFE1
 16012                           indf2	equ	0xFDF
 16013                           postinc2	equ	0xFDE
 16014                           postdec2	equ	0xFDD
 16015                           plusw2	equ	0xFDB
 16016                           fsr2h	equ	0xFDA
 16017                           fsr2l	equ	0xFD9
 16018                           status	equ	0xFD8
 16019                           
 16020 ;; *************** function _ECANSetOperationMode *****************
 16021 ;; Defined at:
 16022 ;;		line 1012 in file "../ECAN.c"
 16023 ;; Parameters:    Size  Location     Type
 16024 ;;  mode            1    wreg     enum E16337
 16025 ;; Auto vars:     Size  Location     Type
 16026 ;;  mode            1    7[COMRAM] enum E16337
 16027 ;; Return value:  Size  Location     Type
 16028 ;;		None               void
 16029 ;; Registers used:
 16030 ;;		wreg, status,2, status,0
 16031 ;; Tracked objects:
 16032 ;;		On entry : 0/0
 16033 ;;		On exit  : 0/0
 16034 ;;		Unchanged: 0/0
 16035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16036 ;;      Params:         0       0       0       0       0       0       0
 16037 ;;      Locals:         1       0       0       0       0       0       0
 16038 ;;      Temps:          0       0       0       0       0       0       0
 16039 ;;      Totals:         1       0       0       0       0       0       0
 16040 ;;Total ram usage:        1 bytes
 16041 ;; Hardware stack levels used:    1
 16042 ;; Hardware stack levels required when called:    2
 16043 ;; This function calls:
 16044 ;;		Nothing
 16045 ;; This function is called by:
 16046 ;;		_calculateSetFilterMask
 16047 ;;		_ECANInitialize
 16048 ;; This function uses a non-reentrant model
 16049 ;;
 16050                           
 16051                           	psect	text70
 16052  003A3C                     __ptext70:
 16053                           	opt stack 0
 16054  003A3C                     _ECANSetOperationMode:
 16055                           	opt stack 24
 16056                           
 16057                           ;incstack = 0
 16058                           ;incstack = 0
 16059                           ;ECANSetOperationMode@mode stored from wreg
 16060  003A3C  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 16061                           
 16062                           ;ECAN.c: 1013: CANCON &= 0x1F;
 16063  003A40  0E1F               	movlw	31
 16064  003A42  166F               	andwf	3951,f,c	;volatile
 16065                           
 16066                           ;ECAN.c: 1014: CANCON |= mode;
 16067  003A44  5008               	movf	ECANSetOperationMode@mode,w,c
 16068  003A46  126F               	iorwf	3951,f,c	;volatile
 16069  003A48                     l6727:
 16070  003A48  506F               	movf	3951,w,c	;volatile
 16071  003A4A  0BE0               	andlw	224
 16072  003A4C  1808               	xorwf	ECANSetOperationMode@mode,w,c
 16073  003A4E  B4D8               	btfsc	status,2,c
 16074  003A50  0012               	return	
 16075  003A52  D7FA               	goto	l6727
 16076  003A54                     __end_of_ECANSetOperationMode:
 16077                           	opt stack 0
 16078                           tblptru	equ	0xFF8
 16079                           tblptrh	equ	0xFF7
 16080                           tblptrl	equ	0xFF6
 16081                           tablat	equ	0xFF5
 16082                           prodh	equ	0xFF4
 16083                           prodl	equ	0xFF3
 16084                           intcon	equ	0xFF2
 16085                           postinc0	equ	0xFEE
 16086                           wreg	equ	0xFE8
 16087                           indf1	equ	0xFE7
 16088                           fsr1h	equ	0xFE2
 16089                           fsr1l	equ	0xFE1
 16090                           indf2	equ	0xFDF
 16091                           postinc2	equ	0xFDE
 16092                           postdec2	equ	0xFDD
 16093                           plusw2	equ	0xFDB
 16094                           fsr2h	equ	0xFDA
 16095                           fsr2l	equ	0xFD9
 16096                           status	equ	0xFD8
 16097                           
 16098 ;; *************** function _OpenTimer0 *****************
 16099 ;; Defined at:
 16100 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 16101 ;; Parameters:    Size  Location     Type
 16102 ;;  config          1    wreg     unsigned char 
 16103 ;; Auto vars:     Size  Location     Type
 16104 ;;  config          1    7[COMRAM] unsigned char 
 16105 ;; Return value:  Size  Location     Type
 16106 ;;		None               void
 16107 ;; Registers used:
 16108 ;;		wreg, status,2, status,0
 16109 ;; Tracked objects:
 16110 ;;		On entry : 0/0
 16111 ;;		On exit  : 0/0
 16112 ;;		Unchanged: 0/0
 16113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16114 ;;      Params:         0       0       0       0       0       0       0
 16115 ;;      Locals:         1       0       0       0       0       0       0
 16116 ;;      Temps:          0       0       0       0       0       0       0
 16117 ;;      Totals:         1       0       0       0       0       0       0
 16118 ;;Total ram usage:        1 bytes
 16119 ;; Hardware stack levels used:    1
 16120 ;; Hardware stack levels required when called:    2
 16121 ;; This function calls:
 16122 ;;		Nothing
 16123 ;; This function is called by:
 16124 ;;		_init
 16125 ;; This function uses a non-reentrant model
 16126 ;;
 16127                           
 16128                           	psect	text71
 16129  0039BC                     __ptext71:
 16130                           	opt stack 0
 16131  0039BC                     _OpenTimer0:
 16132                           	opt stack 27
 16133                           
 16134                           ;incstack = 0
 16135                           ;incstack = 0
 16136                           ;OpenTimer0@config stored from wreg
 16137  0039BC  CFE8 F008          	movff	wreg,OpenTimer0@config
 16138  0039C0  5008               	movf	OpenTimer0@config,w,c
 16139  0039C2  0B7F               	andlw	127
 16140  0039C4  6ED5               	movwf	4053,c	;volatile
 16141  0039C6  6AD7               	clrf	4055,c	;volatile
 16142  0039C8  6AD6               	clrf	4054,c	;volatile
 16143  0039CA  94F2               	bcf	intcon,2,c	;volatile
 16144  0039CC  AE08               	btfss	OpenTimer0@config,7,c
 16145  0039CE  D002               	goto	l1314
 16146  0039D0  8AF2               	bsf	intcon,5,c	;volatile
 16147  0039D2  D001               	goto	l1315
 16148  0039D4                     l1314:
 16149  0039D4  9AF2               	bcf	intcon,5,c	;volatile
 16150  0039D6                     l1315:
 16151  0039D6  8ED5               	bsf	4053,7,c	;volatile
 16152  0039D8  0012               	return	
 16153  0039DA                     __end_of_OpenTimer0:
 16154                           	opt stack 0
 16155                           tblptru	equ	0xFF8
 16156                           tblptrh	equ	0xFF7
 16157                           tblptrl	equ	0xFF6
 16158                           tablat	equ	0xFF5
 16159                           prodh	equ	0xFF4
 16160                           prodl	equ	0xFF3
 16161                           intcon	equ	0xFF2
 16162                           postinc0	equ	0xFEE
 16163                           wreg	equ	0xFE8
 16164                           indf1	equ	0xFE7
 16165                           fsr1h	equ	0xFE2
 16166                           fsr1l	equ	0xFE1
 16167                           indf2	equ	0xFDF
 16168                           postinc2	equ	0xFDE
 16169                           postdec2	equ	0xFDD
 16170                           plusw2	equ	0xFDB
 16171                           fsr2h	equ	0xFDA
 16172                           fsr2l	equ	0xFD9
 16173                           status	equ	0xFD8
 16174                           
 16175 ;; *************** function _init_app_ram *****************
 16176 ;; Defined at:
 16177 ;;		line 434 in file "../main.c"
 16178 ;; Parameters:    Size  Location     Type
 16179 ;;		None
 16180 ;; Auto vars:     Size  Location     Type
 16181 ;;  i               1   12[COMRAM] unsigned char 
 16182 ;; Return value:  Size  Location     Type
 16183 ;;		None               void
 16184 ;; Registers used:
 16185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16186 ;; Tracked objects:
 16187 ;;		On entry : 0/0
 16188 ;;		On exit  : 0/0
 16189 ;;		Unchanged: 0/0
 16190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16191 ;;      Params:         0       0       0       0       0       0       0
 16192 ;;      Locals:         1       0       0       0       0       0       0
 16193 ;;      Temps:          2       0       0       0       0       0       0
 16194 ;;      Totals:         3       0       0       0       0       0       0
 16195 ;;Total ram usage:        3 bytes
 16196 ;; Hardware stack levels used:    1
 16197 ;; Hardware stack levels required when called:    3
 16198 ;; This function calls:
 16199 ;;		_readEEPROM
 16200 ;; This function is called by:
 16201 ;;		_main
 16202 ;;		_init
 16203 ;;		_vscp_restoreDefaults
 16204 ;; This function uses a non-reentrant model
 16205 ;;
 16206                           
 16207                           	psect	text72
 16208  002E10                     __ptext72:
 16209                           	opt stack 0
 16210  002E10                     _init_app_ram:
 16211                           	opt stack 24
 16212                           
 16213                           ;main.c: 435: uint8_t i;
 16214                           ;main.c: 437: measurement_clock = 0;
 16215                           
 16216                           ;incstack = 0
 16217                           ;incstack = 0
 16218  002E10  0100               	movlb	0	; () banked
 16219  002E12  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
 16220  002E14  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 16221  002E16  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 16222  002E18  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 16223                           
 16224                           ;main.c: 439: seconds = 0;
 16225  002E1A  6B8B               	clrf	_seconds& (0+255),b
 16226                           
 16227                           ;main.c: 440: minutes = 0;
 16228  002E1C  6B89               	clrf	_minutes& (0+255),b
 16229                           
 16230                           ;main.c: 441: hours = 0;
 16231  002E1E  6B88               	clrf	_hours& (0+255),b
 16232                           
 16233                           ;main.c: 443: relay_pulse_flags = 0;
 16234  002E20  6B8A               	clrf	_relay_pulse_flags& (0+255),b
 16235                           
 16236                           ;main.c: 446: for ( i = 0; i < 8; i++ ) {
 16237  002E22  6A0D               	clrf	init_app_ram@i,c
 16238  002E24                     l7257:
 16239                           
 16240                           ; BSR set to: 0
 16241                           ;main.c: 447: relay_pulse_timer[ i ] = 0;
 16242  002E24  500D               	movf	init_app_ram@i,w,c
 16243  002E26  0D02               	mullw	2
 16244  002E28  50F3               	movf	prodl,w,c
 16245  002E2A  0F70               	addlw	low _relay_pulse_timer
 16246  002E2C  6ED9               	movwf	fsr2l,c
 16247  002E2E  6ADA               	clrf	fsr2h,c
 16248  002E30  6ADE               	clrf	postinc2,c
 16249  002E32  6ADD               	clrf	postdec2,c
 16250                           
 16251                           ;main.c: 448: relay_protection_timer[ i ] = 0;
 16252  002E34  500D               	movf	init_app_ram@i,w,c
 16253  002E36  0D02               	mullw	2
 16254  002E38  50F3               	movf	prodl,w,c
 16255  002E3A  0F60               	addlw	low _relay_protection_timer
 16256  002E3C  6ED9               	movwf	fsr2l,c
 16257  002E3E  6ADA               	clrf	fsr2h,c
 16258  002E40  6ADE               	clrf	postinc2,c
 16259  002E42  6ADD               	clrf	postdec2,c
 16260                           
 16261                           ; BSR set to: 0
 16262  002E44  2A0D               	incf	init_app_ram@i,f,c
 16263                           
 16264                           ; BSR set to: 0
 16265  002E46  0E07               	movlw	7
 16266  002E48  640D               	cpfsgt	init_app_ram@i,c
 16267  002E4A  D7EC               	goto	l7257
 16268                           
 16269                           ; BSR set to: 0
 16270                           ;main.c: 449: }
 16271                           ;main.c: 451: for ( i=0; i<7; i++ ) {
 16272  002E4C  6A0D               	clrf	init_app_ram@i,c
 16273  002E4E                     l7267:
 16274                           
 16275                           ;main.c: 454: if ( readEEPROM( 0x43 + 10 + i ) &
 16276                           ;main.c: 455: 0x01 ) {
 16277  002E4E  0E4D               	movlw	77
 16278  002E50  240D               	addwf	init_app_ram@i,w,c
 16279  002E52  6E08               	movwf	?_readEEPROM,c
 16280  002E54  6A09               	clrf	?_readEEPROM+1,c
 16281  002E56  0E00               	movlw	0
 16282  002E58  2209               	addwfc	?_readEEPROM+1,f,c
 16283  002E5A  EC6C  F01D         	call	_readEEPROM	;wreg free
 16284  002E5E  6E0B               	movwf	??_init_app_ram& (0+255),c
 16285  002E60  A00B               	btfss	??_init_app_ram,0,c
 16286  002E62  D027               	goto	l7273
 16287                           
 16288                           ;main.c: 457: relay_pulse_flags |= (1<<i);
 16289  002E64  C00D  F00B         	movff	init_app_ram@i,??_init_app_ram
 16290  002E68  0E01               	movlw	1
 16291  002E6A  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16292  002E6C  2A0B               	incf	??_init_app_ram,f,c
 16293  002E6E  D002               	goto	u7994
 16294  002E70                     u7995:
 16295  002E70  90D8               	bcf	status,0,c
 16296  002E72  360C               	rlcf	??_init_app_ram+1,f,c
 16297  002E74                     u7994:
 16298  002E74  2E0B               	decfsz	??_init_app_ram,f,c
 16299  002E76  D7FC               	goto	u7995
 16300  002E78  500C               	movf	??_init_app_ram+1,w,c
 16301  002E7A  0100               	movlb	0	; () banked
 16302  002E7C  138A               	iorwf	_relay_pulse_flags& (0+255),f,b
 16303                           
 16304                           ; BSR set to: 0
 16305                           ;main.c: 458: relay_pulse_timer[ i ] =
 16306                           ;main.c: 459: readEEPROM( 0x43 + 18 + i ) * 256 +
 16307                           ;main.c: 460: readEEPROM( 0x43 + 19 + i );
 16308  002E7E  0E55               	movlw	85
 16309  002E80  240D               	addwf	init_app_ram@i,w,c
 16310  002E82  6E08               	movwf	?_readEEPROM,c
 16311  002E84  6A09               	clrf	?_readEEPROM+1,c
 16312  002E86  0E00               	movlw	0
 16313  002E88  2209               	addwfc	?_readEEPROM+1,f,c
 16314  002E8A  EC6C  F01D         	call	_readEEPROM	;wreg free
 16315  002E8E  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16316  002E90  6A0B               	clrf	??_init_app_ram& (0+255),c
 16317  002E92  0E56               	movlw	86
 16318  002E94  240D               	addwf	init_app_ram@i,w,c
 16319  002E96  6E08               	movwf	?_readEEPROM,c
 16320  002E98  6A09               	clrf	?_readEEPROM+1,c
 16321  002E9A  0E00               	movlw	0
 16322  002E9C  2209               	addwfc	?_readEEPROM+1,f,c
 16323  002E9E  EC6C  F01D         	call	_readEEPROM	;wreg free
 16324  002EA2  D831               	call	PL58	;call to abstracted procedure
 16325  002EA4  0F70               	addlw	low _relay_pulse_timer
 16326  002EA6  6ED9               	movwf	fsr2l,c
 16327  002EA8  6ADA               	clrf	fsr2h,c
 16328  002EAA  C00B  FFDE         	movff	??_init_app_ram,postinc2
 16329  002EAE  C00C  FFDD         	movff	??_init_app_ram+1,postdec2
 16330  002EB2                     l7273:
 16331                           
 16332                           ;main.c: 461: }
 16333                           ;main.c: 464: if ( readEEPROM(0x43 + 15 + i ) & 0x04) {
 16334  002EB2  0E52               	movlw	82
 16335  002EB4  240D               	addwf	init_app_ram@i,w,c
 16336  002EB6  6E08               	movwf	?_readEEPROM,c
 16337  002EB8  6A09               	clrf	?_readEEPROM+1,c
 16338  002EBA  0E00               	movlw	0
 16339  002EBC  2209               	addwfc	?_readEEPROM+1,f,c
 16340  002EBE  EC6C  F01D         	call	_readEEPROM	;wreg free
 16341  002EC2  6E0B               	movwf	??_init_app_ram& (0+255),c
 16342  002EC4  A40B               	btfss	??_init_app_ram,2,c
 16343  002EC6  D01A               	goto	l7277
 16344                           
 16345                           ;main.c: 465: relay_protection_timer[ i ] =
 16346                           ;main.c: 466: readEEPROM(0x43 + 44 + i ) * 256 +
 16347                           ;main.c: 467: readEEPROM(0x43 + 45 + i );
 16348  002EC8  0E6F               	movlw	111
 16349  002ECA  240D               	addwf	init_app_ram@i,w,c
 16350  002ECC  6E08               	movwf	?_readEEPROM,c
 16351  002ECE  6A09               	clrf	?_readEEPROM+1,c
 16352  002ED0  0E00               	movlw	0
 16353  002ED2  2209               	addwfc	?_readEEPROM+1,f,c
 16354  002ED4  EC6C  F01D         	call	_readEEPROM	;wreg free
 16355  002ED8  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16356  002EDA  6A0B               	clrf	??_init_app_ram& (0+255),c
 16357  002EDC  0E70               	movlw	112
 16358  002EDE  240D               	addwf	init_app_ram@i,w,c
 16359  002EE0  6E08               	movwf	?_readEEPROM,c
 16360  002EE2  6A09               	clrf	?_readEEPROM+1,c
 16361  002EE4  0E00               	movlw	0
 16362  002EE6  2209               	addwfc	?_readEEPROM+1,f,c
 16363  002EE8  EC6C  F01D         	call	_readEEPROM	;wreg free
 16364  002EEC  D80C               	call	PL58	;call to abstracted procedure
 16365  002EEE  0F60               	addlw	low _relay_protection_timer
 16366  002EF0  6ED9               	movwf	fsr2l,c
 16367  002EF2  6ADA               	clrf	fsr2h,c
 16368  002EF4  C00B  FFDE         	movff	??_init_app_ram,postinc2
 16369  002EF8  C00C  FFDD         	movff	??_init_app_ram+1,postdec2
 16370  002EFC                     l7277:
 16371  002EFC  2A0D               	incf	init_app_ram@i,f,c
 16372  002EFE  0E06               	movlw	6
 16373  002F00  640D               	cpfsgt	init_app_ram@i,c
 16374  002F02  D7A5               	goto	l7267
 16375  002F04  0C06               	retlw	6
 16376  002F06                     __end_of_init_app_ram:
 16377                           	opt stack 0
 16378  002F06                     PL58:
 16379                           	opt stack 24
 16380  002F06  260B               	addwf	??_init_app_ram,f,c
 16381  002F08  0E00               	movlw	0
 16382  002F0A  220C               	addwfc	??_init_app_ram+1,f,c
 16383  002F0C  500D               	movf	init_app_ram@i,w,c
 16384  002F0E  0D02               	mullw	2
 16385  002F10  50F3               	movf	prodl,w,c
 16386  002F12  0100               	movlb	0	; () banked
 16387  002F14  0012               	return	
 16388  002F16                     __end_ofPL58:
 16389                           	opt stack 0
 16390                           tblptru	equ	0xFF8
 16391                           tblptrh	equ	0xFF7
 16392                           tblptrl	equ	0xFF6
 16393                           tablat	equ	0xFF5
 16394                           prodh	equ	0xFF4
 16395                           prodl	equ	0xFF3
 16396                           intcon	equ	0xFF2
 16397                           postinc0	equ	0xFEE
 16398                           wreg	equ	0xFE8
 16399                           indf1	equ	0xFE7
 16400                           fsr1h	equ	0xFE2
 16401                           fsr1l	equ	0xFE1
 16402                           indf2	equ	0xFDF
 16403                           postinc2	equ	0xFDE
 16404                           postdec2	equ	0xFDD
 16405                           plusw2	equ	0xFDB
 16406                           fsr2h	equ	0xFDA
 16407                           fsr2l	equ	0xFD9
 16408                           status	equ	0xFD8
 16409                           
 16410 ;; *************** function _WriteTimer0 *****************
 16411 ;; Defined at:
 16412 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16413 ;; Parameters:    Size  Location     Type
 16414 ;;  timer0          2    7[COMRAM] unsigned int 
 16415 ;; Auto vars:     Size  Location     Type
 16416 ;;  timer           2    9[COMRAM] struct Timers
 16417 ;; Return value:  Size  Location     Type
 16418 ;;		None               void
 16419 ;; Registers used:
 16420 ;;		None
 16421 ;; Tracked objects:
 16422 ;;		On entry : 0/0
 16423 ;;		On exit  : 0/0
 16424 ;;		Unchanged: 0/0
 16425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16426 ;;      Params:         2       0       0       0       0       0       0
 16427 ;;      Locals:         2       0       0       0       0       0       0
 16428 ;;      Temps:          0       0       0       0       0       0       0
 16429 ;;      Totals:         4       0       0       0       0       0       0
 16430 ;;Total ram usage:        4 bytes
 16431 ;; Hardware stack levels used:    1
 16432 ;; Hardware stack levels required when called:    2
 16433 ;; This function calls:
 16434 ;;		Nothing
 16435 ;; This function is called by:
 16436 ;;		_init
 16437 ;; This function uses a non-reentrant model
 16438 ;;
 16439                           
 16440                           	psect	text73
 16441  003AC6                     __ptext73:
 16442                           	opt stack 0
 16443  003AC6                     _WriteTimer0:
 16444                           	opt stack 27
 16445                           
 16446                           ;incstack = 0
 16447                           ;incstack = 0
 16448  003AC6  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 16449  003ACA  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 16450  003ACE  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 16451  003AD2  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 16452  003AD6  0012               	return	
 16453  003AD8                     __end_of_WriteTimer0:
 16454                           	opt stack 0
 16455                           tblptru	equ	0xFF8
 16456                           tblptrh	equ	0xFF7
 16457                           tblptrl	equ	0xFF6
 16458                           tablat	equ	0xFF5
 16459                           prodh	equ	0xFF4
 16460                           prodl	equ	0xFF3
 16461                           intcon	equ	0xFF2
 16462                           postinc0	equ	0xFEE
 16463                           wreg	equ	0xFE8
 16464                           indf1	equ	0xFE7
 16465                           fsr1h	equ	0xFE2
 16466                           fsr1l	equ	0xFE1
 16467                           indf2	equ	0xFDF
 16468                           postinc2	equ	0xFDE
 16469                           postdec2	equ	0xFDD
 16470                           plusw2	equ	0xFDB
 16471                           fsr2h	equ	0xFDA
 16472                           fsr2l	equ	0xFD9
 16473                           status	equ	0xFD8
 16474                           
 16475 ;; *************** function _vscp_readAppReg *****************
 16476 ;; Defined at:
 16477 ;;		line 898 in file "../main.c"
 16478 ;; Parameters:    Size  Location     Type
 16479 ;;  reg             1    wreg     unsigned char 
 16480 ;; Auto vars:     Size  Location     Type
 16481 ;;  reg             1   11[COMRAM] unsigned char 
 16482 ;;  rv              1   10[COMRAM] unsigned char 
 16483 ;; Return value:  Size  Location     Type
 16484 ;;                  1    wreg      unsigned char 
 16485 ;; Registers used:
 16486 ;;		wreg, status,2, status,0, cstack
 16487 ;; Tracked objects:
 16488 ;;		On entry : F/0
 16489 ;;		On exit  : 0/0
 16490 ;;		Unchanged: 0/0
 16491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16492 ;;      Params:         0       0       0       0       0       0       0
 16493 ;;      Locals:         2       0       0       0       0       0       0
 16494 ;;      Temps:          0       0       0       0       0       0       0
 16495 ;;      Totals:         2       0       0       0       0       0       0
 16496 ;;Total ram usage:        2 bytes
 16497 ;; Hardware stack levels used:    1
 16498 ;; Hardware stack levels required when called:    3
 16499 ;; This function calls:
 16500 ;;		_readEEPROM
 16501 ;; This function is called by:
 16502 ;;		_vscp_readRegister
 16503 ;;		_vscp_handleProtocolEvent
 16504 ;; This function uses a non-reentrant model
 16505 ;;
 16506                           
 16507                           	psect	text74
 16508  003304                     __ptext74:
 16509                           	opt stack 0
 16510  003304                     _vscp_readAppReg:
 16511                           	opt stack 25
 16512                           
 16513                           ;incstack = 0
 16514                           ;incstack = 0
 16515                           ;vscp_readAppReg@reg stored from wreg
 16516  003304  CFE8 F00C          	movff	wreg,vscp_readAppReg@reg
 16517                           
 16518                           ; BSR set to: 0
 16519                           ;main.c: 899: uint8_t rv;
 16520                           ;main.c: 901: rv = 0x00;
 16521  003308  6A0B               	clrf	vscp_readAppReg@rv,c
 16522                           
 16523                           ; BSR set to: 0
 16524                           ;main.c: 904: if ( reg == 0x00 ) {
 16525  00330A  660C               	tstfsz	vscp_readAppReg@reg,c
 16526  00330C  D006               	goto	l8053
 16527                           
 16528                           ; BSR set to: 0
 16529                           ;main.c: 905: rv = readEEPROM(0x43 + 0);
 16530  00330E  6A09               	clrf	?_readEEPROM+1,c
 16531  003310  0E43               	movlw	67
 16532  003312  6E08               	movwf	?_readEEPROM,c
 16533  003314  EC6C  F01D         	call	_readEEPROM	;wreg free
 16534  003318  D04D               	goto	L50
 16535  00331A                     l8053:
 16536                           
 16537                           ; BSR set to: 0
 16538                           ;main.c: 908: else if ( reg == 0x01 ) {
 16539  00331A  040C               	decf	vscp_readAppReg@reg,w,c
 16540  00331C  E106               	bnz	l8057
 16541                           
 16542                           ; BSR set to: 0
 16543                           ;main.c: 909: rv = readEEPROM(0x43 + 1);
 16544  00331E  6A09               	clrf	?_readEEPROM+1,c
 16545  003320  0E44               	movlw	68
 16546  003322  6E08               	movwf	?_readEEPROM,c
 16547  003324  EC6C  F01D         	call	_readEEPROM	;wreg free
 16548  003328  D045               	goto	L50
 16549  00332A                     l8057:
 16550                           
 16551                           ; BSR set to: 0
 16552                           ;main.c: 911: else if ( (reg >= 2) && (reg < 10) ) {
 16553  00332A  0E01               	movlw	1
 16554  00332C  640C               	cpfsgt	vscp_readAppReg@reg,c
 16555  00332E  D034               	goto	l8081
 16556                           
 16557                           ; BSR set to: 0
 16558  003330  0E0A               	movlw	10
 16559  003332  600C               	cpfslt	vscp_readAppReg@reg,c
 16560  003334  D031               	goto	l8081
 16561  003336  D01E               	goto	l8079
 16562  003338                     l8063:
 16563                           
 16564                           ; BSR set to: 0
 16565                           ;main.c: 917: rv = LATBbits.LATB4;
 16566  003338  0E00               	movlw	0
 16567  00333A  B88A               	btfsc	3978,4,c	;volatile
 16568  00333C  0E01               	movlw	1
 16569  00333E  D03A               	goto	L50
 16570  003340                     l8065:
 16571                           
 16572                           ; BSR set to: 0
 16573                           ;main.c: 922: rv = LATBbits.LATB1;
 16574  003340  0E00               	movlw	0
 16575  003342  B28A               	btfsc	3978,1,c	;volatile
 16576  003344  0E01               	movlw	1
 16577  003346  D036               	goto	L50
 16578  003348                     l8067:
 16579                           
 16580                           ; BSR set to: 0
 16581                           ;main.c: 927: rv = LATBbits.LATB0;
 16582  003348  0E00               	movlw	0
 16583  00334A  B08A               	btfsc	3978,0,c	;volatile
 16584  00334C  0E01               	movlw	1
 16585  00334E  D032               	goto	L50
 16586  003350                     l8069:
 16587                           
 16588                           ; BSR set to: 0
 16589                           ;main.c: 932: rv = LATCbits.LATC7;
 16590  003350  0E00               	movlw	0
 16591  003352  BE8B               	btfsc	3979,7,c	;volatile
 16592  003354  0E01               	movlw	1
 16593  003356  D02E               	goto	L50
 16594  003358                     l8071:
 16595                           
 16596                           ; BSR set to: 0
 16597                           ;main.c: 937: rv = LATCbits.LATC6;
 16598  003358  0E00               	movlw	0
 16599  00335A  BC8B               	btfsc	3979,6,c	;volatile
 16600  00335C  0E01               	movlw	1
 16601  00335E  D02A               	goto	L50
 16602  003360                     l8073:
 16603                           
 16604                           ; BSR set to: 0
 16605                           ;main.c: 942: rv = LATCbits.LATC5;
 16606  003360  0E00               	movlw	0
 16607  003362  BA8B               	btfsc	3979,5,c	;volatile
 16608  003364  0E01               	movlw	1
 16609  003366  D026               	goto	L50
 16610  003368                     l8075:
 16611                           
 16612                           ; BSR set to: 0
 16613                           ;main.c: 947: rv = LATCbits.LATC4;
 16614  003368  0E00               	movlw	0
 16615  00336A  B88B               	btfsc	3979,4,c	;volatile
 16616  00336C  0E01               	movlw	1
 16617  00336E  D022               	goto	L50
 16618  003370                     l290:
 16619                           
 16620                           ; BSR set to: 0
 16621                           ;main.c: 952: rv = 0;
 16622  003370  6A0B               	clrf	vscp_readAppReg@rv,c
 16623                           
 16624                           ;main.c: 953: break;
 16625  003372  D021               	goto	l8087
 16626  003374                     l8079:
 16627                           
 16628                           ; BSR set to: 0
 16629  003374  500C               	movf	vscp_readAppReg@reg,w,c
 16630                           
 16631                           ; Switch size 1, requested type "space"
 16632                           ; Number of cases is 8, Range of values is 2 to 9
 16633                           ; switch strategies available:
 16634                           ; Name         Instructions Cycles
 16635                           ; simple_byte           25    13 (average)
 16636                           ;	Chosen strategy is simple_byte
 16637  003376  0A02               	xorlw	2	; case 2
 16638  003378  E0DF               	bz	l8063
 16639  00337A  0A01               	xorlw	1	; case 3
 16640  00337C  E0E1               	bz	l8065
 16641  00337E  0A07               	xorlw	7	; case 4
 16642  003380  E0E3               	bz	l8067
 16643  003382  0A01               	xorlw	1	; case 5
 16644  003384  E0E5               	bz	l8069
 16645  003386  0A03               	xorlw	3	; case 6
 16646  003388  E0E7               	bz	l8071
 16647  00338A  0A01               	xorlw	1	; case 7
 16648  00338C  E0E9               	bz	l8073
 16649  00338E  0A0F               	xorlw	15	; case 8
 16650  003390  E0EB               	bz	l8075
 16651  003392  0A01               	xorlw	1	; case 9
 16652  003394  E0ED               	bz	l290
 16653  003396  D00F               	goto	l8087
 16654  003398                     l8081:
 16655                           
 16656                           ; BSR set to: 0
 16657                           ;main.c: 957: else if ( ( reg >= 10 ) &&
 16658                           ;main.c: 958: (reg < (72 + 7 * 8 ) ) ) {
 16659  003398  0E09               	movlw	9
 16660  00339A  640C               	cpfsgt	vscp_readAppReg@reg,c
 16661  00339C  D00C               	goto	l8087
 16662                           
 16663                           ; BSR set to: 0
 16664  00339E  0E80               	movlw	128
 16665  0033A0  600C               	cpfslt	vscp_readAppReg@reg,c
 16666  0033A2  D009               	goto	l8087
 16667                           
 16668                           ; BSR set to: 0
 16669                           ;main.c: 959: rv = readEEPROM( 0x43 + reg );
 16670  0033A4  0E43               	movlw	67
 16671  0033A6  240C               	addwf	vscp_readAppReg@reg,w,c
 16672  0033A8  6E08               	movwf	?_readEEPROM,c
 16673  0033AA  6A09               	clrf	?_readEEPROM+1,c
 16674  0033AC  0E00               	movlw	0
 16675  0033AE  2209               	addwfc	?_readEEPROM+1,f,c
 16676  0033B0  EC6C  F01D         	call	_readEEPROM	;wreg free
 16677  0033B4                     L50:
 16678  0033B4  6E0B               	movwf	vscp_readAppReg@rv,c
 16679  0033B6                     l8087:
 16680                           
 16681                           ;main.c: 960: }
 16682                           ;main.c: 962: return rv;
 16683  0033B6  500B               	movf	vscp_readAppReg@rv,w,c
 16684  0033B8  0012               	return	
 16685  0033BA                     __end_of_vscp_readAppReg:
 16686                           	opt stack 0
 16687                           tblptru	equ	0xFF8
 16688                           tblptrh	equ	0xFF7
 16689                           tblptrl	equ	0xFF6
 16690                           tablat	equ	0xFF5
 16691                           prodh	equ	0xFF4
 16692                           prodl	equ	0xFF3
 16693                           intcon	equ	0xFF2
 16694                           postinc0	equ	0xFEE
 16695                           wreg	equ	0xFE8
 16696                           indf1	equ	0xFE7
 16697                           fsr1h	equ	0xFE2
 16698                           fsr1l	equ	0xFE1
 16699                           indf2	equ	0xFDF
 16700                           postinc2	equ	0xFDE
 16701                           postdec2	equ	0xFDD
 16702                           plusw2	equ	0xFDB
 16703                           fsr2h	equ	0xFDA
 16704                           fsr2l	equ	0xFD9
 16705                           status	equ	0xFD8
 16706                           
 16707 ;; *************** function _readEEPROM *****************
 16708 ;; Defined at:
 16709 ;;		line 92 in file "../../vscp_firmware/pic/common/eeprom.c"
 16710 ;; Parameters:    Size  Location     Type
 16711 ;;  address         2    7[COMRAM] unsigned short 
 16712 ;; Auto vars:     Size  Location     Type
 16713 ;;  data            1    9[COMRAM] unsigned char 
 16714 ;; Return value:  Size  Location     Type
 16715 ;;                  1    wreg      unsigned char 
 16716 ;; Registers used:
 16717 ;;		wreg, status,2
 16718 ;; Tracked objects:
 16719 ;;		On entry : 0/0
 16720 ;;		On exit  : 0/0
 16721 ;;		Unchanged: 0/0
 16722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16723 ;;      Params:         2       0       0       0       0       0       0
 16724 ;;      Locals:         1       0       0       0       0       0       0
 16725 ;;      Temps:          0       0       0       0       0       0       0
 16726 ;;      Totals:         3       0       0       0       0       0       0
 16727 ;;Total ram usage:        3 bytes
 16728 ;; Hardware stack levels used:    1
 16729 ;; Hardware stack levels required when called:    2
 16730 ;; This function calls:
 16731 ;;		Nothing
 16732 ;; This function is called by:
 16733 ;;		_init_app_ram
 16734 ;;		_doApplicationOneSecondWork
 16735 ;;		_vscp_readNicknamePermanent
 16736 ;;		_vscp_getZone
 16737 ;;		_vscp_getSubzone
 16738 ;;		_vscp_readAppReg
 16739 ;;		_vscp_writeAppReg
 16740 ;;		_SendInformationEvent
 16741 ;;		_doDM
 16742 ;;		_doActionOn
 16743 ;;		_doActionOff
 16744 ;;		_doActionPulse
 16745 ;;		_doActionStatus
 16746 ;;		_doActionDisable
 16747 ;;		_doActionToggle
 16748 ;;		_vscp_getGUID
 16749 ;;		_vscp_getUserID
 16750 ;;		_vscp_getManufacturerId
 16751 ;;		_vscp_getSegmentCRC
 16752 ;;		_calculateSetFilterMask
 16753 ;; This function uses a non-reentrant model
 16754 ;;
 16755                           
 16756                           	psect	text75
 16757  003AD8                     __ptext75:
 16758                           	opt stack 0
 16759  003AD8                     _readEEPROM:
 16760                           	opt stack 26
 16761                           
 16762                           ;eeprom.c: 93: uint8_t data;
 16763                           ;eeprom.c: 98: EEADR = address & 0xff;
 16764                           
 16765                           ;incstack = 0
 16766                           ;incstack = 0
 16767  003AD8  C008  FFA9         	movff	readEEPROM@address,4009	;volatile
 16768                           
 16769                           ;eeprom.c: 99: EECON1bits.EEPGD= 0;
 16770  003ADC  9EA6               	bcf	4006,7,c	;volatile
 16771                           
 16772                           ;eeprom.c: 100: EECON1bits.CFGS = 0;
 16773  003ADE  9CA6               	bcf	4006,6,c	;volatile
 16774                           
 16775                           ;eeprom.c: 101: EECON1bits.RD = 1;
 16776  003AE0  80A6               	bsf	4006,0,c	;volatile
 16777                           
 16778                           ;eeprom.c: 102: data = EEDATA;
 16779  003AE2  CFA8 F00A          	movff	4008,readEEPROM@data	;volatile
 16780                           
 16781                           ;eeprom.c: 104: return data;
 16782  003AE6  500A               	movf	readEEPROM@data,w,c
 16783  003AE8  0012               	return	
 16784  003AEA                     __end_of_readEEPROM:
 16785                           	opt stack 0
 16786                           tblptru	equ	0xFF8
 16787                           tblptrh	equ	0xFF7
 16788                           tblptrl	equ	0xFF6
 16789                           tablat	equ	0xFF5
 16790                           prodh	equ	0xFF4
 16791                           prodl	equ	0xFF3
 16792                           intcon	equ	0xFF2
 16793                           postinc0	equ	0xFEE
 16794                           wreg	equ	0xFE8
 16795                           indf1	equ	0xFE7
 16796                           fsr1h	equ	0xFE2
 16797                           fsr1l	equ	0xFE1
 16798                           indf2	equ	0xFDF
 16799                           postinc2	equ	0xFDE
 16800                           postdec2	equ	0xFDD
 16801                           plusw2	equ	0xFDB
 16802                           fsr2h	equ	0xFDA
 16803                           fsr2l	equ	0xFD9
 16804                           status	equ	0xFD8
 16805                           
 16806 ;; *************** function _interrupt_at_low_vector *****************
 16807 ;; Defined at:
 16808 ;;		line 134 in file "../main.c"
 16809 ;; Parameters:    Size  Location     Type
 16810 ;;		None
 16811 ;; Auto vars:     Size  Location     Type
 16812 ;;		None
 16813 ;; Return value:  Size  Location     Type
 16814 ;;		None               void
 16815 ;; Registers used:
 16816 ;;		wreg, status,2, status,0, cstack
 16817 ;; Tracked objects:
 16818 ;;		On entry : 0/0
 16819 ;;		On exit  : 0/0
 16820 ;;		Unchanged: 0/0
 16821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16822 ;;      Params:         0       0       0       0       0       0       0
 16823 ;;      Locals:         0       0       0       0       0       0       0
 16824 ;;      Temps:          3       0       0       0       0       0       0
 16825 ;;      Totals:         3       0       0       0       0       0       0
 16826 ;;Total ram usage:        3 bytes
 16827 ;; Hardware stack levels used:    1
 16828 ;; Hardware stack levels required when called:    1
 16829 ;; This function calls:
 16830 ;;		i1_WriteTimer0
 16831 ;; This function is called by:
 16832 ;;		Interrupt level 1
 16833 ;; This function uses a non-reentrant model
 16834 ;;
 16835                           
 16836                           	psect	intcodelo
 16837  000018                     __pintcodelo:
 16838                           	opt stack 0
 16839  000018                     _interrupt_at_low_vector:
 16840                           	opt stack 21
 16841                           
 16842                           ;incstack = 0
 16843  000018  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 16844  00001C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 16845  000020  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 16846  000024                     
 16847                           ;main.c: 136: if ( INTCONbits.TMR0IF ) {
 16848  000024  A4F2               	btfss	intcon,2,c	;volatile
 16849  000026  D001               	goto	i1u778_21
 16850  000028  D001               	goto	i1u778_20
 16851  00002A                     i1u778_21:
 16852  00002A  D03E               	goto	i1l145
 16853  00002C                     i1u778_20:
 16854  00002C                     
 16855                           ;main.c: 139: WriteTimer0(0xfb1d);
 16856  00002C  0EFB               	movlw	251
 16857  00002E  6E02               	movwf	?i1_WriteTimer0+1,c
 16858  000030  0E1D               	movlw	29
 16859  000032  6E01               	movwf	?i1_WriteTimer0,c
 16860  000034  EC75  F01D         	call	i1_WriteTimer0	;wreg free
 16861  000038                     
 16862                           ;main.c: 141: vscp_timer++;
 16863  000038  0100               	movlb	0	; () banked
 16864  00003A  4B86               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 16865  00003C  2B87               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 16866  00003E                     
 16867                           ; BSR set to: 0
 16868                           ;main.c: 142: vscp_configtimer++;
 16869  00003E  4B84               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 16870  000040  2B85               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 16871  000042                     
 16872                           ; BSR set to: 0
 16873                           ;main.c: 143: measurement_clock++;
 16874  000042  0E01               	movlw	1
 16875  000044  2780               	addwf	_measurement_clock& (0+255),f,b	;volatile
 16876  000046  0E00               	movlw	0
 16877  000048  2381               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 16878  00004A  0E00               	movlw	0
 16879  00004C  2382               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 16880  00004E  0E00               	movlw	0
 16881  000050  2383               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 16882  000052                     
 16883                           ; BSR set to: 0
 16884                           ;main.c: 146: if ( PORTCbits.RC0 ) {
 16885  000052  A082               	btfss	3970,0,c	;volatile
 16886  000054  D001               	goto	i1u779_21
 16887  000056  D001               	goto	i1u779_20
 16888  000058                     i1u779_21:
 16889  000058  D002               	goto	i1l7081
 16890  00005A                     i1u779_20:
 16891  00005A                     
 16892                           ; BSR set to: 0
 16893                           ;main.c: 147: vscp_initbtncnt = 0;
 16894  00005A  6B8F               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 16895                           
 16896                           ;main.c: 148: } else {
 16897  00005C  D001               	goto	i1l137
 16898  00005E                     i1l7081:
 16899                           
 16900                           ; BSR set to: 0
 16901                           ;main.c: 150: vscp_initbtncnt++;
 16902  00005E  2B8F               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 16903  000060                     i1l137:
 16904                           
 16905                           ; BSR set to: 0
 16906                           ;main.c: 151: }
 16907                           ;main.c: 154: vscp_statuscnt++;
 16908  000060  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 16909  000062                     
 16910                           ; BSR set to: 0
 16911                           ;main.c: 155: if ( ( 0x02 == vscp_initledfunc ) &&
 16912                           ;main.c: 156: ( vscp_statuscnt > 100 ) ) {
 16913  000062  5056               	movf	_vscp_initledfunc,w,c
 16914  000064  0A02               	xorlw	2
 16915  000066  A4D8               	btfss	status,2,c
 16916  000068  D001               	goto	i1u780_21
 16917  00006A  D001               	goto	i1u780_20
 16918  00006C                     i1u780_21:
 16919  00006C  D00E               	goto	i1l7091
 16920  00006E                     i1u780_20:
 16921  00006E                     
 16922                           ; BSR set to: 0
 16923  00006E  0E64               	movlw	100
 16924  000070  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 16925  000072  D001               	goto	i1u781_21
 16926  000074  D001               	goto	i1u781_20
 16927  000076                     i1u781_21:
 16928  000076  D009               	goto	i1l7091
 16929  000078                     i1u781_20:
 16930  000078                     
 16931                           ; BSR set to: 0
 16932                           ;main.c: 158: if ( PORTCbits.RC1 ) {
 16933  000078  A282               	btfss	3970,1,c	;volatile
 16934  00007A  D001               	goto	i1u782_21
 16935  00007C  D001               	goto	i1u782_20
 16936  00007E                     i1u782_21:
 16937  00007E  D002               	goto	i1l139
 16938  000080                     i1u782_20:
 16939  000080                     
 16940                           ; BSR set to: 0
 16941                           ;main.c: 159: PORTCbits.RC1 = 0;
 16942  000080  9282               	bcf	3970,1,c	;volatile
 16943                           
 16944                           ;main.c: 160: }
 16945  000082  D001               	goto	i1l140
 16946  000084                     i1l139:
 16947                           
 16948                           ; BSR set to: 0
 16949                           ;main.c: 161: else {
 16950                           ;main.c: 162: PORTCbits.RC1 = 1;
 16951  000084  8282               	bsf	3970,1,c	;volatile
 16952  000086                     i1l140:
 16953                           
 16954                           ; BSR set to: 0
 16955                           ;main.c: 163: }
 16956                           ;main.c: 165: vscp_statuscnt = 0;
 16957  000086  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16958                           
 16959                           ;main.c: 167: }
 16960  000088  D00E               	goto	i1l141
 16961  00008A                     i1l7091:
 16962                           
 16963                           ; BSR set to: 0
 16964                           ;main.c: 168: else if (0x01 == vscp_initledfunc) {
 16965  00008A  0456               	decf	_vscp_initledfunc,w,c
 16966  00008C  A4D8               	btfss	status,2,c
 16967  00008E  D001               	goto	i1u783_21
 16968  000090  D001               	goto	i1u783_20
 16969  000092                     i1u783_21:
 16970  000092  D003               	goto	i1l142
 16971  000094                     i1u783_20:
 16972  000094                     
 16973                           ; BSR set to: 0
 16974                           ;main.c: 169: PORTCbits.RC1 = 1;
 16975  000094  8282               	bsf	3970,1,c	;volatile
 16976                           
 16977                           ;main.c: 170: vscp_statuscnt = 0;
 16978  000096  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16979                           
 16980                           ;main.c: 171: }
 16981  000098  D006               	goto	i1l141
 16982  00009A                     i1l142:
 16983                           
 16984                           ; BSR set to: 0
 16985                           ;main.c: 172: else if (0x00 == vscp_initledfunc) {
 16986  00009A  6656               	tstfsz	_vscp_initledfunc,c
 16987  00009C  D001               	goto	i1u784_21
 16988  00009E  D001               	goto	i1u784_20
 16989  0000A0                     i1u784_21:
 16990  0000A0  D002               	goto	i1l141
 16991  0000A2                     i1u784_20:
 16992  0000A2                     
 16993                           ; BSR set to: 0
 16994                           ;main.c: 173: PORTCbits.RC1 = 0;
 16995  0000A2  9282               	bcf	3970,1,c	;volatile
 16996                           
 16997                           ;main.c: 174: vscp_statuscnt = 0;
 16998  0000A4  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16999  0000A6                     i1l141:
 17000                           
 17001                           ; BSR set to: 0
 17002                           ;main.c: 175: }
 17003                           ;main.c: 177: INTCONbits.TMR0IF = 0;
 17004  0000A6  94F2               	bcf	intcon,2,c	;volatile
 17005  0000A8                     i1l145:
 17006  0000A8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 17007  0000AC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 17008  0000B0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 17009  0000B4  0010               	retfie	
 17010  0000B6                     __end_of_interrupt_at_low_vector:
 17011                           	opt stack 0
 17012                           tblptru	equ	0xFF8
 17013                           tblptrh	equ	0xFF7
 17014                           tblptrl	equ	0xFF6
 17015                           tablat	equ	0xFF5
 17016                           prodh	equ	0xFF4
 17017                           prodl	equ	0xFF3
 17018                           intcon	equ	0xFF2
 17019                           postinc0	equ	0xFEE
 17020                           wreg	equ	0xFE8
 17021                           indf1	equ	0xFE7
 17022                           fsr1h	equ	0xFE2
 17023                           fsr1l	equ	0xFE1
 17024                           bsr	equ	0xFE0
 17025                           indf2	equ	0xFDF
 17026                           postinc2	equ	0xFDE
 17027                           postdec2	equ	0xFDD
 17028                           plusw2	equ	0xFDB
 17029                           fsr2h	equ	0xFDA
 17030                           fsr2l	equ	0xFD9
 17031                           status	equ	0xFD8
 17032                           
 17033 ;; *************** function i1_WriteTimer0 *****************
 17034 ;; Defined at:
 17035 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 17036 ;; Parameters:    Size  Location     Type
 17037 ;;  timer0          2    0[COMRAM] unsigned int 
 17038 ;; Auto vars:     Size  Location     Type
 17039 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 17040 ;; Return value:  Size  Location     Type
 17041 ;;		None               void
 17042 ;; Registers used:
 17043 ;;		None
 17044 ;; Tracked objects:
 17045 ;;		On entry : 0/0
 17046 ;;		On exit  : 0/0
 17047 ;;		Unchanged: 0/0
 17048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17049 ;;      Params:         2       0       0       0       0       0       0
 17050 ;;      Locals:         2       0       0       0       0       0       0
 17051 ;;      Temps:          0       0       0       0       0       0       0
 17052 ;;      Totals:         4       0       0       0       0       0       0
 17053 ;;Total ram usage:        4 bytes
 17054 ;; Hardware stack levels used:    1
 17055 ;; This function calls:
 17056 ;;		Nothing
 17057 ;; This function is called by:
 17058 ;;		_interrupt_at_low_vector
 17059 ;; This function uses a non-reentrant model
 17060 ;;
 17061                           
 17062                           	psect	text77
 17063  003AEA                     __ptext77:
 17064                           	opt stack 0
 17065  003AEA                     i1_WriteTimer0:
 17066                           	opt stack 21
 17067                           
 17068                           ;incstack = 0
 17069                           ;incstack = 0
 17070  003AEA  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 17071  003AEE  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 17072  003AF2  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 17073  003AF6  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 17074  003AFA  0012               	return	
 17075  003AFC                     __end_ofi1_WriteTimer0:
 17076                           	opt stack 0
 17077                           tblptru	equ	0xFF8
 17078                           tblptrh	equ	0xFF7
 17079                           tblptrl	equ	0xFF6
 17080                           tablat	equ	0xFF5
 17081                           prodh	equ	0xFF4
 17082                           prodl	equ	0xFF3
 17083                           intcon	equ	0xFF2
 17084                           postinc0	equ	0xFEE
 17085                           wreg	equ	0xFE8
 17086                           indf1	equ	0xFE7
 17087                           fsr1h	equ	0xFE2
 17088                           fsr1l	equ	0xFE1
 17089                           bsr	equ	0xFE0
 17090                           indf2	equ	0xFDF
 17091                           postinc2	equ	0xFDE
 17092                           postdec2	equ	0xFDD
 17093                           plusw2	equ	0xFDB
 17094                           fsr2h	equ	0xFDA
 17095                           fsr2l	equ	0xFD9
 17096                           status	equ	0xFD8
 17097                           tblptru	equ	0xFF8
 17098                           tblptrh	equ	0xFF7
 17099                           tblptrl	equ	0xFF6
 17100                           tablat	equ	0xFF5
 17101                           prodh	equ	0xFF4
 17102                           prodl	equ	0xFF3
 17103                           intcon	equ	0xFF2
 17104                           postinc0	equ	0xFEE
 17105                           wreg	equ	0xFE8
 17106                           indf1	equ	0xFE7
 17107                           fsr1h	equ	0xFE2
 17108                           fsr1l	equ	0xFE1
 17109                           bsr	equ	0xFE0
 17110                           indf2	equ	0xFDF
 17111                           postinc2	equ	0xFDE
 17112                           postdec2	equ	0xFDD
 17113                           plusw2	equ	0xFDB
 17114                           fsr2h	equ	0xFDA
 17115                           fsr2l	equ	0xFD9
 17116                           status	equ	0xFD8
 17117                           
 17118                           	psect	rparam
 17119  0000                     tblptru	equ	0xFF8
 17120                           tblptrh	equ	0xFF7
 17121                           tblptrl	equ	0xFF6
 17122                           tablat	equ	0xFF5
 17123                           prodh	equ	0xFF4
 17124                           prodl	equ	0xFF3
 17125                           intcon	equ	0xFF2
 17126                           postinc0	equ	0xFEE
 17127                           wreg	equ	0xFE8
 17128                           indf1	equ	0xFE7
 17129                           fsr1h	equ	0xFE2
 17130                           fsr1l	equ	0xFE1
 17131                           bsr	equ	0xFE0
 17132                           indf2	equ	0xFDF
 17133                           postinc2	equ	0xFDE
 17134                           postdec2	equ	0xFDD
 17135                           plusw2	equ	0xFDB
 17136                           fsr2h	equ	0xFDA
 17137                           fsr2l	equ	0xFD9
 17138                           status	equ	0xFD8
 17139                           tblptru	equ	0xFF8
 17140                           tblptrh	equ	0xFF7
 17141                           tblptrl	equ	0xFF6
 17142                           tablat	equ	0xFF5
 17143                           prodh	equ	0xFF4
 17144                           prodl	equ	0xFF3
 17145                           intcon	equ	0xFF2
 17146                           postinc0	equ	0xFEE
 17147                           wreg	equ	0xFE8
 17148                           indf1	equ	0xFE7
 17149                           fsr1h	equ	0xFE2
 17150                           fsr1l	equ	0xFE1
 17151                           bsr	equ	0xFE0
 17152                           indf2	equ	0xFDF
 17153                           postinc2	equ	0xFDE
 17154                           postdec2	equ	0xFDD
 17155                           plusw2	equ	0xFDB
 17156                           fsr2h	equ	0xFDA
 17157                           fsr2l	equ	0xFD9
 17158                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     59     140
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _doDM->_doActionOff
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionDisable->_writeEEPROM
    _doActionDisable->_readEEPROM
    _doActionStatus->_SendInformationEvent
    _doActionPulse->_readEEPROM
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeAppReg
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_SendInformationEvent
    _calculateSetFilterMask->__CANIDToRegs
    _SendInformationEvent->_sendVSCPFrame
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_readEEPROM
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   70359
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           6     6      0    7490
                                             27 BANK0      6     6      0
                         _readEEPROM
                        _doActionOff
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2438
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                17    17      0   15663
                                             28 BANK0     17    17      0
                         _readEEPROM
                        _doActionOff
                         _doActionOn
                      _doActionPulse
                     _doActionStatus
                    _doActionDisable
                     _doActionToggle
 ---------------------------------------------------------------------------------
 (2) _doActionToggle                                       7     6      1    3454
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionDisable                                      6     5      1     397
                                             10 COMRAM     6     5      1
                        _writeEEPROM
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _doActionStatus                                       7     6      1    3412
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulse                                        7     6      1     353
                                             10 COMRAM     7     6      1
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _doActionOn                                           7     6      1    3196
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOff                                          6     5      1    3196
                                             80 COMRAM     1     0      1
                                             22 BANK0      5     5      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            27    27      0   34505
                                             32 BANK0     27    27      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1   11628
                                             30 BANK0      2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                    18    17      1    2519
                                             14 COMRAM    18    17      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     722
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     180
                                             10 COMRAM     4     4      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1      88
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     9     8      1    8899
                                             80 COMRAM     1     0      1
                                             22 BANK0      8     8      0
                        _writeEEPROM
                         _readEEPROM
               _SendInformationEvent
                    _vscp_readAppReg (ARG)
             _calculateSetFilterMask
 ---------------------------------------------------------------------------------
 (4) _calculateSetFilterMask                              50    50      0    1879
                                             17 COMRAM    50    50      0
                         _readEEPROM
               _ECANSetOperationMode
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _SendInformationEvent                                 8     6      2    2567
                                             74 COMRAM     6     6      0
                                             20 BANK0      2     0      2
                         _readEEPROM
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1550
                                             13 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                      2     2      0    1077
                                             11 COMRAM     2     2      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     227
                                             11 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     132
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     197
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4624
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     263
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _writeEEPROM                                          3     0      3      44
                                              7 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     700
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (5) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         3     3      0     542
                                             10 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     380
                                             10 COMRAM     2     2      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
       _readEEPROM
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _init_app_ram
     _readEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_readAppReg
       _readEEPROM
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_readAppReg (ARG)
         _readEEPROM
       _calculateSetFilterMask (ARG)
         _readEEPROM
         _ECANSetOperationMode
         __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
         _SendInformationEvent
           _readEEPROM
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
         _vscp_readAppReg (ARG)
           _readEEPROM
         _calculateSetFilterMask (ARG)
           _readEEPROM
           _ECANSetOperationMode
           __CANIDToRegs
       _vscp_writeStdReg
         _vscp_setGUID
           _writeEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_getGUID
           _readEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
             _readEEPROM
     _vscp_writeStdReg
       _vscp_setGUID
         _writeEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_getGUID
         _readEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
           _readEEPROM
     ___lbmod
   _doDM
     _readEEPROM
     _doActionOff
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionOn
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulse
       _readEEPROM
     _doActionStatus
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionDisable
       _writeEEPROM
       _readEEPROM
     _doActionToggle
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
     _readEEPROM
     _doActionOff
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _SendInformationEvent
       _readEEPROM
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3B      8C       5       87.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E4       3        0.0%
DATA                 0      0      F0      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Tue Mar 24 10:25:06 2015

                      doActionToggle@val 00CA                  __end_of_vscp_readAppReg 33BA  
                  __end_of_sendVSCPFrame 3304                                       PL2 2292  
                                     PL4 0DFA                                       PL6 0E0A  
                                     PL8 1742             ?_vscp_writeNicknamePermanent 0001  
            ??_vscp_getRegisterPagesUsed 0008                                       bsr 000FE0  
    vscp_writeNicknamePermanent@nickname 000B                              __CFG_BORV$3 000000  
                __end_of_vscp_readStdReg 2FFA                    doActionToggle@dmflags 00C9  
                                    PL10 1780                                      PL20 1DE4  
                                    PL12 1798                                      PL30 2CD4  
                                    PL22 1DF2                                      PL14 17CC  
                                    PL40 0E1A                                      PL32 1E00  
                                    PL24 2B96                                      PL16 22AC  
                                    PL50 2BDE                                      PL42 2BB8  
                                    PL34 2BA4                                      PL26 2CC4  
                                    PL18 2CB0                                      PL60 0E40  
                                    PL52 1E0E                                      PL44 2BCA  
                                    PL36 2828                                      PL28 1442  
                                    PL70 24B4                                      PL62 0E50  
                                    PL54 1E20                                      PL46 17FC  
                                    PL38 145A                                      PL80 1810  
                                    PL72 146E                                      PL64 0E60  
                                    PL56 0E2E                                      PL48 2CE6  
                                    PL82 181A                                      PL74 2CFA  
                                    PL66 0E70                                      PL58 2F06  
                                    PL76 283C                                      PL68 0E80  
                                    PL78 147C                                      l211 1CA0  
                                    l220 1CC4                                      l212 1CA8  
                                    l204 1C84                                      l221 1CCC  
                                    l205 1C8C                                      l310 0738  
                                    l214 1CAC                                      l223 1CD0  
                                    l215 1CB4                                      l320 0800  
                                    l304 06E4                                      l224 1CDA  
                                    l208 1C94                                      l217 1CB8  
                                    l209 1C9C                                      l330 08C8  
                                    l226 1D96                                      l218 1CC0  
                                    l234 1DE2                                      l162 3070  
                                    l315 079C                                      l251 395A  
                                    l411 2290                                      l325 0864  
                                    l149 3012                                      l158 3056  
                                    l335 092C                                      l247 397C  
                                    l415 20F6                                      l185 1B50  
                                    l441 206E                                      l290 3370  
                                    l450 1FCA                                      l442 1ECA  
                                    l514 2DE2                                      l452 200A  
                                    l444 1F0A                                      l540 2A0C  
                                    l622 3A3A                                      l470 3136  
                                    l446 1F4A                                      l550 2A34  
                                    l471 313A                                      l439 1E8A  
                                    l543 2A14                                      l472 313E  
                                    l448 1F8A                                      l552 2A38  
                                    l544 2A1C                                      l473 3142  
                                    l561 2AA4                                      l553 2A40  
                                    l474 3146                                      l490 2548  
                                    l546 2A20                                      l395 0DCE  
                                    l467 312E                                      l491 2578  
                                    l555 2A44                                      l547 2A28  
                                    l539 2A04                                      l468 3166  
                                    l492 25A8                                      l556 2A4C  
                                    l653 36E0                                      l469 3132  
                                    l493 25D8                                      l549 2A2C  
                                    l494 2608                                      l558 2A50  
                                    l647 34C6                                      l495 2638  
                                    l559 2A5A                                      l912 2B94  
                                    l488 2518                                      l658 37BE  
                                    l907 2CAE                        doActionStatus@bOn 00CA  
                                    l917 3534                                      l853 29B0  
                                    l845 2914                       vscp_readStdReg@reg 000D  
                                    l871 234E                                      l847 2932  
                                    l881 23AA                                      l873 2362  
                                    l865 24B2                                      l890 243E  
                                    l858 22F2                                      l875 2376  
                                    l868 23C0                                      l877 238A  
                                    l869 2340                                      l879 239A  
                                    l889 2424                             __CFG_CPB$OFF 000000  
         __size_of_vscp_handleProbeState 00BA                        doActionStatus@arg 0051  
                         getVSCPFrame@id 0028                        doActionStatus@val 00CB  
          __end_of_vscp_handleProbeState 324E                    ?_vscp_restoreDefaults 0001  
                   __size_of_WriteTimer0 0012                   _calculateSetFilterMask 1486  
                                    wreg 000FE8              ?_doApplicationOneSecondWork 0001  
                           __CFG_LVP$OFF 000000                             __CFG_WDT$OFF 000000  
                                   l1032 3676                                     l1104 3662  
                                   l1108 39F2                                     l1212 1056  
                                   l1037 38F4                     __size_of_doActionOff 00BA  
                                   l1055 3238                                     l1047 324A  
                                   l1056 3218                                     l1048 31D6  
                                   l1080 3724                                     l1314 39D4  
                                   l1090 3786                                     l1315 39D6  
                                   l1091 3792                                     l1084 38D0  
                                   l1148 3938                                     l1236 11D2  
                                   l1237 11E6                                     l1238 1222  
                                   l1095 37E8                                     l1247 125E  
                                   l1271 1440                                     l1178 2822  
                                   l1295 38A4                                     l1279 3812  
                                   l7051 381E                                     l5613 3968  
                                   l7303 3196                vscp_getManufacturerId@idx 000B  
                                   l9011 2F5E                                     l9003 2F46  
                                   l5619 3946                                     l7059 3834  
                                   l8053 331A                                     l7245 38E0  
                                   l6701 246C                                     l6613 2320  
                                   l6621 232E                                     l7341 31F4  
                                   l7317 31B4                                     l6437 398A  
                                   l4685 1B52                                     l9101 2716  
                                   l8071 3358                                     l8063 3338  
                                   l6607 230A                                     l6615 232A  
                                   l7343 31F8                                     l7319 31BA  
                                   l9015 2F6A                                     l9007 2F52  
                                   l9103 271A                                     l8073 3360  
                                   l8065 3340                                     l8081 3398  
                                   l8057 332A                                     l7273 2EB2  
                                   l7257 2E24                                     l6473 346A  
                                   l7337 31F0                                     l9041 2FBE  
                                   l9033 2FA8                                     l9025 2F90  
                                   l9105 2730                                     l8075 3368  
                                   l8067 3348                                     l7267 2E4E  
                                   l6715 249C                                     l9019 2F7A  
                                   l8069 3350                                     l7277 2EFC  
                                   l6709 2486                                     l6485 379C  
                                   l7373 323C                                     l9045 2FCA  
                                   l9037 2FB2                                     l9029 2F9C  
                                   l8501 16D0                                     l9117 2764  
                                   l9213 3046                                     l9205 3034  
                                   l8079 3374                                     l8087 33B6  
                                   l6727 3A48                                     l9055 2FEC  
                                   l9127 27AE                                     l9215 304A  
                                   l9231 308C                                     l6761 34E0  
                                   l6665 23D4                                     l6489 37A0  
                                   l9049 2FD6                                     l9057 2FF6  
                                   l8505 16E6                                     l9145 280A  
                                   l9137 27F6                                     l9081 26BC  
                                   l9401 1078                                     l9225 306A  
                                   l9217 3050                                     l9209 303C  
                                   l6771 350A                                     l6763 34EA  
                                   l6675 23F4                                     l9155 2824  
                                   l9307 0EF8                                     l9243 30B8  
                                   l6765 34F4                                     l6757 34CE  
                                   l6693 2440                                     l6597 22E0  
                                   l8461 1498                                     l9093 26F8  
                                   l9405 1088                                     l9341 0F2A  
                                   l9229 3074                                     l6767 34FE  
                                   l6759 34D6                                     l6775 3516  
                                   l9087 26DC                                     l9415 10E6  
                                   l9327 0F1E                                     l9271 0EAC  
                                   l8607 2500                                     l9255 30CC  
                                   l6769 3504                                     l8481 1630  
                                   l9601 12CC                                     l9409 10A0  
                                   l9273 0EB2                                     l9265 0E9A  
                                   l9419 10FC                                     l9435 1122  
                                   l9291 0EEA                                     l9267 0EA0  
                                   l8643 2668                                     l9259 30D4  
                                   l9195 300E                                     l6789 2B30  
                                   l8813 36AE                                     l8477 15BC  
                                   l8469 15AA                                     l9621 12E0  
                                   l9605 12D0                                     l9533 1216  
                                   l9525 1206                                     l9517 11E8  
                                   l9453 1174                                     l9437 1124  
                                   l9357 0F86                                     l9293 0EF0  
                                   l9269 0EA6                                     l8645 2688  
                                   l8717 3578                                     l8709 3544  
                                   l8831 289E                                     l8495 164E  
                                   l9543 1224                                     l9447 1148  
                                   l9439 112E                                     l9367 0FBA  
                                   l8719 35A0                                     l8817 36DC  
                                   l9633 132E                                     l9625 1300  
                                   l9529 120E                                     l9481 11A6  
                                   l9465 1186                                     l9377 0FEE  
                                   l9721 21C0                                     l7881 3642  
                                   l8907 2C3C                                     l8499 16C8  
                                   l9651 1368                                     l9643 134E  
                                   l9547 123E                                     l9387 1022  
                                   l9731 220E                                     l7875 3638  
                                   l8837 28AE                                     l9629 1316  
                                   l9725 21DA                                     l9709 2110  
                                   l7885 364A                                     l9813 1CDE  
                                   l8871 2962                                     l9655 1390  
                                   l9583 1288                                     l9399 105A  
                                   l8599 24C8                                     l9735 2228  
                                   l9743 225C                                     l9823 1D70  
                                   l9815 1CFA                                     l9751 1B9C  
                                   l8865 2934                                     l8849 28D8  
                                   l8945 371C                                     l9593 12AA  
                                   l9569 1260                                     l9497 11C6  
                                   l9737 2242                                     l9729 21F4  
                                   l9745 2286                                     l9833 1DA8  
                                   l8859 2918                                     l8891 29A8  
                                   l9915 06F2                                     l9827 1D82  
                                   l9755 1BA4                                     l8885 29A2  
                                   l8981 39EC                                     l9917 06F6  
                                   l9909 06B8                                     l9677 13E0  
                                   l9693 20A8                                     l9837 1DBC  
                                   l9773 1C14                                     l8879 2980  
                                   l8991 2F28                                     l9775 1C4C  
                                   l9839 1DDE                                     l8889 29A6  
                                   l9937 0748                                     l9929 071E  
                                   l9865 314A                                     l9857 3114  
                                   l9873 318A                                     l9849 30E0  
                                   l9785 1C8E                                     l8995 2F32  
                                   l9957 07AC                                     l9949 0770  
                                   l9885 064C                                     l9869 3178  
                                   l8999 2F3C                                     l9977 0810  
                                   l9969 07D4                                     l9897 0690  
                                   l9889 066A                                     l9997 0874  
                                   l9989 0838              __size_of_vscp_getMatrixInfo 0020  
                         sendCANFrame@id 0037                                     u7205 2AF8  
                                   u7215 2B08                                     u7225 2B34  
                                   u6710 34BA                                     u6715 34B0  
                         sendCANFrame@rv 003E                                     u6885 22E8  
                                   u6887 22EA                                     u9830 15DC  
                                   u9815 14F0                                     u9904 169C  
                                   u9840 1604                                     u9905 1698  
                                   u7994 2E74                                     u7995 2E70  
                                   u9835 15D2                                     u9924 16B2  
                                   u9925 16B0                                     u9845 15FA  
                                   u9864 161A                                     u9865 1618  
                                   u9955 328A                                     u9894 1684  
                                   u9895 1680                         ??_ECANInitialize 0009  
                           __CFG_PWRT$ON 000000                vscp_setManufacturerId@idx 000C  
                                   _doDM 209C                    __size_of_vscp_getGUID 0014  
                       ?_vscp_getMDF_URL 0001                                     _main 2FFA  
                                   _init 3726                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     indf1 000FE7  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                    __size_of_vscp_getZone 000A  
                    i1WriteTimer0@timer0 0001                         _vscp_writeAppReg 0622  
                            _vscp_minute 0090                              _vscp_second 0095  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 00B6                     doActionPulse@dmflags 000F  
          __size_of_vscp_doOneSecondWork 004E                        vscp_getUserID@idx 000B  
                  __size_of_vscp_setGUID 0022                         _vscp_writeStdReg 2692  
                        _doActionDisable 353E                              _writeEEPROM 3888  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 34C8              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 000A                         __RegsToCANID@ptr 0008  
                   __size_of_getCANFrame 002C                                    l10103 0A98  
                                  l10201 0D4A                                    l10113 0AD2  
                                  l10017 08D8                                    l10009 089C  
                                  l10041 0966                                    l10131 0B18  
                                  l10141 0B52                                    l10117 0AD8  
                                  l10061 09B0                                    l10029 0900  
                                  l10207 0D66                                    l10127 0B12  
                                  l10071 09E8                                    l10047 0974  
                                  l10039 093C                                    l10233 0DE2  
                                  l10161 0BFA                                    l10057 09AA  
                                  l10217 0D88                                    l10321 2D60  
                                  l10227 0DB8                                    l10163 0C1A  
                                  l10155 0BA0                                    l10075 0A18  
                                  l10147 0B58                                    l10331 2D92  
                                  l10323 2D6A                                    l10411 2A90  
                                  l10403 2A5E                                    l10237 0DF6  
                                  l10165 0C3A                                    l10157 0BBC  
                                  l10173 0CA6                                    l10085 0A52  
                                  l10149 0B80                                    l10325 2D74  
                                  l10317 2D40                                    l10309 2D0C  
                                  l10405 2A7A                                    l10421 2AC8  
                                  l10167 0C5A                                    l10159 0BDA  
                                  l10175 0CCC                                    l10255 1E70  
                                  l10247 1E38                                    l10343 2DCE  
                                  l10327 2D7E                                    l10319 2D56  
                                  l10335 2D9C                                    _B0CON 000E20  
                                  l10169 0C7A                                    l10089 0A58  
                                  l10433 392E                                    l10329 2D88  
                                  l10337 2DB8                                    l10353 2E06  
                                  l10417 2AB6                                    l10195 0CEC  
                                  l10099 0A92                                    l10291 204A  
                                  l10371 29EE                                    l10363 29BA  
                                  l10349 2DF4                                    l10199 0D18  
                                  l10295 2080                                    l10375 2A0E  
                                  _B1CON 000E30                                    ?_doDM 0001  
                                  l10299 2092                                    _B2CON 000E40  
                                  _B3CON 000E50                                    _B4CON 000E60  
          __size_of_SendInformationEvent 006C            __size_of_vscp_getMajorVersion 0002  
                                  _B5CON 000E70               __end_of_vscp_goActiveState 39BC  
          ??_vscp_writeNicknamePermanent 000B                       writeEEPROM@address 0008  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                            i1_WriteTimer0 3AEA  
                                  _EEADR 000FA9                          __end_of___lbmod 383C  
                _vscp_handleDropNickname 3764                                    _BSEL0 000DF8  
                                  u10124 24D8                                    u10125 24D4  
                                  u11120 27EE                                    u11125 27EC  
                                  u12024 1BF2                                    _T0CON 000FD5  
                                  u12025 1BEE                                    u11090 27A4  
                                  u13004 2D1C                                    u10284 3554  
                                  u12044 1C5C                                    u13005 2D18  
                                  u10285 3550                                    u12045 1C58  
                                  u12214 30F0                                    u11095 27A2  
                                  u12215 30EC                                    u13104 29CA  
                                  u10625 2C16                                    u13105 29C6  
                                  u10635 2C26                                    u10645 2C44  
                                  u12854 1E48                                    u12855 1E44  
                                  i1l140 0086                                    i1l141 00A6  
                                  i1l142 009A                                    i1l137 0060  
                                  i1l145 00A8                                    i1l139 0084  
                        sendCANFrame@dlc 003B                                    _MSEL0 000DF0  
                                  _MSEL1 000DF1                                    _MSEL2 000DF2  
                                  _IRXIF 007D27                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6       __end_of_vscp_readNicknamePermanent 3B2E  
             _vscp_readNicknamePermanent 3B24                                    _PORTA 000F80  
                                  _PORTB 000F81                                    _PORTC 000F82  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                         ?_vscp_getSubzone 0001  
                         __CFG_EBTR0$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                           _vscp_getGUID 3A7C                                    doDM@i 00DD  
                          __CFG_WRTD$OFF 000000                           __CFG_EBTRB$OFF 000000  
                           _vscp_getZone 3B06                       vscp_writeAppReg@rv 00CD  
                                  _hours 0088                _vscp_getRegisterPagesUsed 3B46  
                 __size_of_vscp_getEvent 002A                             _vscp_setGUID 395C  
                                  tablat 000FF5                  _vscp_getSubMinorVersion 3B4C  
                                  plusw2 000FDB                                    status 000FD8  
             __end_of_vscp_sendHeartBeat 3862                     _ECANSetOperationMode 3A3C  
                        __initialization 38F6                             __end_of_doDM 2292  
                           __end_of_main 30DA                             __end_of_init 3764  
                       ?_vscp_readAppReg 0001                  _interrupt_at_low_vector 0018  
                         doDM@class_mask 00D2                           __CFG_OSC$HSPLL 000000  
                      ??_ECANSendMessage 001A                           ?i1_WriteTimer0 0001  
                                 ??_doDM 00CD                         ?_vscp_readStdReg 0001  
                  getVSCPFrame@pvscptype 001E                   ??_vscp_restoreDefaults 000F  
                                 ??_main 0052                                   ??_init 000E  
          __size_of_vscp_handleHeartbeat 003E                 ??_vscp_getManufacturerId 000B  
               ??_vscp_setManufacturerId 000C                 _vscp_handleProtocolEvent 0E90  
                          __activetblptr 000002                        __RegsToCANID@type 000B  
             ECANReceiveMessage@msgFlags 0011            doApplicationOneSecondWork@bOn 00CF  
              __size_of__ECANPointBuffer 0076                                   _B0TXEN 006FC2  
                                 _B1TXEN 006FC3                                   _B2TXEN 006FC4  
                                 _B3TXEN 006FC5                                   _B4TXEN 006FC6  
                                 _B5TXEN 006FC7                   __size_of_doActionPulse 01D0  
             ECANReceiveMessage@savedPtr 0012                                   _CANCON 000F6F  
                                 _EEDATA 000FA8                                   _EECON2 000FA7  
                                 _CIOCON 000F73                            doDM@type_mask 00D5  
                     vscp_writeStdReg@rv 001F                            ?_init_app_ram 0001  
                                 _MDSEL0 007BBE                                   _MDSEL1 007BBF  
                                 i1l7071 0038                                   i1l7081 005E  
                                 i1l7073 003E                               _OpenTimer0 39BC  
                                 i1l7091 008A                                   i1l7083 0062  
                                 i1l7075 0042                                   i1l7067 0024  
                                 i1l7093 0094                                   i1l7085 006E  
                                 i1l7077 0052                                   i1l7069 002C  
                                 i1l7095 00A2                                   i1l7087 0078  
                                 i1l7079 005A                                   i1l7089 0080  
                        _init_app_eeprom 1822                                   _RXB0IF 007D20  
                                 _RXB1IF 007D21                  __end_of_doActionDisable 35AA  
                                 _RXF1EN 006EA1                   ECANReceiveMessage@data 000F  
                 ECANReceiveMessage@mode 0016                   ECANReceiveMessage@temp 0017  
                      getVSCPFrame@pData 0022                        getVSCPFrame@pSize 0021  
                     _vscp_newNodeOnline 37C0                    ?_ECANSetOperationMode 0001  
                     __CANIDToRegs@Value 0011   vscp_handleProtocolEvent@page_save_1290 00DA  
                         getCANFrame@pid 001C                           __CFG_STVREN$ON 000000  
                              ??___lbmod 0009                            _vscp_getEvent 37EA  
                                 _doWork 3B44                         OpenTimer0@config 0008  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 000C  
                    vscp_writeAppReg@bOn 00CC          calculateSetFilterMask@rowfilter 003E  
             calculateSetFilterMask@mask 0036                      vscp_writeAppReg@reg 00CE  
             __end_of_vscp_setSegmentCRC 3AB4                      vscp_writeAppReg@val 0051  
                                 clear_0 38FC                                   clear_1 3908  
                          ?_sendCANFrame 0037             vscp_handleProtocolEvent@byte 00E8  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 0091  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 000B                ??_vscp_getSubMinorVersion 0008  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 000B  
                   ??_vscp_newNodeOnline 004C                          ___lbmod@divisor 0008  
                        doActionToggle@i 00CC                               __accesstop 0060  
                __end_of__initialization 390E                          ___lbmod@counter 000A  
          __size_of_vscp_getMinorVersion 0002                          doActionStatus@i 00CC  
                        writeEEPROM@data 000A                    __size_of_getVSCPFrame 0078  
                     _vscp_writeRegister 3918                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 0026                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001                            _doActionPulse 24C2  
            __end_of_vscp_check_pstorage 38F6                  __size_of_vscp_setUserID 0018  
                        ??i1_WriteTimer0 0003                      ?_vscp_writeRegister 00CF  
                             __end_ofPL2 22AC                               __end_ofPL4 0E0A  
                             __end_ofPL6 0E1A                               __end_ofPL8 1780  
                         ??_sendCANFrame 003E                               _doActionOn 1E32  
                ?_calculateSetFilterMask 0001            calculateSetFilterMask@lastOID 0035  
             __end_of_vscp_getFamilyCode 3B24                            ?__RegsToCANID 0008  
            __size_of_ECANReceiveMessage 01FA                       sendVSCPFrame@pData 0045  
             __end_of_vscp_getFamilyType 3B1A          __size_of_vscp_getManufacturerId 0014  
                vscp_writeRegister@value 00CF          __size_of_vscp_setManufacturerId 0022  
               __end_of_vscp_writeAppReg 0DFA                   getVSCPFrame@pvscpclass 0027  
                __end_of_init_app_eeprom 1B98              __end_of_vscp_setControlByte 3AA2  
               __end_of_vscp_writeStdReg 2828            calculateSetFilterMask@rowmask 0031  
                     __RegsToCANID@Value 000E                     ??_vscp_writeRegister 0052  
        __end_of_vscp_handleDropNickname 3794                             _getVSCPFrame 3450  
                             __pbssBANK0 0060                              ?_OpenTimer0 0001  
             __end_of_vscp_getBufferSize 3B4A                         ?_doActionDisable 000B  
                  vscp_writeRegister@reg 00D0                   ??_ECANSetOperationMode 0008  
     __size_of_vscp_getRegisterPagesUsed 0002                             ?_writeEEPROM 0008  
                         ?_doActionPulse 000B          __end_of_vscp_getSubMinorVersion 3B4E  
               ECANSetOperationMode@mode 0008                                  _B0RXFUL 007107  
                                _B1RXFUL 007187                     __ECANRxFilterHitInfo 0054  
                                _B2RXFUL 007207                                  _B3RXFUL 007287  
                                _B4RXFUL 007307                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 000B                                  _B5RXFUL 007387  
         __end_of_calculateSetFilterMask 1742                  __size_of_doActionToggle 0120  
                       WriteTimer0@timer 000A                  __size_of_doActionStatus 010C  
                                _ECANCON 000F77                            ??_WriteTimer0 000A  
                         ??__RegsToCANID 000C                    sendVSCPFrame@priority 0043  
                                _BRGCON1 000F70                                  _BRGCON2 000F71  
                                _BRGCON3 000F72           SendInformationEvent@eventClass 00C5  
                    vscp_writeStdReg@idx 001D                      vscp_writeStdReg@reg 0020  
           __end_of_vscp_doOneSecondWork 3664              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0041                            ??_doActionOff 00C7  
        __end_of_interrupt_at_low_vector 00B6                        sendCANFrame@pdata 003C  
                  _vscp_handleProbeState 3194                                  _RXB0CON 000F60  
                                _RXB1CON 000F50                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 34C8               __end_of_vscp_getMatrixInfo 399E  
                                _TXB0CON 000F40                                  _TXB1CON 000F30  
                                _TXB2CON 000F20                                  _RXFCON0 000DD4  
                                _RXFCON1 000DD5                    doActionStatus@dmflags 00C9  
                     _vscp_goActiveState 399E                   __size_of_sendVSCPFrame 00B6  
           __end_of_SendInformationEvent 3616             __end_of_vscp_getMajorVersion 3B52  
                     __size_of_vscp_init 0044                  SendInformationEvent@idx 0050  
              vscp_writeStdReg@code_1270 0019                               _readEEPROM 3AD8  
                 _vscp_getManufacturerId 3A54                   _vscp_setManufacturerId 393A  
                        _ECANSendMessage 2848                      ?_vscp_goActiveState 0001  
                                __Hparam 0000                          ??_vscp_getEvent 002C  
                                __Lparam 0000                       _vscp_node_substate 0093  
             __end_of_vscp_getSegmentCRC 3B38               ??_vscp_handleProtocolEvent 00D1  
                          ??_getCANFrame 001C                             doActionOff@i 00CB  
               vscp_writeStdReg@idx_1271 001E        __end_of_vscp_getRegisterPagesUsed 3B48  
               __size_of_vscp_getMDF_URL 0018                                  ___lbmod 3814  
                        getCANFrame@pdlc 001A                  vscp_writeAppReg@val_678 00CB  
                              _FIFOEMPTY 007BA7                          __size_of_doWork 0002  
                           __psmallconst 0600                     __end_of_init_app_ram 2F06  
                     _vscp_sendHeartBeat 383C                                  __pcinit 38F6  
                         _vscp_deviceURL 0600                              ?_doActionOn 0051  
                                __ramtop 0600                      __size_of_OpenTimer0 001E  
                                __ptext0 2FFA                                  __ptext1 3B44  
                                __ptext2 1B98                                  __ptext3 3616  
                                __ptext4 383C                                  __ptext5 3AFC  
                                __ptext6 3B06                                  __ptext7 3B40  
                                __ptext8 209C                                  __ptext9 29B2  
                         _vscp_getUserID 3A68                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 004C                         doActionDisable@i 0010  
                  vscp_writeStdReg@value 000F                      ?_vscp_sendHeartBeat 00C5  
               ??_vscp_handleSetNickname 000C                                  _minutes 0089  
                                _seconds 008B                      __end_of_WriteTimer0 3AD8  
                       ?_init_app_eeprom 0001                        vscp_readAppReg@rv 000B  
                     vscp_getMDF_URL@idx 0009            vscp_handleProtocolEvent@bytes 00DE  
                   end_of_initialization 390E                      __end_of_doActionOff 3194  
           __end_of_vscp_handleHeartbeat 3726                 __size_of_vscp_getSubzone 000A  
                          __Lmediumconst 0000                     __end_of_sendCANFrame 36E8  
              vscp_handleProtocolEvent@i 00EA                vscp_handleProtocolEvent@j 00EB  
              vscp_handleProtocolEvent@k 00E5                          ??_doActionPulse 000C  
                 doActionDisable@dmflags 000E                     ??_vscp_sendHeartBeat 004C  
                         _vscp_sendEvent 3862                        ECANSendMessage@id 0012  
                      ECANSendMessage@pb 001B                                  postdec2 000FDD  
                __size_of_ECANInitialize 0096                           _vscp_setUserID 39F4  
                                postinc0 000FEE                                  postinc2 000FDE  
                 __end_of_vscp_deviceURL 0620      __end_of_vscp_writeNicknamePermanent 3AC6  
            _vscp_writeNicknamePermanent 3AB4                       __ECANPointBuffer@b 000B  
                          _sendVSCPFrame 324E                   __end_of_vscp_getUserID 3A7C  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0078CB  
                      __end_of_vscp_init 36A8                           _vscp_probe_cnt 0094  
                              _PORTCbits 000F82                      __end_of_getCANFrame 37C0  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
               __size_of_vscp_readAppReg 00B6                         ___lbmod@dividend 0009  
                       doActionPulse@arg 000B                           _vscp_statuscnt 0058  
               __size_of_vscp_readStdReg 00E4                         doActionPulse@val 0010  
                     _vscp_setSegmentCRC 3AA2                        readEEPROM@address 0008  
             vscp_handleProtocolEvent@cb 00E3                  __end_of_ECANSendMessage 29B2  
                      vscp_readStdReg@rv 000C                              ___lbmod@rem 000B  
                          ?__CANIDToRegs 0008                              doDM@dmflags 00DC  
                   __end_of__RegsToCANID 2B96                              ?_readEEPROM 0008  
                    __size_of_doActionOn 026A                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 3888                               _vscp_error 3B40  
                   _vscp_doOneSecondWork 3616                       i1WriteTimer0@timer 0003  
                             _vscp_timer 0086                   __end_of_vscp_setUserID 3A0C  
                 vscp_sendHeartBeat@zone 004C                           ?_sendVSCPFrame 003F  
            doApplicationOneSecondWork@i 00D1                           _doActionToggle 29B2  
                   __size_of_writeEEPROM 0026                           _doActionStatus 2D04  
                        ?_vscp_getUserID 0001                           __end_of_doWork 3B46  
           __end_of_vscp_getMinorVersion 3B50                              _WriteTimer0 3AC6  
                   _SendInformationEvent 35AA                     _vscp_getMajorVersion 3B50  
                   ??_vscp_setSegmentCRC 000B                        ??_vscp_getMDF_URL 0008  
          ??_vscp_getBootLoaderAlgorithm 0008                              __end_ofPL10 1798  
                            __end_ofPL20 1DF2                              __end_ofPL12 17CC  
                      ?_vscp_writeAppReg 0051                              __end_ofPL30 2CE6  
                            __end_ofPL22 1E00                              __end_ofPL14 17FC  
                            __end_ofPL40 0E2E                              __end_ofPL32 1E0E  
                            __end_ofPL24 2BA4                              __end_ofPL16 22BA  
                            __end_ofPL50 2BF0                              __end_ofPL42 2BCA  
                            __end_ofPL34 2BB8                              __end_ofPL26 2CD4  
                            __end_ofPL18 2CC4                              __end_ofPL60 0E50  
                            __end_ofPL52 1E20                              __end_ofPL44 2BDE  
                            __end_ofPL36 283C                              __end_ofPL28 145A  
                            __end_ofPL70 24C2                              __end_ofPL62 0E60  
                            __end_ofPL54 1E32                              __end_ofPL46 1810  
                            __end_ofPL38 146E                              __end_ofPL80 181A  
                            __end_ofPL72 147C                              __end_ofPL64 0E70  
                            __end_ofPL56 0E40                              __end_ofPL48 2CFA  
                            __end_ofPL82 1822                              __end_ofPL74 2D04  
                            __end_ofPL66 0E80                              __end_ofPL58 2F16  
                            __end_ofPL76 2848                              __end_ofPL68 0E90  
                            __end_ofPL78 1486                      start_initialization 38F6  
                            _doActionOff 30DA          __size_of_vscp_handleSetNickname 0024  
                     ??_vscp_writeAppReg 00C7                        ?_vscp_writeStdReg 000F  
                 _relay_protection_timer 0060                      __CFG_BOREN$BOACTIVE 000000  
            __size_of_vscp_newNodeOnline 002A                             ??_OpenTimer0 0008  
                     ??_vscp_writeStdReg 0010                       _vscp_getFamilyCode 3B1A  
                         ??__CANIDToRegs 000F                       _vscp_getFamilyType 3B10  
                       doDM@class_filter 00D0                      sendVSCPFrame@nodeid 0042  
                      _vscp_readRegister 39DA                          ?_vscp_sendEvent 0001  
vscp_handleProtocolEvent@bytes_this_time 00E2                    ?_vscp_doOneSecondWork 0001  
                  ECANReceiveMessage@ptr 0018                      ?_vscp_getFamilyCode 0008  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 1442  
                              _doDM$2150 00DA                                _doDM$2151 00DB  
                        ?_vscp_setUserID 000B                                _doDM$2146 00D6  
                              _doDM$2147 00D7                                _doDM$2148 00D8  
                              _doDM$2149 00D9                      ?_vscp_getFamilyType 0008  
                  __size_of_init_app_ram 00F6                 ?_vscp_handleDropNickname 0001  
                 __end_of_doActionToggle 2AD2                        ??_vscp_getSubzone 000B  
                 __end_of_doActionStatus 2E10                 __end_of__ECANPointBuffer 353E  
                      __CANIDToRegs@type 000E                              _getCANFrame 3794  
                               ??_doWork 0008                       _vscp_getBufferSize 3B48  
            vscp_handleProtocolEvent@len 00DF                           doActionOff@arg 0051  
            vscp_handleProtocolEvent@pos 00DD               __end_of_ECANReceiveMessage 24B4  
                         doActionOff@val 00CA                      ??_vscp_readRegister 000E  
         __size_of_vscp_goBootloaderMode 0018                    ?_SendInformationEvent 00C5  
                  ?_vscp_getMajorVersion 0001                    __end_ofi1_WriteTimer0 3AFC  
          __end_of_vscp_goBootloaderMode 3A3C                     _vscp_handleHeartbeat 36E8  
                     __end_of_OpenTimer0 39DA      __size_of_doApplicationOneSecondWork 024C  
                    ?_vscp_getBufferSize 0001                      __size_of_readEEPROM 0012  
                         doActionPulse@i 0011             __size_of_vscp_check_pstorage 0024  
                   ??_vscp_getFamilyCode 000C                 ?_vscp_getSubMinorVersion 0001  
                            __pbssCOMRAM 0052                     ??_vscp_getFamilyType 000C  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 00B1  
                       _vscp_alarmstatus 008C                            ?_vscp_getZone 0001  
                  __size_of_sendCANFrame 0040                  ?_vscp_getManufacturerId 0001  
                ?_vscp_setManufacturerId 000B                            ?_vscp_setGUID 000B  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0012  
                      ??_vscp_readAppReg 000B                        sendVSCPFrame@size 0044  
              __end_of_vscp_readRegister 39F4                        _relay_pulse_flags 008A  
                           _init_app_ram 2E10                        _relay_pulse_timer 0070  
           __size_of_vscp_setControlByte 0012                 ?_interrupt_at_low_vector 0001  
                      ??_vscp_readStdReg 000C                     ??_vscp_getBufferSize 0008  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 397E  
                 _vscp_handleSetNickname 38AE            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 00B1                          ?_doActionToggle 0051  
                         _ECANInitialize 33BA                          ?_doActionStatus 0051  
               __size_of_doActionDisable 006C                                 ?___lbmod 0008  
                    ?_vscp_getMatrixInfo 0001                  calculateSetFilterMask@i 0043  
                calculateSetFilterMask@j 0042                          vscp_getGUID@idx 000B  
                            __pintcodelo 0018                             ??_doActionOn 00C7  
                  ?_vscp_handleHeartbeat 0001         vscp_handleProtocolEvent@len_1280 00E1  
             vscp_setManufacturerId@data 000B                             _sendCANFrame 36A8  
                            __smallconst 0600                        WriteTimer0@timer0 0008  
                     _vscp_getSegmentCRC 3B2E                           ??_vscp_getGUID 000B  
                         ??_vscp_getZone 000B                              doActionOn@i 00CC  
         __end_of_vscp_getManufacturerId 3A68           __end_of_vscp_setManufacturerId 395C  
                  __size_of__RegsToCANID 00C4         vscp_handleProtocolEvent@pos_1279 00E0  
                        doDM@type_filter 00D4                           ??_vscp_setGUID 000C  
                    ?_vscp_getSegmentCRC 0001                     ??_vscp_getMatrixInfo 0008  
                       _vscp_configtimer 0084                     vscp_writeStdReg@code 0015  
                     doActionDisable@arg 000B                       doActionDisable@val 000F  
        SendInformationEvent@eventTypeId 00C6                   ??_vscp_doOneSecondWork 004D  
                 sendVSCPFrame@vscpclass 003F                                 _LATBbits 000F8A  
                   _vscp_getMinorVersion 3B4E                                 _LATCbits 000F8B  
                              _sendTimer 0055                       __end_of_doActionOn 209C  
                 __end_of_ECANInitialize 3450                                 _PIR2bits 000FA1  
                               i1u780_20 006E                                 i1u780_21 006C  
                               i1u781_20 0078                                 i1u781_21 0076  
                               i1u782_20 0080                                 i1u782_21 007E  
                               i1u783_20 0094                                 i1u783_21 0092  
                               i1u784_20 00A2                                 i1u784_21 00A0  
                               i1u778_20 002C                                 i1u778_21 002A  
                               i1u779_20 005A                                 i1u779_21 0058  
                       ECANSendMessage@i 0034                         ECANSendMessage@j 002F  
                  __end_of_vscp_getEvent 3814                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 002C  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 000B                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                   ??_SendInformationEvent 004B  
                               _RXM1SIDH 000F1C                   ??_vscp_getMajorVersion 0008  
                               _RXM1SIDL 000F1D               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 004C                       vscp_setUserID@data 000B  
                   __end_of__CANIDToRegs 2CB0                             __RegsToCANID 2AD2  
                     _vscp_probe_address 0057                       doActionOff@dmflags 00C9  
            __size_of_vscp_goActiveState 001E                      getVSCPFrame@pNodeId 001F  
                              _vscp_init 3664                                _vscp_imsg 0096  
                              _vscp_hour 008E                                _vscp_omsg 00A4  
                       vscp_setGUID@data 000B        __size_of_vscp_handleProtocolEvent 05B2  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
               SendInformationEvent@data 004D     __size_of_vscp_writeNicknamePermanent 0012  
     __end_of_doApplicationOneSecondWork 1DE4               _doApplicationOneSecondWork 1B98  
                       _vscp_page_select 0052               __size_of_vscp_readRegister 001A  
                      _measurement_clock 0080                    ?_vscp_getMinorVersion 0001  
                           ??_readEEPROM 000A                 __size_of_init_app_eeprom 0376  
           __end_of_vscp_restoreDefaults 3B40                               _EECON1bits 000FA6  
                        ?_ECANInitialize 0001                 ??_calculateSetFilterMask 0012  
                               __Hrparam 0000                     ECANReceiveMessage@id 0014  
            __size_of_vscp_sendHeartBeat 0026                         ??_vscp_getUserID 000B  
                        _vscp_getMDF_URL 3A0C                                 __Lrparam 0000  
                  __end_of_doActionPulse 2692                         __CANIDToRegs@val 000A  
                       __CANIDToRegs@ptr 0008                            doActionOn@arg 0051  
                          doActionOn@val 00CB                         _vscp_initledfunc 0056  
                       __size_of___lbmod 0028                   ??_vscp_handleHeartbeat 000C  
                       getCANFrame@flags 001D                             ?_WriteTimer0 0008  
                       getCANFrame@pdata 001B                        ??_doActionDisable 000C  
             vscp_writeAppReg@bInfoEvent 00CA                       __end_of_readEEPROM 3AEA  
                             ?_vscp_init 0001                             ?_doActionOff 0051  
                               __ptext10 353E                                 __ptext11 2D04  
                               __ptext20 1822                                 __ptext12 24C2  
                               __ptext21 3B10                                 __ptext13 1E32  
                               __ptext30 2F16                                 __ptext22 3B1A  
                               __ptext14 30DA                                 __ptext31 3B46  
                               __ptext23 39F4                                 __ptext15 0E90  
                               __ptext40 3B50                                 __ptext32 3B48  
                               __ptext24 393A                                 __ptext16 3814  
                               __ptext41 37C0                                 __ptext33 3B4A  
                               __ptext25 395C                                 __ptext17 3918  
                               __ptext50 399E                                 __ptext42 3764  
                               __ptext34 3A54                                 __ptext26 0622  
                               __ptext18 2692                                 __ptext51 3862  
                               __ptext43 3664                                 __ptext35 3A68  
                               __ptext27 1486                                 __ptext19 3B38  
                               __ptext60 2AD2                                 __ptext52 324E  
                               __ptext44 3B24                                 __ptext36 3A0C  
                               __ptext28 35AA                                 __ptext61 34C8  
                               __ptext53 36A8                                 __ptext45 38AE  
                               __ptext37 3A7C                                 __ptext29 39DA  
                               __ptext70 3A3C                                 __ptext62 38D2  
                               __ptext54 2848                                 __ptext46 36E8  
                               __ptext38 3B4C                                 __ptext71 39BC  
                               __ptext63 3A90                                 __ptext55 2BF0  
                               __ptext47 397E                                 __ptext39 3B4E  
                               __ptext72 2E10                                 __ptext64 3AA2  
                               __ptext56 37EA                                 __ptext48 3A24  
                               __ptext73 3AC6                                 __ptext65 3B2E  
                               __ptext57 3450                                 __ptext49 3194  
                               __ptext74 3304                                 __ptext66 3AB4  
                               __ptext58 3794                                 __ptext75 3AD8  
                               __ptext67 3888                                 __ptext59 22BA  
                               __ptext68 3726                                 __ptext77 3AEA  
                               __ptext69 33BA           vscp_goBootloaderMode@algorithm 000B  
              vscp_sendHeartBeat@subzone 00C5                            ?_getVSCPFrame 001E  
                       ??_vscp_sendEvent 004B                          _vscp_getSubzone 3AFC  
           calculateSetFilterMask@filter 003A                         ??_vscp_setUserID 000C  
                          __size_of_doDM 01F6                            __size_of_main 00E0  
                          __size_of_init 003E                __size_of_vscp_writeAppReg 07D8  
                    _vscp_check_pstorage 38D2                            init_app_ram@i 000D  
         vscp_handleProtocolEvent@i_1281 00E9           vscp_handleProtocolEvent@i_1278 00E7  
         vscp_handleProtocolEvent@i_1289 00E4                     __end_of_vscp_getGUID 3A90  
                          ??_writeEEPROM 000B                __size_of_vscp_writeStdReg 0196  
                    ECANSendMessage@data 0016                 ECANSendMessage@tempBSEL0 0030  
                           ?_getCANFrame 001A                      ECANSendMessage@mode 002D  
                   __end_of_vscp_getZone 3B10                      ECANSendMessage@temp 0033  
                      ?__ECANPointBuffer 0008                        doActionOn@dmflags 00CA  
                      vscp_setUserID@idx 000C                     __end_of_vscp_setGUID 397E  
                     vscp_readAppReg@reg 000C                       ??__ECANPointBuffer 000B  
         vscp_handleProtocolEvent@offset 00DC                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 000C                         init_app_eeprom@i 000D  
                       init_app_eeprom@j 000E                      _vscp_setControlByte 3A90  
            __size_of_vscp_setSegmentCRC 0012                          _vscp_readAppReg 3304  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F50  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
           ??_vscp_readNicknamePermanent 000B                      ECANReceiveMessage@i 0015  
                        _vscp_guid_reset 008D                          _vscp_readStdReg 2F16  
           vscp_handleDropNickname@bytes 000C               __end_of_vscp_newNodeOnline 37EA  
                     _ECANReceiveMessage 22BA                           ??_getVSCPFrame 0023  
                        _vscp_initbtncnt 008F                          sendVSCPFrame@id 0047  
                               intlevel1 0000                   ??_vscp_getMinorVersion 0008  
                vscp_getMatrixInfo@pData 0001                  __end_of_vscp_getMDF_URL 3A24  
                   ?_vscp_setControlByte 0001                      ?_ECANReceiveMessage 000F  
                ?_vscp_handleSetNickname 0001                         ??_doActionToggle 00C7  
       __size_of_vscp_getSubMinorVersion 0002                         ??_doActionStatus 00C7  
                        _vscp_node_state 0092                             ??_vscp_error 0008  
                ECANSendMessage@msgFlags 0019                      vscp_getMatrixInfo@i 0008  
        __size_of_calculateSetFilterMask 02BC                  vscp_setControlByte@ctrl 000B  
                     ECANSendMessage@ptr 0035                        ??_init_app_eeprom 000B  
                  __size_of__CANIDToRegs 00C0                           readEEPROM@data 000A  
    __size_of_vscp_readNicknamePermanent 000A      __end_of_vscp_getBootLoaderAlgorithm 3B4C  
            _vscp_getBootLoaderAlgorithm 3B4A         __size_of_interrupt_at_low_vector 009E  
                 ECANSendMessage@dataLen 0018                      __end_of_writeEEPROM 38AE  
                    __ECANPointBuffer@pt 000C                     ??_ECANReceiveMessage 0012  
                  ??_vscp_check_pstorage 000C                   ECANSendMessage@buffers 002E  
                  _vscp_goBootloaderMode 3A24             __end_of_ECANSetOperationMode 3A54  
                   _vscp_restoreDefaults 3B38              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 000B                  __end_of_vscp_getSubzone 3B06  
            __size_of_vscp_getFamilyType 000A                               _RXM1EXIDEN 0078EB  
             __end_of_vscp_writeRegister 393A                       __end_of_vscp_error 3B44  
                 ECANSendMessage@tempPtr 0031           __end_of_vscp_handleSetNickname 38D2  
     vscp_handleProtocolEvent@bytes_1286 00E6                    ??_vscp_setControlByte 000B  
                   vscp_readRegister@reg 000E             ??_doApplicationOneSecondWork 00CC  
                           __CANIDToRegs 2BF0                   __size_ofi1_WriteTimer0 0012  
      vscp_handleProtocolEvent@page_save 00D8              __size_of_vscp_getBufferSize 0002  
      doApplicationOneSecondWork@ctrlreg 00D0                 __size_of_ECANSendMessage 016A  
                      doActionToggle@bOn 00CB                        doActionToggle@arg 0051  
