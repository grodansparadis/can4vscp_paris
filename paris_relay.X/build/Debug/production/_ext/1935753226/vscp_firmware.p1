Version 3.2 HI-TECH Software Intermediate Code
"208 ../../vscp_firmware/common/vscp_firmware.h
[s S5 `uc 1 `uc 1 `us 1 `uc 1 `uc 1 `uc -> 8 `i ]
[n S5 _imsg flags priority vscp_class vscp_type oaddr data ]
"233
[s S6 `uc 1 `uc 1 `us 1 `uc 1 `uc -> 8 `i ]
[n S6 _omsg flags priority vscp_class vscp_type data ]
"561
[v _vscp_readNicknamePermanent `(uc ~T0 @X0 0 ef ]
"572
[v _vscp_getSegmentCRC `(uc ~T0 @X0 0 ef ]
"567
[v _vscp_writeNicknamePermanent `(v ~T0 @X0 0 ef1`uc ]
"577
[v _vscp_setSegmentCRC `(v ~T0 @X0 0 ef1`uc ]
"587
[v _vscp_setControlByte `(v ~T0 @X0 0 ef1`uc ]
"443
[v _vscp_sendEvent `(uc ~T0 @X0 0 ef ]
"362
[v _vscp_goActiveState `(v ~T0 @X0 0 ef ]
"651
[v _vscp_getZone `(uc ~T0 @X0 0 ef ]
"658
[v _vscp_getSubzone `(uc ~T0 @X0 0 ef ]
"406
[v _vscp_readStdReg `(uc ~T0 @X0 0 ef1`uc ]
"608
[v _vscp_readAppReg `(uc ~T0 @X0 0 ef1`uc ]
"500
[v _vscp_getMajorVersion `(uc ~T0 @X0 0 ef ]
"501
[v _vscp_getMinorVersion `(uc ~T0 @X0 0 ef ]
"502
[v _vscp_getSubMinorVersion `(uc ~T0 @X0 0 ef ]
"517
[v _vscp_getUserID `(uc ~T0 @X0 0 ef1`uc ]
"533
[v _vscp_getManufacturerId `(uc ~T0 @X0 0 ef1`uc ]
"539
[v _vscp_getBootLoaderAlgorithm `(uc ~T0 @X0 0 ef ]
"544
[v _vscp_getBufferSize `(uc ~T0 @X0 0 ef ]
"549
[v _vscp_getRegisterPagesUsed `(uc ~T0 @X0 0 ef ]
"507
[v _vscp_getGUID `(uc ~T0 @X0 0 ef1`uc ]
"555
[v _vscp_getMDF_URL `(uc ~T0 @X0 0 ef1`uc ]
"422
[v _vscp_writeStdReg `(uc ~T0 @X0 0 ef2`uc`uc ]
"616
[v _vscp_writeAppReg `(uc ~T0 @X0 0 ef2`uc`uc ]
"518
[v _vscp_setUserID `(v ~T0 @X0 0 ef2`uc`uc ]
"534
[v _vscp_setManufacturerId `(v ~T0 @X0 0 ef2`uc`uc ]
"508
[v _vscp_setGUID `(v ~T0 @X0 0 ef2`uc`uc ]
"664
[v _vscp_getFamilyCode `(ul ~T0 @X0 0 ef ]
"670
[v _vscp_getFamilyType `(ul ~T0 @X0 0 ef ]
"678
[v _vscp_restoreDefaults `(v ~T0 @X0 0 ef ]
"645
[v _vscp_goBootloaderMode `(v ~T0 @X0 0 ef1`uc ]
"630
[v _vscp_getMatrixInfo `(v ~T0 @X0 0 ef1`*uc ]
"492
[v _sendVSCPFrame `(uc ~T0 @X0 0 ef6`us`uc`uc`uc`uc`*uc ]
"475
[v _getVSCPFrame `(uc ~T0 @X0 0 ef6`*us`*uc`*uc`*uc`*uc`*uc ]
[; ;string.h: 4: typedef int ptrdiff_t;
[; ;string.h: 5: typedef unsigned size_t;
[; ;string.h: 6: typedef unsigned short wchar_t;
[; ;string.h: 9: extern int errno;
[; ;string.h: 22: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 23: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 24: extern void * memset(void *, int, size_t);
[; ;string.h: 35: extern char * strcat(char *, const char *);
[; ;string.h: 36: extern char * strcpy(char *, const char *);
[; ;string.h: 37: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 38: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 39: extern char * strdup(const char *);
[; ;string.h: 40: extern char * strtok(char *, const char *);
[; ;string.h: 43: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 44: extern int strcmp(const char *, const char *);
[; ;string.h: 45: extern int stricmp(const char *, const char *);
[; ;string.h: 46: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 47: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 48: extern void * memchr(const void *, int, size_t);
[; ;string.h: 49: extern size_t strcspn(const char *, const char *);
[; ;string.h: 50: extern char * strpbrk(const char *, const char *);
[; ;string.h: 51: extern size_t strspn(const char *, const char *);
[; ;string.h: 52: extern char * strstr(const char *, const char *);
[; ;string.h: 53: extern char * stristr(const char *, const char *);
[; ;string.h: 54: extern char * strerror(int);
[; ;string.h: 55: extern size_t strlen(const char *);
[; ;string.h: 56: extern char * strchr(const char *, int);
[; ;string.h: 57: extern char * strichr(const char *, int);
[; ;string.h: 58: extern char * strrchr(const char *, int);
[; ;string.h: 59: extern char * strrichr(const char *, int);
[; ;stdlib.h: 27: typedef struct {
[; ;stdlib.h: 28: int rem;
[; ;stdlib.h: 29: int quot;
[; ;stdlib.h: 30: } div_t;
[; ;stdlib.h: 31: typedef struct {
[; ;stdlib.h: 32: unsigned rem;
[; ;stdlib.h: 33: unsigned quot;
[; ;stdlib.h: 34: } udiv_t;
[; ;stdlib.h: 35: typedef struct {
[; ;stdlib.h: 36: long quot;
[; ;stdlib.h: 37: long rem;
[; ;stdlib.h: 38: } ldiv_t;
[; ;stdlib.h: 39: typedef struct {
[; ;stdlib.h: 40: unsigned long quot;
[; ;stdlib.h: 41: unsigned long rem;
[; ;stdlib.h: 42: } uldiv_t;
[; ;stdlib.h: 65: extern double atof(const char *);
[; ;stdlib.h: 66: extern double strtod(const char *, const char **);
[; ;stdlib.h: 67: extern int atoi(const char *);
[; ;stdlib.h: 68: extern unsigned xtoi(const char *);
[; ;stdlib.h: 69: extern long atol(const char *);
[; ;stdlib.h: 70: extern long strtol(const char *, char **, int);
[; ;stdlib.h: 72: extern int rand(void);
[; ;stdlib.h: 73: extern void srand(unsigned int);
[; ;stdlib.h: 74: extern void * calloc(size_t, size_t);
[; ;stdlib.h: 75: extern div_t div(int numer, int denom);
[; ;stdlib.h: 76: extern udiv_t udiv(unsigned numer, unsigned denom);
[; ;stdlib.h: 77: extern ldiv_t ldiv(long numer, long denom);
[; ;stdlib.h: 78: extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
[; ;stdlib.h: 79: extern unsigned long _lrotl(unsigned long value, unsigned int shift);
[; ;stdlib.h: 80: extern unsigned long _lrotr(unsigned long value, unsigned int shift);
[; ;stdlib.h: 81: extern unsigned int _rotl(unsigned int value, unsigned int shift);
[; ;stdlib.h: 82: extern unsigned int _rotr(unsigned int value, unsigned int shift);
[; ;stdlib.h: 87: extern void * malloc(size_t);
[; ;stdlib.h: 88: extern void free(void *);
[; ;stdlib.h: 89: extern void * realloc(void *, size_t);
[; ;stdlib.h: 91: extern void abort(void);
[; ;stdlib.h: 92: extern void exit(int);
[; ;stdlib.h: 93: extern int atexit(void (*)(void));
[; ;stdlib.h: 94: extern char * getenv(const char *);
[; ;stdlib.h: 95: extern char ** environ;
[; ;stdlib.h: 96: extern int system(char *);
[; ;stdlib.h: 97: extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
[; ;stdlib.h: 98: extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
[; ;stdlib.h: 99: extern int abs(int);
[; ;stdlib.h: 100: extern long labs(long);
[; ;stdlib.h: 103: extern char * itoa(char * buf, int val, int base);
[; ;stdlib.h: 104: extern char * utoa(char * buf, unsigned val, int base);
[; ;stdlib.h: 109: extern char * ltoa(char * buf, long val, int base);
[; ;stdlib.h: 110: extern char * ultoa(char * buf, unsigned long val, int base);
[; ;stdlib.h: 112: extern char * ftoa(float f, int * status);
[; ;common\inttypes.h: 34: typedef long long int64_t;
[; ;common\inttypes.h: 39: typedef long int32_t;
[; ;common\inttypes.h: 43: typedef short int16_t;
[; ;common\inttypes.h: 47: typedef char int8_t;
[; ;common\inttypes.h: 52: typedef unsigned long long uint64_t;
[; ;common\inttypes.h: 57: typedef unsigned long uint32_t;
[; ;common\inttypes.h: 61: typedef unsigned short uint16_t;
[; ;common\inttypes.h: 65: typedef unsigned char uint8_t;
[; ;vscp_firmware.h: 189: struct _imsg {
[; ;vscp_firmware.h: 201: uint8_t flags;
[; ;vscp_firmware.h: 203: uint8_t priority;
[; ;vscp_firmware.h: 204: uint16_t vscp_class;
[; ;vscp_firmware.h: 205: uint8_t vscp_type;
[; ;vscp_firmware.h: 206: uint8_t oaddr;
[; ;vscp_firmware.h: 207: uint8_t data[8];
[; ;vscp_firmware.h: 208: };
[; ;vscp_firmware.h: 214: struct _omsg {
[; ;vscp_firmware.h: 226: uint8_t flags;
[; ;vscp_firmware.h: 228: uint8_t priority;
[; ;vscp_firmware.h: 229: uint16_t vscp_class;
[; ;vscp_firmware.h: 230: uint8_t vscp_type;
[; ;vscp_firmware.h: 232: uint8_t data[8];
[; ;vscp_firmware.h: 233: };
[; ;vscp_firmware.h: 280: struct _dmrow {
[; ;vscp_firmware.h: 281: uint8_t oaddr;
[; ;vscp_firmware.h: 282: uint8_t flags;
[; ;vscp_firmware.h: 283: uint8_t class_mask;
[; ;vscp_firmware.h: 284: uint8_t class_filter;
[; ;vscp_firmware.h: 285: uint8_t type_mask;
[; ;vscp_firmware.h: 286: uint8_t type_filter;
[; ;vscp_firmware.h: 287: uint8_t action;
[; ;vscp_firmware.h: 288: uint8_t action_param;
[; ;vscp_firmware.h: 289: };
[; ;vscp_firmware.h: 294: extern uint8_t vscp_nickname;
[; ;vscp_firmware.h: 295: extern uint8_t vscp_errorcnt;
[; ;vscp_firmware.h: 296: extern uint8_t vscp_alarmstatus;
[; ;vscp_firmware.h: 297: extern uint8_t vscp_node_state;
[; ;vscp_firmware.h: 298: extern uint8_t vscp_node_substate;
[; ;vscp_firmware.h: 299: extern uint8_t vscp_initledfunc;
[; ;vscp_firmware.h: 301: extern struct _imsg vscp_imsg;
[; ;vscp_firmware.h: 302: extern struct _omsg vscp_omsg;
[; ;vscp_firmware.h: 303: extern volatile uint16_t vscp_timer;
[; ;vscp_firmware.h: 304: extern uint8_t vscp_probe_address;
[; ;vscp_firmware.h: 305: extern volatile uint8_t vscp_initbtncnt;
[; ;vscp_firmware.h: 306: extern volatile uint8_t vscp_statuscnt;
[; ;vscp_firmware.h: 307: extern uint16_t vscp_page_select;
[; ;vscp_firmware.h: 308: extern volatile uint16_t vscp_configtimer;
[; ;vscp_firmware.h: 310: extern const uint8_t vscp_deviceURL[];
[; ;vscp_firmware.h: 320: void vscp_init(void);
[; ;vscp_firmware.h: 326: void vscp_error(void);
[; ;vscp_firmware.h: 334: void vscp_handleProbeState(void);
[; ;vscp_firmware.h: 347: void vscp_handlePreActiveState(void);
[; ;vscp_firmware.h: 354: void vscp_handleProtocolEvent(void);
[; ;vscp_firmware.h: 362: void vscp_goActiveState(void);
[; ;vscp_firmware.h: 372: void vscp_sendHeartBeat(uint8_t zone, uint8_t subzone);
[; ;vscp_firmware.h: 377: void vscp_handleHeartbeat(void);
[; ;vscp_firmware.h: 382: void vscp_handleSetNickname(void);
[; ;vscp_firmware.h: 387: void vscp_handleDropNickname(void);
[; ;vscp_firmware.h: 392: void vscp_newNodeOnline(void);
[; ;vscp_firmware.h: 399: uint8_t vscp_readRegister(uint8_t reg);
[; ;vscp_firmware.h: 406: uint8_t vscp_readStdReg(uint8_t reg);
[; ;vscp_firmware.h: 414: uint8_t vscp_writeRegister(uint8_t reg, uint8_t value);
[; ;vscp_firmware.h: 422: uint8_t vscp_writeStdReg(uint8_t reg, uint8_t value);
[; ;vscp_firmware.h: 430: void vscp_doOneSecondWork(void);
[; ;vscp_firmware.h: 435: int8_t vscp_check_pstorage(void);
[; ;vscp_firmware.h: 443: int8_t vscp_sendEvent(void);
[; ;vscp_firmware.h: 449: int8_t vscp_getEvent(void);
[; ;vscp_firmware.h: 470: int8_t getVSCPFrame(uint16_t *pvscpclass,
[; ;vscp_firmware.h: 471: uint8_t *pvscptype,
[; ;vscp_firmware.h: 472: uint8_t *pNodeId,
[; ;vscp_firmware.h: 473: uint8_t *pPriority,
[; ;vscp_firmware.h: 474: uint8_t *pSize,
[; ;vscp_firmware.h: 475: uint8_t *pData);
[; ;vscp_firmware.h: 487: int8_t sendVSCPFrame(uint16_t vscpclass,
[; ;vscp_firmware.h: 488: uint8_t vscptype,
[; ;vscp_firmware.h: 489: uint8_t nodeid,
[; ;vscp_firmware.h: 490: uint8_t priority,
[; ;vscp_firmware.h: 491: uint8_t size,
[; ;vscp_firmware.h: 492: uint8_t *pData);
[; ;vscp_firmware.h: 500: uint8_t vscp_getMajorVersion(void);
[; ;vscp_firmware.h: 501: uint8_t vscp_getMinorVersion(void);
[; ;vscp_firmware.h: 502: uint8_t vscp_getSubMinorVersion(void);
[; ;vscp_firmware.h: 507: uint8_t vscp_getGUID(uint8_t idx);
[; ;vscp_firmware.h: 508: void vscp_setGUID(uint8_t idx, uint8_t data);
[; ;vscp_firmware.h: 517: uint8_t vscp_getUserID(uint8_t idx);
[; ;vscp_firmware.h: 518: void vscp_setUserID(uint8_t idx, uint8_t data);
[; ;vscp_firmware.h: 533: uint8_t vscp_getManufacturerId(uint8_t idx);
[; ;vscp_firmware.h: 534: void vscp_setManufacturerId(uint8_t idx, uint8_t data);
[; ;vscp_firmware.h: 539: uint8_t vscp_getBootLoaderAlgorithm( void );
[; ;vscp_firmware.h: 544: uint8_t vscp_getBufferSize(void);
[; ;vscp_firmware.h: 549: uint8_t vscp_getRegisterPagesUsed(void);
[; ;vscp_firmware.h: 555: uint8_t vscp_getMDF_URL(uint8_t idx);
[; ;vscp_firmware.h: 561: uint8_t vscp_readNicknamePermanent(void);
[; ;vscp_firmware.h: 567: void vscp_writeNicknamePermanent(uint8_t nickname);
[; ;vscp_firmware.h: 572: uint8_t vscp_getSegmentCRC(void);
[; ;vscp_firmware.h: 577: void vscp_setSegmentCRC(uint8_t crc);
[; ;vscp_firmware.h: 582: uint8_t vscp_getControlByte(void);
[; ;vscp_firmware.h: 587: void vscp_setControlByte(uint8_t ctrl);
[; ;vscp_firmware.h: 594: uint8_t vscp_getPageSelect(uint8_t idx);
[; ;vscp_firmware.h: 601: void vscp_setPageSelect(uint8_t idx, uint8_t data);
[; ;vscp_firmware.h: 608: uint8_t vscp_readAppReg(uint8_t reg);
[; ;vscp_firmware.h: 616: uint8_t vscp_writeAppReg(uint8_t reg, uint8_t value);
[; ;vscp_firmware.h: 630: void vscp_getMatrixInfo(char *pData);
[; ;vscp_firmware.h: 638: void vscp_getEmbeddedMdfInfo(void);
[; ;vscp_firmware.h: 645: void vscp_goBootloaderMode( uint8_t algorithm );
[; ;vscp_firmware.h: 651: uint8_t vscp_getZone(void);
[; ;vscp_firmware.h: 658: uint8_t vscp_getSubzone(void);
[; ;vscp_firmware.h: 664: uint32_t vscp_getFamilyCode(void);
[; ;vscp_firmware.h: 670: uint32_t vscp_getFamilyType(void);
[; ;vscp_firmware.h: 678: void vscp_restoreDefaults(void);
"63 ../../vscp_firmware/common/vscp_firmware.c
[v _vscp_nickname `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 63: uint8_t vscp_nickname;
"65
[v _vscp_errorcnt `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 65: uint8_t vscp_errorcnt;
"66
[v _vscp_alarmstatus `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 66: uint8_t vscp_alarmstatus;
"68
[v _vscp_node_state `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 68: uint8_t vscp_node_state;
"69
[v _vscp_node_substate `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 69: uint8_t vscp_node_substate;
"71
[v _vscp_probe_cnt `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 71: uint8_t vscp_probe_cnt;
"74
[v _vscp_imsg `S5 ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 74: struct _imsg vscp_imsg;
"77
[v _vscp_omsg `S6 ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 77: struct _omsg vscp_omsg;
"79
[v _vscp_probe_address `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 79: uint8_t vscp_probe_address;
"80
[v _vscp_initledfunc `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 80: uint8_t vscp_initledfunc;
"82
[v _vscp_timer `Vus ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 82: volatile uint16_t vscp_timer;
"85
[v _vscp_initbtncnt `Vuc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 85: volatile uint8_t vscp_initbtncnt;
"90
[v _vscp_statuscnt `Vuc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 90: volatile uint8_t vscp_statuscnt;
"93
[v _vscp_configtimer `Vus ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 93: volatile uint16_t vscp_configtimer;
"97
[v _vscp_page_select `us ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 97: uint16_t vscp_page_select;
"104
[v _vscp_guid_reset `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 104: uint8_t vscp_guid_reset;
"107
[v _vscp_second `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 107: uint8_t vscp_second;
"108
[v _vscp_minute `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 108: uint8_t vscp_minute;
"109
[v _vscp_hour `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 109: uint8_t vscp_hour;
"117
[v _vscp_init `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 116: void vscp_init(void)
[; ;vscp_firmware.c: 117: {
[e :U _vscp_init ]
[f ]
[; ;vscp_firmware.c: 118: vscp_initledfunc = 0x02;
"118
[e = _vscp_initledfunc -> -> 2 `i `uc ]
[; ;vscp_firmware.c: 121: vscp_nickname = vscp_readNicknamePermanent();
"121
[e = _vscp_nickname ( _vscp_readNicknamePermanent ..  ]
[; ;vscp_firmware.c: 124: if (!vscp_nickname) vscp_nickname = 0xff;
"124
[e $ ! ! != -> _vscp_nickname `i -> -> -> 0 `i `uc `i 9  ]
[e = _vscp_nickname -> -> 255 `i `uc ]
[e :U 9 ]
[; ;vscp_firmware.c: 127: vscp_imsg.flags = 0;
"127
[e = . _vscp_imsg 0 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 128: vscp_imsg.priority = 0;
"128
[e = . _vscp_imsg 1 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 129: vscp_imsg.vscp_class = 0;
"129
[e = . _vscp_imsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 130: vscp_imsg.vscp_type = 0;
"130
[e = . _vscp_imsg 3 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 133: vscp_omsg.flags = 0;
"133
[e = . _vscp_omsg 0 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 134: vscp_omsg.priority = 0;
"134
[e = . _vscp_omsg 1 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 135: vscp_omsg.vscp_class = 0;
"135
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 136: vscp_omsg.vscp_type = 0;
"136
[e = . _vscp_omsg 3 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 138: vscp_errorcnt = 0;
"138
[e = _vscp_errorcnt -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 139: vscp_alarmstatus = 0;
"139
[e = _vscp_alarmstatus -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 141: vscp_probe_address = 0;
"141
[e = _vscp_probe_address -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 144: vscp_node_state = 0x00;
"144
[e = _vscp_node_state -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 145: vscp_node_substate = 0x00;
"145
[e = _vscp_node_substate -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 147: vscp_probe_cnt = 0;
"147
[e = _vscp_probe_cnt -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 148: vscp_page_select = 0;
"148
[e = _vscp_page_select -> -> 0 `i `us ]
[; ;vscp_firmware.c: 151: vscp_timer = 0;
"151
[e = _vscp_timer -> -> 0 `i `us ]
[; ;vscp_firmware.c: 152: vscp_configtimer = 0;
"152
[e = _vscp_configtimer -> -> 0 `i `us ]
[; ;vscp_firmware.c: 153: vscp_second = 0;
"153
[e = _vscp_second -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 154: vscp_minute = 0;
"154
[e = _vscp_minute -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 155: vscp_hour = 0;
"155
[e = _vscp_hour -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 156: }
"156
[e :UE 8 ]
}
"166
[v _vscp_check_pstorage `(uc ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 165: int8_t vscp_check_pstorage(void)
[; ;vscp_firmware.c: 166: {
[e :U _vscp_check_pstorage ]
[f ]
[; ;vscp_firmware.c: 169: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
"169
[e $ ! == & -> ( _vscp_getSegmentCRC ..  `i -> 192 `i -> 64 `i 11  ]
{
[; ;vscp_firmware.c: 170: return !0;
"170
[e ) -> -> ! != -> 0 `i -> 0 `i `i `uc ]
[e $UE 10  ]
"171
}
[e :U 11 ]
[; ;vscp_firmware.c: 171: }
[; ;vscp_firmware.c: 174: vscp_writeNicknamePermanent(0xff);
"174
[e ( _vscp_writeNicknamePermanent (1 -> -> 255 `i `uc ]
[; ;vscp_firmware.c: 177: vscp_setSegmentCRC(0x00);
"177
[e ( _vscp_setSegmentCRC (1 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 181: vscp_setControlByte(0xA0);
"181
[e ( _vscp_setControlByte (1 -> -> 160 `i `uc ]
[; ;vscp_firmware.c: 183: return 0;
"183
[e ) -> -> 0 `i `uc ]
[e $UE 10  ]
[; ;vscp_firmware.c: 184: }
"184
[e :UE 10 ]
}
"191
[v _vscp_error `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 190: void vscp_error(void)
[; ;vscp_firmware.c: 191: {
[e :U _vscp_error ]
[f ]
[; ;vscp_firmware.c: 192: vscp_initledfunc = 0x00;
"192
[e = _vscp_initledfunc -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 193: }
"193
[e :UE 12 ]
}
"200
[v _vscp_handleProbeState `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 199: void vscp_handleProbeState(void)
[; ;vscp_firmware.c: 200: {
[e :U _vscp_handleProbeState ]
[f ]
[; ;vscp_firmware.c: 201: switch (vscp_node_substate) {
"201
[e $U 15  ]
{
[; ;vscp_firmware.c: 203: case 0x00:
"203
[e :U 16 ]
[; ;vscp_firmware.c: 205: if (0xff != vscp_probe_address) {
"205
[e $ ! != -> 255 `i -> _vscp_probe_address `i 17  ]
{
[; ;vscp_firmware.c: 207: vscp_omsg.flags = 0x80 + 1;
"207
[e = . _vscp_omsg 0 -> + -> 128 `i -> 1 `i `uc ]
[; ;vscp_firmware.c: 208: vscp_omsg.priority = 0x00;
"208
[e = . _vscp_omsg 1 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 209: vscp_omsg.vscp_class = 0;
"209
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 210: vscp_omsg.vscp_type = 2;
"210
[e = . _vscp_omsg 3 -> -> 2 `i `uc ]
[; ;vscp_firmware.c: 211: vscp_omsg.data[ 0 ] = vscp_probe_address;
"211
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux _vscp_probe_address ]
[; ;vscp_firmware.c: 214: vscp_sendEvent();
"214
[e ( _vscp_sendEvent ..  ]
[; ;vscp_firmware.c: 216: vscp_node_substate = 0x01;
"216
[e = _vscp_node_substate -> -> 1 `i `uc ]
[; ;vscp_firmware.c: 217: vscp_timer = 0;
"217
[e = _vscp_timer -> -> 0 `i `us ]
"219
}
[; ;vscp_firmware.c: 219: } else {
[e $U 18  ]
[e :U 17 ]
{
[; ;vscp_firmware.c: 222: vscp_node_state = 0x04;
"222
[e = _vscp_node_state -> -> 4 `i `uc ]
[; ;vscp_firmware.c: 225: vscp_omsg.flags = 0x80 + 1;
"225
[e = . _vscp_omsg 0 -> + -> 128 `i -> 1 `i `uc ]
[; ;vscp_firmware.c: 226: vscp_omsg.data[ 0 ] = 0xff;
"226
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux -> -> 255 `i `uc ]
[; ;vscp_firmware.c: 227: vscp_omsg.priority = 0x07;
"227
[e = . _vscp_omsg 1 -> -> 7 `i `uc ]
[; ;vscp_firmware.c: 228: vscp_omsg.vscp_class = 0;
"228
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 229: vscp_omsg.vscp_type = 3;
"229
[e = . _vscp_omsg 3 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 232: vscp_sendEvent();
"232
[e ( _vscp_sendEvent ..  ]
"234
}
[e :U 18 ]
[; ;vscp_firmware.c: 234: }
[; ;vscp_firmware.c: 235: break;
"235
[e $U 14  ]
[; ;vscp_firmware.c: 237: case 0x01:
"237
[e :U 19 ]
[; ;vscp_firmware.c: 239: if (vscp_imsg.flags & 0x80) {
"239
[e $ ! != & -> . _vscp_imsg 0 `i -> 128 `i -> 0 `i 20  ]
{
[; ;vscp_firmware.c: 242: if ((0 == vscp_imsg.vscp_class) &&
[; ;vscp_firmware.c: 243: (3 == vscp_imsg.vscp_type)) {
"243
[e $ ! && == -> -> 0 `i `ui -> . _vscp_imsg 2 `ui == -> 3 `i -> . _vscp_imsg 3 `i 21  ]
{
[; ;vscp_firmware.c: 246: if (0 == vscp_probe_address) {
"246
[e $ ! == -> 0 `i -> _vscp_probe_address `i 22  ]
{
[; ;vscp_firmware.c: 250: vscp_node_state = 0x02;
"250
[e = _vscp_node_state -> -> 2 `i `uc ]
[; ;vscp_firmware.c: 251: vscp_timer = 0;
"251
[e = _vscp_timer -> -> 0 `i `us ]
"253
}
[; ;vscp_firmware.c: 253: } else {
[e $U 23  ]
[e :U 22 ]
{
[; ;vscp_firmware.c: 256: vscp_probe_address++;
"256
[e ++ _vscp_probe_address -> -> 1 `i `uc ]
[; ;vscp_firmware.c: 257: vscp_node_substate = 0x00;
"257
[e = _vscp_node_substate -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 258: vscp_probe_cnt = 0;
"258
[e = _vscp_probe_cnt -> -> 0 `i `uc ]
"260
}
[e :U 23 ]
"261
}
[e :U 21 ]
"262
}
[; ;vscp_firmware.c: 260: }
[; ;vscp_firmware.c: 261: }
[; ;vscp_firmware.c: 262: } else {
[e $U 24  ]
[e :U 20 ]
{
[; ;vscp_firmware.c: 264: if (vscp_timer > 1000) {
"264
[e $ ! > -> _vscp_timer `ui -> -> 1000 `i `ui 25  ]
{
[; ;vscp_firmware.c: 266: vscp_probe_cnt++;
"266
[e ++ _vscp_probe_cnt -> -> 1 `i `uc ]
[; ;vscp_firmware.c: 268: if (vscp_probe_cnt >= 3) {
"268
[e $ ! >= -> _vscp_probe_cnt `i -> 3 `i 26  ]
{
[; ;vscp_firmware.c: 271: if (0 == vscp_probe_address) {
"271
[e $ ! == -> 0 `i -> _vscp_probe_address `i 27  ]
{
[; ;vscp_firmware.c: 274: vscp_probe_address++;
"274
[e ++ _vscp_probe_address -> -> 1 `i `uc ]
[; ;vscp_firmware.c: 275: vscp_node_substate = 0x00;
"275
[e = _vscp_node_substate -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 276: vscp_timer = 0;
"276
[e = _vscp_timer -> -> 0 `i `us ]
[; ;vscp_firmware.c: 277: vscp_probe_cnt = 0;
"277
[e = _vscp_probe_cnt -> -> 0 `i `uc ]
"279
}
[; ;vscp_firmware.c: 279: } else {
[e $U 28  ]
[e :U 27 ]
{
[; ;vscp_firmware.c: 282: vscp_nickname = vscp_probe_address;
"282
[e = _vscp_nickname _vscp_probe_address ]
[; ;vscp_firmware.c: 283: vscp_node_state = 0x03;
"283
[e = _vscp_node_state -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 284: vscp_node_substate = 0x00;
"284
[e = _vscp_node_substate -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 285: vscp_writeNicknamePermanent(vscp_nickname);
"285
[e ( _vscp_writeNicknamePermanent (1 _vscp_nickname ]
[; ;vscp_firmware.c: 286: vscp_setSegmentCRC(0x40);
"286
[e ( _vscp_setSegmentCRC (1 -> -> 64 `i `uc ]
[; ;vscp_firmware.c: 289: vscp_probe_cnt = 0;
"289
[e = _vscp_probe_cnt -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 290: vscp_goActiveState();
"290
[e ( _vscp_goActiveState ..  ]
"292
}
[e :U 28 ]
"293
}
[; ;vscp_firmware.c: 292: }
[; ;vscp_firmware.c: 293: } else {
[e $U 29  ]
[e :U 26 ]
{
[; ;vscp_firmware.c: 294: vscp_node_substate = 0x00;
"294
[e = _vscp_node_substate -> -> 0 `i `uc ]
"295
}
[e :U 29 ]
"296
}
[e :U 25 ]
"298
}
[e :U 24 ]
[; ;vscp_firmware.c: 295: }
[; ;vscp_firmware.c: 296: }
[; ;vscp_firmware.c: 298: }
[; ;vscp_firmware.c: 299: break;
"299
[e $U 14  ]
[; ;vscp_firmware.c: 301: case 0x02:
"301
[e :U 30 ]
[; ;vscp_firmware.c: 302: break;
"302
[e $U 14  ]
[; ;vscp_firmware.c: 304: default:
"304
[e :U 31 ]
[; ;vscp_firmware.c: 305: vscp_node_substate = 0x00;
"305
[e = _vscp_node_substate -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 306: break;
"306
[e $U 14  ]
"307
}
[; ;vscp_firmware.c: 307: }
[e $U 14  ]
"201
[e :U 15 ]
[e [\ _vscp_node_substate , $ -> -> 0 `i `uc 16
 , $ -> -> 1 `i `uc 19
 , $ -> -> 2 `i `uc 30
 31 ]
"307
[e :U 14 ]
[; ;vscp_firmware.c: 309: vscp_imsg.flags = 0;
"309
[e = . _vscp_imsg 0 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 311: }
"311
[e :UE 13 ]
}
"318
[v _vscp_handlePreActiveState `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 317: void vscp_handlePreActiveState(void)
[; ;vscp_firmware.c: 318: {
[e :U _vscp_handlePreActiveState ]
[f ]
[; ;vscp_firmware.c: 320: if ( vscp_imsg.flags & 0x80 ) {
"320
[e $ ! != & -> . _vscp_imsg 0 `i -> 128 `i -> 0 `i 33  ]
{
[; ;vscp_firmware.c: 322: if ((0 == vscp_imsg.vscp_class) &&
[; ;vscp_firmware.c: 323: (6 == vscp_imsg.vscp_type) &&
[; ;vscp_firmware.c: 324: (0xff == vscp_imsg.data[ 0 ])) {
"324
[e $ ! && && == -> -> 0 `i `ui -> . _vscp_imsg 2 `ui == -> 6 `i -> . _vscp_imsg 3 `i == -> 255 `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 34  ]
{
[; ;vscp_firmware.c: 327: vscp_nickname = vscp_imsg.data[ 1 ];
"327
[e = _vscp_nickname *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 328: vscp_writeNicknamePermanent(vscp_nickname);
"328
[e ( _vscp_writeNicknamePermanent (1 _vscp_nickname ]
[; ;vscp_firmware.c: 329: vscp_setSegmentCRC(0x40);
"329
[e ( _vscp_setSegmentCRC (1 -> -> 64 `i `uc ]
[; ;vscp_firmware.c: 332: vscp_node_state = 0x03;
"332
[e = _vscp_node_state -> -> 3 `i `uc ]
"333
}
[e :U 34 ]
"334
}
[; ;vscp_firmware.c: 333: }
[; ;vscp_firmware.c: 334: } else {
[e $U 35  ]
[e :U 33 ]
{
[; ;vscp_firmware.c: 336: if (vscp_timer > 1000) {
"336
[e $ ! > -> _vscp_timer `ui -> -> 1000 `i `ui 36  ]
{
[; ;vscp_firmware.c: 338: vscp_nickname = 0xff;
"338
[e = _vscp_nickname -> -> 255 `i `uc ]
[; ;vscp_firmware.c: 339: vscp_writeNicknamePermanent(0xff);
"339
[e ( _vscp_writeNicknamePermanent (1 -> -> 255 `i `uc ]
[; ;vscp_firmware.c: 340: vscp_init();
"340
[e ( _vscp_init ..  ]
"341
}
[e :U 36 ]
"342
}
[e :U 35 ]
[; ;vscp_firmware.c: 341: }
[; ;vscp_firmware.c: 342: }
[; ;vscp_firmware.c: 343: }
"343
[e :UE 32 ]
}
"350
[v _vscp_goActiveState `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 349: void vscp_goActiveState(void)
[; ;vscp_firmware.c: 350: {
[e :U _vscp_goActiveState ]
[f ]
[; ;vscp_firmware.c: 351: vscp_omsg.flags = 0x80 + 1;
"351
[e = . _vscp_omsg 0 -> + -> 128 `i -> 1 `i `uc ]
[; ;vscp_firmware.c: 352: vscp_omsg.priority = 0x00;
"352
[e = . _vscp_omsg 1 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 353: vscp_omsg.vscp_class = 0;
"353
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 354: vscp_omsg.vscp_type = 2;
"354
[e = . _vscp_omsg 3 -> -> 2 `i `uc ]
[; ;vscp_firmware.c: 355: vscp_omsg.data[ 0 ] = vscp_nickname;
"355
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux _vscp_nickname ]
[; ;vscp_firmware.c: 358: vscp_sendEvent();
"358
[e ( _vscp_sendEvent ..  ]
[; ;vscp_firmware.c: 360: vscp_initledfunc = 0x01;
"360
[e = _vscp_initledfunc -> -> 1 `i `uc ]
[; ;vscp_firmware.c: 361: }
"361
[e :UE 37 ]
}
"370
[v _vscp_sendHeartBeat `(v ~T0 @X0 1 ef2`uc`uc ]
{
[; ;vscp_firmware.c: 369: void vscp_sendHeartBeat(uint8_t zone, uint8_t subzone)
[; ;vscp_firmware.c: 370: {
[e :U _vscp_sendHeartBeat ]
[v _zone `uc ~T0 @X0 1 r1 ]
[v _subzone `uc ~T0 @X0 1 r2 ]
[f ]
[; ;vscp_firmware.c: 371: vscp_omsg.flags = 0x80 + 3;
"371
[e = . _vscp_omsg 0 -> + -> 128 `i -> 3 `i `uc ]
[; ;vscp_firmware.c: 372: vscp_omsg.priority = 0x07;
"372
[e = . _vscp_omsg 1 -> -> 7 `i `uc ]
[; ;vscp_firmware.c: 373: vscp_omsg.vscp_class = 20;
"373
[e = . _vscp_omsg 2 -> -> 20 `i `us ]
[; ;vscp_firmware.c: 374: vscp_omsg.vscp_type = 9;
"374
[e = . _vscp_omsg 3 -> -> 9 `i `uc ]
[; ;vscp_firmware.c: 375: vscp_omsg.data[ 0 ] = 0;
"375
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 376: vscp_omsg.data[ 1 ] = zone;
"376
[e = *U + &U . _vscp_omsg 4 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux _zone ]
[; ;vscp_firmware.c: 377: vscp_omsg.data[ 2 ] = subzone;
"377
[e = *U + &U . _vscp_omsg 4 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux _subzone ]
[; ;vscp_firmware.c: 380: vscp_sendEvent();
"380
[e ( _vscp_sendEvent ..  ]
[; ;vscp_firmware.c: 381: }
"381
[e :UE 38 ]
}
"388
[v _vscp_handleHeartbeat `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 387: void vscp_handleHeartbeat(void)
[; ;vscp_firmware.c: 388: {
[e :U _vscp_handleHeartbeat ]
[f ]
[; ;vscp_firmware.c: 389: if ( !vscp_getSegmentCRC() ) {
"389
[e $ ! ! != -> ( _vscp_getSegmentCRC ..  `i -> -> -> 0 `i `uc `i 40  ]
{
[; ;vscp_firmware.c: 390: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
[; ;vscp_firmware.c: 391: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
"391
[e $ ! && == -> 5 `i & -> . _vscp_imsg 0 `i -> 15 `i != -> ( _vscp_getSegmentCRC ..  `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 41  ]
{
[; ;vscp_firmware.c: 395: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
"395
[e ( _vscp_setSegmentCRC (1 *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 398: vscp_nickname = 0xff;
"398
[e = _vscp_nickname -> -> 255 `i `uc ]
[; ;vscp_firmware.c: 399: vscp_writeNicknamePermanent(0xff);
"399
[e ( _vscp_writeNicknamePermanent (1 -> -> 255 `i `uc ]
[; ;vscp_firmware.c: 400: vscp_node_state = 0x01;
"400
[e = _vscp_node_state -> -> 1 `i `uc ]
"401
}
[e :U 41 ]
"402
}
[; ;vscp_firmware.c: 401: }
[; ;vscp_firmware.c: 402: }
[e $U 42  ]
"403
[e :U 40 ]
[; ;vscp_firmware.c: 403: else {
{
[; ;vscp_firmware.c: 405: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
"405
[e ( _vscp_setSegmentCRC (1 *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
"406
}
[e :U 42 ]
[; ;vscp_firmware.c: 406: }
[; ;vscp_firmware.c: 407: }
"407
[e :UE 39 ]
}
"414
[v _vscp_handleSetNickname `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 413: void vscp_handleSetNickname(void)
[; ;vscp_firmware.c: 414: {
[e :U _vscp_handleSetNickname ]
[f ]
[; ;vscp_firmware.c: 415: if ((2 == (vscp_imsg.flags & 0x0f)) &&
[; ;vscp_firmware.c: 416: (vscp_nickname == vscp_imsg.data[ 0 ])) {
"416
[e $ ! && == -> 2 `i & -> . _vscp_imsg 0 `i -> 15 `i == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 44  ]
{
[; ;vscp_firmware.c: 419: vscp_nickname = vscp_imsg.data[ 1 ];
"419
[e = _vscp_nickname *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 420: vscp_writeNicknamePermanent(vscp_nickname);
"420
[e ( _vscp_writeNicknamePermanent (1 _vscp_nickname ]
[; ;vscp_firmware.c: 421: vscp_setSegmentCRC(0x40);
"421
[e ( _vscp_setSegmentCRC (1 -> -> 64 `i `uc ]
"422
}
[e :U 44 ]
[; ;vscp_firmware.c: 422: }
[; ;vscp_firmware.c: 423: }
"423
[e :UE 43 ]
}
"430
[v _vscp_handleDropNickname `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 429: void vscp_handleDropNickname(void)
[; ;vscp_firmware.c: 430: {
[e :U _vscp_handleDropNickname ]
[f ]
"431
[v _bytes `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 431: uint8_t bytes = vscp_imsg.flags & 0x0f;
[e = _bytes -> & -> . _vscp_imsg 0 `i -> 15 `i `uc ]
[; ;vscp_firmware.c: 437: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
"437
[e $ ! && >= -> _bytes `i -> 1 `i == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 46  ]
{
[; ;vscp_firmware.c: 469: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
"469
[e $ ! || == -> _bytes `i -> 1 `i && > -> _bytes `i -> 1 `i == -> *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i -> 0 `i 47  ]
{
[; ;vscp_firmware.c: 471: vscp_nickname = 0xff;
"471
[e = _vscp_nickname -> -> 255 `i `uc ]
[; ;vscp_firmware.c: 472: vscp_writeNicknamePermanent(0xff);
"472
[e ( _vscp_writeNicknamePermanent (1 -> -> 255 `i `uc ]
[; ;vscp_firmware.c: 473: vscp_init();
"473
[e ( _vscp_init ..  ]
"474
}
[e :U 47 ]
"486
}
[e :U 46 ]
[; ;vscp_firmware.c: 474: }
[; ;vscp_firmware.c: 486: }
[; ;vscp_firmware.c: 487: }
"487
[e :UE 45 ]
}
"494
[v _vscp_newNodeOnline `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 493: void vscp_newNodeOnline(void)
[; ;vscp_firmware.c: 494: {
[e :U _vscp_newNodeOnline ]
[f ]
[; ;vscp_firmware.c: 495: if ((1 == (vscp_imsg.flags & 0x0f)) &&
[; ;vscp_firmware.c: 496: (vscp_nickname == vscp_imsg.data[ 0 ])) {
"496
[e $ ! && == -> 1 `i & -> . _vscp_imsg 0 `i -> 15 `i == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 49  ]
{
[; ;vscp_firmware.c: 502: vscp_omsg.flags = 0x80;
"502
[e = . _vscp_omsg 0 -> -> 128 `i `uc ]
[; ;vscp_firmware.c: 503: vscp_omsg.priority = 0x00;
"503
[e = . _vscp_omsg 1 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 504: vscp_omsg.vscp_class = 0;
"504
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 505: vscp_omsg.vscp_type = 3;
"505
[e = . _vscp_omsg 3 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 506: vscp_sendEvent();
"506
[e ( _vscp_sendEvent ..  ]
"508
}
[e :U 49 ]
[; ;vscp_firmware.c: 508: }
[; ;vscp_firmware.c: 509: }
"509
[e :UE 48 ]
}
"516
[v _vscp_doOneSecondWork `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 515: void vscp_doOneSecondWork(void)
[; ;vscp_firmware.c: 516: {
[e :U _vscp_doOneSecondWork ]
[f ]
[; ;vscp_firmware.c: 518: ++vscp_second;
"518
[e =+ _vscp_second -> -> 1 `i `uc ]
[; ;vscp_firmware.c: 520: if (vscp_second > 59) {
"520
[e $ ! > -> _vscp_second `i -> 59 `i 51  ]
{
[; ;vscp_firmware.c: 521: vscp_second = 0;
"521
[e = _vscp_second -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 522: vscp_minute++;
"522
[e ++ _vscp_minute -> -> 1 `i `uc ]
[; ;vscp_firmware.c: 525: if (0x03 == vscp_node_state) {
"525
[e $ ! == -> 3 `i -> _vscp_node_state `i 52  ]
{
[; ;vscp_firmware.c: 526: vscp_sendHeartBeat(vscp_getZone(),
[; ;vscp_firmware.c: 527: vscp_getSubzone());
"527
[e ( _vscp_sendHeartBeat (2 , ( _vscp_getZone ..  ( _vscp_getSubzone ..  ]
"528
}
[e :U 52 ]
"529
}
[e :U 51 ]
[; ;vscp_firmware.c: 528: }
[; ;vscp_firmware.c: 529: }
[; ;vscp_firmware.c: 531: if (vscp_minute > 59) {
"531
[e $ ! > -> _vscp_minute `i -> 59 `i 53  ]
{
[; ;vscp_firmware.c: 532: vscp_minute = 0;
"532
[e = _vscp_minute -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 533: vscp_hour++;
"533
[e ++ _vscp_hour -> -> 1 `i `uc ]
"534
}
[e :U 53 ]
[; ;vscp_firmware.c: 534: }
[; ;vscp_firmware.c: 536: if (vscp_hour > 23) vscp_hour = 0;
"536
[e $ ! > -> _vscp_hour `i -> 23 `i 54  ]
[e = _vscp_hour -> -> 0 `i `uc ]
[e :U 54 ]
[; ;vscp_firmware.c: 540: if (0x03 == vscp_node_state) {
"540
[e $ ! == -> 3 `i -> _vscp_node_state `i 55  ]
{
[; ;vscp_firmware.c: 541: vscp_guid_reset++;
"541
[e ++ _vscp_guid_reset -> -> 1 `i `uc ]
[; ;vscp_firmware.c: 542: if ((vscp_guid_reset & 0x0f) >= 2) {
"542
[e $ ! >= & -> _vscp_guid_reset `i -> 15 `i -> 2 `i 56  ]
{
[; ;vscp_firmware.c: 543: vscp_guid_reset = 0;
"543
[e = _vscp_guid_reset -> -> 0 `i `uc ]
"544
}
[e :U 56 ]
"545
}
[e :U 55 ]
[; ;vscp_firmware.c: 544: }
[; ;vscp_firmware.c: 545: }
[; ;vscp_firmware.c: 546: }
"546
[e :UE 50 ]
}
"553
[v _vscp_readRegister `(uc ~T0 @X0 1 ef1`uc ]
{
[; ;vscp_firmware.c: 552: uint8_t vscp_readRegister(uint8_t reg)
[; ;vscp_firmware.c: 553: {
[e :U _vscp_readRegister ]
[v _reg `uc ~T0 @X0 1 r1 ]
[f ]
[; ;vscp_firmware.c: 554: if (reg >= 0x80) {
"554
[e $ ! >= -> _reg `i -> 128 `i 58  ]
{
[; ;vscp_firmware.c: 555: return vscp_readStdReg(reg);
"555
[e ) ( _vscp_readStdReg (1 _reg ]
[e $UE 57  ]
"556
}
[; ;vscp_firmware.c: 556: } else {
[e $U 59  ]
[e :U 58 ]
{
[; ;vscp_firmware.c: 557: return vscp_readAppReg(reg);
"557
[e ) ( _vscp_readAppReg (1 _reg ]
[e $UE 57  ]
"558
}
[e :U 59 ]
[; ;vscp_firmware.c: 558: }
[; ;vscp_firmware.c: 559: }
"559
[e :UE 57 ]
}
"566
[v _vscp_readStdReg `(uc ~T0 @X0 1 ef1`uc ]
{
[; ;vscp_firmware.c: 565: uint8_t vscp_readStdReg(uint8_t reg)
[; ;vscp_firmware.c: 566: {
[e :U _vscp_readStdReg ]
[v _reg `uc ~T0 @X0 1 r1 ]
[f ]
"567
[v _rv `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 567: uint8_t rv = 0;
[e = _rv -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 569: if (0x80 == reg) {
"569
[e $ ! == -> 128 `i -> _reg `i 61  ]
{
[; ;vscp_firmware.c: 572: rv = vscp_alarmstatus;
"572
[e = _rv _vscp_alarmstatus ]
[; ;vscp_firmware.c: 573: vscp_alarmstatus = 0x00;
"573
[e = _vscp_alarmstatus -> -> 0 `i `uc ]
"575
}
[; ;vscp_firmware.c: 575: }
[e $U 62  ]
"576
[e :U 61 ]
[; ;vscp_firmware.c: 576: else if (0x81 == reg) {
[e $ ! == -> 129 `i -> _reg `i 63  ]
{
[; ;vscp_firmware.c: 579: rv = 1;
"579
[e = _rv -> -> 1 `i `uc ]
"581
}
[; ;vscp_firmware.c: 581: }
[e $U 64  ]
"582
[e :U 63 ]
[; ;vscp_firmware.c: 582: else if (0x82 == reg) {
[e $ ! == -> 130 `i -> _reg `i 65  ]
{
[; ;vscp_firmware.c: 585: rv = 5;
"585
[e = _rv -> -> 5 `i `uc ]
"587
}
[; ;vscp_firmware.c: 587: }
[e $U 66  ]
"588
[e :U 65 ]
[; ;vscp_firmware.c: 588: else if (0x83 == reg) {
[e $ ! == -> 131 `i -> _reg `i 67  ]
{
[; ;vscp_firmware.c: 591: rv = 0;
"591
[e = _rv -> -> 0 `i `uc ]
"593
}
[; ;vscp_firmware.c: 593: }
[e $U 68  ]
"594
[e :U 67 ]
[; ;vscp_firmware.c: 594: else if (0x94 == reg) {
[e $ ! == -> 148 `i -> _reg `i 69  ]
{
[; ;vscp_firmware.c: 597: rv = vscp_getMajorVersion();
"597
[e = _rv ( _vscp_getMajorVersion ..  ]
"599
}
[; ;vscp_firmware.c: 599: }
[e $U 70  ]
"600
[e :U 69 ]
[; ;vscp_firmware.c: 600: else if (0x95 == reg) {
[e $ ! == -> 149 `i -> _reg `i 71  ]
{
[; ;vscp_firmware.c: 603: rv = vscp_getMinorVersion();
"603
[e = _rv ( _vscp_getMinorVersion ..  ]
"605
}
[; ;vscp_firmware.c: 605: }
[e $U 72  ]
"606
[e :U 71 ]
[; ;vscp_firmware.c: 606: else if (0x96 == reg) {
[e $ ! == -> 150 `i -> _reg `i 73  ]
{
[; ;vscp_firmware.c: 609: rv = vscp_getSubMinorVersion();
"609
[e = _rv ( _vscp_getSubMinorVersion ..  ]
"611
}
[; ;vscp_firmware.c: 611: }
[e $U 74  ]
"612
[e :U 73 ]
[; ;vscp_firmware.c: 612: else if (reg < 0x89) {
[e $ ! < -> _reg `i -> 137 `i 75  ]
{
[; ;vscp_firmware.c: 615: rv = vscp_getUserID(reg - 0x84);
"615
[e = _rv ( _vscp_getUserID (1 -> - -> _reg `i -> 132 `i `uc ]
"617
}
[; ;vscp_firmware.c: 617: }
[e $U 76  ]
"618
[e :U 75 ]
[; ;vscp_firmware.c: 618: else if ((reg > 0x88) &&
[; ;vscp_firmware.c: 619: (reg < 0x91)) {
"619
[e $ ! && > -> _reg `i -> 136 `i < -> _reg `i -> 145 `i 77  ]
{
[; ;vscp_firmware.c: 622: rv = vscp_getManufacturerId(reg - 0x89);
"622
[e = _rv ( _vscp_getManufacturerId (1 -> - -> _reg `i -> 137 `i `uc ]
"624
}
[; ;vscp_firmware.c: 624: }
[e $U 78  ]
"625
[e :U 77 ]
[; ;vscp_firmware.c: 625: else if (0x91 == reg) {
[e $ ! == -> 145 `i -> _reg `i 79  ]
{
[; ;vscp_firmware.c: 628: rv = vscp_nickname;
"628
[e = _rv _vscp_nickname ]
"630
}
[; ;vscp_firmware.c: 630: }
[e $U 80  ]
"631
[e :U 79 ]
[; ;vscp_firmware.c: 631: else if (0x93 == reg) {
[e $ ! == -> 147 `i -> _reg `i 81  ]
{
[; ;vscp_firmware.c: 634: rv = (vscp_page_select & 0xff);
"634
[e = _rv -> & -> _vscp_page_select `ui -> -> 255 `i `ui `uc ]
"636
}
[; ;vscp_firmware.c: 636: }
[e $U 82  ]
"638
[e :U 81 ]
[; ;vscp_firmware.c: 638: else if (0x92 == reg) {
[e $ ! == -> 146 `i -> _reg `i 83  ]
{
[; ;vscp_firmware.c: 641: rv = (vscp_page_select >> 8) & 0xff;
"641
[e = _rv -> & >> -> _vscp_page_select `ui -> 8 `i -> -> 255 `i `ui `uc ]
"643
}
[; ;vscp_firmware.c: 643: }
[e $U 84  ]
"644
[e :U 83 ]
[; ;vscp_firmware.c: 644: else if (0x97 == reg) {
[e $ ! == -> 151 `i -> _reg `i 85  ]
{
[; ;vscp_firmware.c: 646: rv = vscp_getBootLoaderAlgorithm();
"646
[e = _rv ( _vscp_getBootLoaderAlgorithm ..  ]
"647
}
[; ;vscp_firmware.c: 647: }
[e $U 86  ]
"648
[e :U 85 ]
[; ;vscp_firmware.c: 648: else if (0x98 == reg) {
[e $ ! == -> 152 `i -> _reg `i 87  ]
{
[; ;vscp_firmware.c: 650: rv = vscp_getBufferSize();
"650
[e = _rv ( _vscp_getBufferSize ..  ]
"651
}
[; ;vscp_firmware.c: 651: }
[e $U 88  ]
"652
[e :U 87 ]
[; ;vscp_firmware.c: 652: else if (0x99 == reg) {
[e $ ! == -> 153 `i -> _reg `i 89  ]
{
[; ;vscp_firmware.c: 654: rv = vscp_getRegisterPagesUsed();
"654
[e = _rv ( _vscp_getRegisterPagesUsed ..  ]
"655
}
[; ;vscp_firmware.c: 655: }
[e $U 90  ]
"656
[e :U 89 ]
[; ;vscp_firmware.c: 656: else if ((reg > (0xD0 - 1)) &&
[; ;vscp_firmware.c: 657: (reg < 0xE0)) {
"657
[e $ ! && > -> _reg `i - -> 208 `i -> 1 `i < -> _reg `i -> 224 `i 91  ]
{
[; ;vscp_firmware.c: 660: rv = vscp_getGUID(reg - 0xD0);
"660
[e = _rv ( _vscp_getGUID (1 -> - -> _reg `i -> 208 `i `uc ]
"662
}
[; ;vscp_firmware.c: 662: }
[e $U 92  ]
"663
[e :U 91 ]
[; ;vscp_firmware.c: 663: else {
{
[; ;vscp_firmware.c: 666: rv = vscp_getMDF_URL(reg - 0xE0);
"666
[e = _rv ( _vscp_getMDF_URL (1 -> - -> _reg `i -> 224 `i `uc ]
"668
}
[e :U 92 ]
[e :U 90 ]
[e :U 88 ]
[e :U 86 ]
[e :U 84 ]
[e :U 82 ]
[e :U 80 ]
[e :U 78 ]
[e :U 76 ]
[e :U 74 ]
[e :U 72 ]
[e :U 70 ]
[e :U 68 ]
[e :U 66 ]
[e :U 64 ]
[e :U 62 ]
[; ;vscp_firmware.c: 668: }
[; ;vscp_firmware.c: 670: return rv;
"670
[e ) _rv ]
[e $UE 60  ]
[; ;vscp_firmware.c: 671: }
"671
[e :UE 60 ]
}
"678
[v _vscp_writeRegister `(uc ~T0 @X0 1 ef2`uc`uc ]
{
[; ;vscp_firmware.c: 677: uint8_t vscp_writeRegister(uint8_t reg, uint8_t value)
[; ;vscp_firmware.c: 678: {
[e :U _vscp_writeRegister ]
[v _reg `uc ~T0 @X0 1 r1 ]
[v _value `uc ~T0 @X0 1 r2 ]
[f ]
[; ;vscp_firmware.c: 679: if (reg >= 0x80) {
"679
[e $ ! >= -> _reg `i -> 128 `i 94  ]
{
[; ;vscp_firmware.c: 680: return vscp_writeStdReg(reg, value);
"680
[e ) ( _vscp_writeStdReg (2 , _reg _value ]
[e $UE 93  ]
"681
}
[; ;vscp_firmware.c: 681: } else {
[e $U 95  ]
[e :U 94 ]
{
[; ;vscp_firmware.c: 682: return vscp_writeAppReg(reg, value);
"682
[e ) ( _vscp_writeAppReg (2 , _reg _value ]
[e $UE 93  ]
"683
}
[e :U 95 ]
[; ;vscp_firmware.c: 683: }
[; ;vscp_firmware.c: 684: }
"684
[e :UE 93 ]
}
"691
[v _vscp_writeStdReg `(uc ~T0 @X0 1 ef2`uc`uc ]
{
[; ;vscp_firmware.c: 690: uint8_t vscp_writeStdReg(uint8_t reg, uint8_t value)
[; ;vscp_firmware.c: 691: {
[e :U _vscp_writeStdReg ]
[v _reg `uc ~T0 @X0 1 r1 ]
[v _value `uc ~T0 @X0 1 r2 ]
[f ]
"692
[v _rv `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 692: uint8_t rv = ~value;
[e = _rv -> ~ -> _value `i `uc ]
[; ;vscp_firmware.c: 694: if ((reg > (0x82 + 1)) &&
[; ;vscp_firmware.c: 695: (reg < 0x89)) {
"695
[e $ ! && > -> _reg `i + -> 130 `i -> 1 `i < -> _reg `i -> 137 `i 97  ]
{
[; ;vscp_firmware.c: 698: vscp_setUserID((reg - 0x84), value);
"698
[e ( _vscp_setUserID (2 , -> - -> _reg `i -> 132 `i `uc _value ]
[; ;vscp_firmware.c: 699: rv = vscp_getUserID((reg - 0x84));
"699
[e = _rv ( _vscp_getUserID (1 -> - -> _reg `i -> 132 `i `uc ]
"701
}
[; ;vscp_firmware.c: 701: }
[e $U 98  ]
"702
[e :U 97 ]
[; ;vscp_firmware.c: 702: else if (0x92 == reg) {
[e $ ! == -> 146 `i -> _reg `i 99  ]
{
[; ;vscp_firmware.c: 705: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value << 8);
"705
[e = _vscp_page_select -> | & -> _vscp_page_select `ui -> -> 255 `i `ui << -> -> _value `us `ui -> 8 `i `us ]
[; ;vscp_firmware.c: 706: rv = (vscp_page_select >> 8) & 0xff;
"706
[e = _rv -> & >> -> _vscp_page_select `ui -> 8 `i -> -> 255 `i `ui `uc ]
"707
}
[; ;vscp_firmware.c: 707: }
[e $U 100  ]
"708
[e :U 99 ]
[; ;vscp_firmware.c: 708: else if (0x93 == reg) {
[e $ ! == -> 147 `i -> _reg `i 101  ]
{
[; ;vscp_firmware.c: 711: vscp_page_select = (vscp_page_select & 0xff00) | value;
"711
[e = _vscp_page_select -> | & -> _vscp_page_select `ui -> 65280 `ui -> _value `ui `us ]
[; ;vscp_firmware.c: 712: rv = (vscp_page_select & 0xff);
"712
[e = _rv -> & -> _vscp_page_select `ui -> -> 255 `i `ui `uc ]
"713
}
[; ;vscp_firmware.c: 713: }
[e $U 102  ]
"718
[e :U 101 ]
[; ;vscp_firmware.c: 718: else if ((reg > 0x88) && (reg < 0x91)) {
[e $ ! && > -> _reg `i -> 136 `i < -> _reg `i -> 145 `i 103  ]
{
[; ;vscp_firmware.c: 720: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
[; ;vscp_firmware.c: 721: (0xff != (vscp_page_select & 0xff))) {
"721
[e $ ! || != -> -> 255 `i `ui & >> -> _vscp_page_select `ui -> 8 `i -> -> 255 `i `ui != -> -> 255 `i `ui & -> _vscp_page_select `ui -> -> 255 `i `ui 104  ]
{
[; ;vscp_firmware.c: 723: rv = ~value;
"723
[e = _rv -> ~ -> _value `i `uc ]
"724
}
[; ;vscp_firmware.c: 724: } else {
[e $U 105  ]
[e :U 104 ]
{
[; ;vscp_firmware.c: 726: vscp_setManufacturerId(reg - 0x89, value);
"726
[e ( _vscp_setManufacturerId (2 , -> - -> _reg `i -> 137 `i `uc _value ]
[; ;vscp_firmware.c: 727: rv = vscp_getManufacturerId(reg - 0x89);
"727
[e = _rv ( _vscp_getManufacturerId (1 -> - -> _reg `i -> 137 `i `uc ]
"728
}
[e :U 105 ]
"729
}
[; ;vscp_firmware.c: 728: }
[; ;vscp_firmware.c: 729: }
[e $U 106  ]
"730
[e :U 103 ]
[; ;vscp_firmware.c: 730: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
[e $ ! && > -> _reg `i - -> 208 `i -> 1 `i < -> _reg `i -> 224 `i 107  ]
{
[; ;vscp_firmware.c: 732: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
[; ;vscp_firmware.c: 733: (0xff != (vscp_page_select & 0xff))) {
"733
[e $ ! || != -> -> 255 `i `ui & >> -> _vscp_page_select `ui -> 8 `i -> -> 255 `i `ui != -> -> 255 `i `ui & -> _vscp_page_select `ui -> -> 255 `i `ui 108  ]
{
[; ;vscp_firmware.c: 735: rv = ~value;
"735
[e = _rv -> ~ -> _value `i `uc ]
"736
}
[; ;vscp_firmware.c: 736: }
[e $U 109  ]
"737
[e :U 108 ]
[; ;vscp_firmware.c: 737: else {
{
[; ;vscp_firmware.c: 738: vscp_setGUID(reg - 0xD0, value);
"738
[e ( _vscp_setGUID (2 , -> - -> _reg `i -> 208 `i `uc _value ]
[; ;vscp_firmware.c: 739: rv = vscp_getGUID(reg - 0xD0);
"739
[e = _rv ( _vscp_getGUID (1 -> - -> _reg `i -> 208 `i `uc ]
"740
}
[e :U 109 ]
"741
}
[; ;vscp_firmware.c: 740: }
[; ;vscp_firmware.c: 741: }
[e $U 110  ]
"743
[e :U 107 ]
[; ;vscp_firmware.c: 743: else if ( ( reg >= 0x9A ) &&
[; ;vscp_firmware.c: 744: ( reg < 0x9E ) ) {
"744
[e $ ! && >= -> _reg `i -> 154 `i < -> _reg `i -> 158 `i 111  ]
{
"746
[v _code `ul ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 746: uint32_t code = vscp_getFamilyCode();
[e = _code ( _vscp_getFamilyCode ..  ]
"747
[v _idx `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 747: uint8_t idx = reg - 0x9A;
[e = _idx -> - -> _reg `i -> 154 `i `uc ]
[; ;vscp_firmware.c: 748: rv = code >> (((3-idx)*8) & 0xff);
"748
[e = _rv -> >> _code & * - -> 3 `i -> _idx `i -> 8 `i -> 255 `i `uc ]
"749
}
[; ;vscp_firmware.c: 749: }
[e $U 112  ]
"750
[e :U 111 ]
[; ;vscp_firmware.c: 750: else if ( ( reg >= 0x9E ) &&
[; ;vscp_firmware.c: 751: ( reg < 0xA2 ) ) {
"751
[e $ ! && >= -> _reg `i -> 158 `i < -> _reg `i -> 162 `i 113  ]
{
"753
[v _code `ul ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 753: uint32_t code = vscp_getFamilyType();
[e = _code ( _vscp_getFamilyType ..  ]
"754
[v _idx `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 754: uint8_t idx = reg - 0x9E;
[e = _idx -> - -> _reg `i -> 158 `i `uc ]
[; ;vscp_firmware.c: 755: rv = code >> (((3-idx)*8) & 0xff);
"755
[e = _rv -> >> _code & * - -> 3 `i -> _idx `i -> 8 `i -> 255 `i `uc ]
"756
}
[; ;vscp_firmware.c: 756: }
[e $U 114  ]
"757
[e :U 113 ]
[; ;vscp_firmware.c: 757: else if ( 0xA2 == reg ) {
[e $ ! == -> 162 `i -> _reg `i 115  ]
{
[; ;vscp_firmware.c: 758: if ( 0x55 == value ) {
"758
[e $ ! == -> 85 `i -> _value `i 116  ]
{
[; ;vscp_firmware.c: 759: vscp_configtimer = 0;
"759
[e = _vscp_configtimer -> -> 0 `i `us ]
[; ;vscp_firmware.c: 760: rv = 0x55;
"760
[e = _rv -> -> 85 `i `uc ]
"761
}
[; ;vscp_firmware.c: 761: }
[e $U 117  ]
"762
[e :U 116 ]
[; ;vscp_firmware.c: 762: else if ( 0xaa == value ) {
[e $ ! == -> 170 `i -> _value `i 118  ]
{
[; ;vscp_firmware.c: 763: if ( vscp_configtimer < 1000 ) {
"763
[e $ ! < -> _vscp_configtimer `ui -> -> 1000 `i `ui 119  ]
{
[; ;vscp_firmware.c: 764: vscp_restoreDefaults();
"764
[e ( _vscp_restoreDefaults ..  ]
[; ;vscp_firmware.c: 765: rv = 0xaa;
"765
[e = _rv -> -> 170 `i `uc ]
"766
}
[; ;vscp_firmware.c: 766: }
[e $U 120  ]
"767
[e :U 119 ]
[; ;vscp_firmware.c: 767: else {
{
[; ;vscp_firmware.c: 768: rv = 0;
"768
[e = _rv -> -> 0 `i `uc ]
"769
}
[e :U 120 ]
"770
}
[e :U 118 ]
"772
[e :U 117 ]
}
[; ;vscp_firmware.c: 769: }
[; ;vscp_firmware.c: 770: }
[; ;vscp_firmware.c: 772: }
[e $U 121  ]
"773
[e :U 115 ]
[; ;vscp_firmware.c: 773: else {
{
[; ;vscp_firmware.c: 775: rv = ~value;
"775
[e = _rv -> ~ -> _value `i `uc ]
"776
}
[e :U 121 ]
[e :U 114 ]
[e :U 112 ]
[e :U 110 ]
[e :U 106 ]
[e :U 102 ]
[e :U 100 ]
[e :U 98 ]
[; ;vscp_firmware.c: 776: }
[; ;vscp_firmware.c: 778: return rv;
"778
[e ) _rv ]
[e $UE 96  ]
[; ;vscp_firmware.c: 779: }
"779
[e :UE 96 ]
}
"786
[v _vscp_handleProtocolEvent `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 785: void vscp_handleProtocolEvent(void)
[; ;vscp_firmware.c: 786: {
[e :U _vscp_handleProtocolEvent ]
[f ]
[; ;vscp_firmware.c: 788: if (0 == vscp_imsg.vscp_class) {
"788
[e $ ! == -> -> 0 `i `ui -> . _vscp_imsg 2 `ui 123  ]
{
[; ;vscp_firmware.c: 791: switch (vscp_imsg.vscp_type) {
"791
[e $U 125  ]
{
[; ;vscp_firmware.c: 793: case 1:
"793
[e :U 126 ]
[; ;vscp_firmware.c: 795: vscp_handleHeartbeat();
"795
[e ( _vscp_handleHeartbeat ..  ]
[; ;vscp_firmware.c: 796: break;
"796
[e $U 124  ]
[; ;vscp_firmware.c: 798: case 2:
"798
[e :U 127 ]
[; ;vscp_firmware.c: 800: vscp_newNodeOnline();
"800
[e ( _vscp_newNodeOnline ..  ]
[; ;vscp_firmware.c: 801: break;
"801
[e $U 124  ]
[; ;vscp_firmware.c: 803: case 6:
"803
[e :U 128 ]
[; ;vscp_firmware.c: 805: vscp_handleSetNickname();
"805
[e ( _vscp_handleSetNickname ..  ]
[; ;vscp_firmware.c: 806: break;
"806
[e $U 124  ]
[; ;vscp_firmware.c: 808: case 8:
"808
[e :U 129 ]
[; ;vscp_firmware.c: 810: vscp_handleDropNickname();
"810
[e ( _vscp_handleDropNickname ..  ]
[; ;vscp_firmware.c: 811: break;
"811
[e $U 124  ]
[; ;vscp_firmware.c: 813: case 9:
"813
[e :U 130 ]
[; ;vscp_firmware.c: 815: if ((2 == (vscp_imsg.flags & 0x0f)) &&
[; ;vscp_firmware.c: 816: (vscp_nickname == vscp_imsg.data[ 0 ])) {
"816
[e $ ! && == -> 2 `i & -> . _vscp_imsg 0 `i -> 15 `i == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 131  ]
{
[; ;vscp_firmware.c: 818: if (vscp_imsg.data[ 1 ] < 0x80) {
"818
[e $ ! < -> *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i -> 128 `i 132  ]
{
[; ;vscp_firmware.c: 821: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
"821
[e = *U + &U . _vscp_omsg 4 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_readAppReg (1 *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 824: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
"824
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 826: vscp_omsg.priority = 0x03;
"826
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 827: vscp_omsg.flags = 0x80 + 2;
"827
[e = . _vscp_omsg 0 -> + -> 128 `i -> 2 `i `uc ]
[; ;vscp_firmware.c: 828: vscp_omsg.vscp_class = 0;
"828
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 829: vscp_omsg.vscp_type = 10;
"829
[e = . _vscp_omsg 3 -> -> 10 `i `uc ]
[; ;vscp_firmware.c: 832: vscp_sendEvent();
"832
[e ( _vscp_sendEvent ..  ]
"833
}
[; ;vscp_firmware.c: 833: } else {
[e $U 133  ]
[e :U 132 ]
{
[; ;vscp_firmware.c: 836: vscp_omsg.data[ 1 ] =
[; ;vscp_firmware.c: 837: vscp_readStdReg(vscp_imsg.data[ 1 ]);
"837
[e = *U + &U . _vscp_omsg 4 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_readStdReg (1 *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 840: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
"840
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 842: vscp_omsg.priority = 0x03;
"842
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 843: vscp_omsg.flags = 0x80 + 2;
"843
[e = . _vscp_omsg 0 -> + -> 128 `i -> 2 `i `uc ]
[; ;vscp_firmware.c: 844: vscp_omsg.vscp_class = 0;
"844
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 845: vscp_omsg.vscp_type = 10;
"845
[e = . _vscp_omsg 3 -> -> 10 `i `uc ]
[; ;vscp_firmware.c: 848: vscp_sendEvent();
"848
[e ( _vscp_sendEvent ..  ]
"849
}
[e :U 133 ]
"850
}
[e :U 131 ]
[; ;vscp_firmware.c: 849: }
[; ;vscp_firmware.c: 850: }
[; ;vscp_firmware.c: 851: break;
"851
[e $U 124  ]
[; ;vscp_firmware.c: 853: case 11:
"853
[e :U 134 ]
[; ;vscp_firmware.c: 855: if ((3 == (vscp_imsg.flags & 0x0f)) &&
[; ;vscp_firmware.c: 856: (vscp_nickname == vscp_imsg.data[ 0 ])) {
"856
[e $ ! && == -> 3 `i & -> . _vscp_imsg 0 `i -> 15 `i == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 135  ]
{
[; ;vscp_firmware.c: 858: if (vscp_imsg.data[ 1 ] < 0x80) {
"858
[e $ ! < -> *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i -> 128 `i 136  ]
{
[; ;vscp_firmware.c: 861: vscp_omsg.data[ 1 ] =
[; ;vscp_firmware.c: 862: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
"862
[e = *U + &U . _vscp_omsg 4 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_writeAppReg (2 , *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 865: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
"865
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 867: vscp_omsg.priority = 0x03;
"867
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 868: vscp_omsg.flags = 0x80 + 2;
"868
[e = . _vscp_omsg 0 -> + -> 128 `i -> 2 `i `uc ]
[; ;vscp_firmware.c: 869: vscp_omsg.vscp_class = 0;
"869
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 870: vscp_omsg.vscp_type = 10;
"870
[e = . _vscp_omsg 3 -> -> 10 `i `uc ]
[; ;vscp_firmware.c: 873: vscp_sendEvent();
"873
[e ( _vscp_sendEvent ..  ]
"875
}
[; ;vscp_firmware.c: 875: } else {
[e $U 137  ]
[e :U 136 ]
{
[; ;vscp_firmware.c: 878: vscp_omsg.data[ 1 ] =
[; ;vscp_firmware.c: 879: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
"879
[e = *U + &U . _vscp_omsg 4 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_writeStdReg (2 , *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 882: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
"882
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 884: vscp_omsg.priority = 0x03;
"884
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 885: vscp_omsg.flags = 0x80 + 2;
"885
[e = . _vscp_omsg 0 -> + -> 128 `i -> 2 `i `uc ]
[; ;vscp_firmware.c: 886: vscp_omsg.vscp_class = 0;
"886
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 887: vscp_omsg.vscp_type = 10;
"887
[e = . _vscp_omsg 3 -> -> 10 `i `uc ]
[; ;vscp_firmware.c: 890: vscp_sendEvent();
"890
[e ( _vscp_sendEvent ..  ]
"891
}
[e :U 137 ]
"892
}
[e :U 135 ]
[; ;vscp_firmware.c: 891: }
[; ;vscp_firmware.c: 892: }
[; ;vscp_firmware.c: 893: break;
"893
[e $U 124  ]
[; ;vscp_firmware.c: 895: case 12:
"895
[e :U 138 ]
[; ;vscp_firmware.c: 897: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
[; ;vscp_firmware.c: 899: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
[; ;vscp_firmware.c: 900: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
[; ;vscp_firmware.c: 901: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
[; ;vscp_firmware.c: 902: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
[; ;vscp_firmware.c: 903: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
[; ;vscp_firmware.c: 904: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
"904
[e $ ! && && && && && && == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 0 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 3 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 5 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 4 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 7 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 5 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == & >> -> _vscp_page_select `ui -> 8 `i -> -> 255 `i `ui -> *U + &U . _vscp_imsg 5 * -> -> -> 6 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `ui == & -> _vscp_page_select `ui -> -> 255 `i `ui -> *U + &U . _vscp_imsg 5 * -> -> -> 7 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `ui 139  ]
{
[; ;vscp_firmware.c: 906: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
"906
[e ( _vscp_goBootloaderMode (1 *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
"907
}
[e :U 139 ]
[; ;vscp_firmware.c: 907: }
[; ;vscp_firmware.c: 908: break;
"908
[e $U 124  ]
[; ;vscp_firmware.c: 910: case 23:
"910
[e :U 140 ]
[; ;vscp_firmware.c: 912: switch (vscp_imsg.data[ 0 ] >> 4) {
"912
[e $U 142  ]
{
[; ;vscp_firmware.c: 914: case 0:
"914
[e :U 143 ]
[; ;vscp_firmware.c: 915: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
[; ;vscp_firmware.c: 916: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
[; ;vscp_firmware.c: 917: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
[; ;vscp_firmware.c: 918: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
"918
[e $ ! && && && == -> ( _vscp_getGUID (1 -> -> 0 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 1 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 2 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 3 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 4 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 144  ]
{
[; ;vscp_firmware.c: 919: vscp_guid_reset |= 0x10;
"919
[e =| _vscp_guid_reset -> -> 16 `i `uc ]
"920
}
[e :U 144 ]
[; ;vscp_firmware.c: 920: }
[; ;vscp_firmware.c: 921: break;
"921
[e $U 141  ]
[; ;vscp_firmware.c: 923: case 1:
"923
[e :U 145 ]
[; ;vscp_firmware.c: 924: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
[; ;vscp_firmware.c: 925: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
[; ;vscp_firmware.c: 926: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
[; ;vscp_firmware.c: 927: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
"927
[e $ ! && && && == -> ( _vscp_getGUID (1 -> -> 4 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 5 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 6 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 7 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 4 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 146  ]
{
[; ;vscp_firmware.c: 928: vscp_guid_reset |= 0x20;
"928
[e =| _vscp_guid_reset -> -> 32 `i `uc ]
"929
}
[e :U 146 ]
[; ;vscp_firmware.c: 929: }
[; ;vscp_firmware.c: 930: break;
"930
[e $U 141  ]
[; ;vscp_firmware.c: 932: case 2:
"932
[e :U 147 ]
[; ;vscp_firmware.c: 933: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
[; ;vscp_firmware.c: 934: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
[; ;vscp_firmware.c: 935: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
[; ;vscp_firmware.c: 936: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
"936
[e $ ! && && && == -> ( _vscp_getGUID (1 -> -> 8 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 9 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 10 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 11 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 4 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 148  ]
{
[; ;vscp_firmware.c: 937: vscp_guid_reset |= 0x40;
"937
[e =| _vscp_guid_reset -> -> 64 `i `uc ]
"938
}
[e :U 148 ]
[; ;vscp_firmware.c: 938: }
[; ;vscp_firmware.c: 939: break;
"939
[e $U 141  ]
[; ;vscp_firmware.c: 941: case 3:
"941
[e :U 149 ]
[; ;vscp_firmware.c: 942: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
[; ;vscp_firmware.c: 943: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
[; ;vscp_firmware.c: 944: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
[; ;vscp_firmware.c: 945: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
"945
[e $ ! && && && == -> ( _vscp_getGUID (1 -> -> 12 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 13 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 14 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 15 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 4 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 150  ]
{
[; ;vscp_firmware.c: 946: vscp_guid_reset |= 0x80;
"946
[e =| _vscp_guid_reset -> -> 128 `i `uc ]
"947
}
[e :U 150 ]
[; ;vscp_firmware.c: 947: }
[; ;vscp_firmware.c: 948: break;
"948
[e $U 141  ]
[; ;vscp_firmware.c: 950: default:
"950
[e :U 151 ]
[; ;vscp_firmware.c: 951: vscp_guid_reset = 0;
"951
[e = _vscp_guid_reset -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 952: break;
"952
[e $U 141  ]
"953
}
[; ;vscp_firmware.c: 953: }
[e $U 141  ]
"912
[e :U 142 ]
[e [\ >> -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i -> 4 `i , $ -> 0 `i 143
 , $ -> 1 `i 145
 , $ -> 2 `i 147
 , $ -> 3 `i 149
 151 ]
"953
[e :U 141 ]
[; ;vscp_firmware.c: 955: if (0xf0 == (vscp_guid_reset & 0xf0)) {
"955
[e $ ! == -> 240 `i & -> _vscp_guid_reset `i -> 240 `i 152  ]
{
[; ;vscp_firmware.c: 957: vscp_init();
"957
[e ( _vscp_init ..  ]
"958
}
[e :U 152 ]
[; ;vscp_firmware.c: 958: }
[; ;vscp_firmware.c: 959: break;
"959
[e $U 124  ]
[; ;vscp_firmware.c: 961: case 24:
"961
[e :U 153 ]
[; ;vscp_firmware.c: 963: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
"963
[e $ ! == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 154  ]
{
"965
[v _i `uc ~T0 @X0 1 a ]
"966
[v _pos `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 965: uint8_t i;
[; ;vscp_firmware.c: 966: uint8_t pos = 0;
[e = _pos -> -> 0 `i `uc ]
"967
[v _offset `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 967: uint8_t offset = vscp_imsg.data[ 1 ];
[e = _offset *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
"968
[v _len `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 968: uint8_t len = vscp_imsg.data[ 2 ];
[e = _len *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 970: for (i = 0; i < len; i++) {
"970
{
[e = _i -> -> 0 `i `uc ]
[e $U 158  ]
[e :U 155 ]
{
[; ;vscp_firmware.c: 971: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
"971
[e = *U + &U . _vscp_omsg 4 * -> -> + % -> _i `i -> 7 `i -> 1 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_readRegister (1 -> + -> _offset `i -> _i `i `uc ]
[; ;vscp_firmware.c: 973: if ((i % 7) == 6 || i == (len - 1)) {
"973
[e $ ! || == % -> _i `i -> 7 `i -> 6 `i == -> _i `i - -> _len `i -> 1 `i 159  ]
{
"974
[v _bytes `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 974: uint8_t bytes;
[; ;vscp_firmware.c: 976: if ((i % 7) == 6) bytes = 7;
"976
[e $ ! == % -> _i `i -> 7 `i -> 6 `i 160  ]
[e = _bytes -> -> 7 `i `uc ]
[e $U 161  ]
"977
[e :U 160 ]
[; ;vscp_firmware.c: 977: else bytes = (i % 7) + 1;
[e = _bytes -> + % -> _i `i -> 7 `i -> 1 `i `uc ]
[e :U 161 ]
[; ;vscp_firmware.c: 979: vscp_omsg.flags = 0x80 + bytes + 1;
"979
[e = . _vscp_omsg 0 -> + + -> 128 `i -> _bytes `i -> 1 `i `uc ]
[; ;vscp_firmware.c: 980: vscp_omsg.priority = 0x03;
"980
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 981: vscp_omsg.vscp_class = 0;
"981
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 982: vscp_omsg.vscp_type = 26;
"982
[e = . _vscp_omsg 3 -> -> 26 `i `uc ]
[; ;vscp_firmware.c: 983: vscp_omsg.data[ 0 ] = pos;
"983
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux _pos ]
[; ;vscp_firmware.c: 986: vscp_sendEvent();
"986
[e ( _vscp_sendEvent ..  ]
[; ;vscp_firmware.c: 987: pos++;
"987
[e ++ _pos -> -> 1 `i `uc ]
"988
}
[e :U 159 ]
"989
}
"970
[e ++ _i -> -> 1 `i `uc ]
[e :U 158 ]
[e $ < -> _i `i -> _len `i 155  ]
[e :U 156 ]
"989
}
"990
}
[e :U 154 ]
[; ;vscp_firmware.c: 988: }
[; ;vscp_firmware.c: 989: }
[; ;vscp_firmware.c: 990: }
[; ;vscp_firmware.c: 991: break;
"991
[e $U 124  ]
[; ;vscp_firmware.c: 993: case 25:
"993
[e :U 162 ]
[; ;vscp_firmware.c: 995: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
"995
[e $ ! == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 163  ]
{
"996
[v _i `uc ~T0 @X0 1 a ]
"997
[v _pos `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 996: uint8_t i;
[; ;vscp_firmware.c: 997: uint8_t pos = vscp_imsg.data[ 1 ];
[e = _pos *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
"998
[v _len `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 998: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
[e = _len -> & - -> . _vscp_imsg 0 `i -> 2 `i -> 7 `i `uc ]
[; ;vscp_firmware.c: 1000: for (i = 0; i < len; i++) {
"1000
{
[e = _i -> -> 0 `i `uc ]
[e $U 167  ]
[e :U 164 ]
{
[; ;vscp_firmware.c: 1002: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
"1002
[e ( _vscp_writeRegister (2 , -> + -> _pos `i -> _i `i `uc *U + &U . _vscp_imsg 5 * -> -> + -> 2 `i -> _i `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 1003: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
"1003
[e = *U + &U . _vscp_omsg 4 * -> -> + -> 1 `i -> _i `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_readRegister (1 -> + -> _pos `i -> _i `i `uc ]
"1004
}
"1000
[e ++ _i -> -> 1 `i `uc ]
[e :U 167 ]
[e $ < -> _i `i -> _len `i 164  ]
[e :U 165 ]
"1004
}
[; ;vscp_firmware.c: 1004: }
[; ;vscp_firmware.c: 1006: vscp_omsg.priority = 0x03;
"1006
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 1007: vscp_omsg.vscp_class = 0;
"1007
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 1008: vscp_omsg.vscp_type = 26;
"1008
[e = . _vscp_omsg 3 -> -> 26 `i `uc ]
[; ;vscp_firmware.c: 1009: vscp_omsg.data[ 0 ] = 0;
"1009
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 1010: vscp_omsg.flags = 0x80 + len + 1;
"1010
[e = . _vscp_omsg 0 -> + + -> 128 `i -> _len `i -> 1 `i `uc ]
[; ;vscp_firmware.c: 1013: vscp_sendEvent();
"1013
[e ( _vscp_sendEvent ..  ]
"1015
}
[e :U 163 ]
[; ;vscp_firmware.c: 1015: }
[; ;vscp_firmware.c: 1016: break;
"1016
[e $U 124  ]
[; ;vscp_firmware.c: 1018: case 29:
"1018
[e :U 168 ]
[; ;vscp_firmware.c: 1020: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
"1020
[e $ ! == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 169  ]
{
[; ;vscp_firmware.c: 1022: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
[; ;vscp_firmware.c: 1023: vscp_imsg.data[ 1 ],
[; ;vscp_firmware.c: 1024: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
"1024
[e = *U + &U . _vscp_omsg 4 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_writeAppReg (2 , *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux -> + -> ( _vscp_readAppReg (1 *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i -> 1 `i `uc ]
[; ;vscp_firmware.c: 1026: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
"1026
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 1028: vscp_omsg.priority = 0x03;
"1028
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 1029: vscp_omsg.flags = 0x80 + 2;
"1029
[e = . _vscp_omsg 0 -> + -> 128 `i -> 2 `i `uc ]
[; ;vscp_firmware.c: 1030: vscp_omsg.vscp_class = 0;
"1030
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 1031: vscp_omsg.vscp_type = 10;
"1031
[e = . _vscp_omsg 3 -> -> 10 `i `uc ]
[; ;vscp_firmware.c: 1034: vscp_sendEvent();
"1034
[e ( _vscp_sendEvent ..  ]
"1035
}
[e :U 169 ]
[; ;vscp_firmware.c: 1035: }
[; ;vscp_firmware.c: 1036: break;
"1036
[e $U 124  ]
[; ;vscp_firmware.c: 1038: case 30:
"1038
[e :U 170 ]
[; ;vscp_firmware.c: 1040: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
"1040
[e $ ! == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 171  ]
{
[; ;vscp_firmware.c: 1042: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
[; ;vscp_firmware.c: 1043: vscp_imsg.data[ 1 ],
[; ;vscp_firmware.c: 1044: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
"1044
[e = *U + &U . _vscp_omsg 4 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_writeAppReg (2 , *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux -> - -> ( _vscp_readAppReg (1 *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i -> 1 `i `uc ]
[; ;vscp_firmware.c: 1046: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
"1046
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 1048: vscp_omsg.priority = 0x03;
"1048
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 1049: vscp_omsg.flags = 0x80 + 2;
"1049
[e = . _vscp_omsg 0 -> + -> 128 `i -> 2 `i `uc ]
[; ;vscp_firmware.c: 1050: vscp_omsg.vscp_class = 0;
"1050
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 1051: vscp_omsg.vscp_type = 10;
"1051
[e = . _vscp_omsg 3 -> -> 10 `i `uc ]
[; ;vscp_firmware.c: 1054: vscp_sendEvent();
"1054
[e ( _vscp_sendEvent ..  ]
"1055
}
[e :U 171 ]
[; ;vscp_firmware.c: 1055: }
[; ;vscp_firmware.c: 1056: break;
"1056
[e $U 124  ]
[; ;vscp_firmware.c: 1058: case 31:
"1058
[e :U 172 ]
[; ;vscp_firmware.c: 1060: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
[; ;vscp_firmware.c: 1061: (0xff == vscp_imsg.data[ 0 ])) {
"1061
[e $ ! || == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> 255 `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 173  ]
{
"1063
[v _i `uc ~T0 @X0 1 a ]
[v _j `uc ~T0 @X0 1 a ]
[v _k `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 1063: uint8_t i, j, k = 0;
[e = _k -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 1067: vscp_omsg.priority = 0x03;
"1067
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 1068: vscp_omsg.flags = 0x80 + 8;
"1068
[e = . _vscp_omsg 0 -> + -> 128 `i -> 8 `i `uc ]
[; ;vscp_firmware.c: 1069: vscp_omsg.vscp_class = 0;
"1069
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 1070: vscp_omsg.vscp_type = 32;
"1070
[e = . _vscp_omsg 3 -> -> 32 `i `uc ]
[; ;vscp_firmware.c: 1072: for (i = 0; i < 3; i++)
"1072
{
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 3 `i 174  ]
[e $U 175  ]
"1073
[e :U 174 ]
[; ;vscp_firmware.c: 1073: {
{
[; ;vscp_firmware.c: 1074: vscp_omsg.data[0] = i;
"1074
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux _i ]
[; ;vscp_firmware.c: 1076: for (j = 1; j < 8; j++) {
"1076
{
[e = _j -> -> 1 `i `uc ]
[e $ < -> _j `i -> 8 `i 177  ]
[e $U 178  ]
[e :U 177 ]
{
[; ;vscp_firmware.c: 1077: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
"1077
[e = *U + &U . _vscp_omsg 4 * -> _j `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_getGUID (1 -> - -> 15 `i -> ++ _k -> -> 1 `i `uc `i `uc ]
[; ;vscp_firmware.c: 1078: if (k > 16)
"1078
[e $ ! > -> _k `i -> 16 `i 180  ]
[; ;vscp_firmware.c: 1079: break;
"1079
[e $U 178  ]
[e :U 180 ]
"1080
}
"1076
[e ++ _j -> -> 1 `i `uc ]
[e $ < -> _j `i -> 8 `i 177  ]
[e :U 178 ]
"1080
}
[; ;vscp_firmware.c: 1080: }
[; ;vscp_firmware.c: 1082: if (k > 16)
"1082
[e $ ! > -> _k `i -> 16 `i 181  ]
[; ;vscp_firmware.c: 1083: break;
"1083
[e $U 175  ]
[e :U 181 ]
[; ;vscp_firmware.c: 1085: vscp_sendEvent();
"1085
[e ( _vscp_sendEvent ..  ]
"1086
}
"1072
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 3 `i 174  ]
[e :U 175 ]
"1086
}
[; ;vscp_firmware.c: 1086: }
[; ;vscp_firmware.c: 1088: for (j = 0; j < 5; j++)
"1088
{
[e = _j -> -> 0 `i `uc ]
[e $ < -> _j `i -> 5 `i 182  ]
[e $U 183  ]
"1089
[e :U 182 ]
[; ;vscp_firmware.c: 1089: {
{
[; ;vscp_firmware.c: 1090: if (vscp_getMDF_URL(j) > 0)
"1090
[e $ ! > -> ( _vscp_getMDF_URL (1 _j `i -> 0 `i 185  ]
[; ;vscp_firmware.c: 1091: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
"1091
[e = *U + &U . _vscp_omsg 4 * -> -> + -> 3 `i -> _j `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_getMDF_URL (1 _j ]
[e $U 186  ]
"1092
[e :U 185 ]
[; ;vscp_firmware.c: 1092: else
[; ;vscp_firmware.c: 1093: vscp_omsg.data[3 + j] = 0;
"1093
[e = *U + &U . _vscp_omsg 4 * -> -> + -> 3 `i -> _j `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux -> -> 0 `i `uc ]
[e :U 186 ]
"1094
}
"1088
[e ++ _j -> -> 1 `i `uc ]
[e $ < -> _j `i -> 5 `i 182  ]
[e :U 183 ]
"1094
}
[; ;vscp_firmware.c: 1094: }
[; ;vscp_firmware.c: 1096: vscp_sendEvent();
"1096
[e ( _vscp_sendEvent ..  ]
[; ;vscp_firmware.c: 1098: k = 5;
"1098
[e = _k -> -> 5 `i `uc ]
[; ;vscp_firmware.c: 1099: for (i = 3; i < 7; i++)
"1099
{
[e = _i -> -> 3 `i `uc ]
[e $ < -> _i `i -> 7 `i 187  ]
[e $U 188  ]
"1100
[e :U 187 ]
[; ;vscp_firmware.c: 1100: {
{
[; ;vscp_firmware.c: 1101: vscp_omsg.data[0] = i;
"1101
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux _i ]
[; ;vscp_firmware.c: 1103: for (j = 1; j < 8; j++) {
"1103
{
[e = _j -> -> 1 `i `uc ]
[e $ < -> _j `i -> 8 `i 190  ]
[e $U 191  ]
[e :U 190 ]
{
[; ;vscp_firmware.c: 1104: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
"1104
[e = *U + &U . _vscp_omsg 4 * -> _j `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_getMDF_URL (1 ++ _k -> -> 1 `i `uc ]
"1105
}
"1103
[e ++ _j -> -> 1 `i `uc ]
[e $ < -> _j `i -> 8 `i 190  ]
[e :U 191 ]
"1105
}
[; ;vscp_firmware.c: 1105: }
[; ;vscp_firmware.c: 1106: vscp_sendEvent();
"1106
[e ( _vscp_sendEvent ..  ]
"1107
}
"1099
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 7 `i 187  ]
[e :U 188 ]
"1107
}
"1109
}
[e :U 173 ]
[; ;vscp_firmware.c: 1107: }
[; ;vscp_firmware.c: 1109: }
[; ;vscp_firmware.c: 1110: break;
"1110
[e $U 124  ]
[; ;vscp_firmware.c: 1113: case 33:
"1113
[e :U 193 ]
[; ;vscp_firmware.c: 1115: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
"1115
[e $ ! == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 194  ]
{
[; ;vscp_firmware.c: 1117: vscp_omsg.priority = 0x03;
"1117
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 1118: vscp_omsg.flags = 0x80 + 7;
"1118
[e = . _vscp_omsg 0 -> + -> 128 `i -> 7 `i `uc ]
[; ;vscp_firmware.c: 1119: vscp_omsg.vscp_class = 0;
"1119
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 1120: vscp_omsg.vscp_type = 34;
"1120
[e = . _vscp_omsg 3 -> -> 34 `i `uc ]
[; ;vscp_firmware.c: 1122: vscp_getMatrixInfo((char *) vscp_omsg.data);
"1122
[e ( _vscp_getMatrixInfo (1 &U . _vscp_omsg 4 ]
[; ;vscp_firmware.c: 1125: vscp_sendEvent();
"1125
[e ( _vscp_sendEvent ..  ]
"1126
}
[e :U 194 ]
[; ;vscp_firmware.c: 1126: }
[; ;vscp_firmware.c: 1127: break;
"1127
[e $U 124  ]
[; ;vscp_firmware.c: 1136: case 37:
"1136
[e :U 195 ]
[; ;vscp_firmware.c: 1138: if ( vscp_nickname == vscp_imsg.data[0] ) {
"1138
[e $ ! == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 196  ]
{
"1140
[v _page_save `us ~T0 @X0 1 a ]
"1141
[v _byte `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 1140: uint16_t page_save;
[; ;vscp_firmware.c: 1141: uint8_t byte = 0, bytes = 0;
[e = _byte -> -> 0 `i `uc ]
[v _bytes `uc ~T0 @X0 1 a ]
[e = _bytes -> -> 0 `i `uc ]
"1142
[v _bytes_this_time `uc ~T0 @X0 1 a ]
[v _cb `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 1142: uint8_t bytes_this_time, cb;
[; ;vscp_firmware.c: 1146: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
"1146
[e $ ! > & -> . _vscp_imsg 0 `i -> 15 `i -> 3 `i 197  ]
{
[; ;vscp_firmware.c: 1149: bytes = vscp_imsg.data[4];
"1149
[e = _bytes *U + &U . _vscp_imsg 5 * -> -> -> 4 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 1151: if ( 0 == bytes ) {
"1151
[e $ ! == -> 0 `i -> _bytes `i 198  ]
{
[; ;vscp_firmware.c: 1152: bytes = 1;
"1152
[e = _bytes -> -> 1 `i `uc ]
"1153
}
[e :U 198 ]
"1154
}
[; ;vscp_firmware.c: 1153: }
[; ;vscp_firmware.c: 1154: }
[e $U 199  ]
"1155
[e :U 197 ]
[; ;vscp_firmware.c: 1155: else {
{
[; ;vscp_firmware.c: 1156: bytes = 1;
"1156
[e = _bytes -> -> 1 `i `uc ]
"1157
}
[e :U 199 ]
[; ;vscp_firmware.c: 1157: }
[; ;vscp_firmware.c: 1160: page_save = vscp_page_select;
"1160
[e = _page_save _vscp_page_select ]
[; ;vscp_firmware.c: 1165: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]);
"1165
[e = _vscp_page_select -> | << -> *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i -> 8 `i -> *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i `us ]
[; ;vscp_firmware.c: 1168: vscp_omsg.priority = 0x03;
"1168
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 1169: vscp_omsg.vscp_class = 0;
"1169
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 1170: vscp_omsg.vscp_type = 39;
"1170
[e = . _vscp_omsg 3 -> -> 39 `i `uc ]
[; ;vscp_firmware.c: 1171: vscp_omsg.data[0] = 0;
"1171
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 1172: vscp_omsg.data[1] = vscp_imsg.data[1];
"1172
[e = *U + &U . _vscp_omsg 4 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 1173: vscp_omsg.data[2] = vscp_imsg.data[2];
"1173
[e = *U + &U . _vscp_omsg 4 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 1175: do {
"1175
[e :U 202 ]
{
[; ;vscp_firmware.c: 1177: if ( ( bytes - byte ) >= 4 ) {
"1177
[e $ ! >= - -> _bytes `i -> _byte `i -> 4 `i 203  ]
{
[; ;vscp_firmware.c: 1178: bytes_this_time = 4;
"1178
[e = _bytes_this_time -> -> 4 `i `uc ]
"1179
}
[; ;vscp_firmware.c: 1179: }
[e $U 204  ]
"1180
[e :U 203 ]
[; ;vscp_firmware.c: 1180: else {
{
[; ;vscp_firmware.c: 1181: bytes_this_time = (bytes - byte);
"1181
[e = _bytes_this_time -> - -> _bytes `i -> _byte `i `uc ]
"1182
}
[e :U 204 ]
[; ;vscp_firmware.c: 1182: }
[; ;vscp_firmware.c: 1185: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
"1185
[e = . _vscp_omsg 0 -> + + -> 128 `i -> 4 `i -> _bytes_this_time `i `uc ]
[; ;vscp_firmware.c: 1186: vscp_omsg.data[3] =
[; ;vscp_firmware.c: 1187: vscp_imsg.data[3] + byte;
"1187
[e = *U + &U . _vscp_omsg 4 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux -> + -> *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i -> _byte `i `uc ]
[; ;vscp_firmware.c: 1190: for ( cb = 0; cb < bytes_this_time; cb++ ) {
"1190
{
[e = _cb -> -> 0 `i `uc ]
[e $U 208  ]
[e :U 205 ]
{
[; ;vscp_firmware.c: 1191: vscp_omsg.data[ (4 + cb) ] =
[; ;vscp_firmware.c: 1192: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
"1192
[e = *U + &U . _vscp_omsg 4 * -> -> + -> 4 `i -> _cb `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_readRegister (1 -> + + -> *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i -> _byte `i -> _cb `i `uc ]
"1193
}
"1190
[e ++ _cb -> -> 1 `i `uc ]
[e :U 208 ]
[e $ < -> _cb `i -> _bytes_this_time `i 205  ]
[e :U 206 ]
"1193
}
[; ;vscp_firmware.c: 1193: }
[; ;vscp_firmware.c: 1196: vscp_sendEvent();
"1196
[e ( _vscp_sendEvent ..  ]
[; ;vscp_firmware.c: 1199: byte += bytes_this_time;
"1199
[e =+ _byte _bytes_this_time ]
[; ;vscp_firmware.c: 1202: vscp_omsg.data[0] += 1;
"1202
[e =+ *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux -> -> 1 `i `uc ]
"1204
}
[; ;vscp_firmware.c: 1204: } while (byte < bytes);
[e $ < -> _byte `i -> _bytes `i 202  ]
[e :U 201 ]
[; ;vscp_firmware.c: 1207: vscp_page_select = page_save;
"1207
[e = _vscp_page_select _page_save ]
"1209
}
[e :U 196 ]
[; ;vscp_firmware.c: 1209: }
[; ;vscp_firmware.c: 1210: break;
"1210
[e $U 124  ]
[; ;vscp_firmware.c: 1212: case 38:
"1212
[e :U 209 ]
[; ;vscp_firmware.c: 1214: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
"1214
[e $ ! == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 210  ]
{
"1216
[v _i `uc ~T0 @X0 1 a ]
"1217
[v _page_save `us ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 1216: uint8_t i;
[; ;vscp_firmware.c: 1217: uint16_t page_save;
[; ;vscp_firmware.c: 1220: page_save = vscp_page_select;
"1220
[e = _page_save _vscp_page_select ]
[; ;vscp_firmware.c: 1224: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
"1224
[e = _vscp_page_select -> | << -> *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i -> 8 `i -> *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i `us ]
[; ;vscp_firmware.c: 1226: for (i = vscp_imsg.data[ 3 ];
"1226
{
[e = _i *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 1229: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
[; ;vscp_firmware.c: 1230: i++) {
[e $U 214  ]
"1230
[e :U 211 ]
{
[; ;vscp_firmware.c: 1231: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
[; ;vscp_firmware.c: 1232: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ]);
"1232
[e = *U + &U . _vscp_omsg 4 * -> -> + -> 4 `i - -> _i `i -> *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_writeRegister (2 , _i *U + &U . _vscp_imsg 5 * -> -> + -> 4 `i - -> _i `i -> *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
"1233
}
"1230
[e ++ _i -> -> 1 `i `uc ]
"1229
[e :U 214 ]
[e $ < -> _i `i + -> *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i - & -> . _vscp_imsg 0 `i -> 15 `i -> 4 `i 211  ]
[e :U 212 ]
"1233
}
[; ;vscp_firmware.c: 1233: }
[; ;vscp_firmware.c: 1236: vscp_page_select = page_save;
"1236
[e = _vscp_page_select _page_save ]
[; ;vscp_firmware.c: 1238: vscp_omsg.priority = 0x03;
"1238
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 1239: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
"1239
[e = . _vscp_omsg 0 -> + + -> 128 `i -> 4 `i - & -> . _vscp_imsg 0 `i -> 15 `i -> 4 `i `uc ]
[; ;vscp_firmware.c: 1240: vscp_omsg.vscp_class = 0;
"1240
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 1241: vscp_omsg.vscp_type = 39;
"1241
[e = . _vscp_omsg 3 -> -> 39 `i `uc ]
[; ;vscp_firmware.c: 1242: vscp_omsg.data[0] = 0;
"1242
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 1243: vscp_omsg.data[1] = vscp_imsg.data[1];
"1243
[e = *U + &U . _vscp_omsg 4 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 1244: vscp_omsg.data[2] = vscp_imsg.data[2];
"1244
[e = *U + &U . _vscp_omsg 4 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 1245: vscp_omsg.data[3] = vscp_imsg.data[3];
"1245
[e = *U + &U . _vscp_omsg 4 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 1248: vscp_sendEvent();
"1248
[e ( _vscp_sendEvent ..  ]
"1250
}
[e :U 210 ]
[; ;vscp_firmware.c: 1250: }
[; ;vscp_firmware.c: 1251: break;
"1251
[e $U 124  ]
[; ;vscp_firmware.c: 1254: default:
"1254
[e :U 215 ]
[; ;vscp_firmware.c: 1256: break;
"1256
[e $U 124  ]
"1258
}
[; ;vscp_firmware.c: 1258: }
[e $U 124  ]
"791
[e :U 125 ]
[e [\ . _vscp_imsg 3 , $ -> -> 1 `i `uc 126
 , $ -> -> 2 `i `uc 127
 , $ -> -> 6 `i `uc 128
 , $ -> -> 8 `i `uc 129
 , $ -> -> 9 `i `uc 130
 , $ -> -> 11 `i `uc 134
 , $ -> -> 12 `i `uc 138
 , $ -> -> 23 `i `uc 140
 , $ -> -> 24 `i `uc 153
 , $ -> -> 25 `i `uc 162
 , $ -> -> 29 `i `uc 168
 , $ -> -> 30 `i `uc 170
 , $ -> -> 31 `i `uc 172
 , $ -> -> 33 `i `uc 193
 , $ -> -> 37 `i `uc 195
 , $ -> -> 38 `i `uc 209
 215 ]
"1258
[e :U 124 ]
"1260
}
[e :U 123 ]
[; ;vscp_firmware.c: 1260: }
[; ;vscp_firmware.c: 1262: }
"1262
[e :UE 122 ]
}
"1270
[v _vscp_sendEvent `(uc ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 1269: int8_t vscp_sendEvent(void)
[; ;vscp_firmware.c: 1270: {
[e :U _vscp_sendEvent ]
[f ]
"1271
[v _rv `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 1271: int8_t rv;
[; ;vscp_firmware.c: 1273: if ( !(rv = sendVSCPFrame( vscp_omsg.vscp_class,
[; ;vscp_firmware.c: 1274: vscp_omsg.vscp_type,
[; ;vscp_firmware.c: 1275: vscp_nickname,
[; ;vscp_firmware.c: 1276: vscp_omsg.priority,
[; ;vscp_firmware.c: 1277: (vscp_omsg.flags & 0x0f),
[; ;vscp_firmware.c: 1278: vscp_omsg.data ) ) ) {
"1278
[e $ ! ! != -> = _rv ( _sendVSCPFrame (4 , , , , , . _vscp_omsg 2 . _vscp_omsg 3 _vscp_nickname . _vscp_omsg 1 -> & -> . _vscp_omsg 0 `i -> 15 `i `uc &U . _vscp_omsg 4 `i -> -> -> 0 `i `uc `i 217  ]
{
[; ;vscp_firmware.c: 1279: vscp_errorcnt++;
"1279
[e ++ _vscp_errorcnt -> -> 1 `i `uc ]
"1280
}
[e :U 217 ]
[; ;vscp_firmware.c: 1280: }
[; ;vscp_firmware.c: 1282: return rv;
"1282
[e ) _rv ]
[e $UE 216  ]
[; ;vscp_firmware.c: 1283: }
"1283
[e :UE 216 ]
}
"1290
[v _vscp_getEvent `(uc ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 1289: int8_t vscp_getEvent(void)
[; ;vscp_firmware.c: 1290: {
[e :U _vscp_getEvent ]
[f ]
"1291
[v _rv `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 1291: int8_t rv;
[; ;vscp_firmware.c: 1297: if (vscp_imsg.flags & 0x80) return !0;
"1297
[e $ ! != & -> . _vscp_imsg 0 `i -> 128 `i -> 0 `i 219  ]
[e ) -> -> ! != -> 0 `i -> 0 `i `i `uc ]
[e $UE 218  ]
[e :U 219 ]
[; ;vscp_firmware.c: 1300: if ((rv = getVSCPFrame(&vscp_imsg.vscp_class,
[; ;vscp_firmware.c: 1301: &vscp_imsg.vscp_type,
[; ;vscp_firmware.c: 1302: &vscp_imsg.oaddr,
[; ;vscp_firmware.c: 1303: &vscp_imsg.priority,
[; ;vscp_firmware.c: 1304: &vscp_imsg.flags,
[; ;vscp_firmware.c: 1305: vscp_imsg.data))) {
"1305
[e $ ! != -> = _rv ( _getVSCPFrame (4 , , , , , &U . _vscp_imsg 2 &U . _vscp_imsg 3 &U . _vscp_imsg 4 &U . _vscp_imsg 1 &U . _vscp_imsg 0 &U . _vscp_imsg 5 `i -> -> -> 0 `i `uc `i 220  ]
{
[; ;vscp_firmware.c: 1307: vscp_imsg.flags |= 0x80;
"1307
[e =| . _vscp_imsg 0 -> -> 128 `i `uc ]
"1308
}
[e :U 220 ]
[; ;vscp_firmware.c: 1308: }
[; ;vscp_firmware.c: 1310: return rv;
"1310
[e ) _rv ]
[e $UE 218  ]
[; ;vscp_firmware.c: 1312: }
"1312
[e :UE 218 ]
}
