Version 3.2 HI-TECH Software Intermediate Code
"211 ../../../../../vscp_firmware/common/vscp_firmware.h
[s S5 `uc 1 `uc 1 `us 1 `uc 1 `uc 1 `uc -> 8 `i ]
[n S5 _imsg flags priority vscp_class vscp_type oaddr data ]
"236
[s S6 `uc 1 `uc 1 `us 1 `uc 1 `uc -> 8 `i ]
[n S6 _omsg flags priority vscp_class vscp_type data ]
"563
[v _vscp_readNicknamePermanent `(uc ~T0 @X0 0 ef ]
"574
[v _vscp_getSegmentCRC `(uc ~T0 @X0 0 ef ]
"569
[v _vscp_writeNicknamePermanent `(v ~T0 @X0 0 ef1`uc ]
"579
[v _vscp_setSegmentCRC `(v ~T0 @X0 0 ef1`uc ]
"584
[v _vscp_setControlByte `(v ~T0 @X0 0 ef1`uc ]
"445
[v _vscp_sendEvent `(uc ~T0 @X0 0 ef ]
"364
[v _vscp_goActiveState `(v ~T0 @X0 0 ef ]
"653
[v _vscp_getZone `(uc ~T0 @X0 0 ef ]
"660
[v _vscp_getSubzone `(uc ~T0 @X0 0 ef ]
"408
[v _vscp_readStdReg `(uc ~T0 @X0 0 ef1`uc ]
"610
[v _vscp_readAppReg `(uc ~T0 @X0 0 ef1`uc ]
"502
[v _vscp_getMajorVersion `(uc ~T0 @X0 0 ef ]
"503
[v _vscp_getMinorVersion `(uc ~T0 @X0 0 ef ]
"504
[v _vscp_getSubMinorVersion `(uc ~T0 @X0 0 ef ]
"519
[v _vscp_getUserID `(uc ~T0 @X0 0 ef1`uc ]
"535
[v _vscp_getManufacturerId `(uc ~T0 @X0 0 ef1`uc ]
"541
[v _vscp_getBootLoaderAlgorithm `(uc ~T0 @X0 0 ef ]
"546
[v _vscp_getBufferSize `(uc ~T0 @X0 0 ef ]
"551
[v _vscp_getRegisterPagesUsed `(uc ~T0 @X0 0 ef ]
"509
[v _vscp_getGUID `(uc ~T0 @X0 0 ef1`uc ]
"557
[v _vscp_getMDF_URL `(uc ~T0 @X0 0 ef1`uc ]
"424
[v _vscp_writeStdReg `(uc ~T0 @X0 0 ef2`uc`uc ]
"618
[v _vscp_writeAppReg `(uc ~T0 @X0 0 ef2`uc`uc ]
"520
[v _vscp_setUserID `(v ~T0 @X0 0 ef2`uc`uc ]
"536
[v _vscp_setManufacturerId `(v ~T0 @X0 0 ef2`uc`uc ]
"510
[v _vscp_setGUID `(v ~T0 @X0 0 ef2`uc`uc ]
"666
[v _vscp_getFamilyCode `(ul ~T0 @X0 0 ef ]
"672
[v _vscp_getFamilyType `(ul ~T0 @X0 0 ef ]
"680
[v _vscp_restoreDefaults `(v ~T0 @X0 0 ef ]
"647
[v _vscp_goBootloaderMode `(v ~T0 @X0 0 ef ]
"632
[v _vscp_getMatrixInfo `(v ~T0 @X0 0 ef1`*uc ]
"494
[v _sendVSCPFrame `(uc ~T0 @X0 0 ef6`us`uc`uc`uc`uc`*uc ]
"477
[v _getVSCPFrame `(uc ~T0 @X0 0 ef6`*us`*uc`*uc`*uc`*uc`*uc ]
[; ;string.h: 4: typedef int ptrdiff_t;
[; ;string.h: 5: typedef unsigned size_t;
[; ;string.h: 6: typedef unsigned short wchar_t;
[; ;string.h: 9: extern int errno;
[; ;string.h: 22: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 23: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 24: extern void * memset(void *, int, size_t);
[; ;string.h: 35: extern char * strcat(char *, const char *);
[; ;string.h: 36: extern char * strcpy(char *, const char *);
[; ;string.h: 37: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 38: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 39: extern char * strdup(const char *);
[; ;string.h: 40: extern char * strtok(char *, const char *);
[; ;string.h: 43: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 44: extern int strcmp(const char *, const char *);
[; ;string.h: 45: extern int stricmp(const char *, const char *);
[; ;string.h: 46: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 47: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 48: extern void * memchr(const void *, int, size_t);
[; ;string.h: 49: extern size_t strcspn(const char *, const char *);
[; ;string.h: 50: extern char * strpbrk(const char *, const char *);
[; ;string.h: 51: extern size_t strspn(const char *, const char *);
[; ;string.h: 52: extern char * strstr(const char *, const char *);
[; ;string.h: 53: extern char * stristr(const char *, const char *);
[; ;string.h: 54: extern char * strerror(int);
[; ;string.h: 55: extern size_t strlen(const char *);
[; ;string.h: 56: extern char * strchr(const char *, int);
[; ;string.h: 57: extern char * strichr(const char *, int);
[; ;string.h: 58: extern char * strrchr(const char *, int);
[; ;string.h: 59: extern char * strrichr(const char *, int);
[; ;stdlib.h: 27: typedef struct {
[; ;stdlib.h: 28: int rem;
[; ;stdlib.h: 29: int quot;
[; ;stdlib.h: 30: } div_t;
[; ;stdlib.h: 31: typedef struct {
[; ;stdlib.h: 32: unsigned rem;
[; ;stdlib.h: 33: unsigned quot;
[; ;stdlib.h: 34: } udiv_t;
[; ;stdlib.h: 35: typedef struct {
[; ;stdlib.h: 36: long quot;
[; ;stdlib.h: 37: long rem;
[; ;stdlib.h: 38: } ldiv_t;
[; ;stdlib.h: 39: typedef struct {
[; ;stdlib.h: 40: unsigned long quot;
[; ;stdlib.h: 41: unsigned long rem;
[; ;stdlib.h: 42: } uldiv_t;
[; ;stdlib.h: 65: extern double atof(const char *);
[; ;stdlib.h: 66: extern double strtod(const char *, const char **);
[; ;stdlib.h: 67: extern int atoi(const char *);
[; ;stdlib.h: 68: extern unsigned xtoi(const char *);
[; ;stdlib.h: 69: extern long atol(const char *);
[; ;stdlib.h: 70: extern long strtol(const char *, char **, int);
[; ;stdlib.h: 72: extern int rand(void);
[; ;stdlib.h: 73: extern void srand(unsigned int);
[; ;stdlib.h: 74: extern void * calloc(size_t, size_t);
[; ;stdlib.h: 75: extern div_t div(int numer, int denom);
[; ;stdlib.h: 76: extern udiv_t udiv(unsigned numer, unsigned denom);
[; ;stdlib.h: 77: extern ldiv_t ldiv(long numer, long denom);
[; ;stdlib.h: 78: extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
[; ;stdlib.h: 79: extern unsigned long _lrotl(unsigned long value, unsigned int shift);
[; ;stdlib.h: 80: extern unsigned long _lrotr(unsigned long value, unsigned int shift);
[; ;stdlib.h: 81: extern unsigned int _rotl(unsigned int value, unsigned int shift);
[; ;stdlib.h: 82: extern unsigned int _rotr(unsigned int value, unsigned int shift);
[; ;stdlib.h: 87: extern void * malloc(size_t);
[; ;stdlib.h: 88: extern void free(void *);
[; ;stdlib.h: 89: extern void * realloc(void *, size_t);
[; ;stdlib.h: 91: extern void abort(void);
[; ;stdlib.h: 92: extern void exit(int);
[; ;stdlib.h: 93: extern int atexit(void (*)(void));
[; ;stdlib.h: 94: extern char * getenv(const char *);
[; ;stdlib.h: 95: extern char ** environ;
[; ;stdlib.h: 96: extern int system(char *);
[; ;stdlib.h: 97: extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
[; ;stdlib.h: 98: extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
[; ;stdlib.h: 99: extern int abs(int);
[; ;stdlib.h: 100: extern long labs(long);
[; ;stdlib.h: 103: extern char * itoa(char * buf, int val, int base);
[; ;stdlib.h: 104: extern char * utoa(char * buf, unsigned val, int base);
[; ;stdlib.h: 109: extern char * ltoa(char * buf, long val, int base);
[; ;stdlib.h: 110: extern char * ultoa(char * buf, unsigned long val, int base);
[; ;stdlib.h: 112: extern char * ftoa(float f, int * status);
[; ;common\inttypes.h: 34: typedef long long int64_t;
[; ;common\inttypes.h: 39: typedef long int32_t;
[; ;common\inttypes.h: 43: typedef short int16_t;
[; ;common\inttypes.h: 47: typedef char int8_t;
[; ;common\inttypes.h: 52: typedef unsigned long long uint64_t;
[; ;common\inttypes.h: 57: typedef unsigned long uint32_t;
[; ;common\inttypes.h: 61: typedef unsigned short uint16_t;
[; ;common\inttypes.h: 65: typedef unsigned char uint8_t;
[; ;vscp_firmware.h: 192: struct _imsg {
[; ;vscp_firmware.h: 204: uint8_t flags;
[; ;vscp_firmware.h: 206: uint8_t priority;
[; ;vscp_firmware.h: 207: uint16_t vscp_class;
[; ;vscp_firmware.h: 208: uint8_t vscp_type;
[; ;vscp_firmware.h: 209: uint8_t oaddr;
[; ;vscp_firmware.h: 210: uint8_t data[8];
[; ;vscp_firmware.h: 211: };
[; ;vscp_firmware.h: 217: struct _omsg {
[; ;vscp_firmware.h: 229: uint8_t flags;
[; ;vscp_firmware.h: 231: uint8_t priority;
[; ;vscp_firmware.h: 232: uint16_t vscp_class;
[; ;vscp_firmware.h: 233: uint8_t vscp_type;
[; ;vscp_firmware.h: 235: uint8_t data[8];
[; ;vscp_firmware.h: 236: };
[; ;vscp_firmware.h: 283: struct _dmrow {
[; ;vscp_firmware.h: 284: uint8_t oaddr;
[; ;vscp_firmware.h: 285: uint8_t flags;
[; ;vscp_firmware.h: 286: uint8_t class_mask;
[; ;vscp_firmware.h: 287: uint8_t class_filter;
[; ;vscp_firmware.h: 288: uint8_t type_mask;
[; ;vscp_firmware.h: 289: uint8_t type_filter;
[; ;vscp_firmware.h: 290: uint8_t action;
[; ;vscp_firmware.h: 291: uint8_t action_param;
[; ;vscp_firmware.h: 292: };
[; ;vscp_firmware.h: 297: extern uint8_t vscp_nickname;
[; ;vscp_firmware.h: 298: extern uint8_t vscp_errorcnt;
[; ;vscp_firmware.h: 299: extern uint8_t vscp_alarmstatus;
[; ;vscp_firmware.h: 300: extern uint8_t vscp_node_state;
[; ;vscp_firmware.h: 301: extern uint8_t vscp_node_substate;
[; ;vscp_firmware.h: 302: extern uint8_t vscp_initledfunc;
[; ;vscp_firmware.h: 304: extern struct _imsg vscp_imsg;
[; ;vscp_firmware.h: 305: extern struct _omsg vscp_omsg;
[; ;vscp_firmware.h: 306: extern volatile uint16_t vscp_timer;
[; ;vscp_firmware.h: 307: extern uint8_t vscp_probe_address;
[; ;vscp_firmware.h: 308: extern volatile uint8_t vscp_initbtncnt;
[; ;vscp_firmware.h: 309: extern volatile uint8_t vscp_statuscnt;
[; ;vscp_firmware.h: 310: extern uint16_t vscp_page_select;
[; ;vscp_firmware.h: 312: extern const uint8_t vscp_deviceURL[];
[; ;vscp_firmware.h: 322: void vscp_init(void);
[; ;vscp_firmware.h: 328: void vscp_error(void);
[; ;vscp_firmware.h: 336: void vscp_handleProbeState(void);
[; ;vscp_firmware.h: 349: void vscp_handlePreActiveState(void);
[; ;vscp_firmware.h: 356: void vscp_handleProtocolEvent(void);
[; ;vscp_firmware.h: 364: void vscp_goActiveState(void);
[; ;vscp_firmware.h: 374: void vscp_sendHeartBeat(uint8_t zone, uint8_t subzone);
[; ;vscp_firmware.h: 379: void vscp_handleHeartbeat(void);
[; ;vscp_firmware.h: 384: void vscp_handleSetNickname(void);
[; ;vscp_firmware.h: 389: void vscp_handleDropNickname(void);
[; ;vscp_firmware.h: 394: void vscp_newNodeOnline(void);
[; ;vscp_firmware.h: 401: uint8_t vscp_readRegister(uint8_t reg);
[; ;vscp_firmware.h: 408: uint8_t vscp_readStdReg(uint8_t reg);
[; ;vscp_firmware.h: 416: uint8_t vscp_writeRegister(uint8_t reg, uint8_t value);
[; ;vscp_firmware.h: 424: uint8_t vscp_writeStdReg(uint8_t reg, uint8_t value);
[; ;vscp_firmware.h: 432: void vscp_doOneSecondWork(void);
[; ;vscp_firmware.h: 437: int8_t vscp_check_pstorage(void);
[; ;vscp_firmware.h: 445: int8_t vscp_sendEvent(void);
[; ;vscp_firmware.h: 451: int8_t vscp_getEvent(void);
[; ;vscp_firmware.h: 472: int8_t getVSCPFrame(uint16_t *pvscpclass,
[; ;vscp_firmware.h: 473: uint8_t *pvscptype,
[; ;vscp_firmware.h: 474: uint8_t *pNodeId,
[; ;vscp_firmware.h: 475: uint8_t *pPriority,
[; ;vscp_firmware.h: 476: uint8_t *pSize,
[; ;vscp_firmware.h: 477: uint8_t *pData);
[; ;vscp_firmware.h: 489: int8_t sendVSCPFrame(uint16_t vscpclass,
[; ;vscp_firmware.h: 490: uint8_t vscptype,
[; ;vscp_firmware.h: 491: uint8_t nodeid,
[; ;vscp_firmware.h: 492: uint8_t priority,
[; ;vscp_firmware.h: 493: uint8_t size,
[; ;vscp_firmware.h: 494: uint8_t *pData);
[; ;vscp_firmware.h: 502: uint8_t vscp_getMajorVersion(void);
[; ;vscp_firmware.h: 503: uint8_t vscp_getMinorVersion(void);
[; ;vscp_firmware.h: 504: uint8_t vscp_getSubMinorVersion(void);
[; ;vscp_firmware.h: 509: uint8_t vscp_getGUID(uint8_t idx);
[; ;vscp_firmware.h: 510: void vscp_setGUID(uint8_t idx, uint8_t data);
[; ;vscp_firmware.h: 519: uint8_t vscp_getUserID(uint8_t idx);
[; ;vscp_firmware.h: 520: void vscp_setUserID(uint8_t idx, uint8_t data);
[; ;vscp_firmware.h: 535: uint8_t vscp_getManufacturerId(uint8_t idx);
[; ;vscp_firmware.h: 536: void vscp_setManufacturerId(uint8_t idx, uint8_t data);
[; ;vscp_firmware.h: 541: uint8_t vscp_getBootLoaderAlgorithm(void);
[; ;vscp_firmware.h: 546: uint8_t vscp_getBufferSize(void);
[; ;vscp_firmware.h: 551: uint8_t vscp_getRegisterPagesUsed(void);
[; ;vscp_firmware.h: 557: uint8_t vscp_getMDF_URL(uint8_t idx);
[; ;vscp_firmware.h: 563: uint8_t vscp_readNicknamePermanent(void);
[; ;vscp_firmware.h: 569: void vscp_writeNicknamePermanent(uint8_t nickname);
[; ;vscp_firmware.h: 574: uint8_t vscp_getSegmentCRC(void);
[; ;vscp_firmware.h: 579: void vscp_setSegmentCRC(uint8_t crc);
[; ;vscp_firmware.h: 584: void vscp_setControlByte(uint8_t ctrl);
[; ;vscp_firmware.h: 589: uint8_t vscp_getControlByte(void);
[; ;vscp_firmware.h: 596: uint8_t vscp_getPageSelect(uint8_t idx);
[; ;vscp_firmware.h: 603: void vscp_setPageSelect(uint8_t idx, uint8_t data);
[; ;vscp_firmware.h: 610: uint8_t vscp_readAppReg(uint8_t reg);
[; ;vscp_firmware.h: 618: uint8_t vscp_writeAppReg(uint8_t reg, uint8_t value);
[; ;vscp_firmware.h: 632: void vscp_getMatrixInfo(char *pData);
[; ;vscp_firmware.h: 640: void vscp_getEmbeddedMdfInfo(void);
[; ;vscp_firmware.h: 647: void vscp_goBootloaderMode(void);
[; ;vscp_firmware.h: 653: uint8_t vscp_getZone(void);
[; ;vscp_firmware.h: 660: uint8_t vscp_getSubzone(void);
[; ;vscp_firmware.h: 666: uint32_t vscp_getFamilyCode(void);
[; ;vscp_firmware.h: 672: uint32_t vscp_getFamilyType(void);
[; ;vscp_firmware.h: 680: void vscp_restoreDefaults(void);
"60 ../../../../../vscp_firmware/common/vscp_firmware.c
[v _vscp_nickname `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 60: uint8_t vscp_nickname;
"62
[v _vscp_errorcnt `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 62: uint8_t vscp_errorcnt;
"63
[v _vscp_alarmstatus `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 63: uint8_t vscp_alarmstatus;
"65
[v _vscp_node_state `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 65: uint8_t vscp_node_state;
"66
[v _vscp_node_substate `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 66: uint8_t vscp_node_substate;
"68
[v _vscp_probe_cnt `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 68: uint8_t vscp_probe_cnt;
"71
[v _vscp_imsg `S5 ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 71: struct _imsg vscp_imsg;
"74
[v _vscp_omsg `S6 ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 74: struct _omsg vscp_omsg;
"76
[v _vscp_probe_address `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 76: uint8_t vscp_probe_address;
"77
[v _vscp_initledfunc `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 77: uint8_t vscp_initledfunc;
"79
[v _vscp_timer `Vus ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 79: volatile uint16_t vscp_timer;
"82
[v _vscp_initbtncnt `Vuc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 82: volatile uint8_t vscp_initbtncnt;
"87
[v _vscp_statuscnt `Vuc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 87: volatile uint8_t vscp_statuscnt;
"90
[v _vscp_configtimer `Vus ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 90: volatile uint16_t vscp_configtimer;
"94
[v _vscp_page_select `us ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 94: uint16_t vscp_page_select;
"101
[v _vscp_guid_reset `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 101: uint8_t vscp_guid_reset;
"104
[v _vscp_second `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 104: uint8_t vscp_second;
"105
[v _vscp_minute `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 105: uint8_t vscp_minute;
"106
[v _vscp_hour `uc ~T0 @X0 1 e ]
[; ;vscp_firmware.c: 106: uint8_t vscp_hour;
"114
[v _vscp_init `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 113: void vscp_init(void)
[; ;vscp_firmware.c: 114: {
[e :U _vscp_init ]
[f ]
[; ;vscp_firmware.c: 115: vscp_initledfunc = 0x02;
"115
[e = _vscp_initledfunc -> -> 2 `i `uc ]
[; ;vscp_firmware.c: 118: vscp_nickname = vscp_readNicknamePermanent();
"118
[e = _vscp_nickname ( _vscp_readNicknamePermanent ..  ]
[; ;vscp_firmware.c: 121: if (!vscp_nickname) vscp_nickname = 0xff;
"121
[e $ ! ! != -> _vscp_nickname `i -> -> -> 0 `i `uc `i 9  ]
[e = _vscp_nickname -> -> 255 `i `uc ]
[e :U 9 ]
[; ;vscp_firmware.c: 124: vscp_imsg.flags = 0;
"124
[e = . _vscp_imsg 0 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 125: vscp_imsg.priority = 0;
"125
[e = . _vscp_imsg 1 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 126: vscp_imsg.vscp_class = 0;
"126
[e = . _vscp_imsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 127: vscp_imsg.vscp_type = 0;
"127
[e = . _vscp_imsg 3 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 130: vscp_omsg.flags = 0;
"130
[e = . _vscp_omsg 0 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 131: vscp_omsg.priority = 0;
"131
[e = . _vscp_omsg 1 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 132: vscp_omsg.vscp_class = 0;
"132
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 133: vscp_omsg.vscp_type = 0;
"133
[e = . _vscp_omsg 3 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 135: vscp_errorcnt = 0;
"135
[e = _vscp_errorcnt -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 136: vscp_alarmstatus = 0;
"136
[e = _vscp_alarmstatus -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 138: vscp_probe_address = 0;
"138
[e = _vscp_probe_address -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 141: vscp_node_state = 0x00;
"141
[e = _vscp_node_state -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 142: vscp_node_substate = 0x00;
"142
[e = _vscp_node_substate -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 144: vscp_probe_cnt = 0;
"144
[e = _vscp_probe_cnt -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 145: vscp_page_select = 0;
"145
[e = _vscp_page_select -> -> 0 `i `us ]
[; ;vscp_firmware.c: 148: vscp_timer = 0;
"148
[e = _vscp_timer -> -> 0 `i `us ]
[; ;vscp_firmware.c: 149: vscp_configtimer = 0;
"149
[e = _vscp_configtimer -> -> 0 `i `us ]
[; ;vscp_firmware.c: 150: vscp_second = 0;
"150
[e = _vscp_second -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 151: vscp_minute = 0;
"151
[e = _vscp_minute -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 152: vscp_hour = 0;
"152
[e = _vscp_hour -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 153: }
"153
[e :UE 8 ]
}
"163
[v _vscp_check_pstorage `(uc ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 162: int8_t vscp_check_pstorage(void)
[; ;vscp_firmware.c: 163: {
[e :U _vscp_check_pstorage ]
[f ]
[; ;vscp_firmware.c: 166: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
"166
[e $ ! == & -> ( _vscp_getSegmentCRC ..  `i -> 192 `i -> 64 `i 11  ]
{
[; ;vscp_firmware.c: 167: return !0;
"167
[e ) -> -> ! != -> 0 `i -> 0 `i `i `uc ]
[e $UE 10  ]
"168
}
[e :U 11 ]
[; ;vscp_firmware.c: 168: }
[; ;vscp_firmware.c: 171: vscp_writeNicknamePermanent(0xff);
"171
[e ( _vscp_writeNicknamePermanent (1 -> -> 255 `i `uc ]
[; ;vscp_firmware.c: 174: vscp_setSegmentCRC(0x00);
"174
[e ( _vscp_setSegmentCRC (1 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 178: vscp_setControlByte(0xA0);
"178
[e ( _vscp_setControlByte (1 -> -> 160 `i `uc ]
[; ;vscp_firmware.c: 180: return 0;
"180
[e ) -> -> 0 `i `uc ]
[e $UE 10  ]
[; ;vscp_firmware.c: 181: }
"181
[e :UE 10 ]
}
"188
[v _vscp_error `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 187: void vscp_error(void)
[; ;vscp_firmware.c: 188: {
[e :U _vscp_error ]
[f ]
[; ;vscp_firmware.c: 189: vscp_initledfunc = 0x00;
"189
[e = _vscp_initledfunc -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 190: }
"190
[e :UE 12 ]
}
"197
[v _vscp_handleProbeState `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 196: void vscp_handleProbeState(void)
[; ;vscp_firmware.c: 197: {
[e :U _vscp_handleProbeState ]
[f ]
[; ;vscp_firmware.c: 198: switch (vscp_node_substate) {
"198
[e $U 15  ]
{
[; ;vscp_firmware.c: 200: case 0x00:
"200
[e :U 16 ]
[; ;vscp_firmware.c: 202: if (0xff != vscp_probe_address) {
"202
[e $ ! != -> 255 `i -> _vscp_probe_address `i 17  ]
{
[; ;vscp_firmware.c: 204: vscp_omsg.flags = 0x80 + 1;
"204
[e = . _vscp_omsg 0 -> + -> 128 `i -> 1 `i `uc ]
[; ;vscp_firmware.c: 205: vscp_omsg.priority = 0x00;
"205
[e = . _vscp_omsg 1 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 206: vscp_omsg.vscp_class = 0;
"206
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 207: vscp_omsg.vscp_type = 2;
"207
[e = . _vscp_omsg 3 -> -> 2 `i `uc ]
[; ;vscp_firmware.c: 208: vscp_omsg.data[ 0 ] = vscp_probe_address;
"208
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux _vscp_probe_address ]
[; ;vscp_firmware.c: 211: vscp_sendEvent();
"211
[e ( _vscp_sendEvent ..  ]
[; ;vscp_firmware.c: 213: vscp_node_substate = 0x01;
"213
[e = _vscp_node_substate -> -> 1 `i `uc ]
[; ;vscp_firmware.c: 214: vscp_timer = 0;
"214
[e = _vscp_timer -> -> 0 `i `us ]
"216
}
[; ;vscp_firmware.c: 216: } else {
[e $U 18  ]
[e :U 17 ]
{
[; ;vscp_firmware.c: 219: vscp_node_state = 0x04;
"219
[e = _vscp_node_state -> -> 4 `i `uc ]
[; ;vscp_firmware.c: 222: vscp_omsg.flags = 0x80 + 1;
"222
[e = . _vscp_omsg 0 -> + -> 128 `i -> 1 `i `uc ]
[; ;vscp_firmware.c: 223: vscp_omsg.data[ 0 ] = 0xff;
"223
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux -> -> 255 `i `uc ]
[; ;vscp_firmware.c: 224: vscp_omsg.priority = 0x07;
"224
[e = . _vscp_omsg 1 -> -> 7 `i `uc ]
[; ;vscp_firmware.c: 225: vscp_omsg.vscp_class = 0;
"225
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 226: vscp_omsg.vscp_type = 3;
"226
[e = . _vscp_omsg 3 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 229: vscp_sendEvent();
"229
[e ( _vscp_sendEvent ..  ]
"231
}
[e :U 18 ]
[; ;vscp_firmware.c: 231: }
[; ;vscp_firmware.c: 232: break;
"232
[e $U 14  ]
[; ;vscp_firmware.c: 234: case 0x01:
"234
[e :U 19 ]
[; ;vscp_firmware.c: 236: if (vscp_imsg.flags & 0x80) {
"236
[e $ ! != & -> . _vscp_imsg 0 `i -> 128 `i -> 0 `i 20  ]
{
[; ;vscp_firmware.c: 239: if ((0 == vscp_imsg.vscp_class) &&
[; ;vscp_firmware.c: 240: (3 == vscp_imsg.vscp_type)) {
"240
[e $ ! && == -> -> 0 `i `ui -> . _vscp_imsg 2 `ui == -> 3 `i -> . _vscp_imsg 3 `i 21  ]
{
[; ;vscp_firmware.c: 243: if (0 == vscp_probe_address) {
"243
[e $ ! == -> 0 `i -> _vscp_probe_address `i 22  ]
{
[; ;vscp_firmware.c: 247: vscp_node_state = 0x02;
"247
[e = _vscp_node_state -> -> 2 `i `uc ]
[; ;vscp_firmware.c: 248: vscp_timer = 0;
"248
[e = _vscp_timer -> -> 0 `i `us ]
"250
}
[; ;vscp_firmware.c: 250: } else {
[e $U 23  ]
[e :U 22 ]
{
[; ;vscp_firmware.c: 253: vscp_probe_address++;
"253
[e ++ _vscp_probe_address -> -> 1 `i `uc ]
[; ;vscp_firmware.c: 254: vscp_node_substate = 0x00;
"254
[e = _vscp_node_substate -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 255: vscp_probe_cnt = 0;
"255
[e = _vscp_probe_cnt -> -> 0 `i `uc ]
"257
}
[e :U 23 ]
"258
}
[e :U 21 ]
"259
}
[; ;vscp_firmware.c: 257: }
[; ;vscp_firmware.c: 258: }
[; ;vscp_firmware.c: 259: } else {
[e $U 24  ]
[e :U 20 ]
{
[; ;vscp_firmware.c: 261: if (vscp_timer > 1000) {
"261
[e $ ! > -> _vscp_timer `ui -> -> 1000 `i `ui 25  ]
{
[; ;vscp_firmware.c: 263: vscp_probe_cnt++;
"263
[e ++ _vscp_probe_cnt -> -> 1 `i `uc ]
[; ;vscp_firmware.c: 265: if (vscp_probe_cnt >= 3) {
"265
[e $ ! >= -> _vscp_probe_cnt `i -> 3 `i 26  ]
{
[; ;vscp_firmware.c: 268: if (0 == vscp_probe_address) {
"268
[e $ ! == -> 0 `i -> _vscp_probe_address `i 27  ]
{
[; ;vscp_firmware.c: 271: vscp_probe_address++;
"271
[e ++ _vscp_probe_address -> -> 1 `i `uc ]
[; ;vscp_firmware.c: 272: vscp_node_substate = 0x00;
"272
[e = _vscp_node_substate -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 273: vscp_timer = 0;
"273
[e = _vscp_timer -> -> 0 `i `us ]
[; ;vscp_firmware.c: 274: vscp_probe_cnt = 0;
"274
[e = _vscp_probe_cnt -> -> 0 `i `uc ]
"276
}
[; ;vscp_firmware.c: 276: } else {
[e $U 28  ]
[e :U 27 ]
{
[; ;vscp_firmware.c: 279: vscp_nickname = vscp_probe_address;
"279
[e = _vscp_nickname _vscp_probe_address ]
[; ;vscp_firmware.c: 280: vscp_node_state = 0x03;
"280
[e = _vscp_node_state -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 281: vscp_node_substate = 0x00;
"281
[e = _vscp_node_substate -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 282: vscp_writeNicknamePermanent(vscp_nickname);
"282
[e ( _vscp_writeNicknamePermanent (1 _vscp_nickname ]
[; ;vscp_firmware.c: 283: vscp_setSegmentCRC(0x40);
"283
[e ( _vscp_setSegmentCRC (1 -> -> 64 `i `uc ]
[; ;vscp_firmware.c: 286: vscp_probe_cnt = 0;
"286
[e = _vscp_probe_cnt -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 287: vscp_goActiveState();
"287
[e ( _vscp_goActiveState ..  ]
"289
}
[e :U 28 ]
"290
}
[; ;vscp_firmware.c: 289: }
[; ;vscp_firmware.c: 290: } else {
[e $U 29  ]
[e :U 26 ]
{
[; ;vscp_firmware.c: 291: vscp_node_substate = 0x00;
"291
[e = _vscp_node_substate -> -> 0 `i `uc ]
"292
}
[e :U 29 ]
"293
}
[e :U 25 ]
"295
}
[e :U 24 ]
[; ;vscp_firmware.c: 292: }
[; ;vscp_firmware.c: 293: }
[; ;vscp_firmware.c: 295: }
[; ;vscp_firmware.c: 296: break;
"296
[e $U 14  ]
[; ;vscp_firmware.c: 298: case 0x02:
"298
[e :U 30 ]
[; ;vscp_firmware.c: 299: break;
"299
[e $U 14  ]
[; ;vscp_firmware.c: 301: default:
"301
[e :U 31 ]
[; ;vscp_firmware.c: 302: vscp_node_substate = 0x00;
"302
[e = _vscp_node_substate -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 303: break;
"303
[e $U 14  ]
"304
}
[; ;vscp_firmware.c: 304: }
[e $U 14  ]
"198
[e :U 15 ]
[e [\ _vscp_node_substate , $ -> -> 0 `i `uc 16
 , $ -> -> 1 `i `uc 19
 , $ -> -> 2 `i `uc 30
 31 ]
"304
[e :U 14 ]
[; ;vscp_firmware.c: 306: vscp_imsg.flags = 0;
"306
[e = . _vscp_imsg 0 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 308: }
"308
[e :UE 13 ]
}
"315
[v _vscp_handlePreActiveState `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 314: void vscp_handlePreActiveState(void)
[; ;vscp_firmware.c: 315: {
[e :U _vscp_handlePreActiveState ]
[f ]
[; ;vscp_firmware.c: 317: if ( vscp_imsg.flags & 0x80 ) {
"317
[e $ ! != & -> . _vscp_imsg 0 `i -> 128 `i -> 0 `i 33  ]
{
[; ;vscp_firmware.c: 319: if ((0 == vscp_imsg.vscp_class) &&
[; ;vscp_firmware.c: 320: (6 == vscp_imsg.vscp_type) &&
[; ;vscp_firmware.c: 321: (0xff == vscp_imsg.data[ 0 ])) {
"321
[e $ ! && && == -> -> 0 `i `ui -> . _vscp_imsg 2 `ui == -> 6 `i -> . _vscp_imsg 3 `i == -> 255 `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 34  ]
{
[; ;vscp_firmware.c: 324: vscp_nickname = vscp_imsg.data[ 1 ];
"324
[e = _vscp_nickname *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 325: vscp_writeNicknamePermanent(vscp_nickname);
"325
[e ( _vscp_writeNicknamePermanent (1 _vscp_nickname ]
[; ;vscp_firmware.c: 326: vscp_setSegmentCRC(0x40);
"326
[e ( _vscp_setSegmentCRC (1 -> -> 64 `i `uc ]
[; ;vscp_firmware.c: 329: vscp_node_state = 0x03;
"329
[e = _vscp_node_state -> -> 3 `i `uc ]
"330
}
[e :U 34 ]
"331
}
[; ;vscp_firmware.c: 330: }
[; ;vscp_firmware.c: 331: } else {
[e $U 35  ]
[e :U 33 ]
{
[; ;vscp_firmware.c: 333: if (vscp_timer > 1000) {
"333
[e $ ! > -> _vscp_timer `ui -> -> 1000 `i `ui 36  ]
{
[; ;vscp_firmware.c: 335: vscp_nickname = 0xff;
"335
[e = _vscp_nickname -> -> 255 `i `uc ]
[; ;vscp_firmware.c: 336: vscp_writeNicknamePermanent(0xff);
"336
[e ( _vscp_writeNicknamePermanent (1 -> -> 255 `i `uc ]
[; ;vscp_firmware.c: 337: vscp_init();
"337
[e ( _vscp_init ..  ]
"338
}
[e :U 36 ]
"339
}
[e :U 35 ]
[; ;vscp_firmware.c: 338: }
[; ;vscp_firmware.c: 339: }
[; ;vscp_firmware.c: 340: }
"340
[e :UE 32 ]
}
"347
[v _vscp_goActiveState `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 346: void vscp_goActiveState(void)
[; ;vscp_firmware.c: 347: {
[e :U _vscp_goActiveState ]
[f ]
[; ;vscp_firmware.c: 348: vscp_omsg.flags = 0x80 + 1;
"348
[e = . _vscp_omsg 0 -> + -> 128 `i -> 1 `i `uc ]
[; ;vscp_firmware.c: 349: vscp_omsg.priority = 0x00;
"349
[e = . _vscp_omsg 1 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 350: vscp_omsg.vscp_class = 0;
"350
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 351: vscp_omsg.vscp_type = 2;
"351
[e = . _vscp_omsg 3 -> -> 2 `i `uc ]
[; ;vscp_firmware.c: 352: vscp_omsg.data[ 0 ] = vscp_nickname;
"352
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux _vscp_nickname ]
[; ;vscp_firmware.c: 355: vscp_sendEvent();
"355
[e ( _vscp_sendEvent ..  ]
[; ;vscp_firmware.c: 357: vscp_initledfunc = 0x01;
"357
[e = _vscp_initledfunc -> -> 1 `i `uc ]
[; ;vscp_firmware.c: 358: }
"358
[e :UE 37 ]
}
"367
[v _vscp_sendHeartBeat `(v ~T0 @X0 1 ef2`uc`uc ]
{
[; ;vscp_firmware.c: 366: void vscp_sendHeartBeat(uint8_t zone, uint8_t subzone)
[; ;vscp_firmware.c: 367: {
[e :U _vscp_sendHeartBeat ]
[v _zone `uc ~T0 @X0 1 r1 ]
[v _subzone `uc ~T0 @X0 1 r2 ]
[f ]
[; ;vscp_firmware.c: 368: vscp_omsg.flags = 0x80 + 3;
"368
[e = . _vscp_omsg 0 -> + -> 128 `i -> 3 `i `uc ]
[; ;vscp_firmware.c: 369: vscp_omsg.priority = 0x07;
"369
[e = . _vscp_omsg 1 -> -> 7 `i `uc ]
[; ;vscp_firmware.c: 370: vscp_omsg.vscp_class = 20;
"370
[e = . _vscp_omsg 2 -> -> 20 `i `us ]
[; ;vscp_firmware.c: 371: vscp_omsg.vscp_type = 9;
"371
[e = . _vscp_omsg 3 -> -> 9 `i `uc ]
[; ;vscp_firmware.c: 372: vscp_omsg.data[ 0 ] = 0;
"372
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 373: vscp_omsg.data[ 1 ] = zone;
"373
[e = *U + &U . _vscp_omsg 4 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux _zone ]
[; ;vscp_firmware.c: 374: vscp_omsg.data[ 2 ] = subzone;
"374
[e = *U + &U . _vscp_omsg 4 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux _subzone ]
[; ;vscp_firmware.c: 377: vscp_sendEvent();
"377
[e ( _vscp_sendEvent ..  ]
[; ;vscp_firmware.c: 378: }
"378
[e :UE 38 ]
}
"385
[v _vscp_handleHeartbeat `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 384: void vscp_handleHeartbeat(void)
[; ;vscp_firmware.c: 385: {
[e :U _vscp_handleHeartbeat ]
[f ]
[; ;vscp_firmware.c: 386: if ( !vscp_getSegmentCRC() ) {
"386
[e $ ! ! != -> ( _vscp_getSegmentCRC ..  `i -> -> -> 0 `i `uc `i 40  ]
{
[; ;vscp_firmware.c: 387: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
[; ;vscp_firmware.c: 388: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
"388
[e $ ! && == -> 5 `i & -> . _vscp_imsg 0 `i -> 15 `i != -> ( _vscp_getSegmentCRC ..  `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 41  ]
{
[; ;vscp_firmware.c: 392: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
"392
[e ( _vscp_setSegmentCRC (1 *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 395: vscp_nickname = 0xff;
"395
[e = _vscp_nickname -> -> 255 `i `uc ]
[; ;vscp_firmware.c: 396: vscp_writeNicknamePermanent(0xff);
"396
[e ( _vscp_writeNicknamePermanent (1 -> -> 255 `i `uc ]
[; ;vscp_firmware.c: 397: vscp_node_state = 0x01;
"397
[e = _vscp_node_state -> -> 1 `i `uc ]
"398
}
[e :U 41 ]
"399
}
[; ;vscp_firmware.c: 398: }
[; ;vscp_firmware.c: 399: }
[e $U 42  ]
"400
[e :U 40 ]
[; ;vscp_firmware.c: 400: else {
{
[; ;vscp_firmware.c: 402: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
"402
[e ( _vscp_setSegmentCRC (1 *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
"403
}
[e :U 42 ]
[; ;vscp_firmware.c: 403: }
[; ;vscp_firmware.c: 404: }
"404
[e :UE 39 ]
}
"411
[v _vscp_handleSetNickname `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 410: void vscp_handleSetNickname(void)
[; ;vscp_firmware.c: 411: {
[e :U _vscp_handleSetNickname ]
[f ]
[; ;vscp_firmware.c: 412: if ((2 == (vscp_imsg.flags & 0x0f)) &&
[; ;vscp_firmware.c: 413: (vscp_nickname == vscp_imsg.data[ 0 ])) {
"413
[e $ ! && == -> 2 `i & -> . _vscp_imsg 0 `i -> 15 `i == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 44  ]
{
[; ;vscp_firmware.c: 416: vscp_nickname = vscp_imsg.data[ 1 ];
"416
[e = _vscp_nickname *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 417: vscp_writeNicknamePermanent(vscp_nickname);
"417
[e ( _vscp_writeNicknamePermanent (1 _vscp_nickname ]
[; ;vscp_firmware.c: 418: vscp_setSegmentCRC(0x40);
"418
[e ( _vscp_setSegmentCRC (1 -> -> 64 `i `uc ]
"419
}
[e :U 44 ]
[; ;vscp_firmware.c: 419: }
[; ;vscp_firmware.c: 420: }
"420
[e :UE 43 ]
}
"427
[v _vscp_handleDropNickname `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 426: void vscp_handleDropNickname(void)
[; ;vscp_firmware.c: 427: {
[e :U _vscp_handleDropNickname ]
[f ]
"428
[v _bytes `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 428: uint8_t bytes = vscp_imsg.flags & 0x0f;
[e = _bytes -> & -> . _vscp_imsg 0 `i -> 15 `i `uc ]
[; ;vscp_firmware.c: 434: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
"434
[e $ ! && >= -> _bytes `i -> 1 `i == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 46  ]
{
[; ;vscp_firmware.c: 466: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
"466
[e $ ! || == -> _bytes `i -> 1 `i && > -> _bytes `i -> 1 `i == -> *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i -> 0 `i 47  ]
{
[; ;vscp_firmware.c: 468: vscp_nickname = 0xff;
"468
[e = _vscp_nickname -> -> 255 `i `uc ]
[; ;vscp_firmware.c: 469: vscp_writeNicknamePermanent(0xff);
"469
[e ( _vscp_writeNicknamePermanent (1 -> -> 255 `i `uc ]
[; ;vscp_firmware.c: 470: vscp_init();
"470
[e ( _vscp_init ..  ]
"471
}
[e :U 47 ]
"483
}
[e :U 46 ]
[; ;vscp_firmware.c: 471: }
[; ;vscp_firmware.c: 483: }
[; ;vscp_firmware.c: 484: }
"484
[e :UE 45 ]
}
"491
[v _vscp_newNodeOnline `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 490: void vscp_newNodeOnline(void)
[; ;vscp_firmware.c: 491: {
[e :U _vscp_newNodeOnline ]
[f ]
[; ;vscp_firmware.c: 492: if ((1 == (vscp_imsg.flags & 0x0f)) &&
[; ;vscp_firmware.c: 493: (vscp_nickname == vscp_imsg.data[ 0 ])) {
"493
[e $ ! && == -> 1 `i & -> . _vscp_imsg 0 `i -> 15 `i == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 49  ]
{
[; ;vscp_firmware.c: 499: vscp_omsg.flags = 0x80;
"499
[e = . _vscp_omsg 0 -> -> 128 `i `uc ]
[; ;vscp_firmware.c: 500: vscp_omsg.priority = 0x00;
"500
[e = . _vscp_omsg 1 -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 501: vscp_omsg.vscp_class = 0;
"501
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 502: vscp_omsg.vscp_type = 3;
"502
[e = . _vscp_omsg 3 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 503: vscp_sendEvent();
"503
[e ( _vscp_sendEvent ..  ]
"505
}
[e :U 49 ]
[; ;vscp_firmware.c: 505: }
[; ;vscp_firmware.c: 506: }
"506
[e :UE 48 ]
}
"513
[v _vscp_doOneSecondWork `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 512: void vscp_doOneSecondWork(void)
[; ;vscp_firmware.c: 513: {
[e :U _vscp_doOneSecondWork ]
[f ]
[; ;vscp_firmware.c: 515: ++vscp_second;
"515
[e =+ _vscp_second -> -> 1 `i `uc ]
[; ;vscp_firmware.c: 517: if (vscp_second > 59) {
"517
[e $ ! > -> _vscp_second `i -> 59 `i 51  ]
{
[; ;vscp_firmware.c: 518: vscp_second = 0;
"518
[e = _vscp_second -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 519: vscp_minute++;
"519
[e ++ _vscp_minute -> -> 1 `i `uc ]
[; ;vscp_firmware.c: 522: if (0x03 == vscp_node_state) {
"522
[e $ ! == -> 3 `i -> _vscp_node_state `i 52  ]
{
[; ;vscp_firmware.c: 523: vscp_sendHeartBeat(vscp_getZone(),
[; ;vscp_firmware.c: 524: vscp_getSubzone());
"524
[e ( _vscp_sendHeartBeat (2 , ( _vscp_getZone ..  ( _vscp_getSubzone ..  ]
"525
}
[e :U 52 ]
"526
}
[e :U 51 ]
[; ;vscp_firmware.c: 525: }
[; ;vscp_firmware.c: 526: }
[; ;vscp_firmware.c: 528: if (vscp_minute > 59) {
"528
[e $ ! > -> _vscp_minute `i -> 59 `i 53  ]
{
[; ;vscp_firmware.c: 529: vscp_minute = 0;
"529
[e = _vscp_minute -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 530: vscp_hour++;
"530
[e ++ _vscp_hour -> -> 1 `i `uc ]
"531
}
[e :U 53 ]
[; ;vscp_firmware.c: 531: }
[; ;vscp_firmware.c: 533: if (vscp_hour > 23) vscp_hour = 0;
"533
[e $ ! > -> _vscp_hour `i -> 23 `i 54  ]
[e = _vscp_hour -> -> 0 `i `uc ]
[e :U 54 ]
[; ;vscp_firmware.c: 537: if (0x03 == vscp_node_state) {
"537
[e $ ! == -> 3 `i -> _vscp_node_state `i 55  ]
{
[; ;vscp_firmware.c: 538: vscp_guid_reset++;
"538
[e ++ _vscp_guid_reset -> -> 1 `i `uc ]
[; ;vscp_firmware.c: 539: if ((vscp_guid_reset & 0x0f) >= 2) {
"539
[e $ ! >= & -> _vscp_guid_reset `i -> 15 `i -> 2 `i 56  ]
{
[; ;vscp_firmware.c: 540: vscp_guid_reset = 0;
"540
[e = _vscp_guid_reset -> -> 0 `i `uc ]
"541
}
[e :U 56 ]
"542
}
[e :U 55 ]
[; ;vscp_firmware.c: 541: }
[; ;vscp_firmware.c: 542: }
[; ;vscp_firmware.c: 543: }
"543
[e :UE 50 ]
}
"550
[v _vscp_readRegister `(uc ~T0 @X0 1 ef1`uc ]
{
[; ;vscp_firmware.c: 549: uint8_t vscp_readRegister(uint8_t reg)
[; ;vscp_firmware.c: 550: {
[e :U _vscp_readRegister ]
[v _reg `uc ~T0 @X0 1 r1 ]
[f ]
[; ;vscp_firmware.c: 551: if (reg >= 0x80) {
"551
[e $ ! >= -> _reg `i -> 128 `i 58  ]
{
[; ;vscp_firmware.c: 552: return vscp_readStdReg(reg);
"552
[e ) ( _vscp_readStdReg (1 _reg ]
[e $UE 57  ]
"553
}
[; ;vscp_firmware.c: 553: } else {
[e $U 59  ]
[e :U 58 ]
{
[; ;vscp_firmware.c: 554: return vscp_readAppReg(reg);
"554
[e ) ( _vscp_readAppReg (1 _reg ]
[e $UE 57  ]
"555
}
[e :U 59 ]
[; ;vscp_firmware.c: 555: }
[; ;vscp_firmware.c: 556: }
"556
[e :UE 57 ]
}
"563
[v _vscp_readStdReg `(uc ~T0 @X0 1 ef1`uc ]
{
[; ;vscp_firmware.c: 562: uint8_t vscp_readStdReg(uint8_t reg)
[; ;vscp_firmware.c: 563: {
[e :U _vscp_readStdReg ]
[v _reg `uc ~T0 @X0 1 r1 ]
[f ]
"564
[v _rv `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 564: uint8_t rv = 0;
[e = _rv -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 566: if (0x80 == reg) {
"566
[e $ ! == -> 128 `i -> _reg `i 61  ]
{
[; ;vscp_firmware.c: 569: rv = vscp_alarmstatus;
"569
[e = _rv _vscp_alarmstatus ]
[; ;vscp_firmware.c: 570: vscp_alarmstatus = 0x00;
"570
[e = _vscp_alarmstatus -> -> 0 `i `uc ]
"572
}
[; ;vscp_firmware.c: 572: }
[e $U 62  ]
"573
[e :U 61 ]
[; ;vscp_firmware.c: 573: else if (0x81 == reg) {
[e $ ! == -> 129 `i -> _reg `i 63  ]
{
[; ;vscp_firmware.c: 576: rv = 1;
"576
[e = _rv -> -> 1 `i `uc ]
"578
}
[; ;vscp_firmware.c: 578: }
[e $U 64  ]
"579
[e :U 63 ]
[; ;vscp_firmware.c: 579: else if (0x82 == reg) {
[e $ ! == -> 130 `i -> _reg `i 65  ]
{
[; ;vscp_firmware.c: 582: rv = 5;
"582
[e = _rv -> -> 5 `i `uc ]
"584
}
[; ;vscp_firmware.c: 584: }
[e $U 66  ]
"585
[e :U 65 ]
[; ;vscp_firmware.c: 585: else if (0x83 == reg) {
[e $ ! == -> 131 `i -> _reg `i 67  ]
{
[; ;vscp_firmware.c: 588: rv = 0;
"588
[e = _rv -> -> 0 `i `uc ]
"590
}
[; ;vscp_firmware.c: 590: }
[e $U 68  ]
"591
[e :U 67 ]
[; ;vscp_firmware.c: 591: else if (0x94 == reg) {
[e $ ! == -> 148 `i -> _reg `i 69  ]
{
[; ;vscp_firmware.c: 594: rv = vscp_getMajorVersion();
"594
[e = _rv ( _vscp_getMajorVersion ..  ]
"596
}
[; ;vscp_firmware.c: 596: }
[e $U 70  ]
"597
[e :U 69 ]
[; ;vscp_firmware.c: 597: else if (0x95 == reg) {
[e $ ! == -> 149 `i -> _reg `i 71  ]
{
[; ;vscp_firmware.c: 600: rv = vscp_getMinorVersion();
"600
[e = _rv ( _vscp_getMinorVersion ..  ]
"602
}
[; ;vscp_firmware.c: 602: }
[e $U 72  ]
"603
[e :U 71 ]
[; ;vscp_firmware.c: 603: else if (0x96 == reg) {
[e $ ! == -> 150 `i -> _reg `i 73  ]
{
[; ;vscp_firmware.c: 606: rv = vscp_getSubMinorVersion();
"606
[e = _rv ( _vscp_getSubMinorVersion ..  ]
"608
}
[; ;vscp_firmware.c: 608: }
[e $U 74  ]
"609
[e :U 73 ]
[; ;vscp_firmware.c: 609: else if (reg < 0x89) {
[e $ ! < -> _reg `i -> 137 `i 75  ]
{
[; ;vscp_firmware.c: 612: rv = vscp_getUserID(reg - 0x84);
"612
[e = _rv ( _vscp_getUserID (1 -> - -> _reg `i -> 132 `i `uc ]
"614
}
[; ;vscp_firmware.c: 614: }
[e $U 76  ]
"615
[e :U 75 ]
[; ;vscp_firmware.c: 615: else if ((reg > 0x88) &&
[; ;vscp_firmware.c: 616: (reg < 0x91)) {
"616
[e $ ! && > -> _reg `i -> 136 `i < -> _reg `i -> 145 `i 77  ]
{
[; ;vscp_firmware.c: 619: rv = vscp_getManufacturerId(reg - 0x89);
"619
[e = _rv ( _vscp_getManufacturerId (1 -> - -> _reg `i -> 137 `i `uc ]
"621
}
[; ;vscp_firmware.c: 621: }
[e $U 78  ]
"622
[e :U 77 ]
[; ;vscp_firmware.c: 622: else if (0x91 == reg) {
[e $ ! == -> 145 `i -> _reg `i 79  ]
{
[; ;vscp_firmware.c: 625: rv = vscp_nickname;
"625
[e = _rv _vscp_nickname ]
"627
}
[; ;vscp_firmware.c: 627: }
[e $U 80  ]
"628
[e :U 79 ]
[; ;vscp_firmware.c: 628: else if (0x93 == reg) {
[e $ ! == -> 147 `i -> _reg `i 81  ]
{
[; ;vscp_firmware.c: 631: rv = (vscp_page_select & 0xff);
"631
[e = _rv -> & -> _vscp_page_select `ui -> -> 255 `i `ui `uc ]
"633
}
[; ;vscp_firmware.c: 633: }
[e $U 82  ]
"635
[e :U 81 ]
[; ;vscp_firmware.c: 635: else if (0x92 == reg) {
[e $ ! == -> 146 `i -> _reg `i 83  ]
{
[; ;vscp_firmware.c: 638: rv = (vscp_page_select >> 8) & 0xff;
"638
[e = _rv -> & >> -> _vscp_page_select `ui -> 8 `i -> -> 255 `i `ui `uc ]
"640
}
[; ;vscp_firmware.c: 640: }
[e $U 84  ]
"641
[e :U 83 ]
[; ;vscp_firmware.c: 641: else if (0x97 == reg) {
[e $ ! == -> 151 `i -> _reg `i 85  ]
{
[; ;vscp_firmware.c: 643: rv = vscp_getBootLoaderAlgorithm();
"643
[e = _rv ( _vscp_getBootLoaderAlgorithm ..  ]
"644
}
[; ;vscp_firmware.c: 644: }
[e $U 86  ]
"645
[e :U 85 ]
[; ;vscp_firmware.c: 645: else if (0x98 == reg) {
[e $ ! == -> 152 `i -> _reg `i 87  ]
{
[; ;vscp_firmware.c: 647: rv = vscp_getBufferSize();
"647
[e = _rv ( _vscp_getBufferSize ..  ]
"648
}
[; ;vscp_firmware.c: 648: }
[e $U 88  ]
"649
[e :U 87 ]
[; ;vscp_firmware.c: 649: else if (0x99 == reg) {
[e $ ! == -> 153 `i -> _reg `i 89  ]
{
[; ;vscp_firmware.c: 651: rv = vscp_getRegisterPagesUsed();
"651
[e = _rv ( _vscp_getRegisterPagesUsed ..  ]
"652
}
[; ;vscp_firmware.c: 652: }
[e $U 90  ]
"653
[e :U 89 ]
[; ;vscp_firmware.c: 653: else if ((reg > (0xD0 - 1)) &&
[; ;vscp_firmware.c: 654: (reg < 0xE0)) {
"654
[e $ ! && > -> _reg `i - -> 208 `i -> 1 `i < -> _reg `i -> 224 `i 91  ]
{
[; ;vscp_firmware.c: 657: rv = vscp_getGUID(reg - 0xD0);
"657
[e = _rv ( _vscp_getGUID (1 -> - -> _reg `i -> 208 `i `uc ]
"659
}
[; ;vscp_firmware.c: 659: }
[e $U 92  ]
"660
[e :U 91 ]
[; ;vscp_firmware.c: 660: else {
{
[; ;vscp_firmware.c: 663: rv = vscp_getMDF_URL(reg - 0xE0);
"663
[e = _rv ( _vscp_getMDF_URL (1 -> - -> _reg `i -> 224 `i `uc ]
"665
}
[e :U 92 ]
[e :U 90 ]
[e :U 88 ]
[e :U 86 ]
[e :U 84 ]
[e :U 82 ]
[e :U 80 ]
[e :U 78 ]
[e :U 76 ]
[e :U 74 ]
[e :U 72 ]
[e :U 70 ]
[e :U 68 ]
[e :U 66 ]
[e :U 64 ]
[e :U 62 ]
[; ;vscp_firmware.c: 665: }
[; ;vscp_firmware.c: 667: return rv;
"667
[e ) _rv ]
[e $UE 60  ]
[; ;vscp_firmware.c: 668: }
"668
[e :UE 60 ]
}
"675
[v _vscp_writeRegister `(uc ~T0 @X0 1 ef2`uc`uc ]
{
[; ;vscp_firmware.c: 674: uint8_t vscp_writeRegister(uint8_t reg, uint8_t value)
[; ;vscp_firmware.c: 675: {
[e :U _vscp_writeRegister ]
[v _reg `uc ~T0 @X0 1 r1 ]
[v _value `uc ~T0 @X0 1 r2 ]
[f ]
[; ;vscp_firmware.c: 676: if (reg >= 0x80) {
"676
[e $ ! >= -> _reg `i -> 128 `i 94  ]
{
[; ;vscp_firmware.c: 677: return vscp_writeStdReg(reg, value);
"677
[e ) ( _vscp_writeStdReg (2 , _reg _value ]
[e $UE 93  ]
"678
}
[; ;vscp_firmware.c: 678: } else {
[e $U 95  ]
[e :U 94 ]
{
[; ;vscp_firmware.c: 679: return vscp_writeAppReg(reg, value);
"679
[e ) ( _vscp_writeAppReg (2 , _reg _value ]
[e $UE 93  ]
"680
}
[e :U 95 ]
[; ;vscp_firmware.c: 680: }
[; ;vscp_firmware.c: 681: }
"681
[e :UE 93 ]
}
"688
[v _vscp_writeStdReg `(uc ~T0 @X0 1 ef2`uc`uc ]
{
[; ;vscp_firmware.c: 687: uint8_t vscp_writeStdReg(uint8_t reg, uint8_t value)
[; ;vscp_firmware.c: 688: {
[e :U _vscp_writeStdReg ]
[v _reg `uc ~T0 @X0 1 r1 ]
[v _value `uc ~T0 @X0 1 r2 ]
[f ]
"689
[v _rv `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 689: uint8_t rv = ~value;
[e = _rv -> ~ -> _value `i `uc ]
[; ;vscp_firmware.c: 691: if ((reg > (0x82 + 1)) &&
[; ;vscp_firmware.c: 692: (reg < 0x89)) {
"692
[e $ ! && > -> _reg `i + -> 130 `i -> 1 `i < -> _reg `i -> 137 `i 97  ]
{
[; ;vscp_firmware.c: 695: vscp_setUserID((reg - 0x84), value);
"695
[e ( _vscp_setUserID (2 , -> - -> _reg `i -> 132 `i `uc _value ]
[; ;vscp_firmware.c: 696: rv = vscp_getUserID((reg - 0x84));
"696
[e = _rv ( _vscp_getUserID (1 -> - -> _reg `i -> 132 `i `uc ]
"698
}
[; ;vscp_firmware.c: 698: }
[e $U 98  ]
"699
[e :U 97 ]
[; ;vscp_firmware.c: 699: else if (0x92 == reg) {
[e $ ! == -> 146 `i -> _reg `i 99  ]
{
[; ;vscp_firmware.c: 702: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value << 8);
"702
[e = _vscp_page_select -> | & -> _vscp_page_select `ui -> -> 255 `i `ui << -> -> _value `us `ui -> 8 `i `us ]
[; ;vscp_firmware.c: 703: rv = (vscp_page_select >> 8) & 0xff;
"703
[e = _rv -> & >> -> _vscp_page_select `ui -> 8 `i -> -> 255 `i `ui `uc ]
"704
}
[; ;vscp_firmware.c: 704: }
[e $U 100  ]
"705
[e :U 99 ]
[; ;vscp_firmware.c: 705: else if (0x93 == reg) {
[e $ ! == -> 147 `i -> _reg `i 101  ]
{
[; ;vscp_firmware.c: 708: vscp_page_select = (vscp_page_select & 0xff00) | value;
"708
[e = _vscp_page_select -> | & -> _vscp_page_select `ui -> 65280 `ui -> _value `ui `us ]
[; ;vscp_firmware.c: 709: rv = (vscp_page_select & 0xff);
"709
[e = _rv -> & -> _vscp_page_select `ui -> -> 255 `i `ui `uc ]
"710
}
[; ;vscp_firmware.c: 710: }
[e $U 102  ]
"715
[e :U 101 ]
[; ;vscp_firmware.c: 715: else if ((reg > 0x88) && (reg < 0x91)) {
[e $ ! && > -> _reg `i -> 136 `i < -> _reg `i -> 145 `i 103  ]
{
[; ;vscp_firmware.c: 717: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
[; ;vscp_firmware.c: 718: (0xff != (vscp_page_select & 0xff))) {
"718
[e $ ! || != -> -> 255 `i `ui & >> -> _vscp_page_select `ui -> 8 `i -> -> 255 `i `ui != -> -> 255 `i `ui & -> _vscp_page_select `ui -> -> 255 `i `ui 104  ]
{
[; ;vscp_firmware.c: 720: rv = ~value;
"720
[e = _rv -> ~ -> _value `i `uc ]
"721
}
[; ;vscp_firmware.c: 721: } else {
[e $U 105  ]
[e :U 104 ]
{
[; ;vscp_firmware.c: 723: vscp_setManufacturerId(reg - 0x89, value);
"723
[e ( _vscp_setManufacturerId (2 , -> - -> _reg `i -> 137 `i `uc _value ]
[; ;vscp_firmware.c: 724: rv = vscp_getManufacturerId(reg - 0x89);
"724
[e = _rv ( _vscp_getManufacturerId (1 -> - -> _reg `i -> 137 `i `uc ]
"725
}
[e :U 105 ]
"726
}
[; ;vscp_firmware.c: 725: }
[; ;vscp_firmware.c: 726: }
[e $U 106  ]
"727
[e :U 103 ]
[; ;vscp_firmware.c: 727: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
[e $ ! && > -> _reg `i - -> 208 `i -> 1 `i < -> _reg `i -> 224 `i 107  ]
{
[; ;vscp_firmware.c: 729: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
[; ;vscp_firmware.c: 730: (0xff != (vscp_page_select & 0xff))) {
"730
[e $ ! || != -> -> 255 `i `ui & >> -> _vscp_page_select `ui -> 8 `i -> -> 255 `i `ui != -> -> 255 `i `ui & -> _vscp_page_select `ui -> -> 255 `i `ui 108  ]
{
[; ;vscp_firmware.c: 732: rv = ~value;
"732
[e = _rv -> ~ -> _value `i `uc ]
"733
}
[; ;vscp_firmware.c: 733: } else {
[e $U 109  ]
[e :U 108 ]
{
[; ;vscp_firmware.c: 734: vscp_setGUID(reg - 0xD0, value);
"734
[e ( _vscp_setGUID (2 , -> - -> _reg `i -> 208 `i `uc _value ]
[; ;vscp_firmware.c: 735: rv = vscp_getGUID(reg - 0xD0);
"735
[e = _rv ( _vscp_getGUID (1 -> - -> _reg `i -> 208 `i `uc ]
"736
}
[e :U 109 ]
"737
}
[; ;vscp_firmware.c: 736: }
[; ;vscp_firmware.c: 737: }
[e $U 110  ]
"739
[e :U 107 ]
[; ;vscp_firmware.c: 739: else if ( ( reg >= 0x9A ) &&
[; ;vscp_firmware.c: 740: ( reg < 0x9E ) ) {
"740
[e $ ! && >= -> _reg `i -> 154 `i < -> _reg `i -> 158 `i 111  ]
{
"742
[v _code `ul ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 742: uint32_t code = vscp_getFamilyCode();
[e = _code ( _vscp_getFamilyCode ..  ]
"743
[v _idx `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 743: uint8_t idx = reg - 0x9A;
[e = _idx -> - -> _reg `i -> 154 `i `uc ]
[; ;vscp_firmware.c: 744: rv = code >> (((3-idx)*8) & 0xff);
"744
[e = _rv -> >> _code & * - -> 3 `i -> _idx `i -> 8 `i -> 255 `i `uc ]
"745
}
[; ;vscp_firmware.c: 745: }
[e $U 112  ]
"746
[e :U 111 ]
[; ;vscp_firmware.c: 746: else if ( ( reg >= 0x9E ) &&
[; ;vscp_firmware.c: 747: ( reg < 0xA2 ) ) {
"747
[e $ ! && >= -> _reg `i -> 158 `i < -> _reg `i -> 162 `i 113  ]
{
"749
[v _code `ul ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 749: uint32_t code = vscp_getFamilyType();
[e = _code ( _vscp_getFamilyType ..  ]
"750
[v _idx `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 750: uint8_t idx = reg - 0x9E;
[e = _idx -> - -> _reg `i -> 158 `i `uc ]
[; ;vscp_firmware.c: 751: rv = code >> (((3-idx)*8) & 0xff);
"751
[e = _rv -> >> _code & * - -> 3 `i -> _idx `i -> 8 `i -> 255 `i `uc ]
"752
}
[; ;vscp_firmware.c: 752: }
[e $U 114  ]
"753
[e :U 113 ]
[; ;vscp_firmware.c: 753: else if ( 0xA2 == reg ) {
[e $ ! == -> 162 `i -> _reg `i 115  ]
{
[; ;vscp_firmware.c: 754: if ( 0x55 == value ) {
"754
[e $ ! == -> 85 `i -> _value `i 116  ]
{
[; ;vscp_firmware.c: 755: vscp_configtimer = 0;
"755
[e = _vscp_configtimer -> -> 0 `i `us ]
[; ;vscp_firmware.c: 756: rv = 0x55;
"756
[e = _rv -> -> 85 `i `uc ]
"757
}
[; ;vscp_firmware.c: 757: }
[e $U 117  ]
"758
[e :U 116 ]
[; ;vscp_firmware.c: 758: else if ( 0xaa == value ) {
[e $ ! == -> 170 `i -> _value `i 118  ]
{
[; ;vscp_firmware.c: 759: if ( vscp_configtimer < 1000 ) {
"759
[e $ ! < -> _vscp_configtimer `ui -> -> 1000 `i `ui 119  ]
{
[; ;vscp_firmware.c: 760: vscp_restoreDefaults();
"760
[e ( _vscp_restoreDefaults ..  ]
[; ;vscp_firmware.c: 761: rv = 0xaa;
"761
[e = _rv -> -> 170 `i `uc ]
"762
}
[; ;vscp_firmware.c: 762: }
[e $U 120  ]
"763
[e :U 119 ]
[; ;vscp_firmware.c: 763: else {
{
[; ;vscp_firmware.c: 764: rv = 0;
"764
[e = _rv -> -> 0 `i `uc ]
"765
}
[e :U 120 ]
"766
}
[e :U 118 ]
"768
[e :U 117 ]
}
[; ;vscp_firmware.c: 765: }
[; ;vscp_firmware.c: 766: }
[; ;vscp_firmware.c: 768: }
[e $U 121  ]
"769
[e :U 115 ]
[; ;vscp_firmware.c: 769: else {
{
[; ;vscp_firmware.c: 771: rv = ~value;
"771
[e = _rv -> ~ -> _value `i `uc ]
"772
}
[e :U 121 ]
[e :U 114 ]
[e :U 112 ]
[e :U 110 ]
[e :U 106 ]
[e :U 102 ]
[e :U 100 ]
[e :U 98 ]
[; ;vscp_firmware.c: 772: }
[; ;vscp_firmware.c: 774: return rv;
"774
[e ) _rv ]
[e $UE 96  ]
[; ;vscp_firmware.c: 775: }
"775
[e :UE 96 ]
}
"782
[v _vscp_handleProtocolEvent `(v ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 781: void vscp_handleProtocolEvent(void)
[; ;vscp_firmware.c: 782: {
[e :U _vscp_handleProtocolEvent ]
[f ]
[; ;vscp_firmware.c: 784: if (0 == vscp_imsg.vscp_class) {
"784
[e $ ! == -> -> 0 `i `ui -> . _vscp_imsg 2 `ui 123  ]
{
[; ;vscp_firmware.c: 787: switch (vscp_imsg.vscp_type) {
"787
[e $U 125  ]
{
[; ;vscp_firmware.c: 789: case 1:
"789
[e :U 126 ]
[; ;vscp_firmware.c: 791: vscp_handleHeartbeat();
"791
[e ( _vscp_handleHeartbeat ..  ]
[; ;vscp_firmware.c: 792: break;
"792
[e $U 124  ]
[; ;vscp_firmware.c: 794: case 2:
"794
[e :U 127 ]
[; ;vscp_firmware.c: 796: vscp_newNodeOnline();
"796
[e ( _vscp_newNodeOnline ..  ]
[; ;vscp_firmware.c: 797: break;
"797
[e $U 124  ]
[; ;vscp_firmware.c: 799: case 6:
"799
[e :U 128 ]
[; ;vscp_firmware.c: 801: vscp_handleSetNickname();
"801
[e ( _vscp_handleSetNickname ..  ]
[; ;vscp_firmware.c: 802: break;
"802
[e $U 124  ]
[; ;vscp_firmware.c: 804: case 8:
"804
[e :U 129 ]
[; ;vscp_firmware.c: 806: vscp_handleDropNickname();
"806
[e ( _vscp_handleDropNickname ..  ]
[; ;vscp_firmware.c: 807: break;
"807
[e $U 124  ]
[; ;vscp_firmware.c: 809: case 9:
"809
[e :U 130 ]
[; ;vscp_firmware.c: 811: if ((2 == (vscp_imsg.flags & 0x0f)) &&
[; ;vscp_firmware.c: 812: (vscp_nickname == vscp_imsg.data[ 0 ])) {
"812
[e $ ! && == -> 2 `i & -> . _vscp_imsg 0 `i -> 15 `i == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 131  ]
{
[; ;vscp_firmware.c: 814: if (vscp_imsg.data[ 1 ] < 0x80) {
"814
[e $ ! < -> *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i -> 128 `i 132  ]
{
[; ;vscp_firmware.c: 817: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
"817
[e = *U + &U . _vscp_omsg 4 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_readAppReg (1 *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 820: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
"820
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 822: vscp_omsg.priority = 0x03;
"822
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 823: vscp_omsg.flags = 0x80 + 2;
"823
[e = . _vscp_omsg 0 -> + -> 128 `i -> 2 `i `uc ]
[; ;vscp_firmware.c: 824: vscp_omsg.vscp_class = 0;
"824
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 825: vscp_omsg.vscp_type = 10;
"825
[e = . _vscp_omsg 3 -> -> 10 `i `uc ]
[; ;vscp_firmware.c: 828: vscp_sendEvent();
"828
[e ( _vscp_sendEvent ..  ]
"829
}
[; ;vscp_firmware.c: 829: } else {
[e $U 133  ]
[e :U 132 ]
{
[; ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] =
[; ;vscp_firmware.c: 833: vscp_readStdReg(vscp_imsg.data[ 1 ]);
"833
[e = *U + &U . _vscp_omsg 4 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_readStdReg (1 *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 836: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
"836
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 838: vscp_omsg.priority = 0x03;
"838
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 839: vscp_omsg.flags = 0x80 + 2;
"839
[e = . _vscp_omsg 0 -> + -> 128 `i -> 2 `i `uc ]
[; ;vscp_firmware.c: 840: vscp_omsg.vscp_class = 0;
"840
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 841: vscp_omsg.vscp_type = 10;
"841
[e = . _vscp_omsg 3 -> -> 10 `i `uc ]
[; ;vscp_firmware.c: 844: vscp_sendEvent();
"844
[e ( _vscp_sendEvent ..  ]
"845
}
[e :U 133 ]
"846
}
[e :U 131 ]
[; ;vscp_firmware.c: 845: }
[; ;vscp_firmware.c: 846: }
[; ;vscp_firmware.c: 847: break;
"847
[e $U 124  ]
[; ;vscp_firmware.c: 849: case 11:
"849
[e :U 134 ]
[; ;vscp_firmware.c: 851: if ((3 == (vscp_imsg.flags & 0x0f)) &&
[; ;vscp_firmware.c: 852: (vscp_nickname == vscp_imsg.data[ 0 ])) {
"852
[e $ ! && == -> 3 `i & -> . _vscp_imsg 0 `i -> 15 `i == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 135  ]
{
[; ;vscp_firmware.c: 854: if (vscp_imsg.data[ 1 ] < 0x80) {
"854
[e $ ! < -> *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i -> 128 `i 136  ]
{
[; ;vscp_firmware.c: 857: vscp_omsg.data[ 1 ] =
[; ;vscp_firmware.c: 858: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
"858
[e = *U + &U . _vscp_omsg 4 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_writeAppReg (2 , *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 861: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
"861
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 863: vscp_omsg.priority = 0x03;
"863
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 864: vscp_omsg.flags = 0x80 + 2;
"864
[e = . _vscp_omsg 0 -> + -> 128 `i -> 2 `i `uc ]
[; ;vscp_firmware.c: 865: vscp_omsg.vscp_class = 0;
"865
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 866: vscp_omsg.vscp_type = 10;
"866
[e = . _vscp_omsg 3 -> -> 10 `i `uc ]
[; ;vscp_firmware.c: 869: vscp_sendEvent();
"869
[e ( _vscp_sendEvent ..  ]
"871
}
[; ;vscp_firmware.c: 871: } else {
[e $U 137  ]
[e :U 136 ]
{
[; ;vscp_firmware.c: 874: vscp_omsg.data[ 1 ] =
[; ;vscp_firmware.c: 875: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
"875
[e = *U + &U . _vscp_omsg 4 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_writeStdReg (2 , *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 878: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
"878
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 880: vscp_omsg.priority = 0x03;
"880
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 881: vscp_omsg.flags = 0x80 + 2;
"881
[e = . _vscp_omsg 0 -> + -> 128 `i -> 2 `i `uc ]
[; ;vscp_firmware.c: 882: vscp_omsg.vscp_class = 0;
"882
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 883: vscp_omsg.vscp_type = 10;
"883
[e = . _vscp_omsg 3 -> -> 10 `i `uc ]
[; ;vscp_firmware.c: 886: vscp_sendEvent();
"886
[e ( _vscp_sendEvent ..  ]
"887
}
[e :U 137 ]
"888
}
[e :U 135 ]
[; ;vscp_firmware.c: 887: }
[; ;vscp_firmware.c: 888: }
[; ;vscp_firmware.c: 889: break;
"889
[e $U 124  ]
[; ;vscp_firmware.c: 891: case 12:
"891
[e :U 138 ]
[; ;vscp_firmware.c: 892: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
[; ;vscp_firmware.c: 893: (9 == vscp_imsg.data[ 1 ]))
"893
[e $ ! && == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> 9 `i -> *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 139  ]
[; ;vscp_firmware.c: 894: {
"894
{
[; ;vscp_firmware.c: 895: vscp_goBootloaderMode();
"895
[e ( _vscp_goBootloaderMode ..  ]
"896
}
[e :U 139 ]
[; ;vscp_firmware.c: 896: }
[; ;vscp_firmware.c: 898: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
[; ;vscp_firmware.c: 899: (1 == vscp_imsg.data[ 1 ]) &&
[; ;vscp_firmware.c: 900: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
[; ;vscp_firmware.c: 901: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
[; ;vscp_firmware.c: 902: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
[; ;vscp_firmware.c: 903: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
[; ;vscp_firmware.c: 904: ((vscp_page_select >> 8) == vscp_imsg.data[ 6 ]) &&
[; ;vscp_firmware.c: 905: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
"905
[e $ ! && && && && && && && == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> 1 `i -> *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 0 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 3 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 5 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 4 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 7 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 5 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == >> -> _vscp_page_select `ui -> 8 `i -> *U + &U . _vscp_imsg 5 * -> -> -> 6 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `ui == & -> _vscp_page_select `ui -> -> 255 `i `ui -> *U + &U . _vscp_imsg 5 * -> -> -> 7 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `ui 140  ]
{
[; ;vscp_firmware.c: 907: vscp_goBootloaderMode();
"907
[e ( _vscp_goBootloaderMode ..  ]
"909
}
[e :U 140 ]
[; ;vscp_firmware.c: 909: }
[; ;vscp_firmware.c: 910: break;
"910
[e $U 124  ]
[; ;vscp_firmware.c: 912: case 23:
"912
[e :U 141 ]
[; ;vscp_firmware.c: 914: switch (vscp_imsg.data[ 0 ] >> 4) {
"914
[e $U 143  ]
{
[; ;vscp_firmware.c: 916: case 0:
"916
[e :U 144 ]
[; ;vscp_firmware.c: 917: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
[; ;vscp_firmware.c: 918: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
[; ;vscp_firmware.c: 919: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
[; ;vscp_firmware.c: 920: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
"920
[e $ ! && && && == -> ( _vscp_getGUID (1 -> -> 0 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 1 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 2 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 3 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 4 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 145  ]
{
[; ;vscp_firmware.c: 921: vscp_guid_reset |= 0x10;
"921
[e =| _vscp_guid_reset -> -> 16 `i `uc ]
"922
}
[e :U 145 ]
[; ;vscp_firmware.c: 922: }
[; ;vscp_firmware.c: 923: break;
"923
[e $U 142  ]
[; ;vscp_firmware.c: 925: case 1:
"925
[e :U 146 ]
[; ;vscp_firmware.c: 926: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
[; ;vscp_firmware.c: 927: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
[; ;vscp_firmware.c: 928: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
[; ;vscp_firmware.c: 929: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
"929
[e $ ! && && && == -> ( _vscp_getGUID (1 -> -> 4 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 5 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 6 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 7 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 4 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 147  ]
{
[; ;vscp_firmware.c: 930: vscp_guid_reset |= 0x20;
"930
[e =| _vscp_guid_reset -> -> 32 `i `uc ]
"931
}
[e :U 147 ]
[; ;vscp_firmware.c: 931: }
[; ;vscp_firmware.c: 932: break;
"932
[e $U 142  ]
[; ;vscp_firmware.c: 934: case 2:
"934
[e :U 148 ]
[; ;vscp_firmware.c: 935: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
[; ;vscp_firmware.c: 936: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
[; ;vscp_firmware.c: 937: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
[; ;vscp_firmware.c: 938: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
"938
[e $ ! && && && == -> ( _vscp_getGUID (1 -> -> 8 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 9 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 10 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 11 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 4 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 149  ]
{
[; ;vscp_firmware.c: 939: vscp_guid_reset |= 0x40;
"939
[e =| _vscp_guid_reset -> -> 64 `i `uc ]
"940
}
[e :U 149 ]
[; ;vscp_firmware.c: 940: }
[; ;vscp_firmware.c: 941: break;
"941
[e $U 142  ]
[; ;vscp_firmware.c: 943: case 3:
"943
[e :U 150 ]
[; ;vscp_firmware.c: 944: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
[; ;vscp_firmware.c: 945: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
[; ;vscp_firmware.c: 946: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
[; ;vscp_firmware.c: 947: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
"947
[e $ ! && && && == -> ( _vscp_getGUID (1 -> -> 12 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 13 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 14 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> ( _vscp_getGUID (1 -> -> 15 `i `uc `i -> *U + &U . _vscp_imsg 5 * -> -> -> 4 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 151  ]
{
[; ;vscp_firmware.c: 948: vscp_guid_reset |= 0x80;
"948
[e =| _vscp_guid_reset -> -> 128 `i `uc ]
"949
}
[e :U 151 ]
[; ;vscp_firmware.c: 949: }
[; ;vscp_firmware.c: 950: break;
"950
[e $U 142  ]
[; ;vscp_firmware.c: 952: default:
"952
[e :U 152 ]
[; ;vscp_firmware.c: 953: vscp_guid_reset = 0;
"953
[e = _vscp_guid_reset -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 954: break;
"954
[e $U 142  ]
"955
}
[; ;vscp_firmware.c: 955: }
[e $U 142  ]
"914
[e :U 143 ]
[e [\ >> -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i -> 4 `i , $ -> 0 `i 144
 , $ -> 1 `i 146
 , $ -> 2 `i 148
 , $ -> 3 `i 150
 152 ]
"955
[e :U 142 ]
[; ;vscp_firmware.c: 957: if (0xf0 == (vscp_guid_reset & 0xf0)) {
"957
[e $ ! == -> 240 `i & -> _vscp_guid_reset `i -> 240 `i 153  ]
{
[; ;vscp_firmware.c: 959: vscp_init();
"959
[e ( _vscp_init ..  ]
"960
}
[e :U 153 ]
[; ;vscp_firmware.c: 960: }
[; ;vscp_firmware.c: 961: break;
"961
[e $U 124  ]
[; ;vscp_firmware.c: 963: case 24:
"963
[e :U 154 ]
[; ;vscp_firmware.c: 965: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
"965
[e $ ! == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 155  ]
{
"967
[v _i `uc ~T0 @X0 1 a ]
"968
[v _pos `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 967: uint8_t i;
[; ;vscp_firmware.c: 968: uint8_t pos = 0;
[e = _pos -> -> 0 `i `uc ]
"969
[v _offset `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 969: uint8_t offset = vscp_imsg.data[ 1 ];
[e = _offset *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
"970
[v _len `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 970: uint8_t len = vscp_imsg.data[ 2 ];
[e = _len *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 972: for (i = 0; i < len; i++) {
"972
{
[e = _i -> -> 0 `i `uc ]
[e $U 159  ]
[e :U 156 ]
{
[; ;vscp_firmware.c: 973: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
"973
[e = *U + &U . _vscp_omsg 4 * -> -> + % -> _i `i -> 7 `i -> 1 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_readRegister (1 -> + -> _offset `i -> _i `i `uc ]
[; ;vscp_firmware.c: 975: if ((i % 7) == 6 || i == (len - 1)) {
"975
[e $ ! || == % -> _i `i -> 7 `i -> 6 `i == -> _i `i - -> _len `i -> 1 `i 160  ]
{
"976
[v _bytes `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 976: uint8_t bytes;
[; ;vscp_firmware.c: 978: if ((i % 7) == 6) bytes = 7;
"978
[e $ ! == % -> _i `i -> 7 `i -> 6 `i 161  ]
[e = _bytes -> -> 7 `i `uc ]
[e $U 162  ]
"979
[e :U 161 ]
[; ;vscp_firmware.c: 979: else bytes = (i % 7) + 1;
[e = _bytes -> + % -> _i `i -> 7 `i -> 1 `i `uc ]
[e :U 162 ]
[; ;vscp_firmware.c: 981: vscp_omsg.flags = 0x80 + bytes + 1;
"981
[e = . _vscp_omsg 0 -> + + -> 128 `i -> _bytes `i -> 1 `i `uc ]
[; ;vscp_firmware.c: 982: vscp_omsg.priority = 0x03;
"982
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 983: vscp_omsg.vscp_class = 0;
"983
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 984: vscp_omsg.vscp_type = 26;
"984
[e = . _vscp_omsg 3 -> -> 26 `i `uc ]
[; ;vscp_firmware.c: 985: vscp_omsg.data[ 0 ] = pos;
"985
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux _pos ]
[; ;vscp_firmware.c: 988: vscp_sendEvent();
"988
[e ( _vscp_sendEvent ..  ]
[; ;vscp_firmware.c: 989: pos++;
"989
[e ++ _pos -> -> 1 `i `uc ]
"990
}
[e :U 160 ]
"991
}
"972
[e ++ _i -> -> 1 `i `uc ]
[e :U 159 ]
[e $ < -> _i `i -> _len `i 156  ]
[e :U 157 ]
"991
}
"992
}
[e :U 155 ]
[; ;vscp_firmware.c: 990: }
[; ;vscp_firmware.c: 991: }
[; ;vscp_firmware.c: 992: }
[; ;vscp_firmware.c: 993: break;
"993
[e $U 124  ]
[; ;vscp_firmware.c: 995: case 25:
"995
[e :U 163 ]
[; ;vscp_firmware.c: 997: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
"997
[e $ ! == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 164  ]
{
"998
[v _i `uc ~T0 @X0 1 a ]
"999
[v _pos `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 998: uint8_t i;
[; ;vscp_firmware.c: 999: uint8_t pos = vscp_imsg.data[ 1 ];
[e = _pos *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
"1000
[v _len `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 1000: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
[e = _len -> & - -> . _vscp_imsg 0 `i -> 2 `i -> 7 `i `uc ]
[; ;vscp_firmware.c: 1002: for (i = 0; i < len; i++) {
"1002
{
[e = _i -> -> 0 `i `uc ]
[e $U 168  ]
[e :U 165 ]
{
[; ;vscp_firmware.c: 1004: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
"1004
[e ( _vscp_writeRegister (2 , -> + -> _pos `i -> _i `i `uc *U + &U . _vscp_imsg 5 * -> -> + -> 2 `i -> _i `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 1005: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
"1005
[e = *U + &U . _vscp_omsg 4 * -> -> + -> 1 `i -> _i `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_readRegister (1 -> + -> _pos `i -> _i `i `uc ]
"1006
}
"1002
[e ++ _i -> -> 1 `i `uc ]
[e :U 168 ]
[e $ < -> _i `i -> _len `i 165  ]
[e :U 166 ]
"1006
}
[; ;vscp_firmware.c: 1006: }
[; ;vscp_firmware.c: 1008: vscp_omsg.priority = 0x03;
"1008
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 1009: vscp_omsg.vscp_class = 0;
"1009
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 1010: vscp_omsg.vscp_type = 26;
"1010
[e = . _vscp_omsg 3 -> -> 26 `i `uc ]
[; ;vscp_firmware.c: 1011: vscp_omsg.data[ 0 ] = 0;
"1011
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 1012: vscp_omsg.flags = 0x80 + len + 1;
"1012
[e = . _vscp_omsg 0 -> + + -> 128 `i -> _len `i -> 1 `i `uc ]
[; ;vscp_firmware.c: 1015: vscp_sendEvent();
"1015
[e ( _vscp_sendEvent ..  ]
"1017
}
[e :U 164 ]
[; ;vscp_firmware.c: 1017: }
[; ;vscp_firmware.c: 1018: break;
"1018
[e $U 124  ]
[; ;vscp_firmware.c: 1020: case 29:
"1020
[e :U 169 ]
[; ;vscp_firmware.c: 1022: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
"1022
[e $ ! == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 170  ]
{
[; ;vscp_firmware.c: 1024: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
[; ;vscp_firmware.c: 1025: vscp_imsg.data[ 1 ],
[; ;vscp_firmware.c: 1026: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
"1026
[e = *U + &U . _vscp_omsg 4 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_writeAppReg (2 , *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux -> + -> ( _vscp_readAppReg (1 *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i -> 1 `i `uc ]
[; ;vscp_firmware.c: 1028: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
"1028
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 1030: vscp_omsg.priority = 0x03;
"1030
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 1031: vscp_omsg.flags = 0x80 + 2;
"1031
[e = . _vscp_omsg 0 -> + -> 128 `i -> 2 `i `uc ]
[; ;vscp_firmware.c: 1032: vscp_omsg.vscp_class = 0;
"1032
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 1033: vscp_omsg.vscp_type = 10;
"1033
[e = . _vscp_omsg 3 -> -> 10 `i `uc ]
[; ;vscp_firmware.c: 1036: vscp_sendEvent();
"1036
[e ( _vscp_sendEvent ..  ]
"1037
}
[e :U 170 ]
[; ;vscp_firmware.c: 1037: }
[; ;vscp_firmware.c: 1038: break;
"1038
[e $U 124  ]
[; ;vscp_firmware.c: 1040: case 30:
"1040
[e :U 171 ]
[; ;vscp_firmware.c: 1042: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
"1042
[e $ ! == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 172  ]
{
[; ;vscp_firmware.c: 1044: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
[; ;vscp_firmware.c: 1045: vscp_imsg.data[ 1 ],
[; ;vscp_firmware.c: 1046: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
"1046
[e = *U + &U . _vscp_omsg 4 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_writeAppReg (2 , *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux -> - -> ( _vscp_readAppReg (1 *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i -> 1 `i `uc ]
[; ;vscp_firmware.c: 1048: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
"1048
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 1050: vscp_omsg.priority = 0x03;
"1050
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 1051: vscp_omsg.flags = 0x80 + 2;
"1051
[e = . _vscp_omsg 0 -> + -> 128 `i -> 2 `i `uc ]
[; ;vscp_firmware.c: 1052: vscp_omsg.vscp_class = 0;
"1052
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 1053: vscp_omsg.vscp_type = 10;
"1053
[e = . _vscp_omsg 3 -> -> 10 `i `uc ]
[; ;vscp_firmware.c: 1056: vscp_sendEvent();
"1056
[e ( _vscp_sendEvent ..  ]
"1057
}
[e :U 172 ]
[; ;vscp_firmware.c: 1057: }
[; ;vscp_firmware.c: 1058: break;
"1058
[e $U 124  ]
[; ;vscp_firmware.c: 1060: case 31:
"1060
[e :U 173 ]
[; ;vscp_firmware.c: 1062: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
[; ;vscp_firmware.c: 1063: (0xff == vscp_imsg.data[ 0 ])) {
"1063
[e $ ! || == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i == -> 255 `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 174  ]
{
"1065
[v _i `uc ~T0 @X0 1 a ]
[v _j `uc ~T0 @X0 1 a ]
[v _k `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 1065: uint8_t i, j, k = 0;
[e = _k -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 1069: vscp_omsg.priority = 0x03;
"1069
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 1070: vscp_omsg.flags = 0x80 + 8;
"1070
[e = . _vscp_omsg 0 -> + -> 128 `i -> 8 `i `uc ]
[; ;vscp_firmware.c: 1071: vscp_omsg.vscp_class = 0;
"1071
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 1072: vscp_omsg.vscp_type = 32;
"1072
[e = . _vscp_omsg 3 -> -> 32 `i `uc ]
[; ;vscp_firmware.c: 1074: for (i = 0; i < 3; i++)
"1074
{
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 3 `i 175  ]
[e $U 176  ]
"1075
[e :U 175 ]
[; ;vscp_firmware.c: 1075: {
{
[; ;vscp_firmware.c: 1076: vscp_omsg.data[0] = i;
"1076
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux _i ]
[; ;vscp_firmware.c: 1078: for (j = 1; j < 8; j++) {
"1078
{
[e = _j -> -> 1 `i `uc ]
[e $ < -> _j `i -> 8 `i 178  ]
[e $U 179  ]
[e :U 178 ]
{
[; ;vscp_firmware.c: 1079: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
"1079
[e = *U + &U . _vscp_omsg 4 * -> _j `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_getGUID (1 -> - -> 15 `i -> ++ _k -> -> 1 `i `uc `i `uc ]
[; ;vscp_firmware.c: 1080: if (k > 16)
"1080
[e $ ! > -> _k `i -> 16 `i 181  ]
[; ;vscp_firmware.c: 1081: break;
"1081
[e $U 179  ]
[e :U 181 ]
"1082
}
"1078
[e ++ _j -> -> 1 `i `uc ]
[e $ < -> _j `i -> 8 `i 178  ]
[e :U 179 ]
"1082
}
[; ;vscp_firmware.c: 1082: }
[; ;vscp_firmware.c: 1084: if (k > 16)
"1084
[e $ ! > -> _k `i -> 16 `i 182  ]
[; ;vscp_firmware.c: 1085: break;
"1085
[e $U 176  ]
[e :U 182 ]
[; ;vscp_firmware.c: 1087: vscp_sendEvent();
"1087
[e ( _vscp_sendEvent ..  ]
"1088
}
"1074
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 3 `i 175  ]
[e :U 176 ]
"1088
}
[; ;vscp_firmware.c: 1088: }
[; ;vscp_firmware.c: 1090: for (j = 0; j < 5; j++)
"1090
{
[e = _j -> -> 0 `i `uc ]
[e $ < -> _j `i -> 5 `i 183  ]
[e $U 184  ]
"1091
[e :U 183 ]
[; ;vscp_firmware.c: 1091: {
{
[; ;vscp_firmware.c: 1092: if (vscp_getMDF_URL(j) > 0)
"1092
[e $ ! > -> ( _vscp_getMDF_URL (1 _j `i -> 0 `i 186  ]
[; ;vscp_firmware.c: 1093: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
"1093
[e = *U + &U . _vscp_omsg 4 * -> -> + -> 3 `i -> _j `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_getMDF_URL (1 _j ]
[e $U 187  ]
"1094
[e :U 186 ]
[; ;vscp_firmware.c: 1094: else
[; ;vscp_firmware.c: 1095: vscp_omsg.data[3 + j] = 0;
"1095
[e = *U + &U . _vscp_omsg 4 * -> -> + -> 3 `i -> _j `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux -> -> 0 `i `uc ]
[e :U 187 ]
"1096
}
"1090
[e ++ _j -> -> 1 `i `uc ]
[e $ < -> _j `i -> 5 `i 183  ]
[e :U 184 ]
"1096
}
[; ;vscp_firmware.c: 1096: }
[; ;vscp_firmware.c: 1098: vscp_sendEvent();
"1098
[e ( _vscp_sendEvent ..  ]
[; ;vscp_firmware.c: 1100: k = 5;
"1100
[e = _k -> -> 5 `i `uc ]
[; ;vscp_firmware.c: 1101: for (i = 3; i < 7; i++)
"1101
{
[e = _i -> -> 3 `i `uc ]
[e $ < -> _i `i -> 7 `i 188  ]
[e $U 189  ]
"1102
[e :U 188 ]
[; ;vscp_firmware.c: 1102: {
{
[; ;vscp_firmware.c: 1103: vscp_omsg.data[0] = i;
"1103
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux _i ]
[; ;vscp_firmware.c: 1105: for (j = 1; j < 8; j++) {
"1105
{
[e = _j -> -> 1 `i `uc ]
[e $ < -> _j `i -> 8 `i 191  ]
[e $U 192  ]
[e :U 191 ]
{
[; ;vscp_firmware.c: 1106: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
"1106
[e = *U + &U . _vscp_omsg 4 * -> _j `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_getMDF_URL (1 ++ _k -> -> 1 `i `uc ]
"1107
}
"1105
[e ++ _j -> -> 1 `i `uc ]
[e $ < -> _j `i -> 8 `i 191  ]
[e :U 192 ]
"1107
}
[; ;vscp_firmware.c: 1107: }
[; ;vscp_firmware.c: 1108: vscp_sendEvent();
"1108
[e ( _vscp_sendEvent ..  ]
"1109
}
"1101
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 7 `i 188  ]
[e :U 189 ]
"1109
}
"1111
}
[e :U 174 ]
[; ;vscp_firmware.c: 1109: }
[; ;vscp_firmware.c: 1111: }
[; ;vscp_firmware.c: 1112: break;
"1112
[e $U 124  ]
[; ;vscp_firmware.c: 1115: case 33:
"1115
[e :U 194 ]
[; ;vscp_firmware.c: 1117: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
"1117
[e $ ! == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 195  ]
{
[; ;vscp_firmware.c: 1119: vscp_omsg.priority = 0x03;
"1119
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 1120: vscp_omsg.flags = 0x80 + 7;
"1120
[e = . _vscp_omsg 0 -> + -> 128 `i -> 7 `i `uc ]
[; ;vscp_firmware.c: 1121: vscp_omsg.vscp_class = 0;
"1121
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 1122: vscp_omsg.vscp_type = 34;
"1122
[e = . _vscp_omsg 3 -> -> 34 `i `uc ]
[; ;vscp_firmware.c: 1124: vscp_getMatrixInfo((char *) vscp_omsg.data);
"1124
[e ( _vscp_getMatrixInfo (1 &U . _vscp_omsg 4 ]
[; ;vscp_firmware.c: 1127: vscp_sendEvent();
"1127
[e ( _vscp_sendEvent ..  ]
"1128
}
[e :U 195 ]
[; ;vscp_firmware.c: 1128: }
[; ;vscp_firmware.c: 1129: break;
"1129
[e $U 124  ]
[; ;vscp_firmware.c: 1138: case 37:
"1138
[e :U 196 ]
[; ;vscp_firmware.c: 1140: if ( vscp_nickname == vscp_imsg.data[0] ) {
"1140
[e $ ! == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 197  ]
{
"1142
[v _page_save `us ~T0 @X0 1 a ]
"1143
[v _byte `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 1142: uint16_t page_save;
[; ;vscp_firmware.c: 1143: uint8_t byte = 0, bytes = 0;
[e = _byte -> -> 0 `i `uc ]
[v _bytes `uc ~T0 @X0 1 a ]
[e = _bytes -> -> 0 `i `uc ]
"1144
[v _bytes_this_time `uc ~T0 @X0 1 a ]
[v _cb `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 1144: uint8_t bytes_this_time, cb;
[; ;vscp_firmware.c: 1148: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
"1148
[e $ ! > & -> . _vscp_imsg 0 `i -> 15 `i -> 3 `i 198  ]
{
[; ;vscp_firmware.c: 1151: bytes = vscp_imsg.data[4];
"1151
[e = _bytes *U + &U . _vscp_imsg 5 * -> -> -> 4 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 1153: if ( 0 == bytes ) {
"1153
[e $ ! == -> 0 `i -> _bytes `i 199  ]
{
[; ;vscp_firmware.c: 1154: bytes = 1;
"1154
[e = _bytes -> -> 1 `i `uc ]
"1155
}
[e :U 199 ]
"1156
}
[; ;vscp_firmware.c: 1155: }
[; ;vscp_firmware.c: 1156: }
[e $U 200  ]
"1157
[e :U 198 ]
[; ;vscp_firmware.c: 1157: else {
{
[; ;vscp_firmware.c: 1158: bytes = 1;
"1158
[e = _bytes -> -> 1 `i `uc ]
"1159
}
[e :U 200 ]
[; ;vscp_firmware.c: 1159: }
[; ;vscp_firmware.c: 1162: page_save = vscp_page_select;
"1162
[e = _page_save _vscp_page_select ]
[; ;vscp_firmware.c: 1167: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]);
"1167
[e = _vscp_page_select -> | << -> *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i -> 8 `i -> *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i `us ]
[; ;vscp_firmware.c: 1170: vscp_omsg.priority = 0x03;
"1170
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 1171: vscp_omsg.vscp_class = 0;
"1171
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 1172: vscp_omsg.vscp_type = 39;
"1172
[e = . _vscp_omsg 3 -> -> 39 `i `uc ]
[; ;vscp_firmware.c: 1173: vscp_omsg.data[0] = 0;
"1173
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 1174: vscp_omsg.data[1] = vscp_imsg.data[1];
"1174
[e = *U + &U . _vscp_omsg 4 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 1175: vscp_omsg.data[2] = vscp_imsg.data[2];
"1175
[e = *U + &U . _vscp_omsg 4 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 1177: do {
"1177
[e :U 203 ]
{
[; ;vscp_firmware.c: 1179: if ( ( bytes - byte ) >= 4 ) {
"1179
[e $ ! >= - -> _bytes `i -> _byte `i -> 4 `i 204  ]
{
[; ;vscp_firmware.c: 1180: bytes_this_time = 4;
"1180
[e = _bytes_this_time -> -> 4 `i `uc ]
"1181
}
[; ;vscp_firmware.c: 1181: }
[e $U 205  ]
"1182
[e :U 204 ]
[; ;vscp_firmware.c: 1182: else {
{
[; ;vscp_firmware.c: 1183: bytes_this_time = (bytes - byte);
"1183
[e = _bytes_this_time -> - -> _bytes `i -> _byte `i `uc ]
"1184
}
[e :U 205 ]
[; ;vscp_firmware.c: 1184: }
[; ;vscp_firmware.c: 1187: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
"1187
[e = . _vscp_omsg 0 -> + + -> 128 `i -> 4 `i -> _bytes_this_time `i `uc ]
[; ;vscp_firmware.c: 1188: vscp_omsg.data[3] =
[; ;vscp_firmware.c: 1189: vscp_imsg.data[3] + byte;
"1189
[e = *U + &U . _vscp_omsg 4 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux -> + -> *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i -> _byte `i `uc ]
[; ;vscp_firmware.c: 1192: for ( cb = 0; cb < bytes_this_time; cb++ ) {
"1192
{
[e = _cb -> -> 0 `i `uc ]
[e $U 209  ]
[e :U 206 ]
{
[; ;vscp_firmware.c: 1193: vscp_omsg.data[ (4 + cb) ] =
[; ;vscp_firmware.c: 1194: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
"1194
[e = *U + &U . _vscp_omsg 4 * -> -> + -> 4 `i -> _cb `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_readRegister (1 -> + + -> *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i -> _byte `i -> _cb `i `uc ]
"1195
}
"1192
[e ++ _cb -> -> 1 `i `uc ]
[e :U 209 ]
[e $ < -> _cb `i -> _bytes_this_time `i 206  ]
[e :U 207 ]
"1195
}
[; ;vscp_firmware.c: 1195: }
[; ;vscp_firmware.c: 1198: vscp_sendEvent();
"1198
[e ( _vscp_sendEvent ..  ]
[; ;vscp_firmware.c: 1201: byte += bytes_this_time;
"1201
[e =+ _byte _bytes_this_time ]
[; ;vscp_firmware.c: 1204: vscp_omsg.data[0] += 1;
"1204
[e =+ *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux -> -> 1 `i `uc ]
"1206
}
[; ;vscp_firmware.c: 1206: } while (byte < bytes);
[e $ < -> _byte `i -> _bytes `i 203  ]
[e :U 202 ]
[; ;vscp_firmware.c: 1209: vscp_page_select = page_save;
"1209
[e = _vscp_page_select _page_save ]
"1211
}
[e :U 197 ]
[; ;vscp_firmware.c: 1211: }
[; ;vscp_firmware.c: 1212: break;
"1212
[e $U 124  ]
[; ;vscp_firmware.c: 1214: case 38:
"1214
[e :U 210 ]
[; ;vscp_firmware.c: 1216: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
"1216
[e $ ! == -> _vscp_nickname `i -> *U + &U . _vscp_imsg 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i 211  ]
{
"1218
[v _i `uc ~T0 @X0 1 a ]
"1219
[v _page_save `us ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 1218: uint8_t i;
[; ;vscp_firmware.c: 1219: uint16_t page_save;
[; ;vscp_firmware.c: 1222: page_save = vscp_page_select;
"1222
[e = _page_save _vscp_page_select ]
[; ;vscp_firmware.c: 1226: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
"1226
[e = _vscp_page_select -> | << -> *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i -> 8 `i -> *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i `us ]
[; ;vscp_firmware.c: 1228: for (i = vscp_imsg.data[ 3 ];
"1228
{
[e = _i *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 1231: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
[; ;vscp_firmware.c: 1232: i++) {
[e $U 215  ]
"1232
[e :U 212 ]
{
[; ;vscp_firmware.c: 1233: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
[; ;vscp_firmware.c: 1234: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ]);
"1234
[e = *U + &U . _vscp_omsg 4 * -> -> + -> 4 `i - -> _i `i -> *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux ( _vscp_writeRegister (2 , _i *U + &U . _vscp_imsg 5 * -> -> + -> 4 `i - -> _i `i -> *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
"1235
}
"1232
[e ++ _i -> -> 1 `i `uc ]
"1231
[e :U 215 ]
[e $ < -> _i `i + -> *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux `i - & -> . _vscp_imsg 0 `i -> 15 `i -> 4 `i 212  ]
[e :U 213 ]
"1235
}
[; ;vscp_firmware.c: 1235: }
[; ;vscp_firmware.c: 1238: vscp_page_select = page_save;
"1238
[e = _vscp_page_select _page_save ]
[; ;vscp_firmware.c: 1240: vscp_omsg.priority = 0x03;
"1240
[e = . _vscp_omsg 1 -> -> 3 `i `uc ]
[; ;vscp_firmware.c: 1241: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
"1241
[e = . _vscp_omsg 0 -> + + -> 128 `i -> 4 `i - & -> . _vscp_imsg 0 `i -> 15 `i -> 4 `i `uc ]
[; ;vscp_firmware.c: 1242: vscp_omsg.vscp_class = 0;
"1242
[e = . _vscp_omsg 2 -> -> 0 `i `us ]
[; ;vscp_firmware.c: 1243: vscp_omsg.vscp_type = 39;
"1243
[e = . _vscp_omsg 3 -> -> 39 `i `uc ]
[; ;vscp_firmware.c: 1244: vscp_omsg.data[0] = 0;
"1244
[e = *U + &U . _vscp_omsg 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux -> -> 0 `i `uc ]
[; ;vscp_firmware.c: 1245: vscp_omsg.data[1] = vscp_imsg.data[1];
"1245
[e = *U + &U . _vscp_omsg 4 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 1246: vscp_omsg.data[2] = vscp_imsg.data[2];
"1246
[e = *U + &U . _vscp_omsg 4 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 2 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 1247: vscp_omsg.data[3] = vscp_imsg.data[3];
"1247
[e = *U + &U . _vscp_omsg 4 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_omsg 4 `ui `ux *U + &U . _vscp_imsg 5 * -> -> -> 3 `i `ui `ux -> -> # *U &U . _vscp_imsg 5 `ui `ux ]
[; ;vscp_firmware.c: 1250: vscp_sendEvent();
"1250
[e ( _vscp_sendEvent ..  ]
"1252
}
[e :U 211 ]
[; ;vscp_firmware.c: 1252: }
[; ;vscp_firmware.c: 1253: break;
"1253
[e $U 124  ]
[; ;vscp_firmware.c: 1256: default:
"1256
[e :U 216 ]
[; ;vscp_firmware.c: 1258: break;
"1258
[e $U 124  ]
"1260
}
[; ;vscp_firmware.c: 1260: }
[e $U 124  ]
"787
[e :U 125 ]
[e [\ . _vscp_imsg 3 , $ -> -> 1 `i `uc 126
 , $ -> -> 2 `i `uc 127
 , $ -> -> 6 `i `uc 128
 , $ -> -> 8 `i `uc 129
 , $ -> -> 9 `i `uc 130
 , $ -> -> 11 `i `uc 134
 , $ -> -> 12 `i `uc 138
 , $ -> -> 23 `i `uc 141
 , $ -> -> 24 `i `uc 154
 , $ -> -> 25 `i `uc 163
 , $ -> -> 29 `i `uc 169
 , $ -> -> 30 `i `uc 171
 , $ -> -> 31 `i `uc 173
 , $ -> -> 33 `i `uc 194
 , $ -> -> 37 `i `uc 196
 , $ -> -> 38 `i `uc 210
 216 ]
"1260
[e :U 124 ]
"1262
}
[e :U 123 ]
[; ;vscp_firmware.c: 1262: }
[; ;vscp_firmware.c: 1264: }
"1264
[e :UE 122 ]
}
"1272
[v _vscp_sendEvent `(uc ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 1271: int8_t vscp_sendEvent(void)
[; ;vscp_firmware.c: 1272: {
[e :U _vscp_sendEvent ]
[f ]
"1273
[v _rv `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 1273: int8_t rv;
[; ;vscp_firmware.c: 1275: if ( !(rv = sendVSCPFrame( vscp_omsg.vscp_class,
[; ;vscp_firmware.c: 1276: vscp_omsg.vscp_type,
[; ;vscp_firmware.c: 1277: vscp_nickname,
[; ;vscp_firmware.c: 1278: vscp_omsg.priority,
[; ;vscp_firmware.c: 1279: (vscp_omsg.flags & 0x0f),
[; ;vscp_firmware.c: 1280: vscp_omsg.data ) ) ) {
"1280
[e $ ! ! != -> = _rv ( _sendVSCPFrame (4 , , , , , . _vscp_omsg 2 . _vscp_omsg 3 _vscp_nickname . _vscp_omsg 1 -> & -> . _vscp_omsg 0 `i -> 15 `i `uc &U . _vscp_omsg 4 `i -> -> -> 0 `i `uc `i 218  ]
{
[; ;vscp_firmware.c: 1281: vscp_errorcnt++;
"1281
[e ++ _vscp_errorcnt -> -> 1 `i `uc ]
"1282
}
[e :U 218 ]
[; ;vscp_firmware.c: 1282: }
[; ;vscp_firmware.c: 1284: return rv;
"1284
[e ) _rv ]
[e $UE 217  ]
[; ;vscp_firmware.c: 1285: }
"1285
[e :UE 217 ]
}
"1292
[v _vscp_getEvent `(uc ~T0 @X0 1 ef ]
{
[; ;vscp_firmware.c: 1291: int8_t vscp_getEvent(void)
[; ;vscp_firmware.c: 1292: {
[e :U _vscp_getEvent ]
[f ]
"1293
[v _rv `uc ~T0 @X0 1 a ]
[; ;vscp_firmware.c: 1293: int8_t rv;
[; ;vscp_firmware.c: 1299: if (vscp_imsg.flags & 0x80) return !0;
"1299
[e $ ! != & -> . _vscp_imsg 0 `i -> 128 `i -> 0 `i 220  ]
[e ) -> -> ! != -> 0 `i -> 0 `i `i `uc ]
[e $UE 219  ]
[e :U 220 ]
[; ;vscp_firmware.c: 1302: if ((rv = getVSCPFrame(&vscp_imsg.vscp_class,
[; ;vscp_firmware.c: 1303: &vscp_imsg.vscp_type,
[; ;vscp_firmware.c: 1304: &vscp_imsg.oaddr,
[; ;vscp_firmware.c: 1305: &vscp_imsg.priority,
[; ;vscp_firmware.c: 1306: &vscp_imsg.flags,
[; ;vscp_firmware.c: 1307: vscp_imsg.data))) {
"1307
[e $ ! != -> = _rv ( _getVSCPFrame (4 , , , , , &U . _vscp_imsg 2 &U . _vscp_imsg 3 &U . _vscp_imsg 4 &U . _vscp_imsg 1 &U . _vscp_imsg 0 &U . _vscp_imsg 5 `i -> -> -> 0 `i `uc `i 221  ]
{
[; ;vscp_firmware.c: 1309: vscp_imsg.flags |= 0x80;
"1309
[e =| . _vscp_imsg 0 -> -> 128 `i `uc ]
"1310
}
[e :U 221 ]
[; ;vscp_firmware.c: 1310: }
[; ;vscp_firmware.c: 1312: return rv;
"1312
[e ) _rv ]
[e $UE 219  ]
[; ;vscp_firmware.c: 1314: }
"1314
[e :UE 219 ]
}
